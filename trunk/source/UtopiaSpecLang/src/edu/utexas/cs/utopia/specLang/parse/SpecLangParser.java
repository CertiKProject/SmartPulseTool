
//----------------------------------------------------
// The following code was generated by jh-javacup-1.0 20160720
// Thu May 21 12:33:05 CDT 2020
//----------------------------------------------------

package edu.utexas.cs.utopia.specLang.parse;

import com.github.jhoenicke.javacup.runtime.*;
import de.uni_freiburg.informatik.ultimate.ltl2aut.ast.*;
import ast.*;
import java.util.ArrayList;
import java.math.BigInteger;

/** jh-javacup-1.0 20160720 generated parser.
  * @version Thu May 21 12:33:05 CDT 2020
  */
public class SpecLangParser extends com.github.jhoenicke.javacup.runtime.LRParser {

  /** Default constructor. */
  public SpecLangParser() {super();}

  /** Constructor which sets the default scanner. */
  public SpecLangParser(com.github.jhoenicke.javacup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SpecLangParser(com.github.jhoenicke.javacup.runtime.Scanner s, com.github.jhoenicke.javacup.runtime.SymbolFactory sf) {super(s,sf);}
  /** Return action table */
  protected String[] action_table() { 
    return new String[] {
    "\206\000\002\004\002\004\003\004\003\004\003" +
    "\004\003\004\003\004\003\004\004\004\004\004" +
    "\004\004\002\004\006\004\006\004\006\004\006" +
    "\004\004\004\004\004\004\004\004\004\004\004" +
    "\003\004\003\004\003\004\003\004\003\004\003" +
    "\004\003\004\003\004\003\005\003\010\004\010" +
    "\001\007\001\007\003\006\003\006\002\003\003" +
    "\003\003\003\003\003\003\003\003\003\003\003" +
    "\003\003\003\003\003\003\003\003\002\002\004" +
    "\002\007\002\004\002\004\002\006\002\010\002" +
    "\004\002\003\002\003\002\003\002\003\002\003" +
    "\002\002\002\003\002\001\002\001\002\001\002" +
    "\001\001\001\256\u076a\u070e\u015a\u0158\u012a\u06b2\u0126" +
    "\u0124\u0122\366\360\334\332\326\u01de\324\320\312" +
    "\306\276\u038c\u0e00\u0656\u05fa\u059e\u0da8\u01da\u01c6\u01c4" +
    "\u01c2\u01c0\u01be\u01a8\u0190\u018c\256\u0d8a\u01d8\u01c0\u01b6" +
    "\u01a4\u01f0\256\u0542\u04e6\u048a\u042e\u03d2\u0376\u0d6c\u0dea" +
    "\u0dd4\u0dbe\u07c6\302\u018c\u0d4e\u0d30\u0d12\u0cf4\u0cd6\u0cb8" +
    "\u0c9a\u0c7c\u0942\u090c\u01c2\u0c5e\u01ba\u031c\274\272\270" +
    "\u08d6\u07fe\u0df6\u083a\u030c\u030a\u0200\u0176\u0e38\u0c40\u0c22" +
    "\u0c04\u0be6\u0bc8\u0baa\u0b8c\u0b6e\u0b50\u01a2\u018a\u0958\u0e32" +
    "\u0914\u0316\u08a0\u02e6\u02e0\u01a0\276\u02da\u02aa\u02a4\u029e" +
    "\u026e\u0268\u0262\u0232\u022c\u0226\u01f6\u0b32\u018c\u0184\u0156" +
    "\u0b14\u014e\u0af6\u0120\u0ad8\u0118\u0aba\352\u0a9c\u014e\u015e" +
    "\u086a\u08de\u0816\u07e0\312\u01b2\u0834\u015c\u0e3c\u076a\u070e" +
    "\u06b2\u0656\u0a06\u09e8\u09ca\u09ac\u098e\u0382\u08a8\u0872\u0344" +
    "\u0e2c\u0996\u094a\u035a\u019e\u0140\u05fa\u059e\u01da\u0542\u03d2" +
    "\u0a7e\u0a60\u0a42\u0a24\u015a\342\342\u04e6\264\u0e30\u0246" +
    "\u048a\u042e\u0ea6\000\000\000\000\000\000\000\000" +
    "\000\000\000\000\000\000\000\000\000\000\000" +
    "\000\000\000\000\000\000\000\000\000\000\000" +
    "\000\000\000\000\000\000\000\000\000\000\000" +
    "\000\000\000\000\000\000\000\000\000\000\000" +
    "\000\000\000\000\000\000\000\000\000\000\000" +
    "\000\000\000\000\000\000\000\000\000\000\000" +
    "\000\000\000\000\000\000\000\000\000\000\000" +
    "\000\000\000\000\000\000\000\000\000\000\000" +
    "\000\000\000\000\000\000\000\000\000\000\000" +
    "\000\000\000\000\000\000\000\000\000\000\000" +
    "\000\000\000\000\000\000\000\000\000\000\000" +
    "\000\000\000\000\000\000\000\000\000\000\000" +
    "\000\000\000\000\000\000\000\000\000\000\000" +
    "\000\000\000\000\000\000\000\000\000\000\000" +
    "\000\000\000\000\000\000\000\000\000\000\000" +
    "\000\256\001\052\002\043\201\043\203\043\205" +
    "\251\201\251\203\251\205\043\207\110\311\107" +
    "\307\106\305\023\123\145\u010d\066\267\066\102" +
    "\022\121\043\211\021\117\204\u013b\251\211\020" +
    "\115\043\213\017\113\015\065\251\213\014\065" +
    "\013\065\247\201\247\203\247\301\246\u0151\174" +
    "\201\174\203\174\205\204\317\204\321\012\065" +
    "\204\323\204\325\011\065\043\215\043\217\043" +
    "\221\251\215\251\217\251\221\174\211\247\213" +
    "\066\102\043\153\043\223\174\213\251\153\251" +
    "\223\172\201\172\203\172\205\145\153\170\201" +
    "\170\203\170\205\010\065\007\065\006\065\246" +
    "\u0153\004\061\247\215\247\217\247\221\172\211" +
    "\174\215\174\217\174\221\170\211\172\213\247" +
    "\153\247\223\233\100\170\213\174\153\174\223" +
    "\166\201\166\203\166\205\176\104\164\201\164" +
    "\203\164\205\003\057\002\055\245\106\207\u013f" +
    "\177\u0137\172\215\172\217\172\221\166\211\170" +
    "\215\170\217\170\221\164\211\166\213\172\153" +
    "\172\223\120\367\164\213\170\153\170\223\163" +
    "\201\163\203\163\205\233\100\162\201\162\203" +
    "\162\205\067\271\134\076\042\107\176\u0135\041" +
    "\107\166\215\166\217\166\221\163\211\164\215" +
    "\164\217\164\221\162\211\163\213\166\153\166" +
    "\223\040\107\162\213\164\153\164\223\104\201" +
    "\104\203\104\205\120\371\102\201\102\203\102" +
    "\205\037\107\036\107\035\107\034\107\033\107" +
    "\163\215\163\217\163\221\104\211\162\215\162" +
    "\217\162\221\102\211\104\213\163\153\163\223" +
    "\016\107\102\213\162\153\162\223\051\201\051" +
    "\203\051\205\160\201\160\203\160\301\205\u013d" +
    "\232\153\144\153\133\153\050\153\117\363\104" +
    "\215\104\217\104\221\051\211\102\215\102\217" +
    "\102\221\047\153\051\213\104\153\104\223\160" +
    "\213\046\153\102\153\102\223\157\201\157\203" +
    "\157\301\156\201\156\203\156\301\155\201\155" +
    "\203\155\301\045\153\032\153\236\u014d\051\215" +
    "\051\217\051\221\160\215\160\217\160\221\117" +
    "\365\253\u015b\157\213\051\153\051\223\156\213" +
    "\160\153\160\223\155\213\253\345\253\347\253" +
    "\351\154\201\154\203\154\301\153\201\153\203" +
    "\153\301\152\201\152\203\152\301\157\215\157" +
    "\217\157\221\156\215\156\217\156\221\155\215" +
    "\155\217\155\221\157\153\157\223\154\213\156" +
    "\153\156\223\153\213\155\153\155\223\152\213" +
    "\256\001\256\001\256\001\151\201\151\203\151" +
    "\301\150\201\150\203\150\301\147\201\147\203" +
    "\147\301\154\215\154\217\154\221\153\215\153" +
    "\217\153\221\152\215\152\217\152\221\154\153" +
    "\154\223\151\213\153\153\153\223\150\213\152" +
    "\153\152\223\147\213\256\001\256\001\256\001" +
    "\146\201\146\203\146\301\143\201\143\203\143" +
    "\301\142\201\142\203\142\301\151\215\151\217" +
    "\151\221\150\215\150\217\150\221\147\215\147" +
    "\217\147\221\151\153\151\223\146\213\150\153" +
    "\150\223\143\213\147\153\147\223\142\213\116" +
    "\357\115\353\256\001\140\201\140\203\140\301" +
    "\105\201\105\203\105\301\256\001\256\001\256" +
    "\001\146\215\146\217\146\221\143\215\143\217" +
    "\143\221\142\215\142\217\142\221\146\153\146" +
    "\223\140\213\143\153\143\223\105\213\142\153" +
    "\142\223\225\134\256\001\256\001\225\134\256" +
    "\001\116\361\115\355\256\001\225\345\225\347" +
    "\225\351\231\u0149\256\001\140\215\140\217\140" +
    "\221\105\215\105\217\105\221\231\345\231\347" +
    "\231\351\140\153\140\223\060\003\105\153\105" +
    "\223\256\001\256\001\060\005\060\007\222\126" +
    "\024\125\256\001\222\126\256\001\060\011\060" +
    "\013\256\001\222\126\222\126\222\126\024\127" +
    "\024\131\024\133\024\135\024\137\222\317\222" +
    "\321\024\141\222\323\222\325\060\015\060\017" +
    "\060\021\060\023\060\025\060\027\060\031\256" +
    "\001\060\033\256\001\256\001\256\001\060\035" +
    "\060\037\060\041\060\043\060\045\060\047\057" +
    "\003\240\142\256\001\256\001\240\142\057\005" +
    "\057\007\256\001\256\001\240\142\240\142\240" +
    "\142\057\011\057\013\256\001\240\u014f\240\142" +
    "\240\142\240\142\256\001\240\142\240\142\240" +
    "\142\240\142\240\142\240\142\240\142\240\142" +
    "\057\015\057\017\057\021\057\023\057\025\057" +
    "\027\057\031\256\001\057\033\256\001\256\001" +
    "\256\001\057\035\057\037\057\041\057\043\057" +
    "\045\057\047\056\003\255\154\256\001\256\001" +
    "\255\154\056\005\056\007\256\001\256\001\255" +
    "\154\255\154\255\154\056\011\056\013\256\001" +
    "\256\001\255\154\255\154\255\154\256\001\255" +
    "\154\255\154\255\154\255\154\255\154\255\154" +
    "\255\154\255\154\056\015\056\017\056\021\056" +
    "\023\056\025\056\027\056\031\256\001\056\033" +
    "\256\001\256\001\256\001\056\035\056\037\056" +
    "\041\056\043\056\045\056\047\055\003\254\144" +
    "\256\001\256\001\254\144\055\005\055\007\256" +
    "\001\256\001\254\144\254\144\254\144\055\011" +
    "\055\013\256\001\256\001\254\144\254\144\254" +
    "\144\256\001\254\144\254\144\254\144\254\144" +
    "\254\144\254\144\254\144\254\144\055\015\055" +
    "\017\055\021\055\023\055\025\055\027\055\031" +
    "\256\001\055\033\256\001\256\001\256\001\055" +
    "\035\055\037\055\041\055\043\055\045\055\047" +
    "\054\003\250\152\256\001\256\001\250\152\054" +
    "\005\054\007\256\001\256\001\250\152\250\152" +
    "\250\152\054\011\054\013\256\001\256\001\250" +
    "\152\250\152\250\152\256\001\250\152\250\152" +
    "\250\152\250\152\250\152\250\152\250\152\250" +
    "\152\054\015\054\017\054\021\054\023\054\025" +
    "\054\027\054\031\256\001\054\033\256\001\256" +
    "\001\256\001\054\035\054\037\054\041\054\043" +
    "\054\045\054\047\053\003\237\156\256\001\256" +
    "\001\237\156\053\005\053\007\256\001\256\001" +
    "\237\156\237\156\237\156\053\011\053\013\256" +
    "\001\256\001\237\156\237\156\237\156\256\001" +
    "\237\156\237\156\237\156\237\156\237\156\237" +
    "\156\237\156\237\156\053\015\053\017\053\021" +
    "\053\023\053\025\053\027\053\031\256\001\053" +
    "\033\256\001\256\001\256\001\053\035\053\037" +
    "\053\041\053\043\053\045\053\047\030\003\235" +
    "\150\256\001\256\001\235\150\030\005\030\007" +
    "\256\001\256\001\235\150\235\150\235\150\030" +
    "\011\030\013\256\001\256\001\235\150\235\150" +
    "\235\150\256\001\235\150\235\150\235\150\235" +
    "\150\235\150\235\150\235\150\235\150\030\015" +
    "\030\017\030\021\030\023\030\025\030\027\030" +
    "\031\256\001\030\033\256\001\256\001\256\001" +
    "\030\035\030\037\030\041\030\043\030\045\030" +
    "\047\027\003\234\146\256\001\256\001\234\146" +
    "\027\005\027\007\256\001\256\001\234\146\234" +
    "\146\234\146\027\011\027\013\256\001\256\001" +
    "\234\146\234\146\234\146\256\001\234\146\234" +
    "\146\234\146\234\146\234\146\234\146\234\146" +
    "\234\146\027\015\027\017\027\021\027\023\027" +
    "\025\027\027\027\031\256\001\027\033\256\001" +
    "\256\001\256\001\027\035\027\037\027\041\027" +
    "\043\027\045\027\047\026\003\214\170\256\001" +
    "\256\001\214\170\026\005\026\007\256\001\256" +
    "\001\214\170\214\170\214\170\026\011\026\013" +
    "\256\001\256\001\214\170\214\170\214\170\256" +
    "\001\214\170\214\170\214\170\214\170\214\170" +
    "\214\170\214\170\214\170\026\015\026\017\026" +
    "\021\026\023\026\025\026\027\026\031\256\001" +
    "\026\033\256\001\256\001\256\001\026\035\026" +
    "\037\026\041\026\043\026\045\026\047\005\003" +
    "\213\166\256\001\256\001\213\166\005\005\005" +
    "\007\256\001\256\001\213\166\213\166\213\166" +
    "\005\011\005\013\256\001\256\001\213\166\213" +
    "\166\213\166\256\001\213\166\213\166\213\166" +
    "\213\166\213\166\213\166\213\166\213\166\005" +
    "\015\005\017\005\021\005\023\005\025\005\027" +
    "\005\031\256\001\005\033\256\001\256\001\256" +
    "\001\005\035\005\037\005\041\005\043\005\045" +
    "\005\047\001\003\212\164\256\001\256\001\212" +
    "\164\001\005\001\007\256\001\256\001\212\164" +
    "\212\164\212\164\001\011\001\013\256\001\256" +
    "\001\212\164\212\164\212\164\256\001\212\323" +
    "\212\325\212\164\212\164\212\164\212\164\212" +
    "\164\212\164\001\015\001\017\001\021\001\023" +
    "\001\025\001\027\001\031\256\001\001\033\256" +
    "\001\256\001\256\001\001\035\001\037\001\041" +
    "\001\043\001\045\001\047\000\003\211\162\256" +
    "\001\256\001\211\162\000\005\000\007\256\001" +
    "\256\001\211\162\211\162\211\162\000\011\000" +
    "\013\256\001\256\001\211\162\211\162\211\162" +
    "\256\001\211\323\211\325\211\162\211\162\211" +
    "\162\211\162\211\162\211\162\000\015\000\017" +
    "\000\021\000\023\000\025\000\027\000\031\256" +
    "\001\000\033\256\001\256\001\256\001\000\035" +
    "\000\037\000\041\000\043\000\045\000\047\065" +
    "\206\065\206\256\001\256\001\065\206\256\001" +
    "\256\001\256\001\256\001\065\206\065\206\065" +
    "\206\256\001\256\001\203\u0139\065\206\065\206" +
    "\065\206\065\206\256\001\065\206\065\206\065" +
    "\206\065\206\065\206\065\206\065\206\065\206" +
    "\112\313\112\176\203\317\203\321\112\176\203" +
    "\323\203\325\065\206\256\001\112\176\112\176" +
    "\112\176\256\001\202\u0101\256\001\112\315\112" +
    "\176\112\176\112\176\256\001\112\176\112\176" +
    "\112\176\112\176\112\176\112\176\112\176\112" +
    "\176\206\160\202\317\202\321\206\160\202\323" +
    "\202\325\114\343\256\001\206\160\206\160\206" +
    "\160\114\345\114\347\114\351\256\001\206\160" +
    "\206\160\206\160\256\001\206\160\206\160\206" +
    "\160\206\160\206\160\206\160\206\160\206\160" +
    "\200\174\256\001\256\001\200\174\224\132\256" +
    "\001\256\001\224\132\200\174\200\174\200\174" +
    "\256\001\224\345\224\132\224\132\200\174\200" +
    "\174\200\174\256\001\200\174\200\174\200\174" +
    "\200\174\200\174\200\174\200\174\200\174\141" +
    "\172\256\001\256\001\141\172\223\130\256\001" +
    "\256\001\223\130\141\172\141\172\141\172\256" +
    "\001\223\130\223\130\223\130\141\172\141\172" +
    "\141\172\256\001\141\172\141\172\141\172\141" +
    "\172\141\172\141\172\141\172\141\172\111\200" +
    "\256\001\256\001\111\200\201\136\256\001\256" +
    "\001\201\136\111\200\111\200\111\200\256\001" +
    "\201\136\201\136\201\136\111\200\111\200\111" +
    "\200\256\001\111\200\111\200\111\200\111\200" +
    "\111\200\111\200\111\200\111\200\101\204\256" +
    "\001\256\001\101\204\137\140\256\001\256\001" +
    "\137\140\101\204\101\204\101\204\256\001\137" +
    "\140\137\140\137\140\101\204\101\204\101\204" +
    "\256\001\101\204\101\204\101\204\101\204\101" +
    "\204\101\204\101\204\101\204\100\202\256\001" +
    "\256\001\100\202\230\u0147\256\001\256\001\256" +
    "\001\100\202\100\202\100\202\135\u0101\230\345" +
    "\230\347\230\351\100\202\100\202\100\202\256" +
    "\001\100\202\100\202\100\202\100\202\100\202" +
    "\100\202\100\202\100\202\135\317\135\321\256" +
    "\001\135\323\135\325\135\327\135\331\135\333" +
    "\135\335\135\337\135\341\221\124\256\001\256" +
    "\001\221\124\227\u0145\256\001\256\001\256\001" +
    "\221\124\221\124\221\124\256\001\227\345\227" +
    "\347\227\351\220\120\221\317\221\321\220\120" +
    "\221\323\221\325\256\001\256\001\220\120\220" +
    "\120\220\120\256\001\256\001\256\001\256\001" +
    "\217\116\220\317\220\321\217\116\220\323\220" +
    "\325\256\001\256\001\217\116\217\116\217\116" +
    "\256\001\256\001\256\001\256\001\216\122\217" +
    "\317\217\321\216\122\217\323\217\325\256\001" +
    "\256\001\216\122\216\122\216\122\256\001\256" +
    "\001\256\001\256\001\215\114\216\317\216\321" +
    "\215\114\216\323\216\325\256\001\256\001\215" +
    "\114\215\114\215\114\244\040\256\001\256\001" +
    "\256\001\244\040\215\317\215\321\256\001\215" +
    "\323\215\325\244\040\244\040\244\040\244\040" +
    "\244\040\243\034\256\001\244\040\256\001\243" +
    "\034\256\001\256\001\256\001\256\001\256\001" +
    "\243\034\243\034\243\034\243\034\243\034\242" +
    "\036\256\001\243\034\256\001\242\036\256\001" +
    "\256\001\256\001\256\001\256\001\242\036\242" +
    "\036\242\036\242\036\242\036\241\032\256\001" +
    "\242\036\256\001\241\032\256\001\256\001\256" +
    "\001\256\001\256\001\241\032\241\032\241\032" +
    "\241\032\241\032\175\052\256\001\241\032\256" +
    "\001\175\052\256\001\256\001\256\001\256\001" +
    "\256\001\175\052\175\052\175\052\175\052\175" +
    "\052\173\050\256\001\175\052\256\001\173\050" +
    "\256\001\256\001\256\001\256\001\256\001\173" +
    "\050\173\050\173\050\173\050\173\050\171\044" +
    "\256\001\173\050\256\001\171\044\256\001\256" +
    "\001\256\001\256\001\256\001\171\044\171\044" +
    "\171\044\171\044\171\044\167\046\256\001\171" +
    "\044\256\001\167\046\256\001\256\001\256\001" +
    "\256\001\256\001\167\046\167\046\167\046\167" +
    "\046\167\046\165\042\256\001\167\046\256\001" +
    "\165\042\256\001\256\001\256\001\256\001\256" +
    "\001\165\042\165\042\165\042\165\042\165\042" +
    "\161\110\256\001\165\042\256\001\161\110\256" +
    "\001\256\001\256\001\256\001\256\001\161\110" +
    "\161\110\161\110\161\110\161\110\132\026\256" +
    "\001\161\110\256\001\132\026\256\001\256\001" +
    "\256\001\256\001\256\001\132\026\132\026\132" +
    "\026\132\026\132\026\131\024\256\001\132\026" +
    "\256\001\131\024\256\001\256\001\256\001\256" +
    "\001\256\001\131\024\131\024\131\024\131\024" +
    "\131\024\130\022\256\001\131\024\256\001\130" +
    "\022\256\001\256\001\256\001\256\001\256\001" +
    "\130\022\130\022\130\022\130\022\130\022\127" +
    "\014\256\001\130\022\256\001\127\014\256\001" +
    "\256\001\256\001\256\001\256\001\127\014\127" +
    "\014\127\014\127\014\127\014\126\012\256\001" +
    "\127\014\256\001\126\012\256\001\256\001\256" +
    "\001\256\001\256\001\126\127\126\131\126\133" +
    "\126\135\126\137\125\010\256\001\126\141\256" +
    "\001\125\010\256\001\256\001\256\001\256\001" +
    "\256\001\125\127\125\131\125\133\125\010\125" +
    "\010\124\006\256\001\125\141\256\001\124\006" +
    "\256\001\256\001\256\001\256\001\256\001\124" +
    "\127\124\131\124\006\124\006\124\006\123\020" +
    "\256\001\124\141\256\001\123\020\256\001\256" +
    "\001\256\001\256\001\256\001\123\020\123\020" +
    "\123\020\123\020\123\020\122\016\256\001\123" +
    "\020\256\001\122\016\256\001\256\001\256\001" +
    "\256\001\256\001\122\016\122\016\122\016\122" +
    "\016\122\016\103\112\256\001\122\016\256\001" +
    "\103\112\256\001\256\001\256\001\256\001\256" +
    "\001\103\112\103\112\103\112\103\112\103\112" +
    "\077\056\256\001\103\112\256\001\077\056\256" +
    "\001\256\001\256\001\256\001\256\001\077\056" +
    "\077\056\077\056\077\056\077\056\076\072\256" +
    "\001\077\056\256\001\076\072\256\001\256\001" +
    "\256\001\256\001\256\001\076\072\076\072\076" +
    "\072\076\072\076\072\075\070\256\001\076\072" +
    "\256\001\075\070\256\001\256\001\256\001\256" +
    "\001\256\001\075\070\075\070\075\070\075\070" +
    "\075\070\074\066\256\001\075\070\256\001\074" +
    "\066\256\001\256\001\256\001\256\001\256\001" +
    "\074\066\074\066\074\066\074\066\074\066\073" +
    "\064\256\001\074\066\256\001\073\064\256\001" +
    "\256\001\256\001\256\001\256\001\073\064\073" +
    "\064\073\064\073\064\073\064\072\062\256\001" +
    "\073\064\256\001\072\062\256\001\256\001\256" +
    "\001\256\001\256\001\072\062\072\062\072\062" +
    "\072\062\072\062\071\060\256\001\072\062\256" +
    "\001\071\060\256\001\256\001\256\001\256\001" +
    "\256\001\071\060\071\060\071\060\071\060\071" +
    "\060\070\054\256\001\071\060\256\001\070\054" +
    "\256\001\256\001\256\001\256\001\256\001\070" +
    "\054\070\054\070\054\070\054\070\054\061\074" +
    "\256\001\070\054\256\001\061\074\256\001\256" +
    "\001\256\001\256\001\256\001\061\074\061\074" +
    "\061\074\061\074\061\074\044\004\256\001\061" +
    "\074\256\001\044\004\256\001\256\001\256\001" +
    "\256\001\256\001\044\004\044\004\044\004\044" +
    "\004\044\004\031\030\256\001\044\004\256\001" +
    "\031\030\256\001\256\001\256\001\256\001\256" +
    "\001\031\030\031\030\031\030\031\030\031\030" +
    "\064\265\256\001\031\030\256\001\256\001\256" +
    "\001\064\127\064\131\064\133\064\135\064\137" +
    "\063\263\256\001\064\141\256\001\256\001\256" +
    "\001\063\127\063\131\063\133\063\135\063\137" +
    "\062\261\256\001\063\141\256\001\256\001\256" +
    "\001\062\127\062\131\062\133\062\135\062\137" +
    "\025\143\256\001\062\141\256\001\256\001\256" +
    "\001\025\127\025\131\025\133\025\135\025\137" +
    "\113\317\113\321\025\141\113\323\113\325\113" +
    "\327\113\331\113\333\113\335\113\337\113\341" +
    "\226\u0143\256\001\256\001\136\u0103\256\001\256" +
    "\001\121\373\256\001\226\345\226\347\226\351" +
    "\136\345\136\347\136\351\121\345\121\347\121" +
    "\351\252\u0159\252\317\252\321\256\001\252\323" +
    "\252\325\210\u0141\210\317\210\321\256\001\210" +
    "\323\210\325\256\001\256\001\256\001\256\001" +
    "\256\001\256\001\256\001\256\001\256\001\256" +
    "\001\256\001\256\001\256\001\256\001\256\001" +
    "\256\001\256\001\256\001\256\001\256\001\256" +
    "\001\256\001\256\001\256\001\256\001\256\001" +
    "\256\001\265\235\225\112\113\253\167\246\245" +
    "\243\241\240\237\236\235\256\176\112\252\066" +
    "\112\222\245\165\163\161\205\064\255\254\253" +
    "\252\251\250\247\246\177\127\063\062\061\051" +
    "\174\066\155\135\133\077\062\040\120\066\066" +
    "\066\066\126\176\176\117\116\115\067\207\177" +
    "\112\113\231\133\125\127\236\112\113\230\112" +
    "\113\227\112\113\226\112\113\225\112\113\224" +
    "\112\113\223\112\113\137\067\112\135\136\124" +
    "\234\123\232\226\021\066\224\222\220\216\214" +
    "\212\210\206\204\202\022\122\124\121\116\064" +
    "\113\063\110\062\105\031\076\112\113\121\112" +
    "\113\114\112\221\112\220\112\217\112\216\112" +
    "\215\112\214\112\213\112\212\112\211\112\210" +
    "\112\204\025\016\112\203\112\202\112\141\024" +
    "\042\041\040\037\036\017\035\001\034\033\077" +
    "\076\075\074\073\072\071\070\044"
    };
  }

  /** Instance of action encapsulation class. */
  protected CUP$SpecLangParser$action action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SpecLangParser$action(this);
    }

  /** Invoke a user supplied parse action. */
  public com.github.jhoenicke.javacup.runtime.Symbol do_action(
    int                        act_num,
    java.util.ArrayList        stack)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$do_action(act_num, stack);
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SpecLangParser$action {
  private final SpecLangParser parser;

  /** Constructor */
  CUP$SpecLangParser$action(SpecLangParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final com.github.jhoenicke.javacup.runtime.Symbol CUP$do_action(
    int                        CUP$act_num,
    java.util.ArrayList            CUP$stack)
    throws java.lang.Exception
    {
      /* Stack size for peeking into the stack */
      int CUP$size = CUP$stack.size();

      /* select the action based on the action number */
      switch (CUP$act_num)
        {
          // $START ::= texpr EOF 
          case 0:
            {
              Object RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol CUP$rhs$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 2));
              int CUP$rhsleft = CUP$rhs$.left;
              int CUP$rhsright = CUP$rhs$.right;
              AstNode CUP$rhs = (AstNode) CUP$rhs$.value;
RESULT = CUP$rhs;
/* ACCEPT */
parser.done_parsing();
              return parser.getSymbolFactory().newSymbol("$START", 0, CUP$rhs$, ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1)), RESULT);
            }

          // texpr ::= INV event_constraint 
          case 1:
            {
              AstNode RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol c$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1));
              int cleft = c$.left;
              int cright = c$.right;
              AstNode c = (AstNode) c$.value;
 RESULT = new Event(EventType.inv, c); 
              return parser.getSymbolFactory().newSymbol("texpr", 4, ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 2)), c$, RESULT);
            }

          // texpr ::= texpr AND texpr 
          case 2:
            {
              AstNode RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol t2$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1));
              int t2left = t2$.left;
              int t2right = t2$.right;
              AstNode t2 = (AstNode) t2$.value;
              com.github.jhoenicke.javacup.runtime.Symbol t1$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 3));
              int t1left = t1$.left;
              int t1right = t1$.right;
              AstNode t1 = (AstNode) t1$.value;
 RESULT = new BinaryTemporalOperator(BinaryTemporalType.and, t1, t2); 
              return parser.getSymbolFactory().newSymbol("texpr", 4, t1$, t2$, RESULT);
            }

          // texpr ::= texpr OR texpr 
          case 3:
            {
              AstNode RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol t2$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1));
              int t2left = t2$.left;
              int t2right = t2$.right;
              AstNode t2 = (AstNode) t2$.value;
              com.github.jhoenicke.javacup.runtime.Symbol t1$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 3));
              int t1left = t1$.left;
              int t1right = t1$.right;
              AstNode t1 = (AstNode) t1$.value;
 RESULT = new BinaryTemporalOperator(BinaryTemporalType.or, t1, t2); 
              return parser.getSymbolFactory().newSymbol("texpr", 4, t1$, t2$, RESULT);
            }

          // texpr ::= texpr IMPLIES texpr 
          case 4:
            {
              AstNode RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol t2$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1));
              int t2left = t2$.left;
              int t2right = t2$.right;
              AstNode t2 = (AstNode) t2$.value;
              com.github.jhoenicke.javacup.runtime.Symbol t1$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 3));
              int t1left = t1$.left;
              int t1right = t1$.right;
              AstNode t1 = (AstNode) t1$.value;
 RESULT = new BinaryTemporalOperator(BinaryTemporalType.implies, t1, t2); 
              return parser.getSymbolFactory().newSymbol("texpr", 4, t1$, t2$, RESULT);
            }

          // texpr ::= texpr SEQ texpr 
          case 5:
            {
              AstNode RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol t2$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1));
              int t2left = t2$.left;
              int t2right = t2$.right;
              AstNode t2 = (AstNode) t2$.value;
              com.github.jhoenicke.javacup.runtime.Symbol t1$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 3));
              int t1left = t1$.left;
              int t1right = t1$.right;
              AstNode t1 = (AstNode) t1$.value;
 RESULT = new BinaryTemporalOperator(BinaryTemporalType.seq, t1, t2); 
              return parser.getSymbolFactory().newSymbol("texpr", 4, t1$, t2$, RESULT);
            }

          // texpr ::= texpr UNTIL texpr 
          case 6:
            {
              AstNode RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol t2$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1));
              int t2left = t2$.left;
              int t2right = t2$.right;
              AstNode t2 = (AstNode) t2$.value;
              com.github.jhoenicke.javacup.runtime.Symbol t1$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 3));
              int t1left = t1$.left;
              int t1right = t1$.right;
              AstNode t1 = (AstNode) t1$.value;
 RESULT = new BinaryTemporalOperator(BinaryTemporalType.until, t1, t2); 
              return parser.getSymbolFactory().newSymbol("texpr", 4, t1$, t2$, RESULT);
            }

          // texpr ::= texpr RELEASE texpr 
          case 7:
            {
              AstNode RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol t2$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1));
              int t2left = t2$.left;
              int t2right = t2$.right;
              AstNode t2 = (AstNode) t2$.value;
              com.github.jhoenicke.javacup.runtime.Symbol t1$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 3));
              int t1left = t1$.left;
              int t1right = t1$.right;
              AstNode t1 = (AstNode) t1$.value;
 RESULT = new BinaryTemporalOperator(BinaryTemporalType.release, t1, t2); 
              return parser.getSymbolFactory().newSymbol("texpr", 4, t1$, t2$, RESULT);
            }

          // texpr ::= ALWAYS LPAR texpr RPAR 
          case 8:
            {
              AstNode RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol t$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 2));
              int tleft = t$.left;
              int tright = t$.right;
              AstNode t = (AstNode) t$.value;
 RESULT = new UnaryTemporalOperator(UnaryTemporalType.always, t); 
              return parser.getSymbolFactory().newSymbol("texpr", 4, ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 4)), ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1)), RESULT);
            }

          // texpr ::= EVENTUALLY LPAR texpr RPAR 
          case 9:
            {
              AstNode RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol t$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 2));
              int tleft = t$.left;
              int tright = t$.right;
              AstNode t = (AstNode) t$.value;
 RESULT = new UnaryTemporalOperator(UnaryTemporalType.eventually, t); 
              return parser.getSymbolFactory().newSymbol("texpr", 4, ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 4)), ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1)), RESULT);
            }

          // texpr ::= NEXT LPAR texpr RPAR 
          case 10:
            {
              AstNode RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol t$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 2));
              int tleft = t$.left;
              int tright = t$.right;
              AstNode t = (AstNode) t$.value;
 RESULT = new UnaryTemporalOperator(UnaryTemporalType.next, t); 
              return parser.getSymbolFactory().newSymbol("texpr", 4, ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 4)), ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1)), RESULT);
            }

          // texpr ::= NEG texpr 
          case 11:
            {
              AstNode RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol t$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1));
              int tleft = t$.left;
              int tright = t$.right;
              AstNode t = (AstNode) t$.value;
 RESULT = new UnaryTemporalOperator(UnaryTemporalType.neg, t); 
              return parser.getSymbolFactory().newSymbol("texpr", 4, ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 2)), t$, RESULT);
            }

          // texpr ::= STARTED LPAR func ARG_SEP bexpr RPAR 
          case 12:
            {
              AstNode RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol c$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 2));
              int cleft = c$.left;
              int cright = c$.right;
              AstNode c = (AstNode) c$.value;
              com.github.jhoenicke.javacup.runtime.Symbol f$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 4));
              int fleft = f$.left;
              int fright = f$.right;
              AstNode f = (AstNode) f$.value;
 RESULT = new Event(EventType.call, f, c); 
              return parser.getSymbolFactory().newSymbol("texpr", 4, ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 6)), ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1)), RESULT);
            }

          // texpr ::= FINISHED LPAR func ARG_SEP bexpr RPAR 
          case 13:
            {
              AstNode RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol c$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 2));
              int cleft = c$.left;
              int cright = c$.right;
              AstNode c = (AstNode) c$.value;
              com.github.jhoenicke.javacup.runtime.Symbol f$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 4));
              int fleft = f$.left;
              int fright = f$.right;
              AstNode f = (AstNode) f$.value;
 RESULT = new Event(EventType.succ, f, c); 
              return parser.getSymbolFactory().newSymbol("texpr", 4, ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 6)), ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1)), RESULT);
            }

          // texpr ::= WILL_SUCCEED LPAR func ARG_SEP bexpr RPAR 
          case 14:
            {
              AstNode RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol c$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 2));
              int cleft = c$.left;
              int cright = c$.right;
              AstNode c = (AstNode) c$.value;
              com.github.jhoenicke.javacup.runtime.Symbol f$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 4));
              int fleft = f$.left;
              int fright = f$.right;
              AstNode f = (AstNode) f$.value;
 RESULT = new Event(EventType.call_succ, f, c); 
              return parser.getSymbolFactory().newSymbol("texpr", 4, ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 6)), ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1)), RESULT);
            }

          // texpr ::= REVERTED LPAR func ARG_SEP bexpr RPAR 
          case 15:
            {
              AstNode RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol c$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 2));
              int cleft = c$.left;
              int cright = c$.right;
              AstNode c = (AstNode) c$.value;
              com.github.jhoenicke.javacup.runtime.Symbol f$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 4));
              int fleft = f$.left;
              int fright = f$.right;
              AstNode f = (AstNode) f$.value;
 RESULT = new Event(EventType.fail, f, c); 
              return parser.getSymbolFactory().newSymbol("texpr", 4, ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 6)), ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1)), RESULT);
            }

          // texpr ::= STARTED LPAR func RPAR 
          case 16:
            {
              AstNode RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol f$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 2));
              int fleft = f$.left;
              int fright = f$.right;
              AstNode f = (AstNode) f$.value;
 RESULT = new Event(EventType.call, f, null); 
              return parser.getSymbolFactory().newSymbol("texpr", 4, ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 4)), ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1)), RESULT);
            }

          // texpr ::= FINISHED LPAR func RPAR 
          case 17:
            {
              AstNode RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol f$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 2));
              int fleft = f$.left;
              int fright = f$.right;
              AstNode f = (AstNode) f$.value;
 RESULT = new Event(EventType.succ, f, null); 
              return parser.getSymbolFactory().newSymbol("texpr", 4, ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 4)), ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1)), RESULT);
            }

          // texpr ::= WILL_SUCCEED LPAR func RPAR 
          case 18:
            {
              AstNode RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol f$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 2));
              int fleft = f$.left;
              int fright = f$.right;
              AstNode f = (AstNode) f$.value;
 RESULT = new Event(EventType.call_succ, f, null); 
              return parser.getSymbolFactory().newSymbol("texpr", 4, ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 4)), ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1)), RESULT);
            }

          // texpr ::= REVERTED LPAR func RPAR 
          case 19:
            {
              AstNode RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol f$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 2));
              int fleft = f$.left;
              int fright = f$.right;
              AstNode f = (AstNode) f$.value;
 RESULT = new Event(EventType.fail, f, null); 
              return parser.getSymbolFactory().newSymbol("texpr", 4, ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 4)), ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1)), RESULT);
            }

          // texpr ::= SENT LPAR bexpr RPAR 
          case 20:
            {
              AstNode RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol c$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 2));
              int cleft = c$.left;
              int cright = c$.right;
              AstNode c = (AstNode) c$.value;
 RESULT = new Event(EventType.sent, c); 
              return parser.getSymbolFactory().newSymbol("texpr", 4, ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 4)), ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1)), RESULT);
            }

          // texpr ::= CALL event_func event_constraint 
          case 21:
            {
              AstNode RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol c$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1));
              int cleft = c$.left;
              int cright = c$.right;
              AstNode c = (AstNode) c$.value;
              com.github.jhoenicke.javacup.runtime.Symbol f$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 2));
              int fleft = f$.left;
              int fright = f$.right;
              AstNode f = (AstNode) f$.value;
 RESULT = new Event(EventType.call, f, c); 
              return parser.getSymbolFactory().newSymbol("texpr", 4, ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 3)), c$, RESULT);
            }

          // texpr ::= CALL_SUCCESS event_func event_constraint 
          case 22:
            {
              AstNode RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol c$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1));
              int cleft = c$.left;
              int cright = c$.right;
              AstNode c = (AstNode) c$.value;
              com.github.jhoenicke.javacup.runtime.Symbol f$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 2));
              int fleft = f$.left;
              int fright = f$.right;
              AstNode f = (AstNode) f$.value;
 RESULT = new Event(EventType.call_succ, f, c); 
              return parser.getSymbolFactory().newSymbol("texpr", 4, ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 3)), c$, RESULT);
            }

          // texpr ::= SUCCESS event_func event_constraint 
          case 23:
            {
              AstNode RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol c$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1));
              int cleft = c$.left;
              int cright = c$.right;
              AstNode c = (AstNode) c$.value;
              com.github.jhoenicke.javacup.runtime.Symbol f$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 2));
              int fleft = f$.left;
              int fright = f$.right;
              AstNode f = (AstNode) f$.value;
 RESULT = new Event(EventType.succ, f, c); 
              return parser.getSymbolFactory().newSymbol("texpr", 4, ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 3)), c$, RESULT);
            }

          // texpr ::= OUT_OF_GAS event_func event_constraint 
          case 24:
            {
              AstNode RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol c$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1));
              int cleft = c$.left;
              int cright = c$.right;
              AstNode c = (AstNode) c$.value;
              com.github.jhoenicke.javacup.runtime.Symbol f$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 2));
              int fleft = f$.left;
              int fright = f$.right;
              AstNode f = (AstNode) f$.value;
 RESULT = new Event(EventType.oog, f, c); 
              return parser.getSymbolFactory().newSymbol("texpr", 4, ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 3)), c$, RESULT);
            }

          // texpr ::= REVERT event_func event_constraint 
          case 25:
            {
              AstNode RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol c$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1));
              int cleft = c$.left;
              int cright = c$.right;
              AstNode c = (AstNode) c$.value;
              com.github.jhoenicke.javacup.runtime.Symbol f$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 2));
              int fleft = f$.left;
              int fright = f$.right;
              AstNode f = (AstNode) f$.value;
 RESULT = new Event(EventType.rev, f, c); 
              return parser.getSymbolFactory().newSymbol("texpr", 4, ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 3)), c$, RESULT);
            }

          // texpr ::= REQUIRE event_func event_constraint 
          case 26:
            {
              AstNode RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol c$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1));
              int cleft = c$.left;
              int cright = c$.right;
              AstNode c = (AstNode) c$.value;
              com.github.jhoenicke.javacup.runtime.Symbol f$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 2));
              int fleft = f$.left;
              int fright = f$.right;
              AstNode f = (AstNode) f$.value;
 RESULT = new Event(EventType.req, f, c); 
              return parser.getSymbolFactory().newSymbol("texpr", 4, ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 3)), c$, RESULT);
            }

          // texpr ::= ASSERT event_func event_constraint 
          case 27:
            {
              AstNode RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol c$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1));
              int cleft = c$.left;
              int cright = c$.right;
              AstNode c = (AstNode) c$.value;
              com.github.jhoenicke.javacup.runtime.Symbol f$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 2));
              int fleft = f$.left;
              int fright = f$.right;
              AstNode f = (AstNode) f$.value;
 RESULT = new Event(EventType.ass, f, c); 
              return parser.getSymbolFactory().newSymbol("texpr", 4, ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 3)), c$, RESULT);
            }

          // texpr ::= FAILL event_func event_constraint 
          case 28:
            {
              AstNode RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol c$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1));
              int cleft = c$.left;
              int cright = c$.right;
              AstNode c = (AstNode) c$.value;
              com.github.jhoenicke.javacup.runtime.Symbol f$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 2));
              int fleft = f$.left;
              int fright = f$.right;
              AstNode f = (AstNode) f$.value;
 RESULT = new Event(EventType.fail, f, c); 
              return parser.getSymbolFactory().newSymbol("texpr", 4, ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 3)), c$, RESULT);
            }

          // texpr ::= LPAR texpr RPAR 
          case 29:
            {
              AstNode RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol t$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 2));
              int tleft = t$.left;
              int tright = t$.right;
              AstNode t = (AstNode) t$.value;
 RESULT = t; 
              return parser.getSymbolFactory().newSymbol("texpr", 4, ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 3)), ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1)), RESULT);
            }

          // event_func ::= LPAR func RPAR 
          case 30:
            {
              AstNode RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol f$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 2));
              int fleft = f$.left;
              int fright = f$.right;
              AstNode f = (AstNode) f$.value;
 RESULT = f; 
              return parser.getSymbolFactory().newSymbol("event_func", 5, ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 3)), ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1)), RESULT);
            }

          // func ::= name LPAR args RPAR 
          case 31:
            {
              AstNode RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol a$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 2));
              int aleft = a$.left;
              int aright = a$.right;
              AstNode a = (AstNode) a$.value;
              com.github.jhoenicke.javacup.runtime.Symbol n$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 4));
              int nleft = n$.left;
              int nright = n$.right;
              AstNode n = (AstNode) n$.value;
 RESULT = new Function(n, a); 
              return parser.getSymbolFactory().newSymbol("func", 8, n$, ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1)), RESULT);
            }

          // func ::= name 
          case 32:
            {
              AstNode RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol n$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1));
              int nleft = n$.left;
              int nright = n$.right;
              AstNode n = (AstNode) n$.value;
 RESULT = new Function(n, new Arguments()); 
              return parser.getSymbolFactory().newSymbol("func", 8, n$, n$, RESULT);
            }

          // args ::= name 
          case 33:
            {
              AstNode RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol n$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1));
              int nleft = n$.left;
              int nright = n$.right;
              AstNode n = (AstNode) n$.value;
 RESULT = new Arguments(n); 
              return parser.getSymbolFactory().newSymbol("args", 7, n$, n$, RESULT);
            }

          // args ::= name ARG_SEP args 
          case 34:
            {
              AstNode RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol a$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1));
              int aleft = a$.left;
              int aright = a$.right;
              AstNode a = (AstNode) a$.value;
              com.github.jhoenicke.javacup.runtime.Symbol n$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 3));
              int nleft = n$.left;
              int nright = n$.right;
              AstNode n = (AstNode) n$.value;
 RESULT = new Arguments(n,a); 
              return parser.getSymbolFactory().newSymbol("args", 7, n$, a$, RESULT);
            }

          // event_constraint ::= CONSTRAINT_BEGIN bexpr CONSTRAINT_END 
          case 35:
            {
              AstNode RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol e$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 2));
              int eleft = e$.left;
              int eright = e$.right;
              AstNode e = (AstNode) e$.value;
 RESULT = e; 
              return parser.getSymbolFactory().newSymbol("event_constraint", 6, ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 3)), ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1)), RESULT);
            }

          // event_constraint ::= CONSTRAINT_BEGIN CONSTRAINT_END 
          case 36:
            {
              AstNode RESULT;
 RESULT = null; 
              return parser.getSymbolFactory().newSymbol("event_constraint", 6, ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 2)), ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1)), RESULT);
            }

          // bexpr ::= expr EQ expr 
          case 37:
            {
              AstNode RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol e2$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1));
              int e2left = e2$.left;
              int e2right = e2$.right;
              AstNode e2 = (AstNode) e2$.value;
              com.github.jhoenicke.javacup.runtime.Symbol e1$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 3));
              int e1left = e1$.left;
              int e1right = e1$.right;
              AstNode e1 = (AstNode) e1$.value;
 RESULT = new ExtendedComparativeOperator(ExtendedComparativeType.eq, e1, e2); 
              return parser.getSymbolFactory().newSymbol("bexpr", 3, e1$, e2$, RESULT);
            }

          // bexpr ::= expr GT expr 
          case 38:
            {
              AstNode RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol e2$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1));
              int e2left = e2$.left;
              int e2right = e2$.right;
              AstNode e2 = (AstNode) e2$.value;
              com.github.jhoenicke.javacup.runtime.Symbol e1$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 3));
              int e1left = e1$.left;
              int e1right = e1$.right;
              AstNode e1 = (AstNode) e1$.value;
 RESULT = new ExtendedComparativeOperator(ExtendedComparativeType.gt, e1, e2); 
              return parser.getSymbolFactory().newSymbol("bexpr", 3, e1$, e2$, RESULT);
            }

          // bexpr ::= expr GEQ expr 
          case 39:
            {
              AstNode RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol e2$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1));
              int e2left = e2$.left;
              int e2right = e2$.right;
              AstNode e2 = (AstNode) e2$.value;
              com.github.jhoenicke.javacup.runtime.Symbol e1$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 3));
              int e1left = e1$.left;
              int e1right = e1$.right;
              AstNode e1 = (AstNode) e1$.value;
 RESULT = new ExtendedComparativeOperator(ExtendedComparativeType.geq, e1, e2); 
              return parser.getSymbolFactory().newSymbol("bexpr", 3, e1$, e2$, RESULT);
            }

          // bexpr ::= expr NEQ expr 
          case 40:
            {
              AstNode RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol e2$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1));
              int e2left = e2$.left;
              int e2right = e2$.right;
              AstNode e2 = (AstNode) e2$.value;
              com.github.jhoenicke.javacup.runtime.Symbol e1$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 3));
              int e1left = e1$.left;
              int e1right = e1$.right;
              AstNode e1 = (AstNode) e1$.value;
 RESULT = new ExtendedComparativeOperator(ExtendedComparativeType.neq, e1, e2); 
              return parser.getSymbolFactory().newSymbol("bexpr", 3, e1$, e2$, RESULT);
            }

          // bexpr ::= expr LT expr 
          case 41:
            {
              AstNode RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol e2$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1));
              int e2left = e2$.left;
              int e2right = e2$.right;
              AstNode e2 = (AstNode) e2$.value;
              com.github.jhoenicke.javacup.runtime.Symbol e1$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 3));
              int e1left = e1$.left;
              int e1right = e1$.right;
              AstNode e1 = (AstNode) e1$.value;
 RESULT = new ExtendedComparativeOperator(ExtendedComparativeType.lt, e1, e2); 
              return parser.getSymbolFactory().newSymbol("bexpr", 3, e1$, e2$, RESULT);
            }

          // bexpr ::= expr LEQ expr 
          case 42:
            {
              AstNode RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol e2$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1));
              int e2left = e2$.left;
              int e2right = e2$.right;
              AstNode e2 = (AstNode) e2$.value;
              com.github.jhoenicke.javacup.runtime.Symbol e1$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 3));
              int e1left = e1$.left;
              int e1right = e1$.right;
              AstNode e1 = (AstNode) e1$.value;
 RESULT = new ExtendedComparativeOperator(ExtendedComparativeType.leq, e1, e2); 
              return parser.getSymbolFactory().newSymbol("bexpr", 3, e1$, e2$, RESULT);
            }

          // bexpr ::= bexpr AND bexpr 
          case 43:
            {
              AstNode RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol e2$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1));
              int e2left = e2$.left;
              int e2right = e2$.right;
              AstNode e2 = (AstNode) e2$.value;
              com.github.jhoenicke.javacup.runtime.Symbol e1$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 3));
              int e1left = e1$.left;
              int e1right = e1$.right;
              AstNode e1 = (AstNode) e1$.value;
 RESULT = new BinaryOperator(BinaryType.and, e1, e2); 
              return parser.getSymbolFactory().newSymbol("bexpr", 3, e1$, e2$, RESULT);
            }

          // bexpr ::= bexpr OR bexpr 
          case 44:
            {
              AstNode RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol e2$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1));
              int e2left = e2$.left;
              int e2right = e2$.right;
              AstNode e2 = (AstNode) e2$.value;
              com.github.jhoenicke.javacup.runtime.Symbol e1$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 3));
              int e1left = e1$.left;
              int e1right = e1$.right;
              AstNode e1 = (AstNode) e1$.value;
 RESULT = new BinaryOperator(BinaryType.or, e1, e2); 
              return parser.getSymbolFactory().newSymbol("bexpr", 3, e1$, e2$, RESULT);
            }

          // bexpr ::= bexpr IMPLIES bexpr 
          case 45:
            {
              AstNode RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol e2$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1));
              int e2left = e2$.left;
              int e2right = e2$.right;
              AstNode e2 = (AstNode) e2$.value;
              com.github.jhoenicke.javacup.runtime.Symbol e1$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 3));
              int e1left = e1$.left;
              int e1right = e1$.right;
              AstNode e1 = (AstNode) e1$.value;
 RESULT = new ImpliesOp(e1, e2); 
              return parser.getSymbolFactory().newSymbol("bexpr", 3, e1$, e2$, RESULT);
            }

          // bexpr ::= LPAR bexpr RPAR 
          case 46:
            {
              AstNode RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol e1$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 2));
              int e1left = e1$.left;
              int e1right = e1$.right;
              AstNode e1 = (AstNode) e1$.value;
 RESULT = e1; 
              return parser.getSymbolFactory().newSymbol("bexpr", 3, ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 3)), ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1)), RESULT);
            }

          // bexpr ::= NEG bexpr 
          case 47:
            {
              AstNode RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol e$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1));
              int eleft = e$.left;
              int eright = e$.right;
              AstNode e = (AstNode) e$.value;
 RESULT = new Not(e); 
              return parser.getSymbolFactory().newSymbol("bexpr", 3, ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 2)), e$, RESULT);
            }

          // expr ::= name LBRACKET expr RBRACKET 
          case 48:
            {
              AstNode RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol e$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 2));
              int eleft = e$.left;
              int eright = e$.right;
              AstNode e = (AstNode) e$.value;
              com.github.jhoenicke.javacup.runtime.Symbol n$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 4));
              int nleft = n$.left;
              int nright = n$.right;
              AstNode n = (AstNode) n$.value;
 RESULT = new ArrayAccessExpr(n,e); 
              return parser.getSymbolFactory().newSymbol("expr", 2, n$, ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1)), RESULT);
            }

          // expr ::= name LBRACKET expr RBRACKET LBRACKET expr RBRACKET 
          case 49:
            {
              AstNode RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol e2$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 2));
              int e2left = e2$.left;
              int e2right = e2$.right;
              AstNode e2 = (AstNode) e2$.value;
              com.github.jhoenicke.javacup.runtime.Symbol e1$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 5));
              int e1left = e1$.left;
              int e1right = e1$.right;
              AstNode e1 = (AstNode) e1$.value;
              com.github.jhoenicke.javacup.runtime.Symbol n$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 7));
              int nleft = n$.left;
              int nright = n$.right;
              AstNode n = (AstNode) n$.value;
 RESULT = new ArrayAccessExpr(n,e1,e2); 
              return parser.getSymbolFactory().newSymbol("expr", 2, n$, ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1)), RESULT);
            }

          // expr ::= OLD LPAR expr RPAR 
          case 50:
            {
              AstNode RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol e$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 2));
              int eleft = e$.left;
              int eright = e$.right;
              AstNode e = (AstNode) e$.value;
 RESULT = new UnaryTemporalOperator(UnaryTemporalType.old, e); 
              return parser.getSymbolFactory().newSymbol("expr", 2, ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 4)), ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1)), RESULT);
            }

          // expr ::= SUM LPAR expr RPAR 
          case 51:
            {
              AstNode RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol e$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 2));
              int eleft = e$.left;
              int eright = e$.right;
              AstNode e = (AstNode) e$.value;
 RESULT = new UnaryTemporalOperator(UnaryTemporalType.sum, e); 
              return parser.getSymbolFactory().newSymbol("expr", 2, ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 4)), ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1)), RESULT);
            }

          // expr ::= FSUM LPAR func ARG_SEP INT RPAR 
          case 52:
            {
              AstNode RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol i$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 2));
              int ileft = i$.left;
              int iright = i$.right;
              BigInteger i = (BigInteger) i$.value;
              com.github.jhoenicke.javacup.runtime.Symbol f$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 4));
              int fleft = f$.left;
              int fright = f$.right;
              AstNode f = (AstNode) f$.value;
 RESULT = new Fsum(f, i); 
              return parser.getSymbolFactory().newSymbol("expr", 2, ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 6)), ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1)), RESULT);
            }

          // expr ::= FSUM LPAR func ARG_SEP INT ARG_SEP bexpr RPAR 
          case 53:
            {
              AstNode RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol e$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 2));
              int eleft = e$.left;
              int eright = e$.right;
              AstNode e = (AstNode) e$.value;
              com.github.jhoenicke.javacup.runtime.Symbol i$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 4));
              int ileft = i$.left;
              int iright = i$.right;
              BigInteger i = (BigInteger) i$.value;
              com.github.jhoenicke.javacup.runtime.Symbol f$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 6));
              int fleft = f$.left;
              int fright = f$.right;
              AstNode f = (AstNode) f$.value;
 RESULT = new Fsum(f, i, e); 
              return parser.getSymbolFactory().newSymbol("expr", 2, ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 8)), ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1)), RESULT);
            }

          // expr ::= name LPAR args RPAR 
          case 54:
            {
              AstNode RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol a$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 2));
              int aleft = a$.left;
              int aright = a$.right;
              AstNode a = (AstNode) a$.value;
              com.github.jhoenicke.javacup.runtime.Symbol n$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 4));
              int nleft = n$.left;
              int nright = n$.right;
              AstNode n = (AstNode) n$.value;
 RESULT = new FunctionCall(n, a); 
              return parser.getSymbolFactory().newSymbol("expr", 2, n$, ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1)), RESULT);
            }

          // expr ::= name LPAR RPAR 
          case 55:
            {
              AstNode RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol n$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 3));
              int nleft = n$.left;
              int nright = n$.right;
              AstNode n = (AstNode) n$.value;
 RESULT = new FunctionCall(n); 
              return parser.getSymbolFactory().newSymbol("expr", 2, n$, ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1)), RESULT);
            }

          // expr ::= expr PLUS expr 
          case 56:
            {
              AstNode RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol e2$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1));
              int e2left = e2$.left;
              int e2right = e2$.right;
              AstNode e2 = (AstNode) e2$.value;
              com.github.jhoenicke.javacup.runtime.Symbol e1$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 3));
              int e1left = e1$.left;
              int e1right = e1$.right;
              AstNode e1 = (AstNode) e1$.value;
 RESULT = new BinaryOperator(BinaryType.plus, e1, e2); 
              return parser.getSymbolFactory().newSymbol("expr", 2, e1$, e2$, RESULT);
            }

          // expr ::= expr MINUS expr 
          case 57:
            {
              AstNode RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol e2$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1));
              int e2left = e2$.left;
              int e2right = e2$.right;
              AstNode e2 = (AstNode) e2$.value;
              com.github.jhoenicke.javacup.runtime.Symbol e1$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 3));
              int e1left = e1$.left;
              int e1right = e1$.right;
              AstNode e1 = (AstNode) e1$.value;
 RESULT = new BinaryOperator(BinaryType.minus, e1, e2); 
              return parser.getSymbolFactory().newSymbol("expr", 2, e1$, e2$, RESULT);
            }

          // expr ::= expr MULTIPLY expr 
          case 58:
            {
              AstNode RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol e2$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1));
              int e2left = e2$.left;
              int e2right = e2$.right;
              AstNode e2 = (AstNode) e2$.value;
              com.github.jhoenicke.javacup.runtime.Symbol e1$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 3));
              int e1left = e1$.left;
              int e1right = e1$.right;
              AstNode e1 = (AstNode) e1$.value;
 RESULT = new BinaryOperator(BinaryType.times, e1, e2); 
              return parser.getSymbolFactory().newSymbol("expr", 2, e1$, e2$, RESULT);
            }

          // expr ::= expr DIVIDE expr 
          case 59:
            {
              AstNode RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol e2$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1));
              int e2left = e2$.left;
              int e2right = e2$.right;
              AstNode e2 = (AstNode) e2$.value;
              com.github.jhoenicke.javacup.runtime.Symbol e1$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 3));
              int e1left = e1$.left;
              int e1right = e1$.right;
              AstNode e1 = (AstNode) e1$.value;
 RESULT = new BinaryOperator(BinaryType.divide, e1, e2); 
              return parser.getSymbolFactory().newSymbol("expr", 2, e1$, e2$, RESULT);
            }

          // expr ::= MINUS expr 
          case 60:
            {
              AstNode RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol e1$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1));
              int e1left = e1$.left;
              int e1right = e1$.right;
              AstNode e1 = (AstNode) e1$.value;
 RESULT = RESULT = new BigIntegerLiteral(((BigIntegerLiteral)e1).getValue().negate()); 
              return parser.getSymbolFactory().newSymbol("expr", 2, ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 2)), e1$, RESULT);
            }

          // expr ::= LPAR expr RPAR 
          case 61:
            {
              AstNode RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol e1$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 2));
              int e1left = e1$.left;
              int e1right = e1$.right;
              AstNode e1 = (AstNode) e1$.value;
 RESULT = e1; 
              return parser.getSymbolFactory().newSymbol("expr", 2, ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 3)), ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1)), RESULT);
            }

          // expr ::= name 
          case 62:
            {
              AstNode RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol n$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1));
              int nleft = n$.left;
              int nright = n$.right;
              AstNode n = (AstNode) n$.value;
 RESULT = n; 
              return parser.getSymbolFactory().newSymbol("expr", 2, n$, n$, RESULT);
            }

          // expr ::= INT 
          case 63:
            {
              AstNode RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol i$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1));
              int ileft = i$.left;
              int iright = i$.right;
              BigInteger i = (BigInteger) i$.value;
 RESULT = new BigIntegerLiteral(i); 
              return parser.getSymbolFactory().newSymbol("expr", 2, i$, i$, RESULT);
            }

          // expr ::= TRUE 
          case 64:
            {
              AstNode RESULT;
 RESULT = new BoolLiteral(true); 
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1));
              return parser.getSymbolFactory().newSymbol("expr", 2, CUP$sym, CUP$sym, RESULT);
            }

          // expr ::= FALSE 
          case 65:
            {
              AstNode RESULT;
 RESULT = new BoolLiteral(false); 
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1));
              return parser.getSymbolFactory().newSymbol("expr", 2, CUP$sym, CUP$sym, RESULT);
            }

          // name ::= NAME 
          case 66:
            {
              AstNode RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol m$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1));
              int mleft = m$.left;
              int mright = m$.right;
              String m = (String) m$.value;
 RESULT = new Name(m); 
              return parser.getSymbolFactory().newSymbol("name", 1, m$, m$, RESULT);
            }

          /* . . . . . .*/
          default:
            throw new InternalError(
               "Invalid action number found in internal parse table");

        }
    }
}

