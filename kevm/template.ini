; ERC20-EVM Specification Template Parameters
; For more details, refer to README.md.

[root]
k: #execute => #halt
schedule: CONSTANTINOPLE
gas: #gas({GASCAP}, 0, 0) => _
ensures:

[totalSupply]
statusCode: _ => EVMC_SUCCESS
output: _ => #asByteStackInWidth(TOTAL, 32)
callData: #abiCallData("totalSupply", .TypedArgs)
log: _
refund: _
storage:
    #hashedLocation({COMPILER}, {_TOTALSUPPLY}, .IntList) |-> TOTAL
    _:Map
origStorage: _
requires:
    andBool 0 <=Int TOTAL     andBool TOTAL     <Int (2 ^Int 256)

[balanceOf]
statusCode: _ => EVMC_SUCCESS
output: _ => #asByteStackInWidth(BAL, 32)
callData: #abiCallData("balanceOf", #address(OWNER))
log: _
refund: _
storage:
    #hashedLocation({COMPILER}, {_BALANCES}, OWNER) |-> BAL
    _:Map
origStorage: _
requires:
    andBool 0 <=Int OWNER     andBool OWNER     <Int (2 ^Int 160)
    andBool 0 <=Int BAL       andBool BAL       <Int (2 ^Int 256)

[allowance]
statusCode: _ => EVMC_SUCCESS
output: _ => #asByteStackInWidth(ALLOWANCE, 32)
callData: #abiCallData("allowance", #address(OWNER), #address(SPENDER))
log: _
refund: _
storage:
    #hashedLocation({COMPILER}, {_ALLOWANCES}, OWNER SPENDER) |-> ALLOWANCE
    _:Map
origStorage: _
requires:
    andBool 0 <=Int OWNER     andBool OWNER     <Int (2 ^Int 160)
    andBool 0 <=Int SPENDER   andBool SPENDER   <Int (2 ^Int 160)
    andBool 0 <=Int ALLOWANCE andBool ALLOWANCE <Int (2 ^Int 256)

[approve]
statusCode: _ => EVMC_SUCCESS
callData: #abiCallData("approve", #address(SPENDER), #uint256(VALUE))
requires:
    andBool 0 <=Int SPENDER   andBool SPENDER   <Int (2 ^Int 160)
    andBool 0 <=Int VALUE     andBool VALUE     <Int (2 ^Int 256)
    andBool 0 <=Int ALLOWANCE andBool ALLOWANCE <Int (2 ^Int 256)

[approve-success]
output: _ => #asByteStackInWidth(1, 32)
log: _:List ( .List => ListItem(#abiEventLog(ACCT_ID, "Approval", #indexed(#address(CALLER_ID)), #indexed(#address(SPENDER)), #uint256(VALUE))) )
refund: _ => _
storage:
    #hashedLocation({COMPILER}, {_ALLOWANCES}, CALLER_ID SPENDER) |-> (ALLOWANCE => VALUE)
    _:Map
origStorage:
    #hashedLocation({COMPILER}, {_ALLOWANCES}, CALLER_ID SPENDER) |-> ALLOWANCE
    _:Map
+requires:
    andBool ( VALUE ==Int 0 orBool ALLOWANCE ==Int 0 )

[approve-failure]
output: _ => #asByteStackInWidth(0, 32)
log: _
refund: _
storage:
    #hashedLocation({COMPILER}, {_ALLOWANCES}, CALLER_ID SPENDER) |-> ALLOWANCE
    _:Map
origStorage: _
+requires:
    andBool ( VALUE =/=Int 0 andBool ALLOWANCE =/=Int 0 )

[transfer]
callData: #abiCallData("transfer", #address(TO_ID), #uint256(VALUE))
refund: _ => _
requires:
    andBool 0 <=Int TO_ID     andBool TO_ID     <Int (2 ^Int 160)
    andBool 0 <=Int VALUE     andBool VALUE     <Int (2 ^Int 256)
    andBool 0 <=Int BAL_FROM  andBool BAL_FROM  <Int (2 ^Int 256)
    andBool 0 <=Int BAL_TO    andBool BAL_TO    <Int (2 ^Int 256)

[transfer-success]
statusCode: _ => EVMC_SUCCESS
output: _ => #asByteStackInWidth(1, 32)
log: _:List ( .List => ListItem(#abiEventLog(ACCT_ID, "Transfer", #indexed(#address(CALLER_ID)), #indexed(#address(TO_ID)), #uint256(VALUE))) )

[transfer-success-1]
storage:
    #hashedLocation({COMPILER}, {_BALANCES}, CALLER_ID) |-> (BAL_FROM => BAL_FROM -Int VALUE)
    #hashedLocation({COMPILER}, {_BALANCES}, TO_ID)     |-> (BAL_TO   => BAL_TO   +Int VALUE)
    _:Map
origStorage:
    #hashedLocation({COMPILER}, {_BALANCES}, CALLER_ID) |-> BAL_FROM
    #hashedLocation({COMPILER}, {_BALANCES}, TO_ID)     |-> BAL_TO
    _:Map
+requires:
    andBool CALLER_ID =/=Int TO_ID
    andBool VALUE >Int 0
    andBool VALUE <=Int BAL_FROM
    andBool BAL_TO +Int VALUE <Int (2 ^Int 256)
    andBool #hashedLocation({COMPILER}, {_BALANCES}, CALLER_ID) =/=Int #hashedLocation({COMPILER}, {_BALANCES}, TO_ID)

[transfer-success-2]
storage:
    #hashedLocation({COMPILER}, {_BALANCES}, CALLER_ID) |-> BAL_FROM
    _:Map
origStorage:
    #hashedLocation({COMPILER}, {_BALANCES}, CALLER_ID) |-> BAL_FROM
    _:Map
+requires:
    andBool CALLER_ID ==Int TO_ID
    andBool VALUE >Int 0
    andBool VALUE <=Int BAL_FROM
    andBool BAL_FROM +Int VALUE <Int (2 ^Int 256)

[transfer-failure]
statusCode: _ => EVMC_SUCCESS
output: _ => #asByteStackInWidth(0, 32)
log: _

[transfer-failure-1]
storage:
    #hashedLocation({COMPILER}, {_BALANCES}, CALLER_ID) |-> (BAL_FROM => _)
    #hashedLocation({COMPILER}, {_BALANCES}, TO_ID)     |->  BAL_TO
    _:Map
origStorage:
    #hashedLocation({COMPILER}, {_BALANCES}, CALLER_ID) |-> BAL_FROM
    #hashedLocation({COMPILER}, {_BALANCES}, TO_ID)     |->  BAL_TO
    _:Map
+requires:
    andBool CALLER_ID =/=Int TO_ID
    andBool ( VALUE <=Int 0
     orBool   VALUE >Int BAL_FROM
     orBool   BAL_TO +Int VALUE >=Int (2 ^Int 256) )

[transfer-failure-2]
storage:
    #hashedLocation({COMPILER}, {_BALANCES}, CALLER_ID) |-> BAL_FROM
    _:Map
origStorage:
    #hashedLocation({COMPILER}, {_BALANCES}, CALLER_ID) |-> BAL_FROM
    _:Map
+requires:
    andBool CALLER_ID ==Int TO_ID
    andBool ( VALUE <=Int 0
     orBool   VALUE >Int BAL_FROM
     orBool   BAL_FROM +Int VALUE >=Int (2 ^Int 256) )

[transferFrom]
callData: #abiCallData("transferFrom", #address(FROM_ID), #address(TO_ID), #uint256(VALUE))
refund: _ => _
requires:
    andBool 0 <=Int FROM_ID   andBool FROM_ID   <Int (2 ^Int 160)
    andBool 0 <=Int TO_ID     andBool TO_ID     <Int (2 ^Int 160)
    andBool 0 <=Int VALUE     andBool VALUE     <Int (2 ^Int 256)
    andBool 0 <=Int BAL_FROM  andBool BAL_FROM  <Int (2 ^Int 256)
    andBool 0 <=Int BAL_TO    andBool BAL_TO    <Int (2 ^Int 256)
    andBool 0 <=Int ALLOW     andBool ALLOW     <Int (2 ^Int 256)

[transferFrom-success]
statusCode: _ => EVMC_SUCCESS
output: _ => #asByteStackInWidth(1, 32)
log: _:List ( .List => ListItem(#abiEventLog(ACCT_ID, "Transfer", #indexed(#address(FROM_ID)), #indexed(#address(TO_ID)), #uint256(VALUE))) )

[transferFrom-success-1]
storage:
    #hashedLocation({COMPILER}, {_BALANCES},   FROM_ID)           |-> (BAL_FROM => BAL_FROM -Int VALUE)
    #hashedLocation({COMPILER}, {_BALANCES},   TO_ID)             |-> (BAL_TO   => BAL_TO   +Int VALUE)
    #hashedLocation({COMPILER}, {_ALLOWANCES}, FROM_ID CALLER_ID) |-> (ALLOW    => ALLOW    -Int VALUE)
    _:Map
origStorage:
    #hashedLocation({COMPILER}, {_BALANCES},   FROM_ID)           |-> BAL_FROM
    #hashedLocation({COMPILER}, {_BALANCES},   TO_ID)             |-> BAL_TO
    #hashedLocation({COMPILER}, {_ALLOWANCES}, FROM_ID CALLER_ID) |-> ALLOW
    _:Map
+requires:
    andBool FROM_ID =/=Int TO_ID
    andBool VALUE >Int 0
    andBool VALUE <=Int BAL_FROM
    andBool VALUE <=Int ALLOW
    andBool BAL_TO +Int VALUE <Int (2 ^Int 256)
    andBool #hashedLocation({COMPILER}, {_BALANCES}, FROM_ID) =/=Int #hashedLocation({COMPILER}, {_BALANCES}, TO_ID)
    andBool #hashedLocation({COMPILER}, {_ALLOWANCES}, FROM_ID CALLER_ID) =/=Int #hashedLocation({COMPILER}, {_BALANCES}, TO_ID)
    andBool #hashedLocation({COMPILER}, {_ALLOWANCES}, FROM_ID CALLER_ID) =/=Int #hashedLocation({COMPILER}, {_BALANCES}, FROM_ID)

[transferFrom-success-2]
storage:
    #hashedLocation({COMPILER}, {_BALANCES},   FROM_ID)           |-> BAL_FROM
    #hashedLocation({COMPILER}, {_ALLOWANCES}, FROM_ID CALLER_ID) |-> (ALLOW => ALLOW -Int VALUE)
    _:Map
origStorage:
    #hashedLocation({COMPILER}, {_BALANCES},   FROM_ID)           |-> BAL_FROM
    #hashedLocation({COMPILER}, {_ALLOWANCES}, FROM_ID CALLER_ID) |-> ALLOW
    _:Map
+requires:
    andBool FROM_ID ==Int TO_ID
    andBool VALUE >Int 0
    andBool VALUE <=Int BAL_FROM
    andBool VALUE <=Int ALLOW
    andBool BAL_FROM +Int VALUE <Int (2 ^Int 256)
    andBool #hashedLocation({COMPILER}, {_ALLOWANCES}, FROM_ID CALLER_ID) =/=Int #hashedLocation({COMPILER}, {_BALANCES}, FROM_ID)

[transferFrom-failure]
statusCode: _ => EVMC_SUCCESS
output: _ => #asByteStackInWidth(0, 32)
log: _

[transferFrom-failure-1]
storage:
    #hashedLocation({COMPILER}, {_BALANCES},   FROM_ID)           |-> (BAL_FROM => _)  // BAL_FROM
    #hashedLocation({COMPILER}, {_BALANCES},   TO_ID)             |-> (BAL_TO   => _)  // BAL_TO
    #hashedLocation({COMPILER}, {_ALLOWANCES}, FROM_ID CALLER_ID) |-> ALLOW
    _:Map
origStorage:
    #hashedLocation({COMPILER}, {_BALANCES},   FROM_ID)           |-> BAL_FROM
    #hashedLocation({COMPILER}, {_BALANCES},   TO_ID)             |-> BAL_TO
    #hashedLocation({COMPILER}, {_ALLOWANCES}, FROM_ID CALLER_ID) |-> ALLOW
    _:Map
+requires:
    andBool FROM_ID =/=Int TO_ID
    andBool ( VALUE <=Int 0 orBool VALUE >Int BAL_FROM orBool VALUE >Int ALLOW orBool BAL_TO +Int VALUE >=Int (2 ^Int 256) )
    andBool #hashedLocation({COMPILER}, {_BALANCES}, FROM_ID) =/=Int #hashedLocation({COMPILER}, {_BALANCES}, TO_ID)
    andBool #hashedLocation({COMPILER}, {_ALLOWANCES}, FROM_ID CALLER_ID) =/=Int #hashedLocation({COMPILER}, {_BALANCES}, TO_ID)
    andBool #hashedLocation({COMPILER}, {_ALLOWANCES}, FROM_ID CALLER_ID) =/=Int #hashedLocation({COMPILER}, {_BALANCES}, FROM_ID)

[transferFrom-failure-2]
storage:
    #hashedLocation({COMPILER}, {_BALANCES},   FROM_ID)           |-> BAL_FROM
    #hashedLocation({COMPILER}, {_ALLOWANCES}, FROM_ID CALLER_ID) |-> ALLOW
    _:Map
origStorage: _
+requires:
    andBool FROM_ID ==Int TO_ID
    andBool ( VALUE <=Int 0 orBool VALUE >Int BAL_FROM orBool VALUE >Int ALLOW orBool BAL_FROM +Int VALUE >=Int (2 ^Int 256) )
    andBool #hashedLocation({COMPILER}, {_ALLOWANCES}, FROM_ID CALLER_ID) =/=Int #hashedLocation({COMPILER}, {_BALANCES}, FROM_ID)

[pgm]
compiler: "Solidity"
