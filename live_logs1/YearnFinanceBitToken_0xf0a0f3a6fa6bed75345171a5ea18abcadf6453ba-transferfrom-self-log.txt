This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 09:29:27,392 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 09:29:27,393 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 09:29:27,404 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 09:29:27,404 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 09:29:27,404 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 09:29:27,405 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 09:29:27,407 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 09:29:27,408 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 09:29:27,409 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 09:29:27,410 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 09:29:27,410 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 09:29:27,411 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 09:29:27,411 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 09:29:27,412 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 09:29:27,413 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 09:29:27,413 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 09:29:27,415 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 09:29:27,416 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 09:29:27,418 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 09:29:27,418 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 09:29:27,419 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 09:29:27,421 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 09:29:27,421 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 09:29:27,421 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 09:29:27,422 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 09:29:27,422 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 09:29:27,423 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 09:29:27,423 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 09:29:27,423 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 09:29:27,424 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 09:29:27,424 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 09:29:27,425 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 09:29:27,425 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 09:29:27,426 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 09:29:27,426 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 09:29:27,426 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 09:29:27,427 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 09:29:27,427 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 09:29:27,427 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 09:29:27,428 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 09:29:27,428 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 09:29:27,436 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 09:29:27,436 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 09:29:27,437 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 09:29:27,437 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 09:29:27,437 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 09:29:27,437 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 09:29:27,438 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 09:29:27,438 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 09:29:27,438 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 09:29:27,438 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 09:29:27,438 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 09:29:27,438 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 09:29:27,438 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 09:29:27,438 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 09:29:27,438 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 09:29:27,439 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 09:29:27,439 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 09:29:27,439 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 09:29:27,439 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 09:29:27,439 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 09:29:27,439 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 09:29:27,439 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 09:29:27,439 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 09:29:27,439 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 09:29:27,440 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 09:29:27,440 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 09:29:27,464 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 09:29:27,476 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 09:29:27,478 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 09:29:27,479 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 09:29:27,480 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 09:29:27,480 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/YearnFinanceBitToken_0xf0a0f3a6fa6bed75345171a5ea18abcadf6453ba_transferfrom-self.bpl
[2020-11-25 09:29:27,480 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/YearnFinanceBitToken_0xf0a0f3a6fa6bed75345171a5ea18abcadf6453ba_transferfrom-self.bpl'
[2020-11-25 09:29:27,551 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 09:29:27,552 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 09:29:27,553 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 09:29:27,553 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 09:29:27,553 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 09:29:27,569 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "YearnFinanceBitToken_0xf0a0f3a6fa6bed75345171a5ea18abcadf6453ba_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:29:27" (1/1) ...
[2020-11-25 09:29:27,571 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "YearnFinanceBitToken_0xf0a0f3a6fa6bed75345171a5ea18abcadf6453ba_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:29:27" (1/1) ...
[2020-11-25 09:29:27,595 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "YearnFinanceBitToken_0xf0a0f3a6fa6bed75345171a5ea18abcadf6453ba_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:29:27" (1/1) ...
[2020-11-25 09:29:27,596 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "YearnFinanceBitToken_0xf0a0f3a6fa6bed75345171a5ea18abcadf6453ba_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:29:27" (1/1) ...
[2020-11-25 09:29:27,611 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "YearnFinanceBitToken_0xf0a0f3a6fa6bed75345171a5ea18abcadf6453ba_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:29:27" (1/1) ...
[2020-11-25 09:29:27,619 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "YearnFinanceBitToken_0xf0a0f3a6fa6bed75345171a5ea18abcadf6453ba_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:29:27" (1/1) ...
[2020-11-25 09:29:27,624 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "YearnFinanceBitToken_0xf0a0f3a6fa6bed75345171a5ea18abcadf6453ba_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:29:27" (1/1) ...
[2020-11-25 09:29:27,631 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 09:29:27,631 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 09:29:27,631 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 09:29:27,633 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 09:29:27,639 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "YearnFinanceBitToken_0xf0a0f3a6fa6bed75345171a5ea18abcadf6453ba_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:29:27" (1/1) ...
[2020-11-25 09:29:27,658 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(YearnFinanceBitToken.transferFrom(from, to, value), (p1 != from || p2 != msg.sender) && from == to && value <= balances_YearnFinanceBitToken[this][from] && value <= allowed_YearnFinanceBitToken[this][from][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_YearnFinanceBitToken[this][to] >= 0 && balances_YearnFinanceBitToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_YearnFinanceBitToken[this][from] >= 0 &&  balances_YearnFinanceBitToken[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_YearnFinanceBitToken[this][from][msg.sender] >= 0 && allowed_YearnFinanceBitToken[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(YearnFinanceBitToken.transferFrom(from, to, value), return == true && allowed_YearnFinanceBitToken[this][from][msg.sender] == old(allowed_YearnFinanceBitToken[this][from][msg.sender]) - value && _totalSupply_YearnFinanceBitToken[this] == old(_totalSupply_YearnFinanceBitToken[this]) && balances_YearnFinanceBitToken[this] == old(balances_YearnFinanceBitToken[this]) && allowed_YearnFinanceBitToken[this][p1][p2] == old(allowed_YearnFinanceBitToken[this][p1][p2]) && name_YearnFinanceBitToken[this] == old(name_YearnFinanceBitToken[this]) && symbol_YearnFinanceBitToken[this] == old(symbol_YearnFinanceBitToken[this]) && decimals_YearnFinanceBitToken[this] == old(decimals_YearnFinanceBitToken[this]))))
[2020-11-25 09:29:27,663 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(YearnFinanceBitToken.transferFrom(from, to, value), (p1 != from || p2 != msg.sender) && from == to && value <= balances_YearnFinanceBitToken[this][from] && value <= allowed_YearnFinanceBitToken[this][from][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_YearnFinanceBitToken[this][to] >= 0 && balances_YearnFinanceBitToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_YearnFinanceBitToken[this][from] >= 0 &&  balances_YearnFinanceBitToken[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_YearnFinanceBitToken[this][from][msg.sender] >= 0 && allowed_YearnFinanceBitToken[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(YearnFinanceBitToken.transferFrom(from, to, value), return == true && allowed_YearnFinanceBitToken[this][from][msg.sender] == old(allowed_YearnFinanceBitToken[this][from][msg.sender]) - value && _totalSupply_YearnFinanceBitToken[this] == old(_totalSupply_YearnFinanceBitToken[this]) && balances_YearnFinanceBitToken[this] == old(balances_YearnFinanceBitToken[this]) && allowed_YearnFinanceBitToken[this][p1][p2] == old(allowed_YearnFinanceBitToken[this][p1][p2]) && name_YearnFinanceBitToken[this] == old(name_YearnFinanceBitToken[this]) && symbol_YearnFinanceBitToken[this] == old(symbol_YearnFinanceBitToken[this]) && decimals_YearnFinanceBitToken[this] == old(decimals_YearnFinanceBitToken[this]))))
[2020-11-25 09:29:27,671 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(YearnFinanceBitToken.transferFrom(from, to, value), (p1 != from || p2 != msg.sender) && from == to && value <= balances_YearnFinanceBitToken[this][from] && value <= allowed_YearnFinanceBitToken[this][from][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_YearnFinanceBitToken[this][to] >= 0 && balances_YearnFinanceBitToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_YearnFinanceBitToken[this][from] >= 0 &&  balances_YearnFinanceBitToken[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_YearnFinanceBitToken[this][from][msg.sender] >= 0 && allowed_YearnFinanceBitToken[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(YearnFinanceBitToken.transferFrom(from, to, value), return == true && allowed_YearnFinanceBitToken[this][from][msg.sender] == old(allowed_YearnFinanceBitToken[this][from][msg.sender]) - value && _totalSupply_YearnFinanceBitToken[this] == old(_totalSupply_YearnFinanceBitToken[this]) && balances_YearnFinanceBitToken[this] == old(balances_YearnFinanceBitToken[this]) && allowed_YearnFinanceBitToken[this][p1][p2] == old(allowed_YearnFinanceBitToken[this][p1][p2]) && name_YearnFinanceBitToken[this] == old(name_YearnFinanceBitToken[this]) && symbol_YearnFinanceBitToken[this] == old(symbol_YearnFinanceBitToken[this]) && decimals_YearnFinanceBitToken[this] == old(decimals_YearnFinanceBitToken[this]))))
[2020-11-25 09:29:27,678 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( ( ( p1!=from_s393 || p2!=msg.sender ) && from_s393==to_s393 ) && tokens_s393<=balances_YearnFinanceBitToken[this][from_s393] ) && tokens_s393<=allowed_YearnFinanceBitToken[this][from_s393][msg.sender] ) && tokens_s393>=0 ) && tokens_s393<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_YearnFinanceBitToken[this][to_s393]>=0 ) && balances_YearnFinanceBitToken[this][to_s393]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_YearnFinanceBitToken[this][from_s393]>=0 ) && balances_YearnFinanceBitToken[this][from_s393]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && allowed_YearnFinanceBitToken[this][from_s393][msg.sender]>=0 ) && allowed_YearnFinanceBitToken[this][from_s393][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICOR,BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[from_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YearnFinanceBitToken>]],BinaryExpression[COMPNEQ,IdentifierExpression[p2,GLOBAL],IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YearnFinanceBitToken>]]],BinaryExpression[COMPEQ,IdentifierExpression[from_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YearnFinanceBitToken>],IdentifierExpression[to_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YearnFinanceBitToken>]]],BinaryExpression[COMPLEQ,IdentifierExpression[tokens_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YearnFinanceBitToken>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_YearnFinanceBitToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YearnFinanceBitToken>]]],[IdentifierExpression[from_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YearnFinanceBitToken>]]]]],BinaryExpression[COMPLEQ,IdentifierExpression[tokens_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YearnFinanceBitToken>],ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_YearnFinanceBitToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YearnFinanceBitToken>]]],[IdentifierExpression[from_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YearnFinanceBitToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YearnFinanceBitToken>]]]]],BinaryExpression[COMPGEQ,IdentifierExpression[tokens_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YearnFinanceBitToken>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[tokens_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YearnFinanceBitToken>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_YearnFinanceBitToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YearnFinanceBitToken>]]],[IdentifierExpression[to_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YearnFinanceBitToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_YearnFinanceBitToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YearnFinanceBitToken>]]],[IdentifierExpression[to_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YearnFinanceBitToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_YearnFinanceBitToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YearnFinanceBitToken>]]],[IdentifierExpression[from_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YearnFinanceBitToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_YearnFinanceBitToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YearnFinanceBitToken>]]],[IdentifierExpression[from_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YearnFinanceBitToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_YearnFinanceBitToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YearnFinanceBitToken>]]],[IdentifierExpression[from_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YearnFinanceBitToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YearnFinanceBitToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_YearnFinanceBitToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YearnFinanceBitToken>]]],[IdentifierExpression[from_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YearnFinanceBitToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YearnFinanceBitToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 09:29:27,681 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( success_s393==true && allowed_YearnFinanceBitToken[this][from_s393][msg.sender]==( ( old(allowed_YearnFinanceBitToken[this][from_s393][msg.sender]) ) - tokens_s393 ) ) && _totalSupply_YearnFinanceBitToken[this]==( old(_totalSupply_YearnFinanceBitToken[this]) ) ) && balances_YearnFinanceBitToken[this]==( old(balances_YearnFinanceBitToken[this]) ) ) && allowed_YearnFinanceBitToken[this][p1][p2]==( old(allowed_YearnFinanceBitToken[this][p1][p2]) ) ) && name_YearnFinanceBitToken[this]==( old(name_YearnFinanceBitToken[this]) ) ) && symbol_YearnFinanceBitToken[this]==( old(symbol_YearnFinanceBitToken[this]) ) ) && decimals_YearnFinanceBitToken[this]==( old(decimals_YearnFinanceBitToken[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[success_s393,<IMPLEMENTATION_OUTPARAM,transferFrom~address~address~uint256_YearnFinanceBitToken>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_YearnFinanceBitToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YearnFinanceBitToken>]]],[IdentifierExpression[from_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YearnFinanceBitToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YearnFinanceBitToken>]]],BinaryExpression[ARITHMINUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_YearnFinanceBitToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YearnFinanceBitToken>]]],[IdentifierExpression[from_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YearnFinanceBitToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YearnFinanceBitToken>]]]],IdentifierExpression[tokens_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YearnFinanceBitToken>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_totalSupply_YearnFinanceBitToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YearnFinanceBitToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_totalSupply_YearnFinanceBitToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YearnFinanceBitToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[balances_YearnFinanceBitToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YearnFinanceBitToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[balances_YearnFinanceBitToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YearnFinanceBitToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_YearnFinanceBitToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YearnFinanceBitToken>]]],[IdentifierExpression[p1,GLOBAL]]],[IdentifierExpression[p2,GLOBAL]]],UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_YearnFinanceBitToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YearnFinanceBitToken>]]],[IdentifierExpression[p1,GLOBAL]]],[IdentifierExpression[p2,GLOBAL]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[name_YearnFinanceBitToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YearnFinanceBitToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[name_YearnFinanceBitToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YearnFinanceBitToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[symbol_YearnFinanceBitToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YearnFinanceBitToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[symbol_YearnFinanceBitToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YearnFinanceBitToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[decimals_YearnFinanceBitToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YearnFinanceBitToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[decimals_YearnFinanceBitToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YearnFinanceBitToken>]]]]]]
[2020-11-25 09:29:27,686 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(YearnFinanceBitToken.transferFrom(from, to, value), (p1 != from || p2 != msg.sender) && from == to && value <= balances_YearnFinanceBitToken[this][from] && value <= allowed_YearnFinanceBitToken[this][from][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_YearnFinanceBitToken[this][to] >= 0 && balances_YearnFinanceBitToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_YearnFinanceBitToken[this][from] >= 0 &&  balances_YearnFinanceBitToken[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_YearnFinanceBitToken[this][from][msg.sender] >= 0 && allowed_YearnFinanceBitToken[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(YearnFinanceBitToken.transferFrom(from, to, value), return == true && allowed_YearnFinanceBitToken[this][from][msg.sender] == old(allowed_YearnFinanceBitToken[this][from][msg.sender]) - value && _totalSupply_YearnFinanceBitToken[this] == old(_totalSupply_YearnFinanceBitToken[this]) && balances_YearnFinanceBitToken[this] == old(balances_YearnFinanceBitToken[this]) && allowed_YearnFinanceBitToken[this][p1][p2] == old(allowed_YearnFinanceBitToken[this][p1][p2]) && name_YearnFinanceBitToken[this] == old(name_YearnFinanceBitToken[this]) && symbol_YearnFinanceBitToken[this] == old(symbol_YearnFinanceBitToken[this]) && decimals_YearnFinanceBitToken[this] == old(decimals_YearnFinanceBitToken[this]))))
[2020-11-25 09:29:27,687 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transferFrom_YearnFinanceBitToken0) ==> ( <>AP(success_transferFrom_YearnFinanceBitToken0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 09:29:27,695 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 09:29:27 PropertyContainer
[2020-11-25 09:29:27,695 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 09:29:27,695 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 09:29:27,695 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 09:29:27,696 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 09:29:27,697 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "YearnFinanceBitToken_0xf0a0f3a6fa6bed75345171a5ea18abcadf6453ba_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:29:27" (1/2) ...
[2020-11-25 09:29:27,697 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 09:29:27,697 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 09:29:27,707 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 09:29:27" (2/2) ...
[2020-11-25 09:29:27,707 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 09:29:27,708 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 09:29:27,708 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 09:29:27,708 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 09:29:27,708 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "YearnFinanceBitToken_0xf0a0f3a6fa6bed75345171a5ea18abcadf6453ba_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:29:27" (1/2) ...
[2020-11-25 09:29:27,759 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 09:29:27,759 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface_NoBaseCtor__success
[2020-11-25 09:29:27,759 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface
[2020-11-25 09:29:27,759 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface
[2020-11-25 09:29:27,759 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20Interface
[2020-11-25 09:29:27,759 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20Interface
[2020-11-25 09:29:27,759 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20Interface
[2020-11-25 09:29:27,760 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Interface
[2020-11-25 09:29:27,760 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Interface
[2020-11-25 09:29:27,760 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Interface
[2020-11-25 09:29:27,760 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 09:29:27,760 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 09:29:27,760 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 09:29:27,760 INFO  L130     BoogieDeclarations]: Found specification of procedure safeAdd~uint256~uint256_SafeMath
[2020-11-25 09:29:27,760 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeAdd~uint256~uint256_SafeMath
[2020-11-25 09:29:27,760 INFO  L130     BoogieDeclarations]: Found specification of procedure safeSub~uint256~uint256_SafeMath
[2020-11-25 09:29:27,760 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeSub~uint256~uint256_SafeMath
[2020-11-25 09:29:27,760 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMul~uint256~uint256_SafeMath
[2020-11-25 09:29:27,761 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMul~uint256~uint256_SafeMath
[2020-11-25 09:29:27,761 INFO  L130     BoogieDeclarations]: Found specification of procedure safeDiv~uint256~uint256_SafeMath
[2020-11-25 09:29:27,761 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeDiv~uint256~uint256_SafeMath
[2020-11-25 09:29:27,761 INFO  L130     BoogieDeclarations]: Found specification of procedure YearnFinanceBitToken_YearnFinanceBitToken_NoBaseCtor__success
[2020-11-25 09:29:27,761 INFO  L130     BoogieDeclarations]: Found specification of procedure YearnFinanceBitToken_YearnFinanceBitToken
[2020-11-25 09:29:27,761 INFO  L138     BoogieDeclarations]: Found implementation of procedure YearnFinanceBitToken_YearnFinanceBitToken
[2020-11-25 09:29:27,761 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_YearnFinanceBitToken
[2020-11-25 09:29:27,761 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_YearnFinanceBitToken
[2020-11-25 09:29:27,762 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_YearnFinanceBitToken
[2020-11-25 09:29:27,762 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_YearnFinanceBitToken
[2020-11-25 09:29:27,762 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_YearnFinanceBitToken
[2020-11-25 09:29:27,762 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_YearnFinanceBitToken
[2020-11-25 09:29:27,762 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_YearnFinanceBitToken
[2020-11-25 09:29:27,762 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_YearnFinanceBitToken
[2020-11-25 09:29:27,762 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_YearnFinanceBitToken
[2020-11-25 09:29:27,762 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_YearnFinanceBitToken
[2020-11-25 09:29:27,762 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_YearnFinanceBitToken
[2020-11-25 09:29:27,762 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_YearnFinanceBitToken
[2020-11-25 09:29:27,762 INFO  L130     BoogieDeclarations]: Found specification of procedure name_YearnFinanceBitToken
[2020-11-25 09:29:27,762 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_YearnFinanceBitToken
[2020-11-25 09:29:27,762 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_YearnFinanceBitToken
[2020-11-25 09:29:27,762 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_YearnFinanceBitToken
[2020-11-25 09:29:27,763 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_YearnFinanceBitToken
[2020-11-25 09:29:27,763 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_YearnFinanceBitToken
[2020-11-25 09:29:27,763 INFO  L130     BoogieDeclarations]: Found specification of procedure _totalSupply_YearnFinanceBitToken
[2020-11-25 09:29:27,763 INFO  L138     BoogieDeclarations]: Found implementation of procedure _totalSupply_YearnFinanceBitToken
[2020-11-25 09:29:27,763 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 09:29:27,763 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 09:29:27,763 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 09:29:27,763 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Interface
[2020-11-25 09:29:27,763 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Interface
[2020-11-25 09:29:27,763 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 09:29:27,763 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 09:29:27,763 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_YearnFinanceBitToken
[2020-11-25 09:29:27,763 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 09:29:27,764 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 09:29:27,764 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface_NoBaseCtor__fail
[2020-11-25 09:29:27,764 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface__success
[2020-11-25 09:29:27,764 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface__fail
[2020-11-25 09:29:27,764 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 09:29:27,764 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 09:29:27,764 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 09:29:27,764 INFO  L130     BoogieDeclarations]: Found specification of procedure safeAdd~uint256~uint256_SafeMath__success
[2020-11-25 09:29:27,764 INFO  L130     BoogieDeclarations]: Found specification of procedure safeAdd~uint256~uint256_SafeMath__fail
[2020-11-25 09:29:27,764 INFO  L130     BoogieDeclarations]: Found specification of procedure safeSub~uint256~uint256_SafeMath__success
[2020-11-25 09:29:27,764 INFO  L130     BoogieDeclarations]: Found specification of procedure safeSub~uint256~uint256_SafeMath__fail
[2020-11-25 09:29:27,764 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMul~uint256~uint256_SafeMath__success
[2020-11-25 09:29:27,764 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMul~uint256~uint256_SafeMath__fail
[2020-11-25 09:29:27,764 INFO  L130     BoogieDeclarations]: Found specification of procedure safeDiv~uint256~uint256_SafeMath__success
[2020-11-25 09:29:27,765 INFO  L130     BoogieDeclarations]: Found specification of procedure safeDiv~uint256~uint256_SafeMath__fail
[2020-11-25 09:29:27,765 INFO  L130     BoogieDeclarations]: Found specification of procedure YearnFinanceBitToken_YearnFinanceBitToken_NoBaseCtor__fail
[2020-11-25 09:29:27,765 INFO  L130     BoogieDeclarations]: Found specification of procedure YearnFinanceBitToken_YearnFinanceBitToken__success
[2020-11-25 09:29:27,765 INFO  L130     BoogieDeclarations]: Found specification of procedure YearnFinanceBitToken_YearnFinanceBitToken__fail
[2020-11-25 09:29:27,765 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_YearnFinanceBitToken__success
[2020-11-25 09:29:27,765 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_YearnFinanceBitToken__fail
[2020-11-25 09:29:27,765 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_YearnFinanceBitToken__success
[2020-11-25 09:29:27,765 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_YearnFinanceBitToken__fail
[2020-11-25 09:29:27,765 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_YearnFinanceBitToken__success
[2020-11-25 09:29:27,765 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_YearnFinanceBitToken__fail
[2020-11-25 09:29:27,765 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_YearnFinanceBitToken__success
[2020-11-25 09:29:27,765 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_YearnFinanceBitToken__fail
[2020-11-25 09:29:27,765 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_YearnFinanceBitToken__success
[2020-11-25 09:29:27,766 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_YearnFinanceBitToken__fail
[2020-11-25 09:29:27,766 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_YearnFinanceBitToken__success
[2020-11-25 09:29:27,766 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_YearnFinanceBitToken__fail
[2020-11-25 09:29:27,766 INFO  L130     BoogieDeclarations]: Found specification of procedure name_YearnFinanceBitToken__success
[2020-11-25 09:29:27,766 INFO  L130     BoogieDeclarations]: Found specification of procedure name_YearnFinanceBitToken__fail
[2020-11-25 09:29:27,766 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_YearnFinanceBitToken__success
[2020-11-25 09:29:27,766 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_YearnFinanceBitToken__fail
[2020-11-25 09:29:27,766 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_YearnFinanceBitToken__success
[2020-11-25 09:29:27,766 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_YearnFinanceBitToken__fail
[2020-11-25 09:29:27,766 INFO  L130     BoogieDeclarations]: Found specification of procedure _totalSupply_YearnFinanceBitToken__success
[2020-11-25 09:29:27,766 INFO  L130     BoogieDeclarations]: Found specification of procedure _totalSupply_YearnFinanceBitToken__fail
[2020-11-25 09:29:27,766 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 09:29:27,767 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 09:29:27,767 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 09:29:27,767 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 09:29:27,767 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 09:29:27,767 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface_NoBaseCtor__fail
[2020-11-25 09:29:27,767 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface_NoBaseCtor__success
[2020-11-25 09:29:27,767 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface__fail
[2020-11-25 09:29:27,767 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface__success
[2020-11-25 09:29:27,767 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 09:29:27,767 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 09:29:27,767 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 09:29:27,767 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 09:29:27,767 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeAdd~uint256~uint256_SafeMath__fail
[2020-11-25 09:29:27,768 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeAdd~uint256~uint256_SafeMath__success
[2020-11-25 09:29:27,768 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeSub~uint256~uint256_SafeMath__fail
[2020-11-25 09:29:27,768 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeSub~uint256~uint256_SafeMath__success
[2020-11-25 09:29:27,768 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMul~uint256~uint256_SafeMath__fail
[2020-11-25 09:29:27,768 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMul~uint256~uint256_SafeMath__success
[2020-11-25 09:29:27,768 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeDiv~uint256~uint256_SafeMath__fail
[2020-11-25 09:29:27,768 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeDiv~uint256~uint256_SafeMath__success
[2020-11-25 09:29:27,768 INFO  L138     BoogieDeclarations]: Found implementation of procedure YearnFinanceBitToken_YearnFinanceBitToken_NoBaseCtor__fail
[2020-11-25 09:29:27,768 INFO  L138     BoogieDeclarations]: Found implementation of procedure YearnFinanceBitToken_YearnFinanceBitToken_NoBaseCtor__success
[2020-11-25 09:29:27,768 INFO  L138     BoogieDeclarations]: Found implementation of procedure YearnFinanceBitToken_YearnFinanceBitToken__fail
[2020-11-25 09:29:27,768 INFO  L138     BoogieDeclarations]: Found implementation of procedure YearnFinanceBitToken_YearnFinanceBitToken__success
[2020-11-25 09:29:27,768 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_YearnFinanceBitToken__fail
[2020-11-25 09:29:27,768 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_YearnFinanceBitToken__success
[2020-11-25 09:29:27,769 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_YearnFinanceBitToken__fail
[2020-11-25 09:29:27,769 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_YearnFinanceBitToken__success
[2020-11-25 09:29:27,769 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_YearnFinanceBitToken__fail
[2020-11-25 09:29:27,769 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_YearnFinanceBitToken__success
[2020-11-25 09:29:27,769 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_YearnFinanceBitToken__fail
[2020-11-25 09:29:27,769 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_YearnFinanceBitToken__success
[2020-11-25 09:29:27,769 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_YearnFinanceBitToken__fail
[2020-11-25 09:29:27,769 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_YearnFinanceBitToken__success
[2020-11-25 09:29:27,769 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_YearnFinanceBitToken__fail
[2020-11-25 09:29:27,769 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_YearnFinanceBitToken__success
[2020-11-25 09:29:27,769 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_YearnFinanceBitToken__fail
[2020-11-25 09:29:27,769 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_YearnFinanceBitToken__success
[2020-11-25 09:29:27,770 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_YearnFinanceBitToken__fail
[2020-11-25 09:29:27,770 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_YearnFinanceBitToken__success
[2020-11-25 09:29:27,770 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_YearnFinanceBitToken__fail
[2020-11-25 09:29:27,770 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_YearnFinanceBitToken__success
[2020-11-25 09:29:27,770 INFO  L138     BoogieDeclarations]: Found implementation of procedure _totalSupply_YearnFinanceBitToken__fail
[2020-11-25 09:29:27,770 INFO  L138     BoogieDeclarations]: Found implementation of procedure _totalSupply_YearnFinanceBitToken__success
[2020-11-25 09:29:27,770 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 09:29:27,770 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 09:29:27,770 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 09:29:27,770 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 09:29:27,770 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 09:29:27,770 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 09:29:27,771 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Interface
[2020-11-25 09:29:27,771 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Interface
[2020-11-25 09:29:27,771 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 09:29:27,771 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 09:29:27,771 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_YearnFinanceBitToken
[2020-11-25 09:29:27,771 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 09:29:27,771 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 09:29:27,771 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 09:29:27,934 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 09:29:27,952 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 09:29:27,952 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 09:29:27,953 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 09:29:28,366 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 09:29:28,366 INFO  L286             CfgBuilder]: Removed 3 assue(true) statements.
[2020-11-25 09:29:28,368 INFO  L202        PluginConnector]: Adding new model YearnFinanceBitToken_0xf0a0f3a6fa6bed75345171a5ea18abcadf6453ba_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 09:29:28 BoogieIcfgContainer
[2020-11-25 09:29:28,368 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 09:29:27" (2/2) ...
[2020-11-25 09:29:28,368 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 09:29:28,369 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@72a46580 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 09:29:28, skipping insertion in model container
[2020-11-25 09:29:28,369 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 09:29:28,369 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 09:29:28,369 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 09:29:28,370 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 09:29:28,371 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "YearnFinanceBitToken_0xf0a0f3a6fa6bed75345171a5ea18abcadf6453ba_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:29:27" (1/3) ...
[2020-11-25 09:29:28,371 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@5f6866ed and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 09:29:28, skipping insertion in model container
[2020-11-25 09:29:28,371 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 09:29:27" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 09:29:28,409 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 09:29:28 NWAContainer
[2020-11-25 09:29:28,409 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 09:29:28,409 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 09:29:28,409 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 09:29:28,410 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 09:29:28,411 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "YearnFinanceBitToken_0xf0a0f3a6fa6bed75345171a5ea18abcadf6453ba_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 09:29:28" (3/4) ...
[2020-11-25 09:29:28,412 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@74506492 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 09:29:28, skipping insertion in model container
[2020-11-25 09:29:28,412 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 09:29:28" (4/4) ...
[2020-11-25 09:29:28,415 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 09:29:28,418 INFO  L110   BuchiProductObserver]: Initial RCFG 1051 locations, 1324 edges
[2020-11-25 09:29:28,418 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 09:29:28,428 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 09:29:29,525 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 09:29:29,528 INFO  L110   BuchiProductObserver]: BuchiProgram size 2492 locations, 4284 edges
[2020-11-25 09:29:29,529 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 09:29:29 BoogieIcfgContainer
[2020-11-25 09:29:29,529 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 09:29:29,529 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 09:29:29,529 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 09:29:29,531 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 09:29:29,531 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 09:29:29" (1/1) ...
[2020-11-25 09:29:29,601 INFO  L313           BlockEncoder]: Initial Icfg 2492 locations, 4284 edges
[2020-11-25 09:29:29,601 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 09:29:29,602 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 09:29:29,602 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 09:29:29,602 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 09:29:29,611 INFO  L70    emoveInfeasibleEdges]: Removed 66 edges and 9 locations because of local infeasibility
[2020-11-25 09:29:29,617 INFO  L70        RemoveSinkStates]: Removed 32 edges and 21 locations by removing sink states
[2020-11-25 09:29:29,626 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 09:29:29,631 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 09:29:29,633 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 09:29:29,633 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 09:29:29,636 INFO  L313           BlockEncoder]: Encoded RCFG 2448 locations, 4166 edges
[2020-11-25 09:29:29,636 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 09:29:29 BasicIcfg
[2020-11-25 09:29:29,636 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 09:29:29,637 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 09:29:29,637 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 09:29:29,638 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 09:29:29,639 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 09:29:29,639 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "YearnFinanceBitToken_0xf0a0f3a6fa6bed75345171a5ea18abcadf6453ba_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:29:27" (1/6) ...
[2020-11-25 09:29:29,640 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5984c786 and model type YearnFinanceBitToken_0xf0a0f3a6fa6bed75345171a5ea18abcadf6453ba_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 09:29:29, skipping insertion in model container
[2020-11-25 09:29:29,640 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 09:29:29,640 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 09:29:27" (2/6) ...
[2020-11-25 09:29:29,641 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5984c786 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 09:29:29, skipping insertion in model container
[2020-11-25 09:29:29,641 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 09:29:29,641 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "YearnFinanceBitToken_0xf0a0f3a6fa6bed75345171a5ea18abcadf6453ba_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 09:29:28" (3/6) ...
[2020-11-25 09:29:29,641 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5984c786 and model type YearnFinanceBitToken_0xf0a0f3a6fa6bed75345171a5ea18abcadf6453ba_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 09:29:29, skipping insertion in model container
[2020-11-25 09:29:29,641 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 09:29:29,641 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 09:29:28" (4/6) ...
[2020-11-25 09:29:29,641 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5984c786 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 09:29:29, skipping insertion in model container
[2020-11-25 09:29:29,641 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 09:29:29,641 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 09:29:29" (5/6) ...
[2020-11-25 09:29:29,642 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5984c786 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 09:29:29, skipping insertion in model container
[2020-11-25 09:29:29,642 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 09:29:29,642 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 09:29:29" (6/6) ...
[2020-11-25 09:29:29,643 INFO  L404   chiAutomizerObserver]: Analyzing ICFG YearnFinanceBitToken_0xf0a0f3a6fa6bed75345171a5ea18abcadf6453ba_transferfrom-self.bpl_BEv2
[2020-11-25 09:29:29,678 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 09:29:29,678 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 09:29:29,678 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 09:29:29,678 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 09:29:29,678 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 09:29:29,678 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 09:29:29,678 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 09:29:29,679 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 09:29:29,679 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 09:29:29,701 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2448 states.
[2020-11-25 09:29:29,772 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:29:29,772 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:29:29,772 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:29:29,782 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:29:29,782 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:29:29,782 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 09:29:29,782 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2448 states.
[2020-11-25 09:29:29,794 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:29:29,794 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:29:29,794 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:29:29,796 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:29:29,796 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_YearnFinanceBitToken0 := false;
[L3]                 call_transferFrom_YearnFinanceBitToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L2854]              assume null == 0;
[L2855]  CALL        call this := FreshRefGenerator__success();
[L1250]              havoc newRef;
[L1251]              assume Alloc[newRef] == false;
[L1252]              Alloc[newRef] := true;
[L1253]              assume newRef != null;
[L2855]  RET         call this := FreshRefGenerator__success();
[L2856]              assume now >= 0;
[L2857]              assume DType[this] == YearnFinanceBitToken;
[L2858]              assume msgvalue_MSG == 0;
[L2859]              gas := gas - 53000;
[L2860]  CALL        call YearnFinanceBitToken_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG);
[L399]               havoc __exception;
[L400]               revert := false;
[L401]   COND FALSE  !(__exception)
[L422]   CALL        call YearnFinanceBitToken_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1457]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1282]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1267]              assume msgsender_MSG != null;
[L1268]              Balance[this] := 0;
[L1282]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1283]  COND FALSE  !(revert)
[L1457]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1458]  COND TRUE   revert
[L422]   RET         call YearnFinanceBitToken_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG);
[L423]               assume !revert && gas >= 0;
[L2860]  RET         call YearnFinanceBitToken_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG);
[L2861]              assume !revert && gas >= 0;

Loop:
[L2864]  CALL        call CorralChoice_YearnFinanceBitToken(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != YearnFinanceBitToken;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND TRUE   choice == 14
[L2752]              gas := gas - 21000;
[L2753]  COND FALSE  !(gas >= 0)
[L2864]  RET         call CorralChoice_YearnFinanceBitToken(this);

[2020-11-25 09:29:29,813 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:29:29,813 INFO  L82        PathProgramCache]: Analyzing trace with hash -1454869766, now seen corresponding path program 1 times
[2020-11-25 09:29:29,816 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:29:29,832 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:29:29,868 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 09:29:29,869 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:29:29,869 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 09:29:29,872 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:29:30,026 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 09:29:30,027 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 09:29:30,029 INFO  L87              Difference]: Start difference. First operand 2448 states. Second operand 3 states.
[2020-11-25 09:29:30,163 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:29:30,163 INFO  L93              Difference]: Finished difference Result 1724 states and 1881 transitions.
[2020-11-25 09:29:30,163 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 09:29:30,165 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1724 states and 1881 transitions.
[2020-11-25 09:29:30,172 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:29:30,184 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1724 states to 1724 states and 1881 transitions.
[2020-11-25 09:29:30,185 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-25 09:29:30,186 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 603
[2020-11-25 09:29:30,187 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1724 states and 1881 transitions.
[2020-11-25 09:29:30,191 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:29:30,191 INFO  L728         BuchiCegarLoop]: Abstraction has 1724 states and 1881 transitions.
[2020-11-25 09:29:30,204 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1724 states and 1881 transitions.
[2020-11-25 09:29:30,235 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1724 to 1724.
[2020-11-25 09:29:30,235 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1724 states.
[2020-11-25 09:29:30,238 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1724 states to 1724 states and 1881 transitions.
[2020-11-25 09:29:30,240 INFO  L751         BuchiCegarLoop]: Abstraction has 1724 states and 1881 transitions.
[2020-11-25 09:29:30,240 INFO  L631         BuchiCegarLoop]: Abstraction has 1724 states and 1881 transitions.
[2020-11-25 09:29:30,240 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 09:29:30,240 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1724 states and 1881 transitions.
[2020-11-25 09:29:30,246 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:29:30,246 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:29:30,246 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:29:30,249 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:29:30,249 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_YearnFinanceBitToken0 := false;
[L3]                 call_transferFrom_YearnFinanceBitToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L2854]              assume null == 0;
[L2855]  CALL        call this := FreshRefGenerator__success();
[L1250]              havoc newRef;
[L1251]              assume Alloc[newRef] == false;
[L1252]              Alloc[newRef] := true;
[L1253]              assume newRef != null;
[L2855]  RET         call this := FreshRefGenerator__success();
[L2856]              assume now >= 0;
[L2857]              assume DType[this] == YearnFinanceBitToken;
[L2858]              assume msgvalue_MSG == 0;
[L2859]              gas := gas - 53000;
[L2860]  CALL        call YearnFinanceBitToken_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG);
[L399]               havoc __exception;
[L400]               revert := false;
[L401]   COND FALSE  !(__exception)
[L422]   CALL        call YearnFinanceBitToken_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1457]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1282]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1267]              assume msgsender_MSG != null;
[L1268]              Balance[this] := 0;
[L1282]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1283]  COND FALSE  !(revert)
[L1457]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1458]  COND TRUE   revert
[L422]   RET         call YearnFinanceBitToken_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG);
[L423]               assume !revert && gas >= 0;
[L2860]  RET         call YearnFinanceBitToken_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG);
[L2861]              assume !revert && gas >= 0;
[L2864]  CALL        call CorralChoice_YearnFinanceBitToken(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != YearnFinanceBitToken;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND FALSE  !(choice == 11)
[L2776]  COND FALSE  !(choice == 10)
[L2783]  COND TRUE   choice == 9
[L2784]              gas := gas - 21000;
[L2785]  COND TRUE   gas >= 0
[L2786]              assume tokens_s393 >= 0 && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2787]              assume msgvalue_MSG == 0;
[L2788]  CALL        call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s393 || p2 != msgsender_MSG) && from_s393 == to_s393) && tokens_s393 <= balances_YearnFinanceBitToken[this][from_s393]) && tokens_s393 <= allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG]) && tokens_s393 >= 0) && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][to_s393] >= 0) && balances_YearnFinanceBitToken[this][to_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][from_s393] >= 0) && balances_YearnFinanceBitToken[this][from_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] >= 0) && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_YearnFinanceBitToken0 := true;
[L3]                 call_transferFrom_YearnFinanceBitToken0 := false;
[L3]                 revert := revert_hold;
[L707]               havoc __exception;
[L708]               revert := false;
[L709]   COND FALSE  !(__exception)
[L730]   CALL        call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L1638]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1639]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][from_s393], tokens_s393);
[L1349]  COND FALSE  !(!(b_s112 <= a_s112))
[L1353]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1639]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][from_s393], tokens_s393);
[L1640]  COND TRUE   revert
[L730]   RET         call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L731]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((success_s393 == true && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] == old(allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG]) - tokens_s393) && _totalSupply_YearnFinanceBitToken[this] == old(_totalSupply_YearnFinanceBitToken[this])) && balances_YearnFinanceBitToken[this] == old(balances_YearnFinanceBitToken[this])) && allowed_YearnFinanceBitToken[this][p1][p2] == old(allowed_YearnFinanceBitToken[this][p1][p2])) && name_YearnFinanceBitToken[this] == old(name_YearnFinanceBitToken[this])) && symbol_YearnFinanceBitToken[this] == old(symbol_YearnFinanceBitToken[this])) && decimals_YearnFinanceBitToken[this] == old(decimals_YearnFinanceBitToken[this]));
[L3]                 revert := revert_hold;
[L2788]  RET         call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L2864]  RET         call CorralChoice_YearnFinanceBitToken(this);

Loop:
[L2864]  CALL        call CorralChoice_YearnFinanceBitToken(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != YearnFinanceBitToken;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND FALSE  !(choice == 11)
[L2776]  COND FALSE  !(choice == 10)
[L2783]  COND TRUE   choice == 9
[L2784]              gas := gas - 21000;
[L2785]  COND TRUE   gas >= 0
[L2786]              assume tokens_s393 >= 0 && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2787]              assume msgvalue_MSG == 0;
[L2788]  CALL        call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s393 || p2 != msgsender_MSG) && from_s393 == to_s393) && tokens_s393 <= balances_YearnFinanceBitToken[this][from_s393]) && tokens_s393 <= allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG]) && tokens_s393 >= 0) && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][to_s393] >= 0) && balances_YearnFinanceBitToken[this][to_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][from_s393] >= 0) && balances_YearnFinanceBitToken[this][from_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] >= 0) && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_YearnFinanceBitToken0 := true;
[L3]                 call_transferFrom_YearnFinanceBitToken0 := false;
[L3]                 revert := revert_hold;
[L707]               havoc __exception;
[L708]               revert := false;
[L709]   COND FALSE  !(__exception)
[L730]   CALL        call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L1638]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1639]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][from_s393], tokens_s393);
[L1349]  COND FALSE  !(!(b_s112 <= a_s112))
[L1353]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1639]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][from_s393], tokens_s393);
[L1640]  COND TRUE   revert
[L730]   RET         call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L731]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((success_s393 == true && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] == old(allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG]) - tokens_s393) && _totalSupply_YearnFinanceBitToken[this] == old(_totalSupply_YearnFinanceBitToken[this])) && balances_YearnFinanceBitToken[this] == old(balances_YearnFinanceBitToken[this])) && allowed_YearnFinanceBitToken[this][p1][p2] == old(allowed_YearnFinanceBitToken[this][p1][p2])) && name_YearnFinanceBitToken[this] == old(name_YearnFinanceBitToken[this])) && symbol_YearnFinanceBitToken[this] == old(symbol_YearnFinanceBitToken[this])) && decimals_YearnFinanceBitToken[this] == old(decimals_YearnFinanceBitToken[this]));
[L3]                 revert := revert_hold;
[L2788]  RET         call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L2864]  RET         call CorralChoice_YearnFinanceBitToken(this);

[2020-11-25 09:29:30,254 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:29:30,254 INFO  L82        PathProgramCache]: Analyzing trace with hash -436463260, now seen corresponding path program 1 times
[2020-11-25 09:29:30,255 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:29:30,266 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:29:30,284 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 09:29:30,284 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:29:30,284 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 09:29:30,285 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:29:30,285 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 09:29:30,285 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 09:29:30,286 INFO  L87              Difference]: Start difference. First operand 1724 states and 1881 transitions. cyclomatic complexity: 159 Second operand 4 states.
[2020-11-25 09:29:30,556 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:29:30,556 INFO  L93              Difference]: Finished difference Result 2598 states and 2957 transitions.
[2020-11-25 09:29:30,556 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 09:29:30,557 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2598 states and 2957 transitions.
[2020-11-25 09:29:30,569 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-25 09:29:30,585 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2598 states to 2522 states and 2875 transitions.
[2020-11-25 09:29:30,585 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 855
[2020-11-25 09:29:30,586 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 860
[2020-11-25 09:29:30,586 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2522 states and 2875 transitions.
[2020-11-25 09:29:30,590 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:29:30,590 INFO  L728         BuchiCegarLoop]: Abstraction has 2522 states and 2875 transitions.
[2020-11-25 09:29:30,592 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2522 states and 2875 transitions.
[2020-11-25 09:29:30,611 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2522 to 1744.
[2020-11-25 09:29:30,611 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1744 states.
[2020-11-25 09:29:30,614 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1744 states to 1744 states and 1873 transitions.
[2020-11-25 09:29:30,614 INFO  L751         BuchiCegarLoop]: Abstraction has 1744 states and 1873 transitions.
[2020-11-25 09:29:30,614 INFO  L631         BuchiCegarLoop]: Abstraction has 1744 states and 1873 transitions.
[2020-11-25 09:29:30,614 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 09:29:30,614 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1744 states and 1873 transitions.
[2020-11-25 09:29:30,618 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:29:30,618 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:29:30,618 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:29:30,620 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:29:30,620 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_YearnFinanceBitToken0 := false;
[L3]                 call_transferFrom_YearnFinanceBitToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L2854]              assume null == 0;
[L2855]  CALL        call this := FreshRefGenerator__success();
[L1250]              havoc newRef;
[L1251]              assume Alloc[newRef] == false;
[L1252]              Alloc[newRef] := true;
[L1253]              assume newRef != null;
[L2855]  RET         call this := FreshRefGenerator__success();
[L2856]              assume now >= 0;
[L2857]              assume DType[this] == YearnFinanceBitToken;
[L2858]              assume msgvalue_MSG == 0;
[L2859]              gas := gas - 53000;
[L2860]  CALL        call YearnFinanceBitToken_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG);
[L399]               havoc __exception;
[L400]               revert := false;
[L401]   COND FALSE  !(__exception)
[L422]   CALL        call YearnFinanceBitToken_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1457]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1282]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1267]              assume msgsender_MSG != null;
[L1268]              Balance[this] := 0;
[L1282]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1283]  COND FALSE  !(revert)
[L1457]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1458]  COND FALSE  !(revert)
[L1461]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1314]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1299]              assume msgsender_MSG != null;
[L1300]              Balance[this] := 0;
[L1314]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1315]  COND FALSE  !(revert)
[L1461]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1462]  COND FALSE  !(revert)
[L1465]  CALL        call YearnFinanceBitToken_YearnFinanceBitToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1418]              assume msgsender_MSG != null;
[L1419]              Balance[this] := 0;
[L1420]              name_YearnFinanceBitToken[this] := 627147201;
[L1421]              symbol_YearnFinanceBitToken[this] := 627147201;
[L1422]              decimals_YearnFinanceBitToken[this] := 0;
[L1423]              _totalSupply_YearnFinanceBitToken[this] := 0;
[L1424]              balances_YearnFinanceBitToken[this] := zeroRefintArr();
[L1425]              sum_balances0[this] := 0;
[L1426]              allowed_YearnFinanceBitToken[this] := zeroRefRefintArr();
[L1427]              sum_allowed1[this] := 0;
[L1429]              name_YearnFinanceBitToken[this] := 1658284292;
[L1430]              symbol_YearnFinanceBitToken[this] := -1175268548;
[L1431]              decimals_YearnFinanceBitToken[this] := 18;
[L1432]              _totalSupply_YearnFinanceBitToken[this] := 7000000000000000000000;
[L1433]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1434]              balances_YearnFinanceBitToken[this][msgsender_MSG] := _totalSupply_YearnFinanceBitToken[this];
[L1435]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1436]              assert { :EventEmitted "Transfer_YearnFinanceBitToken" } true;
[L1465]  RET         call YearnFinanceBitToken_YearnFinanceBitToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1466]  COND FALSE  !(revert)
[L422]   RET         call YearnFinanceBitToken_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG);
[L423]               assume !revert && gas >= 0;
[L2860]  RET         call YearnFinanceBitToken_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG);
[L2861]              assume !revert && gas >= 0;
[L2864]  CALL        call CorralChoice_YearnFinanceBitToken(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != YearnFinanceBitToken;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND FALSE  !(choice == 11)
[L2776]  COND FALSE  !(choice == 10)
[L2783]  COND TRUE   choice == 9
[L2784]              gas := gas - 21000;
[L2785]  COND TRUE   gas >= 0
[L2786]              assume tokens_s393 >= 0 && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2787]              assume msgvalue_MSG == 0;
[L2788]  CALL        call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s393 || p2 != msgsender_MSG) && from_s393 == to_s393) && tokens_s393 <= balances_YearnFinanceBitToken[this][from_s393]) && tokens_s393 <= allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG]) && tokens_s393 >= 0) && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][to_s393] >= 0) && balances_YearnFinanceBitToken[this][to_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][from_s393] >= 0) && balances_YearnFinanceBitToken[this][from_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] >= 0) && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_YearnFinanceBitToken0 := true;
[L3]                 call_transferFrom_YearnFinanceBitToken0 := false;
[L3]                 revert := revert_hold;
[L707]               havoc __exception;
[L708]               revert := false;
[L709]   COND TRUE   __exception
[L710]               __tmp__Balance := Balance;
[L711]               __tmp__DType := DType;
[L712]               __tmp__Alloc := Alloc;
[L713]               __tmp__balance_ADDR := balance_ADDR;
[L714]               __tmp__M_Ref_int := M_Ref_int;
[L715]               __tmp__sum_balances0 := sum_balances0;
[L716]               __tmp__alloc_allowed_YearnFinanceBitToken_lvl0 := alloc_allowed_YearnFinanceBitToken_lvl0;
[L717]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L718]               __tmp__sum_allowed1 := sum_allowed1;
[L719]               __tmp__Length := Length;
[L720]               __tmp__now := now;
[L721]               __tmp__name_YearnFinanceBitToken := name_YearnFinanceBitToken;
[L722]               __tmp__symbol_YearnFinanceBitToken := symbol_YearnFinanceBitToken;
[L723]               __tmp__decimals_YearnFinanceBitToken := decimals_YearnFinanceBitToken;
[L724]               __tmp___totalSupply_YearnFinanceBitToken := _totalSupply_YearnFinanceBitToken;
[L725]               __tmp__balances_YearnFinanceBitToken := balances_YearnFinanceBitToken;
[L726]               __tmp__allowed_YearnFinanceBitToken := allowed_YearnFinanceBitToken;
[L727]   CALL        call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L1596]  COND TRUE   __tmp__DType[this] == YearnFinanceBitToken
[L1597]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_YearnFinanceBitToken[this][from_s393], tokens_s393);
[L1340]  COND TRUE   !(b_s112 <= a_s112)
[L1341]              revert := true;
[L1597]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_YearnFinanceBitToken[this][from_s393], tokens_s393);
[L1598]  COND TRUE   revert
[L727]   RET         call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L728]               assume revert || gas < 0;
[L2788]  RET         call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L2864]  RET         call CorralChoice_YearnFinanceBitToken(this);

Loop:
[L2864]  CALL        call CorralChoice_YearnFinanceBitToken(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != YearnFinanceBitToken;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND FALSE  !(choice == 11)
[L2776]  COND FALSE  !(choice == 10)
[L2783]  COND TRUE   choice == 9
[L2784]              gas := gas - 21000;
[L2785]  COND TRUE   gas >= 0
[L2786]              assume tokens_s393 >= 0 && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2787]              assume msgvalue_MSG == 0;
[L2788]  CALL        call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s393 || p2 != msgsender_MSG) && from_s393 == to_s393) && tokens_s393 <= balances_YearnFinanceBitToken[this][from_s393]) && tokens_s393 <= allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG]) && tokens_s393 >= 0) && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][to_s393] >= 0) && balances_YearnFinanceBitToken[this][to_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][from_s393] >= 0) && balances_YearnFinanceBitToken[this][from_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] >= 0) && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_YearnFinanceBitToken0 := true;
[L3]                 call_transferFrom_YearnFinanceBitToken0 := false;
[L3]                 revert := revert_hold;
[L707]               havoc __exception;
[L708]               revert := false;
[L709]   COND TRUE   __exception
[L710]               __tmp__Balance := Balance;
[L711]               __tmp__DType := DType;
[L712]               __tmp__Alloc := Alloc;
[L713]               __tmp__balance_ADDR := balance_ADDR;
[L714]               __tmp__M_Ref_int := M_Ref_int;
[L715]               __tmp__sum_balances0 := sum_balances0;
[L716]               __tmp__alloc_allowed_YearnFinanceBitToken_lvl0 := alloc_allowed_YearnFinanceBitToken_lvl0;
[L717]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L718]               __tmp__sum_allowed1 := sum_allowed1;
[L719]               __tmp__Length := Length;
[L720]               __tmp__now := now;
[L721]               __tmp__name_YearnFinanceBitToken := name_YearnFinanceBitToken;
[L722]               __tmp__symbol_YearnFinanceBitToken := symbol_YearnFinanceBitToken;
[L723]               __tmp__decimals_YearnFinanceBitToken := decimals_YearnFinanceBitToken;
[L724]               __tmp___totalSupply_YearnFinanceBitToken := _totalSupply_YearnFinanceBitToken;
[L725]               __tmp__balances_YearnFinanceBitToken := balances_YearnFinanceBitToken;
[L726]               __tmp__allowed_YearnFinanceBitToken := allowed_YearnFinanceBitToken;
[L727]   CALL        call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L1596]  COND TRUE   __tmp__DType[this] == YearnFinanceBitToken
[L1597]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_YearnFinanceBitToken[this][from_s393], tokens_s393);
[L1340]  COND TRUE   !(b_s112 <= a_s112)
[L1341]              revert := true;
[L1597]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_YearnFinanceBitToken[this][from_s393], tokens_s393);
[L1598]  COND TRUE   revert
[L727]   RET         call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L728]               assume revert || gas < 0;
[L2788]  RET         call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L2864]  RET         call CorralChoice_YearnFinanceBitToken(this);

[2020-11-25 09:29:30,623 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:29:30,623 INFO  L82        PathProgramCache]: Analyzing trace with hash 1418695526, now seen corresponding path program 1 times
[2020-11-25 09:29:30,624 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:29:30,636 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:29:30,702 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 09:29:30,702 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:29:30,702 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 09:29:30,702 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:29:30,702 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 09:29:30,702 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 09:29:30,703 INFO  L87              Difference]: Start difference. First operand 1744 states and 1873 transitions. cyclomatic complexity: 131 Second operand 7 states.
[2020-11-25 09:29:31,390 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:29:31,390 INFO  L93              Difference]: Finished difference Result 1902 states and 2045 transitions.
[2020-11-25 09:29:31,390 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 09:29:31,391 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1902 states and 2045 transitions.
[2020-11-25 09:29:31,399 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 09:29:31,407 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1902 states to 1902 states and 2045 transitions.
[2020-11-25 09:29:31,407 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 670
[2020-11-25 09:29:31,407 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 670
[2020-11-25 09:29:31,407 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1902 states and 2045 transitions.
[2020-11-25 09:29:31,409 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:29:31,409 INFO  L728         BuchiCegarLoop]: Abstraction has 1902 states and 2045 transitions.
[2020-11-25 09:29:31,411 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1902 states and 2045 transitions.
[2020-11-25 09:29:31,429 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1902 to 1796.
[2020-11-25 09:29:31,429 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1796 states.
[2020-11-25 09:29:31,432 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1796 states to 1796 states and 1929 transitions.
[2020-11-25 09:29:31,432 INFO  L751         BuchiCegarLoop]: Abstraction has 1796 states and 1929 transitions.
[2020-11-25 09:29:31,432 INFO  L631         BuchiCegarLoop]: Abstraction has 1796 states and 1929 transitions.
[2020-11-25 09:29:31,432 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 09:29:31,433 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1796 states and 1929 transitions.
[2020-11-25 09:29:31,437 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:29:31,437 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:29:31,437 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:29:31,439 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:29:31,439 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_YearnFinanceBitToken0 := false;
[L3]                 call_transferFrom_YearnFinanceBitToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L2854]              assume null == 0;
[L2855]  CALL        call this := FreshRefGenerator__success();
[L1250]              havoc newRef;
[L1251]              assume Alloc[newRef] == false;
[L1252]              Alloc[newRef] := true;
[L1253]              assume newRef != null;
[L2855]  RET         call this := FreshRefGenerator__success();
[L2856]              assume now >= 0;
[L2857]              assume DType[this] == YearnFinanceBitToken;
[L2858]              assume msgvalue_MSG == 0;
[L2859]              gas := gas - 53000;
[L2860]  CALL        call YearnFinanceBitToken_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG);
[L399]               havoc __exception;
[L400]               revert := false;
[L401]   COND FALSE  !(__exception)
[L422]   CALL        call YearnFinanceBitToken_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1457]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1282]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1267]              assume msgsender_MSG != null;
[L1268]              Balance[this] := 0;
[L1282]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1283]  COND FALSE  !(revert)
[L1457]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1458]  COND FALSE  !(revert)
[L1461]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1314]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1299]              assume msgsender_MSG != null;
[L1300]              Balance[this] := 0;
[L1314]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1315]  COND FALSE  !(revert)
[L1461]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1462]  COND FALSE  !(revert)
[L1465]  CALL        call YearnFinanceBitToken_YearnFinanceBitToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1418]              assume msgsender_MSG != null;
[L1419]              Balance[this] := 0;
[L1420]              name_YearnFinanceBitToken[this] := 627147201;
[L1421]              symbol_YearnFinanceBitToken[this] := 627147201;
[L1422]              decimals_YearnFinanceBitToken[this] := 0;
[L1423]              _totalSupply_YearnFinanceBitToken[this] := 0;
[L1424]              balances_YearnFinanceBitToken[this] := zeroRefintArr();
[L1425]              sum_balances0[this] := 0;
[L1426]              allowed_YearnFinanceBitToken[this] := zeroRefRefintArr();
[L1427]              sum_allowed1[this] := 0;
[L1429]              name_YearnFinanceBitToken[this] := 1658284292;
[L1430]              symbol_YearnFinanceBitToken[this] := -1175268548;
[L1431]              decimals_YearnFinanceBitToken[this] := 18;
[L1432]              _totalSupply_YearnFinanceBitToken[this] := 7000000000000000000000;
[L1433]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1434]              balances_YearnFinanceBitToken[this][msgsender_MSG] := _totalSupply_YearnFinanceBitToken[this];
[L1435]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1436]              assert { :EventEmitted "Transfer_YearnFinanceBitToken" } true;
[L1465]  RET         call YearnFinanceBitToken_YearnFinanceBitToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1466]  COND FALSE  !(revert)
[L422]   RET         call YearnFinanceBitToken_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG);
[L423]               assume !revert && gas >= 0;
[L2860]  RET         call YearnFinanceBitToken_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG);
[L2861]              assume !revert && gas >= 0;
[L2864]  CALL        call CorralChoice_YearnFinanceBitToken(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != YearnFinanceBitToken;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND FALSE  !(choice == 11)
[L2776]  COND FALSE  !(choice == 10)
[L2783]  COND TRUE   choice == 9
[L2784]              gas := gas - 21000;
[L2785]  COND TRUE   gas >= 0
[L2786]              assume tokens_s393 >= 0 && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2787]              assume msgvalue_MSG == 0;
[L2788]  CALL        call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s393 || p2 != msgsender_MSG) && from_s393 == to_s393) && tokens_s393 <= balances_YearnFinanceBitToken[this][from_s393]) && tokens_s393 <= allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG]) && tokens_s393 >= 0) && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][to_s393] >= 0) && balances_YearnFinanceBitToken[this][to_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][from_s393] >= 0) && balances_YearnFinanceBitToken[this][from_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] >= 0) && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_YearnFinanceBitToken0 := true;
[L3]                 call_transferFrom_YearnFinanceBitToken0 := false;
[L3]                 revert := revert_hold;
[L707]               havoc __exception;
[L708]               revert := false;
[L709]   COND FALSE  !(__exception)
[L730]   CALL        call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L1638]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1639]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][from_s393], tokens_s393);
[L1349]  COND FALSE  !(!(b_s112 <= a_s112))
[L1353]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1639]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][from_s393], tokens_s393);
[L1640]  COND FALSE  !(revert)
[L1646]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][from_s393];
[L1647]              balances_YearnFinanceBitToken[this][from_s393] := __var_4;
[L1648]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][from_s393];
[L1649]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1650]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG], tokens_s393);
[L1349]  COND FALSE  !(!(b_s112 <= a_s112))
[L1353]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1650]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG], tokens_s393);
[L1651]  COND FALSE  !(revert)
[L1657]              sum_allowed1[from_s393] := sum_allowed1[from_s393] - allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG];
[L1658]              allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] := __var_5;
[L1659]              sum_allowed1[from_s393] := sum_allowed1[from_s393] + allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG];
[L1660]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1661]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][to_s393], tokens_s393);
[L1331]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1332]  COND FALSE  !(!(c_s90 >= a_s90))
[L1661]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][to_s393], tokens_s393);
[L1662]  COND FALSE  !(revert)
[L1668]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][to_s393];
[L1669]              balances_YearnFinanceBitToken[this][to_s393] := __var_6;
[L1670]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][to_s393];
[L1671]              assert { :EventEmitted "Transfer_YearnFinanceBitToken" } true;
[L1672]              success_s393 := true;
[L730]   RET         call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L731]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((success_s393 == true && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] == old(allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG]) - tokens_s393) && _totalSupply_YearnFinanceBitToken[this] == old(_totalSupply_YearnFinanceBitToken[this])) && balances_YearnFinanceBitToken[this] == old(balances_YearnFinanceBitToken[this])) && allowed_YearnFinanceBitToken[this][p1][p2] == old(allowed_YearnFinanceBitToken[this][p1][p2])) && name_YearnFinanceBitToken[this] == old(name_YearnFinanceBitToken[this])) && symbol_YearnFinanceBitToken[this] == old(symbol_YearnFinanceBitToken[this])) && decimals_YearnFinanceBitToken[this] == old(decimals_YearnFinanceBitToken[this]));
[L3]                 revert := revert_hold;
[L2788]  RET         call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L2864]  RET         call CorralChoice_YearnFinanceBitToken(this);

Loop:
[L2864]  CALL        call CorralChoice_YearnFinanceBitToken(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != YearnFinanceBitToken;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND FALSE  !(choice == 11)
[L2776]  COND FALSE  !(choice == 10)
[L2783]  COND TRUE   choice == 9
[L2784]              gas := gas - 21000;
[L2785]  COND TRUE   gas >= 0
[L2786]              assume tokens_s393 >= 0 && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2787]              assume msgvalue_MSG == 0;
[L2788]  CALL        call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s393 || p2 != msgsender_MSG) && from_s393 == to_s393) && tokens_s393 <= balances_YearnFinanceBitToken[this][from_s393]) && tokens_s393 <= allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG]) && tokens_s393 >= 0) && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][to_s393] >= 0) && balances_YearnFinanceBitToken[this][to_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][from_s393] >= 0) && balances_YearnFinanceBitToken[this][from_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] >= 0) && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_YearnFinanceBitToken0 := true;
[L3]                 call_transferFrom_YearnFinanceBitToken0 := false;
[L3]                 revert := revert_hold;
[L707]               havoc __exception;
[L708]               revert := false;
[L709]   COND FALSE  !(__exception)
[L730]   CALL        call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L1638]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1639]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][from_s393], tokens_s393);
[L1349]  COND FALSE  !(!(b_s112 <= a_s112))
[L1353]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1639]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][from_s393], tokens_s393);
[L1640]  COND FALSE  !(revert)
[L1646]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][from_s393];
[L1647]              balances_YearnFinanceBitToken[this][from_s393] := __var_4;
[L1648]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][from_s393];
[L1649]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1650]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG], tokens_s393);
[L1349]  COND FALSE  !(!(b_s112 <= a_s112))
[L1353]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1650]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG], tokens_s393);
[L1651]  COND FALSE  !(revert)
[L1657]              sum_allowed1[from_s393] := sum_allowed1[from_s393] - allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG];
[L1658]              allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] := __var_5;
[L1659]              sum_allowed1[from_s393] := sum_allowed1[from_s393] + allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG];
[L1660]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1661]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][to_s393], tokens_s393);
[L1331]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1332]  COND FALSE  !(!(c_s90 >= a_s90))
[L1661]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][to_s393], tokens_s393);
[L1662]  COND FALSE  !(revert)
[L1668]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][to_s393];
[L1669]              balances_YearnFinanceBitToken[this][to_s393] := __var_6;
[L1670]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][to_s393];
[L1671]              assert { :EventEmitted "Transfer_YearnFinanceBitToken" } true;
[L1672]              success_s393 := true;
[L730]   RET         call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L731]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((success_s393 == true && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] == old(allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG]) - tokens_s393) && _totalSupply_YearnFinanceBitToken[this] == old(_totalSupply_YearnFinanceBitToken[this])) && balances_YearnFinanceBitToken[this] == old(balances_YearnFinanceBitToken[this])) && allowed_YearnFinanceBitToken[this][p1][p2] == old(allowed_YearnFinanceBitToken[this][p1][p2])) && name_YearnFinanceBitToken[this] == old(name_YearnFinanceBitToken[this])) && symbol_YearnFinanceBitToken[this] == old(symbol_YearnFinanceBitToken[this])) && decimals_YearnFinanceBitToken[this] == old(decimals_YearnFinanceBitToken[this]));
[L3]                 revert := revert_hold;
[L2788]  RET         call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L2864]  RET         call CorralChoice_YearnFinanceBitToken(this);

[2020-11-25 09:29:31,442 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:29:31,442 INFO  L82        PathProgramCache]: Analyzing trace with hash -745888690, now seen corresponding path program 1 times
[2020-11-25 09:29:31,443 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:29:31,510 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:29:32,444 WARN  L188               SmtUtils]: Spent 107.00 ms on a formula simplification. DAG size of input: 93 DAG size of output: 69
[2020-11-25 09:29:33,274 INFO  L134       CoverageAnalysis]: Checked inductivity of 4 backedges. 1 proven. 2 refuted. 0 times theorem prover too weak. 1 trivial. 0 not checked.
[2020-11-25 09:29:33,274 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 09:29:33,274 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [31] total 31
[2020-11-25 09:29:33,275 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:29:33,275 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 32 interpolants.
[2020-11-25 09:29:33,275 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=73, Invalid=919, Unknown=0, NotChecked=0, Total=992
[2020-11-25 09:29:33,275 INFO  L87              Difference]: Start difference. First operand 1796 states and 1929 transitions. cyclomatic complexity: 135 Second operand 32 states.
[2020-11-25 09:29:36,231 WARN  L188               SmtUtils]: Spent 208.00 ms on a formula simplification. DAG size of input: 117 DAG size of output: 78
[2020-11-25 09:29:41,325 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:29:41,325 INFO  L93              Difference]: Finished difference Result 1881 states and 2042 transitions.
[2020-11-25 09:29:41,326 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 36 states. 
[2020-11-25 09:29:41,327 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1881 states and 2042 transitions.
[2020-11-25 09:29:41,343 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 09:29:41,352 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1881 states to 1881 states and 2042 transitions.
[2020-11-25 09:29:41,352 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 650
[2020-11-25 09:29:41,353 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 650
[2020-11-25 09:29:41,353 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1881 states and 2042 transitions.
[2020-11-25 09:29:41,355 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:29:41,355 INFO  L728         BuchiCegarLoop]: Abstraction has 1881 states and 2042 transitions.
[2020-11-25 09:29:41,357 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1881 states and 2042 transitions.
[2020-11-25 09:29:41,375 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1881 to 1850.
[2020-11-25 09:29:41,375 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1850 states.
[2020-11-25 09:29:41,378 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1850 states to 1850 states and 1993 transitions.
[2020-11-25 09:29:41,378 INFO  L751         BuchiCegarLoop]: Abstraction has 1850 states and 1993 transitions.
[2020-11-25 09:29:41,378 INFO  L631         BuchiCegarLoop]: Abstraction has 1850 states and 1993 transitions.
[2020-11-25 09:29:41,378 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 09:29:41,378 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1850 states and 1993 transitions.
[2020-11-25 09:29:41,382 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 09:29:41,383 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:29:41,383 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:29:41,385 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:29:41,385 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_YearnFinanceBitToken0 := false;
[L3]                 call_transferFrom_YearnFinanceBitToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L2854]              assume null == 0;
[L2855]  CALL        call this := FreshRefGenerator__success();
[L1250]              havoc newRef;
[L1251]              assume Alloc[newRef] == false;
[L1252]              Alloc[newRef] := true;
[L1253]              assume newRef != null;
[L2855]  RET         call this := FreshRefGenerator__success();
[L2856]              assume now >= 0;
[L2857]              assume DType[this] == YearnFinanceBitToken;
[L2858]              assume msgvalue_MSG == 0;
[L2859]              gas := gas - 53000;
[L2860]  CALL        call YearnFinanceBitToken_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG);
[L399]               havoc __exception;
[L400]               revert := false;
[L401]   COND FALSE  !(__exception)
[L422]   CALL        call YearnFinanceBitToken_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1457]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1282]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1267]              assume msgsender_MSG != null;
[L1268]              Balance[this] := 0;
[L1282]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1283]  COND FALSE  !(revert)
[L1457]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1458]  COND FALSE  !(revert)
[L1461]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1314]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1299]              assume msgsender_MSG != null;
[L1300]              Balance[this] := 0;
[L1314]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1315]  COND FALSE  !(revert)
[L1461]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1462]  COND FALSE  !(revert)
[L1465]  CALL        call YearnFinanceBitToken_YearnFinanceBitToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1418]              assume msgsender_MSG != null;
[L1419]              Balance[this] := 0;
[L1420]              name_YearnFinanceBitToken[this] := 627147201;
[L1421]              symbol_YearnFinanceBitToken[this] := 627147201;
[L1422]              decimals_YearnFinanceBitToken[this] := 0;
[L1423]              _totalSupply_YearnFinanceBitToken[this] := 0;
[L1424]              balances_YearnFinanceBitToken[this] := zeroRefintArr();
[L1425]              sum_balances0[this] := 0;
[L1426]              allowed_YearnFinanceBitToken[this] := zeroRefRefintArr();
[L1427]              sum_allowed1[this] := 0;
[L1429]              name_YearnFinanceBitToken[this] := 1658284292;
[L1430]              symbol_YearnFinanceBitToken[this] := -1175268548;
[L1431]              decimals_YearnFinanceBitToken[this] := 18;
[L1432]              _totalSupply_YearnFinanceBitToken[this] := 7000000000000000000000;
[L1433]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1434]              balances_YearnFinanceBitToken[this][msgsender_MSG] := _totalSupply_YearnFinanceBitToken[this];
[L1435]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1436]              assert { :EventEmitted "Transfer_YearnFinanceBitToken" } true;
[L1465]  RET         call YearnFinanceBitToken_YearnFinanceBitToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1466]  COND FALSE  !(revert)
[L422]   RET         call YearnFinanceBitToken_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG);
[L423]               assume !revert && gas >= 0;
[L2860]  RET         call YearnFinanceBitToken_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG);
[L2861]              assume !revert && gas >= 0;
[L2864]  CALL        call CorralChoice_YearnFinanceBitToken(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != YearnFinanceBitToken;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND FALSE  !(choice == 11)
[L2776]  COND FALSE  !(choice == 10)
[L2783]  COND TRUE   choice == 9
[L2784]              gas := gas - 21000;
[L2785]  COND TRUE   gas >= 0
[L2786]              assume tokens_s393 >= 0 && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2787]              assume msgvalue_MSG == 0;
[L2788]  CALL        call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s393 || p2 != msgsender_MSG) && from_s393 == to_s393) && tokens_s393 <= balances_YearnFinanceBitToken[this][from_s393]) && tokens_s393 <= allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG]) && tokens_s393 >= 0) && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][to_s393] >= 0) && balances_YearnFinanceBitToken[this][to_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][from_s393] >= 0) && balances_YearnFinanceBitToken[this][from_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] >= 0) && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_YearnFinanceBitToken0 := true;
[L3]                 call_transferFrom_YearnFinanceBitToken0 := false;
[L3]                 revert := revert_hold;
[L707]               havoc __exception;
[L708]               revert := false;
[L709]   COND TRUE   __exception
[L710]               __tmp__Balance := Balance;
[L711]               __tmp__DType := DType;
[L712]               __tmp__Alloc := Alloc;
[L713]               __tmp__balance_ADDR := balance_ADDR;
[L714]               __tmp__M_Ref_int := M_Ref_int;
[L715]               __tmp__sum_balances0 := sum_balances0;
[L716]               __tmp__alloc_allowed_YearnFinanceBitToken_lvl0 := alloc_allowed_YearnFinanceBitToken_lvl0;
[L717]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L718]               __tmp__sum_allowed1 := sum_allowed1;
[L719]               __tmp__Length := Length;
[L720]               __tmp__now := now;
[L721]               __tmp__name_YearnFinanceBitToken := name_YearnFinanceBitToken;
[L722]               __tmp__symbol_YearnFinanceBitToken := symbol_YearnFinanceBitToken;
[L723]               __tmp__decimals_YearnFinanceBitToken := decimals_YearnFinanceBitToken;
[L724]               __tmp___totalSupply_YearnFinanceBitToken := _totalSupply_YearnFinanceBitToken;
[L725]               __tmp__balances_YearnFinanceBitToken := balances_YearnFinanceBitToken;
[L726]               __tmp__allowed_YearnFinanceBitToken := allowed_YearnFinanceBitToken;
[L727]   CALL        call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L1596]  COND TRUE   __tmp__DType[this] == YearnFinanceBitToken
[L1597]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_YearnFinanceBitToken[this][from_s393], tokens_s393);
[L1340]  COND FALSE  !(!(b_s112 <= a_s112))
[L1344]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1597]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_YearnFinanceBitToken[this][from_s393], tokens_s393);
[L1598]  COND FALSE  !(revert)
[L1604]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_YearnFinanceBitToken[this][from_s393];
[L1605]              __tmp__balances_YearnFinanceBitToken[this][from_s393] := __var_4;
[L1606]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_YearnFinanceBitToken[this][from_s393];
[L1607]  COND TRUE   __tmp__DType[this] == YearnFinanceBitToken
[L1608]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG], tokens_s393);
[L1340]  COND TRUE   !(b_s112 <= a_s112)
[L1341]              revert := true;
[L1608]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG], tokens_s393);
[L1609]  COND TRUE   revert
[L727]   RET         call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L728]               assume revert || gas < 0;
[L2788]  RET         call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L2864]  RET         call CorralChoice_YearnFinanceBitToken(this);

Loop:
[L2864]  CALL        call CorralChoice_YearnFinanceBitToken(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != YearnFinanceBitToken;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND FALSE  !(choice == 11)
[L2776]  COND FALSE  !(choice == 10)
[L2783]  COND TRUE   choice == 9
[L2784]              gas := gas - 21000;
[L2785]  COND TRUE   gas >= 0
[L2786]              assume tokens_s393 >= 0 && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2787]              assume msgvalue_MSG == 0;
[L2788]  CALL        call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s393 || p2 != msgsender_MSG) && from_s393 == to_s393) && tokens_s393 <= balances_YearnFinanceBitToken[this][from_s393]) && tokens_s393 <= allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG]) && tokens_s393 >= 0) && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][to_s393] >= 0) && balances_YearnFinanceBitToken[this][to_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][from_s393] >= 0) && balances_YearnFinanceBitToken[this][from_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] >= 0) && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_YearnFinanceBitToken0 := true;
[L3]                 call_transferFrom_YearnFinanceBitToken0 := false;
[L3]                 revert := revert_hold;
[L707]               havoc __exception;
[L708]               revert := false;
[L709]   COND TRUE   __exception
[L710]               __tmp__Balance := Balance;
[L711]               __tmp__DType := DType;
[L712]               __tmp__Alloc := Alloc;
[L713]               __tmp__balance_ADDR := balance_ADDR;
[L714]               __tmp__M_Ref_int := M_Ref_int;
[L715]               __tmp__sum_balances0 := sum_balances0;
[L716]               __tmp__alloc_allowed_YearnFinanceBitToken_lvl0 := alloc_allowed_YearnFinanceBitToken_lvl0;
[L717]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L718]               __tmp__sum_allowed1 := sum_allowed1;
[L719]               __tmp__Length := Length;
[L720]               __tmp__now := now;
[L721]               __tmp__name_YearnFinanceBitToken := name_YearnFinanceBitToken;
[L722]               __tmp__symbol_YearnFinanceBitToken := symbol_YearnFinanceBitToken;
[L723]               __tmp__decimals_YearnFinanceBitToken := decimals_YearnFinanceBitToken;
[L724]               __tmp___totalSupply_YearnFinanceBitToken := _totalSupply_YearnFinanceBitToken;
[L725]               __tmp__balances_YearnFinanceBitToken := balances_YearnFinanceBitToken;
[L726]               __tmp__allowed_YearnFinanceBitToken := allowed_YearnFinanceBitToken;
[L727]   CALL        call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L1596]  COND TRUE   __tmp__DType[this] == YearnFinanceBitToken
[L1597]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_YearnFinanceBitToken[this][from_s393], tokens_s393);
[L1340]  COND FALSE  !(!(b_s112 <= a_s112))
[L1344]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1597]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_YearnFinanceBitToken[this][from_s393], tokens_s393);
[L1598]  COND FALSE  !(revert)
[L1604]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_YearnFinanceBitToken[this][from_s393];
[L1605]              __tmp__balances_YearnFinanceBitToken[this][from_s393] := __var_4;
[L1606]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_YearnFinanceBitToken[this][from_s393];
[L1607]  COND TRUE   __tmp__DType[this] == YearnFinanceBitToken
[L1608]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG], tokens_s393);
[L1340]  COND TRUE   !(b_s112 <= a_s112)
[L1341]              revert := true;
[L1608]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG], tokens_s393);
[L1609]  COND TRUE   revert
[L727]   RET         call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L728]               assume revert || gas < 0;
[L2788]  RET         call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L2864]  RET         call CorralChoice_YearnFinanceBitToken(this);

[2020-11-25 09:29:41,390 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:29:41,390 INFO  L82        PathProgramCache]: Analyzing trace with hash 742641418, now seen corresponding path program 1 times
[2020-11-25 09:29:41,390 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:29:41,400 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:29:41,443 INFO  L134       CoverageAnalysis]: Checked inductivity of 3 backedges. 2 proven. 0 refuted. 0 times theorem prover too weak. 1 trivial. 0 not checked.
[2020-11-25 09:29:41,444 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:29:41,444 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 09:29:41,444 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:29:41,444 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 09:29:41,444 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 09:29:41,445 INFO  L87              Difference]: Start difference. First operand 1850 states and 1993 transitions. cyclomatic complexity: 147 Second operand 7 states.
[2020-11-25 09:29:41,717 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:29:41,717 INFO  L93              Difference]: Finished difference Result 1934 states and 2093 transitions.
[2020-11-25 09:29:41,717 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 09:29:41,717 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1934 states and 2093 transitions.
[2020-11-25 09:29:41,722 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 09:29:41,727 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1934 states to 1934 states and 2093 transitions.
[2020-11-25 09:29:41,727 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 685
[2020-11-25 09:29:41,727 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 685
[2020-11-25 09:29:41,727 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1934 states and 2093 transitions.
[2020-11-25 09:29:41,729 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:29:41,729 INFO  L728         BuchiCegarLoop]: Abstraction has 1934 states and 2093 transitions.
[2020-11-25 09:29:41,730 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1934 states and 2093 transitions.
[2020-11-25 09:29:41,742 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1934 to 1885.
[2020-11-25 09:29:41,742 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1885 states.
[2020-11-25 09:29:41,744 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1885 states to 1885 states and 2029 transitions.
[2020-11-25 09:29:41,744 INFO  L751         BuchiCegarLoop]: Abstraction has 1885 states and 2029 transitions.
[2020-11-25 09:29:41,744 INFO  L631         BuchiCegarLoop]: Abstraction has 1885 states and 2029 transitions.
[2020-11-25 09:29:41,744 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 09:29:41,744 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1885 states and 2029 transitions.
[2020-11-25 09:29:41,747 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 09:29:41,747 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:29:41,747 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:29:41,748 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:29:41,748 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_YearnFinanceBitToken0 := false;
[L3]                 call_transferFrom_YearnFinanceBitToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L2854]              assume null == 0;
[L2855]  CALL        call this := FreshRefGenerator__success();
[L1250]              havoc newRef;
[L1251]              assume Alloc[newRef] == false;
[L1252]              Alloc[newRef] := true;
[L1253]              assume newRef != null;
[L2855]  RET         call this := FreshRefGenerator__success();
[L2856]              assume now >= 0;
[L2857]              assume DType[this] == YearnFinanceBitToken;
[L2858]              assume msgvalue_MSG == 0;
[L2859]              gas := gas - 53000;
[L2860]  CALL        call YearnFinanceBitToken_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG);
[L399]               havoc __exception;
[L400]               revert := false;
[L401]   COND FALSE  !(__exception)
[L422]   CALL        call YearnFinanceBitToken_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1457]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1282]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1267]              assume msgsender_MSG != null;
[L1268]              Balance[this] := 0;
[L1282]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1283]  COND FALSE  !(revert)
[L1457]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1458]  COND FALSE  !(revert)
[L1461]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1314]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1299]              assume msgsender_MSG != null;
[L1300]              Balance[this] := 0;
[L1314]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1315]  COND FALSE  !(revert)
[L1461]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1462]  COND FALSE  !(revert)
[L1465]  CALL        call YearnFinanceBitToken_YearnFinanceBitToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1418]              assume msgsender_MSG != null;
[L1419]              Balance[this] := 0;
[L1420]              name_YearnFinanceBitToken[this] := 627147201;
[L1421]              symbol_YearnFinanceBitToken[this] := 627147201;
[L1422]              decimals_YearnFinanceBitToken[this] := 0;
[L1423]              _totalSupply_YearnFinanceBitToken[this] := 0;
[L1424]              balances_YearnFinanceBitToken[this] := zeroRefintArr();
[L1425]              sum_balances0[this] := 0;
[L1426]              allowed_YearnFinanceBitToken[this] := zeroRefRefintArr();
[L1427]              sum_allowed1[this] := 0;
[L1429]              name_YearnFinanceBitToken[this] := 1658284292;
[L1430]              symbol_YearnFinanceBitToken[this] := -1175268548;
[L1431]              decimals_YearnFinanceBitToken[this] := 18;
[L1432]              _totalSupply_YearnFinanceBitToken[this] := 7000000000000000000000;
[L1433]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1434]              balances_YearnFinanceBitToken[this][msgsender_MSG] := _totalSupply_YearnFinanceBitToken[this];
[L1435]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1436]              assert { :EventEmitted "Transfer_YearnFinanceBitToken" } true;
[L1465]  RET         call YearnFinanceBitToken_YearnFinanceBitToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1466]  COND FALSE  !(revert)
[L422]   RET         call YearnFinanceBitToken_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG);
[L423]               assume !revert && gas >= 0;
[L2860]  RET         call YearnFinanceBitToken_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG);
[L2861]              assume !revert && gas >= 0;
[L2864]  CALL        call CorralChoice_YearnFinanceBitToken(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != YearnFinanceBitToken;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND FALSE  !(choice == 11)
[L2776]  COND FALSE  !(choice == 10)
[L2783]  COND TRUE   choice == 9
[L2784]              gas := gas - 21000;
[L2785]  COND TRUE   gas >= 0
[L2786]              assume tokens_s393 >= 0 && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2787]              assume msgvalue_MSG == 0;
[L2788]  CALL        call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s393 || p2 != msgsender_MSG) && from_s393 == to_s393) && tokens_s393 <= balances_YearnFinanceBitToken[this][from_s393]) && tokens_s393 <= allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG]) && tokens_s393 >= 0) && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][to_s393] >= 0) && balances_YearnFinanceBitToken[this][to_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][from_s393] >= 0) && balances_YearnFinanceBitToken[this][from_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] >= 0) && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_YearnFinanceBitToken0 := true;
[L3]                 call_transferFrom_YearnFinanceBitToken0 := false;
[L3]                 revert := revert_hold;
[L707]               havoc __exception;
[L708]               revert := false;
[L709]   COND TRUE   __exception
[L710]               __tmp__Balance := Balance;
[L711]               __tmp__DType := DType;
[L712]               __tmp__Alloc := Alloc;
[L713]               __tmp__balance_ADDR := balance_ADDR;
[L714]               __tmp__M_Ref_int := M_Ref_int;
[L715]               __tmp__sum_balances0 := sum_balances0;
[L716]               __tmp__alloc_allowed_YearnFinanceBitToken_lvl0 := alloc_allowed_YearnFinanceBitToken_lvl0;
[L717]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L718]               __tmp__sum_allowed1 := sum_allowed1;
[L719]               __tmp__Length := Length;
[L720]               __tmp__now := now;
[L721]               __tmp__name_YearnFinanceBitToken := name_YearnFinanceBitToken;
[L722]               __tmp__symbol_YearnFinanceBitToken := symbol_YearnFinanceBitToken;
[L723]               __tmp__decimals_YearnFinanceBitToken := decimals_YearnFinanceBitToken;
[L724]               __tmp___totalSupply_YearnFinanceBitToken := _totalSupply_YearnFinanceBitToken;
[L725]               __tmp__balances_YearnFinanceBitToken := balances_YearnFinanceBitToken;
[L726]               __tmp__allowed_YearnFinanceBitToken := allowed_YearnFinanceBitToken;
[L727]   CALL        call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L1596]  COND TRUE   __tmp__DType[this] == YearnFinanceBitToken
[L1597]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_YearnFinanceBitToken[this][from_s393], tokens_s393);
[L1340]  COND FALSE  !(!(b_s112 <= a_s112))
[L1344]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1597]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_YearnFinanceBitToken[this][from_s393], tokens_s393);
[L1598]  COND FALSE  !(revert)
[L1604]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_YearnFinanceBitToken[this][from_s393];
[L1605]              __tmp__balances_YearnFinanceBitToken[this][from_s393] := __var_4;
[L1606]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_YearnFinanceBitToken[this][from_s393];
[L1607]  COND TRUE   __tmp__DType[this] == YearnFinanceBitToken
[L1608]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG], tokens_s393);
[L1340]  COND FALSE  !(!(b_s112 <= a_s112))
[L1344]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1608]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG], tokens_s393);
[L1609]  COND FALSE  !(revert)
[L1615]              __tmp__sum_allowed1[from_s393] := __tmp__sum_allowed1[from_s393] - __tmp__allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG];
[L1616]              __tmp__allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] := __var_5;
[L1617]              __tmp__sum_allowed1[from_s393] := __tmp__sum_allowed1[from_s393] + __tmp__allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG];
[L1618]  COND TRUE   __tmp__DType[this] == YearnFinanceBitToken
[L1619]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_YearnFinanceBitToken[this][to_s393], tokens_s393);
[L1322]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1323]  COND TRUE   !(c_s90 >= a_s90)
[L1324]              revert := true;
[L1619]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_YearnFinanceBitToken[this][to_s393], tokens_s393);
[L1620]  COND TRUE   revert
[L727]   RET         call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L728]               assume revert || gas < 0;
[L2788]  RET         call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L2864]  RET         call CorralChoice_YearnFinanceBitToken(this);

Loop:
[L2864]  CALL        call CorralChoice_YearnFinanceBitToken(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != YearnFinanceBitToken;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND FALSE  !(choice == 11)
[L2776]  COND FALSE  !(choice == 10)
[L2783]  COND TRUE   choice == 9
[L2784]              gas := gas - 21000;
[L2785]  COND TRUE   gas >= 0
[L2786]              assume tokens_s393 >= 0 && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2787]              assume msgvalue_MSG == 0;
[L2788]  CALL        call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s393 || p2 != msgsender_MSG) && from_s393 == to_s393) && tokens_s393 <= balances_YearnFinanceBitToken[this][from_s393]) && tokens_s393 <= allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG]) && tokens_s393 >= 0) && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][to_s393] >= 0) && balances_YearnFinanceBitToken[this][to_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][from_s393] >= 0) && balances_YearnFinanceBitToken[this][from_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] >= 0) && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_YearnFinanceBitToken0 := true;
[L3]                 call_transferFrom_YearnFinanceBitToken0 := false;
[L3]                 revert := revert_hold;
[L707]               havoc __exception;
[L708]               revert := false;
[L709]   COND TRUE   __exception
[L710]               __tmp__Balance := Balance;
[L711]               __tmp__DType := DType;
[L712]               __tmp__Alloc := Alloc;
[L713]               __tmp__balance_ADDR := balance_ADDR;
[L714]               __tmp__M_Ref_int := M_Ref_int;
[L715]               __tmp__sum_balances0 := sum_balances0;
[L716]               __tmp__alloc_allowed_YearnFinanceBitToken_lvl0 := alloc_allowed_YearnFinanceBitToken_lvl0;
[L717]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L718]               __tmp__sum_allowed1 := sum_allowed1;
[L719]               __tmp__Length := Length;
[L720]               __tmp__now := now;
[L721]               __tmp__name_YearnFinanceBitToken := name_YearnFinanceBitToken;
[L722]               __tmp__symbol_YearnFinanceBitToken := symbol_YearnFinanceBitToken;
[L723]               __tmp__decimals_YearnFinanceBitToken := decimals_YearnFinanceBitToken;
[L724]               __tmp___totalSupply_YearnFinanceBitToken := _totalSupply_YearnFinanceBitToken;
[L725]               __tmp__balances_YearnFinanceBitToken := balances_YearnFinanceBitToken;
[L726]               __tmp__allowed_YearnFinanceBitToken := allowed_YearnFinanceBitToken;
[L727]   CALL        call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L1596]  COND TRUE   __tmp__DType[this] == YearnFinanceBitToken
[L1597]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_YearnFinanceBitToken[this][from_s393], tokens_s393);
[L1340]  COND FALSE  !(!(b_s112 <= a_s112))
[L1344]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1597]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_YearnFinanceBitToken[this][from_s393], tokens_s393);
[L1598]  COND FALSE  !(revert)
[L1604]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_YearnFinanceBitToken[this][from_s393];
[L1605]              __tmp__balances_YearnFinanceBitToken[this][from_s393] := __var_4;
[L1606]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_YearnFinanceBitToken[this][from_s393];
[L1607]  COND TRUE   __tmp__DType[this] == YearnFinanceBitToken
[L1608]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG], tokens_s393);
[L1340]  COND FALSE  !(!(b_s112 <= a_s112))
[L1344]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1608]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG], tokens_s393);
[L1609]  COND FALSE  !(revert)
[L1615]              __tmp__sum_allowed1[from_s393] := __tmp__sum_allowed1[from_s393] - __tmp__allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG];
[L1616]              __tmp__allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] := __var_5;
[L1617]              __tmp__sum_allowed1[from_s393] := __tmp__sum_allowed1[from_s393] + __tmp__allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG];
[L1618]  COND TRUE   __tmp__DType[this] == YearnFinanceBitToken
[L1619]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_YearnFinanceBitToken[this][to_s393], tokens_s393);
[L1322]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1323]  COND TRUE   !(c_s90 >= a_s90)
[L1324]              revert := true;
[L1619]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_YearnFinanceBitToken[this][to_s393], tokens_s393);
[L1620]  COND TRUE   revert
[L727]   RET         call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L728]               assume revert || gas < 0;
[L2788]  RET         call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L2864]  RET         call CorralChoice_YearnFinanceBitToken(this);

[2020-11-25 09:29:41,751 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:29:41,751 INFO  L82        PathProgramCache]: Analyzing trace with hash 2126632170, now seen corresponding path program 1 times
[2020-11-25 09:29:41,752 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:29:41,759 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:29:41,827 INFO  L134       CoverageAnalysis]: Checked inductivity of 4 backedges. 0 proven. 2 refuted. 0 times theorem prover too weak. 2 trivial. 0 not checked.
[2020-11-25 09:29:41,827 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 09:29:41,828 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [16] total 16
[2020-11-25 09:29:41,828 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:29:41,828 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 17 interpolants.
[2020-11-25 09:29:41,828 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=32, Invalid=240, Unknown=0, NotChecked=0, Total=272
[2020-11-25 09:29:41,828 INFO  L87              Difference]: Start difference. First operand 1885 states and 2029 transitions. cyclomatic complexity: 148 Second operand 17 states.
[2020-11-25 09:29:42,988 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:29:42,989 INFO  L93              Difference]: Finished difference Result 1928 states and 2103 transitions.
[2020-11-25 09:29:42,989 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 17 states. 
[2020-11-25 09:29:42,989 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1928 states and 2103 transitions.
[2020-11-25 09:29:42,992 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 09:29:42,997 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1928 states to 1928 states and 2103 transitions.
[2020-11-25 09:29:42,997 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 698
[2020-11-25 09:29:42,997 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 698
[2020-11-25 09:29:42,997 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1928 states and 2103 transitions.
[2020-11-25 09:29:42,999 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:29:42,999 INFO  L728         BuchiCegarLoop]: Abstraction has 1928 states and 2103 transitions.
[2020-11-25 09:29:43,000 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1928 states and 2103 transitions.
[2020-11-25 09:29:43,011 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1928 to 1911.
[2020-11-25 09:29:43,011 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1911 states.
[2020-11-25 09:29:43,013 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1911 states to 1911 states and 2072 transitions.
[2020-11-25 09:29:43,013 INFO  L751         BuchiCegarLoop]: Abstraction has 1911 states and 2072 transitions.
[2020-11-25 09:29:43,013 INFO  L631         BuchiCegarLoop]: Abstraction has 1911 states and 2072 transitions.
[2020-11-25 09:29:43,013 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 09:29:43,013 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1911 states and 2072 transitions.
[2020-11-25 09:29:43,015 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 09:29:43,016 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:29:43,016 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:29:43,017 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:29:43,017 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_YearnFinanceBitToken0 := false;
[L3]                 call_transferFrom_YearnFinanceBitToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L2854]              assume null == 0;
[L2855]  CALL        call this := FreshRefGenerator__success();
[L1250]              havoc newRef;
[L1251]              assume Alloc[newRef] == false;
[L1252]              Alloc[newRef] := true;
[L1253]              assume newRef != null;
[L2855]  RET         call this := FreshRefGenerator__success();
[L2856]              assume now >= 0;
[L2857]              assume DType[this] == YearnFinanceBitToken;
[L2858]              assume msgvalue_MSG == 0;
[L2859]              gas := gas - 53000;
[L2860]  CALL        call YearnFinanceBitToken_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG);
[L399]               havoc __exception;
[L400]               revert := false;
[L401]   COND FALSE  !(__exception)
[L422]   CALL        call YearnFinanceBitToken_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1457]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1282]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1267]              assume msgsender_MSG != null;
[L1268]              Balance[this] := 0;
[L1282]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1283]  COND FALSE  !(revert)
[L1457]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1458]  COND FALSE  !(revert)
[L1461]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1314]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1299]              assume msgsender_MSG != null;
[L1300]              Balance[this] := 0;
[L1314]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1315]  COND FALSE  !(revert)
[L1461]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1462]  COND FALSE  !(revert)
[L1465]  CALL        call YearnFinanceBitToken_YearnFinanceBitToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1418]              assume msgsender_MSG != null;
[L1419]              Balance[this] := 0;
[L1420]              name_YearnFinanceBitToken[this] := 627147201;
[L1421]              symbol_YearnFinanceBitToken[this] := 627147201;
[L1422]              decimals_YearnFinanceBitToken[this] := 0;
[L1423]              _totalSupply_YearnFinanceBitToken[this] := 0;
[L1424]              balances_YearnFinanceBitToken[this] := zeroRefintArr();
[L1425]              sum_balances0[this] := 0;
[L1426]              allowed_YearnFinanceBitToken[this] := zeroRefRefintArr();
[L1427]              sum_allowed1[this] := 0;
[L1429]              name_YearnFinanceBitToken[this] := 1658284292;
[L1430]              symbol_YearnFinanceBitToken[this] := -1175268548;
[L1431]              decimals_YearnFinanceBitToken[this] := 18;
[L1432]              _totalSupply_YearnFinanceBitToken[this] := 7000000000000000000000;
[L1433]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1434]              balances_YearnFinanceBitToken[this][msgsender_MSG] := _totalSupply_YearnFinanceBitToken[this];
[L1435]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1436]              assert { :EventEmitted "Transfer_YearnFinanceBitToken" } true;
[L1465]  RET         call YearnFinanceBitToken_YearnFinanceBitToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1466]  COND FALSE  !(revert)
[L422]   RET         call YearnFinanceBitToken_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG);
[L423]               assume !revert && gas >= 0;
[L2860]  RET         call YearnFinanceBitToken_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG);
[L2861]              assume !revert && gas >= 0;
[L2864]  CALL        call CorralChoice_YearnFinanceBitToken(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != YearnFinanceBitToken;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND FALSE  !(choice == 11)
[L2776]  COND FALSE  !(choice == 10)
[L2783]  COND TRUE   choice == 9
[L2784]              gas := gas - 21000;
[L2785]  COND TRUE   gas >= 0
[L2786]              assume tokens_s393 >= 0 && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2787]              assume msgvalue_MSG == 0;
[L2788]  CALL        call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s393 || p2 != msgsender_MSG) && from_s393 == to_s393) && tokens_s393 <= balances_YearnFinanceBitToken[this][from_s393]) && tokens_s393 <= allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG]) && tokens_s393 >= 0) && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][to_s393] >= 0) && balances_YearnFinanceBitToken[this][to_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][from_s393] >= 0) && balances_YearnFinanceBitToken[this][from_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] >= 0) && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_YearnFinanceBitToken0 := true;
[L3]                 call_transferFrom_YearnFinanceBitToken0 := false;
[L3]                 revert := revert_hold;
[L707]               havoc __exception;
[L708]               revert := false;
[L709]   COND TRUE   __exception
[L710]               __tmp__Balance := Balance;
[L711]               __tmp__DType := DType;
[L712]               __tmp__Alloc := Alloc;
[L713]               __tmp__balance_ADDR := balance_ADDR;
[L714]               __tmp__M_Ref_int := M_Ref_int;
[L715]               __tmp__sum_balances0 := sum_balances0;
[L716]               __tmp__alloc_allowed_YearnFinanceBitToken_lvl0 := alloc_allowed_YearnFinanceBitToken_lvl0;
[L717]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L718]               __tmp__sum_allowed1 := sum_allowed1;
[L719]               __tmp__Length := Length;
[L720]               __tmp__now := now;
[L721]               __tmp__name_YearnFinanceBitToken := name_YearnFinanceBitToken;
[L722]               __tmp__symbol_YearnFinanceBitToken := symbol_YearnFinanceBitToken;
[L723]               __tmp__decimals_YearnFinanceBitToken := decimals_YearnFinanceBitToken;
[L724]               __tmp___totalSupply_YearnFinanceBitToken := _totalSupply_YearnFinanceBitToken;
[L725]               __tmp__balances_YearnFinanceBitToken := balances_YearnFinanceBitToken;
[L726]               __tmp__allowed_YearnFinanceBitToken := allowed_YearnFinanceBitToken;
[L727]   CALL        call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L1596]  COND TRUE   __tmp__DType[this] == YearnFinanceBitToken
[L1597]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_YearnFinanceBitToken[this][from_s393], tokens_s393);
[L1340]  COND FALSE  !(!(b_s112 <= a_s112))
[L1344]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1597]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_YearnFinanceBitToken[this][from_s393], tokens_s393);
[L1598]  COND FALSE  !(revert)
[L1604]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_YearnFinanceBitToken[this][from_s393];
[L1605]              __tmp__balances_YearnFinanceBitToken[this][from_s393] := __var_4;
[L1606]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_YearnFinanceBitToken[this][from_s393];
[L1607]  COND TRUE   __tmp__DType[this] == YearnFinanceBitToken
[L1608]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG], tokens_s393);
[L1340]  COND FALSE  !(!(b_s112 <= a_s112))
[L1344]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1608]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG], tokens_s393);
[L1609]  COND FALSE  !(revert)
[L1615]              __tmp__sum_allowed1[from_s393] := __tmp__sum_allowed1[from_s393] - __tmp__allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG];
[L1616]              __tmp__allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] := __var_5;
[L1617]              __tmp__sum_allowed1[from_s393] := __tmp__sum_allowed1[from_s393] + __tmp__allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG];
[L1618]  COND TRUE   __tmp__DType[this] == YearnFinanceBitToken
[L1619]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_YearnFinanceBitToken[this][to_s393], tokens_s393);
[L1322]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1323]  COND FALSE  !(!(c_s90 >= a_s90))
[L1619]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_YearnFinanceBitToken[this][to_s393], tokens_s393);
[L1620]  COND FALSE  !(revert)
[L1626]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_YearnFinanceBitToken[this][to_s393];
[L1627]              __tmp__balances_YearnFinanceBitToken[this][to_s393] := __var_6;
[L1628]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_YearnFinanceBitToken[this][to_s393];
[L1629]              success_s393 := true;
[L727]   RET         call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L728]               assume revert || gas < 0;
[L2788]  RET         call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L2864]  RET         call CorralChoice_YearnFinanceBitToken(this);

Loop:
[L2864]  CALL        call CorralChoice_YearnFinanceBitToken(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != YearnFinanceBitToken;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND TRUE   choice == 14
[L2752]              gas := gas - 21000;
[L2753]  COND FALSE  !(gas >= 0)
[L2864]  RET         call CorralChoice_YearnFinanceBitToken(this);

[2020-11-25 09:29:43,020 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:29:43,020 INFO  L82        PathProgramCache]: Analyzing trace with hash -307568974, now seen corresponding path program 1 times
[2020-11-25 09:29:43,021 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:29:43,030 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:29:43,049 INFO  L134       CoverageAnalysis]: Checked inductivity of 4 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 4 trivial. 0 not checked.
[2020-11-25 09:29:43,049 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:29:43,049 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-25 09:29:43,050 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:29:43,050 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-25 09:29:43,050 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-11-25 09:29:43,050 INFO  L87              Difference]: Start difference. First operand 1911 states and 2072 transitions. cyclomatic complexity: 167 Second operand 5 states.
[2020-11-25 09:29:43,226 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:29:43,226 INFO  L93              Difference]: Finished difference Result 2458 states and 2779 transitions.
[2020-11-25 09:29:43,226 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 09:29:43,226 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2458 states and 2779 transitions.
[2020-11-25 09:29:43,231 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-11-25 09:29:43,237 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2458 states to 1916 states and 2236 transitions.
[2020-11-25 09:29:43,237 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 561
[2020-11-25 09:29:43,237 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 561
[2020-11-25 09:29:43,237 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1916 states and 2236 transitions.
[2020-11-25 09:29:43,239 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:29:43,239 INFO  L728         BuchiCegarLoop]: Abstraction has 1916 states and 2236 transitions.
[2020-11-25 09:29:43,240 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1916 states and 2236 transitions.
[2020-11-25 09:29:43,250 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1916 to 1348.
[2020-11-25 09:29:43,250 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1348 states.
[2020-11-25 09:29:43,251 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1348 states to 1348 states and 1465 transitions.
[2020-11-25 09:29:43,251 INFO  L751         BuchiCegarLoop]: Abstraction has 1348 states and 1465 transitions.
[2020-11-25 09:29:43,251 INFO  L631         BuchiCegarLoop]: Abstraction has 1348 states and 1465 transitions.
[2020-11-25 09:29:43,251 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 09:29:43,251 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1348 states and 1465 transitions.
[2020-11-25 09:29:43,253 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:29:43,253 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:29:43,253 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:29:43,254 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:29:43,254 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_YearnFinanceBitToken0 := false;
[L3]                 call_transferFrom_YearnFinanceBitToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L2854]              assume null == 0;
[L2855]  CALL        call this := FreshRefGenerator__success();
[L1250]              havoc newRef;
[L1251]              assume Alloc[newRef] == false;
[L1252]              Alloc[newRef] := true;
[L1253]              assume newRef != null;
[L2855]  RET         call this := FreshRefGenerator__success();
[L2856]              assume now >= 0;
[L2857]              assume DType[this] == YearnFinanceBitToken;
[L2858]              assume msgvalue_MSG == 0;
[L2859]              gas := gas - 53000;
[L2860]  CALL        call YearnFinanceBitToken_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG);
[L399]               havoc __exception;
[L400]               revert := false;
[L401]   COND FALSE  !(__exception)
[L422]   CALL        call YearnFinanceBitToken_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1457]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1282]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1267]              assume msgsender_MSG != null;
[L1268]              Balance[this] := 0;
[L1282]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1283]  COND FALSE  !(revert)
[L1457]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1458]  COND FALSE  !(revert)
[L1461]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1314]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1299]              assume msgsender_MSG != null;
[L1300]              Balance[this] := 0;
[L1314]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1315]  COND FALSE  !(revert)
[L1461]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1462]  COND FALSE  !(revert)
[L1465]  CALL        call YearnFinanceBitToken_YearnFinanceBitToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1418]              assume msgsender_MSG != null;
[L1419]              Balance[this] := 0;
[L1420]              name_YearnFinanceBitToken[this] := 627147201;
[L1421]              symbol_YearnFinanceBitToken[this] := 627147201;
[L1422]              decimals_YearnFinanceBitToken[this] := 0;
[L1423]              _totalSupply_YearnFinanceBitToken[this] := 0;
[L1424]              balances_YearnFinanceBitToken[this] := zeroRefintArr();
[L1425]              sum_balances0[this] := 0;
[L1426]              allowed_YearnFinanceBitToken[this] := zeroRefRefintArr();
[L1427]              sum_allowed1[this] := 0;
[L1429]              name_YearnFinanceBitToken[this] := 1658284292;
[L1430]              symbol_YearnFinanceBitToken[this] := -1175268548;
[L1431]              decimals_YearnFinanceBitToken[this] := 18;
[L1432]              _totalSupply_YearnFinanceBitToken[this] := 7000000000000000000000;
[L1433]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1434]              balances_YearnFinanceBitToken[this][msgsender_MSG] := _totalSupply_YearnFinanceBitToken[this];
[L1435]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1436]              assert { :EventEmitted "Transfer_YearnFinanceBitToken" } true;
[L1465]  RET         call YearnFinanceBitToken_YearnFinanceBitToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1466]  COND FALSE  !(revert)
[L422]   RET         call YearnFinanceBitToken_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG);
[L423]               assume !revert && gas >= 0;
[L2860]  RET         call YearnFinanceBitToken_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG);
[L2861]              assume !revert && gas >= 0;
[L2864]  CALL        call CorralChoice_YearnFinanceBitToken(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != YearnFinanceBitToken;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND FALSE  !(choice == 11)
[L2776]  COND TRUE   choice == 10
[L2777]              gas := gas - 21000;
[L2778]  COND TRUE   gas >= 0
[L2779]              assume tokens_s291 >= 0 && tokens_s291 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2780]              assume msgvalue_MSG == 0;
[L2781]  CALL        call success_s291 := approve~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, spender_s291, tokens_s291);
[L601]               havoc __exception;
[L602]               revert := false;
[L603]   COND FALSE  !(__exception)
[L624]   CALL        call success_s291 := approve~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, spender_s291, tokens_s291);
[L1522]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_YearnFinanceBitToken[this][msgsender_MSG][spender_s291];
[L1523]              allowed_YearnFinanceBitToken[this][msgsender_MSG][spender_s291] := tokens_s291;
[L1524]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_YearnFinanceBitToken[this][msgsender_MSG][spender_s291];
[L1525]              assert { :EventEmitted "Approval_YearnFinanceBitToken" } true;
[L1526]              success_s291 := true;
[L624]   RET         call success_s291 := approve~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, spender_s291, tokens_s291);
[L625]               assume !revert && gas >= 0;
[L2781]  RET         call success_s291 := approve~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, spender_s291, tokens_s291);
[L2864]  RET         call CorralChoice_YearnFinanceBitToken(this);
[L2864]  CALL        call CorralChoice_YearnFinanceBitToken(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != YearnFinanceBitToken;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND FALSE  !(choice == 11)
[L2776]  COND FALSE  !(choice == 10)
[L2783]  COND TRUE   choice == 9
[L2784]              gas := gas - 21000;
[L2785]  COND TRUE   gas >= 0
[L2786]              assume tokens_s393 >= 0 && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2787]              assume msgvalue_MSG == 0;
[L2788]  CALL        call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s393 || p2 != msgsender_MSG) && from_s393 == to_s393) && tokens_s393 <= balances_YearnFinanceBitToken[this][from_s393]) && tokens_s393 <= allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG]) && tokens_s393 >= 0) && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][to_s393] >= 0) && balances_YearnFinanceBitToken[this][to_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][from_s393] >= 0) && balances_YearnFinanceBitToken[this][from_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] >= 0) && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_YearnFinanceBitToken0 := true;
[L3]                 call_transferFrom_YearnFinanceBitToken0 := false;
[L3]                 revert := revert_hold;
[L707]               havoc __exception;
[L708]               revert := false;
[L709]   COND FALSE  !(__exception)
[L730]   CALL        call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L1638]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1639]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][from_s393], tokens_s393);
[L1349]  COND FALSE  !(!(b_s112 <= a_s112))
[L1353]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1639]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][from_s393], tokens_s393);
[L1640]  COND FALSE  !(revert)
[L1646]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][from_s393];
[L1647]              balances_YearnFinanceBitToken[this][from_s393] := __var_4;
[L1648]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][from_s393];
[L1649]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1650]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG], tokens_s393);
[L1349]  COND FALSE  !(!(b_s112 <= a_s112))
[L1353]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1650]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG], tokens_s393);
[L1651]  COND FALSE  !(revert)
[L1657]              sum_allowed1[from_s393] := sum_allowed1[from_s393] - allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG];
[L1658]              allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] := __var_5;
[L1659]              sum_allowed1[from_s393] := sum_allowed1[from_s393] + allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG];
[L1660]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1661]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][to_s393], tokens_s393);
[L1331]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1332]  COND FALSE  !(!(c_s90 >= a_s90))
[L1661]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][to_s393], tokens_s393);
[L1662]  COND FALSE  !(revert)
[L1668]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][to_s393];
[L1669]              balances_YearnFinanceBitToken[this][to_s393] := __var_6;
[L1670]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][to_s393];
[L1671]              assert { :EventEmitted "Transfer_YearnFinanceBitToken" } true;
[L1672]              success_s393 := true;
[L730]   RET         call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L731]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((success_s393 == true && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] == old(allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG]) - tokens_s393) && _totalSupply_YearnFinanceBitToken[this] == old(_totalSupply_YearnFinanceBitToken[this])) && balances_YearnFinanceBitToken[this] == old(balances_YearnFinanceBitToken[this])) && allowed_YearnFinanceBitToken[this][p1][p2] == old(allowed_YearnFinanceBitToken[this][p1][p2])) && name_YearnFinanceBitToken[this] == old(name_YearnFinanceBitToken[this])) && symbol_YearnFinanceBitToken[this] == old(symbol_YearnFinanceBitToken[this])) && decimals_YearnFinanceBitToken[this] == old(decimals_YearnFinanceBitToken[this]));
[L3]                 revert := revert_hold;
[L2788]  RET         call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L2864]  RET         call CorralChoice_YearnFinanceBitToken(this);

Loop:
[L2864]  CALL        call CorralChoice_YearnFinanceBitToken(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != YearnFinanceBitToken;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND FALSE  !(choice == 11)
[L2776]  COND FALSE  !(choice == 10)
[L2783]  COND TRUE   choice == 9
[L2784]              gas := gas - 21000;
[L2785]  COND TRUE   gas >= 0
[L2786]              assume tokens_s393 >= 0 && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2787]              assume msgvalue_MSG == 0;
[L2788]  CALL        call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s393 || p2 != msgsender_MSG) && from_s393 == to_s393) && tokens_s393 <= balances_YearnFinanceBitToken[this][from_s393]) && tokens_s393 <= allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG]) && tokens_s393 >= 0) && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][to_s393] >= 0) && balances_YearnFinanceBitToken[this][to_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][from_s393] >= 0) && balances_YearnFinanceBitToken[this][from_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] >= 0) && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_YearnFinanceBitToken0 := true;
[L3]                 call_transferFrom_YearnFinanceBitToken0 := false;
[L3]                 revert := revert_hold;
[L707]               havoc __exception;
[L708]               revert := false;
[L709]   COND TRUE   __exception
[L710]               __tmp__Balance := Balance;
[L711]               __tmp__DType := DType;
[L712]               __tmp__Alloc := Alloc;
[L713]               __tmp__balance_ADDR := balance_ADDR;
[L714]               __tmp__M_Ref_int := M_Ref_int;
[L715]               __tmp__sum_balances0 := sum_balances0;
[L716]               __tmp__alloc_allowed_YearnFinanceBitToken_lvl0 := alloc_allowed_YearnFinanceBitToken_lvl0;
[L717]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L718]               __tmp__sum_allowed1 := sum_allowed1;
[L719]               __tmp__Length := Length;
[L720]               __tmp__now := now;
[L721]               __tmp__name_YearnFinanceBitToken := name_YearnFinanceBitToken;
[L722]               __tmp__symbol_YearnFinanceBitToken := symbol_YearnFinanceBitToken;
[L723]               __tmp__decimals_YearnFinanceBitToken := decimals_YearnFinanceBitToken;
[L724]               __tmp___totalSupply_YearnFinanceBitToken := _totalSupply_YearnFinanceBitToken;
[L725]               __tmp__balances_YearnFinanceBitToken := balances_YearnFinanceBitToken;
[L726]               __tmp__allowed_YearnFinanceBitToken := allowed_YearnFinanceBitToken;
[L727]   CALL        call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L1596]  COND TRUE   __tmp__DType[this] == YearnFinanceBitToken
[L1597]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_YearnFinanceBitToken[this][from_s393], tokens_s393);
[L1340]  COND FALSE  !(!(b_s112 <= a_s112))
[L1344]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1597]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_YearnFinanceBitToken[this][from_s393], tokens_s393);
[L1598]  COND FALSE  !(revert)
[L1604]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_YearnFinanceBitToken[this][from_s393];
[L1605]              __tmp__balances_YearnFinanceBitToken[this][from_s393] := __var_4;
[L1606]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_YearnFinanceBitToken[this][from_s393];
[L1607]  COND TRUE   __tmp__DType[this] == YearnFinanceBitToken
[L1608]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG], tokens_s393);
[L1340]  COND FALSE  !(!(b_s112 <= a_s112))
[L1344]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1608]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG], tokens_s393);
[L1609]  COND FALSE  !(revert)
[L1615]              __tmp__sum_allowed1[from_s393] := __tmp__sum_allowed1[from_s393] - __tmp__allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG];
[L1616]              __tmp__allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] := __var_5;
[L1617]              __tmp__sum_allowed1[from_s393] := __tmp__sum_allowed1[from_s393] + __tmp__allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG];
[L1618]  COND TRUE   __tmp__DType[this] == YearnFinanceBitToken
[L1619]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_YearnFinanceBitToken[this][to_s393], tokens_s393);
[L1322]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1323]  COND TRUE   !(c_s90 >= a_s90)
[L1324]              revert := true;
[L1619]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_YearnFinanceBitToken[this][to_s393], tokens_s393);
[L1620]  COND TRUE   revert
[L727]   RET         call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L728]               assume revert || gas < 0;
[L2788]  RET         call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L2864]  RET         call CorralChoice_YearnFinanceBitToken(this);

[2020-11-25 09:29:43,258 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:29:43,258 INFO  L82        PathProgramCache]: Analyzing trace with hash 720710152, now seen corresponding path program 1 times
[2020-11-25 09:29:43,258 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:29:43,296 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:29:44,058 WARN  L188               SmtUtils]: Spent 105.00 ms on a formula simplification. DAG size of input: 118 DAG size of output: 65
[2020-11-25 09:29:44,457 WARN  L188               SmtUtils]: Spent 294.00 ms on a formula simplification. DAG size of input: 133 DAG size of output: 99
[2020-11-25 09:29:44,722 WARN  L188               SmtUtils]: Spent 201.00 ms on a formula simplification. DAG size of input: 134 DAG size of output: 87
[2020-11-25 09:29:45,563 INFO  L134       CoverageAnalysis]: Checked inductivity of 57 backedges. 3 proven. 1 refuted. 0 times theorem prover too weak. 53 trivial. 0 not checked.
[2020-11-25 09:29:45,563 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 09:29:45,563 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [36] total 36
[2020-11-25 09:29:45,564 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:29:45,564 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 37 interpolants.
[2020-11-25 09:29:45,564 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=112, Invalid=1220, Unknown=0, NotChecked=0, Total=1332
[2020-11-25 09:29:45,564 INFO  L87              Difference]: Start difference. First operand 1348 states and 1465 transitions. cyclomatic complexity: 121 Second operand 37 states.
[2020-11-25 09:29:49,223 WARN  L188               SmtUtils]: Spent 142.00 ms on a formula simplification that was a NOOP. DAG size: 139
[2020-11-25 09:29:49,490 WARN  L188               SmtUtils]: Spent 162.00 ms on a formula simplification. DAG size of input: 100 DAG size of output: 93
[2020-11-25 09:29:49,625 WARN  L188               SmtUtils]: Spent 101.00 ms on a formula simplification. DAG size of input: 103 DAG size of output: 96
[2020-11-25 09:29:52,655 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:29:52,655 INFO  L93              Difference]: Finished difference Result 1373 states and 1517 transitions.
[2020-11-25 09:29:52,655 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 36 states. 
[2020-11-25 09:29:52,655 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1373 states and 1517 transitions.
[2020-11-25 09:29:52,658 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 09:29:52,661 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1373 states to 1373 states and 1517 transitions.
[2020-11-25 09:29:52,661 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 441
[2020-11-25 09:29:52,661 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 441
[2020-11-25 09:29:52,661 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1373 states and 1517 transitions.
[2020-11-25 09:29:52,662 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:29:52,662 INFO  L728         BuchiCegarLoop]: Abstraction has 1373 states and 1517 transitions.
[2020-11-25 09:29:52,663 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1373 states and 1517 transitions.
[2020-11-25 09:29:52,670 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1373 to 1362.
[2020-11-25 09:29:52,670 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1362 states.
[2020-11-25 09:29:52,671 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1362 states to 1362 states and 1490 transitions.
[2020-11-25 09:29:52,671 INFO  L751         BuchiCegarLoop]: Abstraction has 1362 states and 1490 transitions.
[2020-11-25 09:29:52,671 INFO  L631         BuchiCegarLoop]: Abstraction has 1362 states and 1490 transitions.
[2020-11-25 09:29:52,671 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 09:29:52,671 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1362 states and 1490 transitions.
[2020-11-25 09:29:52,673 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 09:29:52,673 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:29:52,673 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:29:52,674 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:29:52,674 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_YearnFinanceBitToken0 := false;
[L3]                 call_transferFrom_YearnFinanceBitToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L2854]              assume null == 0;
[L2855]  CALL        call this := FreshRefGenerator__success();
[L1250]              havoc newRef;
[L1251]              assume Alloc[newRef] == false;
[L1252]              Alloc[newRef] := true;
[L1253]              assume newRef != null;
[L2855]  RET         call this := FreshRefGenerator__success();
[L2856]              assume now >= 0;
[L2857]              assume DType[this] == YearnFinanceBitToken;
[L2858]              assume msgvalue_MSG == 0;
[L2859]              gas := gas - 53000;
[L2860]  CALL        call YearnFinanceBitToken_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG);
[L399]               havoc __exception;
[L400]               revert := false;
[L401]   COND FALSE  !(__exception)
[L422]   CALL        call YearnFinanceBitToken_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1457]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1282]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1267]              assume msgsender_MSG != null;
[L1268]              Balance[this] := 0;
[L1282]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1283]  COND FALSE  !(revert)
[L1457]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1458]  COND FALSE  !(revert)
[L1461]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1314]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1299]              assume msgsender_MSG != null;
[L1300]              Balance[this] := 0;
[L1314]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1315]  COND FALSE  !(revert)
[L1461]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1462]  COND FALSE  !(revert)
[L1465]  CALL        call YearnFinanceBitToken_YearnFinanceBitToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1418]              assume msgsender_MSG != null;
[L1419]              Balance[this] := 0;
[L1420]              name_YearnFinanceBitToken[this] := 627147201;
[L1421]              symbol_YearnFinanceBitToken[this] := 627147201;
[L1422]              decimals_YearnFinanceBitToken[this] := 0;
[L1423]              _totalSupply_YearnFinanceBitToken[this] := 0;
[L1424]              balances_YearnFinanceBitToken[this] := zeroRefintArr();
[L1425]              sum_balances0[this] := 0;
[L1426]              allowed_YearnFinanceBitToken[this] := zeroRefRefintArr();
[L1427]              sum_allowed1[this] := 0;
[L1429]              name_YearnFinanceBitToken[this] := 1658284292;
[L1430]              symbol_YearnFinanceBitToken[this] := -1175268548;
[L1431]              decimals_YearnFinanceBitToken[this] := 18;
[L1432]              _totalSupply_YearnFinanceBitToken[this] := 7000000000000000000000;
[L1433]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1434]              balances_YearnFinanceBitToken[this][msgsender_MSG] := _totalSupply_YearnFinanceBitToken[this];
[L1435]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1436]              assert { :EventEmitted "Transfer_YearnFinanceBitToken" } true;
[L1465]  RET         call YearnFinanceBitToken_YearnFinanceBitToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1466]  COND FALSE  !(revert)
[L422]   RET         call YearnFinanceBitToken_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG);
[L423]               assume !revert && gas >= 0;
[L2860]  RET         call YearnFinanceBitToken_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG);
[L2861]              assume !revert && gas >= 0;
[L2864]  CALL        call CorralChoice_YearnFinanceBitToken(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != YearnFinanceBitToken;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND FALSE  !(choice == 11)
[L2776]  COND TRUE   choice == 10
[L2777]              gas := gas - 21000;
[L2778]  COND TRUE   gas >= 0
[L2779]              assume tokens_s291 >= 0 && tokens_s291 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2780]              assume msgvalue_MSG == 0;
[L2781]  CALL        call success_s291 := approve~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, spender_s291, tokens_s291);
[L601]               havoc __exception;
[L602]               revert := false;
[L603]   COND FALSE  !(__exception)
[L624]   CALL        call success_s291 := approve~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, spender_s291, tokens_s291);
[L1522]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_YearnFinanceBitToken[this][msgsender_MSG][spender_s291];
[L1523]              allowed_YearnFinanceBitToken[this][msgsender_MSG][spender_s291] := tokens_s291;
[L1524]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_YearnFinanceBitToken[this][msgsender_MSG][spender_s291];
[L1525]              assert { :EventEmitted "Approval_YearnFinanceBitToken" } true;
[L1526]              success_s291 := true;
[L624]   RET         call success_s291 := approve~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, spender_s291, tokens_s291);
[L625]               assume !revert && gas >= 0;
[L2781]  RET         call success_s291 := approve~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, spender_s291, tokens_s291);
[L2864]  RET         call CorralChoice_YearnFinanceBitToken(this);
[L2864]  CALL        call CorralChoice_YearnFinanceBitToken(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != YearnFinanceBitToken;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND FALSE  !(choice == 11)
[L2776]  COND FALSE  !(choice == 10)
[L2783]  COND TRUE   choice == 9
[L2784]              gas := gas - 21000;
[L2785]  COND TRUE   gas >= 0
[L2786]              assume tokens_s393 >= 0 && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2787]              assume msgvalue_MSG == 0;
[L2788]  CALL        call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s393 || p2 != msgsender_MSG) && from_s393 == to_s393) && tokens_s393 <= balances_YearnFinanceBitToken[this][from_s393]) && tokens_s393 <= allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG]) && tokens_s393 >= 0) && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][to_s393] >= 0) && balances_YearnFinanceBitToken[this][to_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][from_s393] >= 0) && balances_YearnFinanceBitToken[this][from_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] >= 0) && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_YearnFinanceBitToken0 := true;
[L3]                 call_transferFrom_YearnFinanceBitToken0 := false;
[L3]                 revert := revert_hold;
[L707]               havoc __exception;
[L708]               revert := false;
[L709]   COND TRUE   __exception
[L710]               __tmp__Balance := Balance;
[L711]               __tmp__DType := DType;
[L712]               __tmp__Alloc := Alloc;
[L713]               __tmp__balance_ADDR := balance_ADDR;
[L714]               __tmp__M_Ref_int := M_Ref_int;
[L715]               __tmp__sum_balances0 := sum_balances0;
[L716]               __tmp__alloc_allowed_YearnFinanceBitToken_lvl0 := alloc_allowed_YearnFinanceBitToken_lvl0;
[L717]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L718]               __tmp__sum_allowed1 := sum_allowed1;
[L719]               __tmp__Length := Length;
[L720]               __tmp__now := now;
[L721]               __tmp__name_YearnFinanceBitToken := name_YearnFinanceBitToken;
[L722]               __tmp__symbol_YearnFinanceBitToken := symbol_YearnFinanceBitToken;
[L723]               __tmp__decimals_YearnFinanceBitToken := decimals_YearnFinanceBitToken;
[L724]               __tmp___totalSupply_YearnFinanceBitToken := _totalSupply_YearnFinanceBitToken;
[L725]               __tmp__balances_YearnFinanceBitToken := balances_YearnFinanceBitToken;
[L726]               __tmp__allowed_YearnFinanceBitToken := allowed_YearnFinanceBitToken;
[L727]   CALL        call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L1596]  COND TRUE   __tmp__DType[this] == YearnFinanceBitToken
[L1597]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_YearnFinanceBitToken[this][from_s393], tokens_s393);
[L1340]  COND FALSE  !(!(b_s112 <= a_s112))
[L1344]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1597]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_YearnFinanceBitToken[this][from_s393], tokens_s393);
[L1598]  COND FALSE  !(revert)
[L1604]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_YearnFinanceBitToken[this][from_s393];
[L1605]              __tmp__balances_YearnFinanceBitToken[this][from_s393] := __var_4;
[L1606]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_YearnFinanceBitToken[this][from_s393];
[L1607]  COND TRUE   __tmp__DType[this] == YearnFinanceBitToken
[L1608]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG], tokens_s393);
[L1340]  COND FALSE  !(!(b_s112 <= a_s112))
[L1344]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1608]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG], tokens_s393);
[L1609]  COND FALSE  !(revert)
[L1615]              __tmp__sum_allowed1[from_s393] := __tmp__sum_allowed1[from_s393] - __tmp__allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG];
[L1616]              __tmp__allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] := __var_5;
[L1617]              __tmp__sum_allowed1[from_s393] := __tmp__sum_allowed1[from_s393] + __tmp__allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG];
[L1618]  COND TRUE   __tmp__DType[this] == YearnFinanceBitToken
[L1619]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_YearnFinanceBitToken[this][to_s393], tokens_s393);
[L1322]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1323]  COND TRUE   !(c_s90 >= a_s90)
[L1324]              revert := true;
[L1619]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_YearnFinanceBitToken[this][to_s393], tokens_s393);
[L1620]  COND TRUE   revert
[L727]   RET         call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L728]               assume revert || gas < 0;
[L2788]  RET         call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L2864]  RET         call CorralChoice_YearnFinanceBitToken(this);

Loop:
[L2864]  CALL        call CorralChoice_YearnFinanceBitToken(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != YearnFinanceBitToken;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND TRUE   choice == 14
[L2752]              gas := gas - 21000;
[L2753]  COND FALSE  !(gas >= 0)
[L2864]  RET         call CorralChoice_YearnFinanceBitToken(this);

[2020-11-25 09:29:52,676 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:29:52,677 INFO  L82        PathProgramCache]: Analyzing trace with hash -2085019536, now seen corresponding path program 1 times
[2020-11-25 09:29:52,677 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:29:52,688 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:29:52,763 INFO  L134       CoverageAnalysis]: Checked inductivity of 57 backedges. 0 proven. 2 refuted. 0 times theorem prover too weak. 55 trivial. 0 not checked.
[2020-11-25 09:29:52,763 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 09:29:52,763 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [11] total 11
[2020-11-25 09:29:52,764 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:29:52,764 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 11 interpolants.
[2020-11-25 09:29:52,764 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=20, Invalid=90, Unknown=0, NotChecked=0, Total=110
[2020-11-25 09:29:52,764 INFO  L87              Difference]: Start difference. First operand 1362 states and 1490 transitions. cyclomatic complexity: 134 Second operand 11 states.
[2020-11-25 09:29:53,332 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:29:53,332 INFO  L93              Difference]: Finished difference Result 1392 states and 1542 transitions.
[2020-11-25 09:29:53,332 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 11 states. 
[2020-11-25 09:29:53,332 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1392 states and 1542 transitions.
[2020-11-25 09:29:53,335 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 09:29:53,338 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1392 states to 1356 states and 1504 transitions.
[2020-11-25 09:29:53,338 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 446
[2020-11-25 09:29:53,339 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 446
[2020-11-25 09:29:53,339 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1356 states and 1504 transitions.
[2020-11-25 09:29:53,340 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:29:53,340 INFO  L728         BuchiCegarLoop]: Abstraction has 1356 states and 1504 transitions.
[2020-11-25 09:29:53,341 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1356 states and 1504 transitions.
[2020-11-25 09:29:53,347 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1356 to 1294.
[2020-11-25 09:29:53,347 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1294 states.
[2020-11-25 09:29:53,348 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1294 states to 1294 states and 1403 transitions.
[2020-11-25 09:29:53,348 INFO  L751         BuchiCegarLoop]: Abstraction has 1294 states and 1403 transitions.
[2020-11-25 09:29:53,348 INFO  L631         BuchiCegarLoop]: Abstraction has 1294 states and 1403 transitions.
[2020-11-25 09:29:53,348 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 09:29:53,348 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1294 states and 1403 transitions.
[2020-11-25 09:29:53,349 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:29:53,349 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:29:53,349 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:29:53,350 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:29:53,350 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_YearnFinanceBitToken0 := false;
[L3]                 call_transferFrom_YearnFinanceBitToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L2854]              assume null == 0;
[L2855]  CALL        call this := FreshRefGenerator__success();
[L1250]              havoc newRef;
[L1251]              assume Alloc[newRef] == false;
[L1252]              Alloc[newRef] := true;
[L1253]              assume newRef != null;
[L2855]  RET         call this := FreshRefGenerator__success();
[L2856]              assume now >= 0;
[L2857]              assume DType[this] == YearnFinanceBitToken;
[L2858]              assume msgvalue_MSG == 0;
[L2859]              gas := gas - 53000;
[L2860]  CALL        call YearnFinanceBitToken_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG);
[L399]               havoc __exception;
[L400]               revert := false;
[L401]   COND FALSE  !(__exception)
[L422]   CALL        call YearnFinanceBitToken_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1457]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1282]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1267]              assume msgsender_MSG != null;
[L1268]              Balance[this] := 0;
[L1282]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1283]  COND FALSE  !(revert)
[L1457]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1458]  COND FALSE  !(revert)
[L1461]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1314]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1299]              assume msgsender_MSG != null;
[L1300]              Balance[this] := 0;
[L1314]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1315]  COND FALSE  !(revert)
[L1461]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1462]  COND FALSE  !(revert)
[L1465]  CALL        call YearnFinanceBitToken_YearnFinanceBitToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1418]              assume msgsender_MSG != null;
[L1419]              Balance[this] := 0;
[L1420]              name_YearnFinanceBitToken[this] := 627147201;
[L1421]              symbol_YearnFinanceBitToken[this] := 627147201;
[L1422]              decimals_YearnFinanceBitToken[this] := 0;
[L1423]              _totalSupply_YearnFinanceBitToken[this] := 0;
[L1424]              balances_YearnFinanceBitToken[this] := zeroRefintArr();
[L1425]              sum_balances0[this] := 0;
[L1426]              allowed_YearnFinanceBitToken[this] := zeroRefRefintArr();
[L1427]              sum_allowed1[this] := 0;
[L1429]              name_YearnFinanceBitToken[this] := 1658284292;
[L1430]              symbol_YearnFinanceBitToken[this] := -1175268548;
[L1431]              decimals_YearnFinanceBitToken[this] := 18;
[L1432]              _totalSupply_YearnFinanceBitToken[this] := 7000000000000000000000;
[L1433]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1434]              balances_YearnFinanceBitToken[this][msgsender_MSG] := _totalSupply_YearnFinanceBitToken[this];
[L1435]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1436]              assert { :EventEmitted "Transfer_YearnFinanceBitToken" } true;
[L1465]  RET         call YearnFinanceBitToken_YearnFinanceBitToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1466]  COND FALSE  !(revert)
[L422]   RET         call YearnFinanceBitToken_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG);
[L423]               assume !revert && gas >= 0;
[L2860]  RET         call YearnFinanceBitToken_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG);
[L2861]              assume !revert && gas >= 0;
[L2864]  CALL        call CorralChoice_YearnFinanceBitToken(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != YearnFinanceBitToken;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND TRUE   choice == 11
[L2770]              gas := gas - 21000;
[L2771]  COND TRUE   gas >= 0
[L2772]              assume tokens_s334 >= 0 && tokens_s334 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2773]              assume msgvalue_MSG == 0;
[L2774]  CALL        call success_s334 := transfer~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L653]               havoc __exception;
[L654]               revert := false;
[L655]   COND FALSE  !(__exception)
[L676]   CALL        call success_s334 := transfer~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L1564]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1565]  CALL        call __var_2 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][msgsender_MSG], tokens_s334);
[L1349]  COND FALSE  !(!(b_s112 <= a_s112))
[L1353]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1565]  RET         call __var_2 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][msgsender_MSG], tokens_s334);
[L1566]  COND FALSE  !(revert)
[L1572]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1573]              balances_YearnFinanceBitToken[this][msgsender_MSG] := __var_2;
[L1574]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1575]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1576]  CALL        call __var_3 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][to_s334], tokens_s334);
[L1331]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1332]  COND FALSE  !(!(c_s90 >= a_s90))
[L1576]  RET         call __var_3 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][to_s334], tokens_s334);
[L1577]  COND FALSE  !(revert)
[L1583]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][to_s334];
[L1584]              balances_YearnFinanceBitToken[this][to_s334] := __var_3;
[L1585]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][to_s334];
[L1586]              assert { :EventEmitted "Transfer_YearnFinanceBitToken" } true;
[L1587]              success_s334 := true;
[L676]   RET         call success_s334 := transfer~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L677]               assume !revert && gas >= 0;
[L2774]  RET         call success_s334 := transfer~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L2864]  RET         call CorralChoice_YearnFinanceBitToken(this);
[L2864]  CALL        call CorralChoice_YearnFinanceBitToken(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != YearnFinanceBitToken;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND FALSE  !(choice == 11)
[L2776]  COND FALSE  !(choice == 10)
[L2783]  COND TRUE   choice == 9
[L2784]              gas := gas - 21000;
[L2785]  COND TRUE   gas >= 0
[L2786]              assume tokens_s393 >= 0 && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2787]              assume msgvalue_MSG == 0;
[L2788]  CALL        call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s393 || p2 != msgsender_MSG) && from_s393 == to_s393) && tokens_s393 <= balances_YearnFinanceBitToken[this][from_s393]) && tokens_s393 <= allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG]) && tokens_s393 >= 0) && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][to_s393] >= 0) && balances_YearnFinanceBitToken[this][to_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][from_s393] >= 0) && balances_YearnFinanceBitToken[this][from_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] >= 0) && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_YearnFinanceBitToken0 := true;
[L3]                 call_transferFrom_YearnFinanceBitToken0 := false;
[L3]                 revert := revert_hold;
[L707]               havoc __exception;
[L708]               revert := false;
[L709]   COND FALSE  !(__exception)
[L730]   CALL        call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L1638]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1639]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][from_s393], tokens_s393);
[L1349]  COND FALSE  !(!(b_s112 <= a_s112))
[L1353]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1639]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][from_s393], tokens_s393);
[L1640]  COND FALSE  !(revert)
[L1646]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][from_s393];
[L1647]              balances_YearnFinanceBitToken[this][from_s393] := __var_4;
[L1648]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][from_s393];
[L1649]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1650]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG], tokens_s393);
[L1349]  COND FALSE  !(!(b_s112 <= a_s112))
[L1353]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1650]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG], tokens_s393);
[L1651]  COND FALSE  !(revert)
[L1657]              sum_allowed1[from_s393] := sum_allowed1[from_s393] - allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG];
[L1658]              allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] := __var_5;
[L1659]              sum_allowed1[from_s393] := sum_allowed1[from_s393] + allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG];
[L1660]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1661]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][to_s393], tokens_s393);
[L1331]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1332]  COND FALSE  !(!(c_s90 >= a_s90))
[L1661]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][to_s393], tokens_s393);
[L1662]  COND FALSE  !(revert)
[L1668]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][to_s393];
[L1669]              balances_YearnFinanceBitToken[this][to_s393] := __var_6;
[L1670]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][to_s393];
[L1671]              assert { :EventEmitted "Transfer_YearnFinanceBitToken" } true;
[L1672]              success_s393 := true;
[L730]   RET         call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L731]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((success_s393 == true && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] == old(allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG]) - tokens_s393) && _totalSupply_YearnFinanceBitToken[this] == old(_totalSupply_YearnFinanceBitToken[this])) && balances_YearnFinanceBitToken[this] == old(balances_YearnFinanceBitToken[this])) && allowed_YearnFinanceBitToken[this][p1][p2] == old(allowed_YearnFinanceBitToken[this][p1][p2])) && name_YearnFinanceBitToken[this] == old(name_YearnFinanceBitToken[this])) && symbol_YearnFinanceBitToken[this] == old(symbol_YearnFinanceBitToken[this])) && decimals_YearnFinanceBitToken[this] == old(decimals_YearnFinanceBitToken[this]));
[L3]                 revert := revert_hold;
[L2788]  RET         call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L2864]  RET         call CorralChoice_YearnFinanceBitToken(this);

Loop:
[L2864]  CALL        call CorralChoice_YearnFinanceBitToken(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != YearnFinanceBitToken;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND FALSE  !(choice == 11)
[L2776]  COND FALSE  !(choice == 10)
[L2783]  COND TRUE   choice == 9
[L2784]              gas := gas - 21000;
[L2785]  COND TRUE   gas >= 0
[L2786]              assume tokens_s393 >= 0 && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2787]              assume msgvalue_MSG == 0;
[L2788]  CALL        call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s393 || p2 != msgsender_MSG) && from_s393 == to_s393) && tokens_s393 <= balances_YearnFinanceBitToken[this][from_s393]) && tokens_s393 <= allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG]) && tokens_s393 >= 0) && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][to_s393] >= 0) && balances_YearnFinanceBitToken[this][to_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][from_s393] >= 0) && balances_YearnFinanceBitToken[this][from_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] >= 0) && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_YearnFinanceBitToken0 := true;
[L3]                 call_transferFrom_YearnFinanceBitToken0 := false;
[L3]                 revert := revert_hold;
[L707]               havoc __exception;
[L708]               revert := false;
[L709]   COND FALSE  !(__exception)
[L730]   CALL        call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L1638]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1639]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][from_s393], tokens_s393);
[L1349]  COND FALSE  !(!(b_s112 <= a_s112))
[L1353]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1639]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][from_s393], tokens_s393);
[L1640]  COND FALSE  !(revert)
[L1646]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][from_s393];
[L1647]              balances_YearnFinanceBitToken[this][from_s393] := __var_4;
[L1648]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][from_s393];
[L1649]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1650]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG], tokens_s393);
[L1349]  COND FALSE  !(!(b_s112 <= a_s112))
[L1353]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1650]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG], tokens_s393);
[L1651]  COND FALSE  !(revert)
[L1657]              sum_allowed1[from_s393] := sum_allowed1[from_s393] - allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG];
[L1658]              allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] := __var_5;
[L1659]              sum_allowed1[from_s393] := sum_allowed1[from_s393] + allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG];
[L1660]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1661]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][to_s393], tokens_s393);
[L1331]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1332]  COND FALSE  !(!(c_s90 >= a_s90))
[L1661]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][to_s393], tokens_s393);
[L1662]  COND FALSE  !(revert)
[L1668]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][to_s393];
[L1669]              balances_YearnFinanceBitToken[this][to_s393] := __var_6;
[L1670]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][to_s393];
[L1671]              assert { :EventEmitted "Transfer_YearnFinanceBitToken" } true;
[L1672]              success_s393 := true;
[L730]   RET         call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L731]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((success_s393 == true && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] == old(allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG]) - tokens_s393) && _totalSupply_YearnFinanceBitToken[this] == old(_totalSupply_YearnFinanceBitToken[this])) && balances_YearnFinanceBitToken[this] == old(balances_YearnFinanceBitToken[this])) && allowed_YearnFinanceBitToken[this][p1][p2] == old(allowed_YearnFinanceBitToken[this][p1][p2])) && name_YearnFinanceBitToken[this] == old(name_YearnFinanceBitToken[this])) && symbol_YearnFinanceBitToken[this] == old(symbol_YearnFinanceBitToken[this])) && decimals_YearnFinanceBitToken[this] == old(decimals_YearnFinanceBitToken[this]));
[L3]                 revert := revert_hold;
[L2788]  RET         call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L2864]  RET         call CorralChoice_YearnFinanceBitToken(this);

[2020-11-25 09:29:53,353 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:29:53,353 INFO  L82        PathProgramCache]: Analyzing trace with hash 421589154, now seen corresponding path program 1 times
[2020-11-25 09:29:53,354 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:29:53,404 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:29:53,741 WARN  L188               SmtUtils]: Spent 104.00 ms on a formula simplification. DAG size of input: 56 DAG size of output: 49
[2020-11-25 09:29:53,915 INFO  L134       CoverageAnalysis]: Checked inductivity of 56 backedges. 52 proven. 2 refuted. 0 times theorem prover too weak. 2 trivial. 0 not checked.
[2020-11-25 09:29:53,915 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 09:29:53,915 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [24] total 24
[2020-11-25 09:29:53,915 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:29:53,916 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 25 interpolants.
[2020-11-25 09:29:53,916 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=57, Invalid=543, Unknown=0, NotChecked=0, Total=600
[2020-11-25 09:29:53,916 INFO  L87              Difference]: Start difference. First operand 1294 states and 1403 transitions. cyclomatic complexity: 113 Second operand 25 states.
[2020-11-25 09:29:56,096 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:29:56,096 INFO  L93              Difference]: Finished difference Result 1327 states and 1444 transitions.
[2020-11-25 09:29:56,096 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 26 states. 
[2020-11-25 09:29:56,096 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1327 states and 1444 transitions.
[2020-11-25 09:29:56,098 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:29:56,101 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1327 states to 1327 states and 1444 transitions.
[2020-11-25 09:29:56,101 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 426
[2020-11-25 09:29:56,101 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 426
[2020-11-25 09:29:56,101 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1327 states and 1444 transitions.
[2020-11-25 09:29:56,102 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:29:56,102 INFO  L728         BuchiCegarLoop]: Abstraction has 1327 states and 1444 transitions.
[2020-11-25 09:29:56,103 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1327 states and 1444 transitions.
[2020-11-25 09:29:56,109 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1327 to 1298.
[2020-11-25 09:29:56,109 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1298 states.
[2020-11-25 09:29:56,110 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1298 states to 1298 states and 1413 transitions.
[2020-11-25 09:29:56,110 INFO  L751         BuchiCegarLoop]: Abstraction has 1298 states and 1413 transitions.
[2020-11-25 09:29:56,110 INFO  L631         BuchiCegarLoop]: Abstraction has 1298 states and 1413 transitions.
[2020-11-25 09:29:56,110 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-25 09:29:56,110 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1298 states and 1413 transitions.
[2020-11-25 09:29:56,112 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:29:56,112 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:29:56,112 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:29:56,113 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:29:56,113 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_YearnFinanceBitToken0 := false;
[L3]                 call_transferFrom_YearnFinanceBitToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L2854]              assume null == 0;
[L2855]  CALL        call this := FreshRefGenerator__success();
[L1250]              havoc newRef;
[L1251]              assume Alloc[newRef] == false;
[L1252]              Alloc[newRef] := true;
[L1253]              assume newRef != null;
[L2855]  RET         call this := FreshRefGenerator__success();
[L2856]              assume now >= 0;
[L2857]              assume DType[this] == YearnFinanceBitToken;
[L2858]              assume msgvalue_MSG == 0;
[L2859]              gas := gas - 53000;
[L2860]  CALL        call YearnFinanceBitToken_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG);
[L399]               havoc __exception;
[L400]               revert := false;
[L401]   COND FALSE  !(__exception)
[L422]   CALL        call YearnFinanceBitToken_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1457]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1282]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1267]              assume msgsender_MSG != null;
[L1268]              Balance[this] := 0;
[L1282]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1283]  COND FALSE  !(revert)
[L1457]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1458]  COND FALSE  !(revert)
[L1461]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1314]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1299]              assume msgsender_MSG != null;
[L1300]              Balance[this] := 0;
[L1314]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1315]  COND FALSE  !(revert)
[L1461]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1462]  COND FALSE  !(revert)
[L1465]  CALL        call YearnFinanceBitToken_YearnFinanceBitToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1418]              assume msgsender_MSG != null;
[L1419]              Balance[this] := 0;
[L1420]              name_YearnFinanceBitToken[this] := 627147201;
[L1421]              symbol_YearnFinanceBitToken[this] := 627147201;
[L1422]              decimals_YearnFinanceBitToken[this] := 0;
[L1423]              _totalSupply_YearnFinanceBitToken[this] := 0;
[L1424]              balances_YearnFinanceBitToken[this] := zeroRefintArr();
[L1425]              sum_balances0[this] := 0;
[L1426]              allowed_YearnFinanceBitToken[this] := zeroRefRefintArr();
[L1427]              sum_allowed1[this] := 0;
[L1429]              name_YearnFinanceBitToken[this] := 1658284292;
[L1430]              symbol_YearnFinanceBitToken[this] := -1175268548;
[L1431]              decimals_YearnFinanceBitToken[this] := 18;
[L1432]              _totalSupply_YearnFinanceBitToken[this] := 7000000000000000000000;
[L1433]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1434]              balances_YearnFinanceBitToken[this][msgsender_MSG] := _totalSupply_YearnFinanceBitToken[this];
[L1435]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1436]              assert { :EventEmitted "Transfer_YearnFinanceBitToken" } true;
[L1465]  RET         call YearnFinanceBitToken_YearnFinanceBitToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1466]  COND FALSE  !(revert)
[L422]   RET         call YearnFinanceBitToken_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG);
[L423]               assume !revert && gas >= 0;
[L2860]  RET         call YearnFinanceBitToken_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG);
[L2861]              assume !revert && gas >= 0;
[L2864]  CALL        call CorralChoice_YearnFinanceBitToken(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != YearnFinanceBitToken;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND FALSE  !(choice == 11)
[L2776]  COND FALSE  !(choice == 10)
[L2783]  COND TRUE   choice == 9
[L2784]              gas := gas - 21000;
[L2785]  COND TRUE   gas >= 0
[L2786]              assume tokens_s393 >= 0 && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2787]              assume msgvalue_MSG == 0;
[L2788]  CALL        call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((p1 != from_s393 || p2 != msgsender_MSG) && from_s393 == to_s393) && tokens_s393 <= balances_YearnFinanceBitToken[this][from_s393]) && tokens_s393 <= allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG]) && tokens_s393 >= 0) && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][to_s393] >= 0) && balances_YearnFinanceBitToken[this][to_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][from_s393] >= 0) && balances_YearnFinanceBitToken[this][from_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] >= 0) && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3]                 revert := revert_hold;
[L707]               havoc __exception;
[L708]               revert := false;
[L709]   COND FALSE  !(__exception)
[L730]   CALL        call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L1638]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1639]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][from_s393], tokens_s393);
[L1349]  COND FALSE  !(!(b_s112 <= a_s112))
[L1353]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1639]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][from_s393], tokens_s393);
[L1640]  COND FALSE  !(revert)
[L1646]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][from_s393];
[L1647]              balances_YearnFinanceBitToken[this][from_s393] := __var_4;
[L1648]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][from_s393];
[L1649]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1650]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG], tokens_s393);
[L1349]  COND FALSE  !(!(b_s112 <= a_s112))
[L1353]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1650]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG], tokens_s393);
[L1651]  COND FALSE  !(revert)
[L1657]              sum_allowed1[from_s393] := sum_allowed1[from_s393] - allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG];
[L1658]              allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] := __var_5;
[L1659]              sum_allowed1[from_s393] := sum_allowed1[from_s393] + allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG];
[L1660]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1661]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][to_s393], tokens_s393);
[L1331]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1332]  COND FALSE  !(!(c_s90 >= a_s90))
[L1661]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][to_s393], tokens_s393);
[L1662]  COND FALSE  !(revert)
[L1668]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][to_s393];
[L1669]              balances_YearnFinanceBitToken[this][to_s393] := __var_6;
[L1670]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][to_s393];
[L1671]              assert { :EventEmitted "Transfer_YearnFinanceBitToken" } true;
[L1672]              success_s393 := true;
[L730]   RET         call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L731]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((success_s393 == true && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] == old(allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG]) - tokens_s393) && _totalSupply_YearnFinanceBitToken[this] == old(_totalSupply_YearnFinanceBitToken[this])) && balances_YearnFinanceBitToken[this] == old(balances_YearnFinanceBitToken[this])) && allowed_YearnFinanceBitToken[this][p1][p2] == old(allowed_YearnFinanceBitToken[this][p1][p2])) && name_YearnFinanceBitToken[this] == old(name_YearnFinanceBitToken[this])) && symbol_YearnFinanceBitToken[this] == old(symbol_YearnFinanceBitToken[this])) && decimals_YearnFinanceBitToken[this] == old(decimals_YearnFinanceBitToken[this]));
[L3]                 revert := revert_hold;
[L2788]  RET         call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L2864]  RET         call CorralChoice_YearnFinanceBitToken(this);
[L2864]  CALL        call CorralChoice_YearnFinanceBitToken(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != YearnFinanceBitToken;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND FALSE  !(choice == 11)
[L2776]  COND FALSE  !(choice == 10)
[L2783]  COND TRUE   choice == 9
[L2784]              gas := gas - 21000;
[L2785]  COND TRUE   gas >= 0
[L2786]              assume tokens_s393 >= 0 && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2787]              assume msgvalue_MSG == 0;
[L2788]  CALL        call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s393 || p2 != msgsender_MSG) && from_s393 == to_s393) && tokens_s393 <= balances_YearnFinanceBitToken[this][from_s393]) && tokens_s393 <= allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG]) && tokens_s393 >= 0) && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][to_s393] >= 0) && balances_YearnFinanceBitToken[this][to_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][from_s393] >= 0) && balances_YearnFinanceBitToken[this][from_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] >= 0) && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_YearnFinanceBitToken0 := true;
[L3]                 call_transferFrom_YearnFinanceBitToken0 := false;
[L3]                 revert := revert_hold;
[L707]               havoc __exception;
[L708]               revert := false;
[L709]   COND FALSE  !(__exception)
[L730]   CALL        call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L1638]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1639]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][from_s393], tokens_s393);
[L1349]  COND FALSE  !(!(b_s112 <= a_s112))
[L1353]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1639]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][from_s393], tokens_s393);
[L1640]  COND FALSE  !(revert)
[L1646]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][from_s393];
[L1647]              balances_YearnFinanceBitToken[this][from_s393] := __var_4;
[L1648]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][from_s393];
[L1649]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1650]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG], tokens_s393);
[L1349]  COND FALSE  !(!(b_s112 <= a_s112))
[L1353]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1650]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG], tokens_s393);
[L1651]  COND FALSE  !(revert)
[L1657]              sum_allowed1[from_s393] := sum_allowed1[from_s393] - allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG];
[L1658]              allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] := __var_5;
[L1659]              sum_allowed1[from_s393] := sum_allowed1[from_s393] + allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG];
[L1660]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1661]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][to_s393], tokens_s393);
[L1331]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1332]  COND FALSE  !(!(c_s90 >= a_s90))
[L1661]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][to_s393], tokens_s393);
[L1662]  COND FALSE  !(revert)
[L1668]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][to_s393];
[L1669]              balances_YearnFinanceBitToken[this][to_s393] := __var_6;
[L1670]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][to_s393];
[L1671]              assert { :EventEmitted "Transfer_YearnFinanceBitToken" } true;
[L1672]              success_s393 := true;
[L730]   RET         call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L731]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((success_s393 == true && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] == old(allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG]) - tokens_s393) && _totalSupply_YearnFinanceBitToken[this] == old(_totalSupply_YearnFinanceBitToken[this])) && balances_YearnFinanceBitToken[this] == old(balances_YearnFinanceBitToken[this])) && allowed_YearnFinanceBitToken[this][p1][p2] == old(allowed_YearnFinanceBitToken[this][p1][p2])) && name_YearnFinanceBitToken[this] == old(name_YearnFinanceBitToken[this])) && symbol_YearnFinanceBitToken[this] == old(symbol_YearnFinanceBitToken[this])) && decimals_YearnFinanceBitToken[this] == old(decimals_YearnFinanceBitToken[this]));
[L3]                 revert := revert_hold;
[L2788]  RET         call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L2864]  RET         call CorralChoice_YearnFinanceBitToken(this);

Loop:
[L2864]  CALL        call CorralChoice_YearnFinanceBitToken(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != YearnFinanceBitToken;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND FALSE  !(choice == 11)
[L2776]  COND FALSE  !(choice == 10)
[L2783]  COND TRUE   choice == 9
[L2784]              gas := gas - 21000;
[L2785]  COND TRUE   gas >= 0
[L2786]              assume tokens_s393 >= 0 && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2787]              assume msgvalue_MSG == 0;
[L2788]  CALL        call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s393 || p2 != msgsender_MSG) && from_s393 == to_s393) && tokens_s393 <= balances_YearnFinanceBitToken[this][from_s393]) && tokens_s393 <= allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG]) && tokens_s393 >= 0) && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][to_s393] >= 0) && balances_YearnFinanceBitToken[this][to_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][from_s393] >= 0) && balances_YearnFinanceBitToken[this][from_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] >= 0) && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_YearnFinanceBitToken0 := true;
[L3]                 call_transferFrom_YearnFinanceBitToken0 := false;
[L3]                 revert := revert_hold;
[L707]               havoc __exception;
[L708]               revert := false;
[L709]   COND FALSE  !(__exception)
[L730]   CALL        call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L1638]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1639]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][from_s393], tokens_s393);
[L1349]  COND FALSE  !(!(b_s112 <= a_s112))
[L1353]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1639]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][from_s393], tokens_s393);
[L1640]  COND FALSE  !(revert)
[L1646]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][from_s393];
[L1647]              balances_YearnFinanceBitToken[this][from_s393] := __var_4;
[L1648]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][from_s393];
[L1649]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1650]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG], tokens_s393);
[L1349]  COND FALSE  !(!(b_s112 <= a_s112))
[L1353]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1650]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG], tokens_s393);
[L1651]  COND FALSE  !(revert)
[L1657]              sum_allowed1[from_s393] := sum_allowed1[from_s393] - allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG];
[L1658]              allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] := __var_5;
[L1659]              sum_allowed1[from_s393] := sum_allowed1[from_s393] + allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG];
[L1660]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1661]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][to_s393], tokens_s393);
[L1331]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1332]  COND FALSE  !(!(c_s90 >= a_s90))
[L1661]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][to_s393], tokens_s393);
[L1662]  COND FALSE  !(revert)
[L1668]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][to_s393];
[L1669]              balances_YearnFinanceBitToken[this][to_s393] := __var_6;
[L1670]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][to_s393];
[L1671]              assert { :EventEmitted "Transfer_YearnFinanceBitToken" } true;
[L1672]              success_s393 := true;
[L730]   RET         call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L731]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((success_s393 == true && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] == old(allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG]) - tokens_s393) && _totalSupply_YearnFinanceBitToken[this] == old(_totalSupply_YearnFinanceBitToken[this])) && balances_YearnFinanceBitToken[this] == old(balances_YearnFinanceBitToken[this])) && allowed_YearnFinanceBitToken[this][p1][p2] == old(allowed_YearnFinanceBitToken[this][p1][p2])) && name_YearnFinanceBitToken[this] == old(name_YearnFinanceBitToken[this])) && symbol_YearnFinanceBitToken[this] == old(symbol_YearnFinanceBitToken[this])) && decimals_YearnFinanceBitToken[this] == old(decimals_YearnFinanceBitToken[this]));
[L3]                 revert := revert_hold;
[L2788]  RET         call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L2864]  RET         call CorralChoice_YearnFinanceBitToken(this);

[2020-11-25 09:29:56,116 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:29:56,116 INFO  L82        PathProgramCache]: Analyzing trace with hash -1257983762, now seen corresponding path program 1 times
[2020-11-25 09:29:56,117 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:29:56,182 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:29:56,726 INFO  L134       CoverageAnalysis]: Checked inductivity of 71 backedges. 2 proven. 64 refuted. 0 times theorem prover too weak. 5 trivial. 0 not checked.
[2020-11-25 09:29:56,726 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 09:29:56,726 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [30] total 30
[2020-11-25 09:29:56,726 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:29:56,727 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 30 interpolants.
[2020-11-25 09:29:56,727 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=86, Invalid=784, Unknown=0, NotChecked=0, Total=870
[2020-11-25 09:29:56,727 INFO  L87              Difference]: Start difference. First operand 1298 states and 1413 transitions. cyclomatic complexity: 120 Second operand 30 states.
[2020-11-25 09:29:58,938 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:29:58,938 INFO  L93              Difference]: Finished difference Result 1478 states and 1652 transitions.
[2020-11-25 09:29:58,938 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 31 states. 
[2020-11-25 09:29:58,938 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1478 states and 1652 transitions.
[2020-11-25 09:29:58,941 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 09:29:58,944 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1478 states to 1478 states and 1652 transitions.
[2020-11-25 09:29:58,944 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 520
[2020-11-25 09:29:58,945 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 520
[2020-11-25 09:29:58,945 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1478 states and 1652 transitions.
[2020-11-25 09:29:58,946 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:29:58,946 INFO  L728         BuchiCegarLoop]: Abstraction has 1478 states and 1652 transitions.
[2020-11-25 09:29:58,947 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1478 states and 1652 transitions.
[2020-11-25 09:29:58,954 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1478 to 1450.
[2020-11-25 09:29:58,954 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1450 states.
[2020-11-25 09:29:58,956 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1450 states to 1450 states and 1617 transitions.
[2020-11-25 09:29:58,956 INFO  L751         BuchiCegarLoop]: Abstraction has 1450 states and 1617 transitions.
[2020-11-25 09:29:58,956 INFO  L631         BuchiCegarLoop]: Abstraction has 1450 states and 1617 transitions.
[2020-11-25 09:29:58,956 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-11-25 09:29:58,956 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1450 states and 1617 transitions.
[2020-11-25 09:29:58,957 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 09:29:58,957 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:29:58,958 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:29:58,958 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:29:58,958 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_YearnFinanceBitToken0 := false;
[L3]                 call_transferFrom_YearnFinanceBitToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L2854]              assume null == 0;
[L2855]  CALL        call this := FreshRefGenerator__success();
[L1250]              havoc newRef;
[L1251]              assume Alloc[newRef] == false;
[L1252]              Alloc[newRef] := true;
[L1253]              assume newRef != null;
[L2855]  RET         call this := FreshRefGenerator__success();
[L2856]              assume now >= 0;
[L2857]              assume DType[this] == YearnFinanceBitToken;
[L2858]              assume msgvalue_MSG == 0;
[L2859]              gas := gas - 53000;
[L2860]  CALL        call YearnFinanceBitToken_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG);
[L399]               havoc __exception;
[L400]               revert := false;
[L401]   COND FALSE  !(__exception)
[L422]   CALL        call YearnFinanceBitToken_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1457]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1282]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1267]              assume msgsender_MSG != null;
[L1268]              Balance[this] := 0;
[L1282]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1283]  COND FALSE  !(revert)
[L1457]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1458]  COND FALSE  !(revert)
[L1461]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1314]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1299]              assume msgsender_MSG != null;
[L1300]              Balance[this] := 0;
[L1314]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1315]  COND FALSE  !(revert)
[L1461]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1462]  COND FALSE  !(revert)
[L1465]  CALL        call YearnFinanceBitToken_YearnFinanceBitToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1418]              assume msgsender_MSG != null;
[L1419]              Balance[this] := 0;
[L1420]              name_YearnFinanceBitToken[this] := 627147201;
[L1421]              symbol_YearnFinanceBitToken[this] := 627147201;
[L1422]              decimals_YearnFinanceBitToken[this] := 0;
[L1423]              _totalSupply_YearnFinanceBitToken[this] := 0;
[L1424]              balances_YearnFinanceBitToken[this] := zeroRefintArr();
[L1425]              sum_balances0[this] := 0;
[L1426]              allowed_YearnFinanceBitToken[this] := zeroRefRefintArr();
[L1427]              sum_allowed1[this] := 0;
[L1429]              name_YearnFinanceBitToken[this] := 1658284292;
[L1430]              symbol_YearnFinanceBitToken[this] := -1175268548;
[L1431]              decimals_YearnFinanceBitToken[this] := 18;
[L1432]              _totalSupply_YearnFinanceBitToken[this] := 7000000000000000000000;
[L1433]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1434]              balances_YearnFinanceBitToken[this][msgsender_MSG] := _totalSupply_YearnFinanceBitToken[this];
[L1435]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1436]              assert { :EventEmitted "Transfer_YearnFinanceBitToken" } true;
[L1465]  RET         call YearnFinanceBitToken_YearnFinanceBitToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1466]  COND FALSE  !(revert)
[L422]   RET         call YearnFinanceBitToken_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG);
[L423]               assume !revert && gas >= 0;
[L2860]  RET         call YearnFinanceBitToken_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG);
[L2861]              assume !revert && gas >= 0;
[L2864]  CALL        call CorralChoice_YearnFinanceBitToken(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != YearnFinanceBitToken;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND FALSE  !(choice == 11)
[L2776]  COND FALSE  !(choice == 10)
[L2783]  COND TRUE   choice == 9
[L2784]              gas := gas - 21000;
[L2785]  COND TRUE   gas >= 0
[L2786]              assume tokens_s393 >= 0 && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2787]              assume msgvalue_MSG == 0;
[L2788]  CALL        call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((p1 != from_s393 || p2 != msgsender_MSG) && from_s393 == to_s393) && tokens_s393 <= balances_YearnFinanceBitToken[this][from_s393]) && tokens_s393 <= allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG]) && tokens_s393 >= 0) && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][to_s393] >= 0) && balances_YearnFinanceBitToken[this][to_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][from_s393] >= 0) && balances_YearnFinanceBitToken[this][from_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] >= 0) && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3]                 revert := revert_hold;
[L707]               havoc __exception;
[L708]               revert := false;
[L709]   COND FALSE  !(__exception)
[L730]   CALL        call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L1638]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1639]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][from_s393], tokens_s393);
[L1349]  COND FALSE  !(!(b_s112 <= a_s112))
[L1353]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1639]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][from_s393], tokens_s393);
[L1640]  COND FALSE  !(revert)
[L1646]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][from_s393];
[L1647]              balances_YearnFinanceBitToken[this][from_s393] := __var_4;
[L1648]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][from_s393];
[L1649]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1650]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG], tokens_s393);
[L1349]  COND FALSE  !(!(b_s112 <= a_s112))
[L1353]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1650]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG], tokens_s393);
[L1651]  COND FALSE  !(revert)
[L1657]              sum_allowed1[from_s393] := sum_allowed1[from_s393] - allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG];
[L1658]              allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] := __var_5;
[L1659]              sum_allowed1[from_s393] := sum_allowed1[from_s393] + allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG];
[L1660]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1661]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][to_s393], tokens_s393);
[L1331]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1332]  COND FALSE  !(!(c_s90 >= a_s90))
[L1661]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][to_s393], tokens_s393);
[L1662]  COND FALSE  !(revert)
[L1668]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][to_s393];
[L1669]              balances_YearnFinanceBitToken[this][to_s393] := __var_6;
[L1670]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][to_s393];
[L1671]              assert { :EventEmitted "Transfer_YearnFinanceBitToken" } true;
[L1672]              success_s393 := true;
[L730]   RET         call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L731]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume ((((((success_s393 == true && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] == old(allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG]) - tokens_s393) && _totalSupply_YearnFinanceBitToken[this] == old(_totalSupply_YearnFinanceBitToken[this])) && balances_YearnFinanceBitToken[this] == old(balances_YearnFinanceBitToken[this])) && allowed_YearnFinanceBitToken[this][p1][p2] == old(allowed_YearnFinanceBitToken[this][p1][p2])) && name_YearnFinanceBitToken[this] == old(name_YearnFinanceBitToken[this])) && symbol_YearnFinanceBitToken[this] == old(symbol_YearnFinanceBitToken[this])) && decimals_YearnFinanceBitToken[this] == old(decimals_YearnFinanceBitToken[this]);
[L3]                 success_transferFrom_YearnFinanceBitToken0 := true;
[L3]                 success_transferFrom_YearnFinanceBitToken0 := false;
[L3]                 revert := revert_hold;
[L2788]  RET         call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L2864]  RET         call CorralChoice_YearnFinanceBitToken(this);
[L2864]  CALL        call CorralChoice_YearnFinanceBitToken(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != YearnFinanceBitToken;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND FALSE  !(choice == 11)
[L2776]  COND FALSE  !(choice == 10)
[L2783]  COND TRUE   choice == 9
[L2784]              gas := gas - 21000;
[L2785]  COND TRUE   gas >= 0
[L2786]              assume tokens_s393 >= 0 && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2787]              assume msgvalue_MSG == 0;
[L2788]  CALL        call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s393 || p2 != msgsender_MSG) && from_s393 == to_s393) && tokens_s393 <= balances_YearnFinanceBitToken[this][from_s393]) && tokens_s393 <= allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG]) && tokens_s393 >= 0) && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][to_s393] >= 0) && balances_YearnFinanceBitToken[this][to_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][from_s393] >= 0) && balances_YearnFinanceBitToken[this][from_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] >= 0) && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_YearnFinanceBitToken0 := true;
[L3]                 call_transferFrom_YearnFinanceBitToken0 := false;
[L3]                 revert := revert_hold;
[L707]               havoc __exception;
[L708]               revert := false;
[L709]   COND FALSE  !(__exception)
[L730]   CALL        call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L1638]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1639]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][from_s393], tokens_s393);
[L1349]  COND FALSE  !(!(b_s112 <= a_s112))
[L1353]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1639]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][from_s393], tokens_s393);
[L1640]  COND FALSE  !(revert)
[L1646]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][from_s393];
[L1647]              balances_YearnFinanceBitToken[this][from_s393] := __var_4;
[L1648]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][from_s393];
[L1649]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1650]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG], tokens_s393);
[L1349]  COND FALSE  !(!(b_s112 <= a_s112))
[L1353]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1650]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG], tokens_s393);
[L1651]  COND FALSE  !(revert)
[L1657]              sum_allowed1[from_s393] := sum_allowed1[from_s393] - allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG];
[L1658]              allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] := __var_5;
[L1659]              sum_allowed1[from_s393] := sum_allowed1[from_s393] + allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG];
[L1660]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1661]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][to_s393], tokens_s393);
[L1331]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1332]  COND FALSE  !(!(c_s90 >= a_s90))
[L1661]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][to_s393], tokens_s393);
[L1662]  COND FALSE  !(revert)
[L1668]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][to_s393];
[L1669]              balances_YearnFinanceBitToken[this][to_s393] := __var_6;
[L1670]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][to_s393];
[L1671]              assert { :EventEmitted "Transfer_YearnFinanceBitToken" } true;
[L1672]              success_s393 := true;
[L730]   RET         call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L731]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((success_s393 == true && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] == old(allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG]) - tokens_s393) && _totalSupply_YearnFinanceBitToken[this] == old(_totalSupply_YearnFinanceBitToken[this])) && balances_YearnFinanceBitToken[this] == old(balances_YearnFinanceBitToken[this])) && allowed_YearnFinanceBitToken[this][p1][p2] == old(allowed_YearnFinanceBitToken[this][p1][p2])) && name_YearnFinanceBitToken[this] == old(name_YearnFinanceBitToken[this])) && symbol_YearnFinanceBitToken[this] == old(symbol_YearnFinanceBitToken[this])) && decimals_YearnFinanceBitToken[this] == old(decimals_YearnFinanceBitToken[this]));
[L3]                 revert := revert_hold;
[L2788]  RET         call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L2864]  RET         call CorralChoice_YearnFinanceBitToken(this);

Loop:
[L2864]  CALL        call CorralChoice_YearnFinanceBitToken(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != YearnFinanceBitToken;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND TRUE   choice == 14
[L2752]              gas := gas - 21000;
[L2753]  COND FALSE  !(gas >= 0)
[L2864]  RET         call CorralChoice_YearnFinanceBitToken(this);

[2020-11-25 09:29:58,961 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:29:58,961 INFO  L82        PathProgramCache]: Analyzing trace with hash -629326767, now seen corresponding path program 1 times
[2020-11-25 09:29:58,961 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:29:59,012 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:29:59,830 INFO  L134       CoverageAnalysis]: Checked inductivity of 71 backedges. 8 proven. 2 refuted. 0 times theorem prover too weak. 61 trivial. 0 not checked.
[2020-11-25 09:29:59,830 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 09:29:59,830 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [35] total 35
[2020-11-25 09:29:59,831 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:29:59,831 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 36 interpolants.
[2020-11-25 09:29:59,831 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=95, Invalid=1165, Unknown=0, NotChecked=0, Total=1260
[2020-11-25 09:29:59,831 INFO  L87              Difference]: Start difference. First operand 1450 states and 1617 transitions. cyclomatic complexity: 174 Second operand 36 states.
[2020-11-25 09:30:04,388 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:30:04,388 INFO  L93              Difference]: Finished difference Result 1635 states and 1868 transitions.
[2020-11-25 09:30:04,388 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 35 states. 
[2020-11-25 09:30:04,389 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1635 states and 1868 transitions.
[2020-11-25 09:30:04,392 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 09:30:04,395 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1635 states to 1635 states and 1868 transitions.
[2020-11-25 09:30:04,395 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 607
[2020-11-25 09:30:04,396 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 607
[2020-11-25 09:30:04,396 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1635 states and 1868 transitions.
[2020-11-25 09:30:04,397 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:30:04,397 INFO  L728         BuchiCegarLoop]: Abstraction has 1635 states and 1868 transitions.
[2020-11-25 09:30:04,398 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1635 states and 1868 transitions.
[2020-11-25 09:30:04,405 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1635 to 1452.
[2020-11-25 09:30:04,405 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1452 states.
[2020-11-25 09:30:04,406 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1452 states to 1452 states and 1624 transitions.
[2020-11-25 09:30:04,406 INFO  L751         BuchiCegarLoop]: Abstraction has 1452 states and 1624 transitions.
[2020-11-25 09:30:04,406 INFO  L631         BuchiCegarLoop]: Abstraction has 1452 states and 1624 transitions.
[2020-11-25 09:30:04,406 INFO  L445         BuchiCegarLoop]: ======== Iteration 13============
[2020-11-25 09:30:04,406 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1452 states and 1624 transitions.
[2020-11-25 09:30:04,408 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 09:30:04,408 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:30:04,408 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:30:04,409 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:30:04,409 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_YearnFinanceBitToken0 := false;
[L3]                 call_transferFrom_YearnFinanceBitToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L2854]              assume null == 0;
[L2855]  CALL        call this := FreshRefGenerator__success();
[L1250]              havoc newRef;
[L1251]              assume Alloc[newRef] == false;
[L1252]              Alloc[newRef] := true;
[L1253]              assume newRef != null;
[L2855]  RET         call this := FreshRefGenerator__success();
[L2856]              assume now >= 0;
[L2857]              assume DType[this] == YearnFinanceBitToken;
[L2858]              assume msgvalue_MSG == 0;
[L2859]              gas := gas - 53000;
[L2860]  CALL        call YearnFinanceBitToken_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG);
[L399]               havoc __exception;
[L400]               revert := false;
[L401]   COND FALSE  !(__exception)
[L422]   CALL        call YearnFinanceBitToken_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1457]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1282]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1267]              assume msgsender_MSG != null;
[L1268]              Balance[this] := 0;
[L1282]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1283]  COND FALSE  !(revert)
[L1457]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1458]  COND FALSE  !(revert)
[L1461]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1314]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1299]              assume msgsender_MSG != null;
[L1300]              Balance[this] := 0;
[L1314]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1315]  COND FALSE  !(revert)
[L1461]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1462]  COND FALSE  !(revert)
[L1465]  CALL        call YearnFinanceBitToken_YearnFinanceBitToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1418]              assume msgsender_MSG != null;
[L1419]              Balance[this] := 0;
[L1420]              name_YearnFinanceBitToken[this] := 627147201;
[L1421]              symbol_YearnFinanceBitToken[this] := 627147201;
[L1422]              decimals_YearnFinanceBitToken[this] := 0;
[L1423]              _totalSupply_YearnFinanceBitToken[this] := 0;
[L1424]              balances_YearnFinanceBitToken[this] := zeroRefintArr();
[L1425]              sum_balances0[this] := 0;
[L1426]              allowed_YearnFinanceBitToken[this] := zeroRefRefintArr();
[L1427]              sum_allowed1[this] := 0;
[L1429]              name_YearnFinanceBitToken[this] := 1658284292;
[L1430]              symbol_YearnFinanceBitToken[this] := -1175268548;
[L1431]              decimals_YearnFinanceBitToken[this] := 18;
[L1432]              _totalSupply_YearnFinanceBitToken[this] := 7000000000000000000000;
[L1433]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1434]              balances_YearnFinanceBitToken[this][msgsender_MSG] := _totalSupply_YearnFinanceBitToken[this];
[L1435]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1436]              assert { :EventEmitted "Transfer_YearnFinanceBitToken" } true;
[L1465]  RET         call YearnFinanceBitToken_YearnFinanceBitToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1466]  COND FALSE  !(revert)
[L422]   RET         call YearnFinanceBitToken_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG);
[L423]               assume !revert && gas >= 0;
[L2860]  RET         call YearnFinanceBitToken_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG);
[L2861]              assume !revert && gas >= 0;
[L2864]  CALL        call CorralChoice_YearnFinanceBitToken(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != YearnFinanceBitToken;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND FALSE  !(choice == 11)
[L2776]  COND TRUE   choice == 10
[L2777]              gas := gas - 21000;
[L2778]  COND TRUE   gas >= 0
[L2779]              assume tokens_s291 >= 0 && tokens_s291 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2780]              assume msgvalue_MSG == 0;
[L2781]  CALL        call success_s291 := approve~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, spender_s291, tokens_s291);
[L601]               havoc __exception;
[L602]               revert := false;
[L603]   COND FALSE  !(__exception)
[L624]   CALL        call success_s291 := approve~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, spender_s291, tokens_s291);
[L1522]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_YearnFinanceBitToken[this][msgsender_MSG][spender_s291];
[L1523]              allowed_YearnFinanceBitToken[this][msgsender_MSG][spender_s291] := tokens_s291;
[L1524]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_YearnFinanceBitToken[this][msgsender_MSG][spender_s291];
[L1525]              assert { :EventEmitted "Approval_YearnFinanceBitToken" } true;
[L1526]              success_s291 := true;
[L624]   RET         call success_s291 := approve~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, spender_s291, tokens_s291);
[L625]               assume !revert && gas >= 0;
[L2781]  RET         call success_s291 := approve~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, spender_s291, tokens_s291);
[L2864]  RET         call CorralChoice_YearnFinanceBitToken(this);
[L2864]  CALL        call CorralChoice_YearnFinanceBitToken(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != YearnFinanceBitToken;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND FALSE  !(choice == 11)
[L2776]  COND TRUE   choice == 10
[L2777]              gas := gas - 21000;
[L2778]  COND TRUE   gas >= 0
[L2779]              assume tokens_s291 >= 0 && tokens_s291 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2780]              assume msgvalue_MSG == 0;
[L2781]  CALL        call success_s291 := approve~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, spender_s291, tokens_s291);
[L601]               havoc __exception;
[L602]               revert := false;
[L603]   COND FALSE  !(__exception)
[L624]   CALL        call success_s291 := approve~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, spender_s291, tokens_s291);
[L1522]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_YearnFinanceBitToken[this][msgsender_MSG][spender_s291];
[L1523]              allowed_YearnFinanceBitToken[this][msgsender_MSG][spender_s291] := tokens_s291;
[L1524]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_YearnFinanceBitToken[this][msgsender_MSG][spender_s291];
[L1525]              assert { :EventEmitted "Approval_YearnFinanceBitToken" } true;
[L1526]              success_s291 := true;
[L624]   RET         call success_s291 := approve~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, spender_s291, tokens_s291);
[L625]               assume !revert && gas >= 0;
[L2781]  RET         call success_s291 := approve~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, spender_s291, tokens_s291);
[L2864]  RET         call CorralChoice_YearnFinanceBitToken(this);
[L2864]  CALL        call CorralChoice_YearnFinanceBitToken(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != YearnFinanceBitToken;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND FALSE  !(choice == 11)
[L2776]  COND FALSE  !(choice == 10)
[L2783]  COND TRUE   choice == 9
[L2784]              gas := gas - 21000;
[L2785]  COND TRUE   gas >= 0
[L2786]              assume tokens_s393 >= 0 && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2787]              assume msgvalue_MSG == 0;
[L2788]  CALL        call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s393 || p2 != msgsender_MSG) && from_s393 == to_s393) && tokens_s393 <= balances_YearnFinanceBitToken[this][from_s393]) && tokens_s393 <= allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG]) && tokens_s393 >= 0) && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][to_s393] >= 0) && balances_YearnFinanceBitToken[this][to_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][from_s393] >= 0) && balances_YearnFinanceBitToken[this][from_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] >= 0) && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_YearnFinanceBitToken0 := true;
[L3]                 call_transferFrom_YearnFinanceBitToken0 := false;
[L3]                 revert := revert_hold;
[L707]               havoc __exception;
[L708]               revert := false;
[L709]   COND FALSE  !(__exception)
[L730]   CALL        call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L1638]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1639]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][from_s393], tokens_s393);
[L1349]  COND FALSE  !(!(b_s112 <= a_s112))
[L1353]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1639]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][from_s393], tokens_s393);
[L1640]  COND FALSE  !(revert)
[L1646]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][from_s393];
[L1647]              balances_YearnFinanceBitToken[this][from_s393] := __var_4;
[L1648]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][from_s393];
[L1649]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1650]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG], tokens_s393);
[L1349]  COND FALSE  !(!(b_s112 <= a_s112))
[L1353]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1650]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG], tokens_s393);
[L1651]  COND FALSE  !(revert)
[L1657]              sum_allowed1[from_s393] := sum_allowed1[from_s393] - allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG];
[L1658]              allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] := __var_5;
[L1659]              sum_allowed1[from_s393] := sum_allowed1[from_s393] + allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG];
[L1660]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1661]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][to_s393], tokens_s393);
[L1331]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1332]  COND FALSE  !(!(c_s90 >= a_s90))
[L1661]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][to_s393], tokens_s393);
[L1662]  COND FALSE  !(revert)
[L1668]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][to_s393];
[L1669]              balances_YearnFinanceBitToken[this][to_s393] := __var_6;
[L1670]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][to_s393];
[L1671]              assert { :EventEmitted "Transfer_YearnFinanceBitToken" } true;
[L1672]              success_s393 := true;
[L730]   RET         call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L731]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((success_s393 == true && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] == old(allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG]) - tokens_s393) && _totalSupply_YearnFinanceBitToken[this] == old(_totalSupply_YearnFinanceBitToken[this])) && balances_YearnFinanceBitToken[this] == old(balances_YearnFinanceBitToken[this])) && allowed_YearnFinanceBitToken[this][p1][p2] == old(allowed_YearnFinanceBitToken[this][p1][p2])) && name_YearnFinanceBitToken[this] == old(name_YearnFinanceBitToken[this])) && symbol_YearnFinanceBitToken[this] == old(symbol_YearnFinanceBitToken[this])) && decimals_YearnFinanceBitToken[this] == old(decimals_YearnFinanceBitToken[this]));
[L3]                 revert := revert_hold;
[L2788]  RET         call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L2864]  RET         call CorralChoice_YearnFinanceBitToken(this);

Loop:
[L2864]  CALL        call CorralChoice_YearnFinanceBitToken(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != YearnFinanceBitToken;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND FALSE  !(choice == 11)
[L2776]  COND TRUE   choice == 10
[L2777]              gas := gas - 21000;
[L2778]  COND TRUE   gas >= 0
[L2779]              assume tokens_s291 >= 0 && tokens_s291 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2780]              assume msgvalue_MSG == 0;
[L2781]  CALL        call success_s291 := approve~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, spender_s291, tokens_s291);
[L601]               havoc __exception;
[L602]               revert := false;
[L603]   COND FALSE  !(__exception)
[L624]   CALL        call success_s291 := approve~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, spender_s291, tokens_s291);
[L1522]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_YearnFinanceBitToken[this][msgsender_MSG][spender_s291];
[L1523]              allowed_YearnFinanceBitToken[this][msgsender_MSG][spender_s291] := tokens_s291;
[L1524]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_YearnFinanceBitToken[this][msgsender_MSG][spender_s291];
[L1525]              assert { :EventEmitted "Approval_YearnFinanceBitToken" } true;
[L1526]              success_s291 := true;
[L624]   RET         call success_s291 := approve~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, spender_s291, tokens_s291);
[L625]               assume !revert && gas >= 0;
[L2781]  RET         call success_s291 := approve~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, spender_s291, tokens_s291);
[L2864]  RET         call CorralChoice_YearnFinanceBitToken(this);

[2020-11-25 09:30:04,412 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:30:04,412 INFO  L82        PathProgramCache]: Analyzing trace with hash -653260530, now seen corresponding path program 2 times
[2020-11-25 09:30:04,412 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:30:04,447 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:30:05,239 INFO  L134       CoverageAnalysis]: Checked inductivity of 189 backedges. 0 proven. 3 refuted. 0 times theorem prover too weak. 186 trivial. 0 not checked.
[2020-11-25 09:30:05,239 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 09:30:05,240 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [30] total 30
[2020-11-25 09:30:05,240 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:30:05,240 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 31 interpolants.
[2020-11-25 09:30:05,240 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=72, Invalid=858, Unknown=0, NotChecked=0, Total=930
[2020-11-25 09:30:05,240 INFO  L87              Difference]: Start difference. First operand 1452 states and 1624 transitions. cyclomatic complexity: 180 Second operand 31 states.
[2020-11-25 09:30:09,495 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:30:09,495 INFO  L93              Difference]: Finished difference Result 1469 states and 1648 transitions.
[2020-11-25 09:30:09,496 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 30 states. 
[2020-11-25 09:30:09,496 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1469 states and 1648 transitions.
[2020-11-25 09:30:09,498 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 09:30:09,502 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1469 states to 1469 states and 1648 transitions.
[2020-11-25 09:30:09,502 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 509
[2020-11-25 09:30:09,502 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 509
[2020-11-25 09:30:09,502 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1469 states and 1648 transitions.
[2020-11-25 09:30:09,503 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:30:09,503 INFO  L728         BuchiCegarLoop]: Abstraction has 1469 states and 1648 transitions.
[2020-11-25 09:30:09,504 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1469 states and 1648 transitions.
[2020-11-25 09:30:09,513 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1469 to 1452.
[2020-11-25 09:30:09,513 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1452 states.
[2020-11-25 09:30:09,516 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1452 states to 1452 states and 1624 transitions.
[2020-11-25 09:30:09,516 INFO  L751         BuchiCegarLoop]: Abstraction has 1452 states and 1624 transitions.
[2020-11-25 09:30:09,516 INFO  L631         BuchiCegarLoop]: Abstraction has 1452 states and 1624 transitions.
[2020-11-25 09:30:09,516 INFO  L445         BuchiCegarLoop]: ======== Iteration 14============
[2020-11-25 09:30:09,516 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1452 states and 1624 transitions.
[2020-11-25 09:30:09,519 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 09:30:09,519 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:30:09,519 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:30:09,520 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:30:09,520 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_YearnFinanceBitToken0 := false;
[L3]                 call_transferFrom_YearnFinanceBitToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L2854]              assume null == 0;
[L2855]  CALL        call this := FreshRefGenerator__success();
[L1250]              havoc newRef;
[L1251]              assume Alloc[newRef] == false;
[L1252]              Alloc[newRef] := true;
[L1253]              assume newRef != null;
[L2855]  RET         call this := FreshRefGenerator__success();
[L2856]              assume now >= 0;
[L2857]              assume DType[this] == YearnFinanceBitToken;
[L2858]              assume msgvalue_MSG == 0;
[L2859]              gas := gas - 53000;
[L2860]  CALL        call YearnFinanceBitToken_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG);
[L399]               havoc __exception;
[L400]               revert := false;
[L401]   COND FALSE  !(__exception)
[L422]   CALL        call YearnFinanceBitToken_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1457]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1282]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1267]              assume msgsender_MSG != null;
[L1268]              Balance[this] := 0;
[L1282]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1283]  COND FALSE  !(revert)
[L1457]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1458]  COND FALSE  !(revert)
[L1461]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1314]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1299]              assume msgsender_MSG != null;
[L1300]              Balance[this] := 0;
[L1314]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1315]  COND FALSE  !(revert)
[L1461]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1462]  COND FALSE  !(revert)
[L1465]  CALL        call YearnFinanceBitToken_YearnFinanceBitToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1418]              assume msgsender_MSG != null;
[L1419]              Balance[this] := 0;
[L1420]              name_YearnFinanceBitToken[this] := 627147201;
[L1421]              symbol_YearnFinanceBitToken[this] := 627147201;
[L1422]              decimals_YearnFinanceBitToken[this] := 0;
[L1423]              _totalSupply_YearnFinanceBitToken[this] := 0;
[L1424]              balances_YearnFinanceBitToken[this] := zeroRefintArr();
[L1425]              sum_balances0[this] := 0;
[L1426]              allowed_YearnFinanceBitToken[this] := zeroRefRefintArr();
[L1427]              sum_allowed1[this] := 0;
[L1429]              name_YearnFinanceBitToken[this] := 1658284292;
[L1430]              symbol_YearnFinanceBitToken[this] := -1175268548;
[L1431]              decimals_YearnFinanceBitToken[this] := 18;
[L1432]              _totalSupply_YearnFinanceBitToken[this] := 7000000000000000000000;
[L1433]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1434]              balances_YearnFinanceBitToken[this][msgsender_MSG] := _totalSupply_YearnFinanceBitToken[this];
[L1435]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1436]              assert { :EventEmitted "Transfer_YearnFinanceBitToken" } true;
[L1465]  RET         call YearnFinanceBitToken_YearnFinanceBitToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1466]  COND FALSE  !(revert)
[L422]   RET         call YearnFinanceBitToken_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG);
[L423]               assume !revert && gas >= 0;
[L2860]  RET         call YearnFinanceBitToken_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG);
[L2861]              assume !revert && gas >= 0;
[L2864]  CALL        call CorralChoice_YearnFinanceBitToken(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != YearnFinanceBitToken;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND FALSE  !(choice == 11)
[L2776]  COND TRUE   choice == 10
[L2777]              gas := gas - 21000;
[L2778]  COND TRUE   gas >= 0
[L2779]              assume tokens_s291 >= 0 && tokens_s291 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2780]              assume msgvalue_MSG == 0;
[L2781]  CALL        call success_s291 := approve~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, spender_s291, tokens_s291);
[L601]               havoc __exception;
[L602]               revert := false;
[L603]   COND FALSE  !(__exception)
[L624]   CALL        call success_s291 := approve~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, spender_s291, tokens_s291);
[L1522]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_YearnFinanceBitToken[this][msgsender_MSG][spender_s291];
[L1523]              allowed_YearnFinanceBitToken[this][msgsender_MSG][spender_s291] := tokens_s291;
[L1524]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_YearnFinanceBitToken[this][msgsender_MSG][spender_s291];
[L1525]              assert { :EventEmitted "Approval_YearnFinanceBitToken" } true;
[L1526]              success_s291 := true;
[L624]   RET         call success_s291 := approve~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, spender_s291, tokens_s291);
[L625]               assume !revert && gas >= 0;
[L2781]  RET         call success_s291 := approve~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, spender_s291, tokens_s291);
[L2864]  RET         call CorralChoice_YearnFinanceBitToken(this);
[L2864]  CALL        call CorralChoice_YearnFinanceBitToken(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != YearnFinanceBitToken;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND TRUE   choice == 11
[L2770]              gas := gas - 21000;
[L2771]  COND TRUE   gas >= 0
[L2772]              assume tokens_s334 >= 0 && tokens_s334 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2773]              assume msgvalue_MSG == 0;
[L2774]  CALL        call success_s334 := transfer~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L653]               havoc __exception;
[L654]               revert := false;
[L655]   COND FALSE  !(__exception)
[L676]   CALL        call success_s334 := transfer~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L1564]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1565]  CALL        call __var_2 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][msgsender_MSG], tokens_s334);
[L1349]  COND FALSE  !(!(b_s112 <= a_s112))
[L1353]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1565]  RET         call __var_2 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][msgsender_MSG], tokens_s334);
[L1566]  COND FALSE  !(revert)
[L1572]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1573]              balances_YearnFinanceBitToken[this][msgsender_MSG] := __var_2;
[L1574]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1575]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1576]  CALL        call __var_3 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][to_s334], tokens_s334);
[L1331]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1332]  COND FALSE  !(!(c_s90 >= a_s90))
[L1576]  RET         call __var_3 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][to_s334], tokens_s334);
[L1577]  COND FALSE  !(revert)
[L1583]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][to_s334];
[L1584]              balances_YearnFinanceBitToken[this][to_s334] := __var_3;
[L1585]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][to_s334];
[L1586]              assert { :EventEmitted "Transfer_YearnFinanceBitToken" } true;
[L1587]              success_s334 := true;
[L676]   RET         call success_s334 := transfer~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L677]               assume !revert && gas >= 0;
[L2774]  RET         call success_s334 := transfer~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L2864]  RET         call CorralChoice_YearnFinanceBitToken(this);
[L2864]  CALL        call CorralChoice_YearnFinanceBitToken(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != YearnFinanceBitToken;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND FALSE  !(choice == 11)
[L2776]  COND FALSE  !(choice == 10)
[L2783]  COND TRUE   choice == 9
[L2784]              gas := gas - 21000;
[L2785]  COND TRUE   gas >= 0
[L2786]              assume tokens_s393 >= 0 && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2787]              assume msgvalue_MSG == 0;
[L2788]  CALL        call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s393 || p2 != msgsender_MSG) && from_s393 == to_s393) && tokens_s393 <= balances_YearnFinanceBitToken[this][from_s393]) && tokens_s393 <= allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG]) && tokens_s393 >= 0) && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][to_s393] >= 0) && balances_YearnFinanceBitToken[this][to_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][from_s393] >= 0) && balances_YearnFinanceBitToken[this][from_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] >= 0) && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_YearnFinanceBitToken0 := true;
[L3]                 call_transferFrom_YearnFinanceBitToken0 := false;
[L3]                 revert := revert_hold;
[L707]               havoc __exception;
[L708]               revert := false;
[L709]   COND FALSE  !(__exception)
[L730]   CALL        call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L1638]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1639]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][from_s393], tokens_s393);
[L1349]  COND FALSE  !(!(b_s112 <= a_s112))
[L1353]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1639]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][from_s393], tokens_s393);
[L1640]  COND FALSE  !(revert)
[L1646]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][from_s393];
[L1647]              balances_YearnFinanceBitToken[this][from_s393] := __var_4;
[L1648]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][from_s393];
[L1649]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1650]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG], tokens_s393);
[L1349]  COND FALSE  !(!(b_s112 <= a_s112))
[L1353]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1650]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG], tokens_s393);
[L1651]  COND FALSE  !(revert)
[L1657]              sum_allowed1[from_s393] := sum_allowed1[from_s393] - allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG];
[L1658]              allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] := __var_5;
[L1659]              sum_allowed1[from_s393] := sum_allowed1[from_s393] + allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG];
[L1660]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1661]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][to_s393], tokens_s393);
[L1331]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1332]  COND FALSE  !(!(c_s90 >= a_s90))
[L1661]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][to_s393], tokens_s393);
[L1662]  COND FALSE  !(revert)
[L1668]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][to_s393];
[L1669]              balances_YearnFinanceBitToken[this][to_s393] := __var_6;
[L1670]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][to_s393];
[L1671]              assert { :EventEmitted "Transfer_YearnFinanceBitToken" } true;
[L1672]              success_s393 := true;
[L730]   RET         call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L731]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((success_s393 == true && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] == old(allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG]) - tokens_s393) && _totalSupply_YearnFinanceBitToken[this] == old(_totalSupply_YearnFinanceBitToken[this])) && balances_YearnFinanceBitToken[this] == old(balances_YearnFinanceBitToken[this])) && allowed_YearnFinanceBitToken[this][p1][p2] == old(allowed_YearnFinanceBitToken[this][p1][p2])) && name_YearnFinanceBitToken[this] == old(name_YearnFinanceBitToken[this])) && symbol_YearnFinanceBitToken[this] == old(symbol_YearnFinanceBitToken[this])) && decimals_YearnFinanceBitToken[this] == old(decimals_YearnFinanceBitToken[this]));
[L3]                 revert := revert_hold;
[L2788]  RET         call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L2864]  RET         call CorralChoice_YearnFinanceBitToken(this);

Loop:
[L2864]  CALL        call CorralChoice_YearnFinanceBitToken(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != YearnFinanceBitToken;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND TRUE   choice == 14
[L2752]              gas := gas - 21000;
[L2753]  COND FALSE  !(gas >= 0)
[L2864]  RET         call CorralChoice_YearnFinanceBitToken(this);

[2020-11-25 09:30:09,523 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:30:09,523 INFO  L82        PathProgramCache]: Analyzing trace with hash 1068241064, now seen corresponding path program 1 times
[2020-11-25 09:30:09,523 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:30:09,625 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:30:10,757 WARN  L188               SmtUtils]: Spent 108.00 ms on a formula simplification. DAG size of input: 183 DAG size of output: 40
[2020-11-25 09:30:11,693 WARN  L188               SmtUtils]: Spent 107.00 ms on a formula simplification. DAG size of input: 111 DAG size of output: 62
[2020-11-25 09:30:12,034 WARN  L188               SmtUtils]: Spent 211.00 ms on a formula simplification. DAG size of input: 116 DAG size of output: 65
[2020-11-25 09:30:12,395 WARN  L188               SmtUtils]: Spent 216.00 ms on a formula simplification. DAG size of input: 117 DAG size of output: 66
[2020-11-25 09:30:12,830 WARN  L188               SmtUtils]: Spent 273.00 ms on a formula simplification. DAG size of input: 140 DAG size of output: 84
[2020-11-25 09:30:13,280 WARN  L188               SmtUtils]: Spent 297.00 ms on a formula simplification. DAG size of input: 131 DAG size of output: 80
[2020-11-25 09:30:13,709 WARN  L188               SmtUtils]: Spent 232.00 ms on a formula simplification. DAG size of input: 156 DAG size of output: 100
[2020-11-25 09:30:14,107 WARN  L188               SmtUtils]: Spent 242.00 ms on a formula simplification. DAG size of input: 154 DAG size of output: 100
[2020-11-25 09:30:14,399 WARN  L188               SmtUtils]: Spent 137.00 ms on a formula simplification. DAG size of input: 140 DAG size of output: 79
[2020-11-25 09:30:16,926 INFO  L134       CoverageAnalysis]: Checked inductivity of 164 backedges. 0 proven. 8 refuted. 0 times theorem prover too weak. 156 trivial. 0 not checked.
[2020-11-25 09:30:16,926 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 09:30:16,926 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [46] total 46
[2020-11-25 09:30:16,927 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:30:16,927 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 47 interpolants.
[2020-11-25 09:30:16,927 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=120, Invalid=2042, Unknown=0, NotChecked=0, Total=2162
[2020-11-25 09:30:16,927 INFO  L87              Difference]: Start difference. First operand 1452 states and 1624 transitions. cyclomatic complexity: 180 Second operand 47 states.
[2020-11-25 09:30:23,509 WARN  L188               SmtUtils]: Spent 307.00 ms on a formula simplification. DAG size of input: 125 DAG size of output: 102
[2020-11-25 09:30:23,834 WARN  L188               SmtUtils]: Spent 160.00 ms on a formula simplification. DAG size of input: 121 DAG size of output: 106
[2020-11-25 09:30:24,094 WARN  L188               SmtUtils]: Spent 158.00 ms on a formula simplification. DAG size of input: 113 DAG size of output: 106
[2020-11-25 09:30:24,288 WARN  L188               SmtUtils]: Spent 141.00 ms on a formula simplification. DAG size of input: 114 DAG size of output: 105
[2020-11-25 09:30:29,860 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:30:29,860 INFO  L93              Difference]: Finished difference Result 1485 states and 1688 transitions.
[2020-11-25 09:30:29,860 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 43 states. 
[2020-11-25 09:30:29,860 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1485 states and 1688 transitions.
[2020-11-25 09:30:29,863 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 09:30:29,866 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1485 states to 1485 states and 1688 transitions.
[2020-11-25 09:30:29,866 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 517
[2020-11-25 09:30:29,866 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 517
[2020-11-25 09:30:29,866 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1485 states and 1688 transitions.
[2020-11-25 09:30:29,867 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:30:29,868 INFO  L728         BuchiCegarLoop]: Abstraction has 1485 states and 1688 transitions.
[2020-11-25 09:30:29,869 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1485 states and 1688 transitions.
[2020-11-25 09:30:29,875 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1485 to 1460.
[2020-11-25 09:30:29,875 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1460 states.
[2020-11-25 09:30:29,877 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1460 states to 1460 states and 1652 transitions.
[2020-11-25 09:30:29,877 INFO  L751         BuchiCegarLoop]: Abstraction has 1460 states and 1652 transitions.
[2020-11-25 09:30:29,877 INFO  L631         BuchiCegarLoop]: Abstraction has 1460 states and 1652 transitions.
[2020-11-25 09:30:29,877 INFO  L445         BuchiCegarLoop]: ======== Iteration 15============
[2020-11-25 09:30:29,877 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1460 states and 1652 transitions.
[2020-11-25 09:30:29,878 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 09:30:29,878 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:30:29,878 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:30:29,879 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:30:29,879 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_YearnFinanceBitToken0 := false;
[L3]                 call_transferFrom_YearnFinanceBitToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L2854]              assume null == 0;
[L2855]  CALL        call this := FreshRefGenerator__success();
[L1250]              havoc newRef;
[L1251]              assume Alloc[newRef] == false;
[L1252]              Alloc[newRef] := true;
[L1253]              assume newRef != null;
[L2855]  RET         call this := FreshRefGenerator__success();
[L2856]              assume now >= 0;
[L2857]              assume DType[this] == YearnFinanceBitToken;
[L2858]              assume msgvalue_MSG == 0;
[L2859]              gas := gas - 53000;
[L2860]  CALL        call YearnFinanceBitToken_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG);
[L399]               havoc __exception;
[L400]               revert := false;
[L401]   COND FALSE  !(__exception)
[L422]   CALL        call YearnFinanceBitToken_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1457]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1282]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1267]              assume msgsender_MSG != null;
[L1268]              Balance[this] := 0;
[L1282]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1283]  COND FALSE  !(revert)
[L1457]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1458]  COND FALSE  !(revert)
[L1461]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1314]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1299]              assume msgsender_MSG != null;
[L1300]              Balance[this] := 0;
[L1314]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1315]  COND FALSE  !(revert)
[L1461]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1462]  COND FALSE  !(revert)
[L1465]  CALL        call YearnFinanceBitToken_YearnFinanceBitToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1418]              assume msgsender_MSG != null;
[L1419]              Balance[this] := 0;
[L1420]              name_YearnFinanceBitToken[this] := 627147201;
[L1421]              symbol_YearnFinanceBitToken[this] := 627147201;
[L1422]              decimals_YearnFinanceBitToken[this] := 0;
[L1423]              _totalSupply_YearnFinanceBitToken[this] := 0;
[L1424]              balances_YearnFinanceBitToken[this] := zeroRefintArr();
[L1425]              sum_balances0[this] := 0;
[L1426]              allowed_YearnFinanceBitToken[this] := zeroRefRefintArr();
[L1427]              sum_allowed1[this] := 0;
[L1429]              name_YearnFinanceBitToken[this] := 1658284292;
[L1430]              symbol_YearnFinanceBitToken[this] := -1175268548;
[L1431]              decimals_YearnFinanceBitToken[this] := 18;
[L1432]              _totalSupply_YearnFinanceBitToken[this] := 7000000000000000000000;
[L1433]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1434]              balances_YearnFinanceBitToken[this][msgsender_MSG] := _totalSupply_YearnFinanceBitToken[this];
[L1435]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1436]              assert { :EventEmitted "Transfer_YearnFinanceBitToken" } true;
[L1465]  RET         call YearnFinanceBitToken_YearnFinanceBitToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1466]  COND FALSE  !(revert)
[L422]   RET         call YearnFinanceBitToken_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG);
[L423]               assume !revert && gas >= 0;
[L2860]  RET         call YearnFinanceBitToken_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG);
[L2861]              assume !revert && gas >= 0;
[L2864]  CALL        call CorralChoice_YearnFinanceBitToken(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != YearnFinanceBitToken;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND FALSE  !(choice == 11)
[L2776]  COND TRUE   choice == 10
[L2777]              gas := gas - 21000;
[L2778]  COND TRUE   gas >= 0
[L2779]              assume tokens_s291 >= 0 && tokens_s291 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2780]              assume msgvalue_MSG == 0;
[L2781]  CALL        call success_s291 := approve~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, spender_s291, tokens_s291);
[L601]               havoc __exception;
[L602]               revert := false;
[L603]   COND FALSE  !(__exception)
[L624]   CALL        call success_s291 := approve~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, spender_s291, tokens_s291);
[L1522]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_YearnFinanceBitToken[this][msgsender_MSG][spender_s291];
[L1523]              allowed_YearnFinanceBitToken[this][msgsender_MSG][spender_s291] := tokens_s291;
[L1524]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_YearnFinanceBitToken[this][msgsender_MSG][spender_s291];
[L1525]              assert { :EventEmitted "Approval_YearnFinanceBitToken" } true;
[L1526]              success_s291 := true;
[L624]   RET         call success_s291 := approve~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, spender_s291, tokens_s291);
[L625]               assume !revert && gas >= 0;
[L2781]  RET         call success_s291 := approve~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, spender_s291, tokens_s291);
[L2864]  RET         call CorralChoice_YearnFinanceBitToken(this);
[L2864]  CALL        call CorralChoice_YearnFinanceBitToken(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != YearnFinanceBitToken;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND FALSE  !(choice == 11)
[L2776]  COND FALSE  !(choice == 10)
[L2783]  COND TRUE   choice == 9
[L2784]              gas := gas - 21000;
[L2785]  COND TRUE   gas >= 0
[L2786]              assume tokens_s393 >= 0 && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2787]              assume msgvalue_MSG == 0;
[L2788]  CALL        call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((p1 != from_s393 || p2 != msgsender_MSG) && from_s393 == to_s393) && tokens_s393 <= balances_YearnFinanceBitToken[this][from_s393]) && tokens_s393 <= allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG]) && tokens_s393 >= 0) && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][to_s393] >= 0) && balances_YearnFinanceBitToken[this][to_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][from_s393] >= 0) && balances_YearnFinanceBitToken[this][from_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] >= 0) && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3]                 revert := revert_hold;
[L707]               havoc __exception;
[L708]               revert := false;
[L709]   COND FALSE  !(__exception)
[L730]   CALL        call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L1638]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1639]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][from_s393], tokens_s393);
[L1349]  COND FALSE  !(!(b_s112 <= a_s112))
[L1353]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1639]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][from_s393], tokens_s393);
[L1640]  COND FALSE  !(revert)
[L1646]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][from_s393];
[L1647]              balances_YearnFinanceBitToken[this][from_s393] := __var_4;
[L1648]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][from_s393];
[L1649]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1650]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG], tokens_s393);
[L1349]  COND FALSE  !(!(b_s112 <= a_s112))
[L1353]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1650]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG], tokens_s393);
[L1651]  COND FALSE  !(revert)
[L1657]              sum_allowed1[from_s393] := sum_allowed1[from_s393] - allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG];
[L1658]              allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] := __var_5;
[L1659]              sum_allowed1[from_s393] := sum_allowed1[from_s393] + allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG];
[L1660]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1661]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][to_s393], tokens_s393);
[L1331]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1332]  COND FALSE  !(!(c_s90 >= a_s90))
[L1661]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][to_s393], tokens_s393);
[L1662]  COND FALSE  !(revert)
[L1668]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][to_s393];
[L1669]              balances_YearnFinanceBitToken[this][to_s393] := __var_6;
[L1670]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][to_s393];
[L1671]              assert { :EventEmitted "Transfer_YearnFinanceBitToken" } true;
[L1672]              success_s393 := true;
[L730]   RET         call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L731]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((success_s393 == true && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] == old(allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG]) - tokens_s393) && _totalSupply_YearnFinanceBitToken[this] == old(_totalSupply_YearnFinanceBitToken[this])) && balances_YearnFinanceBitToken[this] == old(balances_YearnFinanceBitToken[this])) && allowed_YearnFinanceBitToken[this][p1][p2] == old(allowed_YearnFinanceBitToken[this][p1][p2])) && name_YearnFinanceBitToken[this] == old(name_YearnFinanceBitToken[this])) && symbol_YearnFinanceBitToken[this] == old(symbol_YearnFinanceBitToken[this])) && decimals_YearnFinanceBitToken[this] == old(decimals_YearnFinanceBitToken[this]));
[L3]                 revert := revert_hold;
[L2788]  RET         call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L2864]  RET         call CorralChoice_YearnFinanceBitToken(this);
[L2864]  CALL        call CorralChoice_YearnFinanceBitToken(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != YearnFinanceBitToken;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND FALSE  !(choice == 11)
[L2776]  COND FALSE  !(choice == 10)
[L2783]  COND TRUE   choice == 9
[L2784]              gas := gas - 21000;
[L2785]  COND TRUE   gas >= 0
[L2786]              assume tokens_s393 >= 0 && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2787]              assume msgvalue_MSG == 0;
[L2788]  CALL        call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s393 || p2 != msgsender_MSG) && from_s393 == to_s393) && tokens_s393 <= balances_YearnFinanceBitToken[this][from_s393]) && tokens_s393 <= allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG]) && tokens_s393 >= 0) && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][to_s393] >= 0) && balances_YearnFinanceBitToken[this][to_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][from_s393] >= 0) && balances_YearnFinanceBitToken[this][from_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] >= 0) && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_YearnFinanceBitToken0 := true;
[L3]                 call_transferFrom_YearnFinanceBitToken0 := false;
[L3]                 revert := revert_hold;
[L707]               havoc __exception;
[L708]               revert := false;
[L709]   COND FALSE  !(__exception)
[L730]   CALL        call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L1638]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1639]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][from_s393], tokens_s393);
[L1349]  COND FALSE  !(!(b_s112 <= a_s112))
[L1353]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1639]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][from_s393], tokens_s393);
[L1640]  COND FALSE  !(revert)
[L1646]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][from_s393];
[L1647]              balances_YearnFinanceBitToken[this][from_s393] := __var_4;
[L1648]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][from_s393];
[L1649]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1650]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG], tokens_s393);
[L1349]  COND FALSE  !(!(b_s112 <= a_s112))
[L1353]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1650]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG], tokens_s393);
[L1651]  COND FALSE  !(revert)
[L1657]              sum_allowed1[from_s393] := sum_allowed1[from_s393] - allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG];
[L1658]              allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] := __var_5;
[L1659]              sum_allowed1[from_s393] := sum_allowed1[from_s393] + allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG];
[L1660]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1661]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][to_s393], tokens_s393);
[L1331]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1332]  COND FALSE  !(!(c_s90 >= a_s90))
[L1661]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][to_s393], tokens_s393);
[L1662]  COND FALSE  !(revert)
[L1668]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][to_s393];
[L1669]              balances_YearnFinanceBitToken[this][to_s393] := __var_6;
[L1670]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][to_s393];
[L1671]              assert { :EventEmitted "Transfer_YearnFinanceBitToken" } true;
[L1672]              success_s393 := true;
[L730]   RET         call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L731]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((success_s393 == true && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] == old(allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG]) - tokens_s393) && _totalSupply_YearnFinanceBitToken[this] == old(_totalSupply_YearnFinanceBitToken[this])) && balances_YearnFinanceBitToken[this] == old(balances_YearnFinanceBitToken[this])) && allowed_YearnFinanceBitToken[this][p1][p2] == old(allowed_YearnFinanceBitToken[this][p1][p2])) && name_YearnFinanceBitToken[this] == old(name_YearnFinanceBitToken[this])) && symbol_YearnFinanceBitToken[this] == old(symbol_YearnFinanceBitToken[this])) && decimals_YearnFinanceBitToken[this] == old(decimals_YearnFinanceBitToken[this]));
[L3]                 revert := revert_hold;
[L2788]  RET         call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L2864]  RET         call CorralChoice_YearnFinanceBitToken(this);

Loop:
[L2864]  CALL        call CorralChoice_YearnFinanceBitToken(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != YearnFinanceBitToken;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND FALSE  !(choice == 11)
[L2776]  COND FALSE  !(choice == 10)
[L2783]  COND TRUE   choice == 9
[L2784]              gas := gas - 21000;
[L2785]  COND TRUE   gas >= 0
[L2786]              assume tokens_s393 >= 0 && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2787]              assume msgvalue_MSG == 0;
[L2788]  CALL        call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s393 || p2 != msgsender_MSG) && from_s393 == to_s393) && tokens_s393 <= balances_YearnFinanceBitToken[this][from_s393]) && tokens_s393 <= allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG]) && tokens_s393 >= 0) && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][to_s393] >= 0) && balances_YearnFinanceBitToken[this][to_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][from_s393] >= 0) && balances_YearnFinanceBitToken[this][from_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] >= 0) && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_YearnFinanceBitToken0 := true;
[L3]                 call_transferFrom_YearnFinanceBitToken0 := false;
[L3]                 revert := revert_hold;
[L707]               havoc __exception;
[L708]               revert := false;
[L709]   COND FALSE  !(__exception)
[L730]   CALL        call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L1638]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1639]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][from_s393], tokens_s393);
[L1349]  COND FALSE  !(!(b_s112 <= a_s112))
[L1353]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1639]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][from_s393], tokens_s393);
[L1640]  COND FALSE  !(revert)
[L1646]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][from_s393];
[L1647]              balances_YearnFinanceBitToken[this][from_s393] := __var_4;
[L1648]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][from_s393];
[L1649]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1650]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG], tokens_s393);
[L1349]  COND FALSE  !(!(b_s112 <= a_s112))
[L1353]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1650]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG], tokens_s393);
[L1651]  COND FALSE  !(revert)
[L1657]              sum_allowed1[from_s393] := sum_allowed1[from_s393] - allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG];
[L1658]              allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] := __var_5;
[L1659]              sum_allowed1[from_s393] := sum_allowed1[from_s393] + allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG];
[L1660]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1661]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][to_s393], tokens_s393);
[L1331]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1332]  COND FALSE  !(!(c_s90 >= a_s90))
[L1661]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][to_s393], tokens_s393);
[L1662]  COND FALSE  !(revert)
[L1668]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][to_s393];
[L1669]              balances_YearnFinanceBitToken[this][to_s393] := __var_6;
[L1670]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][to_s393];
[L1671]              assert { :EventEmitted "Transfer_YearnFinanceBitToken" } true;
[L1672]              success_s393 := true;
[L730]   RET         call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L731]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((success_s393 == true && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] == old(allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG]) - tokens_s393) && _totalSupply_YearnFinanceBitToken[this] == old(_totalSupply_YearnFinanceBitToken[this])) && balances_YearnFinanceBitToken[this] == old(balances_YearnFinanceBitToken[this])) && allowed_YearnFinanceBitToken[this][p1][p2] == old(allowed_YearnFinanceBitToken[this][p1][p2])) && name_YearnFinanceBitToken[this] == old(name_YearnFinanceBitToken[this])) && symbol_YearnFinanceBitToken[this] == old(symbol_YearnFinanceBitToken[this])) && decimals_YearnFinanceBitToken[this] == old(decimals_YearnFinanceBitToken[this]));
[L3]                 revert := revert_hold;
[L2788]  RET         call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L2864]  RET         call CorralChoice_YearnFinanceBitToken(this);

[2020-11-25 09:30:29,883 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:30:29,883 INFO  L82        PathProgramCache]: Analyzing trace with hash -2120128396, now seen corresponding path program 1 times
[2020-11-25 09:30:29,883 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:30:29,985 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:30:30,539 INFO  L134       CoverageAnalysis]: Checked inductivity of 180 backedges. 7 proven. 10 refuted. 0 times theorem prover too weak. 163 trivial. 0 not checked.
[2020-11-25 09:30:30,539 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 09:30:30,539 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [37] total 37
[2020-11-25 09:30:30,539 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:30:30,539 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 37 interpolants.
[2020-11-25 09:30:30,540 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=109, Invalid=1223, Unknown=0, NotChecked=0, Total=1332
[2020-11-25 09:30:30,540 INFO  L87              Difference]: Start difference. First operand 1460 states and 1652 transitions. cyclomatic complexity: 204 Second operand 37 states.
[2020-11-25 09:30:32,027 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:30:32,027 INFO  L93              Difference]: Finished difference Result 764 states and 868 transitions.
[2020-11-25 09:30:32,028 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 28 states. 
[2020-11-25 09:30:32,028 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 764 states and 868 transitions.
[2020-11-25 09:30:32,029 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 09:30:32,029 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 764 states to 0 states and 0 transitions.
[2020-11-25 09:30:32,029 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-25 09:30:32,029 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-25 09:30:32,030 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-25 09:30:32,030 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:30:32,030 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 09:30:32,030 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 09:30:32,030 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 09:30:32,030 INFO  L445         BuchiCegarLoop]: ======== Iteration 16============
[2020-11-25 09:30:32,030 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-25 09:30:32,030 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 09:30:32,030 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-25 09:30:32,033 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 09:30:32 BasicIcfg
[2020-11-25 09:30:32,033 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 09:30:32,033 INFO  L168              Benchmark]: Toolchain (without parser) took 64481.41 ms. Allocated memory was 1.0 GB in the beginning and 3.4 GB in the end (delta: 2.4 GB). Free memory was 940.6 MB in the beginning and 1.0 GB in the end (delta: -77.8 MB). Peak memory consumption was 2.3 GB. Max. memory is 15.3 GB.
[2020-11-25 09:30:32,034 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 09:30:32,034 INFO  L168              Benchmark]: Boogie Preprocessor took 78.33 ms. Allocated memory is still 1.0 GB. Free memory was 940.6 MB in the beginning and 929.8 MB in the end (delta: 10.8 MB). Peak memory consumption was 10.8 MB. Max. memory is 15.3 GB.
[2020-11-25 09:30:32,034 INFO  L168              Benchmark]: UtopiaSpecLang took 63.68 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 924.4 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 09:30:32,034 INFO  L168              Benchmark]: Boogie Printer took 12.22 ms. Allocated memory is still 1.0 GB. Free memory is still 924.4 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 09:30:32,034 INFO  L168              Benchmark]: RCFGBuilder took 661.02 ms. Allocated memory is still 1.0 GB. Free memory was 924.4 MB in the beginning and 849.2 MB in the end (delta: 75.2 MB). Peak memory consumption was 75.2 MB. Max. memory is 15.3 GB.
[2020-11-25 09:30:32,035 INFO  L168              Benchmark]: UtopiaLTL2Aut took 40.03 ms. Allocated memory is still 1.0 GB. Free memory was 849.2 MB in the beginning and 840.2 MB in the end (delta: 9.0 MB). Peak memory consumption was 9.0 MB. Max. memory is 15.3 GB.
[2020-11-25 09:30:32,035 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1119.62 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 61.3 MB). Free memory was 840.2 MB in the beginning and 757.5 MB in the end (delta: 82.8 MB). Peak memory consumption was 144.1 MB. Max. memory is 15.3 GB.
[2020-11-25 09:30:32,035 INFO  L168              Benchmark]: BlockEncodingV2 took 107.26 ms. Allocated memory is still 1.1 GB. Free memory was 757.5 MB in the beginning and 710.2 MB in the end (delta: 47.2 MB). Peak memory consumption was 47.2 MB. Max. memory is 15.3 GB.
[2020-11-25 09:30:32,035 INFO  L168              Benchmark]: BuchiAutomizer took 62396.38 ms. Allocated memory was 1.1 GB in the beginning and 3.4 GB in the end (delta: 2.4 GB). Free memory was 710.2 MB in the beginning and 1.0 GB in the end (delta: -308.2 MB). Peak memory consumption was 2.0 GB. Max. memory is 15.3 GB.
[2020-11-25 09:30:32,037 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    2492 locations, 4284 edges
  - StatisticsResult: Encoded RCFG
    2448 locations, 4166 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 78.33 ms. Allocated memory is still 1.0 GB. Free memory was 940.6 MB in the beginning and 929.8 MB in the end (delta: 10.8 MB). Peak memory consumption was 10.8 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 63.68 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 924.4 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 12.22 ms. Allocated memory is still 1.0 GB. Free memory is still 924.4 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * RCFGBuilder took 661.02 ms. Allocated memory is still 1.0 GB. Free memory was 924.4 MB in the beginning and 849.2 MB in the end (delta: 75.2 MB). Peak memory consumption was 75.2 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 40.03 ms. Allocated memory is still 1.0 GB. Free memory was 849.2 MB in the beginning and 840.2 MB in the end (delta: 9.0 MB). Peak memory consumption was 9.0 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1119.62 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 61.3 MB). Free memory was 840.2 MB in the beginning and 757.5 MB in the end (delta: 82.8 MB). Peak memory consumption was 144.1 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 107.26 ms. Allocated memory is still 1.1 GB. Free memory was 757.5 MB in the beginning and 710.2 MB in the end (delta: 47.2 MB). Peak memory consumption was 47.2 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 62396.38 ms. Allocated memory was 1.1 GB in the beginning and 3.4 GB in the end (delta: 2.4 GB). Free memory was 710.2 MB in the beginning and 1.0 GB in the end (delta: -308.2 MB). Peak memory consumption was 2.0 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    1051 locations, 1324 edges
  - StatisticsResult: BuchiProgram size
    2492 locations, 4284 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 15 terminating modules (15 trivial, 0 deterministic, 0 nondeterministic). 15 modules have a trivial ranking function, the largest among these consists of 47 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 62.3s and 16 iterations.  TraceHistogramMax:3. Analysis of lassos took 15.5s. Construction of modules took 35.9s. BÃ¼chi inclusion checks took 10.2s. Highest rank in rank-based complementation 0. Minimization of det autom 15. Minimization of nondet autom 0. Automata minimization 0.2s AutomataMinimizationTime, 14 MinimizatonAttempts, 1904 StatesRemovedByMinimization, 13 NontrivialMinimizations. Non-live state removal took 0.1s Buchi closure took 0.0s. Biggest automaton had 1911 states and ocurred in iteration 6.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 22644 SDtfs, 26657 SDslu, 120171 SDs, 0 SdLazy, 186268 SolverSat, 4284 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 35.9s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU15 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_transferFrom_YearnFinance(success_transferFrom_YearnFinanceBitToken0)itToken0) ==> ( <>(success_transferFrom_YearnFinanceBitToken0) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
