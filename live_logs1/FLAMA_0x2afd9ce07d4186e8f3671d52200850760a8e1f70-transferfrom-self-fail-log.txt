This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 16:34:03,464 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 16:34:03,465 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 16:34:03,478 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 16:34:03,479 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 16:34:03,480 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 16:34:03,481 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 16:34:03,483 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 16:34:03,485 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 16:34:03,485 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 16:34:03,486 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 16:34:03,486 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 16:34:03,487 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 16:34:03,489 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 16:34:03,490 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 16:34:03,490 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 16:34:03,491 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 16:34:03,493 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 16:34:03,495 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 16:34:03,496 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 16:34:03,497 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 16:34:03,498 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 16:34:03,500 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 16:34:03,500 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 16:34:03,500 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 16:34:03,501 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 16:34:03,501 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 16:34:03,502 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 16:34:03,502 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 16:34:03,502 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 16:34:03,503 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 16:34:03,503 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 16:34:03,504 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 16:34:03,505 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 16:34:03,505 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 16:34:03,506 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 16:34:03,506 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 16:34:03,506 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 16:34:03,506 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 16:34:03,507 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 16:34:03,508 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 16:34:03,508 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 16:34:03,516 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 16:34:03,517 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 16:34:03,517 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 16:34:03,518 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 16:34:03,518 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 16:34:03,518 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 16:34:03,518 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 16:34:03,518 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 16:34:03,518 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 16:34:03,518 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 16:34:03,518 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 16:34:03,518 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 16:34:03,519 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 16:34:03,519 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 16:34:03,519 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 16:34:03,519 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 16:34:03,519 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 16:34:03,519 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 16:34:03,519 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 16:34:03,519 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 16:34:03,519 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 16:34:03,519 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 16:34:03,520 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 16:34:03,520 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 16:34:03,520 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 16:34:03,520 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 16:34:03,541 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 16:34:03,551 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 16:34:03,554 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 16:34:03,555 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 16:34:03,556 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 16:34:03,556 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/FLAMA_0x2afd9ce07d4186e8f3671d52200850760a8e1f70_transferfrom-self-fail.bpl
[2020-11-25 16:34:03,557 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/FLAMA_0x2afd9ce07d4186e8f3671d52200850760a8e1f70_transferfrom-self-fail.bpl'
[2020-11-25 16:34:03,633 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 16:34:03,634 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 16:34:03,634 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 16:34:03,635 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 16:34:03,635 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 16:34:03,652 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "FLAMA_0x2afd9ce07d4186e8f3671d52200850760a8e1f70_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:34:03" (1/1) ...
[2020-11-25 16:34:03,653 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "FLAMA_0x2afd9ce07d4186e8f3671d52200850760a8e1f70_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:34:03" (1/1) ...
[2020-11-25 16:34:03,684 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "FLAMA_0x2afd9ce07d4186e8f3671d52200850760a8e1f70_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:34:03" (1/1) ...
[2020-11-25 16:34:03,685 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "FLAMA_0x2afd9ce07d4186e8f3671d52200850760a8e1f70_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:34:03" (1/1) ...
[2020-11-25 16:34:03,708 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "FLAMA_0x2afd9ce07d4186e8f3671d52200850760a8e1f70_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:34:03" (1/1) ...
[2020-11-25 16:34:03,716 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "FLAMA_0x2afd9ce07d4186e8f3671d52200850760a8e1f70_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:34:03" (1/1) ...
[2020-11-25 16:34:03,722 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "FLAMA_0x2afd9ce07d4186e8f3671d52200850760a8e1f70_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:34:03" (1/1) ...
[2020-11-25 16:34:03,730 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 16:34:03,730 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 16:34:03,730 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 16:34:03,732 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 16:34:03,736 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "FLAMA_0x2afd9ce07d4186e8f3671d52200850760a8e1f70_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:34:03" (1/1) ...
[2020-11-25 16:34:03,752 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(FLAMA.transferFrom(from, to, value), from == to && (value > _balances_FLAMA[this][from] || value > _allowed_FLAMA[this][from][msg.sender]) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_FLAMA[this][to] >= 0 && _balances_FLAMA[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_FLAMA[this][from] >= 0 &&  _balances_FLAMA[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowed_FLAMA[this][from][msg.sender] >= 0 && _allowed_FLAMA[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(FLAMA.transferFrom)))
[2020-11-25 16:34:03,758 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(FLAMA.transferFrom(from, to, value), from == to && (value > _balances_FLAMA[this][from] || value > _allowed_FLAMA[this][from][msg.sender]) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_FLAMA[this][to] >= 0 && _balances_FLAMA[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_FLAMA[this][from] >= 0 &&  _balances_FLAMA[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowed_FLAMA[this][from][msg.sender] >= 0 && _allowed_FLAMA[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(FLAMA.transferFrom)))
[2020-11-25 16:34:03,765 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(FLAMA.transferFrom(from, to, value), from == to && (value > _balances_FLAMA[this][from] || value > _allowed_FLAMA[this][from][msg.sender]) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_FLAMA[this][to] >= 0 && _balances_FLAMA[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_FLAMA[this][from] >= 0 &&  _balances_FLAMA[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowed_FLAMA[this][from][msg.sender] >= 0 && _allowed_FLAMA[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(FLAMA.transferFrom)))
[2020-11-25 16:34:03,773 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( from_s416==to_s416 && ( value_s416>_balances_FLAMA[this][from_s416] || value_s416>_allowed_FLAMA[this][from_s416][msg.sender] ) ) && value_s416>=0 ) && value_s416<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_FLAMA[this][to_s416]>=0 ) && _balances_FLAMA[this][to_s416]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_FLAMA[this][from_s416]>=0 ) && _balances_FLAMA[this][from_s416]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _allowed_FLAMA[this][from_s416][msg.sender]>=0 ) && _allowed_FLAMA[this][from_s416][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[from_s416,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_FLAMA>],IdentifierExpression[to_s416,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_FLAMA>]],BinaryExpression[LOGICOR,BinaryExpression[COMPGT,IdentifierExpression[value_s416,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_FLAMA>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_FLAMA,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_FLAMA>]]],[IdentifierExpression[from_s416,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_FLAMA>]]]],BinaryExpression[COMPGT,IdentifierExpression[value_s416,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_FLAMA>],ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_FLAMA,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_FLAMA>]]],[IdentifierExpression[from_s416,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_FLAMA>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_FLAMA>]]]]]],BinaryExpression[COMPGEQ,IdentifierExpression[value_s416,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_FLAMA>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[value_s416,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_FLAMA>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_FLAMA,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_FLAMA>]]],[IdentifierExpression[to_s416,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_FLAMA>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_FLAMA,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_FLAMA>]]],[IdentifierExpression[to_s416,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_FLAMA>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_FLAMA,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_FLAMA>]]],[IdentifierExpression[from_s416,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_FLAMA>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_FLAMA,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_FLAMA>]]],[IdentifierExpression[from_s416,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_FLAMA>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_FLAMA,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_FLAMA>]]],[IdentifierExpression[from_s416,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_FLAMA>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_FLAMA>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_FLAMA,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_FLAMA>]]],[IdentifierExpression[from_s416,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_FLAMA>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_FLAMA>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 16:34:03,778 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(FLAMA.transferFrom(from, to, value), from == to && (value > _balances_FLAMA[this][from] || value > _allowed_FLAMA[this][from][msg.sender]) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_FLAMA[this][to] >= 0 && _balances_FLAMA[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_FLAMA[this][from] >= 0 &&  _balances_FLAMA[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowed_FLAMA[this][from][msg.sender] >= 0 && _allowed_FLAMA[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(FLAMA.transferFrom)))
[2020-11-25 16:34:03,778 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transferFrom_FLAMA0) ==> ( <>AP(fail_transferFrom_FLAMA0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 16:34:03,784 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 04:34:03 PropertyContainer
[2020-11-25 16:34:03,785 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 16:34:03,785 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 16:34:03,785 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 16:34:03,785 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 16:34:03,786 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "FLAMA_0x2afd9ce07d4186e8f3671d52200850760a8e1f70_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:34:03" (1/2) ...
[2020-11-25 16:34:03,786 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 16:34:03,786 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 16:34:03,796 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 04:34:03" (2/2) ...
[2020-11-25 16:34:03,796 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 16:34:03,797 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 16:34:03,797 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 16:34:03,797 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 16:34:03,797 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "FLAMA_0x2afd9ce07d4186e8f3671d52200850760a8e1f70_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:34:03" (1/2) ...
[2020-11-25 16:34:03,852 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 16:34:03,852 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 16:34:03,852 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 16:34:03,852 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 16:34:03,853 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 16:34:03,853 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 16:34:03,853 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 16:34:03,853 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 16:34:03,853 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 16:34:03,853 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 16:34:03,853 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-25 16:34:03,853 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-25 16:34:03,853 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-25 16:34:03,853 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-25 16:34:03,853 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-25 16:34:03,853 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-25 16:34:03,854 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-25 16:34:03,854 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-25 16:34:03,854 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_FLAMA
[2020-11-25 16:34:03,854 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_FLAMA
[2020-11-25 16:34:03,854 INFO  L130     BoogieDeclarations]: Found specification of procedure FLAMA_FLAMA_NoBaseCtor__success
[2020-11-25 16:34:03,854 INFO  L130     BoogieDeclarations]: Found specification of procedure FLAMA_FLAMA
[2020-11-25 16:34:03,854 INFO  L138     BoogieDeclarations]: Found implementation of procedure FLAMA_FLAMA
[2020-11-25 16:34:03,854 INFO  L130     BoogieDeclarations]: Found specification of procedure name_FLAMA
[2020-11-25 16:34:03,854 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_FLAMA
[2020-11-25 16:34:03,854 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_FLAMA
[2020-11-25 16:34:03,855 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_FLAMA
[2020-11-25 16:34:03,855 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_FLAMA
[2020-11-25 16:34:03,855 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_FLAMA
[2020-11-25 16:34:03,855 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_FLAMA
[2020-11-25 16:34:03,855 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_FLAMA
[2020-11-25 16:34:03,855 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_FLAMA
[2020-11-25 16:34:03,855 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_FLAMA
[2020-11-25 16:34:03,855 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_FLAMA
[2020-11-25 16:34:03,855 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_FLAMA
[2020-11-25 16:34:03,855 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_FLAMA
[2020-11-25 16:34:03,855 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_FLAMA
[2020-11-25 16:34:03,856 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_FLAMA
[2020-11-25 16:34:03,856 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_FLAMA
[2020-11-25 16:34:03,856 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_FLAMA
[2020-11-25 16:34:03,856 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_FLAMA
[2020-11-25 16:34:03,856 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_FLAMA
[2020-11-25 16:34:03,856 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_FLAMA
[2020-11-25 16:34:03,856 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_FLAMA
[2020-11-25 16:34:03,856 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_FLAMA
[2020-11-25 16:34:03,856 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_FLAMA__success
[2020-11-25 16:34:03,856 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_FLAMA__success
[2020-11-25 16:34:03,856 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 16:34:03,856 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 16:34:03,857 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 16:34:03,857 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 16:34:03,857 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 16:34:03,857 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-25 16:34:03,857 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-25 16:34:03,857 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_FLAMA
[2020-11-25 16:34:03,857 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 16:34:03,857 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 16:34:03,857 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 16:34:03,857 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 16:34:03,857 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 16:34:03,857 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 16:34:03,857 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 16:34:03,857 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 16:34:03,858 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 16:34:03,858 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 16:34:03,858 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 16:34:03,858 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-25 16:34:03,858 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-25 16:34:03,858 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_FLAMA__success
[2020-11-25 16:34:03,858 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_FLAMA__fail
[2020-11-25 16:34:03,858 INFO  L130     BoogieDeclarations]: Found specification of procedure FLAMA_FLAMA_NoBaseCtor__fail
[2020-11-25 16:34:03,858 INFO  L130     BoogieDeclarations]: Found specification of procedure FLAMA_FLAMA__success
[2020-11-25 16:34:03,858 INFO  L130     BoogieDeclarations]: Found specification of procedure FLAMA_FLAMA__fail
[2020-11-25 16:34:03,858 INFO  L130     BoogieDeclarations]: Found specification of procedure name_FLAMA__success
[2020-11-25 16:34:03,858 INFO  L130     BoogieDeclarations]: Found specification of procedure name_FLAMA__fail
[2020-11-25 16:34:03,858 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_FLAMA__success
[2020-11-25 16:34:03,859 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_FLAMA__fail
[2020-11-25 16:34:03,859 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_FLAMA__success
[2020-11-25 16:34:03,859 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_FLAMA__fail
[2020-11-25 16:34:03,859 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_FLAMA__success
[2020-11-25 16:34:03,859 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_FLAMA__fail
[2020-11-25 16:34:03,859 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_FLAMA__success
[2020-11-25 16:34:03,859 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_FLAMA__fail
[2020-11-25 16:34:03,859 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_FLAMA__success
[2020-11-25 16:34:03,859 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_FLAMA__fail
[2020-11-25 16:34:03,859 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_FLAMA__success
[2020-11-25 16:34:03,859 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_FLAMA__fail
[2020-11-25 16:34:03,859 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_FLAMA__success
[2020-11-25 16:34:03,859 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_FLAMA__fail
[2020-11-25 16:34:03,860 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_FLAMA__success
[2020-11-25 16:34:03,860 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_FLAMA__fail
[2020-11-25 16:34:03,860 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_FLAMA__success
[2020-11-25 16:34:03,860 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_FLAMA__fail
[2020-11-25 16:34:03,860 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_FLAMA__success
[2020-11-25 16:34:03,860 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_FLAMA__fail
[2020-11-25 16:34:03,860 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_FLAMA__fail
[2020-11-25 16:34:03,860 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_FLAMA__fail
[2020-11-25 16:34:03,860 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 16:34:03,860 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 16:34:03,860 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 16:34:03,861 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 16:34:03,861 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 16:34:03,861 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 16:34:03,861 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 16:34:03,861 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 16:34:03,861 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 16:34:03,861 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 16:34:03,861 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 16:34:03,861 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 16:34:03,861 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 16:34:03,861 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 16:34:03,861 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 16:34:03,862 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 16:34:03,862 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 16:34:03,862 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 16:34:03,862 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 16:34:03,862 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 16:34:03,862 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 16:34:03,862 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-25 16:34:03,862 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-25 16:34:03,862 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_FLAMA__fail
[2020-11-25 16:34:03,862 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_FLAMA__success
[2020-11-25 16:34:03,862 INFO  L138     BoogieDeclarations]: Found implementation of procedure FLAMA_FLAMA_NoBaseCtor__fail
[2020-11-25 16:34:03,862 INFO  L138     BoogieDeclarations]: Found implementation of procedure FLAMA_FLAMA_NoBaseCtor__success
[2020-11-25 16:34:03,862 INFO  L138     BoogieDeclarations]: Found implementation of procedure FLAMA_FLAMA__fail
[2020-11-25 16:34:03,863 INFO  L138     BoogieDeclarations]: Found implementation of procedure FLAMA_FLAMA__success
[2020-11-25 16:34:03,863 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_FLAMA__fail
[2020-11-25 16:34:03,863 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_FLAMA__success
[2020-11-25 16:34:03,863 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_FLAMA__fail
[2020-11-25 16:34:03,863 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_FLAMA__success
[2020-11-25 16:34:03,863 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_FLAMA__fail
[2020-11-25 16:34:03,863 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_FLAMA__success
[2020-11-25 16:34:03,863 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_FLAMA__fail
[2020-11-25 16:34:03,863 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_FLAMA__success
[2020-11-25 16:34:03,863 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_FLAMA__fail
[2020-11-25 16:34:03,863 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_FLAMA__success
[2020-11-25 16:34:03,864 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_FLAMA__fail
[2020-11-25 16:34:03,864 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_FLAMA__success
[2020-11-25 16:34:03,864 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_FLAMA__fail
[2020-11-25 16:34:03,864 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_FLAMA__success
[2020-11-25 16:34:03,864 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_FLAMA__fail
[2020-11-25 16:34:03,864 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_FLAMA__success
[2020-11-25 16:34:03,864 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_FLAMA__fail
[2020-11-25 16:34:03,864 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_FLAMA__success
[2020-11-25 16:34:03,864 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_FLAMA__fail
[2020-11-25 16:34:03,864 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_FLAMA__success
[2020-11-25 16:34:03,864 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_FLAMA__fail
[2020-11-25 16:34:03,864 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_FLAMA__success
[2020-11-25 16:34:03,864 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_FLAMA__fail
[2020-11-25 16:34:03,865 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_FLAMA__success
[2020-11-25 16:34:03,865 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_FLAMA__fail
[2020-11-25 16:34:03,865 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_FLAMA__success
[2020-11-25 16:34:03,865 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 16:34:03,865 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 16:34:03,865 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 16:34:03,865 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 16:34:03,865 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 16:34:03,865 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 16:34:03,865 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 16:34:03,866 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 16:34:03,866 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-25 16:34:03,866 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-25 16:34:03,866 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_FLAMA
[2020-11-25 16:34:03,866 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 16:34:03,866 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 16:34:03,866 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 16:34:04,337 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 16:34:04,337 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 16:34:04,428 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 16:34:04,428 INFO  L286             CfgBuilder]: Removed 3 assue(true) statements.
[2020-11-25 16:34:04,430 INFO  L202        PluginConnector]: Adding new model FLAMA_0x2afd9ce07d4186e8f3671d52200850760a8e1f70_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 04:34:04 BoogieIcfgContainer
[2020-11-25 16:34:04,430 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 04:34:03" (2/2) ...
[2020-11-25 16:34:04,430 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 16:34:04,431 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@496358dd and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 04:34:04, skipping insertion in model container
[2020-11-25 16:34:04,431 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 16:34:04,431 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 16:34:04,431 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 16:34:04,432 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 16:34:04,433 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "FLAMA_0x2afd9ce07d4186e8f3671d52200850760a8e1f70_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:34:03" (1/3) ...
[2020-11-25 16:34:04,434 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@c6bad77 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 04:34:04, skipping insertion in model container
[2020-11-25 16:34:04,434 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 04:34:03" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 16:34:04,476 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 04:34:04 NWAContainer
[2020-11-25 16:34:04,477 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 16:34:04,477 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 16:34:04,477 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 16:34:04,478 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 16:34:04,478 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "FLAMA_0x2afd9ce07d4186e8f3671d52200850760a8e1f70_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 04:34:04" (3/4) ...
[2020-11-25 16:34:04,479 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@66fb9ea9 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 04:34:04, skipping insertion in model container
[2020-11-25 16:34:04,479 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 04:34:04" (4/4) ...
[2020-11-25 16:34:04,482 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 16:34:04,486 INFO  L110   BuchiProductObserver]: Initial RCFG 959 locations, 1203 edges
[2020-11-25 16:34:04,486 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 16:34:04,498 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 16:34:05,411 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 16:34:05,415 INFO  L110   BuchiProductObserver]: BuchiProgram size 2302 locations, 3898 edges
[2020-11-25 16:34:05,416 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 04:34:05 BoogieIcfgContainer
[2020-11-25 16:34:05,416 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 16:34:05,416 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 16:34:05,416 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 16:34:05,418 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 16:34:05,419 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 04:34:05" (1/1) ...
[2020-11-25 16:34:05,480 INFO  L313           BlockEncoder]: Initial Icfg 2302 locations, 3898 edges
[2020-11-25 16:34:05,481 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 16:34:05,481 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 16:34:05,481 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 16:34:05,482 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 16:34:05,489 INFO  L70    emoveInfeasibleEdges]: Removed 42 edges and 9 locations because of local infeasibility
[2020-11-25 16:34:05,494 INFO  L70        RemoveSinkStates]: Removed 40 edges and 20 locations by removing sink states
[2020-11-25 16:34:05,501 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 16:34:05,504 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 16:34:05,505 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 16:34:05,506 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 16:34:05,509 INFO  L313           BlockEncoder]: Encoded RCFG 2255 locations, 3790 edges
[2020-11-25 16:34:05,510 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 04:34:05 BasicIcfg
[2020-11-25 16:34:05,510 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 16:34:05,510 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 16:34:05,510 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 16:34:05,513 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 16:34:05,513 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 16:34:05,513 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "FLAMA_0x2afd9ce07d4186e8f3671d52200850760a8e1f70_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:34:03" (1/6) ...
[2020-11-25 16:34:05,515 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@6b10717 and model type FLAMA_0x2afd9ce07d4186e8f3671d52200850760a8e1f70_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 04:34:05, skipping insertion in model container
[2020-11-25 16:34:05,515 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 16:34:05,515 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 04:34:03" (2/6) ...
[2020-11-25 16:34:05,516 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@6b10717 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 04:34:05, skipping insertion in model container
[2020-11-25 16:34:05,516 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 16:34:05,516 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "FLAMA_0x2afd9ce07d4186e8f3671d52200850760a8e1f70_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 04:34:04" (3/6) ...
[2020-11-25 16:34:05,516 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@6b10717 and model type FLAMA_0x2afd9ce07d4186e8f3671d52200850760a8e1f70_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 04:34:05, skipping insertion in model container
[2020-11-25 16:34:05,516 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 16:34:05,516 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 04:34:04" (4/6) ...
[2020-11-25 16:34:05,516 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@6b10717 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 04:34:05, skipping insertion in model container
[2020-11-25 16:34:05,517 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 16:34:05,517 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 04:34:05" (5/6) ...
[2020-11-25 16:34:05,517 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@6b10717 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 04:34:05, skipping insertion in model container
[2020-11-25 16:34:05,517 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 16:34:05,517 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 04:34:05" (6/6) ...
[2020-11-25 16:34:05,518 INFO  L404   chiAutomizerObserver]: Analyzing ICFG FLAMA_0x2afd9ce07d4186e8f3671d52200850760a8e1f70_transferfrom-self-fail.bpl_BEv2
[2020-11-25 16:34:05,552 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 16:34:05,553 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 16:34:05,553 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 16:34:05,553 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 16:34:05,553 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 16:34:05,553 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 16:34:05,553 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 16:34:05,553 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 16:34:05,553 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 16:34:05,574 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2255 states.
[2020-11-25 16:34:05,622 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:34:05,623 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:34:05,623 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:34:05,632 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:34:05,632 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:34:05,632 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 16:34:05,632 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2255 states.
[2020-11-25 16:34:05,647 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:34:05,647 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:34:05,647 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:34:05,650 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:34:05,650 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_FLAMA0 := false;
[L2]                 call_transferFrom_FLAMA0 := false;
[L2]     CALL        call main();
[L2580]              assume null == 0;
[L2581]  CALL        call this := FreshRefGenerator__success();
[L1182]              havoc newRef;
[L1183]              assume Alloc[newRef] == false;
[L1184]              Alloc[newRef] := true;
[L1185]              assume newRef != null;
[L2581]  RET         call this := FreshRefGenerator__success();
[L2582]              assume now >= 0;
[L2583]              assume DType[this] == FLAMA;
[L2584]              assume msgvalue_MSG == 0;
[L2585]              gas := gas - 53000;
[L2586]  CALL        call FLAMA_FLAMA(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L261]               havoc __exception;
[L262]               revert := false;
[L263]   COND FALSE  !(__exception)
[L284]   CALL        call FLAMA_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L1452]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1370]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1355]              assume msgsender_MSG != null;
[L1356]              Balance[this] := 0;
[L1370]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1371]  COND FALSE  !(revert)
[L1452]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1453]  COND TRUE   revert
[L284]   RET         call FLAMA_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L285]               assume !revert && gas >= 0;
[L2586]  RET         call FLAMA_FLAMA(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L2587]              assume !revert && gas >= 0;

Loop:
[L2590]  CALL        call CorralChoice_FLAMA(this);
[L2446]              havoc msgsender_MSG;
[L2447]              havoc msgvalue_MSG;
[L2448]              havoc choice;
[L2449]              havoc __ret_0_totalSupply;
[L2450]              havoc owner_s308;
[L2451]              havoc __ret_0_balanceOf;
[L2452]              havoc owner_s324;
[L2453]              havoc spender_s324;
[L2454]              havoc __ret_0_allowance;
[L2455]              havoc to_s343;
[L2456]              havoc value_s343;
[L2457]              havoc __ret_0_transfer;
[L2458]              havoc spender_s379;
[L2459]              havoc value_s379;
[L2460]              havoc __ret_0_approve;
[L2461]              havoc from_s416;
[L2462]              havoc to_s416;
[L2463]              havoc value_s416;
[L2464]              havoc __ret_0_transferFrom;
[L2465]              havoc value_s229;
[L2466]              havoc name_s264;
[L2467]              havoc symbol_s264;
[L2468]              havoc decimals_s264;
[L2469]              havoc totalSupply_s264;
[L2470]              havoc __ret_0_name;
[L2471]              havoc __ret_0_symbol;
[L2472]              havoc __ret_0_decimals;
[L2473]              havoc spender_s466;
[L2474]              havoc addedValue_s466;
[L2475]              havoc __ret_0_increaseAllowance;
[L2476]              havoc spender_s516;
[L2477]              havoc subtractedValue_s516;
[L2478]              havoc __ret_0_decreaseAllowance;
[L2479]              havoc tmpNow;
[L2480]              havoc gas;
[L2481]              assume gas > 4000000 && gas <= 8000000;
[L2482]              tmpNow := now;
[L2483]              havoc now;
[L2484]              assume now > tmpNow;
[L2485]              assume msgsender_MSG != null;
[L2486]              assume DType[msgsender_MSG] != SafeMath;
[L2487]              assume DType[msgsender_MSG] != IERC20;
[L2488]              assume DType[msgsender_MSG] != FLAMA;
[L2489]              Alloc[msgsender_MSG] := true;
[L2490]  COND TRUE   choice == 12
[L2491]              gas := gas - 21000;
[L2492]  COND FALSE  !(gas >= 0)
[L2590]  RET         call CorralChoice_FLAMA(this);

[2020-11-25 16:34:05,666 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:34:05,666 INFO  L82        PathProgramCache]: Analyzing trace with hash 705843546, now seen corresponding path program 1 times
[2020-11-25 16:34:05,671 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:34:05,689 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:34:05,737 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 16:34:05,739 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:34:05,739 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 16:34:05,743 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:34:05,856 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 16:34:05,857 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 16:34:05,860 INFO  L87              Difference]: Start difference. First operand 2255 states. Second operand 4 states.
[2020-11-25 16:34:06,102 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:34:06,103 INFO  L93              Difference]: Finished difference Result 1769 states and 1976 transitions.
[2020-11-25 16:34:06,103 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 16:34:06,104 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1769 states and 1976 transitions.
[2020-11-25 16:34:06,112 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:34:06,128 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1769 states to 1769 states and 1976 transitions.
[2020-11-25 16:34:06,128 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3
[2020-11-25 16:34:06,130 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 517
[2020-11-25 16:34:06,130 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1769 states and 1976 transitions.
[2020-11-25 16:34:06,135 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:34:06,135 INFO  L728         BuchiCegarLoop]: Abstraction has 1769 states and 1976 transitions.
[2020-11-25 16:34:06,148 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1769 states and 1976 transitions.
[2020-11-25 16:34:06,180 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1769 to 1769.
[2020-11-25 16:34:06,181 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1769 states.
[2020-11-25 16:34:06,184 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1769 states to 1769 states and 1976 transitions.
[2020-11-25 16:34:06,185 INFO  L751         BuchiCegarLoop]: Abstraction has 1769 states and 1976 transitions.
[2020-11-25 16:34:06,185 INFO  L631         BuchiCegarLoop]: Abstraction has 1769 states and 1976 transitions.
[2020-11-25 16:34:06,185 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 16:34:06,185 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1769 states and 1976 transitions.
[2020-11-25 16:34:06,191 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:34:06,191 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:34:06,191 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:34:06,192 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:34:06,192 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_FLAMA0 := false;
[L2]                 call_transferFrom_FLAMA0 := false;
[L2]     CALL        call main();
[L2580]              assume null == 0;
[L2581]  CALL        call this := FreshRefGenerator__success();
[L1182]              havoc newRef;
[L1183]              assume Alloc[newRef] == false;
[L1184]              Alloc[newRef] := true;
[L1185]              assume newRef != null;
[L2581]  RET         call this := FreshRefGenerator__success();
[L2582]              assume now >= 0;
[L2583]              assume DType[this] == FLAMA;
[L2584]              assume msgvalue_MSG == 0;
[L2585]              gas := gas - 53000;
[L2586]  CALL        call FLAMA_FLAMA(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L261]               havoc __exception;
[L262]               revert := false;
[L263]   COND FALSE  !(__exception)
[L284]   CALL        call FLAMA_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L1452]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1370]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1355]              assume msgsender_MSG != null;
[L1356]              Balance[this] := 0;
[L1370]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1371]  COND FALSE  !(revert)
[L1452]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1453]  COND TRUE   revert
[L284]   RET         call FLAMA_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L285]               assume !revert && gas >= 0;
[L2586]  RET         call FLAMA_FLAMA(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L2587]              assume !revert && gas >= 0;
[L2590]  CALL        call CorralChoice_FLAMA(this);
[L2446]              havoc msgsender_MSG;
[L2447]              havoc msgvalue_MSG;
[L2448]              havoc choice;
[L2449]              havoc __ret_0_totalSupply;
[L2450]              havoc owner_s308;
[L2451]              havoc __ret_0_balanceOf;
[L2452]              havoc owner_s324;
[L2453]              havoc spender_s324;
[L2454]              havoc __ret_0_allowance;
[L2455]              havoc to_s343;
[L2456]              havoc value_s343;
[L2457]              havoc __ret_0_transfer;
[L2458]              havoc spender_s379;
[L2459]              havoc value_s379;
[L2460]              havoc __ret_0_approve;
[L2461]              havoc from_s416;
[L2462]              havoc to_s416;
[L2463]              havoc value_s416;
[L2464]              havoc __ret_0_transferFrom;
[L2465]              havoc value_s229;
[L2466]              havoc name_s264;
[L2467]              havoc symbol_s264;
[L2468]              havoc decimals_s264;
[L2469]              havoc totalSupply_s264;
[L2470]              havoc __ret_0_name;
[L2471]              havoc __ret_0_symbol;
[L2472]              havoc __ret_0_decimals;
[L2473]              havoc spender_s466;
[L2474]              havoc addedValue_s466;
[L2475]              havoc __ret_0_increaseAllowance;
[L2476]              havoc spender_s516;
[L2477]              havoc subtractedValue_s516;
[L2478]              havoc __ret_0_decreaseAllowance;
[L2479]              havoc tmpNow;
[L2480]              havoc gas;
[L2481]              assume gas > 4000000 && gas <= 8000000;
[L2482]              tmpNow := now;
[L2483]              havoc now;
[L2484]              assume now > tmpNow;
[L2485]              assume msgsender_MSG != null;
[L2486]              assume DType[msgsender_MSG] != SafeMath;
[L2487]              assume DType[msgsender_MSG] != IERC20;
[L2488]              assume DType[msgsender_MSG] != FLAMA;
[L2489]              Alloc[msgsender_MSG] := true;
[L2490]  COND FALSE  !(choice == 12)
[L2496]  COND FALSE  !(choice == 11)
[L2502]  COND FALSE  !(choice == 10)
[L2508]  COND FALSE  !(choice == 9)
[L2515]  COND FALSE  !(choice == 8)
[L2522]  COND TRUE   choice == 7
[L2523]              gas := gas - 21000;
[L2524]  COND TRUE   gas >= 0
[L2525]              assume value_s416 >= 0 && value_s416 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2526]              assume msgvalue_MSG == 0;
[L2527]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_FLAMA(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s416 == to_s416 && (value_s416 > _balances_FLAMA[this][from_s416] || value_s416 > _allowed_FLAMA[this][from_s416][msgsender_MSG])) && value_s416 >= 0) && value_s416 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_FLAMA[this][to_s416] >= 0) && _balances_FLAMA[this][to_s416] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_FLAMA[this][from_s416] >= 0) && _balances_FLAMA[this][from_s416] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_FLAMA[this][from_s416][msgsender_MSG] >= 0) && _allowed_FLAMA[this][from_s416][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_FLAMA0 := true;
[L2]                 call_transferFrom_FLAMA0 := false;
[L2]                 revert := revert_hold;
[L721]               havoc __exception;
[L722]               revert := false;
[L723]   COND FALSE  !(__exception)
[L744]   CALL        call __ret_0_ := transferFrom~address~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L1606]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_FLAMA[this][from_s416][msgsender_MSG], value_s416);
[L1291]  COND TRUE   !(b_s82 <= a_s82)
[L1292]              revert := true;
[L1606]  RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_FLAMA[this][from_s416][msgsender_MSG], value_s416);
[L1607]  COND TRUE   revert
[L744]   RET         call __ret_0_ := transferFrom~address~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L745]               assume !revert && gas >= 0;
[L2527]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_FLAMA(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L2590]  RET         call CorralChoice_FLAMA(this);

Loop:
[L2590]  CALL        call CorralChoice_FLAMA(this);
[L2446]              havoc msgsender_MSG;
[L2447]              havoc msgvalue_MSG;
[L2448]              havoc choice;
[L2449]              havoc __ret_0_totalSupply;
[L2450]              havoc owner_s308;
[L2451]              havoc __ret_0_balanceOf;
[L2452]              havoc owner_s324;
[L2453]              havoc spender_s324;
[L2454]              havoc __ret_0_allowance;
[L2455]              havoc to_s343;
[L2456]              havoc value_s343;
[L2457]              havoc __ret_0_transfer;
[L2458]              havoc spender_s379;
[L2459]              havoc value_s379;
[L2460]              havoc __ret_0_approve;
[L2461]              havoc from_s416;
[L2462]              havoc to_s416;
[L2463]              havoc value_s416;
[L2464]              havoc __ret_0_transferFrom;
[L2465]              havoc value_s229;
[L2466]              havoc name_s264;
[L2467]              havoc symbol_s264;
[L2468]              havoc decimals_s264;
[L2469]              havoc totalSupply_s264;
[L2470]              havoc __ret_0_name;
[L2471]              havoc __ret_0_symbol;
[L2472]              havoc __ret_0_decimals;
[L2473]              havoc spender_s466;
[L2474]              havoc addedValue_s466;
[L2475]              havoc __ret_0_increaseAllowance;
[L2476]              havoc spender_s516;
[L2477]              havoc subtractedValue_s516;
[L2478]              havoc __ret_0_decreaseAllowance;
[L2479]              havoc tmpNow;
[L2480]              havoc gas;
[L2481]              assume gas > 4000000 && gas <= 8000000;
[L2482]              tmpNow := now;
[L2483]              havoc now;
[L2484]              assume now > tmpNow;
[L2485]              assume msgsender_MSG != null;
[L2486]              assume DType[msgsender_MSG] != SafeMath;
[L2487]              assume DType[msgsender_MSG] != IERC20;
[L2488]              assume DType[msgsender_MSG] != FLAMA;
[L2489]              Alloc[msgsender_MSG] := true;
[L2490]  COND FALSE  !(choice == 12)
[L2496]  COND FALSE  !(choice == 11)
[L2502]  COND FALSE  !(choice == 10)
[L2508]  COND FALSE  !(choice == 9)
[L2515]  COND FALSE  !(choice == 8)
[L2522]  COND TRUE   choice == 7
[L2523]              gas := gas - 21000;
[L2524]  COND TRUE   gas >= 0
[L2525]              assume value_s416 >= 0 && value_s416 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2526]              assume msgvalue_MSG == 0;
[L2527]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_FLAMA(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s416 == to_s416 && (value_s416 > _balances_FLAMA[this][from_s416] || value_s416 > _allowed_FLAMA[this][from_s416][msgsender_MSG])) && value_s416 >= 0) && value_s416 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_FLAMA[this][to_s416] >= 0) && _balances_FLAMA[this][to_s416] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_FLAMA[this][from_s416] >= 0) && _balances_FLAMA[this][from_s416] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_FLAMA[this][from_s416][msgsender_MSG] >= 0) && _allowed_FLAMA[this][from_s416][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_FLAMA0 := true;
[L2]                 call_transferFrom_FLAMA0 := false;
[L2]                 revert := revert_hold;
[L721]               havoc __exception;
[L722]               revert := false;
[L723]   COND FALSE  !(__exception)
[L744]   CALL        call __ret_0_ := transferFrom~address~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L1606]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_FLAMA[this][from_s416][msgsender_MSG], value_s416);
[L1291]  COND TRUE   !(b_s82 <= a_s82)
[L1292]              revert := true;
[L1606]  RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_FLAMA[this][from_s416][msgsender_MSG], value_s416);
[L1607]  COND TRUE   revert
[L744]   RET         call __ret_0_ := transferFrom~address~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L745]               assume !revert && gas >= 0;
[L2527]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_FLAMA(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L2590]  RET         call CorralChoice_FLAMA(this);

[2020-11-25 16:34:06,196 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:34:06,196 INFO  L82        PathProgramCache]: Analyzing trace with hash 371068296, now seen corresponding path program 1 times
[2020-11-25 16:34:06,198 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:34:06,209 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:34:06,231 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 16:34:06,231 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:34:06,231 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 16:34:06,232 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:34:06,233 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 16:34:06,233 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 16:34:06,233 INFO  L87              Difference]: Start difference. First operand 1769 states and 1976 transitions. cyclomatic complexity: 209 Second operand 4 states.
[2020-11-25 16:34:06,553 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:34:06,553 INFO  L93              Difference]: Finished difference Result 2358 states and 2613 transitions.
[2020-11-25 16:34:06,553 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 16:34:06,553 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2358 states and 2613 transitions.
[2020-11-25 16:34:06,563 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 16:34:06,573 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2358 states to 2212 states and 2445 transitions.
[2020-11-25 16:34:06,573 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 636
[2020-11-25 16:34:06,574 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 655
[2020-11-25 16:34:06,574 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2212 states and 2445 transitions.
[2020-11-25 16:34:06,577 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:34:06,577 INFO  L728         BuchiCegarLoop]: Abstraction has 2212 states and 2445 transitions.
[2020-11-25 16:34:06,579 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2212 states and 2445 transitions.
[2020-11-25 16:34:06,598 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2212 to 1952.
[2020-11-25 16:34:06,599 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1952 states.
[2020-11-25 16:34:06,602 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1952 states to 1952 states and 2122 transitions.
[2020-11-25 16:34:06,602 INFO  L751         BuchiCegarLoop]: Abstraction has 1952 states and 2122 transitions.
[2020-11-25 16:34:06,602 INFO  L631         BuchiCegarLoop]: Abstraction has 1952 states and 2122 transitions.
[2020-11-25 16:34:06,602 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 16:34:06,602 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1952 states and 2122 transitions.
[2020-11-25 16:34:06,606 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 16:34:06,606 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:34:06,606 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:34:06,608 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:34:06,609 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [4, 4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_FLAMA0 := false;
[L2]                 call_transferFrom_FLAMA0 := false;
[L2]     CALL        call main();
[L2580]              assume null == 0;
[L2581]  CALL        call this := FreshRefGenerator__success();
[L1182]              havoc newRef;
[L1183]              assume Alloc[newRef] == false;
[L1184]              Alloc[newRef] := true;
[L1185]              assume newRef != null;
[L2581]  RET         call this := FreshRefGenerator__success();
[L2582]              assume now >= 0;
[L2583]              assume DType[this] == FLAMA;
[L2584]              assume msgvalue_MSG == 0;
[L2585]              gas := gas - 53000;
[L2586]  CALL        call FLAMA_FLAMA(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L261]               havoc __exception;
[L262]               revert := false;
[L263]   COND FALSE  !(__exception)
[L284]   CALL        call FLAMA_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L1452]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1370]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1355]              assume msgsender_MSG != null;
[L1356]              Balance[this] := 0;
[L1370]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1371]  COND FALSE  !(revert)
[L1452]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1453]  COND FALSE  !(revert)
[L1456]  CALL        call FLAMA_FLAMA_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L1418]              assume msgsender_MSG != null;
[L1419]              Balance[this] := 0;
[L1420]              _name_FLAMA[this] := 965843050;
[L1421]              _symbol_FLAMA[this] := 965843050;
[L1422]              _decimals_FLAMA[this] := 0;
[L1423]              _totalSupply_FLAMA[this] := 0;
[L1424]              _balances_FLAMA[this] := zeroRefintArr();
[L1425]              sum__balances0[this] := 0;
[L1426]              _allowed_FLAMA[this] := zeroRefRefintArr();
[L1427]              sum__allowed1[this] := 0;
[L1429]              _name_FLAMA[this] := name_s264;
[L1430]              _symbol_FLAMA[this] := symbol_s264;
[L1431]              _decimals_FLAMA[this] := decimals_s264;
[L1432]              _totalSupply_FLAMA[this] := totalSupply_s264;
[L1433]              sum__balances0[this] := sum__balances0[this] - _balances_FLAMA[this][msgsender_MSG];
[L1434]              _balances_FLAMA[this][msgsender_MSG] := _totalSupply_FLAMA[this];
[L1435]              sum__balances0[this] := sum__balances0[this] + _balances_FLAMA[this][msgsender_MSG];
[L1456]  RET         call FLAMA_FLAMA_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L1457]  COND FALSE  !(revert)
[L284]   RET         call FLAMA_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L285]               assume !revert && gas >= 0;
[L2586]  RET         call FLAMA_FLAMA(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L2587]              assume !revert && gas >= 0;
[L2590]  CALL        call CorralChoice_FLAMA(this);
[L2446]              havoc msgsender_MSG;
[L2447]              havoc msgvalue_MSG;
[L2448]              havoc choice;
[L2449]              havoc __ret_0_totalSupply;
[L2450]              havoc owner_s308;
[L2451]              havoc __ret_0_balanceOf;
[L2452]              havoc owner_s324;
[L2453]              havoc spender_s324;
[L2454]              havoc __ret_0_allowance;
[L2455]              havoc to_s343;
[L2456]              havoc value_s343;
[L2457]              havoc __ret_0_transfer;
[L2458]              havoc spender_s379;
[L2459]              havoc value_s379;
[L2460]              havoc __ret_0_approve;
[L2461]              havoc from_s416;
[L2462]              havoc to_s416;
[L2463]              havoc value_s416;
[L2464]              havoc __ret_0_transferFrom;
[L2465]              havoc value_s229;
[L2466]              havoc name_s264;
[L2467]              havoc symbol_s264;
[L2468]              havoc decimals_s264;
[L2469]              havoc totalSupply_s264;
[L2470]              havoc __ret_0_name;
[L2471]              havoc __ret_0_symbol;
[L2472]              havoc __ret_0_decimals;
[L2473]              havoc spender_s466;
[L2474]              havoc addedValue_s466;
[L2475]              havoc __ret_0_increaseAllowance;
[L2476]              havoc spender_s516;
[L2477]              havoc subtractedValue_s516;
[L2478]              havoc __ret_0_decreaseAllowance;
[L2479]              havoc tmpNow;
[L2480]              havoc gas;
[L2481]              assume gas > 4000000 && gas <= 8000000;
[L2482]              tmpNow := now;
[L2483]              havoc now;
[L2484]              assume now > tmpNow;
[L2485]              assume msgsender_MSG != null;
[L2486]              assume DType[msgsender_MSG] != SafeMath;
[L2487]              assume DType[msgsender_MSG] != IERC20;
[L2488]              assume DType[msgsender_MSG] != FLAMA;
[L2489]              Alloc[msgsender_MSG] := true;
[L2490]  COND FALSE  !(choice == 12)
[L2496]  COND FALSE  !(choice == 11)
[L2502]  COND FALSE  !(choice == 10)
[L2508]  COND FALSE  !(choice == 9)
[L2515]  COND FALSE  !(choice == 8)
[L2522]  COND TRUE   choice == 7
[L2523]              gas := gas - 21000;
[L2524]  COND TRUE   gas >= 0
[L2525]              assume value_s416 >= 0 && value_s416 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2526]              assume msgvalue_MSG == 0;
[L2527]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_FLAMA(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s416 == to_s416 && (value_s416 > _balances_FLAMA[this][from_s416] || value_s416 > _allowed_FLAMA[this][from_s416][msgsender_MSG])) && value_s416 >= 0) && value_s416 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_FLAMA[this][to_s416] >= 0) && _balances_FLAMA[this][to_s416] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_FLAMA[this][from_s416] >= 0) && _balances_FLAMA[this][from_s416] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_FLAMA[this][from_s416][msgsender_MSG] >= 0) && _allowed_FLAMA[this][from_s416][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_FLAMA0 := true;
[L2]                 call_transferFrom_FLAMA0 := false;
[L2]                 revert := revert_hold;
[L721]               havoc __exception;
[L722]               revert := false;
[L723]   COND FALSE  !(__exception)
[L744]   CALL        call __ret_0_ := transferFrom~address~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L1606]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_FLAMA[this][from_s416][msgsender_MSG], value_s416);
[L1291]  COND FALSE  !(!(b_s82 <= a_s82))
[L1295]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1296]              __ret_0_ := c_s82;
[L1606]  RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_FLAMA[this][from_s416][msgsender_MSG], value_s416);
[L1607]  COND FALSE  !(revert)
[L1610]              sum__allowed1[from_s416] := sum__allowed1[from_s416] - _allowed_FLAMA[this][from_s416][msgsender_MSG];
[L1611]              _allowed_FLAMA[this][from_s416][msgsender_MSG] := __var_2;
[L1612]              sum__allowed1[from_s416] := sum__allowed1[from_s416] + _allowed_FLAMA[this][from_s416][msgsender_MSG];
[L1613]  CALL        call _transfer~address~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L1762]              __var_7 := null;
[L1763]  COND FALSE  !(!(to_s598 != null))
[L1767]  CALL        call onePercent_s598 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s598, 100);
[L1267]  COND FALSE  !(!(b_s58 > 0))
[L1271]              c_s58 := nonlinearDiv(a_s58, b_s58) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1272]              __ret_0_ := c_s58;
[L1767]  RET         call onePercent_s598 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s598, 100);
[L1768]  COND FALSE  !(revert)
[L1771]              onePercent_s598 := onePercent_s598;
[L1772]  CALL        call burnAmount_s598 := mul~uint256~uint256_SafeMath__success(this, this, 0, onePercent_s598, 3);
[L1239]  COND TRUE   a_s34 == 0
[L1240]              __ret_0_ := 0;
[L1772]  RET         call burnAmount_s598 := mul~uint256~uint256_SafeMath__success(this, this, 0, onePercent_s598, 3);
[L1773]  COND FALSE  !(revert)
[L1776]              burnAmount_s598 := burnAmount_s598;
[L1777]  CALL        call newTransferAmount_s598 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s598, burnAmount_s598);
[L1291]  COND FALSE  !(!(b_s82 <= a_s82))
[L1295]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1296]              __ret_0_ := c_s82;
[L1777]  RET         call newTransferAmount_s598 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s598, burnAmount_s598);
[L1778]  COND FALSE  !(revert)
[L1781]              newTransferAmount_s598 := newTransferAmount_s598;
[L1782]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_FLAMA[this], burnAmount_s598);
[L1291]  COND FALSE  !(!(b_s82 <= a_s82))
[L1295]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1296]              __ret_0_ := c_s82;
[L1782]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_FLAMA[this], burnAmount_s598);
[L1783]  COND FALSE  !(revert)
[L1786]              _totalSupply_FLAMA[this] := __var_8;
[L1787]  CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][from_s598], value_s598);
[L1291]  COND FALSE  !(!(b_s82 <= a_s82))
[L1295]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1296]              __ret_0_ := c_s82;
[L1787]  RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][from_s598], value_s598);
[L1788]  COND FALSE  !(revert)
[L1791]              sum__balances0[this] := sum__balances0[this] - _balances_FLAMA[this][from_s598];
[L1792]              _balances_FLAMA[this][from_s598] := __var_9;
[L1793]              sum__balances0[this] := sum__balances0[this] + _balances_FLAMA[this][from_s598];
[L1794]  CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][to_s598], newTransferAmount_s598);
[L1315]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1316]  COND FALSE  !(!(c_s106 >= a_s106))
[L1320]              __ret_0_ := c_s106;
[L1794]  RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][to_s598], newTransferAmount_s598);
[L1795]  COND FALSE  !(revert)
[L1798]              sum__balances0[this] := sum__balances0[this] - _balances_FLAMA[this][to_s598];
[L1799]              _balances_FLAMA[this][to_s598] := __var_10;
[L1800]              sum__balances0[this] := sum__balances0[this] + _balances_FLAMA[this][to_s598];
[L1801]              assert { :EventEmitted "Transfer_FLAMA" } true;
[L1802]              assert { :EventEmitted "Transfer_FLAMA" } true;
[L1613]  RET         call _transfer~address~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L1614]  COND FALSE  !(revert)
[L1617]              __ret_0_ := true;
[L744]   RET         call __ret_0_ := transferFrom~address~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L745]               assume !revert && gas >= 0;
[L2527]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_FLAMA(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L2590]  RET         call CorralChoice_FLAMA(this);

Loop:
[L2590]  CALL        call CorralChoice_FLAMA(this);
[L2446]              havoc msgsender_MSG;
[L2447]              havoc msgvalue_MSG;
[L2448]              havoc choice;
[L2449]              havoc __ret_0_totalSupply;
[L2450]              havoc owner_s308;
[L2451]              havoc __ret_0_balanceOf;
[L2452]              havoc owner_s324;
[L2453]              havoc spender_s324;
[L2454]              havoc __ret_0_allowance;
[L2455]              havoc to_s343;
[L2456]              havoc value_s343;
[L2457]              havoc __ret_0_transfer;
[L2458]              havoc spender_s379;
[L2459]              havoc value_s379;
[L2460]              havoc __ret_0_approve;
[L2461]              havoc from_s416;
[L2462]              havoc to_s416;
[L2463]              havoc value_s416;
[L2464]              havoc __ret_0_transferFrom;
[L2465]              havoc value_s229;
[L2466]              havoc name_s264;
[L2467]              havoc symbol_s264;
[L2468]              havoc decimals_s264;
[L2469]              havoc totalSupply_s264;
[L2470]              havoc __ret_0_name;
[L2471]              havoc __ret_0_symbol;
[L2472]              havoc __ret_0_decimals;
[L2473]              havoc spender_s466;
[L2474]              havoc addedValue_s466;
[L2475]              havoc __ret_0_increaseAllowance;
[L2476]              havoc spender_s516;
[L2477]              havoc subtractedValue_s516;
[L2478]              havoc __ret_0_decreaseAllowance;
[L2479]              havoc tmpNow;
[L2480]              havoc gas;
[L2481]              assume gas > 4000000 && gas <= 8000000;
[L2482]              tmpNow := now;
[L2483]              havoc now;
[L2484]              assume now > tmpNow;
[L2485]              assume msgsender_MSG != null;
[L2486]              assume DType[msgsender_MSG] != SafeMath;
[L2487]              assume DType[msgsender_MSG] != IERC20;
[L2488]              assume DType[msgsender_MSG] != FLAMA;
[L2489]              Alloc[msgsender_MSG] := true;
[L2490]  COND FALSE  !(choice == 12)
[L2496]  COND FALSE  !(choice == 11)
[L2502]  COND FALSE  !(choice == 10)
[L2508]  COND FALSE  !(choice == 9)
[L2515]  COND FALSE  !(choice == 8)
[L2522]  COND TRUE   choice == 7
[L2523]              gas := gas - 21000;
[L2524]  COND TRUE   gas >= 0
[L2525]              assume value_s416 >= 0 && value_s416 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2526]              assume msgvalue_MSG == 0;
[L2527]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_FLAMA(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s416 == to_s416 && (value_s416 > _balances_FLAMA[this][from_s416] || value_s416 > _allowed_FLAMA[this][from_s416][msgsender_MSG])) && value_s416 >= 0) && value_s416 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_FLAMA[this][to_s416] >= 0) && _balances_FLAMA[this][to_s416] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_FLAMA[this][from_s416] >= 0) && _balances_FLAMA[this][from_s416] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_FLAMA[this][from_s416][msgsender_MSG] >= 0) && _allowed_FLAMA[this][from_s416][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_FLAMA0 := true;
[L2]                 call_transferFrom_FLAMA0 := false;
[L2]                 revert := revert_hold;
[L721]               havoc __exception;
[L722]               revert := false;
[L723]   COND FALSE  !(__exception)
[L744]   CALL        call __ret_0_ := transferFrom~address~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L1606]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_FLAMA[this][from_s416][msgsender_MSG], value_s416);
[L1291]  COND FALSE  !(!(b_s82 <= a_s82))
[L1295]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1296]              __ret_0_ := c_s82;
[L1606]  RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_FLAMA[this][from_s416][msgsender_MSG], value_s416);
[L1607]  COND FALSE  !(revert)
[L1610]              sum__allowed1[from_s416] := sum__allowed1[from_s416] - _allowed_FLAMA[this][from_s416][msgsender_MSG];
[L1611]              _allowed_FLAMA[this][from_s416][msgsender_MSG] := __var_2;
[L1612]              sum__allowed1[from_s416] := sum__allowed1[from_s416] + _allowed_FLAMA[this][from_s416][msgsender_MSG];
[L1613]  CALL        call _transfer~address~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L1762]              __var_7 := null;
[L1763]  COND FALSE  !(!(to_s598 != null))
[L1767]  CALL        call onePercent_s598 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s598, 100);
[L1267]  COND FALSE  !(!(b_s58 > 0))
[L1271]              c_s58 := nonlinearDiv(a_s58, b_s58) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1272]              __ret_0_ := c_s58;
[L1767]  RET         call onePercent_s598 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s598, 100);
[L1768]  COND FALSE  !(revert)
[L1771]              onePercent_s598 := onePercent_s598;
[L1772]  CALL        call burnAmount_s598 := mul~uint256~uint256_SafeMath__success(this, this, 0, onePercent_s598, 3);
[L1239]  COND TRUE   a_s34 == 0
[L1240]              __ret_0_ := 0;
[L1772]  RET         call burnAmount_s598 := mul~uint256~uint256_SafeMath__success(this, this, 0, onePercent_s598, 3);
[L1773]  COND FALSE  !(revert)
[L1776]              burnAmount_s598 := burnAmount_s598;
[L1777]  CALL        call newTransferAmount_s598 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s598, burnAmount_s598);
[L1291]  COND FALSE  !(!(b_s82 <= a_s82))
[L1295]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1296]              __ret_0_ := c_s82;
[L1777]  RET         call newTransferAmount_s598 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s598, burnAmount_s598);
[L1778]  COND FALSE  !(revert)
[L1781]              newTransferAmount_s598 := newTransferAmount_s598;
[L1782]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_FLAMA[this], burnAmount_s598);
[L1291]  COND FALSE  !(!(b_s82 <= a_s82))
[L1295]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1296]              __ret_0_ := c_s82;
[L1782]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_FLAMA[this], burnAmount_s598);
[L1783]  COND FALSE  !(revert)
[L1786]              _totalSupply_FLAMA[this] := __var_8;
[L1787]  CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][from_s598], value_s598);
[L1291]  COND FALSE  !(!(b_s82 <= a_s82))
[L1295]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1296]              __ret_0_ := c_s82;
[L1787]  RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][from_s598], value_s598);
[L1788]  COND FALSE  !(revert)
[L1791]              sum__balances0[this] := sum__balances0[this] - _balances_FLAMA[this][from_s598];
[L1792]              _balances_FLAMA[this][from_s598] := __var_9;
[L1793]              sum__balances0[this] := sum__balances0[this] + _balances_FLAMA[this][from_s598];
[L1794]  CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][to_s598], newTransferAmount_s598);
[L1315]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1316]  COND FALSE  !(!(c_s106 >= a_s106))
[L1320]              __ret_0_ := c_s106;
[L1794]  RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][to_s598], newTransferAmount_s598);
[L1795]  COND FALSE  !(revert)
[L1798]              sum__balances0[this] := sum__balances0[this] - _balances_FLAMA[this][to_s598];
[L1799]              _balances_FLAMA[this][to_s598] := __var_10;
[L1800]              sum__balances0[this] := sum__balances0[this] + _balances_FLAMA[this][to_s598];
[L1801]              assert { :EventEmitted "Transfer_FLAMA" } true;
[L1802]              assert { :EventEmitted "Transfer_FLAMA" } true;
[L1613]  RET         call _transfer~address~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L1614]  COND FALSE  !(revert)
[L1617]              __ret_0_ := true;
[L744]   RET         call __ret_0_ := transferFrom~address~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L745]               assume !revert && gas >= 0;
[L2527]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_FLAMA(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L2590]  RET         call CorralChoice_FLAMA(this);

[2020-11-25 16:34:06,613 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:34:06,613 INFO  L82        PathProgramCache]: Analyzing trace with hash -1584799035, now seen corresponding path program 1 times
[2020-11-25 16:34:06,613 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:34:06,630 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:34:06,752 INFO  L134       CoverageAnalysis]: Checked inductivity of 30 backedges. 0 proven. 12 refuted. 0 times theorem prover too weak. 18 trivial. 0 not checked.
[2020-11-25 16:34:06,752 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 16:34:06,752 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [12] total 12
[2020-11-25 16:34:06,753 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:34:06,753 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 13 interpolants.
[2020-11-25 16:34:06,754 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=24, Invalid=132, Unknown=0, NotChecked=0, Total=156
[2020-11-25 16:34:06,754 INFO  L87              Difference]: Start difference. First operand 1952 states and 2122 transitions. cyclomatic complexity: 172 Second operand 13 states.
[2020-11-25 16:34:07,876 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:34:07,877 INFO  L93              Difference]: Finished difference Result 2036 states and 2218 transitions.
[2020-11-25 16:34:07,877 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 13 states. 
[2020-11-25 16:34:07,877 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2036 states and 2218 transitions.
[2020-11-25 16:34:07,884 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 16:34:07,891 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2036 states to 2036 states and 2218 transitions.
[2020-11-25 16:34:07,891 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 626
[2020-11-25 16:34:07,891 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 626
[2020-11-25 16:34:07,891 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2036 states and 2218 transitions.
[2020-11-25 16:34:07,894 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:34:07,894 INFO  L728         BuchiCegarLoop]: Abstraction has 2036 states and 2218 transitions.
[2020-11-25 16:34:07,896 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2036 states and 2218 transitions.
[2020-11-25 16:34:07,911 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2036 to 1876.
[2020-11-25 16:34:07,911 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1876 states.
[2020-11-25 16:34:07,914 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1876 states to 1876 states and 2025 transitions.
[2020-11-25 16:34:07,914 INFO  L751         BuchiCegarLoop]: Abstraction has 1876 states and 2025 transitions.
[2020-11-25 16:34:07,914 INFO  L631         BuchiCegarLoop]: Abstraction has 1876 states and 2025 transitions.
[2020-11-25 16:34:07,914 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 16:34:07,915 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1876 states and 2025 transitions.
[2020-11-25 16:34:07,918 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:34:07,918 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:34:07,918 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:34:07,921 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:34:07,921 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_FLAMA0 := false;
[L2]                 call_transferFrom_FLAMA0 := false;
[L2]     CALL        call main();
[L2580]              assume null == 0;
[L2581]  CALL        call this := FreshRefGenerator__success();
[L1182]              havoc newRef;
[L1183]              assume Alloc[newRef] == false;
[L1184]              Alloc[newRef] := true;
[L1185]              assume newRef != null;
[L2581]  RET         call this := FreshRefGenerator__success();
[L2582]              assume now >= 0;
[L2583]              assume DType[this] == FLAMA;
[L2584]              assume msgvalue_MSG == 0;
[L2585]              gas := gas - 53000;
[L2586]  CALL        call FLAMA_FLAMA(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L261]               havoc __exception;
[L262]               revert := false;
[L263]   COND TRUE   __exception
[L264]               __tmp__Balance := Balance;
[L265]               __tmp__DType := DType;
[L266]               __tmp__Alloc := Alloc;
[L267]               __tmp__balance_ADDR := balance_ADDR;
[L268]               __tmp__M_Ref_int := M_Ref_int;
[L269]               __tmp__sum__balances0 := sum__balances0;
[L270]               __tmp__alloc__allowed_FLAMA_lvl0 := alloc__allowed_FLAMA_lvl0;
[L271]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L272]               __tmp__sum__allowed1 := sum__allowed1;
[L273]               __tmp__Length := Length;
[L274]               __tmp__now := now;
[L275]               __tmp___name_FLAMA := _name_FLAMA;
[L276]               __tmp___symbol_FLAMA := _symbol_FLAMA;
[L277]               __tmp___decimals_FLAMA := _decimals_FLAMA;
[L278]               __tmp___totalSupply_FLAMA := _totalSupply_FLAMA;
[L279]               __tmp___balances_FLAMA := _balances_FLAMA;
[L280]               __tmp___allowed_FLAMA := _allowed_FLAMA;
[L281]   CALL        call FLAMA_FLAMA__fail(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L1440]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L1362]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1347]              assume msgsender_MSG != null;
[L1348]              __tmp__Balance[this] := 0;
[L1362]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1363]  COND FALSE  !(revert)
[L1440]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L1441]  COND FALSE  !(revert)
[L1444]  CALL        call FLAMA_FLAMA_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L1395]              assume msgsender_MSG != null;
[L1396]              __tmp__Balance[this] := 0;
[L1397]              __tmp___name_FLAMA[this] := 965843050;
[L1398]              __tmp___symbol_FLAMA[this] := 965843050;
[L1399]              __tmp___decimals_FLAMA[this] := 0;
[L1400]              __tmp___totalSupply_FLAMA[this] := 0;
[L1401]              __tmp___balances_FLAMA[this] := zeroRefintArr();
[L1402]              __tmp__sum__balances0[this] := 0;
[L1403]              __tmp___allowed_FLAMA[this] := zeroRefRefintArr();
[L1404]              __tmp__sum__allowed1[this] := 0;
[L1406]              __tmp___name_FLAMA[this] := name_s264;
[L1407]              __tmp___symbol_FLAMA[this] := symbol_s264;
[L1408]              __tmp___decimals_FLAMA[this] := decimals_s264;
[L1409]              __tmp___totalSupply_FLAMA[this] := totalSupply_s264;
[L1410]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_FLAMA[this][msgsender_MSG];
[L1411]              __tmp___balances_FLAMA[this][msgsender_MSG] := __tmp___totalSupply_FLAMA[this];
[L1412]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_FLAMA[this][msgsender_MSG];
[L1444]  RET         call FLAMA_FLAMA_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L1445]  COND FALSE  !(revert)
[L281]   RET         call FLAMA_FLAMA__fail(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L282]               assume revert || gas < 0;
[L2586]  RET         call FLAMA_FLAMA(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L2587]              assume !revert && gas >= 0;
[L2590]  CALL        call CorralChoice_FLAMA(this);
[L2446]              havoc msgsender_MSG;
[L2447]              havoc msgvalue_MSG;
[L2448]              havoc choice;
[L2449]              havoc __ret_0_totalSupply;
[L2450]              havoc owner_s308;
[L2451]              havoc __ret_0_balanceOf;
[L2452]              havoc owner_s324;
[L2453]              havoc spender_s324;
[L2454]              havoc __ret_0_allowance;
[L2455]              havoc to_s343;
[L2456]              havoc value_s343;
[L2457]              havoc __ret_0_transfer;
[L2458]              havoc spender_s379;
[L2459]              havoc value_s379;
[L2460]              havoc __ret_0_approve;
[L2461]              havoc from_s416;
[L2462]              havoc to_s416;
[L2463]              havoc value_s416;
[L2464]              havoc __ret_0_transferFrom;
[L2465]              havoc value_s229;
[L2466]              havoc name_s264;
[L2467]              havoc symbol_s264;
[L2468]              havoc decimals_s264;
[L2469]              havoc totalSupply_s264;
[L2470]              havoc __ret_0_name;
[L2471]              havoc __ret_0_symbol;
[L2472]              havoc __ret_0_decimals;
[L2473]              havoc spender_s466;
[L2474]              havoc addedValue_s466;
[L2475]              havoc __ret_0_increaseAllowance;
[L2476]              havoc spender_s516;
[L2477]              havoc subtractedValue_s516;
[L2478]              havoc __ret_0_decreaseAllowance;
[L2479]              havoc tmpNow;
[L2480]              havoc gas;
[L2481]              assume gas > 4000000 && gas <= 8000000;
[L2482]              tmpNow := now;
[L2483]              havoc now;
[L2484]              assume now > tmpNow;
[L2485]              assume msgsender_MSG != null;
[L2486]              assume DType[msgsender_MSG] != SafeMath;
[L2487]              assume DType[msgsender_MSG] != IERC20;
[L2488]              assume DType[msgsender_MSG] != FLAMA;
[L2489]              Alloc[msgsender_MSG] := true;
[L2490]  COND FALSE  !(choice == 12)
[L2496]  COND FALSE  !(choice == 11)
[L2502]  COND FALSE  !(choice == 10)
[L2508]  COND FALSE  !(choice == 9)
[L2515]  COND FALSE  !(choice == 8)
[L2522]  COND TRUE   choice == 7
[L2523]              gas := gas - 21000;
[L2524]  COND TRUE   gas >= 0
[L2525]              assume value_s416 >= 0 && value_s416 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2526]              assume msgvalue_MSG == 0;
[L2527]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_FLAMA(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s416 == to_s416 && (value_s416 > _balances_FLAMA[this][from_s416] || value_s416 > _allowed_FLAMA[this][from_s416][msgsender_MSG])) && value_s416 >= 0) && value_s416 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_FLAMA[this][to_s416] >= 0) && _balances_FLAMA[this][to_s416] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_FLAMA[this][from_s416] >= 0) && _balances_FLAMA[this][from_s416] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_FLAMA[this][from_s416][msgsender_MSG] >= 0) && _allowed_FLAMA[this][from_s416][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_FLAMA0 := true;
[L2]                 call_transferFrom_FLAMA0 := false;
[L2]                 revert := revert_hold;
[L721]               havoc __exception;
[L722]               revert := false;
[L723]   COND FALSE  !(__exception)
[L744]   CALL        call __ret_0_ := transferFrom~address~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L1606]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_FLAMA[this][from_s416][msgsender_MSG], value_s416);
[L1291]  COND FALSE  !(!(b_s82 <= a_s82))
[L1295]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1296]              __ret_0_ := c_s82;
[L1606]  RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_FLAMA[this][from_s416][msgsender_MSG], value_s416);
[L1607]  COND FALSE  !(revert)
[L1610]              sum__allowed1[from_s416] := sum__allowed1[from_s416] - _allowed_FLAMA[this][from_s416][msgsender_MSG];
[L1611]              _allowed_FLAMA[this][from_s416][msgsender_MSG] := __var_2;
[L1612]              sum__allowed1[from_s416] := sum__allowed1[from_s416] + _allowed_FLAMA[this][from_s416][msgsender_MSG];
[L1613]  CALL        call _transfer~address~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L1762]              __var_7 := null;
[L1763]  COND FALSE  !(!(to_s598 != null))
[L1767]  CALL        call onePercent_s598 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s598, 100);
[L1267]  COND FALSE  !(!(b_s58 > 0))
[L1271]              c_s58 := nonlinearDiv(a_s58, b_s58) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1272]              __ret_0_ := c_s58;
[L1767]  RET         call onePercent_s598 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s598, 100);
[L1768]  COND FALSE  !(revert)
[L1771]              onePercent_s598 := onePercent_s598;
[L1772]  CALL        call burnAmount_s598 := mul~uint256~uint256_SafeMath__success(this, this, 0, onePercent_s598, 3);
[L1239]  COND TRUE   a_s34 == 0
[L1240]              __ret_0_ := 0;
[L1772]  RET         call burnAmount_s598 := mul~uint256~uint256_SafeMath__success(this, this, 0, onePercent_s598, 3);
[L1773]  COND FALSE  !(revert)
[L1776]              burnAmount_s598 := burnAmount_s598;
[L1777]  CALL        call newTransferAmount_s598 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s598, burnAmount_s598);
[L1291]  COND FALSE  !(!(b_s82 <= a_s82))
[L1295]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1296]              __ret_0_ := c_s82;
[L1777]  RET         call newTransferAmount_s598 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s598, burnAmount_s598);
[L1778]  COND FALSE  !(revert)
[L1781]              newTransferAmount_s598 := newTransferAmount_s598;
[L1782]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_FLAMA[this], burnAmount_s598);
[L1291]  COND FALSE  !(!(b_s82 <= a_s82))
[L1295]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1296]              __ret_0_ := c_s82;
[L1782]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_FLAMA[this], burnAmount_s598);
[L1783]  COND FALSE  !(revert)
[L1786]              _totalSupply_FLAMA[this] := __var_8;
[L1787]  CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][from_s598], value_s598);
[L1291]  COND FALSE  !(!(b_s82 <= a_s82))
[L1295]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1296]              __ret_0_ := c_s82;
[L1787]  RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][from_s598], value_s598);
[L1788]  COND FALSE  !(revert)
[L1791]              sum__balances0[this] := sum__balances0[this] - _balances_FLAMA[this][from_s598];
[L1792]              _balances_FLAMA[this][from_s598] := __var_9;
[L1793]              sum__balances0[this] := sum__balances0[this] + _balances_FLAMA[this][from_s598];
[L1794]  CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][to_s598], newTransferAmount_s598);
[L1315]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1316]  COND FALSE  !(!(c_s106 >= a_s106))
[L1320]              __ret_0_ := c_s106;
[L1794]  RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][to_s598], newTransferAmount_s598);
[L1795]  COND FALSE  !(revert)
[L1798]              sum__balances0[this] := sum__balances0[this] - _balances_FLAMA[this][to_s598];
[L1799]              _balances_FLAMA[this][to_s598] := __var_10;
[L1800]              sum__balances0[this] := sum__balances0[this] + _balances_FLAMA[this][to_s598];
[L1801]              assert { :EventEmitted "Transfer_FLAMA" } true;
[L1802]              assert { :EventEmitted "Transfer_FLAMA" } true;
[L1613]  RET         call _transfer~address~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L1614]  COND FALSE  !(revert)
[L1617]              __ret_0_ := true;
[L744]   RET         call __ret_0_ := transferFrom~address~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L745]               assume !revert && gas >= 0;
[L2527]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_FLAMA(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L2590]  RET         call CorralChoice_FLAMA(this);

Loop:
[L2590]  CALL        call CorralChoice_FLAMA(this);
[L2446]              havoc msgsender_MSG;
[L2447]              havoc msgvalue_MSG;
[L2448]              havoc choice;
[L2449]              havoc __ret_0_totalSupply;
[L2450]              havoc owner_s308;
[L2451]              havoc __ret_0_balanceOf;
[L2452]              havoc owner_s324;
[L2453]              havoc spender_s324;
[L2454]              havoc __ret_0_allowance;
[L2455]              havoc to_s343;
[L2456]              havoc value_s343;
[L2457]              havoc __ret_0_transfer;
[L2458]              havoc spender_s379;
[L2459]              havoc value_s379;
[L2460]              havoc __ret_0_approve;
[L2461]              havoc from_s416;
[L2462]              havoc to_s416;
[L2463]              havoc value_s416;
[L2464]              havoc __ret_0_transferFrom;
[L2465]              havoc value_s229;
[L2466]              havoc name_s264;
[L2467]              havoc symbol_s264;
[L2468]              havoc decimals_s264;
[L2469]              havoc totalSupply_s264;
[L2470]              havoc __ret_0_name;
[L2471]              havoc __ret_0_symbol;
[L2472]              havoc __ret_0_decimals;
[L2473]              havoc spender_s466;
[L2474]              havoc addedValue_s466;
[L2475]              havoc __ret_0_increaseAllowance;
[L2476]              havoc spender_s516;
[L2477]              havoc subtractedValue_s516;
[L2478]              havoc __ret_0_decreaseAllowance;
[L2479]              havoc tmpNow;
[L2480]              havoc gas;
[L2481]              assume gas > 4000000 && gas <= 8000000;
[L2482]              tmpNow := now;
[L2483]              havoc now;
[L2484]              assume now > tmpNow;
[L2485]              assume msgsender_MSG != null;
[L2486]              assume DType[msgsender_MSG] != SafeMath;
[L2487]              assume DType[msgsender_MSG] != IERC20;
[L2488]              assume DType[msgsender_MSG] != FLAMA;
[L2489]              Alloc[msgsender_MSG] := true;
[L2490]  COND TRUE   choice == 12
[L2491]              gas := gas - 21000;
[L2492]  COND FALSE  !(gas >= 0)
[L2590]  RET         call CorralChoice_FLAMA(this);

[2020-11-25 16:34:07,924 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:34:07,924 INFO  L82        PathProgramCache]: Analyzing trace with hash -412381619, now seen corresponding path program 1 times
[2020-11-25 16:34:07,925 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:34:07,934 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:34:07,960 INFO  L134       CoverageAnalysis]: Checked inductivity of 30 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 30 trivial. 0 not checked.
[2020-11-25 16:34:07,961 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:34:07,961 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 16:34:07,961 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:34:07,961 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 16:34:07,961 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-11-25 16:34:07,961 INFO  L87              Difference]: Start difference. First operand 1876 states and 2025 transitions. cyclomatic complexity: 152 Second operand 4 states.
[2020-11-25 16:34:08,179 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:34:08,179 INFO  L93              Difference]: Finished difference Result 2397 states and 2684 transitions.
[2020-11-25 16:34:08,179 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 16:34:08,179 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2397 states and 2684 transitions.
[2020-11-25 16:34:08,186 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-25 16:34:08,194 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2397 states to 2333 states and 2620 transitions.
[2020-11-25 16:34:08,194 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 700
[2020-11-25 16:34:08,195 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 700
[2020-11-25 16:34:08,195 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2333 states and 2620 transitions.
[2020-11-25 16:34:08,197 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:34:08,197 INFO  L728         BuchiCegarLoop]: Abstraction has 2333 states and 2620 transitions.
[2020-11-25 16:34:08,199 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2333 states and 2620 transitions.
[2020-11-25 16:34:08,217 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2333 to 1812.
[2020-11-25 16:34:08,218 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1812 states.
[2020-11-25 16:34:08,220 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1812 states to 1812 states and 1960 transitions.
[2020-11-25 16:34:08,220 INFO  L751         BuchiCegarLoop]: Abstraction has 1812 states and 1960 transitions.
[2020-11-25 16:34:08,220 INFO  L631         BuchiCegarLoop]: Abstraction has 1812 states and 1960 transitions.
[2020-11-25 16:34:08,220 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 16:34:08,220 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1812 states and 1960 transitions.
[2020-11-25 16:34:08,223 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:34:08,223 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:34:08,223 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:34:08,225 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:34:08,225 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [4, 4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_FLAMA0 := false;
[L2]                 call_transferFrom_FLAMA0 := false;
[L2]     CALL        call main();
[L2580]              assume null == 0;
[L2581]  CALL        call this := FreshRefGenerator__success();
[L1182]              havoc newRef;
[L1183]              assume Alloc[newRef] == false;
[L1184]              Alloc[newRef] := true;
[L1185]              assume newRef != null;
[L2581]  RET         call this := FreshRefGenerator__success();
[L2582]              assume now >= 0;
[L2583]              assume DType[this] == FLAMA;
[L2584]              assume msgvalue_MSG == 0;
[L2585]              gas := gas - 53000;
[L2586]  CALL        call FLAMA_FLAMA(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L261]               havoc __exception;
[L262]               revert := false;
[L263]   COND FALSE  !(__exception)
[L284]   CALL        call FLAMA_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L1452]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1370]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1355]              assume msgsender_MSG != null;
[L1356]              Balance[this] := 0;
[L1370]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1371]  COND FALSE  !(revert)
[L1452]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1453]  COND FALSE  !(revert)
[L1456]  CALL        call FLAMA_FLAMA_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L1418]              assume msgsender_MSG != null;
[L1419]              Balance[this] := 0;
[L1420]              _name_FLAMA[this] := 965843050;
[L1421]              _symbol_FLAMA[this] := 965843050;
[L1422]              _decimals_FLAMA[this] := 0;
[L1423]              _totalSupply_FLAMA[this] := 0;
[L1424]              _balances_FLAMA[this] := zeroRefintArr();
[L1425]              sum__balances0[this] := 0;
[L1426]              _allowed_FLAMA[this] := zeroRefRefintArr();
[L1427]              sum__allowed1[this] := 0;
[L1429]              _name_FLAMA[this] := name_s264;
[L1430]              _symbol_FLAMA[this] := symbol_s264;
[L1431]              _decimals_FLAMA[this] := decimals_s264;
[L1432]              _totalSupply_FLAMA[this] := totalSupply_s264;
[L1433]              sum__balances0[this] := sum__balances0[this] - _balances_FLAMA[this][msgsender_MSG];
[L1434]              _balances_FLAMA[this][msgsender_MSG] := _totalSupply_FLAMA[this];
[L1435]              sum__balances0[this] := sum__balances0[this] + _balances_FLAMA[this][msgsender_MSG];
[L1456]  RET         call FLAMA_FLAMA_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L1457]  COND FALSE  !(revert)
[L284]   RET         call FLAMA_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L285]               assume !revert && gas >= 0;
[L2586]  RET         call FLAMA_FLAMA(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L2587]              assume !revert && gas >= 0;
[L2590]  CALL        call CorralChoice_FLAMA(this);
[L2446]              havoc msgsender_MSG;
[L2447]              havoc msgvalue_MSG;
[L2448]              havoc choice;
[L2449]              havoc __ret_0_totalSupply;
[L2450]              havoc owner_s308;
[L2451]              havoc __ret_0_balanceOf;
[L2452]              havoc owner_s324;
[L2453]              havoc spender_s324;
[L2454]              havoc __ret_0_allowance;
[L2455]              havoc to_s343;
[L2456]              havoc value_s343;
[L2457]              havoc __ret_0_transfer;
[L2458]              havoc spender_s379;
[L2459]              havoc value_s379;
[L2460]              havoc __ret_0_approve;
[L2461]              havoc from_s416;
[L2462]              havoc to_s416;
[L2463]              havoc value_s416;
[L2464]              havoc __ret_0_transferFrom;
[L2465]              havoc value_s229;
[L2466]              havoc name_s264;
[L2467]              havoc symbol_s264;
[L2468]              havoc decimals_s264;
[L2469]              havoc totalSupply_s264;
[L2470]              havoc __ret_0_name;
[L2471]              havoc __ret_0_symbol;
[L2472]              havoc __ret_0_decimals;
[L2473]              havoc spender_s466;
[L2474]              havoc addedValue_s466;
[L2475]              havoc __ret_0_increaseAllowance;
[L2476]              havoc spender_s516;
[L2477]              havoc subtractedValue_s516;
[L2478]              havoc __ret_0_decreaseAllowance;
[L2479]              havoc tmpNow;
[L2480]              havoc gas;
[L2481]              assume gas > 4000000 && gas <= 8000000;
[L2482]              tmpNow := now;
[L2483]              havoc now;
[L2484]              assume now > tmpNow;
[L2485]              assume msgsender_MSG != null;
[L2486]              assume DType[msgsender_MSG] != SafeMath;
[L2487]              assume DType[msgsender_MSG] != IERC20;
[L2488]              assume DType[msgsender_MSG] != FLAMA;
[L2489]              Alloc[msgsender_MSG] := true;
[L2490]  COND FALSE  !(choice == 12)
[L2496]  COND FALSE  !(choice == 11)
[L2502]  COND FALSE  !(choice == 10)
[L2508]  COND FALSE  !(choice == 9)
[L2515]  COND TRUE   choice == 8
[L2516]              gas := gas - 21000;
[L2517]  COND TRUE   gas >= 0
[L2518]              assume value_s379 >= 0 && value_s379 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2519]              assume msgvalue_MSG == 0;
[L2520]  CALL        call __ret_0_approve := approve~address~uint256_FLAMA(this, msgsender_MSG, msgvalue_MSG, spender_s379, value_s379);
[L666]               havoc __exception;
[L667]               revert := false;
[L668]   COND FALSE  !(__exception)
[L689]   CALL        call __ret_0_ := approve~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, spender_s379, value_s379);
[L1572]              __var_1 := null;
[L1573]  COND FALSE  !(!(spender_s379 != null))
[L1577]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_FLAMA[this][msgsender_MSG][spender_s379];
[L1578]              _allowed_FLAMA[this][msgsender_MSG][spender_s379] := value_s379;
[L1579]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_FLAMA[this][msgsender_MSG][spender_s379];
[L1580]              assert { :EventEmitted "Approval_FLAMA" } true;
[L1581]              __ret_0_ := true;
[L689]   RET         call __ret_0_ := approve~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, spender_s379, value_s379);
[L690]               assume !revert && gas >= 0;
[L2520]  RET         call __ret_0_approve := approve~address~uint256_FLAMA(this, msgsender_MSG, msgvalue_MSG, spender_s379, value_s379);
[L2590]  RET         call CorralChoice_FLAMA(this);
[L2590]  CALL        call CorralChoice_FLAMA(this);
[L2446]              havoc msgsender_MSG;
[L2447]              havoc msgvalue_MSG;
[L2448]              havoc choice;
[L2449]              havoc __ret_0_totalSupply;
[L2450]              havoc owner_s308;
[L2451]              havoc __ret_0_balanceOf;
[L2452]              havoc owner_s324;
[L2453]              havoc spender_s324;
[L2454]              havoc __ret_0_allowance;
[L2455]              havoc to_s343;
[L2456]              havoc value_s343;
[L2457]              havoc __ret_0_transfer;
[L2458]              havoc spender_s379;
[L2459]              havoc value_s379;
[L2460]              havoc __ret_0_approve;
[L2461]              havoc from_s416;
[L2462]              havoc to_s416;
[L2463]              havoc value_s416;
[L2464]              havoc __ret_0_transferFrom;
[L2465]              havoc value_s229;
[L2466]              havoc name_s264;
[L2467]              havoc symbol_s264;
[L2468]              havoc decimals_s264;
[L2469]              havoc totalSupply_s264;
[L2470]              havoc __ret_0_name;
[L2471]              havoc __ret_0_symbol;
[L2472]              havoc __ret_0_decimals;
[L2473]              havoc spender_s466;
[L2474]              havoc addedValue_s466;
[L2475]              havoc __ret_0_increaseAllowance;
[L2476]              havoc spender_s516;
[L2477]              havoc subtractedValue_s516;
[L2478]              havoc __ret_0_decreaseAllowance;
[L2479]              havoc tmpNow;
[L2480]              havoc gas;
[L2481]              assume gas > 4000000 && gas <= 8000000;
[L2482]              tmpNow := now;
[L2483]              havoc now;
[L2484]              assume now > tmpNow;
[L2485]              assume msgsender_MSG != null;
[L2486]              assume DType[msgsender_MSG] != SafeMath;
[L2487]              assume DType[msgsender_MSG] != IERC20;
[L2488]              assume DType[msgsender_MSG] != FLAMA;
[L2489]              Alloc[msgsender_MSG] := true;
[L2490]  COND FALSE  !(choice == 12)
[L2496]  COND FALSE  !(choice == 11)
[L2502]  COND FALSE  !(choice == 10)
[L2508]  COND FALSE  !(choice == 9)
[L2515]  COND FALSE  !(choice == 8)
[L2522]  COND TRUE   choice == 7
[L2523]              gas := gas - 21000;
[L2524]  COND TRUE   gas >= 0
[L2525]              assume value_s416 >= 0 && value_s416 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2526]              assume msgvalue_MSG == 0;
[L2527]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_FLAMA(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s416 == to_s416 && (value_s416 > _balances_FLAMA[this][from_s416] || value_s416 > _allowed_FLAMA[this][from_s416][msgsender_MSG])) && value_s416 >= 0) && value_s416 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_FLAMA[this][to_s416] >= 0) && _balances_FLAMA[this][to_s416] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_FLAMA[this][from_s416] >= 0) && _balances_FLAMA[this][from_s416] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_FLAMA[this][from_s416][msgsender_MSG] >= 0) && _allowed_FLAMA[this][from_s416][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_FLAMA0 := true;
[L2]                 call_transferFrom_FLAMA0 := false;
[L2]                 revert := revert_hold;
[L721]               havoc __exception;
[L722]               revert := false;
[L723]   COND FALSE  !(__exception)
[L744]   CALL        call __ret_0_ := transferFrom~address~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L1606]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_FLAMA[this][from_s416][msgsender_MSG], value_s416);
[L1291]  COND FALSE  !(!(b_s82 <= a_s82))
[L1295]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1296]              __ret_0_ := c_s82;
[L1606]  RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_FLAMA[this][from_s416][msgsender_MSG], value_s416);
[L1607]  COND FALSE  !(revert)
[L1610]              sum__allowed1[from_s416] := sum__allowed1[from_s416] - _allowed_FLAMA[this][from_s416][msgsender_MSG];
[L1611]              _allowed_FLAMA[this][from_s416][msgsender_MSG] := __var_2;
[L1612]              sum__allowed1[from_s416] := sum__allowed1[from_s416] + _allowed_FLAMA[this][from_s416][msgsender_MSG];
[L1613]  CALL        call _transfer~address~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L1762]              __var_7 := null;
[L1763]  COND FALSE  !(!(to_s598 != null))
[L1767]  CALL        call onePercent_s598 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s598, 100);
[L1267]  COND FALSE  !(!(b_s58 > 0))
[L1271]              c_s58 := nonlinearDiv(a_s58, b_s58) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1272]              __ret_0_ := c_s58;
[L1767]  RET         call onePercent_s598 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s598, 100);
[L1768]  COND FALSE  !(revert)
[L1771]              onePercent_s598 := onePercent_s598;
[L1772]  CALL        call burnAmount_s598 := mul~uint256~uint256_SafeMath__success(this, this, 0, onePercent_s598, 3);
[L1239]  COND TRUE   a_s34 == 0
[L1240]              __ret_0_ := 0;
[L1772]  RET         call burnAmount_s598 := mul~uint256~uint256_SafeMath__success(this, this, 0, onePercent_s598, 3);
[L1773]  COND FALSE  !(revert)
[L1776]              burnAmount_s598 := burnAmount_s598;
[L1777]  CALL        call newTransferAmount_s598 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s598, burnAmount_s598);
[L1291]  COND FALSE  !(!(b_s82 <= a_s82))
[L1295]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1296]              __ret_0_ := c_s82;
[L1777]  RET         call newTransferAmount_s598 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s598, burnAmount_s598);
[L1778]  COND FALSE  !(revert)
[L1781]              newTransferAmount_s598 := newTransferAmount_s598;
[L1782]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_FLAMA[this], burnAmount_s598);
[L1291]  COND FALSE  !(!(b_s82 <= a_s82))
[L1295]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1296]              __ret_0_ := c_s82;
[L1782]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_FLAMA[this], burnAmount_s598);
[L1783]  COND FALSE  !(revert)
[L1786]              _totalSupply_FLAMA[this] := __var_8;
[L1787]  CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][from_s598], value_s598);
[L1291]  COND FALSE  !(!(b_s82 <= a_s82))
[L1295]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1296]              __ret_0_ := c_s82;
[L1787]  RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][from_s598], value_s598);
[L1788]  COND FALSE  !(revert)
[L1791]              sum__balances0[this] := sum__balances0[this] - _balances_FLAMA[this][from_s598];
[L1792]              _balances_FLAMA[this][from_s598] := __var_9;
[L1793]              sum__balances0[this] := sum__balances0[this] + _balances_FLAMA[this][from_s598];
[L1794]  CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][to_s598], newTransferAmount_s598);
[L1315]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1316]  COND FALSE  !(!(c_s106 >= a_s106))
[L1320]              __ret_0_ := c_s106;
[L1794]  RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][to_s598], newTransferAmount_s598);
[L1795]  COND FALSE  !(revert)
[L1798]              sum__balances0[this] := sum__balances0[this] - _balances_FLAMA[this][to_s598];
[L1799]              _balances_FLAMA[this][to_s598] := __var_10;
[L1800]              sum__balances0[this] := sum__balances0[this] + _balances_FLAMA[this][to_s598];
[L1801]              assert { :EventEmitted "Transfer_FLAMA" } true;
[L1802]              assert { :EventEmitted "Transfer_FLAMA" } true;
[L1613]  RET         call _transfer~address~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L1614]  COND FALSE  !(revert)
[L1617]              __ret_0_ := true;
[L744]   RET         call __ret_0_ := transferFrom~address~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L745]               assume !revert && gas >= 0;
[L2527]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_FLAMA(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L2590]  RET         call CorralChoice_FLAMA(this);

Loop:
[L2590]  CALL        call CorralChoice_FLAMA(this);
[L2446]              havoc msgsender_MSG;
[L2447]              havoc msgvalue_MSG;
[L2448]              havoc choice;
[L2449]              havoc __ret_0_totalSupply;
[L2450]              havoc owner_s308;
[L2451]              havoc __ret_0_balanceOf;
[L2452]              havoc owner_s324;
[L2453]              havoc spender_s324;
[L2454]              havoc __ret_0_allowance;
[L2455]              havoc to_s343;
[L2456]              havoc value_s343;
[L2457]              havoc __ret_0_transfer;
[L2458]              havoc spender_s379;
[L2459]              havoc value_s379;
[L2460]              havoc __ret_0_approve;
[L2461]              havoc from_s416;
[L2462]              havoc to_s416;
[L2463]              havoc value_s416;
[L2464]              havoc __ret_0_transferFrom;
[L2465]              havoc value_s229;
[L2466]              havoc name_s264;
[L2467]              havoc symbol_s264;
[L2468]              havoc decimals_s264;
[L2469]              havoc totalSupply_s264;
[L2470]              havoc __ret_0_name;
[L2471]              havoc __ret_0_symbol;
[L2472]              havoc __ret_0_decimals;
[L2473]              havoc spender_s466;
[L2474]              havoc addedValue_s466;
[L2475]              havoc __ret_0_increaseAllowance;
[L2476]              havoc spender_s516;
[L2477]              havoc subtractedValue_s516;
[L2478]              havoc __ret_0_decreaseAllowance;
[L2479]              havoc tmpNow;
[L2480]              havoc gas;
[L2481]              assume gas > 4000000 && gas <= 8000000;
[L2482]              tmpNow := now;
[L2483]              havoc now;
[L2484]              assume now > tmpNow;
[L2485]              assume msgsender_MSG != null;
[L2486]              assume DType[msgsender_MSG] != SafeMath;
[L2487]              assume DType[msgsender_MSG] != IERC20;
[L2488]              assume DType[msgsender_MSG] != FLAMA;
[L2489]              Alloc[msgsender_MSG] := true;
[L2490]  COND FALSE  !(choice == 12)
[L2496]  COND FALSE  !(choice == 11)
[L2502]  COND FALSE  !(choice == 10)
[L2508]  COND FALSE  !(choice == 9)
[L2515]  COND FALSE  !(choice == 8)
[L2522]  COND TRUE   choice == 7
[L2523]              gas := gas - 21000;
[L2524]  COND TRUE   gas >= 0
[L2525]              assume value_s416 >= 0 && value_s416 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2526]              assume msgvalue_MSG == 0;
[L2527]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_FLAMA(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s416 == to_s416 && (value_s416 > _balances_FLAMA[this][from_s416] || value_s416 > _allowed_FLAMA[this][from_s416][msgsender_MSG])) && value_s416 >= 0) && value_s416 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_FLAMA[this][to_s416] >= 0) && _balances_FLAMA[this][to_s416] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_FLAMA[this][from_s416] >= 0) && _balances_FLAMA[this][from_s416] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_FLAMA[this][from_s416][msgsender_MSG] >= 0) && _allowed_FLAMA[this][from_s416][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_FLAMA0 := true;
[L2]                 call_transferFrom_FLAMA0 := false;
[L2]                 revert := revert_hold;
[L721]               havoc __exception;
[L722]               revert := false;
[L723]   COND FALSE  !(__exception)
[L744]   CALL        call __ret_0_ := transferFrom~address~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L1606]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_FLAMA[this][from_s416][msgsender_MSG], value_s416);
[L1291]  COND FALSE  !(!(b_s82 <= a_s82))
[L1295]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1296]              __ret_0_ := c_s82;
[L1606]  RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_FLAMA[this][from_s416][msgsender_MSG], value_s416);
[L1607]  COND FALSE  !(revert)
[L1610]              sum__allowed1[from_s416] := sum__allowed1[from_s416] - _allowed_FLAMA[this][from_s416][msgsender_MSG];
[L1611]              _allowed_FLAMA[this][from_s416][msgsender_MSG] := __var_2;
[L1612]              sum__allowed1[from_s416] := sum__allowed1[from_s416] + _allowed_FLAMA[this][from_s416][msgsender_MSG];
[L1613]  CALL        call _transfer~address~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L1762]              __var_7 := null;
[L1763]  COND FALSE  !(!(to_s598 != null))
[L1767]  CALL        call onePercent_s598 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s598, 100);
[L1267]  COND FALSE  !(!(b_s58 > 0))
[L1271]              c_s58 := nonlinearDiv(a_s58, b_s58) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1272]              __ret_0_ := c_s58;
[L1767]  RET         call onePercent_s598 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s598, 100);
[L1768]  COND FALSE  !(revert)
[L1771]              onePercent_s598 := onePercent_s598;
[L1772]  CALL        call burnAmount_s598 := mul~uint256~uint256_SafeMath__success(this, this, 0, onePercent_s598, 3);
[L1239]  COND TRUE   a_s34 == 0
[L1240]              __ret_0_ := 0;
[L1772]  RET         call burnAmount_s598 := mul~uint256~uint256_SafeMath__success(this, this, 0, onePercent_s598, 3);
[L1773]  COND FALSE  !(revert)
[L1776]              burnAmount_s598 := burnAmount_s598;
[L1777]  CALL        call newTransferAmount_s598 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s598, burnAmount_s598);
[L1291]  COND FALSE  !(!(b_s82 <= a_s82))
[L1295]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1296]              __ret_0_ := c_s82;
[L1777]  RET         call newTransferAmount_s598 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s598, burnAmount_s598);
[L1778]  COND FALSE  !(revert)
[L1781]              newTransferAmount_s598 := newTransferAmount_s598;
[L1782]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_FLAMA[this], burnAmount_s598);
[L1291]  COND FALSE  !(!(b_s82 <= a_s82))
[L1295]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1296]              __ret_0_ := c_s82;
[L1782]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_FLAMA[this], burnAmount_s598);
[L1783]  COND FALSE  !(revert)
[L1786]              _totalSupply_FLAMA[this] := __var_8;
[L1787]  CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][from_s598], value_s598);
[L1291]  COND FALSE  !(!(b_s82 <= a_s82))
[L1295]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1296]              __ret_0_ := c_s82;
[L1787]  RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][from_s598], value_s598);
[L1788]  COND FALSE  !(revert)
[L1791]              sum__balances0[this] := sum__balances0[this] - _balances_FLAMA[this][from_s598];
[L1792]              _balances_FLAMA[this][from_s598] := __var_9;
[L1793]              sum__balances0[this] := sum__balances0[this] + _balances_FLAMA[this][from_s598];
[L1794]  CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][to_s598], newTransferAmount_s598);
[L1315]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1316]  COND FALSE  !(!(c_s106 >= a_s106))
[L1320]              __ret_0_ := c_s106;
[L1794]  RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][to_s598], newTransferAmount_s598);
[L1795]  COND FALSE  !(revert)
[L1798]              sum__balances0[this] := sum__balances0[this] - _balances_FLAMA[this][to_s598];
[L1799]              _balances_FLAMA[this][to_s598] := __var_10;
[L1800]              sum__balances0[this] := sum__balances0[this] + _balances_FLAMA[this][to_s598];
[L1801]              assert { :EventEmitted "Transfer_FLAMA" } true;
[L1802]              assert { :EventEmitted "Transfer_FLAMA" } true;
[L1613]  RET         call _transfer~address~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L1614]  COND FALSE  !(revert)
[L1617]              __ret_0_ := true;
[L744]   RET         call __ret_0_ := transferFrom~address~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L745]               assume !revert && gas >= 0;
[L2527]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_FLAMA(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L2590]  RET         call CorralChoice_FLAMA(this);

[2020-11-25 16:34:08,229 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:34:08,229 INFO  L82        PathProgramCache]: Analyzing trace with hash 1122735118, now seen corresponding path program 1 times
[2020-11-25 16:34:08,230 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:34:08,243 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:34:08,320 INFO  L134       CoverageAnalysis]: Checked inductivity of 81 backedges. 8 proven. 8 refuted. 0 times theorem prover too weak. 65 trivial. 0 not checked.
[2020-11-25 16:34:08,320 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 16:34:08,320 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [11] total 11
[2020-11-25 16:34:08,321 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:34:08,321 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 11 interpolants.
[2020-11-25 16:34:08,321 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=26, Invalid=84, Unknown=0, NotChecked=0, Total=110
[2020-11-25 16:34:08,321 INFO  L87              Difference]: Start difference. First operand 1812 states and 1960 transitions. cyclomatic complexity: 151 Second operand 11 states.
[2020-11-25 16:34:08,792 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:34:08,792 INFO  L93              Difference]: Finished difference Result 1086 states and 1169 transitions.
[2020-11-25 16:34:08,792 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 11 states. 
[2020-11-25 16:34:08,792 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1086 states and 1169 transitions.
[2020-11-25 16:34:08,795 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 16:34:08,795 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1086 states to 0 states and 0 transitions.
[2020-11-25 16:34:08,795 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-25 16:34:08,795 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-25 16:34:08,795 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-25 16:34:08,795 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:34:08,795 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 16:34:08,795 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 16:34:08,795 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 16:34:08,795 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 16:34:08,795 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-25 16:34:08,795 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 16:34:08,795 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-25 16:34:08,798 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 04:34:08 BasicIcfg
[2020-11-25 16:34:08,798 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 16:34:08,799 INFO  L168              Benchmark]: Toolchain (without parser) took 5165.45 ms. Allocated memory was 1.0 GB in the beginning and 1.4 GB in the end (delta: 321.9 MB). Free memory was 940.6 MB in the beginning and 781.1 MB in the end (delta: 159.5 MB). Peak memory consumption was 481.4 MB. Max. memory is 15.3 GB.
[2020-11-25 16:34:08,800 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.16 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 16:34:08,800 INFO  L168              Benchmark]: Boogie Preprocessor took 95.62 ms. Allocated memory is still 1.0 GB. Free memory was 940.6 MB in the beginning and 935.2 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 16:34:08,800 INFO  L168              Benchmark]: UtopiaSpecLang took 54.40 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 929.8 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 16:34:08,800 INFO  L168              Benchmark]: Boogie Printer took 11.42 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 924.5 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 16:34:08,801 INFO  L168              Benchmark]: RCFGBuilder took 634.24 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 860.0 MB in the end (delta: 64.4 MB). Peak memory consumption was 64.4 MB. Max. memory is 15.3 GB.
[2020-11-25 16:34:08,801 INFO  L168              Benchmark]: UtopiaLTL2Aut took 45.68 ms. Allocated memory is still 1.0 GB. Free memory was 860.0 MB in the beginning and 856.5 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
[2020-11-25 16:34:08,801 INFO  L168              Benchmark]: BÃ¼chi Program Product took 939.24 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 61.3 MB). Free memory was 856.5 MB in the beginning and 852.9 MB in the end (delta: 3.5 MB). Peak memory consumption was 141.7 MB. Max. memory is 15.3 GB.
[2020-11-25 16:34:08,802 INFO  L168              Benchmark]: BlockEncodingV2 took 93.65 ms. Allocated memory is still 1.1 GB. Free memory was 852.9 MB in the beginning and 817.9 MB in the end (delta: 35.0 MB). Peak memory consumption was 35.0 MB. Max. memory is 15.3 GB.
[2020-11-25 16:34:08,802 INFO  L168              Benchmark]: BuchiAutomizer took 3288.11 ms. Allocated memory was 1.1 GB in the beginning and 1.4 GB in the end (delta: 260.6 MB). Free memory was 817.9 MB in the beginning and 781.1 MB in the end (delta: 36.8 MB). Peak memory consumption was 297.3 MB. Max. memory is 15.3 GB.
[2020-11-25 16:34:08,806 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    2302 locations, 3898 edges
  - StatisticsResult: Encoded RCFG
    2255 locations, 3790 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.16 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 95.62 ms. Allocated memory is still 1.0 GB. Free memory was 940.6 MB in the beginning and 935.2 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 54.40 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 929.8 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 11.42 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 924.5 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 634.24 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 860.0 MB in the end (delta: 64.4 MB). Peak memory consumption was 64.4 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 45.68 ms. Allocated memory is still 1.0 GB. Free memory was 860.0 MB in the beginning and 856.5 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 939.24 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 61.3 MB). Free memory was 856.5 MB in the beginning and 852.9 MB in the end (delta: 3.5 MB). Peak memory consumption was 141.7 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 93.65 ms. Allocated memory is still 1.1 GB. Free memory was 852.9 MB in the beginning and 817.9 MB in the end (delta: 35.0 MB). Peak memory consumption was 35.0 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 3288.11 ms. Allocated memory was 1.1 GB in the beginning and 1.4 GB in the end (delta: 260.6 MB). Free memory was 817.9 MB in the beginning and 781.1 MB in the end (delta: 36.8 MB). Peak memory consumption was 297.3 MB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    959 locations, 1203 edges
  - StatisticsResult: BuchiProgram size
    2302 locations, 3898 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 5 terminating modules (5 trivial, 0 deterministic, 0 nondeterministic). 5 modules have a trivial ranking function, the largest among these consists of 13 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 3.2s and 6 iterations.  TraceHistogramMax:4. Analysis of lassos took 0.4s. Construction of modules took 1.7s. BÃ¼chi inclusion checks took 0.7s. Highest rank in rank-based complementation 0. Minimization of det autom 5. Minimization of nondet autom 0. Automata minimization 0.1s AutomataMinimizationTime, 4 MinimizatonAttempts, 941 StatesRemovedByMinimization, 3 NontrivialMinimizations. Non-live state removal took 0.0s Buchi closure took 0.0s. Biggest automaton had 1952 states and ocurred in iteration 2.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 9246 SDtfs, 8898 SDslu, 14032 SDs, 0 SdLazy, 21021 SolverSat, 1423 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 1.7s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU5 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_transferFrom_FLAMA0) ==> ( <>(fail_transferFrom_FLAMA0) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
