This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 05:50:33,289 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 05:50:33,290 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 05:50:33,302 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 05:50:33,302 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 05:50:33,303 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 05:50:33,304 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 05:50:33,306 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 05:50:33,307 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 05:50:33,308 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 05:50:33,309 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 05:50:33,309 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 05:50:33,310 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 05:50:33,311 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 05:50:33,312 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 05:50:33,313 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 05:50:33,313 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 05:50:33,314 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 05:50:33,316 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 05:50:33,317 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 05:50:33,318 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 05:50:33,319 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 05:50:33,321 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 05:50:33,321 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 05:50:33,321 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 05:50:33,322 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 05:50:33,322 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 05:50:33,323 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 05:50:33,323 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 05:50:33,324 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 05:50:33,324 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 05:50:33,325 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 05:50:33,325 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 05:50:33,326 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 05:50:33,326 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 05:50:33,327 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 05:50:33,327 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 05:50:33,327 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 05:50:33,327 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 05:50:33,328 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 05:50:33,329 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 05:50:33,329 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 05:50:33,337 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 05:50:33,337 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 05:50:33,338 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 05:50:33,338 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 05:50:33,338 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 05:50:33,338 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 05:50:33,338 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 05:50:33,339 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 05:50:33,339 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 05:50:33,339 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 05:50:33,339 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 05:50:33,339 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 05:50:33,339 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 05:50:33,339 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 05:50:33,340 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 05:50:33,340 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 05:50:33,340 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 05:50:33,340 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 05:50:33,340 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 05:50:33,340 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 05:50:33,340 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 05:50:33,340 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 05:50:33,341 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 05:50:33,341 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 05:50:33,341 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 05:50:33,341 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 05:50:33,366 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 05:50:33,381 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 05:50:33,383 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 05:50:33,384 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 05:50:33,385 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 05:50:33,385 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/StreamProtocol_0x9b5C2BE869a19e84BDBcb1386dAD83a2ec8DAe82_approve.bpl
[2020-11-25 05:50:33,386 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/StreamProtocol_0x9b5C2BE869a19e84BDBcb1386dAD83a2ec8DAe82_approve.bpl'
[2020-11-25 05:50:33,463 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 05:50:33,464 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 05:50:33,465 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 05:50:33,465 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 05:50:33,465 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 05:50:33,482 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "StreamProtocol_0x9b5C2BE869a19e84BDBcb1386dAD83a2ec8DAe82_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:50:33" (1/1) ...
[2020-11-25 05:50:33,484 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "StreamProtocol_0x9b5C2BE869a19e84BDBcb1386dAD83a2ec8DAe82_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:50:33" (1/1) ...
[2020-11-25 05:50:33,518 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "StreamProtocol_0x9b5C2BE869a19e84BDBcb1386dAD83a2ec8DAe82_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:50:33" (1/1) ...
[2020-11-25 05:50:33,519 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "StreamProtocol_0x9b5C2BE869a19e84BDBcb1386dAD83a2ec8DAe82_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:50:33" (1/1) ...
[2020-11-25 05:50:33,544 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "StreamProtocol_0x9b5C2BE869a19e84BDBcb1386dAD83a2ec8DAe82_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:50:33" (1/1) ...
[2020-11-25 05:50:33,554 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "StreamProtocol_0x9b5C2BE869a19e84BDBcb1386dAD83a2ec8DAe82_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:50:33" (1/1) ...
[2020-11-25 05:50:33,561 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "StreamProtocol_0x9b5C2BE869a19e84BDBcb1386dAD83a2ec8DAe82_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:50:33" (1/1) ...
[2020-11-25 05:50:33,572 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 05:50:33,572 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 05:50:33,573 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 05:50:33,575 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 05:50:33,579 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "StreamProtocol_0x9b5C2BE869a19e84BDBcb1386dAD83a2ec8DAe82_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:50:33" (1/1) ...
[2020-11-25 05:50:33,604 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(StreamProtocol.approve(spender, value), p1 != msg.sender || p2 != spender) ==> <>(finished(StreamProtocol.approve(spender, value), return == true && allowed_StreamProtocol[this][msg.sender][spender] == value &&  _totalSupply_StreamProtocol[this] == old(_totalSupply_StreamProtocol[this]) && balances_StreamProtocol[this] == old(balances_StreamProtocol[this]) && allowed_StreamProtocol[this][p1][p2] == old(allowed_StreamProtocol[this][p1][p2]) && symbol_StreamProtocol[this] == old(symbol_StreamProtocol[this]) && name_StreamProtocol[this] == old(name_StreamProtocol[this]) && decimals_StreamProtocol[this] == old(decimals_StreamProtocol[this]) && _stopTrade_StreamProtocol[this] == old(_stopTrade_StreamProtocol[this]) && owner_Owned[this] == old(owner_Owned[this]))))
[2020-11-25 05:50:33,610 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(StreamProtocol.approve(spender, value), p1 != msg.sender || p2 != spender) ==> <>(finished(StreamProtocol.approve(spender, value), return == true && allowed_StreamProtocol[this][msg.sender][spender] == value &&  _totalSupply_StreamProtocol[this] == old(_totalSupply_StreamProtocol[this]) && balances_StreamProtocol[this] == old(balances_StreamProtocol[this]) && allowed_StreamProtocol[this][p1][p2] == old(allowed_StreamProtocol[this][p1][p2]) && symbol_StreamProtocol[this] == old(symbol_StreamProtocol[this]) && name_StreamProtocol[this] == old(name_StreamProtocol[this]) && decimals_StreamProtocol[this] == old(decimals_StreamProtocol[this]) && _stopTrade_StreamProtocol[this] == old(_stopTrade_StreamProtocol[this]) && owner_Owned[this] == old(owner_Owned[this]))))
[2020-11-25 05:50:33,618 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(StreamProtocol.approve(spender, value), p1 != msg.sender || p2 != spender) ==> <>(finished(StreamProtocol.approve(spender, value), return == true && allowed_StreamProtocol[this][msg.sender][spender] == value &&  _totalSupply_StreamProtocol[this] == old(_totalSupply_StreamProtocol[this]) && balances_StreamProtocol[this] == old(balances_StreamProtocol[this]) && allowed_StreamProtocol[this][p1][p2] == old(allowed_StreamProtocol[this][p1][p2]) && symbol_StreamProtocol[this] == old(symbol_StreamProtocol[this]) && name_StreamProtocol[this] == old(name_StreamProtocol[this]) && decimals_StreamProtocol[this] == old(decimals_StreamProtocol[this]) && _stopTrade_StreamProtocol[this] == old(_stopTrade_StreamProtocol[this]) && owner_Owned[this] == old(owner_Owned[this]))))
[2020-11-25 05:50:33,624 INFO  L636   opiaSpecLangObserver]: Parsed ( p1!=msg.sender || p2!=spender_s419 ) to BinaryExpression[LOGICOR,BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,approve~address~uint256_StreamProtocol>]],BinaryExpression[COMPNEQ,IdentifierExpression[p2,GLOBAL],IdentifierExpression[spender_s419,<IMPLEMENTATION_INPARAM,approve~address~uint256_StreamProtocol>]]]
[2020-11-25 05:50:33,627 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( success_s419==true && allowed_StreamProtocol[this][msg.sender][spender_s419]==tokens_s419 ) && _totalSupply_StreamProtocol[this]==( old(_totalSupply_StreamProtocol[this]) ) ) && balances_StreamProtocol[this]==( old(balances_StreamProtocol[this]) ) ) && allowed_StreamProtocol[this][p1][p2]==( old(allowed_StreamProtocol[this][p1][p2]) ) ) && symbol_StreamProtocol[this]==( old(symbol_StreamProtocol[this]) ) ) && name_StreamProtocol[this]==( old(name_StreamProtocol[this]) ) ) && decimals_StreamProtocol[this]==( old(decimals_StreamProtocol[this]) ) ) && _stopTrade_StreamProtocol[this]==( old(_stopTrade_StreamProtocol[this]) ) ) && owner_Owned[this]==( old(owner_Owned[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[success_s419,<IMPLEMENTATION_OUTPARAM,approve~address~uint256_StreamProtocol>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_StreamProtocol,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StreamProtocol>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,approve~address~uint256_StreamProtocol>]]],[IdentifierExpression[spender_s419,<IMPLEMENTATION_INPARAM,approve~address~uint256_StreamProtocol>]]],IdentifierExpression[tokens_s419,<IMPLEMENTATION_INPARAM,approve~address~uint256_StreamProtocol>]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_totalSupply_StreamProtocol,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StreamProtocol>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_totalSupply_StreamProtocol,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StreamProtocol>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[balances_StreamProtocol,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StreamProtocol>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[balances_StreamProtocol,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StreamProtocol>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_StreamProtocol,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StreamProtocol>]]],[IdentifierExpression[p1,GLOBAL]]],[IdentifierExpression[p2,GLOBAL]]],UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_StreamProtocol,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StreamProtocol>]]],[IdentifierExpression[p1,GLOBAL]]],[IdentifierExpression[p2,GLOBAL]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[symbol_StreamProtocol,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StreamProtocol>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[symbol_StreamProtocol,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StreamProtocol>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[name_StreamProtocol,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StreamProtocol>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[name_StreamProtocol,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StreamProtocol>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[decimals_StreamProtocol,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StreamProtocol>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[decimals_StreamProtocol,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StreamProtocol>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_stopTrade_StreamProtocol,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StreamProtocol>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_stopTrade_StreamProtocol,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StreamProtocol>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[owner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StreamProtocol>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[owner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StreamProtocol>]]]]]]
[2020-11-25 05:50:33,631 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(StreamProtocol.approve(spender, value), p1 != msg.sender || p2 != spender) ==> <>(finished(StreamProtocol.approve(spender, value), return == true && allowed_StreamProtocol[this][msg.sender][spender] == value &&  _totalSupply_StreamProtocol[this] == old(_totalSupply_StreamProtocol[this]) && balances_StreamProtocol[this] == old(balances_StreamProtocol[this]) && allowed_StreamProtocol[this][p1][p2] == old(allowed_StreamProtocol[this][p1][p2]) && symbol_StreamProtocol[this] == old(symbol_StreamProtocol[this]) && name_StreamProtocol[this] == old(name_StreamProtocol[this]) && decimals_StreamProtocol[this] == old(decimals_StreamProtocol[this]) && _stopTrade_StreamProtocol[this] == old(_stopTrade_StreamProtocol[this]) && owner_Owned[this] == old(owner_Owned[this]))))
[2020-11-25 05:50:33,632 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_approve_StreamProtocol0) ==> ( <>AP(success_approve_StreamProtocol0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 05:50:33,639 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 05:50:33 PropertyContainer
[2020-11-25 05:50:33,640 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 05:50:33,640 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 05:50:33,640 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 05:50:33,640 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 05:50:33,641 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "StreamProtocol_0x9b5C2BE869a19e84BDBcb1386dAD83a2ec8DAe82_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:50:33" (1/2) ...
[2020-11-25 05:50:33,641 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 05:50:33,641 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 05:50:33,654 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 05:50:33" (2/2) ...
[2020-11-25 05:50:33,654 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 05:50:33,654 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 05:50:33,655 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 05:50:33,655 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 05:50:33,656 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "StreamProtocol_0x9b5C2BE869a19e84BDBcb1386dAD83a2ec8DAe82_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:50:33" (1/2) ...
[2020-11-25 05:50:33,709 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 05:50:33,709 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 05:50:33,709 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 05:50:33,709 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 05:50:33,709 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 05:50:33,709 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 05:50:33,709 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 05:50:33,709 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 05:50:33,710 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface_NoBaseCtor__success
[2020-11-25 05:50:33,710 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface
[2020-11-25 05:50:33,710 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface
[2020-11-25 05:50:33,710 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20Interface
[2020-11-25 05:50:33,710 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20Interface
[2020-11-25 05:50:33,710 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20Interface
[2020-11-25 05:50:33,710 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Interface
[2020-11-25 05:50:33,710 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Interface
[2020-11-25 05:50:33,710 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Interface
[2020-11-25 05:50:33,710 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__success
[2020-11-25 05:50:33,710 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack
[2020-11-25 05:50:33,711 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack
[2020-11-25 05:50:33,711 INFO  L130     BoogieDeclarations]: Found specification of procedure receiveApproval~address~uint256~address~bytes_ApproveAndCallFallBack
[2020-11-25 05:50:33,711 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned_NoBaseCtor__success
[2020-11-25 05:50:33,711 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned
[2020-11-25 05:50:33,711 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned
[2020-11-25 05:50:33,711 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned
[2020-11-25 05:50:33,711 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned
[2020-11-25 05:50:33,711 INFO  L130     BoogieDeclarations]: Found specification of procedure StreamProtocol_StreamProtocol_NoBaseCtor__success
[2020-11-25 05:50:33,711 INFO  L130     BoogieDeclarations]: Found specification of procedure StreamProtocol_StreamProtocol
[2020-11-25 05:50:33,711 INFO  L138     BoogieDeclarations]: Found implementation of procedure StreamProtocol_StreamProtocol
[2020-11-25 05:50:33,711 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_StreamProtocol
[2020-11-25 05:50:33,711 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_StreamProtocol
[2020-11-25 05:50:33,712 INFO  L130     BoogieDeclarations]: Found specification of procedure stopTrade_StreamProtocol
[2020-11-25 05:50:33,712 INFO  L138     BoogieDeclarations]: Found implementation of procedure stopTrade_StreamProtocol
[2020-11-25 05:50:33,712 INFO  L130     BoogieDeclarations]: Found specification of procedure startTrade_StreamProtocol
[2020-11-25 05:50:33,712 INFO  L138     BoogieDeclarations]: Found implementation of procedure startTrade_StreamProtocol
[2020-11-25 05:50:33,712 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_StreamProtocol
[2020-11-25 05:50:33,712 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_StreamProtocol
[2020-11-25 05:50:33,712 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_StreamProtocol
[2020-11-25 05:50:33,712 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_StreamProtocol
[2020-11-25 05:50:33,712 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StreamProtocol
[2020-11-25 05:50:33,712 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StreamProtocol
[2020-11-25 05:50:33,712 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StreamProtocol
[2020-11-25 05:50:33,712 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StreamProtocol
[2020-11-25 05:50:33,712 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StreamProtocol
[2020-11-25 05:50:33,713 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StreamProtocol
[2020-11-25 05:50:33,713 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_StreamProtocol
[2020-11-25 05:50:33,713 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_StreamProtocol
[2020-11-25 05:50:33,713 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_StreamProtocol__success
[2020-11-25 05:50:33,713 INFO  L130     BoogieDeclarations]: Found specification of procedure transferAnyERC20Token~address~uint256_StreamProtocol
[2020-11-25 05:50:33,713 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferAnyERC20Token~address~uint256_StreamProtocol
[2020-11-25 05:50:33,713 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_StreamProtocol
[2020-11-25 05:50:33,713 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_StreamProtocol
[2020-11-25 05:50:33,713 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_StreamProtocol
[2020-11-25 05:50:33,713 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_StreamProtocol
[2020-11-25 05:50:33,713 INFO  L130     BoogieDeclarations]: Found specification of procedure name_StreamProtocol
[2020-11-25 05:50:33,713 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_StreamProtocol
[2020-11-25 05:50:33,713 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_StreamProtocol
[2020-11-25 05:50:33,714 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_StreamProtocol
[2020-11-25 05:50:33,714 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 05:50:33,714 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 05:50:33,714 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 05:50:33,714 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 05:50:33,714 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 05:50:33,714 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 05:50:33,714 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Interface
[2020-11-25 05:50:33,714 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Interface
[2020-11-25 05:50:33,714 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ApproveAndCallFallBack
[2020-11-25 05:50:33,714 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ApproveAndCallFallBack
[2020-11-25 05:50:33,714 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Owned
[2020-11-25 05:50:33,715 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Owned
[2020-11-25 05:50:33,715 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_StreamProtocol
[2020-11-25 05:50:33,715 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 05:50:33,715 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 05:50:33,715 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 05:50:33,715 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 05:50:33,715 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 05:50:33,715 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 05:50:33,715 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 05:50:33,715 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 05:50:33,715 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 05:50:33,715 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface_NoBaseCtor__fail
[2020-11-25 05:50:33,715 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface__success
[2020-11-25 05:50:33,716 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface__fail
[2020-11-25 05:50:33,716 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__fail
[2020-11-25 05:50:33,716 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__success
[2020-11-25 05:50:33,716 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__fail
[2020-11-25 05:50:33,716 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned_NoBaseCtor__fail
[2020-11-25 05:50:33,716 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned__success
[2020-11-25 05:50:33,716 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned__fail
[2020-11-25 05:50:33,716 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned__success
[2020-11-25 05:50:33,716 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned__fail
[2020-11-25 05:50:33,716 INFO  L130     BoogieDeclarations]: Found specification of procedure StreamProtocol_StreamProtocol_NoBaseCtor__fail
[2020-11-25 05:50:33,716 INFO  L130     BoogieDeclarations]: Found specification of procedure StreamProtocol_StreamProtocol__success
[2020-11-25 05:50:33,716 INFO  L130     BoogieDeclarations]: Found specification of procedure StreamProtocol_StreamProtocol__fail
[2020-11-25 05:50:33,717 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_StreamProtocol__success
[2020-11-25 05:50:33,717 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_StreamProtocol__fail
[2020-11-25 05:50:33,717 INFO  L130     BoogieDeclarations]: Found specification of procedure stopTrade_StreamProtocol__success
[2020-11-25 05:50:33,717 INFO  L130     BoogieDeclarations]: Found specification of procedure stopTrade_StreamProtocol__fail
[2020-11-25 05:50:33,717 INFO  L130     BoogieDeclarations]: Found specification of procedure startTrade_StreamProtocol__success
[2020-11-25 05:50:33,717 INFO  L130     BoogieDeclarations]: Found specification of procedure startTrade_StreamProtocol__fail
[2020-11-25 05:50:33,717 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_StreamProtocol__success
[2020-11-25 05:50:33,717 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_StreamProtocol__fail
[2020-11-25 05:50:33,717 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_StreamProtocol__success
[2020-11-25 05:50:33,717 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_StreamProtocol__fail
[2020-11-25 05:50:33,717 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StreamProtocol__success
[2020-11-25 05:50:33,717 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StreamProtocol__fail
[2020-11-25 05:50:33,717 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StreamProtocol__success
[2020-11-25 05:50:33,718 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StreamProtocol__fail
[2020-11-25 05:50:33,718 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StreamProtocol__success
[2020-11-25 05:50:33,718 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StreamProtocol__fail
[2020-11-25 05:50:33,718 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_StreamProtocol__success
[2020-11-25 05:50:33,718 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_StreamProtocol__fail
[2020-11-25 05:50:33,718 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_StreamProtocol__fail
[2020-11-25 05:50:33,718 INFO  L130     BoogieDeclarations]: Found specification of procedure transferAnyERC20Token~address~uint256_StreamProtocol__success
[2020-11-25 05:50:33,718 INFO  L130     BoogieDeclarations]: Found specification of procedure transferAnyERC20Token~address~uint256_StreamProtocol__fail
[2020-11-25 05:50:33,718 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_StreamProtocol__success
[2020-11-25 05:50:33,718 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_StreamProtocol__fail
[2020-11-25 05:50:33,718 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_StreamProtocol__success
[2020-11-25 05:50:33,718 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_StreamProtocol__fail
[2020-11-25 05:50:33,719 INFO  L130     BoogieDeclarations]: Found specification of procedure name_StreamProtocol__success
[2020-11-25 05:50:33,719 INFO  L130     BoogieDeclarations]: Found specification of procedure name_StreamProtocol__fail
[2020-11-25 05:50:33,719 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_StreamProtocol__success
[2020-11-25 05:50:33,719 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_StreamProtocol__fail
[2020-11-25 05:50:33,719 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 05:50:33,719 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 05:50:33,719 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 05:50:33,719 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 05:50:33,719 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 05:50:33,720 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 05:50:33,720 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 05:50:33,720 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 05:50:33,720 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 05:50:33,720 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 05:50:33,720 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 05:50:33,720 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 05:50:33,720 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 05:50:33,720 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 05:50:33,720 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 05:50:33,721 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 05:50:33,721 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 05:50:33,721 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 05:50:33,721 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface_NoBaseCtor__fail
[2020-11-25 05:50:33,721 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface_NoBaseCtor__success
[2020-11-25 05:50:33,721 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface__fail
[2020-11-25 05:50:33,721 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface__success
[2020-11-25 05:50:33,721 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__fail
[2020-11-25 05:50:33,721 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__success
[2020-11-25 05:50:33,722 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__fail
[2020-11-25 05:50:33,722 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__success
[2020-11-25 05:50:33,722 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned_NoBaseCtor__fail
[2020-11-25 05:50:33,722 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned_NoBaseCtor__success
[2020-11-25 05:50:33,722 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned__fail
[2020-11-25 05:50:33,722 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned__success
[2020-11-25 05:50:33,722 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned__fail
[2020-11-25 05:50:33,722 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned__success
[2020-11-25 05:50:33,722 INFO  L138     BoogieDeclarations]: Found implementation of procedure StreamProtocol_StreamProtocol_NoBaseCtor__fail
[2020-11-25 05:50:33,722 INFO  L138     BoogieDeclarations]: Found implementation of procedure StreamProtocol_StreamProtocol_NoBaseCtor__success
[2020-11-25 05:50:33,723 INFO  L138     BoogieDeclarations]: Found implementation of procedure StreamProtocol_StreamProtocol__fail
[2020-11-25 05:50:33,723 INFO  L138     BoogieDeclarations]: Found implementation of procedure StreamProtocol_StreamProtocol__success
[2020-11-25 05:50:33,723 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_StreamProtocol__fail
[2020-11-25 05:50:33,723 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_StreamProtocol__success
[2020-11-25 05:50:33,723 INFO  L138     BoogieDeclarations]: Found implementation of procedure stopTrade_StreamProtocol__fail
[2020-11-25 05:50:33,723 INFO  L138     BoogieDeclarations]: Found implementation of procedure stopTrade_StreamProtocol__success
[2020-11-25 05:50:33,723 INFO  L138     BoogieDeclarations]: Found implementation of procedure startTrade_StreamProtocol__fail
[2020-11-25 05:50:33,723 INFO  L138     BoogieDeclarations]: Found implementation of procedure startTrade_StreamProtocol__success
[2020-11-25 05:50:33,724 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_StreamProtocol__fail
[2020-11-25 05:50:33,724 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_StreamProtocol__success
[2020-11-25 05:50:33,724 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_StreamProtocol__fail
[2020-11-25 05:50:33,724 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_StreamProtocol__success
[2020-11-25 05:50:33,724 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StreamProtocol__fail
[2020-11-25 05:50:33,724 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StreamProtocol__success
[2020-11-25 05:50:33,724 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StreamProtocol__fail
[2020-11-25 05:50:33,724 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StreamProtocol__success
[2020-11-25 05:50:33,724 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StreamProtocol__fail
[2020-11-25 05:50:33,724 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StreamProtocol__success
[2020-11-25 05:50:33,724 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_StreamProtocol__fail
[2020-11-25 05:50:33,725 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_StreamProtocol__success
[2020-11-25 05:50:33,725 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_StreamProtocol__fail
[2020-11-25 05:50:33,725 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_StreamProtocol__success
[2020-11-25 05:50:33,725 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferAnyERC20Token~address~uint256_StreamProtocol__fail
[2020-11-25 05:50:33,725 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferAnyERC20Token~address~uint256_StreamProtocol__success
[2020-11-25 05:50:33,725 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_StreamProtocol__fail
[2020-11-25 05:50:33,725 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_StreamProtocol__success
[2020-11-25 05:50:33,725 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_StreamProtocol__fail
[2020-11-25 05:50:33,725 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_StreamProtocol__success
[2020-11-25 05:50:33,725 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_StreamProtocol__fail
[2020-11-25 05:50:33,725 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_StreamProtocol__success
[2020-11-25 05:50:33,726 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_StreamProtocol__fail
[2020-11-25 05:50:33,726 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_StreamProtocol__success
[2020-11-25 05:50:33,726 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 05:50:33,726 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 05:50:33,726 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 05:50:33,726 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 05:50:33,726 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 05:50:33,726 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 05:50:33,726 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 05:50:33,726 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 05:50:33,726 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 05:50:33,727 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 05:50:33,727 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Interface
[2020-11-25 05:50:33,727 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Interface
[2020-11-25 05:50:33,727 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ApproveAndCallFallBack
[2020-11-25 05:50:33,727 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ApproveAndCallFallBack
[2020-11-25 05:50:33,727 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Owned
[2020-11-25 05:50:33,727 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Owned
[2020-11-25 05:50:33,727 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_StreamProtocol
[2020-11-25 05:50:33,727 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 05:50:33,727 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 05:50:33,727 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 05:50:34,168 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 05:50:34,212 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 05:50:34,212 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 05:50:34,212 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 05:50:34,354 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 05:50:34,354 INFO  L286             CfgBuilder]: Removed 5 assue(true) statements.
[2020-11-25 05:50:34,356 INFO  L202        PluginConnector]: Adding new model StreamProtocol_0x9b5C2BE869a19e84BDBcb1386dAD83a2ec8DAe82_approve.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 05:50:34 BoogieIcfgContainer
[2020-11-25 05:50:34,356 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 05:50:33" (2/2) ...
[2020-11-25 05:50:34,356 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 05:50:34,357 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@2f235671 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 05:50:34, skipping insertion in model container
[2020-11-25 05:50:34,357 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 05:50:34,357 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 05:50:34,357 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 05:50:34,358 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 05:50:34,358 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "StreamProtocol_0x9b5C2BE869a19e84BDBcb1386dAD83a2ec8DAe82_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:50:33" (1/3) ...
[2020-11-25 05:50:34,359 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@6e35d914 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 05:50:34, skipping insertion in model container
[2020-11-25 05:50:34,359 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 05:50:33" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 05:50:34,395 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 05:50:34 NWAContainer
[2020-11-25 05:50:34,395 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 05:50:34,395 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 05:50:34,395 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 05:50:34,396 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 05:50:34,397 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "StreamProtocol_0x9b5C2BE869a19e84BDBcb1386dAD83a2ec8DAe82_approve.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 05:50:34" (3/4) ...
[2020-11-25 05:50:34,397 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@5eded474 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 05:50:34, skipping insertion in model container
[2020-11-25 05:50:34,398 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 05:50:34" (4/4) ...
[2020-11-25 05:50:34,401 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 05:50:34,404 INFO  L110   BuchiProductObserver]: Initial RCFG 1311 locations, 1637 edges
[2020-11-25 05:50:34,404 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 05:50:34,414 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 05:50:35,686 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 05:50:35,690 INFO  L110   BuchiProductObserver]: BuchiProgram size 3096 locations, 5276 edges
[2020-11-25 05:50:35,690 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 05:50:35 BoogieIcfgContainer
[2020-11-25 05:50:35,691 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 05:50:35,691 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 05:50:35,691 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 05:50:35,692 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 05:50:35,693 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 05:50:35" (1/1) ...
[2020-11-25 05:50:35,755 INFO  L313           BlockEncoder]: Initial Icfg 3096 locations, 5276 edges
[2020-11-25 05:50:35,755 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 05:50:35,756 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 05:50:35,756 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 05:50:35,756 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 05:50:35,765 INFO  L70    emoveInfeasibleEdges]: Removed 60 edges and 13 locations because of local infeasibility
[2020-11-25 05:50:35,771 INFO  L70        RemoveSinkStates]: Removed 8 edges and 5 locations by removing sink states
[2020-11-25 05:50:35,781 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 05:50:35,785 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 05:50:35,787 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 05:50:35,788 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 05:50:35,791 INFO  L313           BlockEncoder]: Encoded RCFG 3056 locations, 5176 edges
[2020-11-25 05:50:35,791 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 05:50:35 BasicIcfg
[2020-11-25 05:50:35,791 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 05:50:35,792 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 05:50:35,792 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 05:50:35,793 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 05:50:35,794 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 05:50:35,794 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "StreamProtocol_0x9b5C2BE869a19e84BDBcb1386dAD83a2ec8DAe82_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:50:33" (1/6) ...
[2020-11-25 05:50:35,795 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@2ffd7354 and model type StreamProtocol_0x9b5C2BE869a19e84BDBcb1386dAD83a2ec8DAe82_approve.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 05:50:35, skipping insertion in model container
[2020-11-25 05:50:35,795 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 05:50:35,795 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 05:50:33" (2/6) ...
[2020-11-25 05:50:35,795 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@2ffd7354 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 05:50:35, skipping insertion in model container
[2020-11-25 05:50:35,796 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 05:50:35,796 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "StreamProtocol_0x9b5C2BE869a19e84BDBcb1386dAD83a2ec8DAe82_approve.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 05:50:34" (3/6) ...
[2020-11-25 05:50:35,796 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@2ffd7354 and model type StreamProtocol_0x9b5C2BE869a19e84BDBcb1386dAD83a2ec8DAe82_approve.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 05:50:35, skipping insertion in model container
[2020-11-25 05:50:35,796 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 05:50:35,796 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 05:50:34" (4/6) ...
[2020-11-25 05:50:35,796 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@2ffd7354 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 05:50:35, skipping insertion in model container
[2020-11-25 05:50:35,796 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 05:50:35,796 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 05:50:35" (5/6) ...
[2020-11-25 05:50:35,797 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@2ffd7354 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 05:50:35, skipping insertion in model container
[2020-11-25 05:50:35,797 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 05:50:35,797 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 05:50:35" (6/6) ...
[2020-11-25 05:50:35,798 INFO  L404   chiAutomizerObserver]: Analyzing ICFG StreamProtocol_0x9b5C2BE869a19e84BDBcb1386dAD83a2ec8DAe82_approve.bpl_BEv2
[2020-11-25 05:50:35,828 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 05:50:35,828 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 05:50:35,829 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 05:50:35,829 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 05:50:35,829 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 05:50:35,829 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 05:50:35,829 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 05:50:35,829 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 05:50:35,829 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 05:50:35,854 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3056 states.
[2020-11-25 05:50:35,895 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 05:50:35,895 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 05:50:35,895 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 05:50:35,902 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 05:50:35,902 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 05:50:35,902 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 05:50:35,902 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3056 states.
[2020-11-25 05:50:35,917 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 05:50:35,917 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 05:50:35,917 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 05:50:35,918 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 05:50:35,918 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_StreamProtocol0 := false;
[L3]                 call_approve_StreamProtocol0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L3607]              assume null == 0;
[L3608]  CALL        call this := FreshRefGenerator__success();
[L1626]              havoc newRef;
[L1627]              assume Alloc[newRef] == false;
[L1628]              Alloc[newRef] := true;
[L1629]              assume newRef != null;
[L3608]  RET         call this := FreshRefGenerator__success();
[L3609]              assume now >= 0;
[L3610]              assume DType[this] == StreamProtocol;
[L3611]              assume msgvalue_MSG == 0;
[L3612]              gas := gas - 53000;
[L3613]  CALL        call StreamProtocol_StreamProtocol(this, msgsender_MSG, msgvalue_MSG);
[L395]               havoc __exception;
[L396]               revert := false;
[L397]   COND FALSE  !(__exception)
[L420]   CALL        call StreamProtocol_StreamProtocol__success(this, msgsender_MSG, msgvalue_MSG);
[L1923]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1762]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1747]              assume msgsender_MSG != null;
[L1748]              Balance[this] := 0;
[L1762]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1763]  COND FALSE  !(revert)
[L1923]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1924]  COND TRUE   revert
[L420]   RET         call StreamProtocol_StreamProtocol__success(this, msgsender_MSG, msgvalue_MSG);
[L421]               assume !revert && gas >= 0;
[L3613]  RET         call StreamProtocol_StreamProtocol(this, msgsender_MSG, msgvalue_MSG);
[L3614]              assume !revert && gas >= 0;

Loop:
[L3617]  CALL        call CorralChoice_StreamProtocol(this);
[L3459]              havoc msgsender_MSG;
[L3460]              havoc msgvalue_MSG;
[L3461]              havoc choice;
[L3462]              havoc __ret_0_totalSupply;
[L3463]              havoc tokenOwner_s328;
[L3464]              havoc balance_s328;
[L3465]              havoc tokenOwner_s532;
[L3466]              havoc spender_s532;
[L3467]              havoc remaining_s532;
[L3468]              havoc to_s385;
[L3469]              havoc tokens_s385;
[L3470]              havoc success_s385;
[L3471]              havoc spender_s419;
[L3472]              havoc tokens_s419;
[L3473]              havoc success_s419;
[L3474]              havoc from_s510;
[L3475]              havoc to_s510;
[L3476]              havoc tokens_s510;
[L3477]              havoc success_s510;
[L3478]              havoc __ret_0_owner;
[L3479]              havoc __ret_0_symbol;
[L3480]              havoc __ret_0_name;
[L3481]              havoc __ret_0_decimals;
[L3482]              havoc spender_s582;
[L3483]              havoc tokens_s582;
[L3484]              havoc data_s582;
[L3485]              havoc success_s582;
[L3486]              havoc tokenAddress_s609;
[L3487]              havoc tokens_s609;
[L3488]              havoc success_s609;
[L3489]              havoc _value_s658;
[L3490]              havoc tmpNow;
[L3491]              havoc gas;
[L3492]              assume gas > 4000000 && gas <= 8000000;
[L3493]              tmpNow := now;
[L3494]              havoc now;
[L3495]              assume now > tmpNow;
[L3496]              assume msgsender_MSG != null;
[L3497]              assume DType[msgsender_MSG] != SafeMath;
[L3498]              assume DType[msgsender_MSG] != ERC20Interface;
[L3499]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3500]              assume DType[msgsender_MSG] != Owned;
[L3501]              assume DType[msgsender_MSG] != StreamProtocol;
[L3502]              Alloc[msgsender_MSG] := true;
[L3503]  COND TRUE   choice == 15
[L3504]              gas := gas - 21000;
[L3505]  COND FALSE  !(gas >= 0)
[L3617]  RET         call CorralChoice_StreamProtocol(this);

[2020-11-25 05:50:35,932 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 05:50:35,932 INFO  L82        PathProgramCache]: Analyzing trace with hash -864647185, now seen corresponding path program 1 times
[2020-11-25 05:50:35,935 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 05:50:35,956 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 05:50:35,992 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 05:50:35,993 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 05:50:35,994 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 05:50:36,122 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 05:50:36,132 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 05:50:36,132 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 05:50:36,134 INFO  L87              Difference]: Start difference. First operand 3056 states. Second operand 4 states.
[2020-11-25 05:50:36,881 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 05:50:36,881 INFO  L93              Difference]: Finished difference Result 3370 states and 5466 transitions.
[2020-11-25 05:50:36,881 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 05:50:36,882 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3370 states and 5466 transitions.
[2020-11-25 05:50:36,906 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-25 05:50:36,934 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3370 states to 3202 states and 5197 transitions.
[2020-11-25 05:50:36,935 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 15
[2020-11-25 05:50:36,939 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 983
[2020-11-25 05:50:36,940 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3202 states and 5197 transitions.
[2020-11-25 05:50:36,952 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 05:50:36,952 INFO  L728         BuchiCegarLoop]: Abstraction has 3202 states and 5197 transitions.
[2020-11-25 05:50:36,973 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3202 states and 5197 transitions.
[2020-11-25 05:50:37,032 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3202 to 2360.
[2020-11-25 05:50:37,033 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2360 states.
[2020-11-25 05:50:37,042 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2360 states to 2360 states and 3635 transitions.
[2020-11-25 05:50:37,043 INFO  L751         BuchiCegarLoop]: Abstraction has 2360 states and 3635 transitions.
[2020-11-25 05:50:37,043 INFO  L631         BuchiCegarLoop]: Abstraction has 2360 states and 3635 transitions.
[2020-11-25 05:50:37,043 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 05:50:37,043 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2360 states and 3635 transitions.
[2020-11-25 05:50:37,052 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 05:50:37,052 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 05:50:37,052 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 05:50:37,053 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 05:50:37,053 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_StreamProtocol0 := false;
[L3]                 call_approve_StreamProtocol0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L3607]              assume null == 0;
[L3608]  CALL        call this := FreshRefGenerator__success();
[L1626]              havoc newRef;
[L1627]              assume Alloc[newRef] == false;
[L1628]              Alloc[newRef] := true;
[L1629]              assume newRef != null;
[L3608]  RET         call this := FreshRefGenerator__success();
[L3609]              assume now >= 0;
[L3610]              assume DType[this] == StreamProtocol;
[L3611]              assume msgvalue_MSG == 0;
[L3612]              gas := gas - 53000;
[L3613]  CALL        call StreamProtocol_StreamProtocol(this, msgsender_MSG, msgvalue_MSG);
[L395]               havoc __exception;
[L396]               revert := false;
[L397]   COND FALSE  !(__exception)
[L420]   CALL        call StreamProtocol_StreamProtocol__success(this, msgsender_MSG, msgvalue_MSG);
[L1923]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1762]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1747]              assume msgsender_MSG != null;
[L1748]              Balance[this] := 0;
[L1762]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1763]  COND FALSE  !(revert)
[L1923]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1924]  COND FALSE  !(revert)
[L1927]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1830]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1813]              assume msgsender_MSG != null;
[L1814]              Balance[this] := 0;
[L1815]              owner_Owned[this] := null;
[L1817]              owner_Owned[this] := msgsender_MSG;
[L1830]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1831]  COND FALSE  !(revert)
[L1927]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1928]  COND FALSE  !(revert)
[L1931]  CALL        call StreamProtocol_StreamProtocol_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1879]              assume msgsender_MSG != null;
[L1880]              Balance[this] := 0;
[L1881]              symbol_StreamProtocol[this] := 1491346165;
[L1882]              name_StreamProtocol[this] := 1491346165;
[L1883]              decimals_StreamProtocol[this] := 0;
[L1884]              _totalSupply_StreamProtocol[this] := 0;
[L1885]              _stopTrade_StreamProtocol[this] := false;
[L1886]              balances_StreamProtocol[this] := zeroRefintArr();
[L1887]              sum_balances0[this] := 0;
[L1888]              allowed_StreamProtocol[this] := zeroRefRefintArr();
[L1889]              sum_allowed1[this] := 0;
[L1891]              symbol_StreamProtocol[this] := 1357906882;
[L1892]              name_StreamProtocol[this] := -1605590943;
[L1893]              decimals_StreamProtocol[this] := 18;
[L1894]              __var_1 := decimals_StreamProtocol[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1895]              _totalSupply_StreamProtocol[this] := 2000000000 * (nonlinearPow(10, decimals_StreamProtocol[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1896]              _stopTrade_StreamProtocol[this] := false;
[L1897]              sum_balances0[this] := sum_balances0[this] - balances_StreamProtocol[this][owner_Owned[this]];
[L1898]              balances_StreamProtocol[this][owner_Owned[this]] := _totalSupply_StreamProtocol[this];
[L1899]              sum_balances0[this] := sum_balances0[this] + balances_StreamProtocol[this][owner_Owned[this]];
[L1900]              assert { :EventEmitted "Transfer_StreamProtocol" } true;
[L1931]  RET         call StreamProtocol_StreamProtocol_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1932]  COND FALSE  !(revert)
[L420]   RET         call StreamProtocol_StreamProtocol__success(this, msgsender_MSG, msgvalue_MSG);
[L421]               assume !revert && gas >= 0;
[L3613]  RET         call StreamProtocol_StreamProtocol(this, msgsender_MSG, msgvalue_MSG);
[L3614]              assume !revert && gas >= 0;

Loop:
[L3617]  CALL        call CorralChoice_StreamProtocol(this);
[L3459]              havoc msgsender_MSG;
[L3460]              havoc msgvalue_MSG;
[L3461]              havoc choice;
[L3462]              havoc __ret_0_totalSupply;
[L3463]              havoc tokenOwner_s328;
[L3464]              havoc balance_s328;
[L3465]              havoc tokenOwner_s532;
[L3466]              havoc spender_s532;
[L3467]              havoc remaining_s532;
[L3468]              havoc to_s385;
[L3469]              havoc tokens_s385;
[L3470]              havoc success_s385;
[L3471]              havoc spender_s419;
[L3472]              havoc tokens_s419;
[L3473]              havoc success_s419;
[L3474]              havoc from_s510;
[L3475]              havoc to_s510;
[L3476]              havoc tokens_s510;
[L3477]              havoc success_s510;
[L3478]              havoc __ret_0_owner;
[L3479]              havoc __ret_0_symbol;
[L3480]              havoc __ret_0_name;
[L3481]              havoc __ret_0_decimals;
[L3482]              havoc spender_s582;
[L3483]              havoc tokens_s582;
[L3484]              havoc data_s582;
[L3485]              havoc success_s582;
[L3486]              havoc tokenAddress_s609;
[L3487]              havoc tokens_s609;
[L3488]              havoc success_s609;
[L3489]              havoc _value_s658;
[L3490]              havoc tmpNow;
[L3491]              havoc gas;
[L3492]              assume gas > 4000000 && gas <= 8000000;
[L3493]              tmpNow := now;
[L3494]              havoc now;
[L3495]              assume now > tmpNow;
[L3496]              assume msgsender_MSG != null;
[L3497]              assume DType[msgsender_MSG] != SafeMath;
[L3498]              assume DType[msgsender_MSG] != ERC20Interface;
[L3499]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3500]              assume DType[msgsender_MSG] != Owned;
[L3501]              assume DType[msgsender_MSG] != StreamProtocol;
[L3502]              Alloc[msgsender_MSG] := true;
[L3503]  COND TRUE   choice == 15
[L3504]              gas := gas - 21000;
[L3505]  COND FALSE  !(gas >= 0)
[L3617]  RET         call CorralChoice_StreamProtocol(this);

[2020-11-25 05:50:37,057 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 05:50:37,057 INFO  L82        PathProgramCache]: Analyzing trace with hash -1453314848, now seen corresponding path program 1 times
[2020-11-25 05:50:37,058 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 05:50:37,066 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 05:50:37,084 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 05:50:37,084 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 05:50:37,084 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [2] imperfect sequences [] total 2
[2020-11-25 05:50:37,087 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 05:50:37,087 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 05:50:37,087 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 05:50:37,087 INFO  L87              Difference]: Start difference. First operand 2360 states and 3635 transitions. cyclomatic complexity: 1277 Second operand 3 states.
[2020-11-25 05:50:37,190 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 05:50:37,190 INFO  L93              Difference]: Finished difference Result 2192 states and 2379 transitions.
[2020-11-25 05:50:37,190 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 05:50:37,191 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2192 states and 2379 transitions.
[2020-11-25 05:50:37,202 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 05:50:37,212 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2192 states to 2192 states and 2379 transitions.
[2020-11-25 05:50:37,212 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 620
[2020-11-25 05:50:37,213 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 620
[2020-11-25 05:50:37,213 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2192 states and 2379 transitions.
[2020-11-25 05:50:37,216 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 05:50:37,216 INFO  L728         BuchiCegarLoop]: Abstraction has 2192 states and 2379 transitions.
[2020-11-25 05:50:37,218 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2192 states and 2379 transitions.
[2020-11-25 05:50:37,238 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2192 to 2192.
[2020-11-25 05:50:37,238 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2192 states.
[2020-11-25 05:50:37,243 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2192 states to 2192 states and 2379 transitions.
[2020-11-25 05:50:37,243 INFO  L751         BuchiCegarLoop]: Abstraction has 2192 states and 2379 transitions.
[2020-11-25 05:50:37,243 INFO  L631         BuchiCegarLoop]: Abstraction has 2192 states and 2379 transitions.
[2020-11-25 05:50:37,243 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 05:50:37,243 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2192 states and 2379 transitions.
[2020-11-25 05:50:37,249 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 05:50:37,249 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 05:50:37,249 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 05:50:37,251 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 05:50:37,251 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_StreamProtocol0 := false;
[L3]                 call_approve_StreamProtocol0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L3607]              assume null == 0;
[L3608]  CALL        call this := FreshRefGenerator__success();
[L1626]              havoc newRef;
[L1627]              assume Alloc[newRef] == false;
[L1628]              Alloc[newRef] := true;
[L1629]              assume newRef != null;
[L3608]  RET         call this := FreshRefGenerator__success();
[L3609]              assume now >= 0;
[L3610]              assume DType[this] == StreamProtocol;
[L3611]              assume msgvalue_MSG == 0;
[L3612]              gas := gas - 53000;
[L3613]  CALL        call StreamProtocol_StreamProtocol(this, msgsender_MSG, msgvalue_MSG);
[L395]               havoc __exception;
[L396]               revert := false;
[L397]   COND FALSE  !(__exception)
[L420]   CALL        call StreamProtocol_StreamProtocol__success(this, msgsender_MSG, msgvalue_MSG);
[L1923]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1762]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1747]              assume msgsender_MSG != null;
[L1748]              Balance[this] := 0;
[L1762]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1763]  COND FALSE  !(revert)
[L1923]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1924]  COND FALSE  !(revert)
[L1927]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1830]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1813]              assume msgsender_MSG != null;
[L1814]              Balance[this] := 0;
[L1815]              owner_Owned[this] := null;
[L1817]              owner_Owned[this] := msgsender_MSG;
[L1830]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1831]  COND FALSE  !(revert)
[L1927]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1928]  COND FALSE  !(revert)
[L1931]  CALL        call StreamProtocol_StreamProtocol_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1879]              assume msgsender_MSG != null;
[L1880]              Balance[this] := 0;
[L1881]              symbol_StreamProtocol[this] := 1491346165;
[L1882]              name_StreamProtocol[this] := 1491346165;
[L1883]              decimals_StreamProtocol[this] := 0;
[L1884]              _totalSupply_StreamProtocol[this] := 0;
[L1885]              _stopTrade_StreamProtocol[this] := false;
[L1886]              balances_StreamProtocol[this] := zeroRefintArr();
[L1887]              sum_balances0[this] := 0;
[L1888]              allowed_StreamProtocol[this] := zeroRefRefintArr();
[L1889]              sum_allowed1[this] := 0;
[L1891]              symbol_StreamProtocol[this] := 1357906882;
[L1892]              name_StreamProtocol[this] := -1605590943;
[L1893]              decimals_StreamProtocol[this] := 18;
[L1894]              __var_1 := decimals_StreamProtocol[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1895]              _totalSupply_StreamProtocol[this] := 2000000000 * (nonlinearPow(10, decimals_StreamProtocol[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1896]              _stopTrade_StreamProtocol[this] := false;
[L1897]              sum_balances0[this] := sum_balances0[this] - balances_StreamProtocol[this][owner_Owned[this]];
[L1898]              balances_StreamProtocol[this][owner_Owned[this]] := _totalSupply_StreamProtocol[this];
[L1899]              sum_balances0[this] := sum_balances0[this] + balances_StreamProtocol[this][owner_Owned[this]];
[L1900]              assert { :EventEmitted "Transfer_StreamProtocol" } true;
[L1931]  RET         call StreamProtocol_StreamProtocol_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1932]  COND FALSE  !(revert)
[L420]   RET         call StreamProtocol_StreamProtocol__success(this, msgsender_MSG, msgvalue_MSG);
[L421]               assume !revert && gas >= 0;
[L3613]  RET         call StreamProtocol_StreamProtocol(this, msgsender_MSG, msgvalue_MSG);
[L3614]              assume !revert && gas >= 0;
[L3617]  CALL        call CorralChoice_StreamProtocol(this);
[L3459]              havoc msgsender_MSG;
[L3460]              havoc msgvalue_MSG;
[L3461]              havoc choice;
[L3462]              havoc __ret_0_totalSupply;
[L3463]              havoc tokenOwner_s328;
[L3464]              havoc balance_s328;
[L3465]              havoc tokenOwner_s532;
[L3466]              havoc spender_s532;
[L3467]              havoc remaining_s532;
[L3468]              havoc to_s385;
[L3469]              havoc tokens_s385;
[L3470]              havoc success_s385;
[L3471]              havoc spender_s419;
[L3472]              havoc tokens_s419;
[L3473]              havoc success_s419;
[L3474]              havoc from_s510;
[L3475]              havoc to_s510;
[L3476]              havoc tokens_s510;
[L3477]              havoc success_s510;
[L3478]              havoc __ret_0_owner;
[L3479]              havoc __ret_0_symbol;
[L3480]              havoc __ret_0_name;
[L3481]              havoc __ret_0_decimals;
[L3482]              havoc spender_s582;
[L3483]              havoc tokens_s582;
[L3484]              havoc data_s582;
[L3485]              havoc success_s582;
[L3486]              havoc tokenAddress_s609;
[L3487]              havoc tokens_s609;
[L3488]              havoc success_s609;
[L3489]              havoc _value_s658;
[L3490]              havoc tmpNow;
[L3491]              havoc gas;
[L3492]              assume gas > 4000000 && gas <= 8000000;
[L3493]              tmpNow := now;
[L3494]              havoc now;
[L3495]              assume now > tmpNow;
[L3496]              assume msgsender_MSG != null;
[L3497]              assume DType[msgsender_MSG] != SafeMath;
[L3498]              assume DType[msgsender_MSG] != ERC20Interface;
[L3499]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3500]              assume DType[msgsender_MSG] != Owned;
[L3501]              assume DType[msgsender_MSG] != StreamProtocol;
[L3502]              Alloc[msgsender_MSG] := true;
[L3503]  COND FALSE  !(choice == 15)
[L3509]  COND FALSE  !(choice == 14)
[L3515]  COND FALSE  !(choice == 13)
[L3521]  COND FALSE  !(choice == 12)
[L3528]  COND TRUE   choice == 11
[L3529]              gas := gas - 21000;
[L3530]  COND TRUE   gas >= 0
[L3531]              assume tokens_s419 >= 0 && tokens_s419 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3532]              assume msgvalue_MSG == 0;
[L3533]  CALL        call success_s419 := approve~address~uint256_StreamProtocol(this, msgsender_MSG, msgvalue_MSG, spender_s419, tokens_s419);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s419;
[L3]                 call_approve_StreamProtocol0 := true;
[L3]                 call_approve_StreamProtocol0 := false;
[L3]                 revert := revert_hold;
[L725]               havoc __exception;
[L726]               revert := false;
[L727]   COND FALSE  !(__exception)
[L750]   CALL        call success_s419 := approve~address~uint256_StreamProtocol__success(this, msgsender_MSG, msgvalue_MSG, spender_s419, tokens_s419);
[L2107]  COND FALSE  !(!(_stopTrade_StreamProtocol[this] != true))
[L2111]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_StreamProtocol[this][msgsender_MSG][spender_s419];
[L2112]              allowed_StreamProtocol[this][msgsender_MSG][spender_s419] := tokens_s419;
[L2113]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_StreamProtocol[this][msgsender_MSG][spender_s419];
[L2114]              assert { :EventEmitted "Approval_StreamProtocol" } true;
[L2115]              success_s419 := true;
[L750]   RET         call success_s419 := approve~address~uint256_StreamProtocol__success(this, msgsender_MSG, msgvalue_MSG, spender_s419, tokens_s419);
[L751]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((success_s419 == true && allowed_StreamProtocol[this][msgsender_MSG][spender_s419] == tokens_s419) && _totalSupply_StreamProtocol[this] == old(_totalSupply_StreamProtocol[this])) && balances_StreamProtocol[this] == old(balances_StreamProtocol[this])) && allowed_StreamProtocol[this][p1][p2] == old(allowed_StreamProtocol[this][p1][p2])) && symbol_StreamProtocol[this] == old(symbol_StreamProtocol[this])) && name_StreamProtocol[this] == old(name_StreamProtocol[this])) && decimals_StreamProtocol[this] == old(decimals_StreamProtocol[this])) && _stopTrade_StreamProtocol[this] == old(_stopTrade_StreamProtocol[this])) && owner_Owned[this] == old(owner_Owned[this]));
[L3]                 revert := revert_hold;
[L3533]  RET         call success_s419 := approve~address~uint256_StreamProtocol(this, msgsender_MSG, msgvalue_MSG, spender_s419, tokens_s419);
[L3617]  RET         call CorralChoice_StreamProtocol(this);

Loop:
[L3617]  CALL        call CorralChoice_StreamProtocol(this);
[L3459]              havoc msgsender_MSG;
[L3460]              havoc msgvalue_MSG;
[L3461]              havoc choice;
[L3462]              havoc __ret_0_totalSupply;
[L3463]              havoc tokenOwner_s328;
[L3464]              havoc balance_s328;
[L3465]              havoc tokenOwner_s532;
[L3466]              havoc spender_s532;
[L3467]              havoc remaining_s532;
[L3468]              havoc to_s385;
[L3469]              havoc tokens_s385;
[L3470]              havoc success_s385;
[L3471]              havoc spender_s419;
[L3472]              havoc tokens_s419;
[L3473]              havoc success_s419;
[L3474]              havoc from_s510;
[L3475]              havoc to_s510;
[L3476]              havoc tokens_s510;
[L3477]              havoc success_s510;
[L3478]              havoc __ret_0_owner;
[L3479]              havoc __ret_0_symbol;
[L3480]              havoc __ret_0_name;
[L3481]              havoc __ret_0_decimals;
[L3482]              havoc spender_s582;
[L3483]              havoc tokens_s582;
[L3484]              havoc data_s582;
[L3485]              havoc success_s582;
[L3486]              havoc tokenAddress_s609;
[L3487]              havoc tokens_s609;
[L3488]              havoc success_s609;
[L3489]              havoc _value_s658;
[L3490]              havoc tmpNow;
[L3491]              havoc gas;
[L3492]              assume gas > 4000000 && gas <= 8000000;
[L3493]              tmpNow := now;
[L3494]              havoc now;
[L3495]              assume now > tmpNow;
[L3496]              assume msgsender_MSG != null;
[L3497]              assume DType[msgsender_MSG] != SafeMath;
[L3498]              assume DType[msgsender_MSG] != ERC20Interface;
[L3499]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3500]              assume DType[msgsender_MSG] != Owned;
[L3501]              assume DType[msgsender_MSG] != StreamProtocol;
[L3502]              Alloc[msgsender_MSG] := true;
[L3503]  COND FALSE  !(choice == 15)
[L3509]  COND FALSE  !(choice == 14)
[L3515]  COND FALSE  !(choice == 13)
[L3521]  COND FALSE  !(choice == 12)
[L3528]  COND TRUE   choice == 11
[L3529]              gas := gas - 21000;
[L3530]  COND TRUE   gas >= 0
[L3531]              assume tokens_s419 >= 0 && tokens_s419 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3532]              assume msgvalue_MSG == 0;
[L3533]  CALL        call success_s419 := approve~address~uint256_StreamProtocol(this, msgsender_MSG, msgvalue_MSG, spender_s419, tokens_s419);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s419;
[L3]                 call_approve_StreamProtocol0 := true;
[L3]                 call_approve_StreamProtocol0 := false;
[L3]                 revert := revert_hold;
[L725]               havoc __exception;
[L726]               revert := false;
[L727]   COND FALSE  !(__exception)
[L750]   CALL        call success_s419 := approve~address~uint256_StreamProtocol__success(this, msgsender_MSG, msgvalue_MSG, spender_s419, tokens_s419);
[L2107]  COND FALSE  !(!(_stopTrade_StreamProtocol[this] != true))
[L2111]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_StreamProtocol[this][msgsender_MSG][spender_s419];
[L2112]              allowed_StreamProtocol[this][msgsender_MSG][spender_s419] := tokens_s419;
[L2113]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_StreamProtocol[this][msgsender_MSG][spender_s419];
[L2114]              assert { :EventEmitted "Approval_StreamProtocol" } true;
[L2115]              success_s419 := true;
[L750]   RET         call success_s419 := approve~address~uint256_StreamProtocol__success(this, msgsender_MSG, msgvalue_MSG, spender_s419, tokens_s419);
[L751]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((success_s419 == true && allowed_StreamProtocol[this][msgsender_MSG][spender_s419] == tokens_s419) && _totalSupply_StreamProtocol[this] == old(_totalSupply_StreamProtocol[this])) && balances_StreamProtocol[this] == old(balances_StreamProtocol[this])) && allowed_StreamProtocol[this][p1][p2] == old(allowed_StreamProtocol[this][p1][p2])) && symbol_StreamProtocol[this] == old(symbol_StreamProtocol[this])) && name_StreamProtocol[this] == old(name_StreamProtocol[this])) && decimals_StreamProtocol[this] == old(decimals_StreamProtocol[this])) && _stopTrade_StreamProtocol[this] == old(_stopTrade_StreamProtocol[this])) && owner_Owned[this] == old(owner_Owned[this]));
[L3]                 revert := revert_hold;
[L3533]  RET         call success_s419 := approve~address~uint256_StreamProtocol(this, msgsender_MSG, msgvalue_MSG, spender_s419, tokens_s419);
[L3617]  RET         call CorralChoice_StreamProtocol(this);

[2020-11-25 05:50:37,255 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 05:50:37,255 INFO  L82        PathProgramCache]: Analyzing trace with hash -2141002212, now seen corresponding path program 1 times
[2020-11-25 05:50:37,256 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 05:50:37,303 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 05:50:37,451 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 05:50:37,452 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 05:50:37,452 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [12] imperfect sequences [] total 12
[2020-11-25 05:50:37,452 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 05:50:37,452 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 13 interpolants.
[2020-11-25 05:50:37,453 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=25, Invalid=131, Unknown=0, NotChecked=0, Total=156
[2020-11-25 05:50:37,453 INFO  L87              Difference]: Start difference. First operand 2192 states and 2379 transitions. cyclomatic complexity: 189 Second operand 13 states.
[2020-11-25 05:50:38,707 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 05:50:38,707 INFO  L93              Difference]: Finished difference Result 2333 states and 2544 transitions.
[2020-11-25 05:50:38,707 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 13 states. 
[2020-11-25 05:50:38,707 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2333 states and 2544 transitions.
[2020-11-25 05:50:38,714 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 05:50:38,737 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2333 states to 2333 states and 2544 transitions.
[2020-11-25 05:50:38,738 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 687
[2020-11-25 05:50:38,740 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 687
[2020-11-25 05:50:38,740 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2333 states and 2544 transitions.
[2020-11-25 05:50:38,745 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 05:50:38,745 INFO  L728         BuchiCegarLoop]: Abstraction has 2333 states and 2544 transitions.
[2020-11-25 05:50:38,749 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2333 states and 2544 transitions.
[2020-11-25 05:50:38,774 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2333 to 2302.
[2020-11-25 05:50:38,774 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2302 states.
[2020-11-25 05:50:38,777 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2302 states to 2302 states and 2504 transitions.
[2020-11-25 05:50:38,777 INFO  L751         BuchiCegarLoop]: Abstraction has 2302 states and 2504 transitions.
[2020-11-25 05:50:38,777 INFO  L631         BuchiCegarLoop]: Abstraction has 2302 states and 2504 transitions.
[2020-11-25 05:50:38,778 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 05:50:38,778 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2302 states and 2504 transitions.
[2020-11-25 05:50:38,783 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 05:50:38,784 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 05:50:38,784 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 05:50:38,785 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 05:50:38,786 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_StreamProtocol0 := false;
[L3]                 call_approve_StreamProtocol0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L3607]              assume null == 0;
[L3608]  CALL        call this := FreshRefGenerator__success();
[L1626]              havoc newRef;
[L1627]              assume Alloc[newRef] == false;
[L1628]              Alloc[newRef] := true;
[L1629]              assume newRef != null;
[L3608]  RET         call this := FreshRefGenerator__success();
[L3609]              assume now >= 0;
[L3610]              assume DType[this] == StreamProtocol;
[L3611]              assume msgvalue_MSG == 0;
[L3612]              gas := gas - 53000;
[L3613]  CALL        call StreamProtocol_StreamProtocol(this, msgsender_MSG, msgvalue_MSG);
[L395]               havoc __exception;
[L396]               revert := false;
[L397]   COND FALSE  !(__exception)
[L420]   CALL        call StreamProtocol_StreamProtocol__success(this, msgsender_MSG, msgvalue_MSG);
[L1923]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1762]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1747]              assume msgsender_MSG != null;
[L1748]              Balance[this] := 0;
[L1762]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1763]  COND FALSE  !(revert)
[L1923]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1924]  COND FALSE  !(revert)
[L1927]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1830]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1813]              assume msgsender_MSG != null;
[L1814]              Balance[this] := 0;
[L1815]              owner_Owned[this] := null;
[L1817]              owner_Owned[this] := msgsender_MSG;
[L1830]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1831]  COND FALSE  !(revert)
[L1927]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1928]  COND FALSE  !(revert)
[L1931]  CALL        call StreamProtocol_StreamProtocol_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1879]              assume msgsender_MSG != null;
[L1880]              Balance[this] := 0;
[L1881]              symbol_StreamProtocol[this] := 1491346165;
[L1882]              name_StreamProtocol[this] := 1491346165;
[L1883]              decimals_StreamProtocol[this] := 0;
[L1884]              _totalSupply_StreamProtocol[this] := 0;
[L1885]              _stopTrade_StreamProtocol[this] := false;
[L1886]              balances_StreamProtocol[this] := zeroRefintArr();
[L1887]              sum_balances0[this] := 0;
[L1888]              allowed_StreamProtocol[this] := zeroRefRefintArr();
[L1889]              sum_allowed1[this] := 0;
[L1891]              symbol_StreamProtocol[this] := 1357906882;
[L1892]              name_StreamProtocol[this] := -1605590943;
[L1893]              decimals_StreamProtocol[this] := 18;
[L1894]              __var_1 := decimals_StreamProtocol[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1895]              _totalSupply_StreamProtocol[this] := 2000000000 * (nonlinearPow(10, decimals_StreamProtocol[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1896]              _stopTrade_StreamProtocol[this] := false;
[L1897]              sum_balances0[this] := sum_balances0[this] - balances_StreamProtocol[this][owner_Owned[this]];
[L1898]              balances_StreamProtocol[this][owner_Owned[this]] := _totalSupply_StreamProtocol[this];
[L1899]              sum_balances0[this] := sum_balances0[this] + balances_StreamProtocol[this][owner_Owned[this]];
[L1900]              assert { :EventEmitted "Transfer_StreamProtocol" } true;
[L1931]  RET         call StreamProtocol_StreamProtocol_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1932]  COND FALSE  !(revert)
[L420]   RET         call StreamProtocol_StreamProtocol__success(this, msgsender_MSG, msgvalue_MSG);
[L421]               assume !revert && gas >= 0;
[L3613]  RET         call StreamProtocol_StreamProtocol(this, msgsender_MSG, msgvalue_MSG);
[L3614]              assume !revert && gas >= 0;
[L3617]  CALL        call CorralChoice_StreamProtocol(this);
[L3459]              havoc msgsender_MSG;
[L3460]              havoc msgvalue_MSG;
[L3461]              havoc choice;
[L3462]              havoc __ret_0_totalSupply;
[L3463]              havoc tokenOwner_s328;
[L3464]              havoc balance_s328;
[L3465]              havoc tokenOwner_s532;
[L3466]              havoc spender_s532;
[L3467]              havoc remaining_s532;
[L3468]              havoc to_s385;
[L3469]              havoc tokens_s385;
[L3470]              havoc success_s385;
[L3471]              havoc spender_s419;
[L3472]              havoc tokens_s419;
[L3473]              havoc success_s419;
[L3474]              havoc from_s510;
[L3475]              havoc to_s510;
[L3476]              havoc tokens_s510;
[L3477]              havoc success_s510;
[L3478]              havoc __ret_0_owner;
[L3479]              havoc __ret_0_symbol;
[L3480]              havoc __ret_0_name;
[L3481]              havoc __ret_0_decimals;
[L3482]              havoc spender_s582;
[L3483]              havoc tokens_s582;
[L3484]              havoc data_s582;
[L3485]              havoc success_s582;
[L3486]              havoc tokenAddress_s609;
[L3487]              havoc tokens_s609;
[L3488]              havoc success_s609;
[L3489]              havoc _value_s658;
[L3490]              havoc tmpNow;
[L3491]              havoc gas;
[L3492]              assume gas > 4000000 && gas <= 8000000;
[L3493]              tmpNow := now;
[L3494]              havoc now;
[L3495]              assume now > tmpNow;
[L3496]              assume msgsender_MSG != null;
[L3497]              assume DType[msgsender_MSG] != SafeMath;
[L3498]              assume DType[msgsender_MSG] != ERC20Interface;
[L3499]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3500]              assume DType[msgsender_MSG] != Owned;
[L3501]              assume DType[msgsender_MSG] != StreamProtocol;
[L3502]              Alloc[msgsender_MSG] := true;
[L3503]  COND FALSE  !(choice == 15)
[L3509]  COND FALSE  !(choice == 14)
[L3515]  COND FALSE  !(choice == 13)
[L3521]  COND FALSE  !(choice == 12)
[L3528]  COND TRUE   choice == 11
[L3529]              gas := gas - 21000;
[L3530]  COND TRUE   gas >= 0
[L3531]              assume tokens_s419 >= 0 && tokens_s419 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3532]              assume msgvalue_MSG == 0;
[L3533]  CALL        call success_s419 := approve~address~uint256_StreamProtocol(this, msgsender_MSG, msgvalue_MSG, spender_s419, tokens_s419);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s419;
[L3]                 call_approve_StreamProtocol0 := true;
[L3]                 call_approve_StreamProtocol0 := false;
[L3]                 revert := revert_hold;
[L725]               havoc __exception;
[L726]               revert := false;
[L727]   COND TRUE   __exception
[L728]               __tmp__Balance := Balance;
[L729]               __tmp__DType := DType;
[L730]               __tmp__Alloc := Alloc;
[L731]               __tmp__balance_ADDR := balance_ADDR;
[L732]               __tmp__M_Ref_int := M_Ref_int;
[L733]               __tmp__sum_balances0 := sum_balances0;
[L734]               __tmp__alloc_allowed_StreamProtocol_lvl0 := alloc_allowed_StreamProtocol_lvl0;
[L735]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L736]               __tmp__sum_allowed1 := sum_allowed1;
[L737]               __tmp__Length := Length;
[L738]               __tmp__now := now;
[L739]               __tmp__owner_Owned := owner_Owned;
[L740]               __tmp__symbol_StreamProtocol := symbol_StreamProtocol;
[L741]               __tmp__name_StreamProtocol := name_StreamProtocol;
[L742]               __tmp__decimals_StreamProtocol := decimals_StreamProtocol;
[L743]               __tmp___totalSupply_StreamProtocol := _totalSupply_StreamProtocol;
[L744]               __tmp___stopTrade_StreamProtocol := _stopTrade_StreamProtocol;
[L745]               __tmp__balances_StreamProtocol := balances_StreamProtocol;
[L746]               __tmp__allowed_StreamProtocol := allowed_StreamProtocol;
[L747]   CALL        call success_s419 := approve~address~uint256_StreamProtocol__fail(this, msgsender_MSG, msgvalue_MSG, spender_s419, tokens_s419);
[L2094]  COND TRUE   !(__tmp___stopTrade_StreamProtocol[this] != true)
[L2095]              revert := true;
[L747]   RET         call success_s419 := approve~address~uint256_StreamProtocol__fail(this, msgsender_MSG, msgvalue_MSG, spender_s419, tokens_s419);
[L748]               assume revert || gas < 0;
[L3533]  RET         call success_s419 := approve~address~uint256_StreamProtocol(this, msgsender_MSG, msgvalue_MSG, spender_s419, tokens_s419);
[L3617]  RET         call CorralChoice_StreamProtocol(this);

Loop:
[L3617]  CALL        call CorralChoice_StreamProtocol(this);
[L3459]              havoc msgsender_MSG;
[L3460]              havoc msgvalue_MSG;
[L3461]              havoc choice;
[L3462]              havoc __ret_0_totalSupply;
[L3463]              havoc tokenOwner_s328;
[L3464]              havoc balance_s328;
[L3465]              havoc tokenOwner_s532;
[L3466]              havoc spender_s532;
[L3467]              havoc remaining_s532;
[L3468]              havoc to_s385;
[L3469]              havoc tokens_s385;
[L3470]              havoc success_s385;
[L3471]              havoc spender_s419;
[L3472]              havoc tokens_s419;
[L3473]              havoc success_s419;
[L3474]              havoc from_s510;
[L3475]              havoc to_s510;
[L3476]              havoc tokens_s510;
[L3477]              havoc success_s510;
[L3478]              havoc __ret_0_owner;
[L3479]              havoc __ret_0_symbol;
[L3480]              havoc __ret_0_name;
[L3481]              havoc __ret_0_decimals;
[L3482]              havoc spender_s582;
[L3483]              havoc tokens_s582;
[L3484]              havoc data_s582;
[L3485]              havoc success_s582;
[L3486]              havoc tokenAddress_s609;
[L3487]              havoc tokens_s609;
[L3488]              havoc success_s609;
[L3489]              havoc _value_s658;
[L3490]              havoc tmpNow;
[L3491]              havoc gas;
[L3492]              assume gas > 4000000 && gas <= 8000000;
[L3493]              tmpNow := now;
[L3494]              havoc now;
[L3495]              assume now > tmpNow;
[L3496]              assume msgsender_MSG != null;
[L3497]              assume DType[msgsender_MSG] != SafeMath;
[L3498]              assume DType[msgsender_MSG] != ERC20Interface;
[L3499]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3500]              assume DType[msgsender_MSG] != Owned;
[L3501]              assume DType[msgsender_MSG] != StreamProtocol;
[L3502]              Alloc[msgsender_MSG] := true;
[L3503]  COND FALSE  !(choice == 15)
[L3509]  COND FALSE  !(choice == 14)
[L3515]  COND FALSE  !(choice == 13)
[L3521]  COND FALSE  !(choice == 12)
[L3528]  COND TRUE   choice == 11
[L3529]              gas := gas - 21000;
[L3530]  COND TRUE   gas >= 0
[L3531]              assume tokens_s419 >= 0 && tokens_s419 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3532]              assume msgvalue_MSG == 0;
[L3533]  CALL        call success_s419 := approve~address~uint256_StreamProtocol(this, msgsender_MSG, msgvalue_MSG, spender_s419, tokens_s419);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s419;
[L3]                 call_approve_StreamProtocol0 := true;
[L3]                 call_approve_StreamProtocol0 := false;
[L3]                 revert := revert_hold;
[L725]               havoc __exception;
[L726]               revert := false;
[L727]   COND TRUE   __exception
[L728]               __tmp__Balance := Balance;
[L729]               __tmp__DType := DType;
[L730]               __tmp__Alloc := Alloc;
[L731]               __tmp__balance_ADDR := balance_ADDR;
[L732]               __tmp__M_Ref_int := M_Ref_int;
[L733]               __tmp__sum_balances0 := sum_balances0;
[L734]               __tmp__alloc_allowed_StreamProtocol_lvl0 := alloc_allowed_StreamProtocol_lvl0;
[L735]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L736]               __tmp__sum_allowed1 := sum_allowed1;
[L737]               __tmp__Length := Length;
[L738]               __tmp__now := now;
[L739]               __tmp__owner_Owned := owner_Owned;
[L740]               __tmp__symbol_StreamProtocol := symbol_StreamProtocol;
[L741]               __tmp__name_StreamProtocol := name_StreamProtocol;
[L742]               __tmp__decimals_StreamProtocol := decimals_StreamProtocol;
[L743]               __tmp___totalSupply_StreamProtocol := _totalSupply_StreamProtocol;
[L744]               __tmp___stopTrade_StreamProtocol := _stopTrade_StreamProtocol;
[L745]               __tmp__balances_StreamProtocol := balances_StreamProtocol;
[L746]               __tmp__allowed_StreamProtocol := allowed_StreamProtocol;
[L747]   CALL        call success_s419 := approve~address~uint256_StreamProtocol__fail(this, msgsender_MSG, msgvalue_MSG, spender_s419, tokens_s419);
[L2094]  COND TRUE   !(__tmp___stopTrade_StreamProtocol[this] != true)
[L2095]              revert := true;
[L747]   RET         call success_s419 := approve~address~uint256_StreamProtocol__fail(this, msgsender_MSG, msgvalue_MSG, spender_s419, tokens_s419);
[L748]               assume revert || gas < 0;
[L3533]  RET         call success_s419 := approve~address~uint256_StreamProtocol(this, msgsender_MSG, msgvalue_MSG, spender_s419, tokens_s419);
[L3617]  RET         call CorralChoice_StreamProtocol(this);

[2020-11-25 05:50:38,793 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 05:50:38,793 INFO  L82        PathProgramCache]: Analyzing trace with hash -1680820989, now seen corresponding path program 1 times
[2020-11-25 05:50:38,794 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 05:50:38,803 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 05:50:38,847 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 05:50:38,847 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 05:50:38,847 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [10] imperfect sequences [] total 10
[2020-11-25 05:50:38,848 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 05:50:38,848 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 11 interpolants.
[2020-11-25 05:50:38,848 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=19, Invalid=91, Unknown=0, NotChecked=0, Total=110
[2020-11-25 05:50:38,848 INFO  L87              Difference]: Start difference. First operand 2302 states and 2504 transitions. cyclomatic complexity: 206 Second operand 11 states.
[2020-11-25 05:50:39,953 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 05:50:39,953 INFO  L93              Difference]: Finished difference Result 3891 states and 4370 transitions.
[2020-11-25 05:50:39,953 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 13 states. 
[2020-11-25 05:50:39,953 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3891 states and 4370 transitions.
[2020-11-25 05:50:39,965 INFO  L131   ngComponentsAnalysis]: Automaton has 5 accepting balls. 20
[2020-11-25 05:50:39,974 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3891 states to 3891 states and 4370 transitions.
[2020-11-25 05:50:39,975 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1182
[2020-11-25 05:50:39,975 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1182
[2020-11-25 05:50:39,975 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3891 states and 4370 transitions.
[2020-11-25 05:50:39,979 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 05:50:39,979 INFO  L728         BuchiCegarLoop]: Abstraction has 3891 states and 4370 transitions.
[2020-11-25 05:50:39,981 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3891 states and 4370 transitions.
[2020-11-25 05:50:40,011 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3891 to 3340.
[2020-11-25 05:50:40,011 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3340 states.
[2020-11-25 05:50:40,015 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3340 states to 3340 states and 3789 transitions.
[2020-11-25 05:50:40,015 INFO  L751         BuchiCegarLoop]: Abstraction has 3340 states and 3789 transitions.
[2020-11-25 05:50:40,015 INFO  L631         BuchiCegarLoop]: Abstraction has 3340 states and 3789 transitions.
[2020-11-25 05:50:40,015 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 05:50:40,015 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3340 states and 3789 transitions.
[2020-11-25 05:50:40,019 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 16
[2020-11-25 05:50:40,020 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 05:50:40,020 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 05:50:40,021 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 05:50:40,021 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_StreamProtocol0 := false;
[L3]                 call_approve_StreamProtocol0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L3607]              assume null == 0;
[L3608]  CALL        call this := FreshRefGenerator__success();
[L1626]              havoc newRef;
[L1627]              assume Alloc[newRef] == false;
[L1628]              Alloc[newRef] := true;
[L1629]              assume newRef != null;
[L3608]  RET         call this := FreshRefGenerator__success();
[L3609]              assume now >= 0;
[L3610]              assume DType[this] == StreamProtocol;
[L3611]              assume msgvalue_MSG == 0;
[L3612]              gas := gas - 53000;
[L3613]  CALL        call StreamProtocol_StreamProtocol(this, msgsender_MSG, msgvalue_MSG);
[L395]               havoc __exception;
[L396]               revert := false;
[L397]   COND FALSE  !(__exception)
[L420]   CALL        call StreamProtocol_StreamProtocol__success(this, msgsender_MSG, msgvalue_MSG);
[L1923]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1762]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1747]              assume msgsender_MSG != null;
[L1748]              Balance[this] := 0;
[L1762]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1763]  COND FALSE  !(revert)
[L1923]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1924]  COND FALSE  !(revert)
[L1927]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1830]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1813]              assume msgsender_MSG != null;
[L1814]              Balance[this] := 0;
[L1815]              owner_Owned[this] := null;
[L1817]              owner_Owned[this] := msgsender_MSG;
[L1830]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1831]  COND FALSE  !(revert)
[L1927]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1928]  COND FALSE  !(revert)
[L1931]  CALL        call StreamProtocol_StreamProtocol_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1879]              assume msgsender_MSG != null;
[L1880]              Balance[this] := 0;
[L1881]              symbol_StreamProtocol[this] := 1491346165;
[L1882]              name_StreamProtocol[this] := 1491346165;
[L1883]              decimals_StreamProtocol[this] := 0;
[L1884]              _totalSupply_StreamProtocol[this] := 0;
[L1885]              _stopTrade_StreamProtocol[this] := false;
[L1886]              balances_StreamProtocol[this] := zeroRefintArr();
[L1887]              sum_balances0[this] := 0;
[L1888]              allowed_StreamProtocol[this] := zeroRefRefintArr();
[L1889]              sum_allowed1[this] := 0;
[L1891]              symbol_StreamProtocol[this] := 1357906882;
[L1892]              name_StreamProtocol[this] := -1605590943;
[L1893]              decimals_StreamProtocol[this] := 18;
[L1894]              __var_1 := decimals_StreamProtocol[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1895]              _totalSupply_StreamProtocol[this] := 2000000000 * (nonlinearPow(10, decimals_StreamProtocol[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1896]              _stopTrade_StreamProtocol[this] := false;
[L1897]              sum_balances0[this] := sum_balances0[this] - balances_StreamProtocol[this][owner_Owned[this]];
[L1898]              balances_StreamProtocol[this][owner_Owned[this]] := _totalSupply_StreamProtocol[this];
[L1899]              sum_balances0[this] := sum_balances0[this] + balances_StreamProtocol[this][owner_Owned[this]];
[L1900]              assert { :EventEmitted "Transfer_StreamProtocol" } true;
[L1931]  RET         call StreamProtocol_StreamProtocol_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1932]  COND FALSE  !(revert)
[L420]   RET         call StreamProtocol_StreamProtocol__success(this, msgsender_MSG, msgvalue_MSG);
[L421]               assume !revert && gas >= 0;
[L3613]  RET         call StreamProtocol_StreamProtocol(this, msgsender_MSG, msgvalue_MSG);
[L3614]              assume !revert && gas >= 0;
[L3617]  CALL        call CorralChoice_StreamProtocol(this);
[L3459]              havoc msgsender_MSG;
[L3460]              havoc msgvalue_MSG;
[L3461]              havoc choice;
[L3462]              havoc __ret_0_totalSupply;
[L3463]              havoc tokenOwner_s328;
[L3464]              havoc balance_s328;
[L3465]              havoc tokenOwner_s532;
[L3466]              havoc spender_s532;
[L3467]              havoc remaining_s532;
[L3468]              havoc to_s385;
[L3469]              havoc tokens_s385;
[L3470]              havoc success_s385;
[L3471]              havoc spender_s419;
[L3472]              havoc tokens_s419;
[L3473]              havoc success_s419;
[L3474]              havoc from_s510;
[L3475]              havoc to_s510;
[L3476]              havoc tokens_s510;
[L3477]              havoc success_s510;
[L3478]              havoc __ret_0_owner;
[L3479]              havoc __ret_0_symbol;
[L3480]              havoc __ret_0_name;
[L3481]              havoc __ret_0_decimals;
[L3482]              havoc spender_s582;
[L3483]              havoc tokens_s582;
[L3484]              havoc data_s582;
[L3485]              havoc success_s582;
[L3486]              havoc tokenAddress_s609;
[L3487]              havoc tokens_s609;
[L3488]              havoc success_s609;
[L3489]              havoc _value_s658;
[L3490]              havoc tmpNow;
[L3491]              havoc gas;
[L3492]              assume gas > 4000000 && gas <= 8000000;
[L3493]              tmpNow := now;
[L3494]              havoc now;
[L3495]              assume now > tmpNow;
[L3496]              assume msgsender_MSG != null;
[L3497]              assume DType[msgsender_MSG] != SafeMath;
[L3498]              assume DType[msgsender_MSG] != ERC20Interface;
[L3499]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3500]              assume DType[msgsender_MSG] != Owned;
[L3501]              assume DType[msgsender_MSG] != StreamProtocol;
[L3502]              Alloc[msgsender_MSG] := true;
[L3503]  COND FALSE  !(choice == 15)
[L3509]  COND FALSE  !(choice == 14)
[L3515]  COND FALSE  !(choice == 13)
[L3521]  COND FALSE  !(choice == 12)
[L3528]  COND TRUE   choice == 11
[L3529]              gas := gas - 21000;
[L3530]  COND TRUE   gas >= 0
[L3531]              assume tokens_s419 >= 0 && tokens_s419 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3532]              assume msgvalue_MSG == 0;
[L3533]  CALL        call success_s419 := approve~address~uint256_StreamProtocol(this, msgsender_MSG, msgvalue_MSG, spender_s419, tokens_s419);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s419;
[L3]                 call_approve_StreamProtocol0 := true;
[L3]                 call_approve_StreamProtocol0 := false;
[L3]                 revert := revert_hold;
[L725]               havoc __exception;
[L726]               revert := false;
[L727]   COND TRUE   __exception
[L728]               __tmp__Balance := Balance;
[L729]               __tmp__DType := DType;
[L730]               __tmp__Alloc := Alloc;
[L731]               __tmp__balance_ADDR := balance_ADDR;
[L732]               __tmp__M_Ref_int := M_Ref_int;
[L733]               __tmp__sum_balances0 := sum_balances0;
[L734]               __tmp__alloc_allowed_StreamProtocol_lvl0 := alloc_allowed_StreamProtocol_lvl0;
[L735]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L736]               __tmp__sum_allowed1 := sum_allowed1;
[L737]               __tmp__Length := Length;
[L738]               __tmp__now := now;
[L739]               __tmp__owner_Owned := owner_Owned;
[L740]               __tmp__symbol_StreamProtocol := symbol_StreamProtocol;
[L741]               __tmp__name_StreamProtocol := name_StreamProtocol;
[L742]               __tmp__decimals_StreamProtocol := decimals_StreamProtocol;
[L743]               __tmp___totalSupply_StreamProtocol := _totalSupply_StreamProtocol;
[L744]               __tmp___stopTrade_StreamProtocol := _stopTrade_StreamProtocol;
[L745]               __tmp__balances_StreamProtocol := balances_StreamProtocol;
[L746]               __tmp__allowed_StreamProtocol := allowed_StreamProtocol;
[L747]   CALL        call success_s419 := approve~address~uint256_StreamProtocol__fail(this, msgsender_MSG, msgvalue_MSG, spender_s419, tokens_s419);
[L2094]  COND FALSE  !(!(__tmp___stopTrade_StreamProtocol[this] != true))
[L2098]              __tmp__sum_allowed1[msgsender_MSG] := __tmp__sum_allowed1[msgsender_MSG] - __tmp__allowed_StreamProtocol[this][msgsender_MSG][spender_s419];
[L2099]              __tmp__allowed_StreamProtocol[this][msgsender_MSG][spender_s419] := tokens_s419;
[L2100]              __tmp__sum_allowed1[msgsender_MSG] := __tmp__sum_allowed1[msgsender_MSG] + __tmp__allowed_StreamProtocol[this][msgsender_MSG][spender_s419];
[L2101]              success_s419 := true;
[L747]   RET         call success_s419 := approve~address~uint256_StreamProtocol__fail(this, msgsender_MSG, msgvalue_MSG, spender_s419, tokens_s419);
[L748]               assume revert || gas < 0;
[L3533]  RET         call success_s419 := approve~address~uint256_StreamProtocol(this, msgsender_MSG, msgvalue_MSG, spender_s419, tokens_s419);
[L3617]  RET         call CorralChoice_StreamProtocol(this);

Loop:
[L3617]  CALL        call CorralChoice_StreamProtocol(this);
[L3459]              havoc msgsender_MSG;
[L3460]              havoc msgvalue_MSG;
[L3461]              havoc choice;
[L3462]              havoc __ret_0_totalSupply;
[L3463]              havoc tokenOwner_s328;
[L3464]              havoc balance_s328;
[L3465]              havoc tokenOwner_s532;
[L3466]              havoc spender_s532;
[L3467]              havoc remaining_s532;
[L3468]              havoc to_s385;
[L3469]              havoc tokens_s385;
[L3470]              havoc success_s385;
[L3471]              havoc spender_s419;
[L3472]              havoc tokens_s419;
[L3473]              havoc success_s419;
[L3474]              havoc from_s510;
[L3475]              havoc to_s510;
[L3476]              havoc tokens_s510;
[L3477]              havoc success_s510;
[L3478]              havoc __ret_0_owner;
[L3479]              havoc __ret_0_symbol;
[L3480]              havoc __ret_0_name;
[L3481]              havoc __ret_0_decimals;
[L3482]              havoc spender_s582;
[L3483]              havoc tokens_s582;
[L3484]              havoc data_s582;
[L3485]              havoc success_s582;
[L3486]              havoc tokenAddress_s609;
[L3487]              havoc tokens_s609;
[L3488]              havoc success_s609;
[L3489]              havoc _value_s658;
[L3490]              havoc tmpNow;
[L3491]              havoc gas;
[L3492]              assume gas > 4000000 && gas <= 8000000;
[L3493]              tmpNow := now;
[L3494]              havoc now;
[L3495]              assume now > tmpNow;
[L3496]              assume msgsender_MSG != null;
[L3497]              assume DType[msgsender_MSG] != SafeMath;
[L3498]              assume DType[msgsender_MSG] != ERC20Interface;
[L3499]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3500]              assume DType[msgsender_MSG] != Owned;
[L3501]              assume DType[msgsender_MSG] != StreamProtocol;
[L3502]              Alloc[msgsender_MSG] := true;
[L3503]  COND FALSE  !(choice == 15)
[L3509]  COND FALSE  !(choice == 14)
[L3515]  COND FALSE  !(choice == 13)
[L3521]  COND FALSE  !(choice == 12)
[L3528]  COND TRUE   choice == 11
[L3529]              gas := gas - 21000;
[L3530]  COND TRUE   gas >= 0
[L3531]              assume tokens_s419 >= 0 && tokens_s419 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3532]              assume msgvalue_MSG == 0;
[L3533]  CALL        call success_s419 := approve~address~uint256_StreamProtocol(this, msgsender_MSG, msgvalue_MSG, spender_s419, tokens_s419);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s419;
[L3]                 call_approve_StreamProtocol0 := true;
[L3]                 call_approve_StreamProtocol0 := false;
[L3]                 revert := revert_hold;
[L725]               havoc __exception;
[L726]               revert := false;
[L727]   COND TRUE   __exception
[L728]               __tmp__Balance := Balance;
[L729]               __tmp__DType := DType;
[L730]               __tmp__Alloc := Alloc;
[L731]               __tmp__balance_ADDR := balance_ADDR;
[L732]               __tmp__M_Ref_int := M_Ref_int;
[L733]               __tmp__sum_balances0 := sum_balances0;
[L734]               __tmp__alloc_allowed_StreamProtocol_lvl0 := alloc_allowed_StreamProtocol_lvl0;
[L735]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L736]               __tmp__sum_allowed1 := sum_allowed1;
[L737]               __tmp__Length := Length;
[L738]               __tmp__now := now;
[L739]               __tmp__owner_Owned := owner_Owned;
[L740]               __tmp__symbol_StreamProtocol := symbol_StreamProtocol;
[L741]               __tmp__name_StreamProtocol := name_StreamProtocol;
[L742]               __tmp__decimals_StreamProtocol := decimals_StreamProtocol;
[L743]               __tmp___totalSupply_StreamProtocol := _totalSupply_StreamProtocol;
[L744]               __tmp___stopTrade_StreamProtocol := _stopTrade_StreamProtocol;
[L745]               __tmp__balances_StreamProtocol := balances_StreamProtocol;
[L746]               __tmp__allowed_StreamProtocol := allowed_StreamProtocol;
[L747]   CALL        call success_s419 := approve~address~uint256_StreamProtocol__fail(this, msgsender_MSG, msgvalue_MSG, spender_s419, tokens_s419);
[L2094]  COND FALSE  !(!(__tmp___stopTrade_StreamProtocol[this] != true))
[L2098]              __tmp__sum_allowed1[msgsender_MSG] := __tmp__sum_allowed1[msgsender_MSG] - __tmp__allowed_StreamProtocol[this][msgsender_MSG][spender_s419];
[L2099]              __tmp__allowed_StreamProtocol[this][msgsender_MSG][spender_s419] := tokens_s419;
[L2100]              __tmp__sum_allowed1[msgsender_MSG] := __tmp__sum_allowed1[msgsender_MSG] + __tmp__allowed_StreamProtocol[this][msgsender_MSG][spender_s419];
[L2101]              success_s419 := true;
[L747]   RET         call success_s419 := approve~address~uint256_StreamProtocol__fail(this, msgsender_MSG, msgvalue_MSG, spender_s419, tokens_s419);
[L748]               assume revert || gas < 0;
[L3533]  RET         call success_s419 := approve~address~uint256_StreamProtocol(this, msgsender_MSG, msgvalue_MSG, spender_s419, tokens_s419);
[L3617]  RET         call CorralChoice_StreamProtocol(this);

[2020-11-25 05:50:40,024 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 05:50:40,024 INFO  L82        PathProgramCache]: Analyzing trace with hash -1659766903, now seen corresponding path program 1 times
[2020-11-25 05:50:40,024 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 05:50:40,031 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 05:50:40,052 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 05:50:40,052 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 05:50:40,052 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 05:50:40,052 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 05:50:40,052 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 05:50:40,052 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=10, Invalid=20, Unknown=0, NotChecked=0, Total=30
[2020-11-25 05:50:40,052 INFO  L87              Difference]: Start difference. First operand 3340 states and 3789 transitions. cyclomatic complexity: 457 Second operand 6 states.
[2020-11-25 05:50:40,386 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 05:50:40,386 INFO  L93              Difference]: Finished difference Result 4468 states and 5398 transitions.
[2020-11-25 05:50:40,386 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-11-25 05:50:40,386 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4468 states and 5398 transitions.
[2020-11-25 05:50:40,399 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 44
[2020-11-25 05:50:40,417 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4468 states to 3961 states and 4879 transitions.
[2020-11-25 05:50:40,417 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1000
[2020-11-25 05:50:40,418 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1000
[2020-11-25 05:50:40,418 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3961 states and 4879 transitions.
[2020-11-25 05:50:40,423 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 05:50:40,423 INFO  L728         BuchiCegarLoop]: Abstraction has 3961 states and 4879 transitions.
[2020-11-25 05:50:40,424 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3961 states and 4879 transitions.
[2020-11-25 05:50:40,458 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3961 to 3101.
[2020-11-25 05:50:40,458 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3101 states.
[2020-11-25 05:50:40,463 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3101 states to 3101 states and 3570 transitions.
[2020-11-25 05:50:40,463 INFO  L751         BuchiCegarLoop]: Abstraction has 3101 states and 3570 transitions.
[2020-11-25 05:50:40,463 INFO  L631         BuchiCegarLoop]: Abstraction has 3101 states and 3570 transitions.
[2020-11-25 05:50:40,463 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 05:50:40,463 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3101 states and 3570 transitions.
[2020-11-25 05:50:40,467 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 16
[2020-11-25 05:50:40,467 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 05:50:40,467 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 05:50:40,468 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 05:50:40,468 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_StreamProtocol0 := false;
[L3]                 call_approve_StreamProtocol0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L3607]              assume null == 0;
[L3608]  CALL        call this := FreshRefGenerator__success();
[L1626]              havoc newRef;
[L1627]              assume Alloc[newRef] == false;
[L1628]              Alloc[newRef] := true;
[L1629]              assume newRef != null;
[L3608]  RET         call this := FreshRefGenerator__success();
[L3609]              assume now >= 0;
[L3610]              assume DType[this] == StreamProtocol;
[L3611]              assume msgvalue_MSG == 0;
[L3612]              gas := gas - 53000;
[L3613]  CALL        call StreamProtocol_StreamProtocol(this, msgsender_MSG, msgvalue_MSG);
[L395]               havoc __exception;
[L396]               revert := false;
[L397]   COND FALSE  !(__exception)
[L420]   CALL        call StreamProtocol_StreamProtocol__success(this, msgsender_MSG, msgvalue_MSG);
[L1923]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1762]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1747]              assume msgsender_MSG != null;
[L1748]              Balance[this] := 0;
[L1762]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1763]  COND FALSE  !(revert)
[L1923]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1924]  COND FALSE  !(revert)
[L1927]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1830]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1813]              assume msgsender_MSG != null;
[L1814]              Balance[this] := 0;
[L1815]              owner_Owned[this] := null;
[L1817]              owner_Owned[this] := msgsender_MSG;
[L1830]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1831]  COND FALSE  !(revert)
[L1927]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1928]  COND FALSE  !(revert)
[L1931]  CALL        call StreamProtocol_StreamProtocol_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1879]              assume msgsender_MSG != null;
[L1880]              Balance[this] := 0;
[L1881]              symbol_StreamProtocol[this] := 1491346165;
[L1882]              name_StreamProtocol[this] := 1491346165;
[L1883]              decimals_StreamProtocol[this] := 0;
[L1884]              _totalSupply_StreamProtocol[this] := 0;
[L1885]              _stopTrade_StreamProtocol[this] := false;
[L1886]              balances_StreamProtocol[this] := zeroRefintArr();
[L1887]              sum_balances0[this] := 0;
[L1888]              allowed_StreamProtocol[this] := zeroRefRefintArr();
[L1889]              sum_allowed1[this] := 0;
[L1891]              symbol_StreamProtocol[this] := 1357906882;
[L1892]              name_StreamProtocol[this] := -1605590943;
[L1893]              decimals_StreamProtocol[this] := 18;
[L1894]              __var_1 := decimals_StreamProtocol[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1895]              _totalSupply_StreamProtocol[this] := 2000000000 * (nonlinearPow(10, decimals_StreamProtocol[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1896]              _stopTrade_StreamProtocol[this] := false;
[L1897]              sum_balances0[this] := sum_balances0[this] - balances_StreamProtocol[this][owner_Owned[this]];
[L1898]              balances_StreamProtocol[this][owner_Owned[this]] := _totalSupply_StreamProtocol[this];
[L1899]              sum_balances0[this] := sum_balances0[this] + balances_StreamProtocol[this][owner_Owned[this]];
[L1900]              assert { :EventEmitted "Transfer_StreamProtocol" } true;
[L1931]  RET         call StreamProtocol_StreamProtocol_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1932]  COND FALSE  !(revert)
[L420]   RET         call StreamProtocol_StreamProtocol__success(this, msgsender_MSG, msgvalue_MSG);
[L421]               assume !revert && gas >= 0;
[L3613]  RET         call StreamProtocol_StreamProtocol(this, msgsender_MSG, msgvalue_MSG);
[L3614]              assume !revert && gas >= 0;
[L3617]  CALL        call CorralChoice_StreamProtocol(this);
[L3459]              havoc msgsender_MSG;
[L3460]              havoc msgvalue_MSG;
[L3461]              havoc choice;
[L3462]              havoc __ret_0_totalSupply;
[L3463]              havoc tokenOwner_s328;
[L3464]              havoc balance_s328;
[L3465]              havoc tokenOwner_s532;
[L3466]              havoc spender_s532;
[L3467]              havoc remaining_s532;
[L3468]              havoc to_s385;
[L3469]              havoc tokens_s385;
[L3470]              havoc success_s385;
[L3471]              havoc spender_s419;
[L3472]              havoc tokens_s419;
[L3473]              havoc success_s419;
[L3474]              havoc from_s510;
[L3475]              havoc to_s510;
[L3476]              havoc tokens_s510;
[L3477]              havoc success_s510;
[L3478]              havoc __ret_0_owner;
[L3479]              havoc __ret_0_symbol;
[L3480]              havoc __ret_0_name;
[L3481]              havoc __ret_0_decimals;
[L3482]              havoc spender_s582;
[L3483]              havoc tokens_s582;
[L3484]              havoc data_s582;
[L3485]              havoc success_s582;
[L3486]              havoc tokenAddress_s609;
[L3487]              havoc tokens_s609;
[L3488]              havoc success_s609;
[L3489]              havoc _value_s658;
[L3490]              havoc tmpNow;
[L3491]              havoc gas;
[L3492]              assume gas > 4000000 && gas <= 8000000;
[L3493]              tmpNow := now;
[L3494]              havoc now;
[L3495]              assume now > tmpNow;
[L3496]              assume msgsender_MSG != null;
[L3497]              assume DType[msgsender_MSG] != SafeMath;
[L3498]              assume DType[msgsender_MSG] != ERC20Interface;
[L3499]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3500]              assume DType[msgsender_MSG] != Owned;
[L3501]              assume DType[msgsender_MSG] != StreamProtocol;
[L3502]              Alloc[msgsender_MSG] := true;
[L3503]  COND FALSE  !(choice == 15)
[L3509]  COND FALSE  !(choice == 14)
[L3515]  COND FALSE  !(choice == 13)
[L3521]  COND FALSE  !(choice == 12)
[L3528]  COND TRUE   choice == 11
[L3529]              gas := gas - 21000;
[L3530]  COND TRUE   gas >= 0
[L3531]              assume tokens_s419 >= 0 && tokens_s419 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3532]              assume msgvalue_MSG == 0;
[L3533]  CALL        call success_s419 := approve~address~uint256_StreamProtocol(this, msgsender_MSG, msgvalue_MSG, spender_s419, tokens_s419);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(p1 != msgsender_MSG || p2 != spender_s419);
[L3]                 revert := revert_hold;
[L725]               havoc __exception;
[L726]               revert := false;
[L727]   COND FALSE  !(__exception)
[L750]   CALL        call success_s419 := approve~address~uint256_StreamProtocol__success(this, msgsender_MSG, msgvalue_MSG, spender_s419, tokens_s419);
[L2107]  COND FALSE  !(!(_stopTrade_StreamProtocol[this] != true))
[L2111]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_StreamProtocol[this][msgsender_MSG][spender_s419];
[L2112]              allowed_StreamProtocol[this][msgsender_MSG][spender_s419] := tokens_s419;
[L2113]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_StreamProtocol[this][msgsender_MSG][spender_s419];
[L2114]              assert { :EventEmitted "Approval_StreamProtocol" } true;
[L2115]              success_s419 := true;
[L750]   RET         call success_s419 := approve~address~uint256_StreamProtocol__success(this, msgsender_MSG, msgvalue_MSG, spender_s419, tokens_s419);
[L751]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((success_s419 == true && allowed_StreamProtocol[this][msgsender_MSG][spender_s419] == tokens_s419) && _totalSupply_StreamProtocol[this] == old(_totalSupply_StreamProtocol[this])) && balances_StreamProtocol[this] == old(balances_StreamProtocol[this])) && allowed_StreamProtocol[this][p1][p2] == old(allowed_StreamProtocol[this][p1][p2])) && symbol_StreamProtocol[this] == old(symbol_StreamProtocol[this])) && name_StreamProtocol[this] == old(name_StreamProtocol[this])) && decimals_StreamProtocol[this] == old(decimals_StreamProtocol[this])) && _stopTrade_StreamProtocol[this] == old(_stopTrade_StreamProtocol[this])) && owner_Owned[this] == old(owner_Owned[this]));
[L3]                 revert := revert_hold;
[L3533]  RET         call success_s419 := approve~address~uint256_StreamProtocol(this, msgsender_MSG, msgvalue_MSG, spender_s419, tokens_s419);
[L3617]  RET         call CorralChoice_StreamProtocol(this);
[L3617]  CALL        call CorralChoice_StreamProtocol(this);
[L3459]              havoc msgsender_MSG;
[L3460]              havoc msgvalue_MSG;
[L3461]              havoc choice;
[L3462]              havoc __ret_0_totalSupply;
[L3463]              havoc tokenOwner_s328;
[L3464]              havoc balance_s328;
[L3465]              havoc tokenOwner_s532;
[L3466]              havoc spender_s532;
[L3467]              havoc remaining_s532;
[L3468]              havoc to_s385;
[L3469]              havoc tokens_s385;
[L3470]              havoc success_s385;
[L3471]              havoc spender_s419;
[L3472]              havoc tokens_s419;
[L3473]              havoc success_s419;
[L3474]              havoc from_s510;
[L3475]              havoc to_s510;
[L3476]              havoc tokens_s510;
[L3477]              havoc success_s510;
[L3478]              havoc __ret_0_owner;
[L3479]              havoc __ret_0_symbol;
[L3480]              havoc __ret_0_name;
[L3481]              havoc __ret_0_decimals;
[L3482]              havoc spender_s582;
[L3483]              havoc tokens_s582;
[L3484]              havoc data_s582;
[L3485]              havoc success_s582;
[L3486]              havoc tokenAddress_s609;
[L3487]              havoc tokens_s609;
[L3488]              havoc success_s609;
[L3489]              havoc _value_s658;
[L3490]              havoc tmpNow;
[L3491]              havoc gas;
[L3492]              assume gas > 4000000 && gas <= 8000000;
[L3493]              tmpNow := now;
[L3494]              havoc now;
[L3495]              assume now > tmpNow;
[L3496]              assume msgsender_MSG != null;
[L3497]              assume DType[msgsender_MSG] != SafeMath;
[L3498]              assume DType[msgsender_MSG] != ERC20Interface;
[L3499]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3500]              assume DType[msgsender_MSG] != Owned;
[L3501]              assume DType[msgsender_MSG] != StreamProtocol;
[L3502]              Alloc[msgsender_MSG] := true;
[L3503]  COND FALSE  !(choice == 15)
[L3509]  COND FALSE  !(choice == 14)
[L3515]  COND FALSE  !(choice == 13)
[L3521]  COND FALSE  !(choice == 12)
[L3528]  COND TRUE   choice == 11
[L3529]              gas := gas - 21000;
[L3530]  COND TRUE   gas >= 0
[L3531]              assume tokens_s419 >= 0 && tokens_s419 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3532]              assume msgvalue_MSG == 0;
[L3533]  CALL        call success_s419 := approve~address~uint256_StreamProtocol(this, msgsender_MSG, msgvalue_MSG, spender_s419, tokens_s419);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s419;
[L3]                 call_approve_StreamProtocol0 := true;
[L3]                 call_approve_StreamProtocol0 := false;
[L3]                 revert := revert_hold;
[L725]               havoc __exception;
[L726]               revert := false;
[L727]   COND FALSE  !(__exception)
[L750]   CALL        call success_s419 := approve~address~uint256_StreamProtocol__success(this, msgsender_MSG, msgvalue_MSG, spender_s419, tokens_s419);
[L2107]  COND FALSE  !(!(_stopTrade_StreamProtocol[this] != true))
[L2111]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_StreamProtocol[this][msgsender_MSG][spender_s419];
[L2112]              allowed_StreamProtocol[this][msgsender_MSG][spender_s419] := tokens_s419;
[L2113]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_StreamProtocol[this][msgsender_MSG][spender_s419];
[L2114]              assert { :EventEmitted "Approval_StreamProtocol" } true;
[L2115]              success_s419 := true;
[L750]   RET         call success_s419 := approve~address~uint256_StreamProtocol__success(this, msgsender_MSG, msgvalue_MSG, spender_s419, tokens_s419);
[L751]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((success_s419 == true && allowed_StreamProtocol[this][msgsender_MSG][spender_s419] == tokens_s419) && _totalSupply_StreamProtocol[this] == old(_totalSupply_StreamProtocol[this])) && balances_StreamProtocol[this] == old(balances_StreamProtocol[this])) && allowed_StreamProtocol[this][p1][p2] == old(allowed_StreamProtocol[this][p1][p2])) && symbol_StreamProtocol[this] == old(symbol_StreamProtocol[this])) && name_StreamProtocol[this] == old(name_StreamProtocol[this])) && decimals_StreamProtocol[this] == old(decimals_StreamProtocol[this])) && _stopTrade_StreamProtocol[this] == old(_stopTrade_StreamProtocol[this])) && owner_Owned[this] == old(owner_Owned[this]));
[L3]                 revert := revert_hold;
[L3533]  RET         call success_s419 := approve~address~uint256_StreamProtocol(this, msgsender_MSG, msgvalue_MSG, spender_s419, tokens_s419);
[L3617]  RET         call CorralChoice_StreamProtocol(this);

Loop:
[L3617]  CALL        call CorralChoice_StreamProtocol(this);
[L3459]              havoc msgsender_MSG;
[L3460]              havoc msgvalue_MSG;
[L3461]              havoc choice;
[L3462]              havoc __ret_0_totalSupply;
[L3463]              havoc tokenOwner_s328;
[L3464]              havoc balance_s328;
[L3465]              havoc tokenOwner_s532;
[L3466]              havoc spender_s532;
[L3467]              havoc remaining_s532;
[L3468]              havoc to_s385;
[L3469]              havoc tokens_s385;
[L3470]              havoc success_s385;
[L3471]              havoc spender_s419;
[L3472]              havoc tokens_s419;
[L3473]              havoc success_s419;
[L3474]              havoc from_s510;
[L3475]              havoc to_s510;
[L3476]              havoc tokens_s510;
[L3477]              havoc success_s510;
[L3478]              havoc __ret_0_owner;
[L3479]              havoc __ret_0_symbol;
[L3480]              havoc __ret_0_name;
[L3481]              havoc __ret_0_decimals;
[L3482]              havoc spender_s582;
[L3483]              havoc tokens_s582;
[L3484]              havoc data_s582;
[L3485]              havoc success_s582;
[L3486]              havoc tokenAddress_s609;
[L3487]              havoc tokens_s609;
[L3488]              havoc success_s609;
[L3489]              havoc _value_s658;
[L3490]              havoc tmpNow;
[L3491]              havoc gas;
[L3492]              assume gas > 4000000 && gas <= 8000000;
[L3493]              tmpNow := now;
[L3494]              havoc now;
[L3495]              assume now > tmpNow;
[L3496]              assume msgsender_MSG != null;
[L3497]              assume DType[msgsender_MSG] != SafeMath;
[L3498]              assume DType[msgsender_MSG] != ERC20Interface;
[L3499]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3500]              assume DType[msgsender_MSG] != Owned;
[L3501]              assume DType[msgsender_MSG] != StreamProtocol;
[L3502]              Alloc[msgsender_MSG] := true;
[L3503]  COND FALSE  !(choice == 15)
[L3509]  COND FALSE  !(choice == 14)
[L3515]  COND FALSE  !(choice == 13)
[L3521]  COND FALSE  !(choice == 12)
[L3528]  COND TRUE   choice == 11
[L3529]              gas := gas - 21000;
[L3530]  COND TRUE   gas >= 0
[L3531]              assume tokens_s419 >= 0 && tokens_s419 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3532]              assume msgvalue_MSG == 0;
[L3533]  CALL        call success_s419 := approve~address~uint256_StreamProtocol(this, msgsender_MSG, msgvalue_MSG, spender_s419, tokens_s419);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s419;
[L3]                 call_approve_StreamProtocol0 := true;
[L3]                 call_approve_StreamProtocol0 := false;
[L3]                 revert := revert_hold;
[L725]               havoc __exception;
[L726]               revert := false;
[L727]   COND FALSE  !(__exception)
[L750]   CALL        call success_s419 := approve~address~uint256_StreamProtocol__success(this, msgsender_MSG, msgvalue_MSG, spender_s419, tokens_s419);
[L2107]  COND FALSE  !(!(_stopTrade_StreamProtocol[this] != true))
[L2111]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_StreamProtocol[this][msgsender_MSG][spender_s419];
[L2112]              allowed_StreamProtocol[this][msgsender_MSG][spender_s419] := tokens_s419;
[L2113]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_StreamProtocol[this][msgsender_MSG][spender_s419];
[L2114]              assert { :EventEmitted "Approval_StreamProtocol" } true;
[L2115]              success_s419 := true;
[L750]   RET         call success_s419 := approve~address~uint256_StreamProtocol__success(this, msgsender_MSG, msgvalue_MSG, spender_s419, tokens_s419);
[L751]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((success_s419 == true && allowed_StreamProtocol[this][msgsender_MSG][spender_s419] == tokens_s419) && _totalSupply_StreamProtocol[this] == old(_totalSupply_StreamProtocol[this])) && balances_StreamProtocol[this] == old(balances_StreamProtocol[this])) && allowed_StreamProtocol[this][p1][p2] == old(allowed_StreamProtocol[this][p1][p2])) && symbol_StreamProtocol[this] == old(symbol_StreamProtocol[this])) && name_StreamProtocol[this] == old(name_StreamProtocol[this])) && decimals_StreamProtocol[this] == old(decimals_StreamProtocol[this])) && _stopTrade_StreamProtocol[this] == old(_stopTrade_StreamProtocol[this])) && owner_Owned[this] == old(owner_Owned[this]));
[L3]                 revert := revert_hold;
[L3533]  RET         call success_s419 := approve~address~uint256_StreamProtocol(this, msgsender_MSG, msgvalue_MSG, spender_s419, tokens_s419);
[L3617]  RET         call CorralChoice_StreamProtocol(this);

[2020-11-25 05:50:40,471 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 05:50:40,471 INFO  L82        PathProgramCache]: Analyzing trace with hash 1166954060, now seen corresponding path program 1 times
[2020-11-25 05:50:40,472 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 05:50:40,497 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 05:50:40,578 INFO  L134       CoverageAnalysis]: Checked inductivity of 60 backedges. 4 proven. 0 refuted. 0 times theorem prover too weak. 56 trivial. 0 not checked.
[2020-11-25 05:50:40,579 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 05:50:40,579 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 05:50:40,579 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 05:50:40,579 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 05:50:40,579 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=29, Unknown=0, NotChecked=0, Total=42
[2020-11-25 05:50:40,580 INFO  L87              Difference]: Start difference. First operand 3101 states and 3570 transitions. cyclomatic complexity: 479 Second operand 7 states.
[2020-11-25 05:50:41,045 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 05:50:41,045 INFO  L93              Difference]: Finished difference Result 3101 states and 3536 transitions.
[2020-11-25 05:50:41,045 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 05:50:41,045 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3101 states and 3536 transitions.
[2020-11-25 05:50:41,051 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 10
[2020-11-25 05:50:41,058 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3101 states to 3089 states and 3522 transitions.
[2020-11-25 05:50:41,058 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 832
[2020-11-25 05:50:41,059 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 832
[2020-11-25 05:50:41,059 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3089 states and 3522 transitions.
[2020-11-25 05:50:41,062 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 05:50:41,062 INFO  L728         BuchiCegarLoop]: Abstraction has 3089 states and 3522 transitions.
[2020-11-25 05:50:41,064 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3089 states and 3522 transitions.
[2020-11-25 05:50:41,075 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3089 to 1825.
[2020-11-25 05:50:41,075 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1825 states.
[2020-11-25 05:50:41,076 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1825 states to 1825 states and 1984 transitions.
[2020-11-25 05:50:41,076 INFO  L751         BuchiCegarLoop]: Abstraction has 1825 states and 1984 transitions.
[2020-11-25 05:50:41,076 INFO  L631         BuchiCegarLoop]: Abstraction has 1825 states and 1984 transitions.
[2020-11-25 05:50:41,076 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 05:50:41,077 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1825 states and 1984 transitions.
[2020-11-25 05:50:41,078 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 05:50:41,079 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 05:50:41,079 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 05:50:41,079 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 05:50:41,079 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_StreamProtocol0 := false;
[L3]                 call_approve_StreamProtocol0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L3607]              assume null == 0;
[L3608]  CALL        call this := FreshRefGenerator__success();
[L1626]              havoc newRef;
[L1627]              assume Alloc[newRef] == false;
[L1628]              Alloc[newRef] := true;
[L1629]              assume newRef != null;
[L3608]  RET         call this := FreshRefGenerator__success();
[L3609]              assume now >= 0;
[L3610]              assume DType[this] == StreamProtocol;
[L3611]              assume msgvalue_MSG == 0;
[L3612]              gas := gas - 53000;
[L3613]  CALL        call StreamProtocol_StreamProtocol(this, msgsender_MSG, msgvalue_MSG);
[L395]               havoc __exception;
[L396]               revert := false;
[L397]   COND FALSE  !(__exception)
[L420]   CALL        call StreamProtocol_StreamProtocol__success(this, msgsender_MSG, msgvalue_MSG);
[L1923]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1762]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1747]              assume msgsender_MSG != null;
[L1748]              Balance[this] := 0;
[L1762]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1763]  COND FALSE  !(revert)
[L1923]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1924]  COND FALSE  !(revert)
[L1927]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1830]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1813]              assume msgsender_MSG != null;
[L1814]              Balance[this] := 0;
[L1815]              owner_Owned[this] := null;
[L1817]              owner_Owned[this] := msgsender_MSG;
[L1830]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1831]  COND FALSE  !(revert)
[L1927]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1928]  COND FALSE  !(revert)
[L1931]  CALL        call StreamProtocol_StreamProtocol_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1879]              assume msgsender_MSG != null;
[L1880]              Balance[this] := 0;
[L1881]              symbol_StreamProtocol[this] := 1491346165;
[L1882]              name_StreamProtocol[this] := 1491346165;
[L1883]              decimals_StreamProtocol[this] := 0;
[L1884]              _totalSupply_StreamProtocol[this] := 0;
[L1885]              _stopTrade_StreamProtocol[this] := false;
[L1886]              balances_StreamProtocol[this] := zeroRefintArr();
[L1887]              sum_balances0[this] := 0;
[L1888]              allowed_StreamProtocol[this] := zeroRefRefintArr();
[L1889]              sum_allowed1[this] := 0;
[L1891]              symbol_StreamProtocol[this] := 1357906882;
[L1892]              name_StreamProtocol[this] := -1605590943;
[L1893]              decimals_StreamProtocol[this] := 18;
[L1894]              __var_1 := decimals_StreamProtocol[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1895]              _totalSupply_StreamProtocol[this] := 2000000000 * (nonlinearPow(10, decimals_StreamProtocol[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1896]              _stopTrade_StreamProtocol[this] := false;
[L1897]              sum_balances0[this] := sum_balances0[this] - balances_StreamProtocol[this][owner_Owned[this]];
[L1898]              balances_StreamProtocol[this][owner_Owned[this]] := _totalSupply_StreamProtocol[this];
[L1899]              sum_balances0[this] := sum_balances0[this] + balances_StreamProtocol[this][owner_Owned[this]];
[L1900]              assert { :EventEmitted "Transfer_StreamProtocol" } true;
[L1931]  RET         call StreamProtocol_StreamProtocol_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1932]  COND FALSE  !(revert)
[L420]   RET         call StreamProtocol_StreamProtocol__success(this, msgsender_MSG, msgvalue_MSG);
[L421]               assume !revert && gas >= 0;
[L3613]  RET         call StreamProtocol_StreamProtocol(this, msgsender_MSG, msgvalue_MSG);
[L3614]              assume !revert && gas >= 0;
[L3617]  CALL        call CorralChoice_StreamProtocol(this);
[L3459]              havoc msgsender_MSG;
[L3460]              havoc msgvalue_MSG;
[L3461]              havoc choice;
[L3462]              havoc __ret_0_totalSupply;
[L3463]              havoc tokenOwner_s328;
[L3464]              havoc balance_s328;
[L3465]              havoc tokenOwner_s532;
[L3466]              havoc spender_s532;
[L3467]              havoc remaining_s532;
[L3468]              havoc to_s385;
[L3469]              havoc tokens_s385;
[L3470]              havoc success_s385;
[L3471]              havoc spender_s419;
[L3472]              havoc tokens_s419;
[L3473]              havoc success_s419;
[L3474]              havoc from_s510;
[L3475]              havoc to_s510;
[L3476]              havoc tokens_s510;
[L3477]              havoc success_s510;
[L3478]              havoc __ret_0_owner;
[L3479]              havoc __ret_0_symbol;
[L3480]              havoc __ret_0_name;
[L3481]              havoc __ret_0_decimals;
[L3482]              havoc spender_s582;
[L3483]              havoc tokens_s582;
[L3484]              havoc data_s582;
[L3485]              havoc success_s582;
[L3486]              havoc tokenAddress_s609;
[L3487]              havoc tokens_s609;
[L3488]              havoc success_s609;
[L3489]              havoc _value_s658;
[L3490]              havoc tmpNow;
[L3491]              havoc gas;
[L3492]              assume gas > 4000000 && gas <= 8000000;
[L3493]              tmpNow := now;
[L3494]              havoc now;
[L3495]              assume now > tmpNow;
[L3496]              assume msgsender_MSG != null;
[L3497]              assume DType[msgsender_MSG] != SafeMath;
[L3498]              assume DType[msgsender_MSG] != ERC20Interface;
[L3499]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3500]              assume DType[msgsender_MSG] != Owned;
[L3501]              assume DType[msgsender_MSG] != StreamProtocol;
[L3502]              Alloc[msgsender_MSG] := true;
[L3503]  COND FALSE  !(choice == 15)
[L3509]  COND FALSE  !(choice == 14)
[L3515]  COND FALSE  !(choice == 13)
[L3521]  COND FALSE  !(choice == 12)
[L3528]  COND FALSE  !(choice == 11)
[L3535]  COND FALSE  !(choice == 10)
[L3542]  COND FALSE  !(choice == 9)
[L3548]  COND FALSE  !(choice == 8)
[L3554]  COND FALSE  !(choice == 7)
[L3560]  COND FALSE  !(choice == 6)
[L3566]  COND TRUE   choice == 5
[L3567]              gas := gas - 21000;
[L3568]  COND TRUE   gas >= 0
[L3569]              assume msgvalue_MSG == 0;
[L3570]  CALL        call stopTrade_StreamProtocol(this, msgsender_MSG, msgvalue_MSG);
[L504]               havoc __exception;
[L505]               revert := false;
[L506]   COND FALSE  !(__exception)
[L529]   CALL        call stopTrade_StreamProtocol__success(this, msgsender_MSG, msgvalue_MSG);
[L1978]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3150]  COND FALSE  !(!(msgsender_MSG == owner_Owned[this]))
[L1978]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1979]  COND FALSE  !(revert)
[L1982]  COND FALSE  !(!(_stopTrade_StreamProtocol[this] != true))
[L1986]              _stopTrade_StreamProtocol[this] := true;
[L529]   RET         call stopTrade_StreamProtocol__success(this, msgsender_MSG, msgvalue_MSG);
[L530]               assume !revert && gas >= 0;
[L3570]  RET         call stopTrade_StreamProtocol(this, msgsender_MSG, msgvalue_MSG);
[L3617]  RET         call CorralChoice_StreamProtocol(this);
[L3617]  CALL        call CorralChoice_StreamProtocol(this);
[L3459]              havoc msgsender_MSG;
[L3460]              havoc msgvalue_MSG;
[L3461]              havoc choice;
[L3462]              havoc __ret_0_totalSupply;
[L3463]              havoc tokenOwner_s328;
[L3464]              havoc balance_s328;
[L3465]              havoc tokenOwner_s532;
[L3466]              havoc spender_s532;
[L3467]              havoc remaining_s532;
[L3468]              havoc to_s385;
[L3469]              havoc tokens_s385;
[L3470]              havoc success_s385;
[L3471]              havoc spender_s419;
[L3472]              havoc tokens_s419;
[L3473]              havoc success_s419;
[L3474]              havoc from_s510;
[L3475]              havoc to_s510;
[L3476]              havoc tokens_s510;
[L3477]              havoc success_s510;
[L3478]              havoc __ret_0_owner;
[L3479]              havoc __ret_0_symbol;
[L3480]              havoc __ret_0_name;
[L3481]              havoc __ret_0_decimals;
[L3482]              havoc spender_s582;
[L3483]              havoc tokens_s582;
[L3484]              havoc data_s582;
[L3485]              havoc success_s582;
[L3486]              havoc tokenAddress_s609;
[L3487]              havoc tokens_s609;
[L3488]              havoc success_s609;
[L3489]              havoc _value_s658;
[L3490]              havoc tmpNow;
[L3491]              havoc gas;
[L3492]              assume gas > 4000000 && gas <= 8000000;
[L3493]              tmpNow := now;
[L3494]              havoc now;
[L3495]              assume now > tmpNow;
[L3496]              assume msgsender_MSG != null;
[L3497]              assume DType[msgsender_MSG] != SafeMath;
[L3498]              assume DType[msgsender_MSG] != ERC20Interface;
[L3499]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3500]              assume DType[msgsender_MSG] != Owned;
[L3501]              assume DType[msgsender_MSG] != StreamProtocol;
[L3502]              Alloc[msgsender_MSG] := true;
[L3503]  COND FALSE  !(choice == 15)
[L3509]  COND FALSE  !(choice == 14)
[L3515]  COND FALSE  !(choice == 13)
[L3521]  COND FALSE  !(choice == 12)
[L3528]  COND TRUE   choice == 11
[L3529]              gas := gas - 21000;
[L3530]  COND TRUE   gas >= 0
[L3531]              assume tokens_s419 >= 0 && tokens_s419 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3532]              assume msgvalue_MSG == 0;
[L3533]  CALL        call success_s419 := approve~address~uint256_StreamProtocol(this, msgsender_MSG, msgvalue_MSG, spender_s419, tokens_s419);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s419;
[L3]                 call_approve_StreamProtocol0 := true;
[L3]                 call_approve_StreamProtocol0 := false;
[L3]                 revert := revert_hold;
[L725]               havoc __exception;
[L726]               revert := false;
[L727]   COND TRUE   __exception
[L728]               __tmp__Balance := Balance;
[L729]               __tmp__DType := DType;
[L730]               __tmp__Alloc := Alloc;
[L731]               __tmp__balance_ADDR := balance_ADDR;
[L732]               __tmp__M_Ref_int := M_Ref_int;
[L733]               __tmp__sum_balances0 := sum_balances0;
[L734]               __tmp__alloc_allowed_StreamProtocol_lvl0 := alloc_allowed_StreamProtocol_lvl0;
[L735]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L736]               __tmp__sum_allowed1 := sum_allowed1;
[L737]               __tmp__Length := Length;
[L738]               __tmp__now := now;
[L739]               __tmp__owner_Owned := owner_Owned;
[L740]               __tmp__symbol_StreamProtocol := symbol_StreamProtocol;
[L741]               __tmp__name_StreamProtocol := name_StreamProtocol;
[L742]               __tmp__decimals_StreamProtocol := decimals_StreamProtocol;
[L743]               __tmp___totalSupply_StreamProtocol := _totalSupply_StreamProtocol;
[L744]               __tmp___stopTrade_StreamProtocol := _stopTrade_StreamProtocol;
[L745]               __tmp__balances_StreamProtocol := balances_StreamProtocol;
[L746]               __tmp__allowed_StreamProtocol := allowed_StreamProtocol;
[L747]   CALL        call success_s419 := approve~address~uint256_StreamProtocol__fail(this, msgsender_MSG, msgvalue_MSG, spender_s419, tokens_s419);
[L2094]  COND TRUE   !(__tmp___stopTrade_StreamProtocol[this] != true)
[L2095]              revert := true;
[L747]   RET         call success_s419 := approve~address~uint256_StreamProtocol__fail(this, msgsender_MSG, msgvalue_MSG, spender_s419, tokens_s419);
[L748]               assume revert || gas < 0;
[L3533]  RET         call success_s419 := approve~address~uint256_StreamProtocol(this, msgsender_MSG, msgvalue_MSG, spender_s419, tokens_s419);
[L3617]  RET         call CorralChoice_StreamProtocol(this);

Loop:
[L3617]  CALL        call CorralChoice_StreamProtocol(this);
[L3459]              havoc msgsender_MSG;
[L3460]              havoc msgvalue_MSG;
[L3461]              havoc choice;
[L3462]              havoc __ret_0_totalSupply;
[L3463]              havoc tokenOwner_s328;
[L3464]              havoc balance_s328;
[L3465]              havoc tokenOwner_s532;
[L3466]              havoc spender_s532;
[L3467]              havoc remaining_s532;
[L3468]              havoc to_s385;
[L3469]              havoc tokens_s385;
[L3470]              havoc success_s385;
[L3471]              havoc spender_s419;
[L3472]              havoc tokens_s419;
[L3473]              havoc success_s419;
[L3474]              havoc from_s510;
[L3475]              havoc to_s510;
[L3476]              havoc tokens_s510;
[L3477]              havoc success_s510;
[L3478]              havoc __ret_0_owner;
[L3479]              havoc __ret_0_symbol;
[L3480]              havoc __ret_0_name;
[L3481]              havoc __ret_0_decimals;
[L3482]              havoc spender_s582;
[L3483]              havoc tokens_s582;
[L3484]              havoc data_s582;
[L3485]              havoc success_s582;
[L3486]              havoc tokenAddress_s609;
[L3487]              havoc tokens_s609;
[L3488]              havoc success_s609;
[L3489]              havoc _value_s658;
[L3490]              havoc tmpNow;
[L3491]              havoc gas;
[L3492]              assume gas > 4000000 && gas <= 8000000;
[L3493]              tmpNow := now;
[L3494]              havoc now;
[L3495]              assume now > tmpNow;
[L3496]              assume msgsender_MSG != null;
[L3497]              assume DType[msgsender_MSG] != SafeMath;
[L3498]              assume DType[msgsender_MSG] != ERC20Interface;
[L3499]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3500]              assume DType[msgsender_MSG] != Owned;
[L3501]              assume DType[msgsender_MSG] != StreamProtocol;
[L3502]              Alloc[msgsender_MSG] := true;
[L3503]  COND TRUE   choice == 15
[L3504]              gas := gas - 21000;
[L3505]  COND FALSE  !(gas >= 0)
[L3617]  RET         call CorralChoice_StreamProtocol(this);

[2020-11-25 05:50:41,082 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 05:50:41,082 INFO  L82        PathProgramCache]: Analyzing trace with hash -111760747, now seen corresponding path program 1 times
[2020-11-25 05:50:41,083 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 05:50:41,093 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 05:50:41,104 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 05:50:41,150 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 05:50:41,150 INFO  L82        PathProgramCache]: Analyzing trace with hash 1315182527, now seen corresponding path program 1 times
[2020-11-25 05:50:41,151 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 05:50:41,153 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 05:50:41,158 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 05:50:41,158 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 05:50:41,158 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 05:50:41,158 INFO  L1008  eck$LassoCheckResult]: loop already infeasible
[2020-11-25 05:50:41,158 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 05:50:41,158 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-11-25 05:50:41,158 INFO  L87              Difference]: Start difference. First operand 1825 states and 1984 transitions. cyclomatic complexity: 162 Second operand 4 states.
[2020-11-25 05:50:41,269 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 05:50:41,269 INFO  L93              Difference]: Finished difference Result 1938 states and 2082 transitions.
[2020-11-25 05:50:41,269 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 05:50:41,269 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1938 states and 2082 transitions.
[2020-11-25 05:50:41,275 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 05:50:41,279 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1938 states to 1938 states and 2082 transitions.
[2020-11-25 05:50:41,279 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 485
[2020-11-25 05:50:41,280 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 485
[2020-11-25 05:50:41,280 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1938 states and 2082 transitions.
[2020-11-25 05:50:41,281 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 05:50:41,281 INFO  L728         BuchiCegarLoop]: Abstraction has 1938 states and 2082 transitions.
[2020-11-25 05:50:41,283 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1938 states and 2082 transitions.
[2020-11-25 05:50:41,291 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1938 to 1825.
[2020-11-25 05:50:41,291 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1825 states.
[2020-11-25 05:50:41,293 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1825 states to 1825 states and 1954 transitions.
[2020-11-25 05:50:41,293 INFO  L751         BuchiCegarLoop]: Abstraction has 1825 states and 1954 transitions.
[2020-11-25 05:50:41,293 INFO  L631         BuchiCegarLoop]: Abstraction has 1825 states and 1954 transitions.
[2020-11-25 05:50:41,293 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 05:50:41,293 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1825 states and 1954 transitions.
[2020-11-25 05:50:41,297 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 05:50:41,297 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 05:50:41,297 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 05:50:41,298 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 05:50:41,298 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_StreamProtocol0 := false;
[L3]                 call_approve_StreamProtocol0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L3607]              assume null == 0;
[L3608]  CALL        call this := FreshRefGenerator__success();
[L1626]              havoc newRef;
[L1627]              assume Alloc[newRef] == false;
[L1628]              Alloc[newRef] := true;
[L1629]              assume newRef != null;
[L3608]  RET         call this := FreshRefGenerator__success();
[L3609]              assume now >= 0;
[L3610]              assume DType[this] == StreamProtocol;
[L3611]              assume msgvalue_MSG == 0;
[L3612]              gas := gas - 53000;
[L3613]  CALL        call StreamProtocol_StreamProtocol(this, msgsender_MSG, msgvalue_MSG);
[L395]               havoc __exception;
[L396]               revert := false;
[L397]   COND FALSE  !(__exception)
[L420]   CALL        call StreamProtocol_StreamProtocol__success(this, msgsender_MSG, msgvalue_MSG);
[L1923]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1762]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1747]              assume msgsender_MSG != null;
[L1748]              Balance[this] := 0;
[L1762]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1763]  COND FALSE  !(revert)
[L1923]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1924]  COND FALSE  !(revert)
[L1927]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1830]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1813]              assume msgsender_MSG != null;
[L1814]              Balance[this] := 0;
[L1815]              owner_Owned[this] := null;
[L1817]              owner_Owned[this] := msgsender_MSG;
[L1830]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1831]  COND FALSE  !(revert)
[L1927]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1928]  COND FALSE  !(revert)
[L1931]  CALL        call StreamProtocol_StreamProtocol_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1879]              assume msgsender_MSG != null;
[L1880]              Balance[this] := 0;
[L1881]              symbol_StreamProtocol[this] := 1491346165;
[L1882]              name_StreamProtocol[this] := 1491346165;
[L1883]              decimals_StreamProtocol[this] := 0;
[L1884]              _totalSupply_StreamProtocol[this] := 0;
[L1885]              _stopTrade_StreamProtocol[this] := false;
[L1886]              balances_StreamProtocol[this] := zeroRefintArr();
[L1887]              sum_balances0[this] := 0;
[L1888]              allowed_StreamProtocol[this] := zeroRefRefintArr();
[L1889]              sum_allowed1[this] := 0;
[L1891]              symbol_StreamProtocol[this] := 1357906882;
[L1892]              name_StreamProtocol[this] := -1605590943;
[L1893]              decimals_StreamProtocol[this] := 18;
[L1894]              __var_1 := decimals_StreamProtocol[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1895]              _totalSupply_StreamProtocol[this] := 2000000000 * (nonlinearPow(10, decimals_StreamProtocol[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1896]              _stopTrade_StreamProtocol[this] := false;
[L1897]              sum_balances0[this] := sum_balances0[this] - balances_StreamProtocol[this][owner_Owned[this]];
[L1898]              balances_StreamProtocol[this][owner_Owned[this]] := _totalSupply_StreamProtocol[this];
[L1899]              sum_balances0[this] := sum_balances0[this] + balances_StreamProtocol[this][owner_Owned[this]];
[L1900]              assert { :EventEmitted "Transfer_StreamProtocol" } true;
[L1931]  RET         call StreamProtocol_StreamProtocol_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1932]  COND FALSE  !(revert)
[L420]   RET         call StreamProtocol_StreamProtocol__success(this, msgsender_MSG, msgvalue_MSG);
[L421]               assume !revert && gas >= 0;
[L3613]  RET         call StreamProtocol_StreamProtocol(this, msgsender_MSG, msgvalue_MSG);
[L3614]              assume !revert && gas >= 0;
[L3617]  CALL        call CorralChoice_StreamProtocol(this);
[L3459]              havoc msgsender_MSG;
[L3460]              havoc msgvalue_MSG;
[L3461]              havoc choice;
[L3462]              havoc __ret_0_totalSupply;
[L3463]              havoc tokenOwner_s328;
[L3464]              havoc balance_s328;
[L3465]              havoc tokenOwner_s532;
[L3466]              havoc spender_s532;
[L3467]              havoc remaining_s532;
[L3468]              havoc to_s385;
[L3469]              havoc tokens_s385;
[L3470]              havoc success_s385;
[L3471]              havoc spender_s419;
[L3472]              havoc tokens_s419;
[L3473]              havoc success_s419;
[L3474]              havoc from_s510;
[L3475]              havoc to_s510;
[L3476]              havoc tokens_s510;
[L3477]              havoc success_s510;
[L3478]              havoc __ret_0_owner;
[L3479]              havoc __ret_0_symbol;
[L3480]              havoc __ret_0_name;
[L3481]              havoc __ret_0_decimals;
[L3482]              havoc spender_s582;
[L3483]              havoc tokens_s582;
[L3484]              havoc data_s582;
[L3485]              havoc success_s582;
[L3486]              havoc tokenAddress_s609;
[L3487]              havoc tokens_s609;
[L3488]              havoc success_s609;
[L3489]              havoc _value_s658;
[L3490]              havoc tmpNow;
[L3491]              havoc gas;
[L3492]              assume gas > 4000000 && gas <= 8000000;
[L3493]              tmpNow := now;
[L3494]              havoc now;
[L3495]              assume now > tmpNow;
[L3496]              assume msgsender_MSG != null;
[L3497]              assume DType[msgsender_MSG] != SafeMath;
[L3498]              assume DType[msgsender_MSG] != ERC20Interface;
[L3499]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3500]              assume DType[msgsender_MSG] != Owned;
[L3501]              assume DType[msgsender_MSG] != StreamProtocol;
[L3502]              Alloc[msgsender_MSG] := true;
[L3503]  COND FALSE  !(choice == 15)
[L3509]  COND FALSE  !(choice == 14)
[L3515]  COND FALSE  !(choice == 13)
[L3521]  COND FALSE  !(choice == 12)
[L3528]  COND FALSE  !(choice == 11)
[L3535]  COND FALSE  !(choice == 10)
[L3542]  COND FALSE  !(choice == 9)
[L3548]  COND FALSE  !(choice == 8)
[L3554]  COND FALSE  !(choice == 7)
[L3560]  COND FALSE  !(choice == 6)
[L3566]  COND TRUE   choice == 5
[L3567]              gas := gas - 21000;
[L3568]  COND TRUE   gas >= 0
[L3569]              assume msgvalue_MSG == 0;
[L3570]  CALL        call stopTrade_StreamProtocol(this, msgsender_MSG, msgvalue_MSG);
[L504]               havoc __exception;
[L505]               revert := false;
[L506]   COND FALSE  !(__exception)
[L529]   CALL        call stopTrade_StreamProtocol__success(this, msgsender_MSG, msgvalue_MSG);
[L1978]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3150]  COND FALSE  !(!(msgsender_MSG == owner_Owned[this]))
[L1978]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1979]  COND FALSE  !(revert)
[L1982]  COND FALSE  !(!(_stopTrade_StreamProtocol[this] != true))
[L1986]              _stopTrade_StreamProtocol[this] := true;
[L529]   RET         call stopTrade_StreamProtocol__success(this, msgsender_MSG, msgvalue_MSG);
[L530]               assume !revert && gas >= 0;
[L3570]  RET         call stopTrade_StreamProtocol(this, msgsender_MSG, msgvalue_MSG);
[L3617]  RET         call CorralChoice_StreamProtocol(this);
[L3617]  CALL        call CorralChoice_StreamProtocol(this);
[L3459]              havoc msgsender_MSG;
[L3460]              havoc msgvalue_MSG;
[L3461]              havoc choice;
[L3462]              havoc __ret_0_totalSupply;
[L3463]              havoc tokenOwner_s328;
[L3464]              havoc balance_s328;
[L3465]              havoc tokenOwner_s532;
[L3466]              havoc spender_s532;
[L3467]              havoc remaining_s532;
[L3468]              havoc to_s385;
[L3469]              havoc tokens_s385;
[L3470]              havoc success_s385;
[L3471]              havoc spender_s419;
[L3472]              havoc tokens_s419;
[L3473]              havoc success_s419;
[L3474]              havoc from_s510;
[L3475]              havoc to_s510;
[L3476]              havoc tokens_s510;
[L3477]              havoc success_s510;
[L3478]              havoc __ret_0_owner;
[L3479]              havoc __ret_0_symbol;
[L3480]              havoc __ret_0_name;
[L3481]              havoc __ret_0_decimals;
[L3482]              havoc spender_s582;
[L3483]              havoc tokens_s582;
[L3484]              havoc data_s582;
[L3485]              havoc success_s582;
[L3486]              havoc tokenAddress_s609;
[L3487]              havoc tokens_s609;
[L3488]              havoc success_s609;
[L3489]              havoc _value_s658;
[L3490]              havoc tmpNow;
[L3491]              havoc gas;
[L3492]              assume gas > 4000000 && gas <= 8000000;
[L3493]              tmpNow := now;
[L3494]              havoc now;
[L3495]              assume now > tmpNow;
[L3496]              assume msgsender_MSG != null;
[L3497]              assume DType[msgsender_MSG] != SafeMath;
[L3498]              assume DType[msgsender_MSG] != ERC20Interface;
[L3499]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3500]              assume DType[msgsender_MSG] != Owned;
[L3501]              assume DType[msgsender_MSG] != StreamProtocol;
[L3502]              Alloc[msgsender_MSG] := true;
[L3503]  COND FALSE  !(choice == 15)
[L3509]  COND FALSE  !(choice == 14)
[L3515]  COND FALSE  !(choice == 13)
[L3521]  COND FALSE  !(choice == 12)
[L3528]  COND TRUE   choice == 11
[L3529]              gas := gas - 21000;
[L3530]  COND TRUE   gas >= 0
[L3531]              assume tokens_s419 >= 0 && tokens_s419 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3532]              assume msgvalue_MSG == 0;
[L3533]  CALL        call success_s419 := approve~address~uint256_StreamProtocol(this, msgsender_MSG, msgvalue_MSG, spender_s419, tokens_s419);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s419;
[L3]                 call_approve_StreamProtocol0 := true;
[L3]                 call_approve_StreamProtocol0 := false;
[L3]                 revert := revert_hold;
[L725]               havoc __exception;
[L726]               revert := false;
[L727]   COND TRUE   __exception
[L728]               __tmp__Balance := Balance;
[L729]               __tmp__DType := DType;
[L730]               __tmp__Alloc := Alloc;
[L731]               __tmp__balance_ADDR := balance_ADDR;
[L732]               __tmp__M_Ref_int := M_Ref_int;
[L733]               __tmp__sum_balances0 := sum_balances0;
[L734]               __tmp__alloc_allowed_StreamProtocol_lvl0 := alloc_allowed_StreamProtocol_lvl0;
[L735]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L736]               __tmp__sum_allowed1 := sum_allowed1;
[L737]               __tmp__Length := Length;
[L738]               __tmp__now := now;
[L739]               __tmp__owner_Owned := owner_Owned;
[L740]               __tmp__symbol_StreamProtocol := symbol_StreamProtocol;
[L741]               __tmp__name_StreamProtocol := name_StreamProtocol;
[L742]               __tmp__decimals_StreamProtocol := decimals_StreamProtocol;
[L743]               __tmp___totalSupply_StreamProtocol := _totalSupply_StreamProtocol;
[L744]               __tmp___stopTrade_StreamProtocol := _stopTrade_StreamProtocol;
[L745]               __tmp__balances_StreamProtocol := balances_StreamProtocol;
[L746]               __tmp__allowed_StreamProtocol := allowed_StreamProtocol;
[L747]   CALL        call success_s419 := approve~address~uint256_StreamProtocol__fail(this, msgsender_MSG, msgvalue_MSG, spender_s419, tokens_s419);
[L2094]  COND TRUE   !(__tmp___stopTrade_StreamProtocol[this] != true)
[L2095]              revert := true;
[L747]   RET         call success_s419 := approve~address~uint256_StreamProtocol__fail(this, msgsender_MSG, msgvalue_MSG, spender_s419, tokens_s419);
[L748]               assume revert || gas < 0;
[L3533]  RET         call success_s419 := approve~address~uint256_StreamProtocol(this, msgsender_MSG, msgvalue_MSG, spender_s419, tokens_s419);
[L3617]  RET         call CorralChoice_StreamProtocol(this);

Loop:
[L3617]  CALL        call CorralChoice_StreamProtocol(this);
[L3459]              havoc msgsender_MSG;
[L3460]              havoc msgvalue_MSG;
[L3461]              havoc choice;
[L3462]              havoc __ret_0_totalSupply;
[L3463]              havoc tokenOwner_s328;
[L3464]              havoc balance_s328;
[L3465]              havoc tokenOwner_s532;
[L3466]              havoc spender_s532;
[L3467]              havoc remaining_s532;
[L3468]              havoc to_s385;
[L3469]              havoc tokens_s385;
[L3470]              havoc success_s385;
[L3471]              havoc spender_s419;
[L3472]              havoc tokens_s419;
[L3473]              havoc success_s419;
[L3474]              havoc from_s510;
[L3475]              havoc to_s510;
[L3476]              havoc tokens_s510;
[L3477]              havoc success_s510;
[L3478]              havoc __ret_0_owner;
[L3479]              havoc __ret_0_symbol;
[L3480]              havoc __ret_0_name;
[L3481]              havoc __ret_0_decimals;
[L3482]              havoc spender_s582;
[L3483]              havoc tokens_s582;
[L3484]              havoc data_s582;
[L3485]              havoc success_s582;
[L3486]              havoc tokenAddress_s609;
[L3487]              havoc tokens_s609;
[L3488]              havoc success_s609;
[L3489]              havoc _value_s658;
[L3490]              havoc tmpNow;
[L3491]              havoc gas;
[L3492]              assume gas > 4000000 && gas <= 8000000;
[L3493]              tmpNow := now;
[L3494]              havoc now;
[L3495]              assume now > tmpNow;
[L3496]              assume msgsender_MSG != null;
[L3497]              assume DType[msgsender_MSG] != SafeMath;
[L3498]              assume DType[msgsender_MSG] != ERC20Interface;
[L3499]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3500]              assume DType[msgsender_MSG] != Owned;
[L3501]              assume DType[msgsender_MSG] != StreamProtocol;
[L3502]              Alloc[msgsender_MSG] := true;
[L3503]  COND FALSE  !(choice == 15)
[L3509]  COND FALSE  !(choice == 14)
[L3515]  COND FALSE  !(choice == 13)
[L3521]  COND FALSE  !(choice == 12)
[L3528]  COND TRUE   choice == 11
[L3529]              gas := gas - 21000;
[L3530]  COND TRUE   gas >= 0
[L3531]              assume tokens_s419 >= 0 && tokens_s419 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3532]              assume msgvalue_MSG == 0;
[L3533]  CALL        call success_s419 := approve~address~uint256_StreamProtocol(this, msgsender_MSG, msgvalue_MSG, spender_s419, tokens_s419);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s419;
[L3]                 call_approve_StreamProtocol0 := true;
[L3]                 call_approve_StreamProtocol0 := false;
[L3]                 revert := revert_hold;
[L725]               havoc __exception;
[L726]               revert := false;
[L727]   COND TRUE   __exception
[L728]               __tmp__Balance := Balance;
[L729]               __tmp__DType := DType;
[L730]               __tmp__Alloc := Alloc;
[L731]               __tmp__balance_ADDR := balance_ADDR;
[L732]               __tmp__M_Ref_int := M_Ref_int;
[L733]               __tmp__sum_balances0 := sum_balances0;
[L734]               __tmp__alloc_allowed_StreamProtocol_lvl0 := alloc_allowed_StreamProtocol_lvl0;
[L735]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L736]               __tmp__sum_allowed1 := sum_allowed1;
[L737]               __tmp__Length := Length;
[L738]               __tmp__now := now;
[L739]               __tmp__owner_Owned := owner_Owned;
[L740]               __tmp__symbol_StreamProtocol := symbol_StreamProtocol;
[L741]               __tmp__name_StreamProtocol := name_StreamProtocol;
[L742]               __tmp__decimals_StreamProtocol := decimals_StreamProtocol;
[L743]               __tmp___totalSupply_StreamProtocol := _totalSupply_StreamProtocol;
[L744]               __tmp___stopTrade_StreamProtocol := _stopTrade_StreamProtocol;
[L745]               __tmp__balances_StreamProtocol := balances_StreamProtocol;
[L746]               __tmp__allowed_StreamProtocol := allowed_StreamProtocol;
[L747]   CALL        call success_s419 := approve~address~uint256_StreamProtocol__fail(this, msgsender_MSG, msgvalue_MSG, spender_s419, tokens_s419);
[L2094]  COND TRUE   !(__tmp___stopTrade_StreamProtocol[this] != true)
[L2095]              revert := true;
[L747]   RET         call success_s419 := approve~address~uint256_StreamProtocol__fail(this, msgsender_MSG, msgvalue_MSG, spender_s419, tokens_s419);
[L748]               assume revert || gas < 0;
[L3533]  RET         call success_s419 := approve~address~uint256_StreamProtocol(this, msgsender_MSG, msgvalue_MSG, spender_s419, tokens_s419);
[L3617]  RET         call CorralChoice_StreamProtocol(this);

[2020-11-25 05:50:41,301 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 05:50:41,301 INFO  L82        PathProgramCache]: Analyzing trace with hash -111760747, now seen corresponding path program 2 times
[2020-11-25 05:50:41,302 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 05:50:41,311 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 05:50:41,323 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 05:50:41,344 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 05:50:41,344 INFO  L82        PathProgramCache]: Analyzing trace with hash 1060398544, now seen corresponding path program 1 times
[2020-11-25 05:50:41,345 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 05:50:41,348 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 05:50:41,351 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 05:50:41,358 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 05:50:41,358 INFO  L82        PathProgramCache]: Analyzing trace with hash 1866248892, now seen corresponding path program 1 times
[2020-11-25 05:50:41,359 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 05:50:41,370 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 05:50:41,385 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 547 to 1093
Garbage collection #6: 1093 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1093 to 2179
Garbage collection #7: 2179 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 2179 to 4357
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.001s / 0.003s total
Resizing node table from 2647 to 5281
Garbage collection #7: 5281 nodes / 0 free / 0.001s / 0.004s total
Resizing node table from 5281 to 10559
[2020-11-25 05:50:41,914 WARN  L188               SmtUtils]: Spent 294.00 ms on a formula simplification. DAG size of input: 179 DAG size of output: 179
[2020-11-25 05:50:42,373 WARN  L188               SmtUtils]: Spent 455.00 ms on a formula simplification. DAG size of input: 238 DAG size of output: 224
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 2503 to 5003
Garbage collection #7: 5003 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 5003 to 9973
Garbage collection #8: 9973 nodes / 0 free / 0.002s / 0.004s total
Resizing node table from 9973 to 19937
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #6: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #7: 3137 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 3137 to 6271
[2020-11-25 05:50:42,612 WARN  L188               SmtUtils]: Spent 122.00 ms on a formula simplification that was a NOOP. DAG size: 282
Garbage collection #1: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #2: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #3: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #4: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #5: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #6: 3517 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 3517 to 7027
Garbage collection #7: 7027 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 7027 to 14051
[2020-11-25 05:50:42,882 WARN  L188               SmtUtils]: Spent 262.00 ms on a formula simplification. DAG size of input: 225 DAG size of output: 225
[2020-11-25 05:50:43,006 WARN  L188               SmtUtils]: Spent 122.00 ms on a formula simplification that was a NOOP. DAG size: 225
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
Garbage collection #7: 5281 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5281 to 10559
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 787 to 1571
Garbage collection #6: 1571 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1571 to 3137
[2020-11-25 05:50:43,244 WARN  L188               SmtUtils]: Spent 225.00 ms on a formula simplification. DAG size of input: 151 DAG size of output: 134
[2020-11-25 05:50:43,251 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #6: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #6: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #7: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
[2020-11-25 05:50:44,246 WARN  L188               SmtUtils]: Spent 282.00 ms on a formula simplification. DAG size of input: 179 DAG size of output: 179
[2020-11-25 05:50:44,683 WARN  L188               SmtUtils]: Spent 434.00 ms on a formula simplification. DAG size of input: 237 DAG size of output: 224
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 2503 to 5003
Garbage collection #7: 5003 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 5003 to 9973
Garbage collection #8: 9973 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 9973 to 19937
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #6: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #7: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
Garbage collection #8: 6271 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6271 to 12541
[2020-11-25 05:50:44,899 WARN  L188               SmtUtils]: Spent 118.00 ms on a formula simplification that was a NOOP. DAG size: 282
Garbage collection #1: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #2: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #3: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #4: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #5: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #6: 3517 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3517 to 7027
[2020-11-25 05:50:45,144 WARN  L188               SmtUtils]: Spent 240.00 ms on a formula simplification. DAG size of input: 225 DAG size of output: 225
[2020-11-25 05:50:46,528 WARN  L188               SmtUtils]: Spent 1.38 s on a formula simplification. DAG size of input: 575 DAG size of output: 567
Garbage collection #1: 239 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 239 to 467
Garbage collection #2: 467 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 467 to 929
Garbage collection #3: 929 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 929 to 1847
Garbage collection #4: 1847 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1847 to 3691
Garbage collection #5: 3691 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3691 to 7369
Garbage collection #6: 7369 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7369 to 14737
Garbage collection #7: 14737 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 14737 to 29473
Garbage collection #1: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
[2020-11-25 05:50:46,962 WARN  L188               SmtUtils]: Spent 382.00 ms on a formula simplification. DAG size of input: 217 DAG size of output: 207
[2020-11-25 05:50:47,203 WARN  L188               SmtUtils]: Spent 228.00 ms on a formula simplification that was a NOOP. DAG size: 310
Garbage collection #1: 107 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 107 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
Garbage collection #7: 6661 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6661 to 13313
Garbage collection #1: 71 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 71 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
Garbage collection #7: 4357 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 4357 to 8713
Garbage collection #8: 8713 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 8713 to 17419
[2020-11-25 05:50:47,530 WARN  L188               SmtUtils]: Spent 307.00 ms on a formula simplification. DAG size of input: 217 DAG size of output: 207
[2020-11-25 05:50:48,022 WARN  L188               SmtUtils]: Spent 490.00 ms on a formula simplification. DAG size of input: 312 DAG size of output: 311
Garbage collection #1: 109 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 109 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 3331 to 6661
Garbage collection #1: 107 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 107 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
Garbage collection #7: 6661 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6661 to 13313
Garbage collection #8: 13313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13313 to 26597
Garbage collection #9: 26597 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 26597 to 53189
[2020-11-25 05:50:48,677 WARN  L188               SmtUtils]: Spent 644.00 ms on a formula simplification. DAG size of input: 318 DAG size of output: 306
[2020-11-25 05:50:48,689 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 05:50:48,704 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 05:50:48,711 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 05:50:48 BasicIcfg
[2020-11-25 05:50:48,711 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 05:50:48,711 INFO  L168              Benchmark]: Toolchain (without parser) took 15247.91 ms. Allocated memory was 1.0 GB in the beginning and 2.4 GB in the end (delta: 1.4 GB). Free memory was 945.9 MB in the beginning and 1.3 GB in the end (delta: -319.9 MB). Peak memory consumption was 1.3 GB. Max. memory is 15.3 GB.
[2020-11-25 05:50:48,712 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 956.7 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 05:50:48,712 INFO  L168              Benchmark]: Boogie Preprocessor took 107.41 ms. Allocated memory is still 1.0 GB. Free memory was 940.6 MB in the beginning and 929.8 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 05:50:48,712 INFO  L168              Benchmark]: UtopiaSpecLang took 67.27 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 924.5 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 05:50:48,712 INFO  L168              Benchmark]: Boogie Printer took 14.31 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 919.1 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 05:50:48,713 INFO  L168              Benchmark]: RCFGBuilder took 702.22 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 817.1 MB in the end (delta: 102.0 MB). Peak memory consumption was 102.0 MB. Max. memory is 15.3 GB.
[2020-11-25 05:50:48,713 INFO  L168              Benchmark]: UtopiaLTL2Aut took 38.24 ms. Allocated memory is still 1.0 GB. Free memory was 817.1 MB in the beginning and 808.1 MB in the end (delta: 8.9 MB). Peak memory consumption was 8.9 MB. Max. memory is 15.3 GB.
[2020-11-25 05:50:48,713 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1295.38 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 203.4 MB). Free memory was 808.1 MB in the beginning and 1.1 GB in the end (delta: -313.2 MB). Peak memory consumption was 182.3 MB. Max. memory is 15.3 GB.
[2020-11-25 05:50:48,713 INFO  L168              Benchmark]: BlockEncodingV2 took 100.49 ms. Allocated memory is still 1.2 GB. Free memory was 1.1 GB in the beginning and 1.1 GB in the end (delta: 62.0 MB). Peak memory consumption was 62.0 MB. Max. memory is 15.3 GB.
[2020-11-25 05:50:48,714 INFO  L168              Benchmark]: BuchiAutomizer took 12919.26 ms. Allocated memory was 1.2 GB in the beginning and 2.4 GB in the end (delta: 1.1 GB). Free memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: -206.6 MB). Peak memory consumption was 1.2 GB. Max. memory is 15.3 GB.
[2020-11-25 05:50:48,716 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    3096 locations, 5276 edges
  - StatisticsResult: Encoded RCFG
    3056 locations, 5176 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 956.7 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 107.41 ms. Allocated memory is still 1.0 GB. Free memory was 940.6 MB in the beginning and 929.8 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 67.27 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 924.5 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 14.31 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 919.1 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 702.22 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 817.1 MB in the end (delta: 102.0 MB). Peak memory consumption was 102.0 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 38.24 ms. Allocated memory is still 1.0 GB. Free memory was 817.1 MB in the beginning and 808.1 MB in the end (delta: 8.9 MB). Peak memory consumption was 8.9 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1295.38 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 203.4 MB). Free memory was 808.1 MB in the beginning and 1.1 GB in the end (delta: -313.2 MB). Peak memory consumption was 182.3 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 100.49 ms. Allocated memory is still 1.2 GB. Free memory was 1.1 GB in the beginning and 1.1 GB in the end (delta: 62.0 MB). Peak memory consumption was 62.0 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 12919.26 ms. Allocated memory was 1.2 GB in the beginning and 2.4 GB in the end (delta: 1.1 GB). Free memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: -206.6 MB). Peak memory consumption was 1.2 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    1311 locations, 1637 edges
  - StatisticsResult: BuchiProgram size
    3096 locations, 5276 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 7 terminating modules (7 trivial, 0 deterministic, 0 nondeterministic) and one nonterminating remainder module.7 modules have a trivial ranking function, the largest among these consists of 13 locations. The remainder module has 1825 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 12.8s and 8 iterations.  TraceHistogramMax:2. Analysis of lassos took 8.1s. Construction of modules took 3.0s. BÃ¼chi inclusion checks took 1.0s. Highest rank in rank-based complementation 0. Minimization of det autom 7. Minimization of nondet autom 0. Automata minimization 0.2s AutomataMinimizationTime, 7 MinimizatonAttempts, 3661 StatesRemovedByMinimization, 6 NontrivialMinimizations. Non-live state removal took 0.1s Buchi closure took 0.0s. Biggest automaton had 3340 states and ocurred in iteration 4.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 18063 SDtfs, 21261 SDslu, 22640 SDs, 0 SdLazy, 42325 SolverSat, 3464 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 3.0s Time	LassoAnalysisResults: nont1 unkn0 SFLI1 SFLT0 conc0 concLT0 SILN0 SILU6 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - TransactionCounterexample: Violation of LTL property LTL
    Found an infinite, lasso-shaped execution that violates the LTL property LTL.
Stem:
address(1491346185) = (new StreamProtocol)({from : 1491346186});
[L395]               havoc __exception;
[L396]               revert := false;
[L397]   COND FALSE  !(__exception)
[L420]   CALL        call StreamProtocol_StreamProtocol__success(this, msgsender_MSG, msgvalue_MSG);
[L1923]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1762]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1747]              assume msgsender_MSG != null;
[L1748]              Balance[this] := 0;
[L1762]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1763]  COND FALSE  !(revert)
[L1923]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1924]  COND FALSE  !(revert)
[L1927]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1830]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1813]              assume msgsender_MSG != null;
[L1814]              Balance[this] := 0;
[L1815]              owner_Owned[this] := null;
[L1817]              owner_Owned[this] := msgsender_MSG;
[L1830]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1831]  COND FALSE  !(revert)
[L1927]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1928]  COND FALSE  !(revert)
[L1931]  CALL        call StreamProtocol_StreamProtocol_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1879]              assume msgsender_MSG != null;
[L1880]              Balance[this] := 0;
[L1881]              symbol_StreamProtocol[this] := 1491346165;
[L1882]              name_StreamProtocol[this] := 1491346165;
[L1883]              decimals_StreamProtocol[this] := 0;
[L1884]              _totalSupply_StreamProtocol[this] := 0;
[L1885]              _stopTrade_StreamProtocol[this] := false;
[L1886]              balances_StreamProtocol[this] := zeroRefintArr();
[L1887]              sum_balances0[this] := 0;
[L1888]              allowed_StreamProtocol[this] := zeroRefRefintArr();
[L1889]              sum_allowed1[this] := 0;
[L1891]              symbol_StreamProtocol[this] := 1357906882;
[L1892]              name_StreamProtocol[this] := -1605590943;
[L1893]              decimals_StreamProtocol[this] := 18;
[L1894]              __var_1 := decimals_StreamProtocol[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1895]              _totalSupply_StreamProtocol[this] := 2000000000 * (nonlinearPow(10, decimals_StreamProtocol[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1896]              _stopTrade_StreamProtocol[this] := false;
[L1897]              sum_balances0[this] := sum_balances0[this] - balances_StreamProtocol[this][owner_Owned[this]];
[L1898]              balances_StreamProtocol[this][owner_Owned[this]] := _totalSupply_StreamProtocol[this];
[L1899]              sum_balances0[this] := sum_balances0[this] + balances_StreamProtocol[this][owner_Owned[this]];
[L1900]              assert { :EventEmitted "Transfer_StreamProtocol" } true;
[L1931]  RET         call StreamProtocol_StreamProtocol_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1932]  COND FALSE  !(revert)
[L420]   RET         call StreamProtocol_StreamProtocol__success(this, msgsender_MSG, msgvalue_MSG);
[L421]               assume !revert && gas >= 0;
[L3613]  RET         call StreamProtocol_StreamProtocol(this, msgsender_MSG, msgvalue_MSG);
StreamProtocol(1491346185).stopTrade.gas(3979002)({from : 1491346186});
[L504]               havoc __exception;
[L505]               revert := false;
[L506]   COND FALSE  !(__exception)
[L529]   CALL        call stopTrade_StreamProtocol__success(this, msgsender_MSG, msgvalue_MSG);
[L1978]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3150]  COND FALSE  !(!(msgsender_MSG == owner_Owned[this]))
[L1978]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1979]  COND FALSE  !(revert)
[L1982]  COND FALSE  !(!(_stopTrade_StreamProtocol[this] != true))
[L1986]              _stopTrade_StreamProtocol[this] := true;
[L529]   RET         call stopTrade_StreamProtocol__success(this, msgsender_MSG, msgvalue_MSG);
[L530]               assume !revert && gas >= 0;
[L3570]  RET         call stopTrade_StreamProtocol(this, msgsender_MSG, msgvalue_MSG);
StreamProtocol(1491346185).approve~address~uint256.gas(3979003)({from : 1491346180, spender : 1491346172, tokens : 0});
[L3]                revert_hold := revert;
[L3]                revert := false;
[L3]                assume p1 != msgsender_MSG || p2 != spender_s419;
[L3]                call_approve_StreamProtocol0 := true;
[L3]                call_approve_StreamProtocol0 := false;
[L3]                revert := revert_hold;
[L725]              havoc __exception;
[L726]              revert := false;
[L727]   COND TRUE  __exception
[L728]              __tmp__Balance := Balance;
[L729]              __tmp__DType := DType;
[L730]              __tmp__Alloc := Alloc;
[L731]              __tmp__balance_ADDR := balance_ADDR;
[L732]              __tmp__M_Ref_int := M_Ref_int;
[L733]              __tmp__sum_balances0 := sum_balances0;
[L734]              __tmp__alloc_allowed_StreamProtocol_lvl0 := alloc_allowed_StreamProtocol_lvl0;
[L735]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L736]              __tmp__sum_allowed1 := sum_allowed1;
[L737]              __tmp__Length := Length;
[L738]              __tmp__now := now;
[L739]              __tmp__owner_Owned := owner_Owned;
[L740]              __tmp__symbol_StreamProtocol := symbol_StreamProtocol;
[L741]              __tmp__name_StreamProtocol := name_StreamProtocol;
[L742]              __tmp__decimals_StreamProtocol := decimals_StreamProtocol;
[L743]              __tmp___totalSupply_StreamProtocol := _totalSupply_StreamProtocol;
[L744]              __tmp___stopTrade_StreamProtocol := _stopTrade_StreamProtocol;
[L745]              __tmp__balances_StreamProtocol := balances_StreamProtocol;
[L746]              __tmp__allowed_StreamProtocol := allowed_StreamProtocol;
[L747]   CALL       call success_s419 := approve~address~uint256_StreamProtocol__fail(this, msgsender_MSG, msgvalue_MSG, spender_s419, tokens_s419);
[L2094]  COND TRUE  !(__tmp___stopTrade_StreamProtocol[this] != true)
[L2095]             revert := true;
[L747]   RET        call success_s419 := approve~address~uint256_StreamProtocol__fail(this, msgsender_MSG, msgvalue_MSG, spender_s419, tokens_s419);
[L748]              assume revert || gas < 0;
[L3533]  RET        call success_s419 := approve~address~uint256_StreamProtocol(this, msgsender_MSG, msgvalue_MSG, spender_s419, tokens_s419);

Loop:
StreamProtocol(1491346185).approve~address~uint256.gas(3979001)({from : 1491346181, spender : 1491346173, tokens : 0});
[L3]                revert_hold := revert;
[L3]                revert := false;
[L3]                assume p1 != msgsender_MSG || p2 != spender_s419;
[L3]                call_approve_StreamProtocol0 := true;
[L3]                call_approve_StreamProtocol0 := false;
[L3]                revert := revert_hold;
[L725]              havoc __exception;
[L726]              revert := false;
[L727]   COND TRUE  __exception
[L728]              __tmp__Balance := Balance;
[L729]              __tmp__DType := DType;
[L730]              __tmp__Alloc := Alloc;
[L731]              __tmp__balance_ADDR := balance_ADDR;
[L732]              __tmp__M_Ref_int := M_Ref_int;
[L733]              __tmp__sum_balances0 := sum_balances0;
[L734]              __tmp__alloc_allowed_StreamProtocol_lvl0 := alloc_allowed_StreamProtocol_lvl0;
[L735]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L736]              __tmp__sum_allowed1 := sum_allowed1;
[L737]              __tmp__Length := Length;
[L738]              __tmp__now := now;
[L739]              __tmp__owner_Owned := owner_Owned;
[L740]              __tmp__symbol_StreamProtocol := symbol_StreamProtocol;
[L741]              __tmp__name_StreamProtocol := name_StreamProtocol;
[L742]              __tmp__decimals_StreamProtocol := decimals_StreamProtocol;
[L743]              __tmp___totalSupply_StreamProtocol := _totalSupply_StreamProtocol;
[L744]              __tmp___stopTrade_StreamProtocol := _stopTrade_StreamProtocol;
[L745]              __tmp__balances_StreamProtocol := balances_StreamProtocol;
[L746]              __tmp__allowed_StreamProtocol := allowed_StreamProtocol;
[L747]   CALL       call success_s419 := approve~address~uint256_StreamProtocol__fail(this, msgsender_MSG, msgvalue_MSG, spender_s419, tokens_s419);
[L2094]  COND TRUE  !(__tmp___stopTrade_StreamProtocol[this] != true)
[L2095]             revert := true;
[L747]   RET        call success_s419 := approve~address~uint256_StreamProtocol__fail(this, msgsender_MSG, msgvalue_MSG, spender_s419, tokens_s419);
[L748]              assume revert || gas < 0;
[L3533]  RET        call success_s419 := approve~address~uint256_StreamProtocol(this, msgsender_MSG, msgvalue_MSG, spender_s419, tokens_s419);

End of lasso representation.
RESULT: Ultimate could not prove your program: Toolchain returned no result.
Received shutdown request...
