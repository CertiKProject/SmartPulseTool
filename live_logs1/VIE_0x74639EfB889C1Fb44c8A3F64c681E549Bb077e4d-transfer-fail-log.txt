This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 08:33:52,067 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 08:33:52,069 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 08:33:52,078 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 08:33:52,079 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 08:33:52,079 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 08:33:52,080 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 08:33:52,082 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 08:33:52,083 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 08:33:52,084 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 08:33:52,085 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 08:33:52,085 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 08:33:52,085 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 08:33:52,086 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 08:33:52,087 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 08:33:52,087 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 08:33:52,088 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 08:33:52,089 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 08:33:52,090 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 08:33:52,091 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 08:33:52,092 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 08:33:52,093 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 08:33:52,094 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 08:33:52,094 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 08:33:52,094 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 08:33:52,095 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 08:33:52,095 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 08:33:52,096 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 08:33:52,096 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 08:33:52,096 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 08:33:52,097 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 08:33:52,097 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 08:33:52,098 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 08:33:52,098 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 08:33:52,099 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 08:33:52,099 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 08:33:52,099 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 08:33:52,100 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 08:33:52,100 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 08:33:52,100 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 08:33:52,101 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 08:33:52,101 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 08:33:52,108 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 08:33:52,109 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 08:33:52,109 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 08:33:52,109 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 08:33:52,109 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 08:33:52,110 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 08:33:52,110 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 08:33:52,110 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 08:33:52,110 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 08:33:52,110 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 08:33:52,110 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 08:33:52,110 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 08:33:52,110 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 08:33:52,110 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 08:33:52,111 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 08:33:52,111 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 08:33:52,111 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 08:33:52,111 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 08:33:52,111 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 08:33:52,111 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 08:33:52,111 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 08:33:52,111 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 08:33:52,111 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 08:33:52,112 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 08:33:52,112 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 08:33:52,112 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 08:33:52,134 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 08:33:52,148 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 08:33:52,150 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 08:33:52,151 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 08:33:52,152 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 08:33:52,152 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/VIE_0x74639EfB889C1Fb44c8A3F64c681E549Bb077e4d_transfer-fail.bpl
[2020-11-25 08:33:52,152 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/VIE_0x74639EfB889C1Fb44c8A3F64c681E549Bb077e4d_transfer-fail.bpl'
[2020-11-25 08:33:52,262 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 08:33:52,264 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 08:33:52,264 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 08:33:52,264 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 08:33:52,264 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 08:33:52,281 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "VIE_0x74639EfB889C1Fb44c8A3F64c681E549Bb077e4d_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:33:52" (1/1) ...
[2020-11-25 08:33:52,283 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "VIE_0x74639EfB889C1Fb44c8A3F64c681E549Bb077e4d_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:33:52" (1/1) ...
[2020-11-25 08:33:52,322 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "VIE_0x74639EfB889C1Fb44c8A3F64c681E549Bb077e4d_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:33:52" (1/1) ...
[2020-11-25 08:33:52,322 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "VIE_0x74639EfB889C1Fb44c8A3F64c681E549Bb077e4d_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:33:52" (1/1) ...
[2020-11-25 08:33:52,348 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "VIE_0x74639EfB889C1Fb44c8A3F64c681E549Bb077e4d_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:33:52" (1/1) ...
[2020-11-25 08:33:52,363 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "VIE_0x74639EfB889C1Fb44c8A3F64c681E549Bb077e4d_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:33:52" (1/1) ...
[2020-11-25 08:33:52,374 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "VIE_0x74639EfB889C1Fb44c8A3F64c681E549Bb077e4d_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:33:52" (1/1) ...
[2020-11-25 08:33:52,387 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 08:33:52,388 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 08:33:52,388 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 08:33:52,391 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 08:33:52,394 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "VIE_0x74639EfB889C1Fb44c8A3F64c681E549Bb077e4d_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:33:52" (1/1) ...
[2020-11-25 08:33:52,414 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(BasicToken.transfer(to, value), msg.sender != to && (value > balances_BasicToken[this][msg.sender] || balances_BasicToken[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][to] >= 0 && balances_BasicToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][msg.sender] >= 0 &&  balances_BasicToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(BasicToken.transfer)))
[2020-11-25 08:33:52,420 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(BasicToken.transfer(to, value), msg.sender != to && (value > balances_BasicToken[this][msg.sender] || balances_BasicToken[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][to] >= 0 && balances_BasicToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][msg.sender] >= 0 &&  balances_BasicToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(BasicToken.transfer)))
[2020-11-25 08:33:52,428 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(BasicToken.transfer(to, value), msg.sender != to && (value > balances_BasicToken[this][msg.sender] || balances_BasicToken[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][to] >= 0 && balances_BasicToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][msg.sender] >= 0 &&  balances_BasicToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(BasicToken.transfer)))
[2020-11-25 08:33:52,435 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( msg.sender!=_to_s418 && ( _value_s418>balances_BasicToken[this][msg.sender] || ( balances_BasicToken[this][_to_s418] + _value_s418 )>=115792089237316195423570985008687907853269984665640564039457584007913129639936 ) ) && _value_s418>=0 ) && _value_s418<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_BasicToken[this][_to_s418]>=0 ) && balances_BasicToken[this][_to_s418]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_BasicToken[this][msg.sender]>=0 ) && balances_BasicToken[this][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPNEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>],IdentifierExpression[_to_s418,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>]],BinaryExpression[LOGICOR,BinaryExpression[COMPGT,IdentifierExpression[_value_s418,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>]]]],BinaryExpression[COMPGEQ,BinaryExpression[ARITHPLUS,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>]]],[IdentifierExpression[_to_s418,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>]]],IdentifierExpression[_value_s418,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]],BinaryExpression[COMPGEQ,IdentifierExpression[_value_s418,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[_value_s418,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>]]],[IdentifierExpression[_to_s418,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>]]],[IdentifierExpression[_to_s418,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 08:33:52,443 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(BasicToken.transfer(to, value), msg.sender != to && (value > balances_BasicToken[this][msg.sender] || balances_BasicToken[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][to] >= 0 && balances_BasicToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][msg.sender] >= 0 &&  balances_BasicToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(BasicToken.transfer)))
[2020-11-25 08:33:52,443 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transfer_BasicToken0) ==> ( <>AP(fail_transfer_BasicToken0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 08:33:52,456 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 08:33:52 PropertyContainer
[2020-11-25 08:33:52,456 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 08:33:52,457 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 08:33:52,457 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 08:33:52,457 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 08:33:52,458 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "VIE_0x74639EfB889C1Fb44c8A3F64c681E549Bb077e4d_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:33:52" (1/2) ...
[2020-11-25 08:33:52,458 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 08:33:52,458 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 08:33:52,480 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 08:33:52" (2/2) ...
[2020-11-25 08:33:52,480 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 08:33:52,480 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 08:33:52,480 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 08:33:52,480 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 08:33:52,481 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "VIE_0x74639EfB889C1Fb44c8A3F64c681E549Bb077e4d_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:33:52" (1/2) ...
[2020-11-25 08:33:52,536 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 08:33:52,536 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-25 08:33:52,536 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable
[2020-11-25 08:33:52,537 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable
[2020-11-25 08:33:52,537 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable
[2020-11-25 08:33:52,537 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable
[2020-11-25 08:33:52,537 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable
[2020-11-25 08:33:52,537 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable
[2020-11-25 08:33:52,537 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 08:33:52,537 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 08:33:52,537 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 08:33:52,537 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 08:33:52,538 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 08:33:52,538 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 08:33:52,538 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 08:33:52,538 INFO  L130     BoogieDeclarations]: Found specification of procedure LockableToken_LockableToken_NoBaseCtor__success
[2020-11-25 08:33:52,538 INFO  L130     BoogieDeclarations]: Found specification of procedure LockableToken_LockableToken
[2020-11-25 08:33:52,539 INFO  L138     BoogieDeclarations]: Found implementation of procedure LockableToken_LockableToken
[2020-11-25 08:33:52,539 INFO  L130     BoogieDeclarations]: Found specification of procedure lock~address~uint256_LockableToken
[2020-11-25 08:33:52,539 INFO  L138     BoogieDeclarations]: Found implementation of procedure lock~address~uint256_LockableToken
[2020-11-25 08:33:52,539 INFO  L130     BoogieDeclarations]: Found specification of procedure locking~address_LockableToken
[2020-11-25 08:33:52,539 INFO  L138     BoogieDeclarations]: Found implementation of procedure locking~address_LockableToken
[2020-11-25 08:33:52,539 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseLocking~address~uint256_LockableToken
[2020-11-25 08:33:52,539 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseLocking~address~uint256_LockableToken
[2020-11-25 08:33:52,539 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseLocking~address~uint256_LockableToken
[2020-11-25 08:33:52,540 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseLocking~address~uint256_LockableToken
[2020-11-25 08:33:52,540 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic_NoBaseCtor__success
[2020-11-25 08:33:52,540 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic
[2020-11-25 08:33:52,540 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic
[2020-11-25 08:33:52,540 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20Basic
[2020-11-25 08:33:52,540 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20Basic
[2020-11-25 08:33:52,540 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Basic
[2020-11-25 08:33:52,540 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken_NoBaseCtor__success
[2020-11-25 08:33:52,540 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken
[2020-11-25 08:33:52,540 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken
[2020-11-25 08:33:52,541 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken
[2020-11-25 08:33:52,541 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken
[2020-11-25 08:33:52,541 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken
[2020-11-25 08:33:52,541 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken
[2020-11-25 08:33:52,541 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken
[2020-11-25 08:33:52,541 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken
[2020-11-25 08:33:52,541 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken_NoBaseCtor__success
[2020-11-25 08:33:52,541 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken
[2020-11-25 08:33:52,541 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken
[2020-11-25 08:33:52,541 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_BurnableToken
[2020-11-25 08:33:52,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_BurnableToken
[2020-11-25 08:33:52,542 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_BurnableToken__success
[2020-11-25 08:33:52,542 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 08:33:52,542 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 08:33:52,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 08:33:52,542 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 08:33:52,542 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 08:33:52,542 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 08:33:52,542 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken_NoBaseCtor__success
[2020-11-25 08:33:52,542 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken
[2020-11-25 08:33:52,543 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken
[2020-11-25 08:33:52,543 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken
[2020-11-25 08:33:52,543 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken
[2020-11-25 08:33:52,543 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken
[2020-11-25 08:33:52,543 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken
[2020-11-25 08:33:52,543 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken
[2020-11-25 08:33:52,543 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken
[2020-11-25 08:33:52,543 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken
[2020-11-25 08:33:52,543 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken
[2020-11-25 08:33:52,543 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken
[2020-11-25 08:33:52,544 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken
[2020-11-25 08:33:52,544 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken_NoBaseCtor__success
[2020-11-25 08:33:52,544 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken
[2020-11-25 08:33:52,544 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken
[2020-11-25 08:33:52,544 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_MintableToken
[2020-11-25 08:33:52,544 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_MintableToken
[2020-11-25 08:33:52,544 INFO  L130     BoogieDeclarations]: Found specification of procedure VIE_VIE_NoBaseCtor__success
[2020-11-25 08:33:52,544 INFO  L130     BoogieDeclarations]: Found specification of procedure VIE_VIE
[2020-11-25 08:33:52,544 INFO  L138     BoogieDeclarations]: Found implementation of procedure VIE_VIE
[2020-11-25 08:33:52,545 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_VIE__success
[2020-11-25 08:33:52,545 INFO  L130     BoogieDeclarations]: Found specification of procedure name_VIE
[2020-11-25 08:33:52,545 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_VIE
[2020-11-25 08:33:52,545 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_VIE
[2020-11-25 08:33:52,545 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_VIE
[2020-11-25 08:33:52,545 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_VIE
[2020-11-25 08:33:52,545 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_VIE
[2020-11-25 08:33:52,545 INFO  L130     BoogieDeclarations]: Found specification of procedure INITIAL_SUPPLY_VIE
[2020-11-25 08:33:52,545 INFO  L138     BoogieDeclarations]: Found implementation of procedure INITIAL_SUPPLY_VIE
[2020-11-25 08:33:52,545 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 08:33:52,546 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 08:33:52,546 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 08:33:52,546 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 08:33:52,546 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Ownable
[2020-11-25 08:33:52,546 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Ownable
[2020-11-25 08:33:52,546 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 08:33:52,546 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 08:33:52,546 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_LockableToken
[2020-11-25 08:33:52,546 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_LockableToken
[2020-11-25 08:33:52,546 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Basic
[2020-11-25 08:33:52,547 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Basic
[2020-11-25 08:33:52,547 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_BasicToken
[2020-11-25 08:33:52,547 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_BasicToken
[2020-11-25 08:33:52,547 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_BurnableToken
[2020-11-25 08:33:52,547 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_BurnableToken
[2020-11-25 08:33:52,547 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 08:33:52,547 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 08:33:52,547 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_StandardToken
[2020-11-25 08:33:52,547 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_StandardToken
[2020-11-25 08:33:52,547 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_MintableToken
[2020-11-25 08:33:52,547 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_MintableToken
[2020-11-25 08:33:52,548 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_VIE
[2020-11-25 08:33:52,548 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 08:33:52,548 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 08:33:52,548 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-25 08:33:52,548 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__success
[2020-11-25 08:33:52,548 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__fail
[2020-11-25 08:33:52,548 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__success
[2020-11-25 08:33:52,548 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__fail
[2020-11-25 08:33:52,548 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__success
[2020-11-25 08:33:52,549 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__fail
[2020-11-25 08:33:52,549 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 08:33:52,549 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 08:33:52,549 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 08:33:52,549 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 08:33:52,549 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 08:33:52,549 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 08:33:52,549 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 08:33:52,549 INFO  L130     BoogieDeclarations]: Found specification of procedure LockableToken_LockableToken_NoBaseCtor__fail
[2020-11-25 08:33:52,549 INFO  L130     BoogieDeclarations]: Found specification of procedure LockableToken_LockableToken__success
[2020-11-25 08:33:52,550 INFO  L130     BoogieDeclarations]: Found specification of procedure LockableToken_LockableToken__fail
[2020-11-25 08:33:52,550 INFO  L130     BoogieDeclarations]: Found specification of procedure lock~address~uint256_LockableToken__success
[2020-11-25 08:33:52,550 INFO  L130     BoogieDeclarations]: Found specification of procedure lock~address~uint256_LockableToken__fail
[2020-11-25 08:33:52,550 INFO  L130     BoogieDeclarations]: Found specification of procedure locking~address_LockableToken__success
[2020-11-25 08:33:52,550 INFO  L130     BoogieDeclarations]: Found specification of procedure locking~address_LockableToken__fail
[2020-11-25 08:33:52,550 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseLocking~address~uint256_LockableToken__success
[2020-11-25 08:33:52,550 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseLocking~address~uint256_LockableToken__fail
[2020-11-25 08:33:52,550 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseLocking~address~uint256_LockableToken__success
[2020-11-25 08:33:52,550 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseLocking~address~uint256_LockableToken__fail
[2020-11-25 08:33:52,551 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic_NoBaseCtor__fail
[2020-11-25 08:33:52,551 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic__success
[2020-11-25 08:33:52,551 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic__fail
[2020-11-25 08:33:52,551 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken_NoBaseCtor__fail
[2020-11-25 08:33:52,551 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken__success
[2020-11-25 08:33:52,551 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken__fail
[2020-11-25 08:33:52,551 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken__success
[2020-11-25 08:33:52,551 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken__fail
[2020-11-25 08:33:52,551 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken__success
[2020-11-25 08:33:52,551 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken__fail
[2020-11-25 08:33:52,552 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken__success
[2020-11-25 08:33:52,552 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken__fail
[2020-11-25 08:33:52,552 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken_NoBaseCtor__fail
[2020-11-25 08:33:52,552 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken__success
[2020-11-25 08:33:52,552 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken__fail
[2020-11-25 08:33:52,552 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_BurnableToken__success
[2020-11-25 08:33:52,552 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_BurnableToken__fail
[2020-11-25 08:33:52,552 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_BurnableToken__fail
[2020-11-25 08:33:52,552 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 08:33:52,553 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 08:33:52,553 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 08:33:52,553 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken_NoBaseCtor__fail
[2020-11-25 08:33:52,553 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken__success
[2020-11-25 08:33:52,553 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken__fail
[2020-11-25 08:33:52,553 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken__success
[2020-11-25 08:33:52,553 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken__fail
[2020-11-25 08:33:52,553 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken__success
[2020-11-25 08:33:52,553 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken__fail
[2020-11-25 08:33:52,553 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken__success
[2020-11-25 08:33:52,553 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken__fail
[2020-11-25 08:33:52,554 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken__success
[2020-11-25 08:33:52,554 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken__fail
[2020-11-25 08:33:52,554 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken__success
[2020-11-25 08:33:52,554 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken__fail
[2020-11-25 08:33:52,554 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken_NoBaseCtor__fail
[2020-11-25 08:33:52,554 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken__success
[2020-11-25 08:33:52,554 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken__fail
[2020-11-25 08:33:52,554 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_MintableToken__success
[2020-11-25 08:33:52,555 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_MintableToken__fail
[2020-11-25 08:33:52,555 INFO  L130     BoogieDeclarations]: Found specification of procedure VIE_VIE_NoBaseCtor__fail
[2020-11-25 08:33:52,555 INFO  L130     BoogieDeclarations]: Found specification of procedure VIE_VIE__success
[2020-11-25 08:33:52,555 INFO  L130     BoogieDeclarations]: Found specification of procedure VIE_VIE__fail
[2020-11-25 08:33:52,555 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_VIE__fail
[2020-11-25 08:33:52,555 INFO  L130     BoogieDeclarations]: Found specification of procedure name_VIE__success
[2020-11-25 08:33:52,555 INFO  L130     BoogieDeclarations]: Found specification of procedure name_VIE__fail
[2020-11-25 08:33:52,555 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_VIE__success
[2020-11-25 08:33:52,555 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_VIE__fail
[2020-11-25 08:33:52,555 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_VIE__success
[2020-11-25 08:33:52,555 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_VIE__fail
[2020-11-25 08:33:52,555 INFO  L130     BoogieDeclarations]: Found specification of procedure INITIAL_SUPPLY_VIE__success
[2020-11-25 08:33:52,556 INFO  L130     BoogieDeclarations]: Found specification of procedure INITIAL_SUPPLY_VIE__fail
[2020-11-25 08:33:52,556 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 08:33:52,556 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 08:33:52,556 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 08:33:52,556 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 08:33:52,556 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 08:33:52,556 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 08:33:52,556 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-25 08:33:52,556 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-25 08:33:52,556 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__fail
[2020-11-25 08:33:52,556 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__success
[2020-11-25 08:33:52,556 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__fail
[2020-11-25 08:33:52,557 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__success
[2020-11-25 08:33:52,557 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__fail
[2020-11-25 08:33:52,557 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__success
[2020-11-25 08:33:52,557 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 08:33:52,557 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 08:33:52,557 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 08:33:52,557 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 08:33:52,557 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 08:33:52,557 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 08:33:52,557 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 08:33:52,557 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 08:33:52,557 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 08:33:52,558 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 08:33:52,558 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 08:33:52,558 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 08:33:52,558 INFO  L138     BoogieDeclarations]: Found implementation of procedure LockableToken_LockableToken_NoBaseCtor__fail
[2020-11-25 08:33:52,558 INFO  L138     BoogieDeclarations]: Found implementation of procedure LockableToken_LockableToken_NoBaseCtor__success
[2020-11-25 08:33:52,558 INFO  L138     BoogieDeclarations]: Found implementation of procedure LockableToken_LockableToken__fail
[2020-11-25 08:33:52,558 INFO  L138     BoogieDeclarations]: Found implementation of procedure LockableToken_LockableToken__success
[2020-11-25 08:33:52,558 INFO  L138     BoogieDeclarations]: Found implementation of procedure lock~address~uint256_LockableToken__fail
[2020-11-25 08:33:52,558 INFO  L138     BoogieDeclarations]: Found implementation of procedure lock~address~uint256_LockableToken__success
[2020-11-25 08:33:52,558 INFO  L138     BoogieDeclarations]: Found implementation of procedure locking~address_LockableToken__fail
[2020-11-25 08:33:52,558 INFO  L138     BoogieDeclarations]: Found implementation of procedure locking~address_LockableToken__success
[2020-11-25 08:33:52,558 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseLocking~address~uint256_LockableToken__fail
[2020-11-25 08:33:52,559 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseLocking~address~uint256_LockableToken__success
[2020-11-25 08:33:52,559 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseLocking~address~uint256_LockableToken__fail
[2020-11-25 08:33:52,559 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseLocking~address~uint256_LockableToken__success
[2020-11-25 08:33:52,559 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic_NoBaseCtor__fail
[2020-11-25 08:33:52,559 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic_NoBaseCtor__success
[2020-11-25 08:33:52,559 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic__fail
[2020-11-25 08:33:52,559 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic__success
[2020-11-25 08:33:52,559 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken_NoBaseCtor__fail
[2020-11-25 08:33:52,559 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken_NoBaseCtor__success
[2020-11-25 08:33:52,559 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken__fail
[2020-11-25 08:33:52,559 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken__success
[2020-11-25 08:33:52,560 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken__fail
[2020-11-25 08:33:52,560 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken__success
[2020-11-25 08:33:52,560 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken__fail
[2020-11-25 08:33:52,560 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken__success
[2020-11-25 08:33:52,560 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken__fail
[2020-11-25 08:33:52,560 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken__success
[2020-11-25 08:33:52,560 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken_NoBaseCtor__fail
[2020-11-25 08:33:52,560 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken_NoBaseCtor__success
[2020-11-25 08:33:52,560 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken__fail
[2020-11-25 08:33:52,560 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken__success
[2020-11-25 08:33:52,560 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_BurnableToken__fail
[2020-11-25 08:33:52,560 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_BurnableToken__success
[2020-11-25 08:33:52,561 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_BurnableToken__fail
[2020-11-25 08:33:52,561 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_BurnableToken__success
[2020-11-25 08:33:52,561 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 08:33:52,561 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 08:33:52,561 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 08:33:52,561 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 08:33:52,561 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken_NoBaseCtor__fail
[2020-11-25 08:33:52,561 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken_NoBaseCtor__success
[2020-11-25 08:33:52,561 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken__fail
[2020-11-25 08:33:52,561 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken__success
[2020-11-25 08:33:52,561 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken__fail
[2020-11-25 08:33:52,561 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken__success
[2020-11-25 08:33:52,562 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken__fail
[2020-11-25 08:33:52,562 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken__success
[2020-11-25 08:33:52,562 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken__fail
[2020-11-25 08:33:52,562 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken__success
[2020-11-25 08:33:52,562 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken__fail
[2020-11-25 08:33:52,562 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken__success
[2020-11-25 08:33:52,562 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken__fail
[2020-11-25 08:33:52,562 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken__success
[2020-11-25 08:33:52,562 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken_NoBaseCtor__fail
[2020-11-25 08:33:52,562 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken_NoBaseCtor__success
[2020-11-25 08:33:52,562 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken__fail
[2020-11-25 08:33:52,563 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken__success
[2020-11-25 08:33:52,563 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_MintableToken__fail
[2020-11-25 08:33:52,563 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_MintableToken__success
[2020-11-25 08:33:52,563 INFO  L138     BoogieDeclarations]: Found implementation of procedure VIE_VIE_NoBaseCtor__fail
[2020-11-25 08:33:52,563 INFO  L138     BoogieDeclarations]: Found implementation of procedure VIE_VIE_NoBaseCtor__success
[2020-11-25 08:33:52,563 INFO  L138     BoogieDeclarations]: Found implementation of procedure VIE_VIE__fail
[2020-11-25 08:33:52,563 INFO  L138     BoogieDeclarations]: Found implementation of procedure VIE_VIE__success
[2020-11-25 08:33:52,563 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_VIE__fail
[2020-11-25 08:33:52,563 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_VIE__success
[2020-11-25 08:33:52,563 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_VIE__fail
[2020-11-25 08:33:52,563 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_VIE__success
[2020-11-25 08:33:52,564 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_VIE__fail
[2020-11-25 08:33:52,564 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_VIE__success
[2020-11-25 08:33:52,564 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_VIE__fail
[2020-11-25 08:33:52,565 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_VIE__success
[2020-11-25 08:33:52,565 INFO  L138     BoogieDeclarations]: Found implementation of procedure INITIAL_SUPPLY_VIE__fail
[2020-11-25 08:33:52,565 INFO  L138     BoogieDeclarations]: Found implementation of procedure INITIAL_SUPPLY_VIE__success
[2020-11-25 08:33:52,565 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 08:33:52,566 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 08:33:52,566 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 08:33:52,566 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 08:33:52,566 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 08:33:52,567 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 08:33:52,567 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 08:33:52,567 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 08:33:52,567 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Ownable
[2020-11-25 08:33:52,567 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Ownable
[2020-11-25 08:33:52,568 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 08:33:52,568 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 08:33:52,568 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_LockableToken
[2020-11-25 08:33:52,568 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_LockableToken
[2020-11-25 08:33:52,568 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Basic
[2020-11-25 08:33:52,569 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Basic
[2020-11-25 08:33:52,569 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_BasicToken
[2020-11-25 08:33:52,569 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_BasicToken
[2020-11-25 08:33:52,569 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_BurnableToken
[2020-11-25 08:33:52,569 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_BurnableToken
[2020-11-25 08:33:52,570 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 08:33:52,570 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 08:33:52,570 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_StandardToken
[2020-11-25 08:33:52,570 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_StandardToken
[2020-11-25 08:33:52,570 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_MintableToken
[2020-11-25 08:33:52,571 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_MintableToken
[2020-11-25 08:33:52,571 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_VIE
[2020-11-25 08:33:52,571 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 08:33:52,571 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 08:33:52,571 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 08:33:53,312 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 08:33:53,312 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 08:33:53,754 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 08:33:53,754 INFO  L286             CfgBuilder]: Removed 10 assue(true) statements.
[2020-11-25 08:33:53,757 INFO  L202        PluginConnector]: Adding new model VIE_0x74639EfB889C1Fb44c8A3F64c681E549Bb077e4d_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 08:33:53 BoogieIcfgContainer
[2020-11-25 08:33:53,757 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 08:33:52" (2/2) ...
[2020-11-25 08:33:53,757 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 08:33:53,757 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@31736cbb and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 08:33:53, skipping insertion in model container
[2020-11-25 08:33:53,757 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 08:33:53,758 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 08:33:53,758 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 08:33:53,759 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 08:33:53,759 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "VIE_0x74639EfB889C1Fb44c8A3F64c681E549Bb077e4d_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:33:52" (1/3) ...
[2020-11-25 08:33:53,760 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@d89d95e and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 08:33:53, skipping insertion in model container
[2020-11-25 08:33:53,760 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 08:33:52" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 08:33:53,797 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 08:33:53 NWAContainer
[2020-11-25 08:33:53,797 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 08:33:53,797 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 08:33:53,797 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 08:33:53,798 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 08:33:53,799 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "VIE_0x74639EfB889C1Fb44c8A3F64c681E549Bb077e4d_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 08:33:53" (3/4) ...
[2020-11-25 08:33:53,799 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@eddaba0 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 08:33:53, skipping insertion in model container
[2020-11-25 08:33:53,800 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 08:33:53" (4/4) ...
[2020-11-25 08:33:53,803 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 08:33:53,808 INFO  L110   BuchiProductObserver]: Initial RCFG 2637 locations, 3705 edges
[2020-11-25 08:33:53,808 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 08:33:53,821 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 08:33:56,109 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 08:33:56,118 INFO  L110   BuchiProductObserver]: BuchiProgram size 6672 locations, 12271 edges
[2020-11-25 08:33:56,118 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 08:33:56 BoogieIcfgContainer
[2020-11-25 08:33:56,118 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 08:33:56,118 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 08:33:56,118 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 08:33:56,119 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 08:33:56,120 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 08:33:56" (1/1) ...
[2020-11-25 08:33:56,243 INFO  L313           BlockEncoder]: Initial Icfg 6672 locations, 12271 edges
[2020-11-25 08:33:56,243 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 08:33:56,244 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 08:33:56,244 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 08:33:56,244 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 08:33:56,258 INFO  L70    emoveInfeasibleEdges]: Removed 111 edges and 23 locations because of local infeasibility
[2020-11-25 08:33:56,268 INFO  L70        RemoveSinkStates]: Removed 56 edges and 29 locations by removing sink states
[2020-11-25 08:33:56,281 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 08:33:56,285 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 08:33:56,289 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 08:33:56,289 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 08:33:56,293 INFO  L313           BlockEncoder]: Encoded RCFG 6574 locations, 12036 edges
[2020-11-25 08:33:56,293 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 08:33:56 BasicIcfg
[2020-11-25 08:33:56,293 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 08:33:56,294 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 08:33:56,294 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 08:33:56,295 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 08:33:56,295 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 08:33:56,296 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "VIE_0x74639EfB889C1Fb44c8A3F64c681E549Bb077e4d_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:33:52" (1/6) ...
[2020-11-25 08:33:56,297 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@160d9d06 and model type VIE_0x74639EfB889C1Fb44c8A3F64c681E549Bb077e4d_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 08:33:56, skipping insertion in model container
[2020-11-25 08:33:56,297 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 08:33:56,297 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 08:33:52" (2/6) ...
[2020-11-25 08:33:56,297 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@160d9d06 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 08:33:56, skipping insertion in model container
[2020-11-25 08:33:56,297 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 08:33:56,297 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "VIE_0x74639EfB889C1Fb44c8A3F64c681E549Bb077e4d_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 08:33:53" (3/6) ...
[2020-11-25 08:33:56,297 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@160d9d06 and model type VIE_0x74639EfB889C1Fb44c8A3F64c681E549Bb077e4d_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 08:33:56, skipping insertion in model container
[2020-11-25 08:33:56,297 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 08:33:56,297 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 08:33:53" (4/6) ...
[2020-11-25 08:33:56,298 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@160d9d06 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 08:33:56, skipping insertion in model container
[2020-11-25 08:33:56,298 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 08:33:56,298 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 08:33:56" (5/6) ...
[2020-11-25 08:33:56,298 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@160d9d06 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 08:33:56, skipping insertion in model container
[2020-11-25 08:33:56,298 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 08:33:56,298 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 08:33:56" (6/6) ...
[2020-11-25 08:33:56,299 INFO  L404   chiAutomizerObserver]: Analyzing ICFG VIE_0x74639EfB889C1Fb44c8A3F64c681E549Bb077e4d_transfer-fail.bpl_BEv2
[2020-11-25 08:33:56,325 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 08:33:56,325 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 08:33:56,325 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 08:33:56,325 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 08:33:56,325 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 08:33:56,325 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 08:33:56,325 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 08:33:56,325 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 08:33:56,325 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 08:33:56,368 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6574 states.
[2020-11-25 08:33:56,436 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:33:56,436 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:33:56,436 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:33:56,446 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:33:56,446 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:33:56,446 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 08:33:56,446 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6574 states.
[2020-11-25 08:33:56,473 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:33:56,474 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:33:56,474 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:33:56,475 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:33:56,475 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_BasicToken0 := false;
[L2]                 call_transfer_BasicToken0 := false;
[L2]     CALL        call main();
[L7647]              assume null == 0;
[L7648]  CALL        call this := FreshRefGenerator__success();
[L2917]              havoc newRef;
[L2918]              assume Alloc[newRef] == false;
[L2919]              Alloc[newRef] := true;
[L2920]              assume newRef != null;
[L7648]  RET         call this := FreshRefGenerator__success();
[L7649]              assume now >= 0;
[L7650]              assume DType[this] == VIE;
[L7651]              assume msgvalue_MSG == 0;
[L7652]              gas := gas - 53000;
[L7653]  CALL        call VIE_VIE(this, msgsender_MSG, msgvalue_MSG);
[L1715]              havoc __exception;
[L1716]              revert := false;
[L1717]  COND FALSE  !(__exception)
[L1743]  CALL        call VIE_VIE__success(this, msgsender_MSG, msgvalue_MSG);
[L4171]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3304]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3289]              assume msgsender_MSG != null;
[L3290]              Balance[this] := 0;
[L3304]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  COND FALSE  !(revert)
[L4171]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]  COND TRUE   revert
[L1743]  RET         call VIE_VIE__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]              assume !revert && gas >= 0;
[L7653]  RET         call VIE_VIE(this, msgsender_MSG, msgvalue_MSG);
[L7654]              assume !revert && gas >= 0;

Loop:
[L7657]  CALL        call CorralChoice_VIE(this);
[L7445]              havoc msgsender_MSG;
[L7446]              havoc msgvalue_MSG;
[L7447]              havoc choice;
[L7448]              havoc __ret_0_owner;
[L7449]              havoc newOwner_s54;
[L7450]              havoc _spender_s202;
[L7451]              havoc _value_s202;
[L7452]              havoc __ret_0_lock;
[L7453]              havoc _spender_s214;
[L7454]              havoc __ret_0_locking;
[L7455]              havoc _spender_s246;
[L7456]              havoc _addedValue_s246;
[L7457]              havoc __ret_0_increaseLocking;
[L7458]              havoc _spender_s294;
[L7459]              havoc _subtractedValue_s294;
[L7460]              havoc __ret_0_decreaseLocking;
[L7461]              havoc __ret_0_totalSupply;
[L7462]              havoc _owner_s430;
[L7463]              havoc __ret_0_balanceOf;
[L7464]              havoc _to_s418;
[L7465]              havoc _value_s418;
[L7466]              havoc __ret_0_transfer;
[L7467]              havoc _value_s451;
[L7468]              havoc _owner_s710;
[L7469]              havoc _spender_s710;
[L7470]              havoc __ret_0_allowance;
[L7471]              havoc _from_s648;
[L7472]              havoc _to_s648;
[L7473]              havoc _value_s648;
[L7474]              havoc __ret_0_transferFrom;
[L7475]              havoc _spender_s694;
[L7476]              havoc _value_s694;
[L7477]              havoc __ret_0_approve;
[L7478]              havoc _spender_s751;
[L7479]              havoc _addedValue_s751;
[L7480]              havoc __ret_0_increaseApproval;
[L7481]              havoc _spender_s811;
[L7482]              havoc _subtractedValue_s811;
[L7483]              havoc __ret_0_decreaseApproval;
[L7484]              havoc _to_s854;
[L7485]              havoc _amount_s854;
[L7486]              havoc __ret_0_mint;
[L7487]              havoc __ret_0_name;
[L7488]              havoc __ret_0_symbol;
[L7489]              havoc __ret_0_decimals;
[L7490]              havoc __ret_0_INITIAL_SUPPLY;
[L7491]              havoc tmpNow;
[L7492]              havoc gas;
[L7493]              assume gas > 4000000 && gas <= 8000000;
[L7494]              tmpNow := now;
[L7495]              havoc now;
[L7496]              assume now > tmpNow;
[L7497]              assume msgsender_MSG != null;
[L7498]              assume DType[msgsender_MSG] != Ownable;
[L7499]              assume DType[msgsender_MSG] != SafeMath;
[L7500]              assume DType[msgsender_MSG] != LockableToken;
[L7501]              assume DType[msgsender_MSG] != ERC20Basic;
[L7502]              assume DType[msgsender_MSG] != BasicToken;
[L7503]              assume DType[msgsender_MSG] != BurnableToken;
[L7504]              assume DType[msgsender_MSG] != ERC20;
[L7505]              assume DType[msgsender_MSG] != StandardToken;
[L7506]              assume DType[msgsender_MSG] != MintableToken;
[L7507]              assume DType[msgsender_MSG] != VIE;
[L7508]              Alloc[msgsender_MSG] := true;
[L7509]  COND TRUE   choice == 20
[L7510]              gas := gas - 21000;
[L7511]  COND FALSE  !(gas >= 0)
[L7657]  RET         call CorralChoice_VIE(this);

[2020-11-25 08:33:56,494 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:33:56,494 INFO  L82        PathProgramCache]: Analyzing trace with hash 1047182130, now seen corresponding path program 1 times
[2020-11-25 08:33:56,500 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:33:56,529 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:33:56,570 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 08:33:56,572 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:33:56,572 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 08:33:56,927 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:33:56,936 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 08:33:56,936 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 08:33:56,937 INFO  L87              Difference]: Start difference. First operand 6574 states. Second operand 4 states.
[2020-11-25 08:33:57,415 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:33:57,415 INFO  L93              Difference]: Finished difference Result 3284 states and 3738 transitions.
[2020-11-25 08:33:57,415 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 08:33:57,417 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3284 states and 3738 transitions.
[2020-11-25 08:33:57,434 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:33:57,457 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3284 states to 3280 states and 3730 transitions.
[2020-11-25 08:33:57,458 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3
[2020-11-25 08:33:57,460 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 768
[2020-11-25 08:33:57,461 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3280 states and 3730 transitions.
[2020-11-25 08:33:57,468 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:33:57,468 INFO  L728         BuchiCegarLoop]: Abstraction has 3280 states and 3730 transitions.
[2020-11-25 08:33:57,483 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3280 states and 3730 transitions.
[2020-11-25 08:33:57,530 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3280 to 3280.
[2020-11-25 08:33:57,531 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3280 states.
[2020-11-25 08:33:57,535 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3280 states to 3280 states and 3730 transitions.
[2020-11-25 08:33:57,536 INFO  L751         BuchiCegarLoop]: Abstraction has 3280 states and 3730 transitions.
[2020-11-25 08:33:57,536 INFO  L631         BuchiCegarLoop]: Abstraction has 3280 states and 3730 transitions.
[2020-11-25 08:33:57,536 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 08:33:57,536 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3280 states and 3730 transitions.
[2020-11-25 08:33:57,543 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:33:57,543 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:33:57,543 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:33:57,545 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:33:57,545 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_BasicToken0 := false;
[L2]                 call_transfer_BasicToken0 := false;
[L2]     CALL        call main();
[L7647]              assume null == 0;
[L7648]  CALL        call this := FreshRefGenerator__success();
[L2917]              havoc newRef;
[L2918]              assume Alloc[newRef] == false;
[L2919]              Alloc[newRef] := true;
[L2920]              assume newRef != null;
[L7648]  RET         call this := FreshRefGenerator__success();
[L7649]              assume now >= 0;
[L7650]              assume DType[this] == VIE;
[L7651]              assume msgvalue_MSG == 0;
[L7652]              gas := gas - 53000;
[L7653]  CALL        call VIE_VIE(this, msgsender_MSG, msgvalue_MSG);
[L1715]              havoc __exception;
[L1716]              revert := false;
[L1717]  COND FALSE  !(__exception)
[L1743]  CALL        call VIE_VIE__success(this, msgsender_MSG, msgvalue_MSG);
[L4171]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3304]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3289]              assume msgsender_MSG != null;
[L3290]              Balance[this] := 0;
[L3304]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  COND FALSE  !(revert)
[L4171]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]  COND TRUE   revert
[L1743]  RET         call VIE_VIE__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]              assume !revert && gas >= 0;
[L7653]  RET         call VIE_VIE(this, msgsender_MSG, msgvalue_MSG);
[L7654]              assume !revert && gas >= 0;
[L7657]  CALL        call CorralChoice_VIE(this);
[L7445]              havoc msgsender_MSG;
[L7446]              havoc msgvalue_MSG;
[L7447]              havoc choice;
[L7448]              havoc __ret_0_owner;
[L7449]              havoc newOwner_s54;
[L7450]              havoc _spender_s202;
[L7451]              havoc _value_s202;
[L7452]              havoc __ret_0_lock;
[L7453]              havoc _spender_s214;
[L7454]              havoc __ret_0_locking;
[L7455]              havoc _spender_s246;
[L7456]              havoc _addedValue_s246;
[L7457]              havoc __ret_0_increaseLocking;
[L7458]              havoc _spender_s294;
[L7459]              havoc _subtractedValue_s294;
[L7460]              havoc __ret_0_decreaseLocking;
[L7461]              havoc __ret_0_totalSupply;
[L7462]              havoc _owner_s430;
[L7463]              havoc __ret_0_balanceOf;
[L7464]              havoc _to_s418;
[L7465]              havoc _value_s418;
[L7466]              havoc __ret_0_transfer;
[L7467]              havoc _value_s451;
[L7468]              havoc _owner_s710;
[L7469]              havoc _spender_s710;
[L7470]              havoc __ret_0_allowance;
[L7471]              havoc _from_s648;
[L7472]              havoc _to_s648;
[L7473]              havoc _value_s648;
[L7474]              havoc __ret_0_transferFrom;
[L7475]              havoc _spender_s694;
[L7476]              havoc _value_s694;
[L7477]              havoc __ret_0_approve;
[L7478]              havoc _spender_s751;
[L7479]              havoc _addedValue_s751;
[L7480]              havoc __ret_0_increaseApproval;
[L7481]              havoc _spender_s811;
[L7482]              havoc _subtractedValue_s811;
[L7483]              havoc __ret_0_decreaseApproval;
[L7484]              havoc _to_s854;
[L7485]              havoc _amount_s854;
[L7486]              havoc __ret_0_mint;
[L7487]              havoc __ret_0_name;
[L7488]              havoc __ret_0_symbol;
[L7489]              havoc __ret_0_decimals;
[L7490]              havoc __ret_0_INITIAL_SUPPLY;
[L7491]              havoc tmpNow;
[L7492]              havoc gas;
[L7493]              assume gas > 4000000 && gas <= 8000000;
[L7494]              tmpNow := now;
[L7495]              havoc now;
[L7496]              assume now > tmpNow;
[L7497]              assume msgsender_MSG != null;
[L7498]              assume DType[msgsender_MSG] != Ownable;
[L7499]              assume DType[msgsender_MSG] != SafeMath;
[L7500]              assume DType[msgsender_MSG] != LockableToken;
[L7501]              assume DType[msgsender_MSG] != ERC20Basic;
[L7502]              assume DType[msgsender_MSG] != BasicToken;
[L7503]              assume DType[msgsender_MSG] != BurnableToken;
[L7504]              assume DType[msgsender_MSG] != ERC20;
[L7505]              assume DType[msgsender_MSG] != StandardToken;
[L7506]              assume DType[msgsender_MSG] != MintableToken;
[L7507]              assume DType[msgsender_MSG] != VIE;
[L7508]              Alloc[msgsender_MSG] := true;
[L7509]  COND FALSE  !(choice == 20)
[L7515]  COND FALSE  !(choice == 19)
[L7521]  COND FALSE  !(choice == 18)
[L7528]  COND FALSE  !(choice == 17)
[L7534]  COND FALSE  !(choice == 16)
[L7541]  COND FALSE  !(choice == 15)
[L7548]  COND FALSE  !(choice == 14)
[L7554]  COND FALSE  !(choice == 13)
[L7560]  COND TRUE   choice == 12
[L7561]              gas := gas - 21000;
[L7562]  COND TRUE   gas >= 0
[L7563]              assume _value_s418 >= 0 && _value_s418 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7564]              assume msgvalue_MSG == 0;
[L7565]  CALL        call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s418, _value_s418);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s418 && (_value_s418 > balances_BasicToken[this][msgsender_MSG] || balances_BasicToken[this][_to_s418] + _value_s418 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s418 >= 0) && _value_s418 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s418] >= 0) && balances_BasicToken[this][_to_s418] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BasicToken0 := true;
[L2]                 call_transfer_BasicToken0 := false;
[L2]                 revert := revert_hold;
[L845]               havoc __exception;
[L846]               revert := false;
[L847]   COND FALSE  !(__exception)
[L873]   CALL        call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s418, _value_s418);
[L3431]              __var_4 := null;
[L3432]  COND TRUE   !(_to_s418 != null)
[L3433]              revert := true;
[L873]   RET         call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s418, _value_s418);
[L874]               assume !revert && gas >= 0;
[L7565]  RET         call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s418, _value_s418);
[L7657]  RET         call CorralChoice_VIE(this);

Loop:
[L7657]  CALL        call CorralChoice_VIE(this);
[L7445]              havoc msgsender_MSG;
[L7446]              havoc msgvalue_MSG;
[L7447]              havoc choice;
[L7448]              havoc __ret_0_owner;
[L7449]              havoc newOwner_s54;
[L7450]              havoc _spender_s202;
[L7451]              havoc _value_s202;
[L7452]              havoc __ret_0_lock;
[L7453]              havoc _spender_s214;
[L7454]              havoc __ret_0_locking;
[L7455]              havoc _spender_s246;
[L7456]              havoc _addedValue_s246;
[L7457]              havoc __ret_0_increaseLocking;
[L7458]              havoc _spender_s294;
[L7459]              havoc _subtractedValue_s294;
[L7460]              havoc __ret_0_decreaseLocking;
[L7461]              havoc __ret_0_totalSupply;
[L7462]              havoc _owner_s430;
[L7463]              havoc __ret_0_balanceOf;
[L7464]              havoc _to_s418;
[L7465]              havoc _value_s418;
[L7466]              havoc __ret_0_transfer;
[L7467]              havoc _value_s451;
[L7468]              havoc _owner_s710;
[L7469]              havoc _spender_s710;
[L7470]              havoc __ret_0_allowance;
[L7471]              havoc _from_s648;
[L7472]              havoc _to_s648;
[L7473]              havoc _value_s648;
[L7474]              havoc __ret_0_transferFrom;
[L7475]              havoc _spender_s694;
[L7476]              havoc _value_s694;
[L7477]              havoc __ret_0_approve;
[L7478]              havoc _spender_s751;
[L7479]              havoc _addedValue_s751;
[L7480]              havoc __ret_0_increaseApproval;
[L7481]              havoc _spender_s811;
[L7482]              havoc _subtractedValue_s811;
[L7483]              havoc __ret_0_decreaseApproval;
[L7484]              havoc _to_s854;
[L7485]              havoc _amount_s854;
[L7486]              havoc __ret_0_mint;
[L7487]              havoc __ret_0_name;
[L7488]              havoc __ret_0_symbol;
[L7489]              havoc __ret_0_decimals;
[L7490]              havoc __ret_0_INITIAL_SUPPLY;
[L7491]              havoc tmpNow;
[L7492]              havoc gas;
[L7493]              assume gas > 4000000 && gas <= 8000000;
[L7494]              tmpNow := now;
[L7495]              havoc now;
[L7496]              assume now > tmpNow;
[L7497]              assume msgsender_MSG != null;
[L7498]              assume DType[msgsender_MSG] != Ownable;
[L7499]              assume DType[msgsender_MSG] != SafeMath;
[L7500]              assume DType[msgsender_MSG] != LockableToken;
[L7501]              assume DType[msgsender_MSG] != ERC20Basic;
[L7502]              assume DType[msgsender_MSG] != BasicToken;
[L7503]              assume DType[msgsender_MSG] != BurnableToken;
[L7504]              assume DType[msgsender_MSG] != ERC20;
[L7505]              assume DType[msgsender_MSG] != StandardToken;
[L7506]              assume DType[msgsender_MSG] != MintableToken;
[L7507]              assume DType[msgsender_MSG] != VIE;
[L7508]              Alloc[msgsender_MSG] := true;
[L7509]  COND FALSE  !(choice == 20)
[L7515]  COND FALSE  !(choice == 19)
[L7521]  COND FALSE  !(choice == 18)
[L7528]  COND FALSE  !(choice == 17)
[L7534]  COND FALSE  !(choice == 16)
[L7541]  COND FALSE  !(choice == 15)
[L7548]  COND FALSE  !(choice == 14)
[L7554]  COND FALSE  !(choice == 13)
[L7560]  COND TRUE   choice == 12
[L7561]              gas := gas - 21000;
[L7562]  COND TRUE   gas >= 0
[L7563]              assume _value_s418 >= 0 && _value_s418 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7564]              assume msgvalue_MSG == 0;
[L7565]  CALL        call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s418, _value_s418);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s418 && (_value_s418 > balances_BasicToken[this][msgsender_MSG] || balances_BasicToken[this][_to_s418] + _value_s418 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s418 >= 0) && _value_s418 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s418] >= 0) && balances_BasicToken[this][_to_s418] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BasicToken0 := true;
[L2]                 call_transfer_BasicToken0 := false;
[L2]                 revert := revert_hold;
[L845]               havoc __exception;
[L846]               revert := false;
[L847]   COND FALSE  !(__exception)
[L873]   CALL        call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s418, _value_s418);
[L3431]              __var_4 := null;
[L3432]  COND TRUE   !(_to_s418 != null)
[L3433]              revert := true;
[L873]   RET         call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s418, _value_s418);
[L874]               assume !revert && gas >= 0;
[L7565]  RET         call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s418, _value_s418);
[L7657]  RET         call CorralChoice_VIE(this);

[2020-11-25 08:33:57,548 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:33:57,548 INFO  L82        PathProgramCache]: Analyzing trace with hash -657390247, now seen corresponding path program 1 times
[2020-11-25 08:33:57,549 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:33:57,557 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:33:57,577 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 08:33:57,577 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:33:57,577 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 08:33:57,578 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:33:57,579 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 08:33:57,579 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 08:33:57,579 INFO  L87              Difference]: Start difference. First operand 3280 states and 3730 transitions. cyclomatic complexity: 452 Second operand 4 states.
[2020-11-25 08:33:58,204 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:33:58,204 INFO  L93              Difference]: Finished difference Result 4024 states and 4460 transitions.
[2020-11-25 08:33:58,205 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 08:33:58,205 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4024 states and 4460 transitions.
[2020-11-25 08:33:58,219 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 08:33:58,239 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4024 states to 3892 states and 4312 transitions.
[2020-11-25 08:33:58,239 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 910
[2020-11-25 08:33:58,240 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 919
[2020-11-25 08:33:58,240 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3892 states and 4312 transitions.
[2020-11-25 08:33:58,246 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:33:58,246 INFO  L728         BuchiCegarLoop]: Abstraction has 3892 states and 4312 transitions.
[2020-11-25 08:33:58,250 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3892 states and 4312 transitions.
[2020-11-25 08:33:58,280 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3892 to 3480.
[2020-11-25 08:33:58,280 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3480 states.
[2020-11-25 08:33:58,284 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3480 states to 3480 states and 3799 transitions.
[2020-11-25 08:33:58,284 INFO  L751         BuchiCegarLoop]: Abstraction has 3480 states and 3799 transitions.
[2020-11-25 08:33:58,284 INFO  L631         BuchiCegarLoop]: Abstraction has 3480 states and 3799 transitions.
[2020-11-25 08:33:58,284 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 08:33:58,284 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3480 states and 3799 transitions.
[2020-11-25 08:33:58,291 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 08:33:58,291 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:33:58,291 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:33:58,297 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 14, 14, 14, 14, 14, 14, 14, 14, 14, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:33:58,297 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_BasicToken0 := false;
[L2]                 call_transfer_BasicToken0 := false;
[L2]     CALL        call main();
[L7647]              assume null == 0;
[L7648]  CALL        call this := FreshRefGenerator__success();
[L2917]              havoc newRef;
[L2918]              assume Alloc[newRef] == false;
[L2919]              Alloc[newRef] := true;
[L2920]              assume newRef != null;
[L7648]  RET         call this := FreshRefGenerator__success();
[L7649]              assume now >= 0;
[L7650]              assume DType[this] == VIE;
[L7651]              assume msgvalue_MSG == 0;
[L7652]              gas := gas - 53000;
[L7653]  CALL        call VIE_VIE(this, msgsender_MSG, msgvalue_MSG);
[L1715]              havoc __exception;
[L1716]              revert := false;
[L1717]  COND FALSE  !(__exception)
[L1743]  CALL        call VIE_VIE__success(this, msgsender_MSG, msgvalue_MSG);
[L4171]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3304]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3289]              assume msgsender_MSG != null;
[L3290]              Balance[this] := 0;
[L3304]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  COND FALSE  !(revert)
[L4171]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]  COND FALSE  !(revert)
[L4175]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3653]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3304]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3289]              assume msgsender_MSG != null;
[L3290]              Balance[this] := 0;
[L3304]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  COND FALSE  !(revert)
[L3653]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3654]  COND FALSE  !(revert)
[L3657]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3634]              assume msgsender_MSG != null;
[L3635]              Balance[this] := 0;
[L3657]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3658]  COND FALSE  !(revert)
[L4175]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4176]  COND FALSE  !(revert)
[L4179]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2953]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              assume msgsender_MSG != null;
[L2937]              Balance[this] := 0;
[L2938]              owner_Ownable[this] := null;
[L2940]              owner_Ownable[this] := msgsender_MSG;
[L2953]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  COND FALSE  !(revert)
[L4179]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4180]  COND FALSE  !(revert)
[L4183]  CALL        call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3131]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2953]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              assume msgsender_MSG != null;
[L2937]              Balance[this] := 0;
[L2938]              owner_Ownable[this] := null;
[L2940]              owner_Ownable[this] := msgsender_MSG;
[L2953]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  COND FALSE  !(revert)
[L3131]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3132]  COND FALSE  !(revert)
[L3135]  CALL        call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3110]              assume msgsender_MSG != null;
[L3111]              Balance[this] := 0;
[L3112]              locked_LockableToken[this] := zeroRefintArr();
[L3113]              sum_locked0[this] := 0;
[L3135]  RET         call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3136]  COND FALSE  !(revert)
[L4183]  RET         call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4184]  COND FALSE  !(revert)
[L4187]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3354]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3304]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3289]              assume msgsender_MSG != null;
[L3290]              Balance[this] := 0;
[L3304]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  COND FALSE  !(revert)
[L3354]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3355]  COND FALSE  !(revert)
[L3358]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2953]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              assume msgsender_MSG != null;
[L2937]              Balance[this] := 0;
[L2938]              owner_Ownable[this] := null;
[L2940]              owner_Ownable[this] := msgsender_MSG;
[L2953]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  COND FALSE  !(revert)
[L3358]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3359]  COND FALSE  !(revert)
[L3362]  CALL        call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3131]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2953]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              assume msgsender_MSG != null;
[L2937]              Balance[this] := 0;
[L2938]              owner_Ownable[this] := null;
[L2940]              owner_Ownable[this] := msgsender_MSG;
[L2953]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  COND FALSE  !(revert)
[L3131]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3132]  COND FALSE  !(revert)
[L3135]  CALL        call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3110]              assume msgsender_MSG != null;
[L3111]              Balance[this] := 0;
[L3112]              locked_LockableToken[this] := zeroRefintArr();
[L3113]              sum_locked0[this] := 0;
[L3135]  RET         call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3136]  COND FALSE  !(revert)
[L3362]  RET         call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3363]  COND FALSE  !(revert)
[L3366]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3324]              assume msgsender_MSG != null;
[L3325]              Balance[this] := 0;
[L3326]              balances_BasicToken[this] := zeroRefintArr();
[L3327]              sum_balances1[this] := 0;
[L3328]              totalSupply__BasicToken[this] := 0;
[L3366]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3367]  COND FALSE  !(revert)
[L4187]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4191]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3713]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3304]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3289]              assume msgsender_MSG != null;
[L3290]              Balance[this] := 0;
[L3304]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  COND FALSE  !(revert)
[L3713]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  COND FALSE  !(revert)
[L3717]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3653]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3304]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3289]              assume msgsender_MSG != null;
[L3290]              Balance[this] := 0;
[L3304]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  COND FALSE  !(revert)
[L3653]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3654]  COND FALSE  !(revert)
[L3657]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3634]              assume msgsender_MSG != null;
[L3635]              Balance[this] := 0;
[L3657]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3658]  COND FALSE  !(revert)
[L3717]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3718]  COND FALSE  !(revert)
[L3721]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2953]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              assume msgsender_MSG != null;
[L2937]              Balance[this] := 0;
[L2938]              owner_Ownable[this] := null;
[L2940]              owner_Ownable[this] := msgsender_MSG;
[L2953]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  COND FALSE  !(revert)
[L3721]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3722]  COND FALSE  !(revert)
[L3725]  CALL        call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3131]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2953]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              assume msgsender_MSG != null;
[L2937]              Balance[this] := 0;
[L2938]              owner_Ownable[this] := null;
[L2940]              owner_Ownable[this] := msgsender_MSG;
[L2953]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  COND FALSE  !(revert)
[L3131]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3132]  COND FALSE  !(revert)
[L3135]  CALL        call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3110]              assume msgsender_MSG != null;
[L3111]              Balance[this] := 0;
[L3112]              locked_LockableToken[this] := zeroRefintArr();
[L3113]              sum_locked0[this] := 0;
[L3135]  RET         call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3136]  COND FALSE  !(revert)
[L3725]  RET         call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3726]  COND FALSE  !(revert)
[L3729]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3354]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3304]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3289]              assume msgsender_MSG != null;
[L3290]              Balance[this] := 0;
[L3304]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  COND FALSE  !(revert)
[L3354]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3355]  COND FALSE  !(revert)
[L3358]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2953]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              assume msgsender_MSG != null;
[L2937]              Balance[this] := 0;
[L2938]              owner_Ownable[this] := null;
[L2940]              owner_Ownable[this] := msgsender_MSG;
[L2953]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  COND FALSE  !(revert)
[L3358]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3359]  COND FALSE  !(revert)
[L3362]  CALL        call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3131]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2953]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              assume msgsender_MSG != null;
[L2937]              Balance[this] := 0;
[L2938]              owner_Ownable[this] := null;
[L2940]              owner_Ownable[this] := msgsender_MSG;
[L2953]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  COND FALSE  !(revert)
[L3131]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3132]  COND FALSE  !(revert)
[L3135]  CALL        call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3110]              assume msgsender_MSG != null;
[L3111]              Balance[this] := 0;
[L3112]              locked_LockableToken[this] := zeroRefintArr();
[L3113]              sum_locked0[this] := 0;
[L3135]  RET         call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3136]  COND FALSE  !(revert)
[L3362]  RET         call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3363]  COND FALSE  !(revert)
[L3366]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3324]              assume msgsender_MSG != null;
[L3325]              Balance[this] := 0;
[L3326]              balances_BasicToken[this] := zeroRefintArr();
[L3327]              sum_balances1[this] := 0;
[L3328]              totalSupply__BasicToken[this] := 0;
[L3366]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3367]  COND FALSE  !(revert)
[L3729]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3730]  COND FALSE  !(revert)
[L3733]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3676]              assume msgsender_MSG != null;
[L3677]              Balance[this] := 0;
[L3678]              allowed_StandardToken[this] := zeroRefRefintArr();
[L3679]              sum_allowed2[this] := 0;
[L3733]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3734]  COND FALSE  !(revert)
[L4191]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4192]  COND FALSE  !(revert)
[L4195]  CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3521]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3304]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3289]              assume msgsender_MSG != null;
[L3290]              Balance[this] := 0;
[L3304]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  COND FALSE  !(revert)
[L3521]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3522]  COND FALSE  !(revert)
[L3525]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2953]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              assume msgsender_MSG != null;
[L2937]              Balance[this] := 0;
[L2938]              owner_Ownable[this] := null;
[L2940]              owner_Ownable[this] := msgsender_MSG;
[L2953]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  COND FALSE  !(revert)
[L3525]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3526]  COND FALSE  !(revert)
[L3529]  CALL        call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3131]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2953]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              assume msgsender_MSG != null;
[L2937]              Balance[this] := 0;
[L2938]              owner_Ownable[this] := null;
[L2940]              owner_Ownable[this] := msgsender_MSG;
[L2953]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  COND FALSE  !(revert)
[L3131]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3132]  COND FALSE  !(revert)
[L3135]  CALL        call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3110]              assume msgsender_MSG != null;
[L3111]              Balance[this] := 0;
[L3112]              locked_LockableToken[this] := zeroRefintArr();
[L3113]              sum_locked0[this] := 0;
[L3135]  RET         call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3136]  COND FALSE  !(revert)
[L3529]  RET         call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3530]  COND FALSE  !(revert)
[L3533]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3354]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3304]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3289]              assume msgsender_MSG != null;
[L3290]              Balance[this] := 0;
[L3304]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  COND FALSE  !(revert)
[L3354]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3355]  COND FALSE  !(revert)
[L3358]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2953]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              assume msgsender_MSG != null;
[L2937]              Balance[this] := 0;
[L2938]              owner_Ownable[this] := null;
[L2940]              owner_Ownable[this] := msgsender_MSG;
[L2953]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  COND FALSE  !(revert)
[L3358]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3359]  COND FALSE  !(revert)
[L3362]  CALL        call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3131]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2953]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              assume msgsender_MSG != null;
[L2937]              Balance[this] := 0;
[L2938]              owner_Ownable[this] := null;
[L2940]              owner_Ownable[this] := msgsender_MSG;
[L2953]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  COND FALSE  !(revert)
[L3131]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3132]  COND FALSE  !(revert)
[L3135]  CALL        call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3110]              assume msgsender_MSG != null;
[L3111]              Balance[this] := 0;
[L3112]              locked_LockableToken[this] := zeroRefintArr();
[L3113]              sum_locked0[this] := 0;
[L3135]  RET         call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3136]  COND FALSE  !(revert)
[L3362]  RET         call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3363]  COND FALSE  !(revert)
[L3366]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3324]              assume msgsender_MSG != null;
[L3325]              Balance[this] := 0;
[L3326]              balances_BasicToken[this] := zeroRefintArr();
[L3327]              sum_balances1[this] := 0;
[L3328]              totalSupply__BasicToken[this] := 0;
[L3366]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3367]  COND FALSE  !(revert)
[L3533]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3534]  COND FALSE  !(revert)
[L3537]  CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3490]              assume msgsender_MSG != null;
[L3491]              Balance[this] := 0;
[L3537]  RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3538]  COND FALSE  !(revert)
[L4195]  RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4196]  COND FALSE  !(revert)
[L4199]  CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4009]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3304]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3289]              assume msgsender_MSG != null;
[L3290]              Balance[this] := 0;
[L3304]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  COND FALSE  !(revert)
[L4009]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4010]  COND FALSE  !(revert)
[L4013]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3653]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3304]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3289]              assume msgsender_MSG != null;
[L3290]              Balance[this] := 0;
[L3304]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  COND FALSE  !(revert)
[L3653]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3654]  COND FALSE  !(revert)
[L3657]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3634]              assume msgsender_MSG != null;
[L3635]              Balance[this] := 0;
[L3657]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3658]  COND FALSE  !(revert)
[L4013]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4014]  COND FALSE  !(revert)
[L4017]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2953]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              assume msgsender_MSG != null;
[L2937]              Balance[this] := 0;
[L2938]              owner_Ownable[this] := null;
[L2940]              owner_Ownable[this] := msgsender_MSG;
[L2953]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  COND FALSE  !(revert)
[L4017]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4018]  COND FALSE  !(revert)
[L4021]  CALL        call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3131]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2953]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              assume msgsender_MSG != null;
[L2937]              Balance[this] := 0;
[L2938]              owner_Ownable[this] := null;
[L2940]              owner_Ownable[this] := msgsender_MSG;
[L2953]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  COND FALSE  !(revert)
[L3131]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3132]  COND FALSE  !(revert)
[L3135]  CALL        call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3110]              assume msgsender_MSG != null;
[L3111]              Balance[this] := 0;
[L3112]              locked_LockableToken[this] := zeroRefintArr();
[L3113]              sum_locked0[this] := 0;
[L3135]  RET         call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3136]  COND FALSE  !(revert)
[L4021]  RET         call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4022]  COND FALSE  !(revert)
[L4025]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3354]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3304]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3289]              assume msgsender_MSG != null;
[L3290]              Balance[this] := 0;
[L3304]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  COND FALSE  !(revert)
[L3354]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3355]  COND FALSE  !(revert)
[L3358]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2953]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              assume msgsender_MSG != null;
[L2937]              Balance[this] := 0;
[L2938]              owner_Ownable[this] := null;
[L2940]              owner_Ownable[this] := msgsender_MSG;
[L2953]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  COND FALSE  !(revert)
[L3358]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3359]  COND FALSE  !(revert)
[L3362]  CALL        call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3131]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2953]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              assume msgsender_MSG != null;
[L2937]              Balance[this] := 0;
[L2938]              owner_Ownable[this] := null;
[L2940]              owner_Ownable[this] := msgsender_MSG;
[L2953]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  COND FALSE  !(revert)
[L3131]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3132]  COND FALSE  !(revert)
[L3135]  CALL        call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3110]              assume msgsender_MSG != null;
[L3111]              Balance[this] := 0;
[L3112]              locked_LockableToken[this] := zeroRefintArr();
[L3113]              sum_locked0[this] := 0;
[L3135]  RET         call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3136]  COND FALSE  !(revert)
[L3362]  RET         call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3363]  COND FALSE  !(revert)
[L3366]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3324]              assume msgsender_MSG != null;
[L3325]              Balance[this] := 0;
[L3326]              balances_BasicToken[this] := zeroRefintArr();
[L3327]              sum_balances1[this] := 0;
[L3328]              totalSupply__BasicToken[this] := 0;
[L3366]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3367]  COND FALSE  !(revert)
[L4025]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4026]  COND FALSE  !(revert)
[L4029]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3713]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3304]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3289]              assume msgsender_MSG != null;
[L3290]              Balance[this] := 0;
[L3304]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  COND FALSE  !(revert)
[L3713]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  COND FALSE  !(revert)
[L3717]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3653]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3304]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3289]              assume msgsender_MSG != null;
[L3290]              Balance[this] := 0;
[L3304]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  COND FALSE  !(revert)
[L3653]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3654]  COND FALSE  !(revert)
[L3657]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3634]              assume msgsender_MSG != null;
[L3635]              Balance[this] := 0;
[L3657]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3658]  COND FALSE  !(revert)
[L3717]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3718]  COND FALSE  !(revert)
[L3721]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2953]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              assume msgsender_MSG != null;
[L2937]              Balance[this] := 0;
[L2938]              owner_Ownable[this] := null;
[L2940]              owner_Ownable[this] := msgsender_MSG;
[L2953]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  COND FALSE  !(revert)
[L3721]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3722]  COND FALSE  !(revert)
[L3725]  CALL        call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3131]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2953]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              assume msgsender_MSG != null;
[L2937]              Balance[this] := 0;
[L2938]              owner_Ownable[this] := null;
[L2940]              owner_Ownable[this] := msgsender_MSG;
[L2953]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  COND FALSE  !(revert)
[L3131]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3132]  COND FALSE  !(revert)
[L3135]  CALL        call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3110]              assume msgsender_MSG != null;
[L3111]              Balance[this] := 0;
[L3112]              locked_LockableToken[this] := zeroRefintArr();
[L3113]              sum_locked0[this] := 0;
[L3135]  RET         call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3136]  COND FALSE  !(revert)
[L3725]  RET         call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3726]  COND FALSE  !(revert)
[L3729]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3354]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3304]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3289]              assume msgsender_MSG != null;
[L3290]              Balance[this] := 0;
[L3304]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  COND FALSE  !(revert)
[L3354]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3355]  COND FALSE  !(revert)
[L3358]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2953]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              assume msgsender_MSG != null;
[L2937]              Balance[this] := 0;
[L2938]              owner_Ownable[this] := null;
[L2940]              owner_Ownable[this] := msgsender_MSG;
[L2953]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  COND FALSE  !(revert)
[L3358]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3359]  COND FALSE  !(revert)
[L3362]  CALL        call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3131]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2953]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              assume msgsender_MSG != null;
[L2937]              Balance[this] := 0;
[L2938]              owner_Ownable[this] := null;
[L2940]              owner_Ownable[this] := msgsender_MSG;
[L2953]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  COND FALSE  !(revert)
[L3131]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3132]  COND FALSE  !(revert)
[L3135]  CALL        call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3110]              assume msgsender_MSG != null;
[L3111]              Balance[this] := 0;
[L3112]              locked_LockableToken[this] := zeroRefintArr();
[L3113]              sum_locked0[this] := 0;
[L3135]  RET         call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3136]  COND FALSE  !(revert)
[L3362]  RET         call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3363]  COND FALSE  !(revert)
[L3366]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3324]              assume msgsender_MSG != null;
[L3325]              Balance[this] := 0;
[L3326]              balances_BasicToken[this] := zeroRefintArr();
[L3327]              sum_balances1[this] := 0;
[L3328]              totalSupply__BasicToken[this] := 0;
[L3366]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3367]  COND FALSE  !(revert)
[L3729]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3730]  COND FALSE  !(revert)
[L3733]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3676]              assume msgsender_MSG != null;
[L3677]              Balance[this] := 0;
[L3678]              allowed_StandardToken[this] := zeroRefRefintArr();
[L3679]              sum_allowed2[this] := 0;
[L3733]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3734]  COND FALSE  !(revert)
[L4029]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4030]  COND FALSE  !(revert)
[L4033]  CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3970]              assume msgsender_MSG != null;
[L3971]              Balance[this] := 0;
[L4033]  RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4034]  COND FALSE  !(revert)
[L4199]  RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4200]  COND FALSE  !(revert)
[L4203]  CALL        call VIE_VIE_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4111]              assume msgsender_MSG != null;
[L4112]              Balance[this] := 0;
[L4113]              name_VIE[this] := -1016296818;
[L4114]              symbol_VIE[this] := 455661269;
[L4115]              decimals_VIE[this] := 18;
[L4116]              INITIAL_SUPPLY_VIE[this] := 1899000000000000000000000000;
[L4117]              __var_19 := ConstantToRef(-385189319374310582173179693124046919983126611732);
[L4118]              holder_VIE[this] := ConstantToRef(-385189319374310582173179693124046919983126611732);
[L4120]              totalSupply__BasicToken[this] := INITIAL_SUPPLY_VIE[this];
[L4121]              sum_balances1[this] := sum_balances1[this] - balances_BasicToken[this][holder_VIE[this]];
[L4122]              balances_BasicToken[this][holder_VIE[this]] := INITIAL_SUPPLY_VIE[this];
[L4123]              sum_balances1[this] := sum_balances1[this] + balances_BasicToken[this][holder_VIE[this]];
[L4124]              assert { :EventEmitted "Transfer_VIE" } true;
[L4203]  RET         call VIE_VIE_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4204]  COND FALSE  !(revert)
[L1743]  RET         call VIE_VIE__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]              assume !revert && gas >= 0;
[L7653]  RET         call VIE_VIE(this, msgsender_MSG, msgvalue_MSG);
[L7654]              assume !revert && gas >= 0;
[L7657]  CALL        call CorralChoice_VIE(this);
[L7445]              havoc msgsender_MSG;
[L7446]              havoc msgvalue_MSG;
[L7447]              havoc choice;
[L7448]              havoc __ret_0_owner;
[L7449]              havoc newOwner_s54;
[L7450]              havoc _spender_s202;
[L7451]              havoc _value_s202;
[L7452]              havoc __ret_0_lock;
[L7453]              havoc _spender_s214;
[L7454]              havoc __ret_0_locking;
[L7455]              havoc _spender_s246;
[L7456]              havoc _addedValue_s246;
[L7457]              havoc __ret_0_increaseLocking;
[L7458]              havoc _spender_s294;
[L7459]              havoc _subtractedValue_s294;
[L7460]              havoc __ret_0_decreaseLocking;
[L7461]              havoc __ret_0_totalSupply;
[L7462]              havoc _owner_s430;
[L7463]              havoc __ret_0_balanceOf;
[L7464]              havoc _to_s418;
[L7465]              havoc _value_s418;
[L7466]              havoc __ret_0_transfer;
[L7467]              havoc _value_s451;
[L7468]              havoc _owner_s710;
[L7469]              havoc _spender_s710;
[L7470]              havoc __ret_0_allowance;
[L7471]              havoc _from_s648;
[L7472]              havoc _to_s648;
[L7473]              havoc _value_s648;
[L7474]              havoc __ret_0_transferFrom;
[L7475]              havoc _spender_s694;
[L7476]              havoc _value_s694;
[L7477]              havoc __ret_0_approve;
[L7478]              havoc _spender_s751;
[L7479]              havoc _addedValue_s751;
[L7480]              havoc __ret_0_increaseApproval;
[L7481]              havoc _spender_s811;
[L7482]              havoc _subtractedValue_s811;
[L7483]              havoc __ret_0_decreaseApproval;
[L7484]              havoc _to_s854;
[L7485]              havoc _amount_s854;
[L7486]              havoc __ret_0_mint;
[L7487]              havoc __ret_0_name;
[L7488]              havoc __ret_0_symbol;
[L7489]              havoc __ret_0_decimals;
[L7490]              havoc __ret_0_INITIAL_SUPPLY;
[L7491]              havoc tmpNow;
[L7492]              havoc gas;
[L7493]              assume gas > 4000000 && gas <= 8000000;
[L7494]              tmpNow := now;
[L7495]              havoc now;
[L7496]              assume now > tmpNow;
[L7497]              assume msgsender_MSG != null;
[L7498]              assume DType[msgsender_MSG] != Ownable;
[L7499]              assume DType[msgsender_MSG] != SafeMath;
[L7500]              assume DType[msgsender_MSG] != LockableToken;
[L7501]              assume DType[msgsender_MSG] != ERC20Basic;
[L7502]              assume DType[msgsender_MSG] != BasicToken;
[L7503]              assume DType[msgsender_MSG] != BurnableToken;
[L7504]              assume DType[msgsender_MSG] != ERC20;
[L7505]              assume DType[msgsender_MSG] != StandardToken;
[L7506]              assume DType[msgsender_MSG] != MintableToken;
[L7507]              assume DType[msgsender_MSG] != VIE;
[L7508]              Alloc[msgsender_MSG] := true;
[L7509]  COND FALSE  !(choice == 20)
[L7515]  COND FALSE  !(choice == 19)
[L7521]  COND FALSE  !(choice == 18)
[L7528]  COND FALSE  !(choice == 17)
[L7534]  COND FALSE  !(choice == 16)
[L7541]  COND FALSE  !(choice == 15)
[L7548]  COND FALSE  !(choice == 14)
[L7554]  COND FALSE  !(choice == 13)
[L7560]  COND TRUE   choice == 12
[L7561]              gas := gas - 21000;
[L7562]  COND TRUE   gas >= 0
[L7563]              assume _value_s418 >= 0 && _value_s418 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7564]              assume msgvalue_MSG == 0;
[L7565]  CALL        call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s418, _value_s418);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s418 && (_value_s418 > balances_BasicToken[this][msgsender_MSG] || balances_BasicToken[this][_to_s418] + _value_s418 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s418 >= 0) && _value_s418 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s418] >= 0) && balances_BasicToken[this][_to_s418] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BasicToken0 := true;
[L2]                 call_transfer_BasicToken0 := false;
[L2]                 revert := revert_hold;
[L845]               havoc __exception;
[L846]               revert := false;
[L847]   COND FALSE  !(__exception)
[L873]   CALL        call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s418, _value_s418);
[L3431]              __var_4 := null;
[L3432]  COND FALSE  !(!(_to_s418 != null))
[L3436]  COND FALSE  !(!(_value_s418 <= balances_BasicToken[this][msgsender_MSG]))
[L3440]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s418);
[L3077]              assert b_s122 <= a_s122;
[L3078]              __ret_0_ := (a_s122 - b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3440]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s418);
[L3441]  COND FALSE  !(revert)
[L3444]  COND FALSE  !(!(locked_LockableToken[this][msgsender_MSG] <= __var_5))
[L3448]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s418);
[L3077]              assert b_s122 <= a_s122;
[L3078]              __ret_0_ := (a_s122 - b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3448]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s418);
[L3449]  COND FALSE  !(revert)
[L3452]              sum_balances1[this] := sum_balances1[this] - balances_BasicToken[this][msgsender_MSG];
[L3453]              balances_BasicToken[this][msgsender_MSG] := __var_6;
[L3454]              sum_balances1[this] := sum_balances1[this] + balances_BasicToken[this][msgsender_MSG];
[L3455]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s418], _value_s418);
[L3091]              c_s146 := (a_s146 + b_s146) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3092]              assert c_s146 >= a_s146;
[L3093]              c_s146 := c_s146;
[L3455]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s418], _value_s418);
[L3456]  COND FALSE  !(revert)
[L3459]              sum_balances1[this] := sum_balances1[this] - balances_BasicToken[this][_to_s418];
[L3460]              balances_BasicToken[this][_to_s418] := __var_7;
[L3461]              sum_balances1[this] := sum_balances1[this] + balances_BasicToken[this][_to_s418];
[L3462]              assert { :EventEmitted "Transfer_BasicToken" } true;
[L3463]              __ret_0_ := true;
[L873]   RET         call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s418, _value_s418);
[L874]               assume !revert && gas >= 0;
[L7565]  RET         call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s418, _value_s418);
[L7657]  RET         call CorralChoice_VIE(this);

Loop:
[L7657]  CALL        call CorralChoice_VIE(this);
[L7445]              havoc msgsender_MSG;
[L7446]              havoc msgvalue_MSG;
[L7447]              havoc choice;
[L7448]              havoc __ret_0_owner;
[L7449]              havoc newOwner_s54;
[L7450]              havoc _spender_s202;
[L7451]              havoc _value_s202;
[L7452]              havoc __ret_0_lock;
[L7453]              havoc _spender_s214;
[L7454]              havoc __ret_0_locking;
[L7455]              havoc _spender_s246;
[L7456]              havoc _addedValue_s246;
[L7457]              havoc __ret_0_increaseLocking;
[L7458]              havoc _spender_s294;
[L7459]              havoc _subtractedValue_s294;
[L7460]              havoc __ret_0_decreaseLocking;
[L7461]              havoc __ret_0_totalSupply;
[L7462]              havoc _owner_s430;
[L7463]              havoc __ret_0_balanceOf;
[L7464]              havoc _to_s418;
[L7465]              havoc _value_s418;
[L7466]              havoc __ret_0_transfer;
[L7467]              havoc _value_s451;
[L7468]              havoc _owner_s710;
[L7469]              havoc _spender_s710;
[L7470]              havoc __ret_0_allowance;
[L7471]              havoc _from_s648;
[L7472]              havoc _to_s648;
[L7473]              havoc _value_s648;
[L7474]              havoc __ret_0_transferFrom;
[L7475]              havoc _spender_s694;
[L7476]              havoc _value_s694;
[L7477]              havoc __ret_0_approve;
[L7478]              havoc _spender_s751;
[L7479]              havoc _addedValue_s751;
[L7480]              havoc __ret_0_increaseApproval;
[L7481]              havoc _spender_s811;
[L7482]              havoc _subtractedValue_s811;
[L7483]              havoc __ret_0_decreaseApproval;
[L7484]              havoc _to_s854;
[L7485]              havoc _amount_s854;
[L7486]              havoc __ret_0_mint;
[L7487]              havoc __ret_0_name;
[L7488]              havoc __ret_0_symbol;
[L7489]              havoc __ret_0_decimals;
[L7490]              havoc __ret_0_INITIAL_SUPPLY;
[L7491]              havoc tmpNow;
[L7492]              havoc gas;
[L7493]              assume gas > 4000000 && gas <= 8000000;
[L7494]              tmpNow := now;
[L7495]              havoc now;
[L7496]              assume now > tmpNow;
[L7497]              assume msgsender_MSG != null;
[L7498]              assume DType[msgsender_MSG] != Ownable;
[L7499]              assume DType[msgsender_MSG] != SafeMath;
[L7500]              assume DType[msgsender_MSG] != LockableToken;
[L7501]              assume DType[msgsender_MSG] != ERC20Basic;
[L7502]              assume DType[msgsender_MSG] != BasicToken;
[L7503]              assume DType[msgsender_MSG] != BurnableToken;
[L7504]              assume DType[msgsender_MSG] != ERC20;
[L7505]              assume DType[msgsender_MSG] != StandardToken;
[L7506]              assume DType[msgsender_MSG] != MintableToken;
[L7507]              assume DType[msgsender_MSG] != VIE;
[L7508]              Alloc[msgsender_MSG] := true;
[L7509]  COND FALSE  !(choice == 20)
[L7515]  COND FALSE  !(choice == 19)
[L7521]  COND FALSE  !(choice == 18)
[L7528]  COND FALSE  !(choice == 17)
[L7534]  COND FALSE  !(choice == 16)
[L7541]  COND FALSE  !(choice == 15)
[L7548]  COND FALSE  !(choice == 14)
[L7554]  COND FALSE  !(choice == 13)
[L7560]  COND TRUE   choice == 12
[L7561]              gas := gas - 21000;
[L7562]  COND TRUE   gas >= 0
[L7563]              assume _value_s418 >= 0 && _value_s418 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7564]              assume msgvalue_MSG == 0;
[L7565]  CALL        call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s418, _value_s418);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s418 && (_value_s418 > balances_BasicToken[this][msgsender_MSG] || balances_BasicToken[this][_to_s418] + _value_s418 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s418 >= 0) && _value_s418 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s418] >= 0) && balances_BasicToken[this][_to_s418] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BasicToken0 := true;
[L2]                 call_transfer_BasicToken0 := false;
[L2]                 revert := revert_hold;
[L845]               havoc __exception;
[L846]               revert := false;
[L847]   COND FALSE  !(__exception)
[L873]   CALL        call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s418, _value_s418);
[L3431]              __var_4 := null;
[L3432]  COND FALSE  !(!(_to_s418 != null))
[L3436]  COND FALSE  !(!(_value_s418 <= balances_BasicToken[this][msgsender_MSG]))
[L3440]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s418);
[L3077]              assert b_s122 <= a_s122;
[L3078]              __ret_0_ := (a_s122 - b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3440]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s418);
[L3441]  COND FALSE  !(revert)
[L3444]  COND FALSE  !(!(locked_LockableToken[this][msgsender_MSG] <= __var_5))
[L3448]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s418);
[L3077]              assert b_s122 <= a_s122;
[L3078]              __ret_0_ := (a_s122 - b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3448]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s418);
[L3449]  COND FALSE  !(revert)
[L3452]              sum_balances1[this] := sum_balances1[this] - balances_BasicToken[this][msgsender_MSG];
[L3453]              balances_BasicToken[this][msgsender_MSG] := __var_6;
[L3454]              sum_balances1[this] := sum_balances1[this] + balances_BasicToken[this][msgsender_MSG];
[L3455]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s418], _value_s418);
[L3091]              c_s146 := (a_s146 + b_s146) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3092]              assert c_s146 >= a_s146;
[L3093]              c_s146 := c_s146;
[L3455]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s418], _value_s418);
[L3456]  COND FALSE  !(revert)
[L3459]              sum_balances1[this] := sum_balances1[this] - balances_BasicToken[this][_to_s418];
[L3460]              balances_BasicToken[this][_to_s418] := __var_7;
[L3461]              sum_balances1[this] := sum_balances1[this] + balances_BasicToken[this][_to_s418];
[L3462]              assert { :EventEmitted "Transfer_BasicToken" } true;
[L3463]              __ret_0_ := true;
[L873]   RET         call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s418, _value_s418);
[L874]               assume !revert && gas >= 0;
[L7565]  RET         call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s418, _value_s418);
[L7657]  RET         call CorralChoice_VIE(this);

[2020-11-25 08:33:58,311 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:33:58,311 INFO  L82        PathProgramCache]: Analyzing trace with hash -1116409111, now seen corresponding path program 1 times
[2020-11-25 08:33:58,312 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:33:58,358 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:33:59,076 INFO  L134       CoverageAnalysis]: Checked inductivity of 4280 backedges. 114 proven. 3 refuted. 0 times theorem prover too weak. 4163 trivial. 0 not checked.
[2020-11-25 08:33:59,077 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 08:33:59,077 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [23] total 23
[2020-11-25 08:33:59,078 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:33:59,078 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 24 interpolants.
[2020-11-25 08:33:59,078 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=59, Invalid=493, Unknown=0, NotChecked=0, Total=552
[2020-11-25 08:33:59,078 INFO  L87              Difference]: Start difference. First operand 3480 states and 3799 transitions. cyclomatic complexity: 321 Second operand 24 states.
[2020-11-25 08:34:03,155 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:34:03,156 INFO  L93              Difference]: Finished difference Result 3633 states and 3974 transitions.
[2020-11-25 08:34:03,156 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 28 states. 
[2020-11-25 08:34:03,156 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3633 states and 3974 transitions.
[2020-11-25 08:34:03,163 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 08:34:03,174 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3633 states to 3633 states and 3974 transitions.
[2020-11-25 08:34:03,174 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 892
[2020-11-25 08:34:03,175 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 892
[2020-11-25 08:34:03,175 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3633 states and 3974 transitions.
[2020-11-25 08:34:03,178 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:34:03,178 INFO  L728         BuchiCegarLoop]: Abstraction has 3633 states and 3974 transitions.
[2020-11-25 08:34:03,182 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3633 states and 3974 transitions.
[2020-11-25 08:34:03,206 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3633 to 3386.
[2020-11-25 08:34:03,206 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3386 states.
[2020-11-25 08:34:03,209 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3386 states to 3386 states and 3670 transitions.
[2020-11-25 08:34:03,209 INFO  L751         BuchiCegarLoop]: Abstraction has 3386 states and 3670 transitions.
[2020-11-25 08:34:03,209 INFO  L631         BuchiCegarLoop]: Abstraction has 3386 states and 3670 transitions.
[2020-11-25 08:34:03,209 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 08:34:03,209 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3386 states and 3670 transitions.
[2020-11-25 08:34:03,213 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:34:03,213 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:34:03,213 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:34:03,217 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 14, 14, 14, 14, 14, 14, 14, 14, 14, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:34:03,217 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_BasicToken0 := false;
[L2]                 call_transfer_BasicToken0 := false;
[L2]     CALL        call main();
[L7647]              assume null == 0;
[L7648]  CALL        call this := FreshRefGenerator__success();
[L2917]              havoc newRef;
[L2918]              assume Alloc[newRef] == false;
[L2919]              Alloc[newRef] := true;
[L2920]              assume newRef != null;
[L7648]  RET         call this := FreshRefGenerator__success();
[L7649]              assume now >= 0;
[L7650]              assume DType[this] == VIE;
[L7651]              assume msgvalue_MSG == 0;
[L7652]              gas := gas - 53000;
[L7653]  CALL        call VIE_VIE(this, msgsender_MSG, msgvalue_MSG);
[L1715]              havoc __exception;
[L1716]              revert := false;
[L1717]  COND TRUE   __exception
[L1718]              __tmp__Balance := Balance;
[L1719]              __tmp__DType := DType;
[L1720]              __tmp__Alloc := Alloc;
[L1721]              __tmp__balance_ADDR := balance_ADDR;
[L1722]              __tmp__M_Ref_int := M_Ref_int;
[L1723]              __tmp__sum_locked0 := sum_locked0;
[L1724]              __tmp__sum_balances1 := sum_balances1;
[L1725]              __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L1726]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1727]              __tmp__sum_allowed2 := sum_allowed2;
[L1728]              __tmp__Length := Length;
[L1729]              __tmp__now := now;
[L1730]              __tmp__owner_Ownable := owner_Ownable;
[L1731]              __tmp__locked_LockableToken := locked_LockableToken;
[L1732]              __tmp__balances_BasicToken := balances_BasicToken;
[L1733]              __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L1734]              __tmp__allowed_StandardToken := allowed_StandardToken;
[L1735]              __tmp__name_VIE := name_VIE;
[L1736]              __tmp__symbol_VIE := symbol_VIE;
[L1737]              __tmp__decimals_VIE := decimals_VIE;
[L1738]              __tmp__INITIAL_SUPPLY_VIE := INITIAL_SUPPLY_VIE;
[L1739]              __tmp__holder_VIE := holder_VIE;
[L1740]  CALL        call VIE_VIE__fail(this, msgsender_MSG, msgvalue_MSG);
[L4130]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3296]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3281]              assume msgsender_MSG != null;
[L3282]              __tmp__Balance[this] := 0;
[L3296]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3297]  COND FALSE  !(revert)
[L4130]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L4131]  COND FALSE  !(revert)
[L4134]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3641]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3296]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3281]              assume msgsender_MSG != null;
[L3282]              __tmp__Balance[this] := 0;
[L3296]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3297]  COND FALSE  !(revert)
[L3641]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3642]  COND FALSE  !(revert)
[L3645]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3626]              assume msgsender_MSG != null;
[L3627]              __tmp__Balance[this] := 0;
[L3645]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3646]  COND FALSE  !(revert)
[L4134]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4135]  COND FALSE  !(revert)
[L4138]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L2945]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2926]              assume msgsender_MSG != null;
[L2927]              __tmp__Balance[this] := 0;
[L2928]              __tmp__owner_Ownable[this] := null;
[L2930]              __tmp__owner_Ownable[this] := msgsender_MSG;
[L2945]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2946]  COND FALSE  !(revert)
[L4138]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4139]  COND FALSE  !(revert)
[L4142]  CALL        call LockableToken_LockableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3119]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L2945]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2926]              assume msgsender_MSG != null;
[L2927]              __tmp__Balance[this] := 0;
[L2928]              __tmp__owner_Ownable[this] := null;
[L2930]              __tmp__owner_Ownable[this] := msgsender_MSG;
[L2945]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2946]  COND FALSE  !(revert)
[L3119]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3120]  COND FALSE  !(revert)
[L3123]  CALL        call LockableToken_LockableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3100]              assume msgsender_MSG != null;
[L3101]              __tmp__Balance[this] := 0;
[L3102]              __tmp__locked_LockableToken[this] := zeroRefintArr();
[L3103]              __tmp__sum_locked0[this] := 0;
[L3123]  RET         call LockableToken_LockableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3124]  COND FALSE  !(revert)
[L4142]  RET         call LockableToken_LockableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L4143]  COND FALSE  !(revert)
[L4146]  CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3334]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3296]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3281]              assume msgsender_MSG != null;
[L3282]              __tmp__Balance[this] := 0;
[L3296]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3297]  COND FALSE  !(revert)
[L3334]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3335]  COND FALSE  !(revert)
[L3338]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L2945]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2926]              assume msgsender_MSG != null;
[L2927]              __tmp__Balance[this] := 0;
[L2928]              __tmp__owner_Ownable[this] := null;
[L2930]              __tmp__owner_Ownable[this] := msgsender_MSG;
[L2945]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2946]  COND FALSE  !(revert)
[L3338]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3339]  COND FALSE  !(revert)
[L3342]  CALL        call LockableToken_LockableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3119]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L2945]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2926]              assume msgsender_MSG != null;
[L2927]              __tmp__Balance[this] := 0;
[L2928]              __tmp__owner_Ownable[this] := null;
[L2930]              __tmp__owner_Ownable[this] := msgsender_MSG;
[L2945]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2946]  COND FALSE  !(revert)
[L3119]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3120]  COND FALSE  !(revert)
[L3123]  CALL        call LockableToken_LockableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3100]              assume msgsender_MSG != null;
[L3101]              __tmp__Balance[this] := 0;
[L3102]              __tmp__locked_LockableToken[this] := zeroRefintArr();
[L3103]              __tmp__sum_locked0[this] := 0;
[L3123]  RET         call LockableToken_LockableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3124]  COND FALSE  !(revert)
[L3342]  RET         call LockableToken_LockableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3343]  COND FALSE  !(revert)
[L3346]  CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3313]              assume msgsender_MSG != null;
[L3314]              __tmp__Balance[this] := 0;
[L3315]              __tmp__balances_BasicToken[this] := zeroRefintArr();
[L3316]              __tmp__sum_balances1[this] := 0;
[L3317]              __tmp__totalSupply__BasicToken[this] := 0;
[L3346]  RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3347]  COND FALSE  !(revert)
[L4146]  RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L4147]  COND FALSE  !(revert)
[L4150]  CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3685]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3296]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3281]              assume msgsender_MSG != null;
[L3282]              __tmp__Balance[this] := 0;
[L3296]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3297]  COND FALSE  !(revert)
[L3685]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3686]  COND FALSE  !(revert)
[L3689]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3641]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3296]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3281]              assume msgsender_MSG != null;
[L3282]              __tmp__Balance[this] := 0;
[L3296]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3297]  COND FALSE  !(revert)
[L3641]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3642]  COND FALSE  !(revert)
[L3645]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3626]              assume msgsender_MSG != null;
[L3627]              __tmp__Balance[this] := 0;
[L3645]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3646]  COND FALSE  !(revert)
[L3689]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3690]  COND FALSE  !(revert)
[L3693]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L2945]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2926]              assume msgsender_MSG != null;
[L2927]              __tmp__Balance[this] := 0;
[L2928]              __tmp__owner_Ownable[this] := null;
[L2930]              __tmp__owner_Ownable[this] := msgsender_MSG;
[L2945]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2946]  COND FALSE  !(revert)
[L3693]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3694]  COND FALSE  !(revert)
[L3697]  CALL        call LockableToken_LockableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3119]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L2945]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2926]              assume msgsender_MSG != null;
[L2927]              __tmp__Balance[this] := 0;
[L2928]              __tmp__owner_Ownable[this] := null;
[L2930]              __tmp__owner_Ownable[this] := msgsender_MSG;
[L2945]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2946]  COND FALSE  !(revert)
[L3119]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3120]  COND FALSE  !(revert)
[L3123]  CALL        call LockableToken_LockableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3100]              assume msgsender_MSG != null;
[L3101]              __tmp__Balance[this] := 0;
[L3102]              __tmp__locked_LockableToken[this] := zeroRefintArr();
[L3103]              __tmp__sum_locked0[this] := 0;
[L3123]  RET         call LockableToken_LockableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3124]  COND FALSE  !(revert)
[L3697]  RET         call LockableToken_LockableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3698]  COND FALSE  !(revert)
[L3701]  CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3334]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3296]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3281]              assume msgsender_MSG != null;
[L3282]              __tmp__Balance[this] := 0;
[L3296]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3297]  COND FALSE  !(revert)
[L3334]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3335]  COND FALSE  !(revert)
[L3338]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L2945]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2926]              assume msgsender_MSG != null;
[L2927]              __tmp__Balance[this] := 0;
[L2928]              __tmp__owner_Ownable[this] := null;
[L2930]              __tmp__owner_Ownable[this] := msgsender_MSG;
[L2945]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2946]  COND FALSE  !(revert)
[L3338]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3339]  COND FALSE  !(revert)
[L3342]  CALL        call LockableToken_LockableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3119]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L2945]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2926]              assume msgsender_MSG != null;
[L2927]              __tmp__Balance[this] := 0;
[L2928]              __tmp__owner_Ownable[this] := null;
[L2930]              __tmp__owner_Ownable[this] := msgsender_MSG;
[L2945]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2946]  COND FALSE  !(revert)
[L3119]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3120]  COND FALSE  !(revert)
[L3123]  CALL        call LockableToken_LockableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3100]              assume msgsender_MSG != null;
[L3101]              __tmp__Balance[this] := 0;
[L3102]              __tmp__locked_LockableToken[this] := zeroRefintArr();
[L3103]              __tmp__sum_locked0[this] := 0;
[L3123]  RET         call LockableToken_LockableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3124]  COND FALSE  !(revert)
[L3342]  RET         call LockableToken_LockableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3343]  COND FALSE  !(revert)
[L3346]  CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3313]              assume msgsender_MSG != null;
[L3314]              __tmp__Balance[this] := 0;
[L3315]              __tmp__balances_BasicToken[this] := zeroRefintArr();
[L3316]              __tmp__sum_balances1[this] := 0;
[L3317]              __tmp__totalSupply__BasicToken[this] := 0;
[L3346]  RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3347]  COND FALSE  !(revert)
[L3701]  RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3702]  COND FALSE  !(revert)
[L3705]  CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3666]              assume msgsender_MSG != null;
[L3667]              __tmp__Balance[this] := 0;
[L3668]              __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L3669]              __tmp__sum_allowed2[this] := 0;
[L3705]  RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3706]  COND FALSE  !(revert)
[L4150]  RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L4151]  COND FALSE  !(revert)
[L4154]  CALL        call BurnableToken_BurnableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3497]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3296]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3281]              assume msgsender_MSG != null;
[L3282]              __tmp__Balance[this] := 0;
[L3296]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3297]  COND FALSE  !(revert)
[L3497]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3498]  COND FALSE  !(revert)
[L3501]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L2945]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2926]              assume msgsender_MSG != null;
[L2927]              __tmp__Balance[this] := 0;
[L2928]              __tmp__owner_Ownable[this] := null;
[L2930]              __tmp__owner_Ownable[this] := msgsender_MSG;
[L2945]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2946]  COND FALSE  !(revert)
[L3501]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3502]  COND FALSE  !(revert)
[L3505]  CALL        call LockableToken_LockableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3119]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L2945]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2926]              assume msgsender_MSG != null;
[L2927]              __tmp__Balance[this] := 0;
[L2928]              __tmp__owner_Ownable[this] := null;
[L2930]              __tmp__owner_Ownable[this] := msgsender_MSG;
[L2945]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2946]  COND FALSE  !(revert)
[L3119]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3120]  COND FALSE  !(revert)
[L3123]  CALL        call LockableToken_LockableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3100]              assume msgsender_MSG != null;
[L3101]              __tmp__Balance[this] := 0;
[L3102]              __tmp__locked_LockableToken[this] := zeroRefintArr();
[L3103]              __tmp__sum_locked0[this] := 0;
[L3123]  RET         call LockableToken_LockableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3124]  COND FALSE  !(revert)
[L3505]  RET         call LockableToken_LockableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3506]  COND FALSE  !(revert)
[L3509]  CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3334]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3296]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3281]              assume msgsender_MSG != null;
[L3282]              __tmp__Balance[this] := 0;
[L3296]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3297]  COND FALSE  !(revert)
[L3334]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3335]  COND FALSE  !(revert)
[L3338]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L2945]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2926]              assume msgsender_MSG != null;
[L2927]              __tmp__Balance[this] := 0;
[L2928]              __tmp__owner_Ownable[this] := null;
[L2930]              __tmp__owner_Ownable[this] := msgsender_MSG;
[L2945]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2946]  COND FALSE  !(revert)
[L3338]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3339]  COND FALSE  !(revert)
[L3342]  CALL        call LockableToken_LockableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3119]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L2945]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2926]              assume msgsender_MSG != null;
[L2927]              __tmp__Balance[this] := 0;
[L2928]              __tmp__owner_Ownable[this] := null;
[L2930]              __tmp__owner_Ownable[this] := msgsender_MSG;
[L2945]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2946]  COND FALSE  !(revert)
[L3119]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3120]  COND FALSE  !(revert)
[L3123]  CALL        call LockableToken_LockableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3100]              assume msgsender_MSG != null;
[L3101]              __tmp__Balance[this] := 0;
[L3102]              __tmp__locked_LockableToken[this] := zeroRefintArr();
[L3103]              __tmp__sum_locked0[this] := 0;
[L3123]  RET         call LockableToken_LockableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3124]  COND FALSE  !(revert)
[L3342]  RET         call LockableToken_LockableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3343]  COND FALSE  !(revert)
[L3346]  CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3313]              assume msgsender_MSG != null;
[L3314]              __tmp__Balance[this] := 0;
[L3315]              __tmp__balances_BasicToken[this] := zeroRefintArr();
[L3316]              __tmp__sum_balances1[this] := 0;
[L3317]              __tmp__totalSupply__BasicToken[this] := 0;
[L3346]  RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3347]  COND FALSE  !(revert)
[L3509]  RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3510]  COND FALSE  !(revert)
[L3513]  CALL        call BurnableToken_BurnableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3482]              assume msgsender_MSG != null;
[L3483]              __tmp__Balance[this] := 0;
[L3513]  RET         call BurnableToken_BurnableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3514]  COND FALSE  !(revert)
[L4154]  RET         call BurnableToken_BurnableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L4155]  COND FALSE  !(revert)
[L4158]  CALL        call MintableToken_MintableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3977]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3296]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3281]              assume msgsender_MSG != null;
[L3282]              __tmp__Balance[this] := 0;
[L3296]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3297]  COND FALSE  !(revert)
[L3977]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3978]  COND FALSE  !(revert)
[L3981]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3641]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3296]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3281]              assume msgsender_MSG != null;
[L3282]              __tmp__Balance[this] := 0;
[L3296]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3297]  COND FALSE  !(revert)
[L3641]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3642]  COND FALSE  !(revert)
[L3645]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3626]              assume msgsender_MSG != null;
[L3627]              __tmp__Balance[this] := 0;
[L3645]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3646]  COND FALSE  !(revert)
[L3981]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3982]  COND FALSE  !(revert)
[L3985]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L2945]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2926]              assume msgsender_MSG != null;
[L2927]              __tmp__Balance[this] := 0;
[L2928]              __tmp__owner_Ownable[this] := null;
[L2930]              __tmp__owner_Ownable[this] := msgsender_MSG;
[L2945]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2946]  COND FALSE  !(revert)
[L3985]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3986]  COND FALSE  !(revert)
[L3989]  CALL        call LockableToken_LockableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3119]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L2945]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2926]              assume msgsender_MSG != null;
[L2927]              __tmp__Balance[this] := 0;
[L2928]              __tmp__owner_Ownable[this] := null;
[L2930]              __tmp__owner_Ownable[this] := msgsender_MSG;
[L2945]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2946]  COND FALSE  !(revert)
[L3119]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3120]  COND FALSE  !(revert)
[L3123]  CALL        call LockableToken_LockableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3100]              assume msgsender_MSG != null;
[L3101]              __tmp__Balance[this] := 0;
[L3102]              __tmp__locked_LockableToken[this] := zeroRefintArr();
[L3103]              __tmp__sum_locked0[this] := 0;
[L3123]  RET         call LockableToken_LockableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3124]  COND FALSE  !(revert)
[L3989]  RET         call LockableToken_LockableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3990]  COND FALSE  !(revert)
[L3993]  CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3334]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3296]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3281]              assume msgsender_MSG != null;
[L3282]              __tmp__Balance[this] := 0;
[L3296]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3297]  COND FALSE  !(revert)
[L3334]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3335]  COND FALSE  !(revert)
[L3338]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L2945]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2926]              assume msgsender_MSG != null;
[L2927]              __tmp__Balance[this] := 0;
[L2928]              __tmp__owner_Ownable[this] := null;
[L2930]              __tmp__owner_Ownable[this] := msgsender_MSG;
[L2945]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2946]  COND FALSE  !(revert)
[L3338]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3339]  COND FALSE  !(revert)
[L3342]  CALL        call LockableToken_LockableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3119]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L2945]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2926]              assume msgsender_MSG != null;
[L2927]              __tmp__Balance[this] := 0;
[L2928]              __tmp__owner_Ownable[this] := null;
[L2930]              __tmp__owner_Ownable[this] := msgsender_MSG;
[L2945]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2946]  COND FALSE  !(revert)
[L3119]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3120]  COND FALSE  !(revert)
[L3123]  CALL        call LockableToken_LockableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3100]              assume msgsender_MSG != null;
[L3101]              __tmp__Balance[this] := 0;
[L3102]              __tmp__locked_LockableToken[this] := zeroRefintArr();
[L3103]              __tmp__sum_locked0[this] := 0;
[L3123]  RET         call LockableToken_LockableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3124]  COND FALSE  !(revert)
[L3342]  RET         call LockableToken_LockableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3343]  COND FALSE  !(revert)
[L3346]  CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3313]              assume msgsender_MSG != null;
[L3314]              __tmp__Balance[this] := 0;
[L3315]              __tmp__balances_BasicToken[this] := zeroRefintArr();
[L3316]              __tmp__sum_balances1[this] := 0;
[L3317]              __tmp__totalSupply__BasicToken[this] := 0;
[L3346]  RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3347]  COND FALSE  !(revert)
[L3993]  RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3994]  COND FALSE  !(revert)
[L3997]  CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3685]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3296]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3281]              assume msgsender_MSG != null;
[L3282]              __tmp__Balance[this] := 0;
[L3296]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3297]  COND FALSE  !(revert)
[L3685]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3686]  COND FALSE  !(revert)
[L3689]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3641]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3296]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3281]              assume msgsender_MSG != null;
[L3282]              __tmp__Balance[this] := 0;
[L3296]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3297]  COND FALSE  !(revert)
[L3641]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3642]  COND FALSE  !(revert)
[L3645]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3626]              assume msgsender_MSG != null;
[L3627]              __tmp__Balance[this] := 0;
[L3645]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3646]  COND FALSE  !(revert)
[L3689]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3690]  COND FALSE  !(revert)
[L3693]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L2945]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2926]              assume msgsender_MSG != null;
[L2927]              __tmp__Balance[this] := 0;
[L2928]              __tmp__owner_Ownable[this] := null;
[L2930]              __tmp__owner_Ownable[this] := msgsender_MSG;
[L2945]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2946]  COND FALSE  !(revert)
[L3693]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3694]  COND FALSE  !(revert)
[L3697]  CALL        call LockableToken_LockableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3119]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L2945]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2926]              assume msgsender_MSG != null;
[L2927]              __tmp__Balance[this] := 0;
[L2928]              __tmp__owner_Ownable[this] := null;
[L2930]              __tmp__owner_Ownable[this] := msgsender_MSG;
[L2945]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2946]  COND FALSE  !(revert)
[L3119]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3120]  COND FALSE  !(revert)
[L3123]  CALL        call LockableToken_LockableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3100]              assume msgsender_MSG != null;
[L3101]              __tmp__Balance[this] := 0;
[L3102]              __tmp__locked_LockableToken[this] := zeroRefintArr();
[L3103]              __tmp__sum_locked0[this] := 0;
[L3123]  RET         call LockableToken_LockableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3124]  COND FALSE  !(revert)
[L3697]  RET         call LockableToken_LockableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3698]  COND FALSE  !(revert)
[L3701]  CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3334]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3296]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3281]              assume msgsender_MSG != null;
[L3282]              __tmp__Balance[this] := 0;
[L3296]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3297]  COND FALSE  !(revert)
[L3334]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3335]  COND FALSE  !(revert)
[L3338]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L2945]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2926]              assume msgsender_MSG != null;
[L2927]              __tmp__Balance[this] := 0;
[L2928]              __tmp__owner_Ownable[this] := null;
[L2930]              __tmp__owner_Ownable[this] := msgsender_MSG;
[L2945]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2946]  COND FALSE  !(revert)
[L3338]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3339]  COND FALSE  !(revert)
[L3342]  CALL        call LockableToken_LockableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3119]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L2945]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2926]              assume msgsender_MSG != null;
[L2927]              __tmp__Balance[this] := 0;
[L2928]              __tmp__owner_Ownable[this] := null;
[L2930]              __tmp__owner_Ownable[this] := msgsender_MSG;
[L2945]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2946]  COND FALSE  !(revert)
[L3119]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3120]  COND FALSE  !(revert)
[L3123]  CALL        call LockableToken_LockableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3100]              assume msgsender_MSG != null;
[L3101]              __tmp__Balance[this] := 0;
[L3102]              __tmp__locked_LockableToken[this] := zeroRefintArr();
[L3103]              __tmp__sum_locked0[this] := 0;
[L3123]  RET         call LockableToken_LockableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3124]  COND FALSE  !(revert)
[L3342]  RET         call LockableToken_LockableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3343]  COND FALSE  !(revert)
[L3346]  CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3313]              assume msgsender_MSG != null;
[L3314]              __tmp__Balance[this] := 0;
[L3315]              __tmp__balances_BasicToken[this] := zeroRefintArr();
[L3316]              __tmp__sum_balances1[this] := 0;
[L3317]              __tmp__totalSupply__BasicToken[this] := 0;
[L3346]  RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3347]  COND FALSE  !(revert)
[L3701]  RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3702]  COND FALSE  !(revert)
[L3705]  CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3666]              assume msgsender_MSG != null;
[L3667]              __tmp__Balance[this] := 0;
[L3668]              __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L3669]              __tmp__sum_allowed2[this] := 0;
[L3705]  RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3706]  COND FALSE  !(revert)
[L3997]  RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3998]  COND FALSE  !(revert)
[L4001]  CALL        call MintableToken_MintableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3962]              assume msgsender_MSG != null;
[L3963]              __tmp__Balance[this] := 0;
[L4001]  RET         call MintableToken_MintableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4002]  COND FALSE  !(revert)
[L4158]  RET         call MintableToken_MintableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L4159]  COND FALSE  !(revert)
[L4162]  CALL        call VIE_VIE_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              __tmp__Balance[this] := 0;
[L4094]              __tmp__name_VIE[this] := -1016296818;
[L4095]              __tmp__symbol_VIE[this] := 455661269;
[L4096]              __tmp__decimals_VIE[this] := 18;
[L4097]              __tmp__INITIAL_SUPPLY_VIE[this] := 1899000000000000000000000000;
[L4098]              __var_19 := ConstantToRef(-385189319374310582173179693124046919983126611732);
[L4099]              __tmp__holder_VIE[this] := ConstantToRef(-385189319374310582173179693124046919983126611732);
[L4101]              __tmp__totalSupply__BasicToken[this] := __tmp__INITIAL_SUPPLY_VIE[this];
[L4102]              __tmp__sum_balances1[this] := __tmp__sum_balances1[this] - __tmp__balances_BasicToken[this][__tmp__holder_VIE[this]];
[L4103]              __tmp__balances_BasicToken[this][__tmp__holder_VIE[this]] := __tmp__INITIAL_SUPPLY_VIE[this];
[L4104]              __tmp__sum_balances1[this] := __tmp__sum_balances1[this] + __tmp__balances_BasicToken[this][__tmp__holder_VIE[this]];
[L4162]  RET         call VIE_VIE_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4163]  COND FALSE  !(revert)
[L1740]  RET         call VIE_VIE__fail(this, msgsender_MSG, msgvalue_MSG);
[L1741]              assume revert || gas < 0;
[L7653]  RET         call VIE_VIE(this, msgsender_MSG, msgvalue_MSG);
[L7654]              assume !revert && gas >= 0;
[L7657]  CALL        call CorralChoice_VIE(this);
[L7445]              havoc msgsender_MSG;
[L7446]              havoc msgvalue_MSG;
[L7447]              havoc choice;
[L7448]              havoc __ret_0_owner;
[L7449]              havoc newOwner_s54;
[L7450]              havoc _spender_s202;
[L7451]              havoc _value_s202;
[L7452]              havoc __ret_0_lock;
[L7453]              havoc _spender_s214;
[L7454]              havoc __ret_0_locking;
[L7455]              havoc _spender_s246;
[L7456]              havoc _addedValue_s246;
[L7457]              havoc __ret_0_increaseLocking;
[L7458]              havoc _spender_s294;
[L7459]              havoc _subtractedValue_s294;
[L7460]              havoc __ret_0_decreaseLocking;
[L7461]              havoc __ret_0_totalSupply;
[L7462]              havoc _owner_s430;
[L7463]              havoc __ret_0_balanceOf;
[L7464]              havoc _to_s418;
[L7465]              havoc _value_s418;
[L7466]              havoc __ret_0_transfer;
[L7467]              havoc _value_s451;
[L7468]              havoc _owner_s710;
[L7469]              havoc _spender_s710;
[L7470]              havoc __ret_0_allowance;
[L7471]              havoc _from_s648;
[L7472]              havoc _to_s648;
[L7473]              havoc _value_s648;
[L7474]              havoc __ret_0_transferFrom;
[L7475]              havoc _spender_s694;
[L7476]              havoc _value_s694;
[L7477]              havoc __ret_0_approve;
[L7478]              havoc _spender_s751;
[L7479]              havoc _addedValue_s751;
[L7480]              havoc __ret_0_increaseApproval;
[L7481]              havoc _spender_s811;
[L7482]              havoc _subtractedValue_s811;
[L7483]              havoc __ret_0_decreaseApproval;
[L7484]              havoc _to_s854;
[L7485]              havoc _amount_s854;
[L7486]              havoc __ret_0_mint;
[L7487]              havoc __ret_0_name;
[L7488]              havoc __ret_0_symbol;
[L7489]              havoc __ret_0_decimals;
[L7490]              havoc __ret_0_INITIAL_SUPPLY;
[L7491]              havoc tmpNow;
[L7492]              havoc gas;
[L7493]              assume gas > 4000000 && gas <= 8000000;
[L7494]              tmpNow := now;
[L7495]              havoc now;
[L7496]              assume now > tmpNow;
[L7497]              assume msgsender_MSG != null;
[L7498]              assume DType[msgsender_MSG] != Ownable;
[L7499]              assume DType[msgsender_MSG] != SafeMath;
[L7500]              assume DType[msgsender_MSG] != LockableToken;
[L7501]              assume DType[msgsender_MSG] != ERC20Basic;
[L7502]              assume DType[msgsender_MSG] != BasicToken;
[L7503]              assume DType[msgsender_MSG] != BurnableToken;
[L7504]              assume DType[msgsender_MSG] != ERC20;
[L7505]              assume DType[msgsender_MSG] != StandardToken;
[L7506]              assume DType[msgsender_MSG] != MintableToken;
[L7507]              assume DType[msgsender_MSG] != VIE;
[L7508]              Alloc[msgsender_MSG] := true;
[L7509]  COND FALSE  !(choice == 20)
[L7515]  COND FALSE  !(choice == 19)
[L7521]  COND FALSE  !(choice == 18)
[L7528]  COND FALSE  !(choice == 17)
[L7534]  COND FALSE  !(choice == 16)
[L7541]  COND FALSE  !(choice == 15)
[L7548]  COND FALSE  !(choice == 14)
[L7554]  COND FALSE  !(choice == 13)
[L7560]  COND TRUE   choice == 12
[L7561]              gas := gas - 21000;
[L7562]  COND TRUE   gas >= 0
[L7563]              assume _value_s418 >= 0 && _value_s418 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7564]              assume msgvalue_MSG == 0;
[L7565]  CALL        call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s418, _value_s418);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s418 && (_value_s418 > balances_BasicToken[this][msgsender_MSG] || balances_BasicToken[this][_to_s418] + _value_s418 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s418 >= 0) && _value_s418 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s418] >= 0) && balances_BasicToken[this][_to_s418] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BasicToken0 := true;
[L2]                 call_transfer_BasicToken0 := false;
[L2]                 revert := revert_hold;
[L845]               havoc __exception;
[L846]               revert := false;
[L847]   COND FALSE  !(__exception)
[L873]   CALL        call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s418, _value_s418);
[L3431]              __var_4 := null;
[L3432]  COND FALSE  !(!(_to_s418 != null))
[L3436]  COND FALSE  !(!(_value_s418 <= balances_BasicToken[this][msgsender_MSG]))
[L3440]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s418);
[L3077]              assert b_s122 <= a_s122;
[L3078]              __ret_0_ := (a_s122 - b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3440]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s418);
[L3441]  COND FALSE  !(revert)
[L3444]  COND FALSE  !(!(locked_LockableToken[this][msgsender_MSG] <= __var_5))
[L3448]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s418);
[L3077]              assert b_s122 <= a_s122;
[L3078]              __ret_0_ := (a_s122 - b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3448]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s418);
[L3449]  COND FALSE  !(revert)
[L3452]              sum_balances1[this] := sum_balances1[this] - balances_BasicToken[this][msgsender_MSG];
[L3453]              balances_BasicToken[this][msgsender_MSG] := __var_6;
[L3454]              sum_balances1[this] := sum_balances1[this] + balances_BasicToken[this][msgsender_MSG];
[L3455]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s418], _value_s418);
[L3091]              c_s146 := (a_s146 + b_s146) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3092]              assert c_s146 >= a_s146;
[L3093]              c_s146 := c_s146;
[L3455]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s418], _value_s418);
[L3456]  COND FALSE  !(revert)
[L3459]              sum_balances1[this] := sum_balances1[this] - balances_BasicToken[this][_to_s418];
[L3460]              balances_BasicToken[this][_to_s418] := __var_7;
[L3461]              sum_balances1[this] := sum_balances1[this] + balances_BasicToken[this][_to_s418];
[L3462]              assert { :EventEmitted "Transfer_BasicToken" } true;
[L3463]              __ret_0_ := true;
[L873]   RET         call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s418, _value_s418);
[L874]               assume !revert && gas >= 0;
[L7565]  RET         call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s418, _value_s418);
[L7657]  RET         call CorralChoice_VIE(this);

Loop:
[L7657]  CALL        call CorralChoice_VIE(this);
[L7445]              havoc msgsender_MSG;
[L7446]              havoc msgvalue_MSG;
[L7447]              havoc choice;
[L7448]              havoc __ret_0_owner;
[L7449]              havoc newOwner_s54;
[L7450]              havoc _spender_s202;
[L7451]              havoc _value_s202;
[L7452]              havoc __ret_0_lock;
[L7453]              havoc _spender_s214;
[L7454]              havoc __ret_0_locking;
[L7455]              havoc _spender_s246;
[L7456]              havoc _addedValue_s246;
[L7457]              havoc __ret_0_increaseLocking;
[L7458]              havoc _spender_s294;
[L7459]              havoc _subtractedValue_s294;
[L7460]              havoc __ret_0_decreaseLocking;
[L7461]              havoc __ret_0_totalSupply;
[L7462]              havoc _owner_s430;
[L7463]              havoc __ret_0_balanceOf;
[L7464]              havoc _to_s418;
[L7465]              havoc _value_s418;
[L7466]              havoc __ret_0_transfer;
[L7467]              havoc _value_s451;
[L7468]              havoc _owner_s710;
[L7469]              havoc _spender_s710;
[L7470]              havoc __ret_0_allowance;
[L7471]              havoc _from_s648;
[L7472]              havoc _to_s648;
[L7473]              havoc _value_s648;
[L7474]              havoc __ret_0_transferFrom;
[L7475]              havoc _spender_s694;
[L7476]              havoc _value_s694;
[L7477]              havoc __ret_0_approve;
[L7478]              havoc _spender_s751;
[L7479]              havoc _addedValue_s751;
[L7480]              havoc __ret_0_increaseApproval;
[L7481]              havoc _spender_s811;
[L7482]              havoc _subtractedValue_s811;
[L7483]              havoc __ret_0_decreaseApproval;
[L7484]              havoc _to_s854;
[L7485]              havoc _amount_s854;
[L7486]              havoc __ret_0_mint;
[L7487]              havoc __ret_0_name;
[L7488]              havoc __ret_0_symbol;
[L7489]              havoc __ret_0_decimals;
[L7490]              havoc __ret_0_INITIAL_SUPPLY;
[L7491]              havoc tmpNow;
[L7492]              havoc gas;
[L7493]              assume gas > 4000000 && gas <= 8000000;
[L7494]              tmpNow := now;
[L7495]              havoc now;
[L7496]              assume now > tmpNow;
[L7497]              assume msgsender_MSG != null;
[L7498]              assume DType[msgsender_MSG] != Ownable;
[L7499]              assume DType[msgsender_MSG] != SafeMath;
[L7500]              assume DType[msgsender_MSG] != LockableToken;
[L7501]              assume DType[msgsender_MSG] != ERC20Basic;
[L7502]              assume DType[msgsender_MSG] != BasicToken;
[L7503]              assume DType[msgsender_MSG] != BurnableToken;
[L7504]              assume DType[msgsender_MSG] != ERC20;
[L7505]              assume DType[msgsender_MSG] != StandardToken;
[L7506]              assume DType[msgsender_MSG] != MintableToken;
[L7507]              assume DType[msgsender_MSG] != VIE;
[L7508]              Alloc[msgsender_MSG] := true;
[L7509]  COND FALSE  !(choice == 20)
[L7515]  COND FALSE  !(choice == 19)
[L7521]  COND FALSE  !(choice == 18)
[L7528]  COND FALSE  !(choice == 17)
[L7534]  COND FALSE  !(choice == 16)
[L7541]  COND FALSE  !(choice == 15)
[L7548]  COND FALSE  !(choice == 14)
[L7554]  COND FALSE  !(choice == 13)
[L7560]  COND TRUE   choice == 12
[L7561]              gas := gas - 21000;
[L7562]  COND TRUE   gas >= 0
[L7563]              assume _value_s418 >= 0 && _value_s418 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7564]              assume msgvalue_MSG == 0;
[L7565]  CALL        call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s418, _value_s418);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s418 && (_value_s418 > balances_BasicToken[this][msgsender_MSG] || balances_BasicToken[this][_to_s418] + _value_s418 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s418 >= 0) && _value_s418 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s418] >= 0) && balances_BasicToken[this][_to_s418] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BasicToken0 := true;
[L2]                 call_transfer_BasicToken0 := false;
[L2]                 revert := revert_hold;
[L845]               havoc __exception;
[L846]               revert := false;
[L847]   COND FALSE  !(__exception)
[L873]   CALL        call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s418, _value_s418);
[L3431]              __var_4 := null;
[L3432]  COND FALSE  !(!(_to_s418 != null))
[L3436]  COND FALSE  !(!(_value_s418 <= balances_BasicToken[this][msgsender_MSG]))
[L3440]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s418);
[L3077]              assert b_s122 <= a_s122;
[L3078]              __ret_0_ := (a_s122 - b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3440]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s418);
[L3441]  COND FALSE  !(revert)
[L3444]  COND FALSE  !(!(locked_LockableToken[this][msgsender_MSG] <= __var_5))
[L3448]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s418);
[L3077]              assert b_s122 <= a_s122;
[L3078]              __ret_0_ := (a_s122 - b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3448]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s418);
[L3449]  COND FALSE  !(revert)
[L3452]              sum_balances1[this] := sum_balances1[this] - balances_BasicToken[this][msgsender_MSG];
[L3453]              balances_BasicToken[this][msgsender_MSG] := __var_6;
[L3454]              sum_balances1[this] := sum_balances1[this] + balances_BasicToken[this][msgsender_MSG];
[L3455]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s418], _value_s418);
[L3091]              c_s146 := (a_s146 + b_s146) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3092]              assert c_s146 >= a_s146;
[L3093]              c_s146 := c_s146;
[L3455]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s418], _value_s418);
[L3456]  COND FALSE  !(revert)
[L3459]              sum_balances1[this] := sum_balances1[this] - balances_BasicToken[this][_to_s418];
[L3460]              balances_BasicToken[this][_to_s418] := __var_7;
[L3461]              sum_balances1[this] := sum_balances1[this] + balances_BasicToken[this][_to_s418];
[L3462]              assert { :EventEmitted "Transfer_BasicToken" } true;
[L3463]              __ret_0_ := true;
[L873]   RET         call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s418, _value_s418);
[L874]               assume !revert && gas >= 0;
[L7565]  RET         call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s418, _value_s418);
[L7657]  RET         call CorralChoice_VIE(this);

[2020-11-25 08:34:03,224 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:34:03,224 INFO  L82        PathProgramCache]: Analyzing trace with hash -1505147864, now seen corresponding path program 1 times
[2020-11-25 08:34:03,225 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:34:03,248 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:34:03,526 INFO  L134       CoverageAnalysis]: Checked inductivity of 4280 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 4280 trivial. 0 not checked.
[2020-11-25 08:34:03,527 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:34:03,527 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 08:34:03,528 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:34:03,528 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 08:34:03,529 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-11-25 08:34:03,529 INFO  L87              Difference]: Start difference. First operand 3386 states and 3670 transitions. cyclomatic complexity: 287 Second operand 4 states.
[2020-11-25 08:34:03,860 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:34:03,861 INFO  L93              Difference]: Finished difference Result 4189 states and 4681 transitions.
[2020-11-25 08:34:03,861 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 08:34:03,861 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4189 states and 4681 transitions.
[2020-11-25 08:34:03,870 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-25 08:34:03,881 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4189 states to 3938 states and 4410 transitions.
[2020-11-25 08:34:03,881 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 988
[2020-11-25 08:34:03,881 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 988
[2020-11-25 08:34:03,882 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3938 states and 4410 transitions.
[2020-11-25 08:34:03,885 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:34:03,885 INFO  L728         BuchiCegarLoop]: Abstraction has 3938 states and 4410 transitions.
[2020-11-25 08:34:03,888 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3938 states and 4410 transitions.
[2020-11-25 08:34:03,908 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3938 to 3135.
[2020-11-25 08:34:03,908 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3135 states.
[2020-11-25 08:34:03,910 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3135 states to 3135 states and 3398 transitions.
[2020-11-25 08:34:03,911 INFO  L751         BuchiCegarLoop]: Abstraction has 3135 states and 3398 transitions.
[2020-11-25 08:34:03,911 INFO  L631         BuchiCegarLoop]: Abstraction has 3135 states and 3398 transitions.
[2020-11-25 08:34:03,911 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 08:34:03,911 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3135 states and 3398 transitions.
[2020-11-25 08:34:03,914 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:34:03,914 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:34:03,914 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:34:03,916 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 14, 14, 14, 14, 14, 14, 14, 14, 14, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:34:03,916 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_BasicToken0 := false;
[L2]                 call_transfer_BasicToken0 := false;
[L2]     CALL        call main();
[L7647]              assume null == 0;
[L7648]  CALL        call this := FreshRefGenerator__success();
[L2917]              havoc newRef;
[L2918]              assume Alloc[newRef] == false;
[L2919]              Alloc[newRef] := true;
[L2920]              assume newRef != null;
[L7648]  RET         call this := FreshRefGenerator__success();
[L7649]              assume now >= 0;
[L7650]              assume DType[this] == VIE;
[L7651]              assume msgvalue_MSG == 0;
[L7652]              gas := gas - 53000;
[L7653]  CALL        call VIE_VIE(this, msgsender_MSG, msgvalue_MSG);
[L1715]              havoc __exception;
[L1716]              revert := false;
[L1717]  COND FALSE  !(__exception)
[L1743]  CALL        call VIE_VIE__success(this, msgsender_MSG, msgvalue_MSG);
[L4171]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3304]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3289]              assume msgsender_MSG != null;
[L3290]              Balance[this] := 0;
[L3304]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  COND FALSE  !(revert)
[L4171]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]  COND FALSE  !(revert)
[L4175]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3653]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3304]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3289]              assume msgsender_MSG != null;
[L3290]              Balance[this] := 0;
[L3304]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  COND FALSE  !(revert)
[L3653]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3654]  COND FALSE  !(revert)
[L3657]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3634]              assume msgsender_MSG != null;
[L3635]              Balance[this] := 0;
[L3657]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3658]  COND FALSE  !(revert)
[L4175]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4176]  COND FALSE  !(revert)
[L4179]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2953]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              assume msgsender_MSG != null;
[L2937]              Balance[this] := 0;
[L2938]              owner_Ownable[this] := null;
[L2940]              owner_Ownable[this] := msgsender_MSG;
[L2953]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  COND FALSE  !(revert)
[L4179]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4180]  COND FALSE  !(revert)
[L4183]  CALL        call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3131]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2953]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              assume msgsender_MSG != null;
[L2937]              Balance[this] := 0;
[L2938]              owner_Ownable[this] := null;
[L2940]              owner_Ownable[this] := msgsender_MSG;
[L2953]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  COND FALSE  !(revert)
[L3131]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3132]  COND FALSE  !(revert)
[L3135]  CALL        call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3110]              assume msgsender_MSG != null;
[L3111]              Balance[this] := 0;
[L3112]              locked_LockableToken[this] := zeroRefintArr();
[L3113]              sum_locked0[this] := 0;
[L3135]  RET         call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3136]  COND FALSE  !(revert)
[L4183]  RET         call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4184]  COND FALSE  !(revert)
[L4187]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3354]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3304]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3289]              assume msgsender_MSG != null;
[L3290]              Balance[this] := 0;
[L3304]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  COND FALSE  !(revert)
[L3354]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3355]  COND FALSE  !(revert)
[L3358]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2953]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              assume msgsender_MSG != null;
[L2937]              Balance[this] := 0;
[L2938]              owner_Ownable[this] := null;
[L2940]              owner_Ownable[this] := msgsender_MSG;
[L2953]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  COND FALSE  !(revert)
[L3358]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3359]  COND FALSE  !(revert)
[L3362]  CALL        call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3131]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2953]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              assume msgsender_MSG != null;
[L2937]              Balance[this] := 0;
[L2938]              owner_Ownable[this] := null;
[L2940]              owner_Ownable[this] := msgsender_MSG;
[L2953]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  COND FALSE  !(revert)
[L3131]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3132]  COND FALSE  !(revert)
[L3135]  CALL        call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3110]              assume msgsender_MSG != null;
[L3111]              Balance[this] := 0;
[L3112]              locked_LockableToken[this] := zeroRefintArr();
[L3113]              sum_locked0[this] := 0;
[L3135]  RET         call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3136]  COND FALSE  !(revert)
[L3362]  RET         call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3363]  COND FALSE  !(revert)
[L3366]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3324]              assume msgsender_MSG != null;
[L3325]              Balance[this] := 0;
[L3326]              balances_BasicToken[this] := zeroRefintArr();
[L3327]              sum_balances1[this] := 0;
[L3328]              totalSupply__BasicToken[this] := 0;
[L3366]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3367]  COND FALSE  !(revert)
[L4187]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4191]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3713]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3304]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3289]              assume msgsender_MSG != null;
[L3290]              Balance[this] := 0;
[L3304]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  COND FALSE  !(revert)
[L3713]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  COND FALSE  !(revert)
[L3717]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3653]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3304]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3289]              assume msgsender_MSG != null;
[L3290]              Balance[this] := 0;
[L3304]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  COND FALSE  !(revert)
[L3653]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3654]  COND FALSE  !(revert)
[L3657]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3634]              assume msgsender_MSG != null;
[L3635]              Balance[this] := 0;
[L3657]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3658]  COND FALSE  !(revert)
[L3717]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3718]  COND FALSE  !(revert)
[L3721]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2953]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              assume msgsender_MSG != null;
[L2937]              Balance[this] := 0;
[L2938]              owner_Ownable[this] := null;
[L2940]              owner_Ownable[this] := msgsender_MSG;
[L2953]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  COND FALSE  !(revert)
[L3721]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3722]  COND FALSE  !(revert)
[L3725]  CALL        call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3131]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2953]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              assume msgsender_MSG != null;
[L2937]              Balance[this] := 0;
[L2938]              owner_Ownable[this] := null;
[L2940]              owner_Ownable[this] := msgsender_MSG;
[L2953]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  COND FALSE  !(revert)
[L3131]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3132]  COND FALSE  !(revert)
[L3135]  CALL        call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3110]              assume msgsender_MSG != null;
[L3111]              Balance[this] := 0;
[L3112]              locked_LockableToken[this] := zeroRefintArr();
[L3113]              sum_locked0[this] := 0;
[L3135]  RET         call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3136]  COND FALSE  !(revert)
[L3725]  RET         call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3726]  COND FALSE  !(revert)
[L3729]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3354]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3304]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3289]              assume msgsender_MSG != null;
[L3290]              Balance[this] := 0;
[L3304]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  COND FALSE  !(revert)
[L3354]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3355]  COND FALSE  !(revert)
[L3358]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2953]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              assume msgsender_MSG != null;
[L2937]              Balance[this] := 0;
[L2938]              owner_Ownable[this] := null;
[L2940]              owner_Ownable[this] := msgsender_MSG;
[L2953]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  COND FALSE  !(revert)
[L3358]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3359]  COND FALSE  !(revert)
[L3362]  CALL        call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3131]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2953]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              assume msgsender_MSG != null;
[L2937]              Balance[this] := 0;
[L2938]              owner_Ownable[this] := null;
[L2940]              owner_Ownable[this] := msgsender_MSG;
[L2953]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  COND FALSE  !(revert)
[L3131]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3132]  COND FALSE  !(revert)
[L3135]  CALL        call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3110]              assume msgsender_MSG != null;
[L3111]              Balance[this] := 0;
[L3112]              locked_LockableToken[this] := zeroRefintArr();
[L3113]              sum_locked0[this] := 0;
[L3135]  RET         call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3136]  COND FALSE  !(revert)
[L3362]  RET         call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3363]  COND FALSE  !(revert)
[L3366]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3324]              assume msgsender_MSG != null;
[L3325]              Balance[this] := 0;
[L3326]              balances_BasicToken[this] := zeroRefintArr();
[L3327]              sum_balances1[this] := 0;
[L3328]              totalSupply__BasicToken[this] := 0;
[L3366]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3367]  COND FALSE  !(revert)
[L3729]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3730]  COND FALSE  !(revert)
[L3733]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3676]              assume msgsender_MSG != null;
[L3677]              Balance[this] := 0;
[L3678]              allowed_StandardToken[this] := zeroRefRefintArr();
[L3679]              sum_allowed2[this] := 0;
[L3733]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3734]  COND FALSE  !(revert)
[L4191]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4192]  COND FALSE  !(revert)
[L4195]  CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3521]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3304]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3289]              assume msgsender_MSG != null;
[L3290]              Balance[this] := 0;
[L3304]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  COND FALSE  !(revert)
[L3521]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3522]  COND FALSE  !(revert)
[L3525]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2953]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              assume msgsender_MSG != null;
[L2937]              Balance[this] := 0;
[L2938]              owner_Ownable[this] := null;
[L2940]              owner_Ownable[this] := msgsender_MSG;
[L2953]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  COND FALSE  !(revert)
[L3525]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3526]  COND FALSE  !(revert)
[L3529]  CALL        call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3131]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2953]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              assume msgsender_MSG != null;
[L2937]              Balance[this] := 0;
[L2938]              owner_Ownable[this] := null;
[L2940]              owner_Ownable[this] := msgsender_MSG;
[L2953]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  COND FALSE  !(revert)
[L3131]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3132]  COND FALSE  !(revert)
[L3135]  CALL        call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3110]              assume msgsender_MSG != null;
[L3111]              Balance[this] := 0;
[L3112]              locked_LockableToken[this] := zeroRefintArr();
[L3113]              sum_locked0[this] := 0;
[L3135]  RET         call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3136]  COND FALSE  !(revert)
[L3529]  RET         call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3530]  COND FALSE  !(revert)
[L3533]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3354]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3304]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3289]              assume msgsender_MSG != null;
[L3290]              Balance[this] := 0;
[L3304]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  COND FALSE  !(revert)
[L3354]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3355]  COND FALSE  !(revert)
[L3358]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2953]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              assume msgsender_MSG != null;
[L2937]              Balance[this] := 0;
[L2938]              owner_Ownable[this] := null;
[L2940]              owner_Ownable[this] := msgsender_MSG;
[L2953]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  COND FALSE  !(revert)
[L3358]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3359]  COND FALSE  !(revert)
[L3362]  CALL        call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3131]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2953]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              assume msgsender_MSG != null;
[L2937]              Balance[this] := 0;
[L2938]              owner_Ownable[this] := null;
[L2940]              owner_Ownable[this] := msgsender_MSG;
[L2953]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  COND FALSE  !(revert)
[L3131]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3132]  COND FALSE  !(revert)
[L3135]  CALL        call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3110]              assume msgsender_MSG != null;
[L3111]              Balance[this] := 0;
[L3112]              locked_LockableToken[this] := zeroRefintArr();
[L3113]              sum_locked0[this] := 0;
[L3135]  RET         call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3136]  COND FALSE  !(revert)
[L3362]  RET         call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3363]  COND FALSE  !(revert)
[L3366]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3324]              assume msgsender_MSG != null;
[L3325]              Balance[this] := 0;
[L3326]              balances_BasicToken[this] := zeroRefintArr();
[L3327]              sum_balances1[this] := 0;
[L3328]              totalSupply__BasicToken[this] := 0;
[L3366]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3367]  COND FALSE  !(revert)
[L3533]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3534]  COND FALSE  !(revert)
[L3537]  CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3490]              assume msgsender_MSG != null;
[L3491]              Balance[this] := 0;
[L3537]  RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3538]  COND FALSE  !(revert)
[L4195]  RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4196]  COND FALSE  !(revert)
[L4199]  CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4009]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3304]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3289]              assume msgsender_MSG != null;
[L3290]              Balance[this] := 0;
[L3304]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  COND FALSE  !(revert)
[L4009]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4010]  COND FALSE  !(revert)
[L4013]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3653]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3304]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3289]              assume msgsender_MSG != null;
[L3290]              Balance[this] := 0;
[L3304]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  COND FALSE  !(revert)
[L3653]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3654]  COND FALSE  !(revert)
[L3657]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3634]              assume msgsender_MSG != null;
[L3635]              Balance[this] := 0;
[L3657]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3658]  COND FALSE  !(revert)
[L4013]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4014]  COND FALSE  !(revert)
[L4017]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2953]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              assume msgsender_MSG != null;
[L2937]              Balance[this] := 0;
[L2938]              owner_Ownable[this] := null;
[L2940]              owner_Ownable[this] := msgsender_MSG;
[L2953]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  COND FALSE  !(revert)
[L4017]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4018]  COND FALSE  !(revert)
[L4021]  CALL        call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3131]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2953]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              assume msgsender_MSG != null;
[L2937]              Balance[this] := 0;
[L2938]              owner_Ownable[this] := null;
[L2940]              owner_Ownable[this] := msgsender_MSG;
[L2953]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  COND FALSE  !(revert)
[L3131]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3132]  COND FALSE  !(revert)
[L3135]  CALL        call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3110]              assume msgsender_MSG != null;
[L3111]              Balance[this] := 0;
[L3112]              locked_LockableToken[this] := zeroRefintArr();
[L3113]              sum_locked0[this] := 0;
[L3135]  RET         call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3136]  COND FALSE  !(revert)
[L4021]  RET         call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4022]  COND FALSE  !(revert)
[L4025]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3354]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3304]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3289]              assume msgsender_MSG != null;
[L3290]              Balance[this] := 0;
[L3304]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  COND FALSE  !(revert)
[L3354]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3355]  COND FALSE  !(revert)
[L3358]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2953]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              assume msgsender_MSG != null;
[L2937]              Balance[this] := 0;
[L2938]              owner_Ownable[this] := null;
[L2940]              owner_Ownable[this] := msgsender_MSG;
[L2953]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  COND FALSE  !(revert)
[L3358]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3359]  COND FALSE  !(revert)
[L3362]  CALL        call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3131]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2953]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              assume msgsender_MSG != null;
[L2937]              Balance[this] := 0;
[L2938]              owner_Ownable[this] := null;
[L2940]              owner_Ownable[this] := msgsender_MSG;
[L2953]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  COND FALSE  !(revert)
[L3131]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3132]  COND FALSE  !(revert)
[L3135]  CALL        call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3110]              assume msgsender_MSG != null;
[L3111]              Balance[this] := 0;
[L3112]              locked_LockableToken[this] := zeroRefintArr();
[L3113]              sum_locked0[this] := 0;
[L3135]  RET         call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3136]  COND FALSE  !(revert)
[L3362]  RET         call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3363]  COND FALSE  !(revert)
[L3366]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3324]              assume msgsender_MSG != null;
[L3325]              Balance[this] := 0;
[L3326]              balances_BasicToken[this] := zeroRefintArr();
[L3327]              sum_balances1[this] := 0;
[L3328]              totalSupply__BasicToken[this] := 0;
[L3366]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3367]  COND FALSE  !(revert)
[L4025]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4026]  COND FALSE  !(revert)
[L4029]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3713]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3304]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3289]              assume msgsender_MSG != null;
[L3290]              Balance[this] := 0;
[L3304]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  COND FALSE  !(revert)
[L3713]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  COND FALSE  !(revert)
[L3717]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3653]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3304]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3289]              assume msgsender_MSG != null;
[L3290]              Balance[this] := 0;
[L3304]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  COND FALSE  !(revert)
[L3653]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3654]  COND FALSE  !(revert)
[L3657]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3634]              assume msgsender_MSG != null;
[L3635]              Balance[this] := 0;
[L3657]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3658]  COND FALSE  !(revert)
[L3717]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3718]  COND FALSE  !(revert)
[L3721]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2953]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              assume msgsender_MSG != null;
[L2937]              Balance[this] := 0;
[L2938]              owner_Ownable[this] := null;
[L2940]              owner_Ownable[this] := msgsender_MSG;
[L2953]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  COND FALSE  !(revert)
[L3721]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3722]  COND FALSE  !(revert)
[L3725]  CALL        call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3131]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2953]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              assume msgsender_MSG != null;
[L2937]              Balance[this] := 0;
[L2938]              owner_Ownable[this] := null;
[L2940]              owner_Ownable[this] := msgsender_MSG;
[L2953]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  COND FALSE  !(revert)
[L3131]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3132]  COND FALSE  !(revert)
[L3135]  CALL        call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3110]              assume msgsender_MSG != null;
[L3111]              Balance[this] := 0;
[L3112]              locked_LockableToken[this] := zeroRefintArr();
[L3113]              sum_locked0[this] := 0;
[L3135]  RET         call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3136]  COND FALSE  !(revert)
[L3725]  RET         call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3726]  COND FALSE  !(revert)
[L3729]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3354]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3304]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3289]              assume msgsender_MSG != null;
[L3290]              Balance[this] := 0;
[L3304]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  COND FALSE  !(revert)
[L3354]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3355]  COND FALSE  !(revert)
[L3358]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2953]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              assume msgsender_MSG != null;
[L2937]              Balance[this] := 0;
[L2938]              owner_Ownable[this] := null;
[L2940]              owner_Ownable[this] := msgsender_MSG;
[L2953]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  COND FALSE  !(revert)
[L3358]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3359]  COND FALSE  !(revert)
[L3362]  CALL        call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3131]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2953]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              assume msgsender_MSG != null;
[L2937]              Balance[this] := 0;
[L2938]              owner_Ownable[this] := null;
[L2940]              owner_Ownable[this] := msgsender_MSG;
[L2953]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  COND FALSE  !(revert)
[L3131]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3132]  COND FALSE  !(revert)
[L3135]  CALL        call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3110]              assume msgsender_MSG != null;
[L3111]              Balance[this] := 0;
[L3112]              locked_LockableToken[this] := zeroRefintArr();
[L3113]              sum_locked0[this] := 0;
[L3135]  RET         call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3136]  COND FALSE  !(revert)
[L3362]  RET         call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3363]  COND FALSE  !(revert)
[L3366]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3324]              assume msgsender_MSG != null;
[L3325]              Balance[this] := 0;
[L3326]              balances_BasicToken[this] := zeroRefintArr();
[L3327]              sum_balances1[this] := 0;
[L3328]              totalSupply__BasicToken[this] := 0;
[L3366]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3367]  COND FALSE  !(revert)
[L3729]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3730]  COND FALSE  !(revert)
[L3733]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3676]              assume msgsender_MSG != null;
[L3677]              Balance[this] := 0;
[L3678]              allowed_StandardToken[this] := zeroRefRefintArr();
[L3679]              sum_allowed2[this] := 0;
[L3733]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3734]  COND FALSE  !(revert)
[L4029]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4030]  COND FALSE  !(revert)
[L4033]  CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3970]              assume msgsender_MSG != null;
[L3971]              Balance[this] := 0;
[L4033]  RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4034]  COND FALSE  !(revert)
[L4199]  RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4200]  COND FALSE  !(revert)
[L4203]  CALL        call VIE_VIE_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4111]              assume msgsender_MSG != null;
[L4112]              Balance[this] := 0;
[L4113]              name_VIE[this] := -1016296818;
[L4114]              symbol_VIE[this] := 455661269;
[L4115]              decimals_VIE[this] := 18;
[L4116]              INITIAL_SUPPLY_VIE[this] := 1899000000000000000000000000;
[L4117]              __var_19 := ConstantToRef(-385189319374310582173179693124046919983126611732);
[L4118]              holder_VIE[this] := ConstantToRef(-385189319374310582173179693124046919983126611732);
[L4120]              totalSupply__BasicToken[this] := INITIAL_SUPPLY_VIE[this];
[L4121]              sum_balances1[this] := sum_balances1[this] - balances_BasicToken[this][holder_VIE[this]];
[L4122]              balances_BasicToken[this][holder_VIE[this]] := INITIAL_SUPPLY_VIE[this];
[L4123]              sum_balances1[this] := sum_balances1[this] + balances_BasicToken[this][holder_VIE[this]];
[L4124]              assert { :EventEmitted "Transfer_VIE" } true;
[L4203]  RET         call VIE_VIE_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4204]  COND FALSE  !(revert)
[L1743]  RET         call VIE_VIE__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]              assume !revert && gas >= 0;
[L7653]  RET         call VIE_VIE(this, msgsender_MSG, msgvalue_MSG);
[L7654]              assume !revert && gas >= 0;
[L7657]  CALL        call CorralChoice_VIE(this);
[L7445]              havoc msgsender_MSG;
[L7446]              havoc msgvalue_MSG;
[L7447]              havoc choice;
[L7448]              havoc __ret_0_owner;
[L7449]              havoc newOwner_s54;
[L7450]              havoc _spender_s202;
[L7451]              havoc _value_s202;
[L7452]              havoc __ret_0_lock;
[L7453]              havoc _spender_s214;
[L7454]              havoc __ret_0_locking;
[L7455]              havoc _spender_s246;
[L7456]              havoc _addedValue_s246;
[L7457]              havoc __ret_0_increaseLocking;
[L7458]              havoc _spender_s294;
[L7459]              havoc _subtractedValue_s294;
[L7460]              havoc __ret_0_decreaseLocking;
[L7461]              havoc __ret_0_totalSupply;
[L7462]              havoc _owner_s430;
[L7463]              havoc __ret_0_balanceOf;
[L7464]              havoc _to_s418;
[L7465]              havoc _value_s418;
[L7466]              havoc __ret_0_transfer;
[L7467]              havoc _value_s451;
[L7468]              havoc _owner_s710;
[L7469]              havoc _spender_s710;
[L7470]              havoc __ret_0_allowance;
[L7471]              havoc _from_s648;
[L7472]              havoc _to_s648;
[L7473]              havoc _value_s648;
[L7474]              havoc __ret_0_transferFrom;
[L7475]              havoc _spender_s694;
[L7476]              havoc _value_s694;
[L7477]              havoc __ret_0_approve;
[L7478]              havoc _spender_s751;
[L7479]              havoc _addedValue_s751;
[L7480]              havoc __ret_0_increaseApproval;
[L7481]              havoc _spender_s811;
[L7482]              havoc _subtractedValue_s811;
[L7483]              havoc __ret_0_decreaseApproval;
[L7484]              havoc _to_s854;
[L7485]              havoc _amount_s854;
[L7486]              havoc __ret_0_mint;
[L7487]              havoc __ret_0_name;
[L7488]              havoc __ret_0_symbol;
[L7489]              havoc __ret_0_decimals;
[L7490]              havoc __ret_0_INITIAL_SUPPLY;
[L7491]              havoc tmpNow;
[L7492]              havoc gas;
[L7493]              assume gas > 4000000 && gas <= 8000000;
[L7494]              tmpNow := now;
[L7495]              havoc now;
[L7496]              assume now > tmpNow;
[L7497]              assume msgsender_MSG != null;
[L7498]              assume DType[msgsender_MSG] != Ownable;
[L7499]              assume DType[msgsender_MSG] != SafeMath;
[L7500]              assume DType[msgsender_MSG] != LockableToken;
[L7501]              assume DType[msgsender_MSG] != ERC20Basic;
[L7502]              assume DType[msgsender_MSG] != BasicToken;
[L7503]              assume DType[msgsender_MSG] != BurnableToken;
[L7504]              assume DType[msgsender_MSG] != ERC20;
[L7505]              assume DType[msgsender_MSG] != StandardToken;
[L7506]              assume DType[msgsender_MSG] != MintableToken;
[L7507]              assume DType[msgsender_MSG] != VIE;
[L7508]              Alloc[msgsender_MSG] := true;
[L7509]  COND FALSE  !(choice == 20)
[L7515]  COND FALSE  !(choice == 19)
[L7521]  COND TRUE   choice == 18
[L7522]              gas := gas - 21000;
[L7523]  COND TRUE   gas >= 0
[L7524]              assume _value_s202 >= 0 && _value_s202 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7525]              assume msgvalue_MSG == 0;
[L7526]  CALL        call __ret_0_lock := lock~address~uint256_LockableToken(this, msgsender_MSG, msgvalue_MSG, _spender_s202, _value_s202);
[L399]               havoc __exception;
[L400]               revert := false;
[L401]   COND FALSE  !(__exception)
[L427]   CALL        call __ret_0_ := lock~address~uint256_LockableToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s202, _value_s202);
[L3160]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6229]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3160]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3161]  COND FALSE  !(revert)
[L3164]  COND FALSE  !(_value_s202 != 0 && locked_LockableToken[this][_spender_s202] != 0)
[L3168]              sum_locked0[this] := sum_locked0[this] - locked_LockableToken[this][_spender_s202];
[L3169]              locked_LockableToken[this][_spender_s202] := _value_s202;
[L3170]              sum_locked0[this] := sum_locked0[this] + locked_LockableToken[this][_spender_s202];
[L3171]              assert { :EventEmitted "Lock_LockableToken" } true;
[L3172]              __ret_0_ := true;
[L427]   RET         call __ret_0_ := lock~address~uint256_LockableToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s202, _value_s202);
[L428]               assume !revert && gas >= 0;
[L7526]  RET         call __ret_0_lock := lock~address~uint256_LockableToken(this, msgsender_MSG, msgvalue_MSG, _spender_s202, _value_s202);
[L7657]  RET         call CorralChoice_VIE(this);
[L7657]  CALL        call CorralChoice_VIE(this);
[L7445]              havoc msgsender_MSG;
[L7446]              havoc msgvalue_MSG;
[L7447]              havoc choice;
[L7448]              havoc __ret_0_owner;
[L7449]              havoc newOwner_s54;
[L7450]              havoc _spender_s202;
[L7451]              havoc _value_s202;
[L7452]              havoc __ret_0_lock;
[L7453]              havoc _spender_s214;
[L7454]              havoc __ret_0_locking;
[L7455]              havoc _spender_s246;
[L7456]              havoc _addedValue_s246;
[L7457]              havoc __ret_0_increaseLocking;
[L7458]              havoc _spender_s294;
[L7459]              havoc _subtractedValue_s294;
[L7460]              havoc __ret_0_decreaseLocking;
[L7461]              havoc __ret_0_totalSupply;
[L7462]              havoc _owner_s430;
[L7463]              havoc __ret_0_balanceOf;
[L7464]              havoc _to_s418;
[L7465]              havoc _value_s418;
[L7466]              havoc __ret_0_transfer;
[L7467]              havoc _value_s451;
[L7468]              havoc _owner_s710;
[L7469]              havoc _spender_s710;
[L7470]              havoc __ret_0_allowance;
[L7471]              havoc _from_s648;
[L7472]              havoc _to_s648;
[L7473]              havoc _value_s648;
[L7474]              havoc __ret_0_transferFrom;
[L7475]              havoc _spender_s694;
[L7476]              havoc _value_s694;
[L7477]              havoc __ret_0_approve;
[L7478]              havoc _spender_s751;
[L7479]              havoc _addedValue_s751;
[L7480]              havoc __ret_0_increaseApproval;
[L7481]              havoc _spender_s811;
[L7482]              havoc _subtractedValue_s811;
[L7483]              havoc __ret_0_decreaseApproval;
[L7484]              havoc _to_s854;
[L7485]              havoc _amount_s854;
[L7486]              havoc __ret_0_mint;
[L7487]              havoc __ret_0_name;
[L7488]              havoc __ret_0_symbol;
[L7489]              havoc __ret_0_decimals;
[L7490]              havoc __ret_0_INITIAL_SUPPLY;
[L7491]              havoc tmpNow;
[L7492]              havoc gas;
[L7493]              assume gas > 4000000 && gas <= 8000000;
[L7494]              tmpNow := now;
[L7495]              havoc now;
[L7496]              assume now > tmpNow;
[L7497]              assume msgsender_MSG != null;
[L7498]              assume DType[msgsender_MSG] != Ownable;
[L7499]              assume DType[msgsender_MSG] != SafeMath;
[L7500]              assume DType[msgsender_MSG] != LockableToken;
[L7501]              assume DType[msgsender_MSG] != ERC20Basic;
[L7502]              assume DType[msgsender_MSG] != BasicToken;
[L7503]              assume DType[msgsender_MSG] != BurnableToken;
[L7504]              assume DType[msgsender_MSG] != ERC20;
[L7505]              assume DType[msgsender_MSG] != StandardToken;
[L7506]              assume DType[msgsender_MSG] != MintableToken;
[L7507]              assume DType[msgsender_MSG] != VIE;
[L7508]              Alloc[msgsender_MSG] := true;
[L7509]  COND FALSE  !(choice == 20)
[L7515]  COND FALSE  !(choice == 19)
[L7521]  COND FALSE  !(choice == 18)
[L7528]  COND FALSE  !(choice == 17)
[L7534]  COND FALSE  !(choice == 16)
[L7541]  COND FALSE  !(choice == 15)
[L7548]  COND FALSE  !(choice == 14)
[L7554]  COND FALSE  !(choice == 13)
[L7560]  COND TRUE   choice == 12
[L7561]              gas := gas - 21000;
[L7562]  COND TRUE   gas >= 0
[L7563]              assume _value_s418 >= 0 && _value_s418 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7564]              assume msgvalue_MSG == 0;
[L7565]  CALL        call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s418, _value_s418);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s418 && (_value_s418 > balances_BasicToken[this][msgsender_MSG] || balances_BasicToken[this][_to_s418] + _value_s418 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s418 >= 0) && _value_s418 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s418] >= 0) && balances_BasicToken[this][_to_s418] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BasicToken0 := true;
[L2]                 call_transfer_BasicToken0 := false;
[L2]                 revert := revert_hold;
[L845]               havoc __exception;
[L846]               revert := false;
[L847]   COND FALSE  !(__exception)
[L873]   CALL        call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s418, _value_s418);
[L3431]              __var_4 := null;
[L3432]  COND FALSE  !(!(_to_s418 != null))
[L3436]  COND FALSE  !(!(_value_s418 <= balances_BasicToken[this][msgsender_MSG]))
[L3440]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s418);
[L3077]              assert b_s122 <= a_s122;
[L3078]              __ret_0_ := (a_s122 - b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3440]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s418);
[L3441]  COND FALSE  !(revert)
[L3444]  COND FALSE  !(!(locked_LockableToken[this][msgsender_MSG] <= __var_5))
[L3448]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s418);
[L3077]              assert b_s122 <= a_s122;
[L3078]              __ret_0_ := (a_s122 - b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3448]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s418);
[L3449]  COND FALSE  !(revert)
[L3452]              sum_balances1[this] := sum_balances1[this] - balances_BasicToken[this][msgsender_MSG];
[L3453]              balances_BasicToken[this][msgsender_MSG] := __var_6;
[L3454]              sum_balances1[this] := sum_balances1[this] + balances_BasicToken[this][msgsender_MSG];
[L3455]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s418], _value_s418);
[L3091]              c_s146 := (a_s146 + b_s146) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3092]              assert c_s146 >= a_s146;
[L3093]              c_s146 := c_s146;
[L3455]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s418], _value_s418);
[L3456]  COND FALSE  !(revert)
[L3459]              sum_balances1[this] := sum_balances1[this] - balances_BasicToken[this][_to_s418];
[L3460]              balances_BasicToken[this][_to_s418] := __var_7;
[L3461]              sum_balances1[this] := sum_balances1[this] + balances_BasicToken[this][_to_s418];
[L3462]              assert { :EventEmitted "Transfer_BasicToken" } true;
[L3463]              __ret_0_ := true;
[L873]   RET         call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s418, _value_s418);
[L874]               assume !revert && gas >= 0;
[L7565]  RET         call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s418, _value_s418);
[L7657]  RET         call CorralChoice_VIE(this);

Loop:
[L7657]  CALL        call CorralChoice_VIE(this);
[L7445]              havoc msgsender_MSG;
[L7446]              havoc msgvalue_MSG;
[L7447]              havoc choice;
[L7448]              havoc __ret_0_owner;
[L7449]              havoc newOwner_s54;
[L7450]              havoc _spender_s202;
[L7451]              havoc _value_s202;
[L7452]              havoc __ret_0_lock;
[L7453]              havoc _spender_s214;
[L7454]              havoc __ret_0_locking;
[L7455]              havoc _spender_s246;
[L7456]              havoc _addedValue_s246;
[L7457]              havoc __ret_0_increaseLocking;
[L7458]              havoc _spender_s294;
[L7459]              havoc _subtractedValue_s294;
[L7460]              havoc __ret_0_decreaseLocking;
[L7461]              havoc __ret_0_totalSupply;
[L7462]              havoc _owner_s430;
[L7463]              havoc __ret_0_balanceOf;
[L7464]              havoc _to_s418;
[L7465]              havoc _value_s418;
[L7466]              havoc __ret_0_transfer;
[L7467]              havoc _value_s451;
[L7468]              havoc _owner_s710;
[L7469]              havoc _spender_s710;
[L7470]              havoc __ret_0_allowance;
[L7471]              havoc _from_s648;
[L7472]              havoc _to_s648;
[L7473]              havoc _value_s648;
[L7474]              havoc __ret_0_transferFrom;
[L7475]              havoc _spender_s694;
[L7476]              havoc _value_s694;
[L7477]              havoc __ret_0_approve;
[L7478]              havoc _spender_s751;
[L7479]              havoc _addedValue_s751;
[L7480]              havoc __ret_0_increaseApproval;
[L7481]              havoc _spender_s811;
[L7482]              havoc _subtractedValue_s811;
[L7483]              havoc __ret_0_decreaseApproval;
[L7484]              havoc _to_s854;
[L7485]              havoc _amount_s854;
[L7486]              havoc __ret_0_mint;
[L7487]              havoc __ret_0_name;
[L7488]              havoc __ret_0_symbol;
[L7489]              havoc __ret_0_decimals;
[L7490]              havoc __ret_0_INITIAL_SUPPLY;
[L7491]              havoc tmpNow;
[L7492]              havoc gas;
[L7493]              assume gas > 4000000 && gas <= 8000000;
[L7494]              tmpNow := now;
[L7495]              havoc now;
[L7496]              assume now > tmpNow;
[L7497]              assume msgsender_MSG != null;
[L7498]              assume DType[msgsender_MSG] != Ownable;
[L7499]              assume DType[msgsender_MSG] != SafeMath;
[L7500]              assume DType[msgsender_MSG] != LockableToken;
[L7501]              assume DType[msgsender_MSG] != ERC20Basic;
[L7502]              assume DType[msgsender_MSG] != BasicToken;
[L7503]              assume DType[msgsender_MSG] != BurnableToken;
[L7504]              assume DType[msgsender_MSG] != ERC20;
[L7505]              assume DType[msgsender_MSG] != StandardToken;
[L7506]              assume DType[msgsender_MSG] != MintableToken;
[L7507]              assume DType[msgsender_MSG] != VIE;
[L7508]              Alloc[msgsender_MSG] := true;
[L7509]  COND FALSE  !(choice == 20)
[L7515]  COND FALSE  !(choice == 19)
[L7521]  COND FALSE  !(choice == 18)
[L7528]  COND FALSE  !(choice == 17)
[L7534]  COND FALSE  !(choice == 16)
[L7541]  COND FALSE  !(choice == 15)
[L7548]  COND FALSE  !(choice == 14)
[L7554]  COND FALSE  !(choice == 13)
[L7560]  COND TRUE   choice == 12
[L7561]              gas := gas - 21000;
[L7562]  COND TRUE   gas >= 0
[L7563]              assume _value_s418 >= 0 && _value_s418 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7564]              assume msgvalue_MSG == 0;
[L7565]  CALL        call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s418, _value_s418);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s418 && (_value_s418 > balances_BasicToken[this][msgsender_MSG] || balances_BasicToken[this][_to_s418] + _value_s418 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s418 >= 0) && _value_s418 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s418] >= 0) && balances_BasicToken[this][_to_s418] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BasicToken0 := true;
[L2]                 call_transfer_BasicToken0 := false;
[L2]                 revert := revert_hold;
[L845]               havoc __exception;
[L846]               revert := false;
[L847]   COND FALSE  !(__exception)
[L873]   CALL        call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s418, _value_s418);
[L3431]              __var_4 := null;
[L3432]  COND FALSE  !(!(_to_s418 != null))
[L3436]  COND FALSE  !(!(_value_s418 <= balances_BasicToken[this][msgsender_MSG]))
[L3440]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s418);
[L3077]              assert b_s122 <= a_s122;
[L3078]              __ret_0_ := (a_s122 - b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3440]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s418);
[L3441]  COND FALSE  !(revert)
[L3444]  COND FALSE  !(!(locked_LockableToken[this][msgsender_MSG] <= __var_5))
[L3448]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s418);
[L3077]              assert b_s122 <= a_s122;
[L3078]              __ret_0_ := (a_s122 - b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3448]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s418);
[L3449]  COND FALSE  !(revert)
[L3452]              sum_balances1[this] := sum_balances1[this] - balances_BasicToken[this][msgsender_MSG];
[L3453]              balances_BasicToken[this][msgsender_MSG] := __var_6;
[L3454]              sum_balances1[this] := sum_balances1[this] + balances_BasicToken[this][msgsender_MSG];
[L3455]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s418], _value_s418);
[L3091]              c_s146 := (a_s146 + b_s146) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3092]              assert c_s146 >= a_s146;
[L3093]              c_s146 := c_s146;
[L3455]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s418], _value_s418);
[L3456]  COND FALSE  !(revert)
[L3459]              sum_balances1[this] := sum_balances1[this] - balances_BasicToken[this][_to_s418];
[L3460]              balances_BasicToken[this][_to_s418] := __var_7;
[L3461]              sum_balances1[this] := sum_balances1[this] + balances_BasicToken[this][_to_s418];
[L3462]              assert { :EventEmitted "Transfer_BasicToken" } true;
[L3463]              __ret_0_ := true;
[L873]   RET         call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s418, _value_s418);
[L874]               assume !revert && gas >= 0;
[L7565]  RET         call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s418, _value_s418);
[L7657]  RET         call CorralChoice_VIE(this);

[2020-11-25 08:34:03,924 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:34:03,924 INFO  L82        PathProgramCache]: Analyzing trace with hash -973391136, now seen corresponding path program 1 times
[2020-11-25 08:34:03,925 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:34:03,957 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:34:04,526 INFO  L134       CoverageAnalysis]: Checked inductivity of 4349 backedges. 39 proven. 3 refuted. 0 times theorem prover too weak. 4307 trivial. 0 not checked.
[2020-11-25 08:34:04,527 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 08:34:04,527 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [19] total 19
[2020-11-25 08:34:04,527 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:34:04,528 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 20 interpolants.
[2020-11-25 08:34:04,528 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=45, Invalid=335, Unknown=0, NotChecked=0, Total=380
[2020-11-25 08:34:04,528 INFO  L87              Difference]: Start difference. First operand 3135 states and 3398 transitions. cyclomatic complexity: 266 Second operand 20 states.
[2020-11-25 08:34:07,488 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:34:07,488 INFO  L93              Difference]: Finished difference Result 3184 states and 3452 transitions.
[2020-11-25 08:34:07,488 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 21 states. 
[2020-11-25 08:34:07,488 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3184 states and 3452 transitions.
[2020-11-25 08:34:07,493 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:34:07,499 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3184 states to 3184 states and 3452 transitions.
[2020-11-25 08:34:07,499 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 795
[2020-11-25 08:34:07,499 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 795
[2020-11-25 08:34:07,500 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3184 states and 3452 transitions.
[2020-11-25 08:34:07,502 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:34:07,502 INFO  L728         BuchiCegarLoop]: Abstraction has 3184 states and 3452 transitions.
[2020-11-25 08:34:07,504 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3184 states and 3452 transitions.
[2020-11-25 08:34:07,517 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3184 to 3126.
[2020-11-25 08:34:07,517 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3126 states.
[2020-11-25 08:34:07,519 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3126 states to 3126 states and 3389 transitions.
[2020-11-25 08:34:07,519 INFO  L751         BuchiCegarLoop]: Abstraction has 3126 states and 3389 transitions.
[2020-11-25 08:34:07,519 INFO  L631         BuchiCegarLoop]: Abstraction has 3126 states and 3389 transitions.
[2020-11-25 08:34:07,519 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 08:34:07,519 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3126 states and 3389 transitions.
[2020-11-25 08:34:07,522 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:34:07,522 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:34:07,522 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:34:07,524 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 14, 14, 14, 14, 14, 14, 14, 14, 14, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:34:07,524 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_BasicToken0 := false;
[L2]                 call_transfer_BasicToken0 := false;
[L2]     CALL        call main();
[L7647]              assume null == 0;
[L7648]  CALL        call this := FreshRefGenerator__success();
[L2917]              havoc newRef;
[L2918]              assume Alloc[newRef] == false;
[L2919]              Alloc[newRef] := true;
[L2920]              assume newRef != null;
[L7648]  RET         call this := FreshRefGenerator__success();
[L7649]              assume now >= 0;
[L7650]              assume DType[this] == VIE;
[L7651]              assume msgvalue_MSG == 0;
[L7652]              gas := gas - 53000;
[L7653]  CALL        call VIE_VIE(this, msgsender_MSG, msgvalue_MSG);
[L1715]              havoc __exception;
[L1716]              revert := false;
[L1717]  COND FALSE  !(__exception)
[L1743]  CALL        call VIE_VIE__success(this, msgsender_MSG, msgvalue_MSG);
[L4171]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3304]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3289]              assume msgsender_MSG != null;
[L3290]              Balance[this] := 0;
[L3304]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  COND FALSE  !(revert)
[L4171]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]  COND FALSE  !(revert)
[L4175]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3653]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3304]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3289]              assume msgsender_MSG != null;
[L3290]              Balance[this] := 0;
[L3304]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  COND FALSE  !(revert)
[L3653]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3654]  COND FALSE  !(revert)
[L3657]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3634]              assume msgsender_MSG != null;
[L3635]              Balance[this] := 0;
[L3657]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3658]  COND FALSE  !(revert)
[L4175]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4176]  COND FALSE  !(revert)
[L4179]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2953]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              assume msgsender_MSG != null;
[L2937]              Balance[this] := 0;
[L2938]              owner_Ownable[this] := null;
[L2940]              owner_Ownable[this] := msgsender_MSG;
[L2953]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  COND FALSE  !(revert)
[L4179]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4180]  COND FALSE  !(revert)
[L4183]  CALL        call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3131]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2953]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              assume msgsender_MSG != null;
[L2937]              Balance[this] := 0;
[L2938]              owner_Ownable[this] := null;
[L2940]              owner_Ownable[this] := msgsender_MSG;
[L2953]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  COND FALSE  !(revert)
[L3131]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3132]  COND FALSE  !(revert)
[L3135]  CALL        call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3110]              assume msgsender_MSG != null;
[L3111]              Balance[this] := 0;
[L3112]              locked_LockableToken[this] := zeroRefintArr();
[L3113]              sum_locked0[this] := 0;
[L3135]  RET         call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3136]  COND FALSE  !(revert)
[L4183]  RET         call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4184]  COND FALSE  !(revert)
[L4187]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3354]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3304]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3289]              assume msgsender_MSG != null;
[L3290]              Balance[this] := 0;
[L3304]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  COND FALSE  !(revert)
[L3354]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3355]  COND FALSE  !(revert)
[L3358]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2953]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              assume msgsender_MSG != null;
[L2937]              Balance[this] := 0;
[L2938]              owner_Ownable[this] := null;
[L2940]              owner_Ownable[this] := msgsender_MSG;
[L2953]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  COND FALSE  !(revert)
[L3358]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3359]  COND FALSE  !(revert)
[L3362]  CALL        call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3131]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2953]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              assume msgsender_MSG != null;
[L2937]              Balance[this] := 0;
[L2938]              owner_Ownable[this] := null;
[L2940]              owner_Ownable[this] := msgsender_MSG;
[L2953]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  COND FALSE  !(revert)
[L3131]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3132]  COND FALSE  !(revert)
[L3135]  CALL        call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3110]              assume msgsender_MSG != null;
[L3111]              Balance[this] := 0;
[L3112]              locked_LockableToken[this] := zeroRefintArr();
[L3113]              sum_locked0[this] := 0;
[L3135]  RET         call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3136]  COND FALSE  !(revert)
[L3362]  RET         call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3363]  COND FALSE  !(revert)
[L3366]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3324]              assume msgsender_MSG != null;
[L3325]              Balance[this] := 0;
[L3326]              balances_BasicToken[this] := zeroRefintArr();
[L3327]              sum_balances1[this] := 0;
[L3328]              totalSupply__BasicToken[this] := 0;
[L3366]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3367]  COND FALSE  !(revert)
[L4187]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4191]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3713]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3304]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3289]              assume msgsender_MSG != null;
[L3290]              Balance[this] := 0;
[L3304]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  COND FALSE  !(revert)
[L3713]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  COND FALSE  !(revert)
[L3717]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3653]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3304]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3289]              assume msgsender_MSG != null;
[L3290]              Balance[this] := 0;
[L3304]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  COND FALSE  !(revert)
[L3653]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3654]  COND FALSE  !(revert)
[L3657]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3634]              assume msgsender_MSG != null;
[L3635]              Balance[this] := 0;
[L3657]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3658]  COND FALSE  !(revert)
[L3717]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3718]  COND FALSE  !(revert)
[L3721]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2953]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              assume msgsender_MSG != null;
[L2937]              Balance[this] := 0;
[L2938]              owner_Ownable[this] := null;
[L2940]              owner_Ownable[this] := msgsender_MSG;
[L2953]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  COND FALSE  !(revert)
[L3721]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3722]  COND FALSE  !(revert)
[L3725]  CALL        call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3131]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2953]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              assume msgsender_MSG != null;
[L2937]              Balance[this] := 0;
[L2938]              owner_Ownable[this] := null;
[L2940]              owner_Ownable[this] := msgsender_MSG;
[L2953]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  COND FALSE  !(revert)
[L3131]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3132]  COND FALSE  !(revert)
[L3135]  CALL        call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3110]              assume msgsender_MSG != null;
[L3111]              Balance[this] := 0;
[L3112]              locked_LockableToken[this] := zeroRefintArr();
[L3113]              sum_locked0[this] := 0;
[L3135]  RET         call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3136]  COND FALSE  !(revert)
[L3725]  RET         call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3726]  COND FALSE  !(revert)
[L3729]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3354]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3304]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3289]              assume msgsender_MSG != null;
[L3290]              Balance[this] := 0;
[L3304]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  COND FALSE  !(revert)
[L3354]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3355]  COND FALSE  !(revert)
[L3358]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2953]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              assume msgsender_MSG != null;
[L2937]              Balance[this] := 0;
[L2938]              owner_Ownable[this] := null;
[L2940]              owner_Ownable[this] := msgsender_MSG;
[L2953]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  COND FALSE  !(revert)
[L3358]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3359]  COND FALSE  !(revert)
[L3362]  CALL        call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3131]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2953]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              assume msgsender_MSG != null;
[L2937]              Balance[this] := 0;
[L2938]              owner_Ownable[this] := null;
[L2940]              owner_Ownable[this] := msgsender_MSG;
[L2953]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  COND FALSE  !(revert)
[L3131]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3132]  COND FALSE  !(revert)
[L3135]  CALL        call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3110]              assume msgsender_MSG != null;
[L3111]              Balance[this] := 0;
[L3112]              locked_LockableToken[this] := zeroRefintArr();
[L3113]              sum_locked0[this] := 0;
[L3135]  RET         call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3136]  COND FALSE  !(revert)
[L3362]  RET         call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3363]  COND FALSE  !(revert)
[L3366]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3324]              assume msgsender_MSG != null;
[L3325]              Balance[this] := 0;
[L3326]              balances_BasicToken[this] := zeroRefintArr();
[L3327]              sum_balances1[this] := 0;
[L3328]              totalSupply__BasicToken[this] := 0;
[L3366]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3367]  COND FALSE  !(revert)
[L3729]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3730]  COND FALSE  !(revert)
[L3733]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3676]              assume msgsender_MSG != null;
[L3677]              Balance[this] := 0;
[L3678]              allowed_StandardToken[this] := zeroRefRefintArr();
[L3679]              sum_allowed2[this] := 0;
[L3733]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3734]  COND FALSE  !(revert)
[L4191]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4192]  COND FALSE  !(revert)
[L4195]  CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3521]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3304]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3289]              assume msgsender_MSG != null;
[L3290]              Balance[this] := 0;
[L3304]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  COND FALSE  !(revert)
[L3521]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3522]  COND FALSE  !(revert)
[L3525]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2953]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              assume msgsender_MSG != null;
[L2937]              Balance[this] := 0;
[L2938]              owner_Ownable[this] := null;
[L2940]              owner_Ownable[this] := msgsender_MSG;
[L2953]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  COND FALSE  !(revert)
[L3525]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3526]  COND FALSE  !(revert)
[L3529]  CALL        call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3131]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2953]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              assume msgsender_MSG != null;
[L2937]              Balance[this] := 0;
[L2938]              owner_Ownable[this] := null;
[L2940]              owner_Ownable[this] := msgsender_MSG;
[L2953]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  COND FALSE  !(revert)
[L3131]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3132]  COND FALSE  !(revert)
[L3135]  CALL        call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3110]              assume msgsender_MSG != null;
[L3111]              Balance[this] := 0;
[L3112]              locked_LockableToken[this] := zeroRefintArr();
[L3113]              sum_locked0[this] := 0;
[L3135]  RET         call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3136]  COND FALSE  !(revert)
[L3529]  RET         call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3530]  COND FALSE  !(revert)
[L3533]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3354]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3304]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3289]              assume msgsender_MSG != null;
[L3290]              Balance[this] := 0;
[L3304]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  COND FALSE  !(revert)
[L3354]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3355]  COND FALSE  !(revert)
[L3358]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2953]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              assume msgsender_MSG != null;
[L2937]              Balance[this] := 0;
[L2938]              owner_Ownable[this] := null;
[L2940]              owner_Ownable[this] := msgsender_MSG;
[L2953]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  COND FALSE  !(revert)
[L3358]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3359]  COND FALSE  !(revert)
[L3362]  CALL        call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3131]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2953]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              assume msgsender_MSG != null;
[L2937]              Balance[this] := 0;
[L2938]              owner_Ownable[this] := null;
[L2940]              owner_Ownable[this] := msgsender_MSG;
[L2953]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  COND FALSE  !(revert)
[L3131]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3132]  COND FALSE  !(revert)
[L3135]  CALL        call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3110]              assume msgsender_MSG != null;
[L3111]              Balance[this] := 0;
[L3112]              locked_LockableToken[this] := zeroRefintArr();
[L3113]              sum_locked0[this] := 0;
[L3135]  RET         call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3136]  COND FALSE  !(revert)
[L3362]  RET         call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3363]  COND FALSE  !(revert)
[L3366]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3324]              assume msgsender_MSG != null;
[L3325]              Balance[this] := 0;
[L3326]              balances_BasicToken[this] := zeroRefintArr();
[L3327]              sum_balances1[this] := 0;
[L3328]              totalSupply__BasicToken[this] := 0;
[L3366]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3367]  COND FALSE  !(revert)
[L3533]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3534]  COND FALSE  !(revert)
[L3537]  CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3490]              assume msgsender_MSG != null;
[L3491]              Balance[this] := 0;
[L3537]  RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3538]  COND FALSE  !(revert)
[L4195]  RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4196]  COND FALSE  !(revert)
[L4199]  CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4009]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3304]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3289]              assume msgsender_MSG != null;
[L3290]              Balance[this] := 0;
[L3304]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  COND FALSE  !(revert)
[L4009]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4010]  COND FALSE  !(revert)
[L4013]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3653]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3304]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3289]              assume msgsender_MSG != null;
[L3290]              Balance[this] := 0;
[L3304]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  COND FALSE  !(revert)
[L3653]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3654]  COND FALSE  !(revert)
[L3657]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3634]              assume msgsender_MSG != null;
[L3635]              Balance[this] := 0;
[L3657]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3658]  COND FALSE  !(revert)
[L4013]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4014]  COND FALSE  !(revert)
[L4017]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2953]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              assume msgsender_MSG != null;
[L2937]              Balance[this] := 0;
[L2938]              owner_Ownable[this] := null;
[L2940]              owner_Ownable[this] := msgsender_MSG;
[L2953]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  COND FALSE  !(revert)
[L4017]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4018]  COND FALSE  !(revert)
[L4021]  CALL        call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3131]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2953]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              assume msgsender_MSG != null;
[L2937]              Balance[this] := 0;
[L2938]              owner_Ownable[this] := null;
[L2940]              owner_Ownable[this] := msgsender_MSG;
[L2953]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  COND FALSE  !(revert)
[L3131]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3132]  COND FALSE  !(revert)
[L3135]  CALL        call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3110]              assume msgsender_MSG != null;
[L3111]              Balance[this] := 0;
[L3112]              locked_LockableToken[this] := zeroRefintArr();
[L3113]              sum_locked0[this] := 0;
[L3135]  RET         call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3136]  COND FALSE  !(revert)
[L4021]  RET         call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4022]  COND FALSE  !(revert)
[L4025]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3354]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3304]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3289]              assume msgsender_MSG != null;
[L3290]              Balance[this] := 0;
[L3304]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  COND FALSE  !(revert)
[L3354]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3355]  COND FALSE  !(revert)
[L3358]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2953]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              assume msgsender_MSG != null;
[L2937]              Balance[this] := 0;
[L2938]              owner_Ownable[this] := null;
[L2940]              owner_Ownable[this] := msgsender_MSG;
[L2953]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  COND FALSE  !(revert)
[L3358]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3359]  COND FALSE  !(revert)
[L3362]  CALL        call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3131]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2953]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              assume msgsender_MSG != null;
[L2937]              Balance[this] := 0;
[L2938]              owner_Ownable[this] := null;
[L2940]              owner_Ownable[this] := msgsender_MSG;
[L2953]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  COND FALSE  !(revert)
[L3131]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3132]  COND FALSE  !(revert)
[L3135]  CALL        call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3110]              assume msgsender_MSG != null;
[L3111]              Balance[this] := 0;
[L3112]              locked_LockableToken[this] := zeroRefintArr();
[L3113]              sum_locked0[this] := 0;
[L3135]  RET         call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3136]  COND FALSE  !(revert)
[L3362]  RET         call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3363]  COND FALSE  !(revert)
[L3366]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3324]              assume msgsender_MSG != null;
[L3325]              Balance[this] := 0;
[L3326]              balances_BasicToken[this] := zeroRefintArr();
[L3327]              sum_balances1[this] := 0;
[L3328]              totalSupply__BasicToken[this] := 0;
[L3366]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3367]  COND FALSE  !(revert)
[L4025]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4026]  COND FALSE  !(revert)
[L4029]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3713]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3304]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3289]              assume msgsender_MSG != null;
[L3290]              Balance[this] := 0;
[L3304]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  COND FALSE  !(revert)
[L3713]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  COND FALSE  !(revert)
[L3717]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3653]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3304]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3289]              assume msgsender_MSG != null;
[L3290]              Balance[this] := 0;
[L3304]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  COND FALSE  !(revert)
[L3653]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3654]  COND FALSE  !(revert)
[L3657]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3634]              assume msgsender_MSG != null;
[L3635]              Balance[this] := 0;
[L3657]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3658]  COND FALSE  !(revert)
[L3717]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3718]  COND FALSE  !(revert)
[L3721]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2953]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              assume msgsender_MSG != null;
[L2937]              Balance[this] := 0;
[L2938]              owner_Ownable[this] := null;
[L2940]              owner_Ownable[this] := msgsender_MSG;
[L2953]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  COND FALSE  !(revert)
[L3721]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3722]  COND FALSE  !(revert)
[L3725]  CALL        call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3131]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2953]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              assume msgsender_MSG != null;
[L2937]              Balance[this] := 0;
[L2938]              owner_Ownable[this] := null;
[L2940]              owner_Ownable[this] := msgsender_MSG;
[L2953]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  COND FALSE  !(revert)
[L3131]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3132]  COND FALSE  !(revert)
[L3135]  CALL        call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3110]              assume msgsender_MSG != null;
[L3111]              Balance[this] := 0;
[L3112]              locked_LockableToken[this] := zeroRefintArr();
[L3113]              sum_locked0[this] := 0;
[L3135]  RET         call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3136]  COND FALSE  !(revert)
[L3725]  RET         call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3726]  COND FALSE  !(revert)
[L3729]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3354]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3304]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3289]              assume msgsender_MSG != null;
[L3290]              Balance[this] := 0;
[L3304]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  COND FALSE  !(revert)
[L3354]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3355]  COND FALSE  !(revert)
[L3358]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2953]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              assume msgsender_MSG != null;
[L2937]              Balance[this] := 0;
[L2938]              owner_Ownable[this] := null;
[L2940]              owner_Ownable[this] := msgsender_MSG;
[L2953]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  COND FALSE  !(revert)
[L3358]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3359]  COND FALSE  !(revert)
[L3362]  CALL        call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3131]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2953]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              assume msgsender_MSG != null;
[L2937]              Balance[this] := 0;
[L2938]              owner_Ownable[this] := null;
[L2940]              owner_Ownable[this] := msgsender_MSG;
[L2953]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  COND FALSE  !(revert)
[L3131]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3132]  COND FALSE  !(revert)
[L3135]  CALL        call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3110]              assume msgsender_MSG != null;
[L3111]              Balance[this] := 0;
[L3112]              locked_LockableToken[this] := zeroRefintArr();
[L3113]              sum_locked0[this] := 0;
[L3135]  RET         call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3136]  COND FALSE  !(revert)
[L3362]  RET         call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3363]  COND FALSE  !(revert)
[L3366]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3324]              assume msgsender_MSG != null;
[L3325]              Balance[this] := 0;
[L3326]              balances_BasicToken[this] := zeroRefintArr();
[L3327]              sum_balances1[this] := 0;
[L3328]              totalSupply__BasicToken[this] := 0;
[L3366]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3367]  COND FALSE  !(revert)
[L3729]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3730]  COND FALSE  !(revert)
[L3733]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3676]              assume msgsender_MSG != null;
[L3677]              Balance[this] := 0;
[L3678]              allowed_StandardToken[this] := zeroRefRefintArr();
[L3679]              sum_allowed2[this] := 0;
[L3733]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3734]  COND FALSE  !(revert)
[L4029]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4030]  COND FALSE  !(revert)
[L4033]  CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3970]              assume msgsender_MSG != null;
[L3971]              Balance[this] := 0;
[L4033]  RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4034]  COND FALSE  !(revert)
[L4199]  RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4200]  COND FALSE  !(revert)
[L4203]  CALL        call VIE_VIE_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4111]              assume msgsender_MSG != null;
[L4112]              Balance[this] := 0;
[L4113]              name_VIE[this] := -1016296818;
[L4114]              symbol_VIE[this] := 455661269;
[L4115]              decimals_VIE[this] := 18;
[L4116]              INITIAL_SUPPLY_VIE[this] := 1899000000000000000000000000;
[L4117]              __var_19 := ConstantToRef(-385189319374310582173179693124046919983126611732);
[L4118]              holder_VIE[this] := ConstantToRef(-385189319374310582173179693124046919983126611732);
[L4120]              totalSupply__BasicToken[this] := INITIAL_SUPPLY_VIE[this];
[L4121]              sum_balances1[this] := sum_balances1[this] - balances_BasicToken[this][holder_VIE[this]];
[L4122]              balances_BasicToken[this][holder_VIE[this]] := INITIAL_SUPPLY_VIE[this];
[L4123]              sum_balances1[this] := sum_balances1[this] + balances_BasicToken[this][holder_VIE[this]];
[L4124]              assert { :EventEmitted "Transfer_VIE" } true;
[L4203]  RET         call VIE_VIE_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4204]  COND FALSE  !(revert)
[L1743]  RET         call VIE_VIE__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]              assume !revert && gas >= 0;
[L7653]  RET         call VIE_VIE(this, msgsender_MSG, msgvalue_MSG);
[L7654]              assume !revert && gas >= 0;
[L7657]  CALL        call CorralChoice_VIE(this);
[L7445]              havoc msgsender_MSG;
[L7446]              havoc msgvalue_MSG;
[L7447]              havoc choice;
[L7448]              havoc __ret_0_owner;
[L7449]              havoc newOwner_s54;
[L7450]              havoc _spender_s202;
[L7451]              havoc _value_s202;
[L7452]              havoc __ret_0_lock;
[L7453]              havoc _spender_s214;
[L7454]              havoc __ret_0_locking;
[L7455]              havoc _spender_s246;
[L7456]              havoc _addedValue_s246;
[L7457]              havoc __ret_0_increaseLocking;
[L7458]              havoc _spender_s294;
[L7459]              havoc _subtractedValue_s294;
[L7460]              havoc __ret_0_decreaseLocking;
[L7461]              havoc __ret_0_totalSupply;
[L7462]              havoc _owner_s430;
[L7463]              havoc __ret_0_balanceOf;
[L7464]              havoc _to_s418;
[L7465]              havoc _value_s418;
[L7466]              havoc __ret_0_transfer;
[L7467]              havoc _value_s451;
[L7468]              havoc _owner_s710;
[L7469]              havoc _spender_s710;
[L7470]              havoc __ret_0_allowance;
[L7471]              havoc _from_s648;
[L7472]              havoc _to_s648;
[L7473]              havoc _value_s648;
[L7474]              havoc __ret_0_transferFrom;
[L7475]              havoc _spender_s694;
[L7476]              havoc _value_s694;
[L7477]              havoc __ret_0_approve;
[L7478]              havoc _spender_s751;
[L7479]              havoc _addedValue_s751;
[L7480]              havoc __ret_0_increaseApproval;
[L7481]              havoc _spender_s811;
[L7482]              havoc _subtractedValue_s811;
[L7483]              havoc __ret_0_decreaseApproval;
[L7484]              havoc _to_s854;
[L7485]              havoc _amount_s854;
[L7486]              havoc __ret_0_mint;
[L7487]              havoc __ret_0_name;
[L7488]              havoc __ret_0_symbol;
[L7489]              havoc __ret_0_decimals;
[L7490]              havoc __ret_0_INITIAL_SUPPLY;
[L7491]              havoc tmpNow;
[L7492]              havoc gas;
[L7493]              assume gas > 4000000 && gas <= 8000000;
[L7494]              tmpNow := now;
[L7495]              havoc now;
[L7496]              assume now > tmpNow;
[L7497]              assume msgsender_MSG != null;
[L7498]              assume DType[msgsender_MSG] != Ownable;
[L7499]              assume DType[msgsender_MSG] != SafeMath;
[L7500]              assume DType[msgsender_MSG] != LockableToken;
[L7501]              assume DType[msgsender_MSG] != ERC20Basic;
[L7502]              assume DType[msgsender_MSG] != BasicToken;
[L7503]              assume DType[msgsender_MSG] != BurnableToken;
[L7504]              assume DType[msgsender_MSG] != ERC20;
[L7505]              assume DType[msgsender_MSG] != StandardToken;
[L7506]              assume DType[msgsender_MSG] != MintableToken;
[L7507]              assume DType[msgsender_MSG] != VIE;
[L7508]              Alloc[msgsender_MSG] := true;
[L7509]  COND FALSE  !(choice == 20)
[L7515]  COND FALSE  !(choice == 19)
[L7521]  COND FALSE  !(choice == 18)
[L7528]  COND FALSE  !(choice == 17)
[L7534]  COND FALSE  !(choice == 16)
[L7541]  COND FALSE  !(choice == 15)
[L7548]  COND FALSE  !(choice == 14)
[L7554]  COND FALSE  !(choice == 13)
[L7560]  COND FALSE  !(choice == 12)
[L7567]  COND TRUE   choice == 11
[L7568]              gas := gas - 21000;
[L7569]  COND TRUE   gas >= 0
[L7570]              assume _value_s451 >= 0 && _value_s451 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7571]              assume msgvalue_MSG == 0;
[L7572]  CALL        call burn~uint256_BurnableToken(this, msgsender_MSG, msgvalue_MSG, _value_s451);
[L1037]              havoc __exception;
[L1038]              revert := false;
[L1039]  COND FALSE  !(__exception)
[L1065]  CALL        call burn~uint256_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG, _value_s451);
[L3562]  COND TRUE   DType[this] == VIE
[L3563]  CALL        call _burn~address~uint256_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _value_s451);
[L3603]  COND FALSE  !(!(_value_s498 <= balances_BasicToken[this][_who_s498]))
[L3607]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_who_s498], _value_s498);
[L3077]              assert b_s122 <= a_s122;
[L3078]              __ret_0_ := (a_s122 - b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3607]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_who_s498], _value_s498);
[L3608]  COND FALSE  !(revert)
[L3611]              sum_balances1[this] := sum_balances1[this] - balances_BasicToken[this][_who_s498];
[L3612]              balances_BasicToken[this][_who_s498] := __var_8;
[L3613]              sum_balances1[this] := sum_balances1[this] + balances_BasicToken[this][_who_s498];
[L3614]  CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _value_s498);
[L3077]              assert b_s122 <= a_s122;
[L3078]              __ret_0_ := (a_s122 - b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3614]  RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _value_s498);
[L3615]  COND FALSE  !(revert)
[L3618]              totalSupply__BasicToken[this] := __var_9;
[L3619]              assert { :EventEmitted "Burn_BurnableToken" } true;
[L3620]              assert { :EventEmitted "Transfer_BurnableToken" } true;
[L3563]  RET         call _burn~address~uint256_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _value_s451);
[L3564]  COND FALSE  !(revert)
[L1065]  RET         call burn~uint256_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG, _value_s451);
[L1066]              assume !revert && gas >= 0;
[L7572]  RET         call burn~uint256_BurnableToken(this, msgsender_MSG, msgvalue_MSG, _value_s451);
[L7657]  RET         call CorralChoice_VIE(this);
[L7657]  CALL        call CorralChoice_VIE(this);
[L7445]              havoc msgsender_MSG;
[L7446]              havoc msgvalue_MSG;
[L7447]              havoc choice;
[L7448]              havoc __ret_0_owner;
[L7449]              havoc newOwner_s54;
[L7450]              havoc _spender_s202;
[L7451]              havoc _value_s202;
[L7452]              havoc __ret_0_lock;
[L7453]              havoc _spender_s214;
[L7454]              havoc __ret_0_locking;
[L7455]              havoc _spender_s246;
[L7456]              havoc _addedValue_s246;
[L7457]              havoc __ret_0_increaseLocking;
[L7458]              havoc _spender_s294;
[L7459]              havoc _subtractedValue_s294;
[L7460]              havoc __ret_0_decreaseLocking;
[L7461]              havoc __ret_0_totalSupply;
[L7462]              havoc _owner_s430;
[L7463]              havoc __ret_0_balanceOf;
[L7464]              havoc _to_s418;
[L7465]              havoc _value_s418;
[L7466]              havoc __ret_0_transfer;
[L7467]              havoc _value_s451;
[L7468]              havoc _owner_s710;
[L7469]              havoc _spender_s710;
[L7470]              havoc __ret_0_allowance;
[L7471]              havoc _from_s648;
[L7472]              havoc _to_s648;
[L7473]              havoc _value_s648;
[L7474]              havoc __ret_0_transferFrom;
[L7475]              havoc _spender_s694;
[L7476]              havoc _value_s694;
[L7477]              havoc __ret_0_approve;
[L7478]              havoc _spender_s751;
[L7479]              havoc _addedValue_s751;
[L7480]              havoc __ret_0_increaseApproval;
[L7481]              havoc _spender_s811;
[L7482]              havoc _subtractedValue_s811;
[L7483]              havoc __ret_0_decreaseApproval;
[L7484]              havoc _to_s854;
[L7485]              havoc _amount_s854;
[L7486]              havoc __ret_0_mint;
[L7487]              havoc __ret_0_name;
[L7488]              havoc __ret_0_symbol;
[L7489]              havoc __ret_0_decimals;
[L7490]              havoc __ret_0_INITIAL_SUPPLY;
[L7491]              havoc tmpNow;
[L7492]              havoc gas;
[L7493]              assume gas > 4000000 && gas <= 8000000;
[L7494]              tmpNow := now;
[L7495]              havoc now;
[L7496]              assume now > tmpNow;
[L7497]              assume msgsender_MSG != null;
[L7498]              assume DType[msgsender_MSG] != Ownable;
[L7499]              assume DType[msgsender_MSG] != SafeMath;
[L7500]              assume DType[msgsender_MSG] != LockableToken;
[L7501]              assume DType[msgsender_MSG] != ERC20Basic;
[L7502]              assume DType[msgsender_MSG] != BasicToken;
[L7503]              assume DType[msgsender_MSG] != BurnableToken;
[L7504]              assume DType[msgsender_MSG] != ERC20;
[L7505]              assume DType[msgsender_MSG] != StandardToken;
[L7506]              assume DType[msgsender_MSG] != MintableToken;
[L7507]              assume DType[msgsender_MSG] != VIE;
[L7508]              Alloc[msgsender_MSG] := true;
[L7509]  COND FALSE  !(choice == 20)
[L7515]  COND FALSE  !(choice == 19)
[L7521]  COND FALSE  !(choice == 18)
[L7528]  COND FALSE  !(choice == 17)
[L7534]  COND FALSE  !(choice == 16)
[L7541]  COND FALSE  !(choice == 15)
[L7548]  COND FALSE  !(choice == 14)
[L7554]  COND FALSE  !(choice == 13)
[L7560]  COND TRUE   choice == 12
[L7561]              gas := gas - 21000;
[L7562]  COND TRUE   gas >= 0
[L7563]              assume _value_s418 >= 0 && _value_s418 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7564]              assume msgvalue_MSG == 0;
[L7565]  CALL        call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s418, _value_s418);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s418 && (_value_s418 > balances_BasicToken[this][msgsender_MSG] || balances_BasicToken[this][_to_s418] + _value_s418 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s418 >= 0) && _value_s418 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s418] >= 0) && balances_BasicToken[this][_to_s418] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BasicToken0 := true;
[L2]                 call_transfer_BasicToken0 := false;
[L2]                 revert := revert_hold;
[L845]               havoc __exception;
[L846]               revert := false;
[L847]   COND FALSE  !(__exception)
[L873]   CALL        call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s418, _value_s418);
[L3431]              __var_4 := null;
[L3432]  COND FALSE  !(!(_to_s418 != null))
[L3436]  COND FALSE  !(!(_value_s418 <= balances_BasicToken[this][msgsender_MSG]))
[L3440]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s418);
[L3077]              assert b_s122 <= a_s122;
[L3078]              __ret_0_ := (a_s122 - b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3440]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s418);
[L3441]  COND FALSE  !(revert)
[L3444]  COND FALSE  !(!(locked_LockableToken[this][msgsender_MSG] <= __var_5))
[L3448]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s418);
[L3077]              assert b_s122 <= a_s122;
[L3078]              __ret_0_ := (a_s122 - b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3448]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s418);
[L3449]  COND FALSE  !(revert)
[L3452]              sum_balances1[this] := sum_balances1[this] - balances_BasicToken[this][msgsender_MSG];
[L3453]              balances_BasicToken[this][msgsender_MSG] := __var_6;
[L3454]              sum_balances1[this] := sum_balances1[this] + balances_BasicToken[this][msgsender_MSG];
[L3455]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s418], _value_s418);
[L3091]              c_s146 := (a_s146 + b_s146) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3092]              assert c_s146 >= a_s146;
[L3093]              c_s146 := c_s146;
[L3455]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s418], _value_s418);
[L3456]  COND FALSE  !(revert)
[L3459]              sum_balances1[this] := sum_balances1[this] - balances_BasicToken[this][_to_s418];
[L3460]              balances_BasicToken[this][_to_s418] := __var_7;
[L3461]              sum_balances1[this] := sum_balances1[this] + balances_BasicToken[this][_to_s418];
[L3462]              assert { :EventEmitted "Transfer_BasicToken" } true;
[L3463]              __ret_0_ := true;
[L873]   RET         call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s418, _value_s418);
[L874]               assume !revert && gas >= 0;
[L7565]  RET         call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s418, _value_s418);
[L7657]  RET         call CorralChoice_VIE(this);

Loop:
[L7657]  CALL        call CorralChoice_VIE(this);
[L7445]              havoc msgsender_MSG;
[L7446]              havoc msgvalue_MSG;
[L7447]              havoc choice;
[L7448]              havoc __ret_0_owner;
[L7449]              havoc newOwner_s54;
[L7450]              havoc _spender_s202;
[L7451]              havoc _value_s202;
[L7452]              havoc __ret_0_lock;
[L7453]              havoc _spender_s214;
[L7454]              havoc __ret_0_locking;
[L7455]              havoc _spender_s246;
[L7456]              havoc _addedValue_s246;
[L7457]              havoc __ret_0_increaseLocking;
[L7458]              havoc _spender_s294;
[L7459]              havoc _subtractedValue_s294;
[L7460]              havoc __ret_0_decreaseLocking;
[L7461]              havoc __ret_0_totalSupply;
[L7462]              havoc _owner_s430;
[L7463]              havoc __ret_0_balanceOf;
[L7464]              havoc _to_s418;
[L7465]              havoc _value_s418;
[L7466]              havoc __ret_0_transfer;
[L7467]              havoc _value_s451;
[L7468]              havoc _owner_s710;
[L7469]              havoc _spender_s710;
[L7470]              havoc __ret_0_allowance;
[L7471]              havoc _from_s648;
[L7472]              havoc _to_s648;
[L7473]              havoc _value_s648;
[L7474]              havoc __ret_0_transferFrom;
[L7475]              havoc _spender_s694;
[L7476]              havoc _value_s694;
[L7477]              havoc __ret_0_approve;
[L7478]              havoc _spender_s751;
[L7479]              havoc _addedValue_s751;
[L7480]              havoc __ret_0_increaseApproval;
[L7481]              havoc _spender_s811;
[L7482]              havoc _subtractedValue_s811;
[L7483]              havoc __ret_0_decreaseApproval;
[L7484]              havoc _to_s854;
[L7485]              havoc _amount_s854;
[L7486]              havoc __ret_0_mint;
[L7487]              havoc __ret_0_name;
[L7488]              havoc __ret_0_symbol;
[L7489]              havoc __ret_0_decimals;
[L7490]              havoc __ret_0_INITIAL_SUPPLY;
[L7491]              havoc tmpNow;
[L7492]              havoc gas;
[L7493]              assume gas > 4000000 && gas <= 8000000;
[L7494]              tmpNow := now;
[L7495]              havoc now;
[L7496]              assume now > tmpNow;
[L7497]              assume msgsender_MSG != null;
[L7498]              assume DType[msgsender_MSG] != Ownable;
[L7499]              assume DType[msgsender_MSG] != SafeMath;
[L7500]              assume DType[msgsender_MSG] != LockableToken;
[L7501]              assume DType[msgsender_MSG] != ERC20Basic;
[L7502]              assume DType[msgsender_MSG] != BasicToken;
[L7503]              assume DType[msgsender_MSG] != BurnableToken;
[L7504]              assume DType[msgsender_MSG] != ERC20;
[L7505]              assume DType[msgsender_MSG] != StandardToken;
[L7506]              assume DType[msgsender_MSG] != MintableToken;
[L7507]              assume DType[msgsender_MSG] != VIE;
[L7508]              Alloc[msgsender_MSG] := true;
[L7509]  COND FALSE  !(choice == 20)
[L7515]  COND FALSE  !(choice == 19)
[L7521]  COND FALSE  !(choice == 18)
[L7528]  COND FALSE  !(choice == 17)
[L7534]  COND FALSE  !(choice == 16)
[L7541]  COND FALSE  !(choice == 15)
[L7548]  COND FALSE  !(choice == 14)
[L7554]  COND FALSE  !(choice == 13)
[L7560]  COND TRUE   choice == 12
[L7561]              gas := gas - 21000;
[L7562]  COND TRUE   gas >= 0
[L7563]              assume _value_s418 >= 0 && _value_s418 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7564]              assume msgvalue_MSG == 0;
[L7565]  CALL        call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s418, _value_s418);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s418 && (_value_s418 > balances_BasicToken[this][msgsender_MSG] || balances_BasicToken[this][_to_s418] + _value_s418 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s418 >= 0) && _value_s418 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s418] >= 0) && balances_BasicToken[this][_to_s418] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BasicToken0 := true;
[L2]                 call_transfer_BasicToken0 := false;
[L2]                 revert := revert_hold;
[L845]               havoc __exception;
[L846]               revert := false;
[L847]   COND FALSE  !(__exception)
[L873]   CALL        call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s418, _value_s418);
[L3431]              __var_4 := null;
[L3432]  COND FALSE  !(!(_to_s418 != null))
[L3436]  COND FALSE  !(!(_value_s418 <= balances_BasicToken[this][msgsender_MSG]))
[L3440]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s418);
[L3077]              assert b_s122 <= a_s122;
[L3078]              __ret_0_ := (a_s122 - b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3440]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s418);
[L3441]  COND FALSE  !(revert)
[L3444]  COND FALSE  !(!(locked_LockableToken[this][msgsender_MSG] <= __var_5))
[L3448]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s418);
[L3077]              assert b_s122 <= a_s122;
[L3078]              __ret_0_ := (a_s122 - b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3448]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s418);
[L3449]  COND FALSE  !(revert)
[L3452]              sum_balances1[this] := sum_balances1[this] - balances_BasicToken[this][msgsender_MSG];
[L3453]              balances_BasicToken[this][msgsender_MSG] := __var_6;
[L3454]              sum_balances1[this] := sum_balances1[this] + balances_BasicToken[this][msgsender_MSG];
[L3455]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s418], _value_s418);
[L3091]              c_s146 := (a_s146 + b_s146) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3092]              assert c_s146 >= a_s146;
[L3093]              c_s146 := c_s146;
[L3455]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s418], _value_s418);
[L3456]  COND FALSE  !(revert)
[L3459]              sum_balances1[this] := sum_balances1[this] - balances_BasicToken[this][_to_s418];
[L3460]              balances_BasicToken[this][_to_s418] := __var_7;
[L3461]              sum_balances1[this] := sum_balances1[this] + balances_BasicToken[this][_to_s418];
[L3462]              assert { :EventEmitted "Transfer_BasicToken" } true;
[L3463]              __ret_0_ := true;
[L873]   RET         call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s418, _value_s418);
[L874]               assume !revert && gas >= 0;
[L7565]  RET         call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s418, _value_s418);
[L7657]  RET         call CorralChoice_VIE(this);

[2020-11-25 08:34:07,530 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:34:07,531 INFO  L82        PathProgramCache]: Analyzing trace with hash 837411278, now seen corresponding path program 1 times
[2020-11-25 08:34:07,531 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:34:07,568 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:34:08,004 INFO  L134       CoverageAnalysis]: Checked inductivity of 4359 backedges. 0 proven. 3 refuted. 0 times theorem prover too weak. 4356 trivial. 0 not checked.
[2020-11-25 08:34:08,004 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 08:34:08,005 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [11] total 11
[2020-11-25 08:34:08,005 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:34:08,005 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 11 interpolants.
[2020-11-25 08:34:08,005 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=23, Invalid=87, Unknown=0, NotChecked=0, Total=110
[2020-11-25 08:34:08,005 INFO  L87              Difference]: Start difference. First operand 3126 states and 3389 transitions. cyclomatic complexity: 266 Second operand 11 states.
[2020-11-25 08:34:09,153 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:34:09,154 INFO  L93              Difference]: Finished difference Result 1815 states and 1962 transitions.
[2020-11-25 08:34:09,154 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 11 states. 
[2020-11-25 08:34:09,155 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1815 states and 1962 transitions.
[2020-11-25 08:34:09,157 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 08:34:09,158 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1815 states to 0 states and 0 transitions.
[2020-11-25 08:34:09,158 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-25 08:34:09,158 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-25 08:34:09,158 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-25 08:34:09,158 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:34:09,158 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 08:34:09,158 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 08:34:09,158 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 08:34:09,158 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 08:34:09,158 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-25 08:34:09,158 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 08:34:09,158 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-25 08:34:09,161 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 08:34:09 BasicIcfg
[2020-11-25 08:34:09,161 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 08:34:09,161 INFO  L168              Benchmark]: Toolchain (without parser) took 16898.45 ms. Allocated memory was 1.0 GB in the beginning and 2.9 GB in the end (delta: 1.9 GB). Free memory was 929.8 MB in the beginning and 1.8 GB in the end (delta: -827.8 MB). Peak memory consumption was 1.0 GB. Max. memory is 15.3 GB.
[2020-11-25 08:34:09,163 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 08:34:09,163 INFO  L168              Benchmark]: Boogie Preprocessor took 123.67 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 913.7 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
[2020-11-25 08:34:09,163 INFO  L168              Benchmark]: UtopiaSpecLang took 68.23 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 903.0 MB in the end (delta: 10.8 MB). Peak memory consumption was 10.8 MB. Max. memory is 15.3 GB.
[2020-11-25 08:34:09,164 INFO  L168              Benchmark]: Boogie Printer took 23.16 ms. Allocated memory is still 1.0 GB. Free memory was 903.0 MB in the beginning and 897.5 MB in the end (delta: 5.5 MB). Peak memory consumption was 5.5 MB. Max. memory is 15.3 GB.
[2020-11-25 08:34:09,164 INFO  L168              Benchmark]: RCFGBuilder took 1277.26 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 69.2 MB). Free memory was 897.5 MB in the beginning and 954.4 MB in the end (delta: -56.9 MB). Peak memory consumption was 186.2 MB. Max. memory is 15.3 GB.
[2020-11-25 08:34:09,164 INFO  L168              Benchmark]: UtopiaLTL2Aut took 39.42 ms. Allocated memory is still 1.1 GB. Free memory was 954.4 MB in the beginning and 947.3 MB in the end (delta: 7.0 MB). Peak memory consumption was 7.0 MB. Max. memory is 15.3 GB.
[2020-11-25 08:34:09,164 INFO  L168              Benchmark]: BÃ¼chi Program Product took 2320.66 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 185.6 MB). Free memory was 947.3 MB in the beginning and 1.1 GB in the end (delta: -146.5 MB). Peak memory consumption was 512.5 MB. Max. memory is 15.3 GB.
[2020-11-25 08:34:09,165 INFO  L168              Benchmark]: BlockEncodingV2 took 175.34 ms. Allocated memory is still 1.3 GB. Free memory was 1.1 GB in the beginning and 988.9 MB in the end (delta: 105.0 MB). Peak memory consumption was 105.0 MB. Max. memory is 15.3 GB.
[2020-11-25 08:34:09,165 INFO  L168              Benchmark]: BuchiAutomizer took 12867.43 ms. Allocated memory was 1.3 GB in the beginning and 2.9 GB in the end (delta: 1.6 GB). Free memory was 988.9 MB in the beginning and 1.8 GB in the end (delta: -768.8 MB). Peak memory consumption was 830.8 MB. Max. memory is 15.3 GB.
[2020-11-25 08:34:09,168 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    6672 locations, 12271 edges
  - StatisticsResult: Encoded RCFG
    6574 locations, 12036 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 123.67 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 913.7 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 68.23 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 903.0 MB in the end (delta: 10.8 MB). Peak memory consumption was 10.8 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 23.16 ms. Allocated memory is still 1.0 GB. Free memory was 903.0 MB in the beginning and 897.5 MB in the end (delta: 5.5 MB). Peak memory consumption was 5.5 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 1277.26 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 69.2 MB). Free memory was 897.5 MB in the beginning and 954.4 MB in the end (delta: -56.9 MB). Peak memory consumption was 186.2 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 39.42 ms. Allocated memory is still 1.1 GB. Free memory was 954.4 MB in the beginning and 947.3 MB in the end (delta: 7.0 MB). Peak memory consumption was 7.0 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 2320.66 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 185.6 MB). Free memory was 947.3 MB in the beginning and 1.1 GB in the end (delta: -146.5 MB). Peak memory consumption was 512.5 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 175.34 ms. Allocated memory is still 1.3 GB. Free memory was 1.1 GB in the beginning and 988.9 MB in the end (delta: 105.0 MB). Peak memory consumption was 105.0 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 12867.43 ms. Allocated memory was 1.3 GB in the beginning and 2.9 GB in the end (delta: 1.6 GB). Free memory was 988.9 MB in the beginning and 1.8 GB in the end (delta: -768.8 MB). Peak memory consumption was 830.8 MB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    2637 locations, 3705 edges
  - StatisticsResult: BuchiProgram size
    6672 locations, 12271 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 6 terminating modules (6 trivial, 0 deterministic, 0 nondeterministic). 6 modules have a trivial ranking function, the largest among these consists of 24 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 12.8s and 7 iterations.  TraceHistogramMax:20. Analysis of lassos took 2.6s. Construction of modules took 7.3s. BÃ¼chi inclusion checks took 2.2s. Highest rank in rank-based complementation 0. Minimization of det autom 6. Minimization of nondet autom 0. Automata minimization 0.1s AutomataMinimizationTime, 5 MinimizatonAttempts, 1520 StatesRemovedByMinimization, 4 NontrivialMinimizations. Non-live state removal took 0.1s Buchi closure took 0.0s. Biggest automaton had 3480 states and ocurred in iteration 2.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 19461 SDtfs, 18900 SDslu, 41734 SDs, 0 SdLazy, 101667 SolverSat, 3026 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 7.3s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU6 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_transfer_(fail_transfer_BasicToken0)asicToken0) ==> ( <>(fail_transfer_BasicToken0) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
