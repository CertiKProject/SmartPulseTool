This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 06:41:33,414 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 06:41:33,415 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 06:41:33,427 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 06:41:33,427 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 06:41:33,428 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 06:41:33,429 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 06:41:33,431 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 06:41:33,432 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 06:41:33,433 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 06:41:33,434 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 06:41:33,434 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 06:41:33,435 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 06:41:33,435 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 06:41:33,436 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 06:41:33,437 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 06:41:33,438 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 06:41:33,439 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 06:41:33,440 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 06:41:33,442 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 06:41:33,443 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 06:41:33,444 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 06:41:33,445 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 06:41:33,445 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 06:41:33,445 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 06:41:33,446 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 06:41:33,446 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 06:41:33,447 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 06:41:33,447 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 06:41:33,447 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 06:41:33,448 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 06:41:33,448 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 06:41:33,449 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 06:41:33,449 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 06:41:33,450 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 06:41:33,450 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 06:41:33,451 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 06:41:33,451 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 06:41:33,451 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 06:41:33,452 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 06:41:33,452 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 06:41:33,452 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 06:41:33,460 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 06:41:33,460 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 06:41:33,461 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 06:41:33,462 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 06:41:33,462 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 06:41:33,462 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 06:41:33,462 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 06:41:33,462 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 06:41:33,462 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 06:41:33,462 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 06:41:33,462 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 06:41:33,462 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 06:41:33,463 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 06:41:33,463 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 06:41:33,463 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 06:41:33,463 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 06:41:33,463 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 06:41:33,463 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 06:41:33,463 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 06:41:33,463 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 06:41:33,463 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 06:41:33,463 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 06:41:33,464 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 06:41:33,464 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 06:41:33,464 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 06:41:33,464 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 06:41:33,487 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 06:41:33,498 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 06:41:33,500 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 06:41:33,501 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 06:41:33,502 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 06:41:33,502 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/TSTToken_0xf67041758d3b6e56d6fdafa5b32038302c3634da_transfer-self.bpl
[2020-11-25 06:41:33,503 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/TSTToken_0xf67041758d3b6e56d6fdafa5b32038302c3634da_transfer-self.bpl'
[2020-11-25 06:41:33,598 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 06:41:33,600 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 06:41:33,600 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 06:41:33,600 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 06:41:33,600 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 06:41:33,617 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "TSTToken_0xf67041758d3b6e56d6fdafa5b32038302c3634da_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:41:33" (1/1) ...
[2020-11-25 06:41:33,618 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "TSTToken_0xf67041758d3b6e56d6fdafa5b32038302c3634da_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:41:33" (1/1) ...
[2020-11-25 06:41:33,662 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "TSTToken_0xf67041758d3b6e56d6fdafa5b32038302c3634da_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:41:33" (1/1) ...
[2020-11-25 06:41:33,663 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "TSTToken_0xf67041758d3b6e56d6fdafa5b32038302c3634da_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:41:33" (1/1) ...
[2020-11-25 06:41:33,688 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "TSTToken_0xf67041758d3b6e56d6fdafa5b32038302c3634da_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:41:33" (1/1) ...
[2020-11-25 06:41:33,703 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "TSTToken_0xf67041758d3b6e56d6fdafa5b32038302c3634da_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:41:33" (1/1) ...
[2020-11-25 06:41:33,714 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "TSTToken_0xf67041758d3b6e56d6fdafa5b32038302c3634da_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:41:33" (1/1) ...
[2020-11-25 06:41:33,728 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 06:41:33,732 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 06:41:33,732 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 06:41:33,736 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 06:41:33,742 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "TSTToken_0xf67041758d3b6e56d6fdafa5b32038302c3634da_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:41:33" (1/1) ...
[2020-11-25 06:41:33,763 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(BasicToken.transfer(to, value), msg.sender == to && value <= balances_BasicToken[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][to] >= 0 && balances_BasicToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][msg.sender] >= 0 &&  balances_BasicToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(BasicToken.transfer(to, value), return == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && balances_BasicToken[this] == old(balances_BasicToken[this]) && allowed_StandardToken[this] == old(allowed_StandardToken[this]) && name_TSTToken[this] == old(name_TSTToken[this]) && symbol_TSTToken[this] == old(symbol_TSTToken[this]) && decimals_TSTToken[this] == old(decimals_TSTToken[this]) && cap_CappedToken[this] == old(cap_CappedToken[this]) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]))))
[2020-11-25 06:41:33,768 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(BasicToken.transfer(to, value), msg.sender == to && value <= balances_BasicToken[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][to] >= 0 && balances_BasicToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][msg.sender] >= 0 &&  balances_BasicToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(BasicToken.transfer(to, value), return == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && balances_BasicToken[this] == old(balances_BasicToken[this]) && allowed_StandardToken[this] == old(allowed_StandardToken[this]) && name_TSTToken[this] == old(name_TSTToken[this]) && symbol_TSTToken[this] == old(symbol_TSTToken[this]) && decimals_TSTToken[this] == old(decimals_TSTToken[this]) && cap_CappedToken[this] == old(cap_CappedToken[this]) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]))))
[2020-11-25 06:41:33,777 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(BasicToken.transfer(to, value), msg.sender == to && value <= balances_BasicToken[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][to] >= 0 && balances_BasicToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][msg.sender] >= 0 &&  balances_BasicToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(BasicToken.transfer(to, value), return == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && balances_BasicToken[this] == old(balances_BasicToken[this]) && allowed_StandardToken[this] == old(allowed_StandardToken[this]) && name_TSTToken[this] == old(name_TSTToken[this]) && symbol_TSTToken[this] == old(symbol_TSTToken[this]) && decimals_TSTToken[this] == old(decimals_TSTToken[this]) && cap_CappedToken[this] == old(cap_CappedToken[this]) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]))))
[2020-11-25 06:41:33,784 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( msg.sender==_to_s286 && _value_s286<=balances_BasicToken[this][msg.sender] ) && _value_s286>=0 ) && _value_s286<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_BasicToken[this][_to_s286]>=0 ) && balances_BasicToken[this][_to_s286]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_BasicToken[this][msg.sender]>=0 ) && balances_BasicToken[this][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>],IdentifierExpression[_to_s286,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>]],BinaryExpression[COMPLEQ,IdentifierExpression[_value_s286,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>]]]]],BinaryExpression[COMPGEQ,IdentifierExpression[_value_s286,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[_value_s286,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>]]],[IdentifierExpression[_to_s286,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>]]],[IdentifierExpression[_to_s286,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 06:41:33,786 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( __ret_0_==true && totalSupply__BasicToken[this]==( old(totalSupply__BasicToken[this]) ) ) && balances_BasicToken[this]==( old(balances_BasicToken[this]) ) ) && allowed_StandardToken[this]==( old(allowed_StandardToken[this]) ) ) && name_TSTToken[this]==( old(name_TSTToken[this]) ) ) && symbol_TSTToken[this]==( old(symbol_TSTToken[this]) ) ) && decimals_TSTToken[this]==( old(decimals_TSTToken[this]) ) ) && cap_CappedToken[this]==( old(cap_CappedToken[this]) ) ) && mintingFinished_MintableToken[this]==( old(mintingFinished_MintableToken[this]) ) ) && owner_Ownable[this]==( old(owner_Ownable[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[__ret_0_,<IMPLEMENTATION_OUTPARAM,transfer~address~uint256_BasicToken>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[totalSupply__BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[totalSupply__BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[allowed_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[allowed_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[name_TSTToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[name_TSTToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[symbol_TSTToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[symbol_TSTToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[decimals_TSTToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[decimals_TSTToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[cap_CappedToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[cap_CappedToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[mintingFinished_MintableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[mintingFinished_MintableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[owner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[owner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>]]]]]]
[2020-11-25 06:41:33,794 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(BasicToken.transfer(to, value), msg.sender == to && value <= balances_BasicToken[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][to] >= 0 && balances_BasicToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][msg.sender] >= 0 &&  balances_BasicToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(BasicToken.transfer(to, value), return == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && balances_BasicToken[this] == old(balances_BasicToken[this]) && allowed_StandardToken[this] == old(allowed_StandardToken[this]) && name_TSTToken[this] == old(name_TSTToken[this]) && symbol_TSTToken[this] == old(symbol_TSTToken[this]) && decimals_TSTToken[this] == old(decimals_TSTToken[this]) && cap_CappedToken[this] == old(cap_CappedToken[this]) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]))))
[2020-11-25 06:41:33,795 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transfer_BasicToken0) ==> ( <>AP(success_transfer_BasicToken0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 06:41:33,808 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 06:41:33 PropertyContainer
[2020-11-25 06:41:33,808 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 06:41:33,809 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 06:41:33,809 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 06:41:33,809 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 06:41:33,810 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "TSTToken_0xf67041758d3b6e56d6fdafa5b32038302c3634da_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:41:33" (1/2) ...
[2020-11-25 06:41:33,810 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 06:41:33,810 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 06:41:33,830 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 06:41:33" (2/2) ...
[2020-11-25 06:41:33,831 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 06:41:33,831 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 06:41:33,831 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 06:41:33,831 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 06:41:33,832 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "TSTToken_0xf67041758d3b6e56d6fdafa5b32038302c3634da_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:41:33" (1/2) ...
[2020-11-25 06:41:33,887 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 06:41:33,887 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 06:41:33,887 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 06:41:33,887 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 06:41:33,887 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 06:41:33,887 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 06:41:33,887 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 06:41:33,888 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 06:41:33,888 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-25 06:41:33,888 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable
[2020-11-25 06:41:33,888 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable
[2020-11-25 06:41:33,888 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable
[2020-11-25 06:41:33,888 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable
[2020-11-25 06:41:33,888 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable
[2020-11-25 06:41:33,888 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable
[2020-11-25 06:41:33,889 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferOwnership~address_Ownable__success
[2020-11-25 06:41:33,889 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable
[2020-11-25 06:41:33,890 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable
[2020-11-25 06:41:33,890 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic_NoBaseCtor__success
[2020-11-25 06:41:33,890 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic
[2020-11-25 06:41:33,890 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic
[2020-11-25 06:41:33,890 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20Basic
[2020-11-25 06:41:33,890 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20Basic
[2020-11-25 06:41:33,890 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Basic
[2020-11-25 06:41:33,890 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken_NoBaseCtor__success
[2020-11-25 06:41:33,890 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken
[2020-11-25 06:41:33,890 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken
[2020-11-25 06:41:33,890 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken
[2020-11-25 06:41:33,890 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken
[2020-11-25 06:41:33,891 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken
[2020-11-25 06:41:33,891 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken
[2020-11-25 06:41:33,891 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken
[2020-11-25 06:41:33,891 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken
[2020-11-25 06:41:33,891 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 06:41:33,891 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 06:41:33,891 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 06:41:33,891 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 06:41:33,891 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 06:41:33,891 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 06:41:33,891 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken_NoBaseCtor__success
[2020-11-25 06:41:33,891 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken
[2020-11-25 06:41:33,891 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken
[2020-11-25 06:41:33,892 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken
[2020-11-25 06:41:33,892 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken
[2020-11-25 06:41:33,892 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken
[2020-11-25 06:41:33,892 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken
[2020-11-25 06:41:33,892 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken
[2020-11-25 06:41:33,892 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken
[2020-11-25 06:41:33,892 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken
[2020-11-25 06:41:33,892 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken
[2020-11-25 06:41:33,892 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken
[2020-11-25 06:41:33,892 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken
[2020-11-25 06:41:33,892 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken_NoBaseCtor__success
[2020-11-25 06:41:33,892 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken
[2020-11-25 06:41:33,893 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken
[2020-11-25 06:41:33,893 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_MintableToken
[2020-11-25 06:41:33,893 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_MintableToken
[2020-11-25 06:41:33,893 INFO  L130     BoogieDeclarations]: Found specification of procedure finishMinting_MintableToken
[2020-11-25 06:41:33,893 INFO  L138     BoogieDeclarations]: Found implementation of procedure finishMinting_MintableToken
[2020-11-25 06:41:33,893 INFO  L130     BoogieDeclarations]: Found specification of procedure mintingFinished_MintableToken
[2020-11-25 06:41:33,893 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintingFinished_MintableToken
[2020-11-25 06:41:33,893 INFO  L130     BoogieDeclarations]: Found specification of procedure CappedToken_CappedToken_NoBaseCtor__success
[2020-11-25 06:41:33,893 INFO  L130     BoogieDeclarations]: Found specification of procedure CappedToken_CappedToken
[2020-11-25 06:41:33,893 INFO  L138     BoogieDeclarations]: Found implementation of procedure CappedToken_CappedToken
[2020-11-25 06:41:33,893 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_CappedToken
[2020-11-25 06:41:33,893 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_CappedToken
[2020-11-25 06:41:33,893 INFO  L130     BoogieDeclarations]: Found specification of procedure cap_CappedToken
[2020-11-25 06:41:33,894 INFO  L138     BoogieDeclarations]: Found implementation of procedure cap_CappedToken
[2020-11-25 06:41:33,894 INFO  L130     BoogieDeclarations]: Found specification of procedure TSTToken_TSTToken_NoBaseCtor__success
[2020-11-25 06:41:33,894 INFO  L130     BoogieDeclarations]: Found specification of procedure TSTToken_TSTToken
[2020-11-25 06:41:33,894 INFO  L138     BoogieDeclarations]: Found implementation of procedure TSTToken_TSTToken
[2020-11-25 06:41:33,894 INFO  L130     BoogieDeclarations]: Found specification of procedure name_TSTToken
[2020-11-25 06:41:33,894 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_TSTToken
[2020-11-25 06:41:33,894 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_TSTToken
[2020-11-25 06:41:33,894 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_TSTToken
[2020-11-25 06:41:33,894 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_TSTToken
[2020-11-25 06:41:33,894 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_TSTToken
[2020-11-25 06:41:33,894 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 06:41:33,894 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 06:41:33,895 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 06:41:33,895 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 06:41:33,895 INFO  L130     BoogieDeclarations]: Found specification of procedure canMint_pre__success
[2020-11-25 06:41:33,895 INFO  L130     BoogieDeclarations]: Found specification of procedure hasMintPermission_pre__success
[2020-11-25 06:41:33,895 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 06:41:33,895 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 06:41:33,895 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Ownable
[2020-11-25 06:41:33,895 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Ownable
[2020-11-25 06:41:33,895 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Basic
[2020-11-25 06:41:33,895 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Basic
[2020-11-25 06:41:33,896 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_BasicToken
[2020-11-25 06:41:33,896 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_BasicToken
[2020-11-25 06:41:33,896 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 06:41:33,896 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 06:41:33,896 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_StandardToken
[2020-11-25 06:41:33,896 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_StandardToken
[2020-11-25 06:41:33,896 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_MintableToken
[2020-11-25 06:41:33,896 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_MintableToken
[2020-11-25 06:41:33,896 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_CappedToken
[2020-11-25 06:41:33,896 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_CappedToken
[2020-11-25 06:41:33,897 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_TSTToken
[2020-11-25 06:41:33,897 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 06:41:33,897 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 06:41:33,897 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 06:41:33,897 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 06:41:33,897 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 06:41:33,897 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 06:41:33,897 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 06:41:33,897 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 06:41:33,897 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 06:41:33,898 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-25 06:41:33,898 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__success
[2020-11-25 06:41:33,898 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__fail
[2020-11-25 06:41:33,898 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable__success
[2020-11-25 06:41:33,898 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable__fail
[2020-11-25 06:41:33,898 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__success
[2020-11-25 06:41:33,898 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__fail
[2020-11-25 06:41:33,898 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferOwnership~address_Ownable__fail
[2020-11-25 06:41:33,898 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__success
[2020-11-25 06:41:33,898 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__fail
[2020-11-25 06:41:33,899 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic_NoBaseCtor__fail
[2020-11-25 06:41:33,899 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic__success
[2020-11-25 06:41:33,899 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic__fail
[2020-11-25 06:41:33,899 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken_NoBaseCtor__fail
[2020-11-25 06:41:33,899 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken__success
[2020-11-25 06:41:33,899 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken__fail
[2020-11-25 06:41:33,899 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken__success
[2020-11-25 06:41:33,899 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken__fail
[2020-11-25 06:41:33,899 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken__success
[2020-11-25 06:41:33,899 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken__fail
[2020-11-25 06:41:33,900 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken__success
[2020-11-25 06:41:33,900 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken__fail
[2020-11-25 06:41:33,900 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 06:41:33,900 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 06:41:33,900 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 06:41:33,900 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken_NoBaseCtor__fail
[2020-11-25 06:41:33,900 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken__success
[2020-11-25 06:41:33,900 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken__fail
[2020-11-25 06:41:33,900 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken__success
[2020-11-25 06:41:33,901 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken__fail
[2020-11-25 06:41:33,901 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken__success
[2020-11-25 06:41:33,901 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken__fail
[2020-11-25 06:41:33,901 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken__success
[2020-11-25 06:41:33,901 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken__fail
[2020-11-25 06:41:33,901 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken__success
[2020-11-25 06:41:33,901 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken__fail
[2020-11-25 06:41:33,901 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken__success
[2020-11-25 06:41:33,901 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken__fail
[2020-11-25 06:41:33,902 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken_NoBaseCtor__fail
[2020-11-25 06:41:33,902 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken__success
[2020-11-25 06:41:33,902 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken__fail
[2020-11-25 06:41:33,902 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_MintableToken__success
[2020-11-25 06:41:33,902 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_MintableToken__fail
[2020-11-25 06:41:33,902 INFO  L130     BoogieDeclarations]: Found specification of procedure finishMinting_MintableToken__success
[2020-11-25 06:41:33,902 INFO  L130     BoogieDeclarations]: Found specification of procedure finishMinting_MintableToken__fail
[2020-11-25 06:41:33,902 INFO  L130     BoogieDeclarations]: Found specification of procedure mintingFinished_MintableToken__success
[2020-11-25 06:41:33,902 INFO  L130     BoogieDeclarations]: Found specification of procedure mintingFinished_MintableToken__fail
[2020-11-25 06:41:33,902 INFO  L130     BoogieDeclarations]: Found specification of procedure CappedToken_CappedToken_NoBaseCtor__fail
[2020-11-25 06:41:33,902 INFO  L130     BoogieDeclarations]: Found specification of procedure CappedToken_CappedToken__success
[2020-11-25 06:41:33,903 INFO  L130     BoogieDeclarations]: Found specification of procedure CappedToken_CappedToken__fail
[2020-11-25 06:41:33,903 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_CappedToken__success
[2020-11-25 06:41:33,903 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_CappedToken__fail
[2020-11-25 06:41:33,903 INFO  L130     BoogieDeclarations]: Found specification of procedure cap_CappedToken__success
[2020-11-25 06:41:33,903 INFO  L130     BoogieDeclarations]: Found specification of procedure cap_CappedToken__fail
[2020-11-25 06:41:33,903 INFO  L130     BoogieDeclarations]: Found specification of procedure TSTToken_TSTToken_NoBaseCtor__fail
[2020-11-25 06:41:33,903 INFO  L130     BoogieDeclarations]: Found specification of procedure TSTToken_TSTToken__success
[2020-11-25 06:41:33,903 INFO  L130     BoogieDeclarations]: Found specification of procedure TSTToken_TSTToken__fail
[2020-11-25 06:41:33,903 INFO  L130     BoogieDeclarations]: Found specification of procedure name_TSTToken__success
[2020-11-25 06:41:33,903 INFO  L130     BoogieDeclarations]: Found specification of procedure name_TSTToken__fail
[2020-11-25 06:41:33,904 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_TSTToken__success
[2020-11-25 06:41:33,904 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_TSTToken__fail
[2020-11-25 06:41:33,904 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_TSTToken__success
[2020-11-25 06:41:33,904 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_TSTToken__fail
[2020-11-25 06:41:33,904 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 06:41:33,904 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 06:41:33,904 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 06:41:33,904 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 06:41:33,904 INFO  L130     BoogieDeclarations]: Found specification of procedure canMint_pre__fail
[2020-11-25 06:41:33,904 INFO  L130     BoogieDeclarations]: Found specification of procedure hasMintPermission_pre__fail
[2020-11-25 06:41:33,904 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 06:41:33,904 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 06:41:33,905 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 06:41:33,905 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 06:41:33,905 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 06:41:33,905 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 06:41:33,905 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 06:41:33,905 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 06:41:33,905 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 06:41:33,905 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 06:41:33,905 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 06:41:33,905 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 06:41:33,905 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 06:41:33,906 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 06:41:33,906 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-25 06:41:33,906 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-25 06:41:33,906 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__fail
[2020-11-25 06:41:33,906 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__success
[2020-11-25 06:41:33,906 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable__fail
[2020-11-25 06:41:33,906 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable__success
[2020-11-25 06:41:33,906 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__fail
[2020-11-25 06:41:33,906 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__success
[2020-11-25 06:41:33,906 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferOwnership~address_Ownable__fail
[2020-11-25 06:41:33,906 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferOwnership~address_Ownable__success
[2020-11-25 06:41:33,906 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__fail
[2020-11-25 06:41:33,907 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__success
[2020-11-25 06:41:33,907 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic_NoBaseCtor__fail
[2020-11-25 06:41:33,907 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic_NoBaseCtor__success
[2020-11-25 06:41:33,907 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic__fail
[2020-11-25 06:41:33,907 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic__success
[2020-11-25 06:41:33,907 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken_NoBaseCtor__fail
[2020-11-25 06:41:33,907 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken_NoBaseCtor__success
[2020-11-25 06:41:33,907 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken__fail
[2020-11-25 06:41:33,907 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken__success
[2020-11-25 06:41:33,907 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken__fail
[2020-11-25 06:41:33,907 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken__success
[2020-11-25 06:41:33,908 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken__fail
[2020-11-25 06:41:33,908 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken__success
[2020-11-25 06:41:33,908 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken__fail
[2020-11-25 06:41:33,908 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken__success
[2020-11-25 06:41:33,908 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 06:41:33,908 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 06:41:33,908 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 06:41:33,908 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 06:41:33,908 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken_NoBaseCtor__fail
[2020-11-25 06:41:33,908 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken_NoBaseCtor__success
[2020-11-25 06:41:33,908 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken__fail
[2020-11-25 06:41:33,908 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken__success
[2020-11-25 06:41:33,909 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken__fail
[2020-11-25 06:41:33,909 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken__success
[2020-11-25 06:41:33,909 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken__fail
[2020-11-25 06:41:33,909 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken__success
[2020-11-25 06:41:33,909 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken__fail
[2020-11-25 06:41:33,909 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken__success
[2020-11-25 06:41:33,909 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken__fail
[2020-11-25 06:41:33,909 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken__success
[2020-11-25 06:41:33,909 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken__fail
[2020-11-25 06:41:33,909 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken__success
[2020-11-25 06:41:33,909 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken_NoBaseCtor__fail
[2020-11-25 06:41:33,909 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken_NoBaseCtor__success
[2020-11-25 06:41:33,910 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken__fail
[2020-11-25 06:41:33,910 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken__success
[2020-11-25 06:41:33,910 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_MintableToken__fail
[2020-11-25 06:41:33,910 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_MintableToken__success
[2020-11-25 06:41:33,910 INFO  L138     BoogieDeclarations]: Found implementation of procedure finishMinting_MintableToken__fail
[2020-11-25 06:41:33,910 INFO  L138     BoogieDeclarations]: Found implementation of procedure finishMinting_MintableToken__success
[2020-11-25 06:41:33,910 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintingFinished_MintableToken__fail
[2020-11-25 06:41:33,910 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintingFinished_MintableToken__success
[2020-11-25 06:41:33,910 INFO  L138     BoogieDeclarations]: Found implementation of procedure CappedToken_CappedToken_NoBaseCtor__fail
[2020-11-25 06:41:33,910 INFO  L138     BoogieDeclarations]: Found implementation of procedure CappedToken_CappedToken_NoBaseCtor__success
[2020-11-25 06:41:33,910 INFO  L138     BoogieDeclarations]: Found implementation of procedure CappedToken_CappedToken__fail
[2020-11-25 06:41:33,911 INFO  L138     BoogieDeclarations]: Found implementation of procedure CappedToken_CappedToken__success
[2020-11-25 06:41:33,911 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_CappedToken__fail
[2020-11-25 06:41:33,911 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_CappedToken__success
[2020-11-25 06:41:33,911 INFO  L138     BoogieDeclarations]: Found implementation of procedure cap_CappedToken__fail
[2020-11-25 06:41:33,911 INFO  L138     BoogieDeclarations]: Found implementation of procedure cap_CappedToken__success
[2020-11-25 06:41:33,911 INFO  L138     BoogieDeclarations]: Found implementation of procedure TSTToken_TSTToken_NoBaseCtor__fail
[2020-11-25 06:41:33,911 INFO  L138     BoogieDeclarations]: Found implementation of procedure TSTToken_TSTToken_NoBaseCtor__success
[2020-11-25 06:41:33,911 INFO  L138     BoogieDeclarations]: Found implementation of procedure TSTToken_TSTToken__fail
[2020-11-25 06:41:33,911 INFO  L138     BoogieDeclarations]: Found implementation of procedure TSTToken_TSTToken__success
[2020-11-25 06:41:33,911 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_TSTToken__fail
[2020-11-25 06:41:33,911 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_TSTToken__success
[2020-11-25 06:41:33,911 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_TSTToken__fail
[2020-11-25 06:41:33,912 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_TSTToken__success
[2020-11-25 06:41:33,912 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_TSTToken__fail
[2020-11-25 06:41:33,912 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_TSTToken__success
[2020-11-25 06:41:33,912 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 06:41:33,912 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 06:41:33,912 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 06:41:33,912 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 06:41:33,912 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 06:41:33,912 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 06:41:33,912 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 06:41:33,912 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 06:41:33,913 INFO  L138     BoogieDeclarations]: Found implementation of procedure canMint_pre__fail
[2020-11-25 06:41:33,913 INFO  L138     BoogieDeclarations]: Found implementation of procedure canMint_pre__success
[2020-11-25 06:41:33,913 INFO  L138     BoogieDeclarations]: Found implementation of procedure hasMintPermission_pre__fail
[2020-11-25 06:41:33,913 INFO  L138     BoogieDeclarations]: Found implementation of procedure hasMintPermission_pre__success
[2020-11-25 06:41:33,913 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 06:41:33,913 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 06:41:33,913 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Ownable
[2020-11-25 06:41:33,913 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Ownable
[2020-11-25 06:41:33,913 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Basic
[2020-11-25 06:41:33,914 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Basic
[2020-11-25 06:41:33,914 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_BasicToken
[2020-11-25 06:41:33,914 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_BasicToken
[2020-11-25 06:41:33,914 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 06:41:33,914 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 06:41:33,914 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_StandardToken
[2020-11-25 06:41:33,914 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_StandardToken
[2020-11-25 06:41:33,914 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_MintableToken
[2020-11-25 06:41:33,914 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_MintableToken
[2020-11-25 06:41:33,914 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_CappedToken
[2020-11-25 06:41:33,914 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_CappedToken
[2020-11-25 06:41:33,914 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_TSTToken
[2020-11-25 06:41:33,915 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 06:41:33,915 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 06:41:33,915 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 06:41:34,505 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 06:41:34,505 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 06:41:34,505 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 06:41:34,847 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 06:41:34,847 INFO  L286             CfgBuilder]: Removed 9 assue(true) statements.
[2020-11-25 06:41:34,849 INFO  L202        PluginConnector]: Adding new model TSTToken_0xf67041758d3b6e56d6fdafa5b32038302c3634da_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 06:41:34 BoogieIcfgContainer
[2020-11-25 06:41:34,849 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 06:41:33" (2/2) ...
[2020-11-25 06:41:34,849 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 06:41:34,850 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@41d03b6c and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 06:41:34, skipping insertion in model container
[2020-11-25 06:41:34,850 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 06:41:34,850 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 06:41:34,850 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 06:41:34,851 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 06:41:34,851 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "TSTToken_0xf67041758d3b6e56d6fdafa5b32038302c3634da_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:41:33" (1/3) ...
[2020-11-25 06:41:34,851 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@1d2439ea and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 06:41:34, skipping insertion in model container
[2020-11-25 06:41:34,851 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 06:41:33" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 06:41:34,877 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 06:41:34 NWAContainer
[2020-11-25 06:41:34,877 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 06:41:34,877 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 06:41:34,877 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 06:41:34,878 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 06:41:34,878 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "TSTToken_0xf67041758d3b6e56d6fdafa5b32038302c3634da_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 06:41:34" (3/4) ...
[2020-11-25 06:41:34,879 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@7e31e973 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 06:41:34, skipping insertion in model container
[2020-11-25 06:41:34,879 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 06:41:34" (4/4) ...
[2020-11-25 06:41:34,881 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 06:41:34,885 INFO  L110   BuchiProductObserver]: Initial RCFG 2302 locations, 3215 edges
[2020-11-25 06:41:34,885 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 06:41:34,894 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 06:41:36,756 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 06:41:36,764 INFO  L110   BuchiProductObserver]: BuchiProgram size 5816 locations, 10620 edges
[2020-11-25 06:41:36,764 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 06:41:36 BoogieIcfgContainer
[2020-11-25 06:41:36,764 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 06:41:36,765 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 06:41:36,765 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 06:41:36,766 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 06:41:36,766 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 06:41:36" (1/1) ...
[2020-11-25 06:41:36,885 INFO  L313           BlockEncoder]: Initial Icfg 5816 locations, 10620 edges
[2020-11-25 06:41:36,885 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 06:41:36,885 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 06:41:36,885 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 06:41:36,886 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 06:41:36,900 INFO  L70    emoveInfeasibleEdges]: Removed 102 edges and 21 locations because of local infeasibility
[2020-11-25 06:41:36,912 INFO  L70        RemoveSinkStates]: Removed 14 edges and 9 locations by removing sink states
[2020-11-25 06:41:36,928 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 06:41:36,933 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 06:41:36,937 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 06:41:36,937 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 06:41:36,941 INFO  L313           BlockEncoder]: Encoded RCFG 5748 locations, 10448 edges
[2020-11-25 06:41:36,942 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 06:41:36 BasicIcfg
[2020-11-25 06:41:36,942 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 06:41:36,942 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 06:41:36,942 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 06:41:36,944 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 06:41:36,944 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 06:41:36,944 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "TSTToken_0xf67041758d3b6e56d6fdafa5b32038302c3634da_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:41:33" (1/6) ...
[2020-11-25 06:41:36,946 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5cf20806 and model type TSTToken_0xf67041758d3b6e56d6fdafa5b32038302c3634da_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 06:41:36, skipping insertion in model container
[2020-11-25 06:41:36,946 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 06:41:36,946 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 06:41:33" (2/6) ...
[2020-11-25 06:41:36,946 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5cf20806 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 06:41:36, skipping insertion in model container
[2020-11-25 06:41:36,946 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 06:41:36,946 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "TSTToken_0xf67041758d3b6e56d6fdafa5b32038302c3634da_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 06:41:34" (3/6) ...
[2020-11-25 06:41:36,946 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5cf20806 and model type TSTToken_0xf67041758d3b6e56d6fdafa5b32038302c3634da_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 06:41:36, skipping insertion in model container
[2020-11-25 06:41:36,947 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 06:41:36,947 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 06:41:34" (4/6) ...
[2020-11-25 06:41:36,947 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5cf20806 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 06:41:36, skipping insertion in model container
[2020-11-25 06:41:36,947 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 06:41:36,947 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 06:41:36" (5/6) ...
[2020-11-25 06:41:36,947 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5cf20806 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 06:41:36, skipping insertion in model container
[2020-11-25 06:41:36,947 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 06:41:36,947 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 06:41:36" (6/6) ...
[2020-11-25 06:41:36,948 INFO  L404   chiAutomizerObserver]: Analyzing ICFG TSTToken_0xf67041758d3b6e56d6fdafa5b32038302c3634da_transfer-self.bpl_BEv2
[2020-11-25 06:41:36,981 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 06:41:36,981 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 06:41:36,981 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 06:41:36,981 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 06:41:36,981 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 06:41:36,981 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 06:41:36,981 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 06:41:36,981 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 06:41:36,981 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 06:41:37,030 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5748 states.
[2020-11-25 06:41:37,079 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 06:41:37,079 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 06:41:37,079 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 06:41:37,087 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 06:41:37,087 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 06:41:37,087 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 06:41:37,087 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5748 states.
[2020-11-25 06:41:37,106 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 06:41:37,107 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 06:41:37,107 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 06:41:37,108 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 06:41:37,108 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_BasicToken0 := false;
[L2]                 call_transfer_BasicToken0 := false;
[L2]     CALL        call main();
[L6511]              assume null == 0;
[L6512]  CALL        call this := FreshRefGenerator__success();
[L2509]              havoc newRef;
[L2510]              assume Alloc[newRef] == false;
[L2511]              Alloc[newRef] := true;
[L2512]              assume newRef != null;
[L6512]  RET         call this := FreshRefGenerator__success();
[L6513]              assume now >= 0;
[L6514]              assume DType[this] == TSTToken;
[L6515]              assume msgvalue_MSG == 0;
[L6516]              gas := gas - 53000;
[L6517]  CALL        call TSTToken_TSTToken(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L1531]              havoc __exception;
[L1532]              revert := false;
[L1533]  COND FALSE  !(__exception)
[L1557]  CALL        call TSTToken_TSTToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3626]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3626]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3627]  COND TRUE   revert
[L1557]  RET         call TSTToken_TSTToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L1558]              assume !revert && gas >= 0;
[L6517]  RET         call TSTToken_TSTToken(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L6518]              assume !revert && gas >= 0;

Loop:
[L6521]  CALL        call CorralChoice_TSTToken(this);
[L6333]              havoc msgsender_MSG;
[L6334]              havoc msgvalue_MSG;
[L6335]              havoc choice;
[L6336]              havoc __ret_0_owner;
[L6337]              havoc _newOwner_s153;
[L6338]              havoc __ret_0_totalSupply;
[L6339]              havoc _owner_s298;
[L6340]              havoc __ret_0_balanceOf;
[L6341]              havoc _to_s286;
[L6342]              havoc _value_s286;
[L6343]              havoc __ret_0_transfer;
[L6344]              havoc _owner_s479;
[L6345]              havoc _spender_s479;
[L6346]              havoc __ret_0_allowance;
[L6347]              havoc _from_s435;
[L6348]              havoc _to_s435;
[L6349]              havoc _value_s435;
[L6350]              havoc __ret_0_transferFrom;
[L6351]              havoc _spender_s463;
[L6352]              havoc _value_s463;
[L6353]              havoc __ret_0_approve;
[L6354]              havoc _spender_s521;
[L6355]              havoc _addedValue_s521;
[L6356]              havoc __ret_0_increaseApproval;
[L6357]              havoc _spender_s581;
[L6358]              havoc _subtractedValue_s581;
[L6359]              havoc __ret_0_decreaseApproval;
[L6360]              havoc __ret_0_mintingFinished;
[L6361]              havoc _to_s729;
[L6362]              havoc _amount_s729;
[L6363]              havoc __ret_0_mint;
[L6364]              havoc __ret_0_finishMinting;
[L6365]              havoc __ret_0_cap;
[L6366]              havoc _cap_s704;
[L6367]              havoc __ret_0_name;
[L6368]              havoc __ret_0_symbol;
[L6369]              havoc __ret_0_decimals;
[L6370]              havoc _cap_s750;
[L6371]              havoc tmpNow;
[L6372]              havoc gas;
[L6373]              assume gas > 4000000 && gas <= 8000000;
[L6374]              tmpNow := now;
[L6375]              havoc now;
[L6376]              assume now > tmpNow;
[L6377]              assume msgsender_MSG != null;
[L6378]              assume DType[msgsender_MSG] != SafeMath;
[L6379]              assume DType[msgsender_MSG] != Ownable;
[L6380]              assume DType[msgsender_MSG] != ERC20Basic;
[L6381]              assume DType[msgsender_MSG] != BasicToken;
[L6382]              assume DType[msgsender_MSG] != ERC20;
[L6383]              assume DType[msgsender_MSG] != StandardToken;
[L6384]              assume DType[msgsender_MSG] != MintableToken;
[L6385]              assume DType[msgsender_MSG] != CappedToken;
[L6386]              assume DType[msgsender_MSG] != TSTToken;
[L6387]              Alloc[msgsender_MSG] := true;
[L6388]  COND TRUE   choice == 18
[L6389]              gas := gas - 21000;
[L6390]  COND FALSE  !(gas >= 0)
[L6521]  RET         call CorralChoice_TSTToken(this);

[2020-11-25 06:41:37,121 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 06:41:37,121 INFO  L82        PathProgramCache]: Analyzing trace with hash 19210621, now seen corresponding path program 1 times
[2020-11-25 06:41:37,125 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 06:41:37,145 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 06:41:37,184 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 06:41:37,186 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 06:41:37,186 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 06:41:37,582 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 06:41:37,590 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 06:41:37,590 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 06:41:37,591 INFO  L87              Difference]: Start difference. First operand 5748 states. Second operand 4 states.
[2020-11-25 06:41:38,063 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 06:41:38,063 INFO  L93              Difference]: Finished difference Result 2946 states and 3369 transitions.
[2020-11-25 06:41:38,063 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 06:41:38,064 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2946 states and 3369 transitions.
[2020-11-25 06:41:38,079 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 06:41:38,100 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2946 states to 2942 states and 3361 transitions.
[2020-11-25 06:41:38,101 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-25 06:41:38,103 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 743
[2020-11-25 06:41:38,103 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2942 states and 3361 transitions.
[2020-11-25 06:41:38,112 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 06:41:38,112 INFO  L728         BuchiCegarLoop]: Abstraction has 2942 states and 3361 transitions.
[2020-11-25 06:41:38,127 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2942 states and 3361 transitions.
[2020-11-25 06:41:38,175 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2942 to 2942.
[2020-11-25 06:41:38,176 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2942 states.
[2020-11-25 06:41:38,182 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2942 states to 2942 states and 3361 transitions.
[2020-11-25 06:41:38,183 INFO  L751         BuchiCegarLoop]: Abstraction has 2942 states and 3361 transitions.
[2020-11-25 06:41:38,184 INFO  L631         BuchiCegarLoop]: Abstraction has 2942 states and 3361 transitions.
[2020-11-25 06:41:38,184 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 06:41:38,184 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2942 states and 3361 transitions.
[2020-11-25 06:41:38,190 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 06:41:38,190 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 06:41:38,190 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 06:41:38,192 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 06:41:38,192 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_BasicToken0 := false;
[L2]                 call_transfer_BasicToken0 := false;
[L2]     CALL        call main();
[L6511]              assume null == 0;
[L6512]  CALL        call this := FreshRefGenerator__success();
[L2509]              havoc newRef;
[L2510]              assume Alloc[newRef] == false;
[L2511]              Alloc[newRef] := true;
[L2512]              assume newRef != null;
[L6512]  RET         call this := FreshRefGenerator__success();
[L6513]              assume now >= 0;
[L6514]              assume DType[this] == TSTToken;
[L6515]              assume msgvalue_MSG == 0;
[L6516]              gas := gas - 53000;
[L6517]  CALL        call TSTToken_TSTToken(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L1531]              havoc __exception;
[L1532]              revert := false;
[L1533]  COND FALSE  !(__exception)
[L1557]  CALL        call TSTToken_TSTToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3626]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3626]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3627]  COND TRUE   revert
[L1557]  RET         call TSTToken_TSTToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L1558]              assume !revert && gas >= 0;
[L6517]  RET         call TSTToken_TSTToken(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L6518]              assume !revert && gas >= 0;
[L6521]  CALL        call CorralChoice_TSTToken(this);
[L6333]              havoc msgsender_MSG;
[L6334]              havoc msgvalue_MSG;
[L6335]              havoc choice;
[L6336]              havoc __ret_0_owner;
[L6337]              havoc _newOwner_s153;
[L6338]              havoc __ret_0_totalSupply;
[L6339]              havoc _owner_s298;
[L6340]              havoc __ret_0_balanceOf;
[L6341]              havoc _to_s286;
[L6342]              havoc _value_s286;
[L6343]              havoc __ret_0_transfer;
[L6344]              havoc _owner_s479;
[L6345]              havoc _spender_s479;
[L6346]              havoc __ret_0_allowance;
[L6347]              havoc _from_s435;
[L6348]              havoc _to_s435;
[L6349]              havoc _value_s435;
[L6350]              havoc __ret_0_transferFrom;
[L6351]              havoc _spender_s463;
[L6352]              havoc _value_s463;
[L6353]              havoc __ret_0_approve;
[L6354]              havoc _spender_s521;
[L6355]              havoc _addedValue_s521;
[L6356]              havoc __ret_0_increaseApproval;
[L6357]              havoc _spender_s581;
[L6358]              havoc _subtractedValue_s581;
[L6359]              havoc __ret_0_decreaseApproval;
[L6360]              havoc __ret_0_mintingFinished;
[L6361]              havoc _to_s729;
[L6362]              havoc _amount_s729;
[L6363]              havoc __ret_0_mint;
[L6364]              havoc __ret_0_finishMinting;
[L6365]              havoc __ret_0_cap;
[L6366]              havoc _cap_s704;
[L6367]              havoc __ret_0_name;
[L6368]              havoc __ret_0_symbol;
[L6369]              havoc __ret_0_decimals;
[L6370]              havoc _cap_s750;
[L6371]              havoc tmpNow;
[L6372]              havoc gas;
[L6373]              assume gas > 4000000 && gas <= 8000000;
[L6374]              tmpNow := now;
[L6375]              havoc now;
[L6376]              assume now > tmpNow;
[L6377]              assume msgsender_MSG != null;
[L6378]              assume DType[msgsender_MSG] != SafeMath;
[L6379]              assume DType[msgsender_MSG] != Ownable;
[L6380]              assume DType[msgsender_MSG] != ERC20Basic;
[L6381]              assume DType[msgsender_MSG] != BasicToken;
[L6382]              assume DType[msgsender_MSG] != ERC20;
[L6383]              assume DType[msgsender_MSG] != StandardToken;
[L6384]              assume DType[msgsender_MSG] != MintableToken;
[L6385]              assume DType[msgsender_MSG] != CappedToken;
[L6386]              assume DType[msgsender_MSG] != TSTToken;
[L6387]              Alloc[msgsender_MSG] := true;
[L6388]  COND FALSE  !(choice == 18)
[L6394]  COND FALSE  !(choice == 17)
[L6400]  COND FALSE  !(choice == 16)
[L6406]  COND FALSE  !(choice == 15)
[L6412]  COND FALSE  !(choice == 14)
[L6418]  COND TRUE   choice == 13
[L6419]              gas := gas - 21000;
[L6420]  COND TRUE   gas >= 0
[L6421]              assume _value_s286 >= 0 && _value_s286 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6422]              assume msgvalue_MSG == 0;
[L6423]  CALL        call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s286 && _value_s286 <= balances_BasicToken[this][msgsender_MSG]) && _value_s286 >= 0) && _value_s286 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s286] >= 0) && balances_BasicToken[this][_to_s286] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BasicToken0 := true;
[L2]                 call_transfer_BasicToken0 := false;
[L2]                 revert := revert_hold;
[L555]               havoc __exception;
[L556]               revert := false;
[L557]   COND FALSE  !(__exception)
[L581]   CALL        call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L2893]  COND TRUE   !(_value_s286 <= balances_BasicToken[this][msgsender_MSG])
[L2894]              revert := true;
[L581]   RET         call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L582]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && name_TSTToken[this] == old(name_TSTToken[this])) && symbol_TSTToken[this] == old(symbol_TSTToken[this])) && decimals_TSTToken[this] == old(decimals_TSTToken[this])) && cap_CappedToken[this] == old(cap_CappedToken[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L6423]  RET         call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L6521]  RET         call CorralChoice_TSTToken(this);

Loop:
[L6521]  CALL        call CorralChoice_TSTToken(this);
[L6333]              havoc msgsender_MSG;
[L6334]              havoc msgvalue_MSG;
[L6335]              havoc choice;
[L6336]              havoc __ret_0_owner;
[L6337]              havoc _newOwner_s153;
[L6338]              havoc __ret_0_totalSupply;
[L6339]              havoc _owner_s298;
[L6340]              havoc __ret_0_balanceOf;
[L6341]              havoc _to_s286;
[L6342]              havoc _value_s286;
[L6343]              havoc __ret_0_transfer;
[L6344]              havoc _owner_s479;
[L6345]              havoc _spender_s479;
[L6346]              havoc __ret_0_allowance;
[L6347]              havoc _from_s435;
[L6348]              havoc _to_s435;
[L6349]              havoc _value_s435;
[L6350]              havoc __ret_0_transferFrom;
[L6351]              havoc _spender_s463;
[L6352]              havoc _value_s463;
[L6353]              havoc __ret_0_approve;
[L6354]              havoc _spender_s521;
[L6355]              havoc _addedValue_s521;
[L6356]              havoc __ret_0_increaseApproval;
[L6357]              havoc _spender_s581;
[L6358]              havoc _subtractedValue_s581;
[L6359]              havoc __ret_0_decreaseApproval;
[L6360]              havoc __ret_0_mintingFinished;
[L6361]              havoc _to_s729;
[L6362]              havoc _amount_s729;
[L6363]              havoc __ret_0_mint;
[L6364]              havoc __ret_0_finishMinting;
[L6365]              havoc __ret_0_cap;
[L6366]              havoc _cap_s704;
[L6367]              havoc __ret_0_name;
[L6368]              havoc __ret_0_symbol;
[L6369]              havoc __ret_0_decimals;
[L6370]              havoc _cap_s750;
[L6371]              havoc tmpNow;
[L6372]              havoc gas;
[L6373]              assume gas > 4000000 && gas <= 8000000;
[L6374]              tmpNow := now;
[L6375]              havoc now;
[L6376]              assume now > tmpNow;
[L6377]              assume msgsender_MSG != null;
[L6378]              assume DType[msgsender_MSG] != SafeMath;
[L6379]              assume DType[msgsender_MSG] != Ownable;
[L6380]              assume DType[msgsender_MSG] != ERC20Basic;
[L6381]              assume DType[msgsender_MSG] != BasicToken;
[L6382]              assume DType[msgsender_MSG] != ERC20;
[L6383]              assume DType[msgsender_MSG] != StandardToken;
[L6384]              assume DType[msgsender_MSG] != MintableToken;
[L6385]              assume DType[msgsender_MSG] != CappedToken;
[L6386]              assume DType[msgsender_MSG] != TSTToken;
[L6387]              Alloc[msgsender_MSG] := true;
[L6388]  COND FALSE  !(choice == 18)
[L6394]  COND FALSE  !(choice == 17)
[L6400]  COND FALSE  !(choice == 16)
[L6406]  COND FALSE  !(choice == 15)
[L6412]  COND FALSE  !(choice == 14)
[L6418]  COND TRUE   choice == 13
[L6419]              gas := gas - 21000;
[L6420]  COND TRUE   gas >= 0
[L6421]              assume _value_s286 >= 0 && _value_s286 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6422]              assume msgvalue_MSG == 0;
[L6423]  CALL        call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s286 && _value_s286 <= balances_BasicToken[this][msgsender_MSG]) && _value_s286 >= 0) && _value_s286 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s286] >= 0) && balances_BasicToken[this][_to_s286] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BasicToken0 := true;
[L2]                 call_transfer_BasicToken0 := false;
[L2]                 revert := revert_hold;
[L555]               havoc __exception;
[L556]               revert := false;
[L557]   COND FALSE  !(__exception)
[L581]   CALL        call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L2893]  COND TRUE   !(_value_s286 <= balances_BasicToken[this][msgsender_MSG])
[L2894]              revert := true;
[L581]   RET         call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L582]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && name_TSTToken[this] == old(name_TSTToken[this])) && symbol_TSTToken[this] == old(symbol_TSTToken[this])) && decimals_TSTToken[this] == old(decimals_TSTToken[this])) && cap_CappedToken[this] == old(cap_CappedToken[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L6423]  RET         call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L6521]  RET         call CorralChoice_TSTToken(this);

[2020-11-25 06:41:38,195 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 06:41:38,196 INFO  L82        PathProgramCache]: Analyzing trace with hash 1451926876, now seen corresponding path program 1 times
[2020-11-25 06:41:38,197 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 06:41:38,203 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 06:41:38,221 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 06:41:38,222 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 06:41:38,222 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 06:41:38,223 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 06:41:38,223 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 06:41:38,223 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 06:41:38,223 INFO  L87              Difference]: Start difference. First operand 2942 states and 3361 transitions. cyclomatic complexity: 421 Second operand 3 states.
[2020-11-25 06:41:38,289 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 06:41:38,289 INFO  L93              Difference]: Finished difference Result 3658 states and 4137 transitions.
[2020-11-25 06:41:38,289 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 06:41:38,289 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3658 states and 4137 transitions.
[2020-11-25 06:41:38,301 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 06:41:38,314 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3658 states to 3658 states and 4137 transitions.
[2020-11-25 06:41:38,314 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 940
[2020-11-25 06:41:38,315 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 940
[2020-11-25 06:41:38,315 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3658 states and 4137 transitions.
[2020-11-25 06:41:38,320 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 06:41:38,320 INFO  L728         BuchiCegarLoop]: Abstraction has 3658 states and 4137 transitions.
[2020-11-25 06:41:38,323 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3658 states and 4137 transitions.
[2020-11-25 06:41:38,350 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3658 to 3094.
[2020-11-25 06:41:38,350 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3094 states.
[2020-11-25 06:41:38,354 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3094 states to 3094 states and 3443 transitions.
[2020-11-25 06:41:38,354 INFO  L751         BuchiCegarLoop]: Abstraction has 3094 states and 3443 transitions.
[2020-11-25 06:41:38,354 INFO  L631         BuchiCegarLoop]: Abstraction has 3094 states and 3443 transitions.
[2020-11-25 06:41:38,354 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 06:41:38,354 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3094 states and 3443 transitions.
[2020-11-25 06:41:38,360 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 06:41:38,360 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 06:41:38,360 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 06:41:38,364 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [24, 24, 24, 24, 24, 24, 24, 24, 24, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 06:41:38,364 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_BasicToken0 := false;
[L2]                 call_transfer_BasicToken0 := false;
[L2]     CALL        call main();
[L6511]              assume null == 0;
[L6512]  CALL        call this := FreshRefGenerator__success();
[L2509]              havoc newRef;
[L2510]              assume Alloc[newRef] == false;
[L2511]              Alloc[newRef] := true;
[L2512]              assume newRef != null;
[L6512]  RET         call this := FreshRefGenerator__success();
[L6513]              assume now >= 0;
[L6514]              assume DType[this] == TSTToken;
[L6515]              assume msgvalue_MSG == 0;
[L6516]              gas := gas - 53000;
[L6517]  CALL        call TSTToken_TSTToken(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L1531]              havoc __exception;
[L1532]              revert := false;
[L1533]  COND FALSE  !(__exception)
[L1557]  CALL        call TSTToken_TSTToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3626]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3626]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3627]  COND FALSE  !(revert)
[L3630]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3630]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3631]  COND FALSE  !(revert)
[L3634]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3634]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3635]  COND FALSE  !(revert)
[L3638]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3638]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3639]  COND FALSE  !(revert)
[L3642]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3642]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3643]  COND FALSE  !(revert)
[L3646]  CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3275]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3275]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3276]  COND FALSE  !(revert)
[L3279]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3279]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3280]  COND FALSE  !(revert)
[L3283]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3283]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3284]  COND FALSE  !(revert)
[L3287]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3287]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3288]  COND FALSE  !(revert)
[L3291]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3291]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3292]  COND FALSE  !(revert)
[L3295]  CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3239]              assume msgsender_MSG != null;
[L3240]              Balance[this] := 0;
[L3241]              mintingFinished_MintableToken[this] := false;
[L3295]  RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3296]  COND FALSE  !(revert)
[L3646]  RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3647]  COND FALSE  !(revert)
[L3650]  CALL        call CappedToken_CappedToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3464]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3464]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3465]  COND FALSE  !(revert)
[L3468]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3468]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3469]  COND FALSE  !(revert)
[L3472]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3472]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3473]  COND FALSE  !(revert)
[L3476]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3476]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3477]  COND FALSE  !(revert)
[L3480]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3480]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3481]  COND FALSE  !(revert)
[L3484]  CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3275]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3275]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3276]  COND FALSE  !(revert)
[L3279]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3279]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3280]  COND FALSE  !(revert)
[L3283]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3283]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3284]  COND FALSE  !(revert)
[L3287]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3287]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3288]  COND FALSE  !(revert)
[L3291]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3291]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3292]  COND FALSE  !(revert)
[L3295]  CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3239]              assume msgsender_MSG != null;
[L3240]              Balance[this] := 0;
[L3241]              mintingFinished_MintableToken[this] := false;
[L3295]  RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3296]  COND FALSE  !(revert)
[L3484]  RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3485]  COND FALSE  !(revert)
[L3488]  CALL        call CappedToken_CappedToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s704);
[L3419]              assume msgsender_MSG != null;
[L3420]              Balance[this] := 0;
[L3421]              cap_CappedToken[this] := 0;
[L3423]  COND TRUE   !(_cap_s704 > 0)
[L3424]              revert := true;
[L3488]  RET         call CappedToken_CappedToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s704);
[L3489]  COND TRUE   revert
[L3650]  RET         call CappedToken_CappedToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3651]  COND TRUE   revert
[L1557]  RET         call TSTToken_TSTToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L1558]              assume !revert && gas >= 0;
[L6517]  RET         call TSTToken_TSTToken(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L6518]              assume !revert && gas >= 0;
[L6521]  CALL        call CorralChoice_TSTToken(this);
[L6333]              havoc msgsender_MSG;
[L6334]              havoc msgvalue_MSG;
[L6335]              havoc choice;
[L6336]              havoc __ret_0_owner;
[L6337]              havoc _newOwner_s153;
[L6338]              havoc __ret_0_totalSupply;
[L6339]              havoc _owner_s298;
[L6340]              havoc __ret_0_balanceOf;
[L6341]              havoc _to_s286;
[L6342]              havoc _value_s286;
[L6343]              havoc __ret_0_transfer;
[L6344]              havoc _owner_s479;
[L6345]              havoc _spender_s479;
[L6346]              havoc __ret_0_allowance;
[L6347]              havoc _from_s435;
[L6348]              havoc _to_s435;
[L6349]              havoc _value_s435;
[L6350]              havoc __ret_0_transferFrom;
[L6351]              havoc _spender_s463;
[L6352]              havoc _value_s463;
[L6353]              havoc __ret_0_approve;
[L6354]              havoc _spender_s521;
[L6355]              havoc _addedValue_s521;
[L6356]              havoc __ret_0_increaseApproval;
[L6357]              havoc _spender_s581;
[L6358]              havoc _subtractedValue_s581;
[L6359]              havoc __ret_0_decreaseApproval;
[L6360]              havoc __ret_0_mintingFinished;
[L6361]              havoc _to_s729;
[L6362]              havoc _amount_s729;
[L6363]              havoc __ret_0_mint;
[L6364]              havoc __ret_0_finishMinting;
[L6365]              havoc __ret_0_cap;
[L6366]              havoc _cap_s704;
[L6367]              havoc __ret_0_name;
[L6368]              havoc __ret_0_symbol;
[L6369]              havoc __ret_0_decimals;
[L6370]              havoc _cap_s750;
[L6371]              havoc tmpNow;
[L6372]              havoc gas;
[L6373]              assume gas > 4000000 && gas <= 8000000;
[L6374]              tmpNow := now;
[L6375]              havoc now;
[L6376]              assume now > tmpNow;
[L6377]              assume msgsender_MSG != null;
[L6378]              assume DType[msgsender_MSG] != SafeMath;
[L6379]              assume DType[msgsender_MSG] != Ownable;
[L6380]              assume DType[msgsender_MSG] != ERC20Basic;
[L6381]              assume DType[msgsender_MSG] != BasicToken;
[L6382]              assume DType[msgsender_MSG] != ERC20;
[L6383]              assume DType[msgsender_MSG] != StandardToken;
[L6384]              assume DType[msgsender_MSG] != MintableToken;
[L6385]              assume DType[msgsender_MSG] != CappedToken;
[L6386]              assume DType[msgsender_MSG] != TSTToken;
[L6387]              Alloc[msgsender_MSG] := true;
[L6388]  COND FALSE  !(choice == 18)
[L6394]  COND FALSE  !(choice == 17)
[L6400]  COND FALSE  !(choice == 16)
[L6406]  COND FALSE  !(choice == 15)
[L6412]  COND FALSE  !(choice == 14)
[L6418]  COND TRUE   choice == 13
[L6419]              gas := gas - 21000;
[L6420]  COND TRUE   gas >= 0
[L6421]              assume _value_s286 >= 0 && _value_s286 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6422]              assume msgvalue_MSG == 0;
[L6423]  CALL        call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s286 && _value_s286 <= balances_BasicToken[this][msgsender_MSG]) && _value_s286 >= 0) && _value_s286 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s286] >= 0) && balances_BasicToken[this][_to_s286] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BasicToken0 := true;
[L2]                 call_transfer_BasicToken0 := false;
[L2]                 revert := revert_hold;
[L555]               havoc __exception;
[L556]               revert := false;
[L557]   COND FALSE  !(__exception)
[L581]   CALL        call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L2893]  COND TRUE   !(_value_s286 <= balances_BasicToken[this][msgsender_MSG])
[L2894]              revert := true;
[L581]   RET         call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L582]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && name_TSTToken[this] == old(name_TSTToken[this])) && symbol_TSTToken[this] == old(symbol_TSTToken[this])) && decimals_TSTToken[this] == old(decimals_TSTToken[this])) && cap_CappedToken[this] == old(cap_CappedToken[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L6423]  RET         call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L6521]  RET         call CorralChoice_TSTToken(this);

Loop:
[L6521]  CALL        call CorralChoice_TSTToken(this);
[L6333]              havoc msgsender_MSG;
[L6334]              havoc msgvalue_MSG;
[L6335]              havoc choice;
[L6336]              havoc __ret_0_owner;
[L6337]              havoc _newOwner_s153;
[L6338]              havoc __ret_0_totalSupply;
[L6339]              havoc _owner_s298;
[L6340]              havoc __ret_0_balanceOf;
[L6341]              havoc _to_s286;
[L6342]              havoc _value_s286;
[L6343]              havoc __ret_0_transfer;
[L6344]              havoc _owner_s479;
[L6345]              havoc _spender_s479;
[L6346]              havoc __ret_0_allowance;
[L6347]              havoc _from_s435;
[L6348]              havoc _to_s435;
[L6349]              havoc _value_s435;
[L6350]              havoc __ret_0_transferFrom;
[L6351]              havoc _spender_s463;
[L6352]              havoc _value_s463;
[L6353]              havoc __ret_0_approve;
[L6354]              havoc _spender_s521;
[L6355]              havoc _addedValue_s521;
[L6356]              havoc __ret_0_increaseApproval;
[L6357]              havoc _spender_s581;
[L6358]              havoc _subtractedValue_s581;
[L6359]              havoc __ret_0_decreaseApproval;
[L6360]              havoc __ret_0_mintingFinished;
[L6361]              havoc _to_s729;
[L6362]              havoc _amount_s729;
[L6363]              havoc __ret_0_mint;
[L6364]              havoc __ret_0_finishMinting;
[L6365]              havoc __ret_0_cap;
[L6366]              havoc _cap_s704;
[L6367]              havoc __ret_0_name;
[L6368]              havoc __ret_0_symbol;
[L6369]              havoc __ret_0_decimals;
[L6370]              havoc _cap_s750;
[L6371]              havoc tmpNow;
[L6372]              havoc gas;
[L6373]              assume gas > 4000000 && gas <= 8000000;
[L6374]              tmpNow := now;
[L6375]              havoc now;
[L6376]              assume now > tmpNow;
[L6377]              assume msgsender_MSG != null;
[L6378]              assume DType[msgsender_MSG] != SafeMath;
[L6379]              assume DType[msgsender_MSG] != Ownable;
[L6380]              assume DType[msgsender_MSG] != ERC20Basic;
[L6381]              assume DType[msgsender_MSG] != BasicToken;
[L6382]              assume DType[msgsender_MSG] != ERC20;
[L6383]              assume DType[msgsender_MSG] != StandardToken;
[L6384]              assume DType[msgsender_MSG] != MintableToken;
[L6385]              assume DType[msgsender_MSG] != CappedToken;
[L6386]              assume DType[msgsender_MSG] != TSTToken;
[L6387]              Alloc[msgsender_MSG] := true;
[L6388]  COND FALSE  !(choice == 18)
[L6394]  COND FALSE  !(choice == 17)
[L6400]  COND FALSE  !(choice == 16)
[L6406]  COND FALSE  !(choice == 15)
[L6412]  COND FALSE  !(choice == 14)
[L6418]  COND TRUE   choice == 13
[L6419]              gas := gas - 21000;
[L6420]  COND TRUE   gas >= 0
[L6421]              assume _value_s286 >= 0 && _value_s286 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6422]              assume msgvalue_MSG == 0;
[L6423]  CALL        call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s286 && _value_s286 <= balances_BasicToken[this][msgsender_MSG]) && _value_s286 >= 0) && _value_s286 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s286] >= 0) && balances_BasicToken[this][_to_s286] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BasicToken0 := true;
[L2]                 call_transfer_BasicToken0 := false;
[L2]                 revert := revert_hold;
[L555]               havoc __exception;
[L556]               revert := false;
[L557]   COND FALSE  !(__exception)
[L581]   CALL        call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L2893]  COND TRUE   !(_value_s286 <= balances_BasicToken[this][msgsender_MSG])
[L2894]              revert := true;
[L581]   RET         call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L582]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && name_TSTToken[this] == old(name_TSTToken[this])) && symbol_TSTToken[this] == old(symbol_TSTToken[this])) && decimals_TSTToken[this] == old(decimals_TSTToken[this])) && cap_CappedToken[this] == old(cap_CappedToken[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L6423]  RET         call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L6521]  RET         call CorralChoice_TSTToken(this);

[2020-11-25 06:41:38,372 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 06:41:38,372 INFO  L82        PathProgramCache]: Analyzing trace with hash -725619731, now seen corresponding path program 1 times
[2020-11-25 06:41:38,373 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 06:41:38,396 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 06:41:38,648 INFO  L134       CoverageAnalysis]: Checked inductivity of 3875 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 3875 trivial. 0 not checked.
[2020-11-25 06:41:38,648 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 06:41:38,648 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 06:41:38,649 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 06:41:38,649 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 06:41:38,650 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 06:41:38,650 INFO  L87              Difference]: Start difference. First operand 3094 states and 3443 transitions. cyclomatic complexity: 351 Second operand 3 states.
[2020-11-25 06:41:38,697 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 06:41:38,697 INFO  L93              Difference]: Finished difference Result 3658 states and 4071 transitions.
[2020-11-25 06:41:38,697 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 06:41:38,697 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3658 states and 4071 transitions.
[2020-11-25 06:41:38,706 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 06:41:38,718 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3658 states to 3492 states and 3883 transitions.
[2020-11-25 06:41:38,718 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 887
[2020-11-25 06:41:38,719 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 902
[2020-11-25 06:41:38,719 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3492 states and 3883 transitions.
[2020-11-25 06:41:38,722 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 06:41:38,722 INFO  L728         BuchiCegarLoop]: Abstraction has 3492 states and 3883 transitions.
[2020-11-25 06:41:38,725 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3492 states and 3883 transitions.
[2020-11-25 06:41:38,750 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3492 to 2988.
[2020-11-25 06:41:38,750 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2988 states.
[2020-11-25 06:41:38,753 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2988 states to 2988 states and 3249 transitions.
[2020-11-25 06:41:38,754 INFO  L751         BuchiCegarLoop]: Abstraction has 2988 states and 3249 transitions.
[2020-11-25 06:41:38,754 INFO  L631         BuchiCegarLoop]: Abstraction has 2988 states and 3249 transitions.
[2020-11-25 06:41:38,754 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 06:41:38,754 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2988 states and 3249 transitions.
[2020-11-25 06:41:38,757 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 06:41:38,757 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 06:41:38,758 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 06:41:38,760 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [24, 24, 24, 24, 24, 24, 24, 24, 24, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 06:41:38,760 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_BasicToken0 := false;
[L2]                 call_transfer_BasicToken0 := false;
[L2]     CALL        call main();
[L6511]              assume null == 0;
[L6512]  CALL        call this := FreshRefGenerator__success();
[L2509]              havoc newRef;
[L2510]              assume Alloc[newRef] == false;
[L2511]              Alloc[newRef] := true;
[L2512]              assume newRef != null;
[L6512]  RET         call this := FreshRefGenerator__success();
[L6513]              assume now >= 0;
[L6514]              assume DType[this] == TSTToken;
[L6515]              assume msgvalue_MSG == 0;
[L6516]              gas := gas - 53000;
[L6517]  CALL        call TSTToken_TSTToken(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L1531]              havoc __exception;
[L1532]              revert := false;
[L1533]  COND FALSE  !(__exception)
[L1557]  CALL        call TSTToken_TSTToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3626]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3626]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3627]  COND FALSE  !(revert)
[L3630]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3630]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3631]  COND FALSE  !(revert)
[L3634]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3634]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3635]  COND FALSE  !(revert)
[L3638]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3638]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3639]  COND FALSE  !(revert)
[L3642]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3642]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3643]  COND FALSE  !(revert)
[L3646]  CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3275]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3275]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3276]  COND FALSE  !(revert)
[L3279]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3279]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3280]  COND FALSE  !(revert)
[L3283]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3283]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3284]  COND FALSE  !(revert)
[L3287]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3287]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3288]  COND FALSE  !(revert)
[L3291]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3291]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3292]  COND FALSE  !(revert)
[L3295]  CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3239]              assume msgsender_MSG != null;
[L3240]              Balance[this] := 0;
[L3241]              mintingFinished_MintableToken[this] := false;
[L3295]  RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3296]  COND FALSE  !(revert)
[L3646]  RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3647]  COND FALSE  !(revert)
[L3650]  CALL        call CappedToken_CappedToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3464]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3464]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3465]  COND FALSE  !(revert)
[L3468]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3468]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3469]  COND FALSE  !(revert)
[L3472]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3472]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3473]  COND FALSE  !(revert)
[L3476]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3476]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3477]  COND FALSE  !(revert)
[L3480]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3480]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3481]  COND FALSE  !(revert)
[L3484]  CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3275]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3275]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3276]  COND FALSE  !(revert)
[L3279]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3279]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3280]  COND FALSE  !(revert)
[L3283]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3283]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3284]  COND FALSE  !(revert)
[L3287]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3287]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3288]  COND FALSE  !(revert)
[L3291]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3291]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3292]  COND FALSE  !(revert)
[L3295]  CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3239]              assume msgsender_MSG != null;
[L3240]              Balance[this] := 0;
[L3241]              mintingFinished_MintableToken[this] := false;
[L3295]  RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3296]  COND FALSE  !(revert)
[L3484]  RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3485]  COND FALSE  !(revert)
[L3488]  CALL        call CappedToken_CappedToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s704);
[L3419]              assume msgsender_MSG != null;
[L3420]              Balance[this] := 0;
[L3421]              cap_CappedToken[this] := 0;
[L3423]  COND FALSE  !(!(_cap_s704 > 0))
[L3427]              cap_CappedToken[this] := _cap_s704;
[L3488]  RET         call CappedToken_CappedToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s704);
[L3489]  COND FALSE  !(revert)
[L3650]  RET         call CappedToken_CappedToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3651]  COND FALSE  !(revert)
[L3654]  CALL        call TSTToken_TSTToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3580]              assume msgsender_MSG != null;
[L3581]              Balance[this] := 0;
[L3582]              name_TSTToken[this] := 1406741980;
[L3583]              symbol_TSTToken[this] := 57413297;
[L3584]              decimals_TSTToken[this] := 18;
[L3654]  RET         call TSTToken_TSTToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3655]  COND FALSE  !(revert)
[L1557]  RET         call TSTToken_TSTToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L1558]              assume !revert && gas >= 0;
[L6517]  RET         call TSTToken_TSTToken(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L6518]              assume !revert && gas >= 0;
[L6521]  CALL        call CorralChoice_TSTToken(this);
[L6333]              havoc msgsender_MSG;
[L6334]              havoc msgvalue_MSG;
[L6335]              havoc choice;
[L6336]              havoc __ret_0_owner;
[L6337]              havoc _newOwner_s153;
[L6338]              havoc __ret_0_totalSupply;
[L6339]              havoc _owner_s298;
[L6340]              havoc __ret_0_balanceOf;
[L6341]              havoc _to_s286;
[L6342]              havoc _value_s286;
[L6343]              havoc __ret_0_transfer;
[L6344]              havoc _owner_s479;
[L6345]              havoc _spender_s479;
[L6346]              havoc __ret_0_allowance;
[L6347]              havoc _from_s435;
[L6348]              havoc _to_s435;
[L6349]              havoc _value_s435;
[L6350]              havoc __ret_0_transferFrom;
[L6351]              havoc _spender_s463;
[L6352]              havoc _value_s463;
[L6353]              havoc __ret_0_approve;
[L6354]              havoc _spender_s521;
[L6355]              havoc _addedValue_s521;
[L6356]              havoc __ret_0_increaseApproval;
[L6357]              havoc _spender_s581;
[L6358]              havoc _subtractedValue_s581;
[L6359]              havoc __ret_0_decreaseApproval;
[L6360]              havoc __ret_0_mintingFinished;
[L6361]              havoc _to_s729;
[L6362]              havoc _amount_s729;
[L6363]              havoc __ret_0_mint;
[L6364]              havoc __ret_0_finishMinting;
[L6365]              havoc __ret_0_cap;
[L6366]              havoc _cap_s704;
[L6367]              havoc __ret_0_name;
[L6368]              havoc __ret_0_symbol;
[L6369]              havoc __ret_0_decimals;
[L6370]              havoc _cap_s750;
[L6371]              havoc tmpNow;
[L6372]              havoc gas;
[L6373]              assume gas > 4000000 && gas <= 8000000;
[L6374]              tmpNow := now;
[L6375]              havoc now;
[L6376]              assume now > tmpNow;
[L6377]              assume msgsender_MSG != null;
[L6378]              assume DType[msgsender_MSG] != SafeMath;
[L6379]              assume DType[msgsender_MSG] != Ownable;
[L6380]              assume DType[msgsender_MSG] != ERC20Basic;
[L6381]              assume DType[msgsender_MSG] != BasicToken;
[L6382]              assume DType[msgsender_MSG] != ERC20;
[L6383]              assume DType[msgsender_MSG] != StandardToken;
[L6384]              assume DType[msgsender_MSG] != MintableToken;
[L6385]              assume DType[msgsender_MSG] != CappedToken;
[L6386]              assume DType[msgsender_MSG] != TSTToken;
[L6387]              Alloc[msgsender_MSG] := true;
[L6388]  COND FALSE  !(choice == 18)
[L6394]  COND FALSE  !(choice == 17)
[L6400]  COND FALSE  !(choice == 16)
[L6406]  COND FALSE  !(choice == 15)
[L6412]  COND FALSE  !(choice == 14)
[L6418]  COND TRUE   choice == 13
[L6419]              gas := gas - 21000;
[L6420]  COND TRUE   gas >= 0
[L6421]              assume _value_s286 >= 0 && _value_s286 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6422]              assume msgvalue_MSG == 0;
[L6423]  CALL        call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s286 && _value_s286 <= balances_BasicToken[this][msgsender_MSG]) && _value_s286 >= 0) && _value_s286 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s286] >= 0) && balances_BasicToken[this][_to_s286] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BasicToken0 := true;
[L2]                 call_transfer_BasicToken0 := false;
[L2]                 revert := revert_hold;
[L555]               havoc __exception;
[L556]               revert := false;
[L557]   COND TRUE   __exception
[L558]               __tmp__Balance := Balance;
[L559]               __tmp__DType := DType;
[L560]               __tmp__Alloc := Alloc;
[L561]               __tmp__balance_ADDR := balance_ADDR;
[L562]               __tmp__M_Ref_int := M_Ref_int;
[L563]               __tmp__sum_balances0 := sum_balances0;
[L564]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L565]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L566]               __tmp__sum_allowed1 := sum_allowed1;
[L567]               __tmp__Length := Length;
[L568]               __tmp__now := now;
[L569]               __tmp__owner_Ownable := owner_Ownable;
[L570]               __tmp__balances_BasicToken := balances_BasicToken;
[L571]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L572]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L573]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L574]               __tmp__cap_CappedToken := cap_CappedToken;
[L575]               __tmp__name_TSTToken := name_TSTToken;
[L576]               __tmp__symbol_TSTToken := symbol_TSTToken;
[L577]               __tmp__decimals_TSTToken := decimals_TSTToken;
[L578]   CALL        call __ret_0_ := transfer~address~uint256_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L2861]  COND TRUE   !(_value_s286 <= __tmp__balances_BasicToken[this][msgsender_MSG])
[L2862]              revert := true;
[L578]   RET         call __ret_0_ := transfer~address~uint256_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L579]               assume revert || gas < 0;
[L6423]  RET         call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L6521]  RET         call CorralChoice_TSTToken(this);

Loop:
[L6521]  CALL        call CorralChoice_TSTToken(this);
[L6333]              havoc msgsender_MSG;
[L6334]              havoc msgvalue_MSG;
[L6335]              havoc choice;
[L6336]              havoc __ret_0_owner;
[L6337]              havoc _newOwner_s153;
[L6338]              havoc __ret_0_totalSupply;
[L6339]              havoc _owner_s298;
[L6340]              havoc __ret_0_balanceOf;
[L6341]              havoc _to_s286;
[L6342]              havoc _value_s286;
[L6343]              havoc __ret_0_transfer;
[L6344]              havoc _owner_s479;
[L6345]              havoc _spender_s479;
[L6346]              havoc __ret_0_allowance;
[L6347]              havoc _from_s435;
[L6348]              havoc _to_s435;
[L6349]              havoc _value_s435;
[L6350]              havoc __ret_0_transferFrom;
[L6351]              havoc _spender_s463;
[L6352]              havoc _value_s463;
[L6353]              havoc __ret_0_approve;
[L6354]              havoc _spender_s521;
[L6355]              havoc _addedValue_s521;
[L6356]              havoc __ret_0_increaseApproval;
[L6357]              havoc _spender_s581;
[L6358]              havoc _subtractedValue_s581;
[L6359]              havoc __ret_0_decreaseApproval;
[L6360]              havoc __ret_0_mintingFinished;
[L6361]              havoc _to_s729;
[L6362]              havoc _amount_s729;
[L6363]              havoc __ret_0_mint;
[L6364]              havoc __ret_0_finishMinting;
[L6365]              havoc __ret_0_cap;
[L6366]              havoc _cap_s704;
[L6367]              havoc __ret_0_name;
[L6368]              havoc __ret_0_symbol;
[L6369]              havoc __ret_0_decimals;
[L6370]              havoc _cap_s750;
[L6371]              havoc tmpNow;
[L6372]              havoc gas;
[L6373]              assume gas > 4000000 && gas <= 8000000;
[L6374]              tmpNow := now;
[L6375]              havoc now;
[L6376]              assume now > tmpNow;
[L6377]              assume msgsender_MSG != null;
[L6378]              assume DType[msgsender_MSG] != SafeMath;
[L6379]              assume DType[msgsender_MSG] != Ownable;
[L6380]              assume DType[msgsender_MSG] != ERC20Basic;
[L6381]              assume DType[msgsender_MSG] != BasicToken;
[L6382]              assume DType[msgsender_MSG] != ERC20;
[L6383]              assume DType[msgsender_MSG] != StandardToken;
[L6384]              assume DType[msgsender_MSG] != MintableToken;
[L6385]              assume DType[msgsender_MSG] != CappedToken;
[L6386]              assume DType[msgsender_MSG] != TSTToken;
[L6387]              Alloc[msgsender_MSG] := true;
[L6388]  COND FALSE  !(choice == 18)
[L6394]  COND FALSE  !(choice == 17)
[L6400]  COND FALSE  !(choice == 16)
[L6406]  COND FALSE  !(choice == 15)
[L6412]  COND FALSE  !(choice == 14)
[L6418]  COND TRUE   choice == 13
[L6419]              gas := gas - 21000;
[L6420]  COND TRUE   gas >= 0
[L6421]              assume _value_s286 >= 0 && _value_s286 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6422]              assume msgvalue_MSG == 0;
[L6423]  CALL        call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s286 && _value_s286 <= balances_BasicToken[this][msgsender_MSG]) && _value_s286 >= 0) && _value_s286 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s286] >= 0) && balances_BasicToken[this][_to_s286] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BasicToken0 := true;
[L2]                 call_transfer_BasicToken0 := false;
[L2]                 revert := revert_hold;
[L555]               havoc __exception;
[L556]               revert := false;
[L557]   COND TRUE   __exception
[L558]               __tmp__Balance := Balance;
[L559]               __tmp__DType := DType;
[L560]               __tmp__Alloc := Alloc;
[L561]               __tmp__balance_ADDR := balance_ADDR;
[L562]               __tmp__M_Ref_int := M_Ref_int;
[L563]               __tmp__sum_balances0 := sum_balances0;
[L564]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L565]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L566]               __tmp__sum_allowed1 := sum_allowed1;
[L567]               __tmp__Length := Length;
[L568]               __tmp__now := now;
[L569]               __tmp__owner_Ownable := owner_Ownable;
[L570]               __tmp__balances_BasicToken := balances_BasicToken;
[L571]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L572]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L573]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L574]               __tmp__cap_CappedToken := cap_CappedToken;
[L575]               __tmp__name_TSTToken := name_TSTToken;
[L576]               __tmp__symbol_TSTToken := symbol_TSTToken;
[L577]               __tmp__decimals_TSTToken := decimals_TSTToken;
[L578]   CALL        call __ret_0_ := transfer~address~uint256_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L2861]  COND TRUE   !(_value_s286 <= __tmp__balances_BasicToken[this][msgsender_MSG])
[L2862]              revert := true;
[L578]   RET         call __ret_0_ := transfer~address~uint256_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L579]               assume revert || gas < 0;
[L6423]  RET         call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L6521]  RET         call CorralChoice_TSTToken(this);

[2020-11-25 06:41:38,767 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 06:41:38,768 INFO  L82        PathProgramCache]: Analyzing trace with hash 1844347255, now seen corresponding path program 1 times
[2020-11-25 06:41:38,768 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 06:41:38,792 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 06:41:39,049 INFO  L134       CoverageAnalysis]: Checked inductivity of 3875 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 3875 trivial. 0 not checked.
[2020-11-25 06:41:39,049 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 06:41:39,049 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 06:41:39,050 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 06:41:39,050 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 06:41:39,050 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-25 06:41:39,050 INFO  L87              Difference]: Start difference. First operand 2988 states and 3249 transitions. cyclomatic complexity: 263 Second operand 6 states.
[2020-11-25 06:41:39,728 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 06:41:39,728 INFO  L93              Difference]: Finished difference Result 3192 states and 3470 transitions.
[2020-11-25 06:41:39,729 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 06:41:39,729 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3192 states and 3470 transitions.
[2020-11-25 06:41:39,740 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 06:41:39,751 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3192 states to 3192 states and 3470 transitions.
[2020-11-25 06:41:39,751 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 848
[2020-11-25 06:41:39,752 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 848
[2020-11-25 06:41:39,752 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3192 states and 3470 transitions.
[2020-11-25 06:41:39,755 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 06:41:39,755 INFO  L728         BuchiCegarLoop]: Abstraction has 3192 states and 3470 transitions.
[2020-11-25 06:41:39,758 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3192 states and 3470 transitions.
[2020-11-25 06:41:39,784 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3192 to 3046.
[2020-11-25 06:41:39,784 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3046 states.
[2020-11-25 06:41:39,788 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3046 states to 3046 states and 3311 transitions.
[2020-11-25 06:41:39,789 INFO  L751         BuchiCegarLoop]: Abstraction has 3046 states and 3311 transitions.
[2020-11-25 06:41:39,789 INFO  L631         BuchiCegarLoop]: Abstraction has 3046 states and 3311 transitions.
[2020-11-25 06:41:39,789 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 06:41:39,789 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3046 states and 3311 transitions.
[2020-11-25 06:41:39,793 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 06:41:39,794 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 06:41:39,794 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 06:41:39,797 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [24, 24, 24, 24, 24, 24, 24, 24, 24, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 06:41:39,797 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_BasicToken0 := false;
[L2]                 call_transfer_BasicToken0 := false;
[L2]     CALL        call main();
[L6511]              assume null == 0;
[L6512]  CALL        call this := FreshRefGenerator__success();
[L2509]              havoc newRef;
[L2510]              assume Alloc[newRef] == false;
[L2511]              Alloc[newRef] := true;
[L2512]              assume newRef != null;
[L6512]  RET         call this := FreshRefGenerator__success();
[L6513]              assume now >= 0;
[L6514]              assume DType[this] == TSTToken;
[L6515]              assume msgvalue_MSG == 0;
[L6516]              gas := gas - 53000;
[L6517]  CALL        call TSTToken_TSTToken(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L1531]              havoc __exception;
[L1532]              revert := false;
[L1533]  COND FALSE  !(__exception)
[L1557]  CALL        call TSTToken_TSTToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3626]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3626]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3627]  COND FALSE  !(revert)
[L3630]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3630]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3631]  COND FALSE  !(revert)
[L3634]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3634]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3635]  COND FALSE  !(revert)
[L3638]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3638]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3639]  COND FALSE  !(revert)
[L3642]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3642]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3643]  COND FALSE  !(revert)
[L3646]  CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3275]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3275]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3276]  COND FALSE  !(revert)
[L3279]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3279]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3280]  COND FALSE  !(revert)
[L3283]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3283]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3284]  COND FALSE  !(revert)
[L3287]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3287]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3288]  COND FALSE  !(revert)
[L3291]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3291]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3292]  COND FALSE  !(revert)
[L3295]  CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3239]              assume msgsender_MSG != null;
[L3240]              Balance[this] := 0;
[L3241]              mintingFinished_MintableToken[this] := false;
[L3295]  RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3296]  COND FALSE  !(revert)
[L3646]  RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3647]  COND FALSE  !(revert)
[L3650]  CALL        call CappedToken_CappedToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3464]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3464]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3465]  COND FALSE  !(revert)
[L3468]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3468]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3469]  COND FALSE  !(revert)
[L3472]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3472]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3473]  COND FALSE  !(revert)
[L3476]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3476]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3477]  COND FALSE  !(revert)
[L3480]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3480]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3481]  COND FALSE  !(revert)
[L3484]  CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3275]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3275]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3276]  COND FALSE  !(revert)
[L3279]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3279]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3280]  COND FALSE  !(revert)
[L3283]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3283]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3284]  COND FALSE  !(revert)
[L3287]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3287]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3288]  COND FALSE  !(revert)
[L3291]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3291]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3292]  COND FALSE  !(revert)
[L3295]  CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3239]              assume msgsender_MSG != null;
[L3240]              Balance[this] := 0;
[L3241]              mintingFinished_MintableToken[this] := false;
[L3295]  RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3296]  COND FALSE  !(revert)
[L3484]  RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3485]  COND FALSE  !(revert)
[L3488]  CALL        call CappedToken_CappedToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s704);
[L3419]              assume msgsender_MSG != null;
[L3420]              Balance[this] := 0;
[L3421]              cap_CappedToken[this] := 0;
[L3423]  COND FALSE  !(!(_cap_s704 > 0))
[L3427]              cap_CappedToken[this] := _cap_s704;
[L3488]  RET         call CappedToken_CappedToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s704);
[L3489]  COND FALSE  !(revert)
[L3650]  RET         call CappedToken_CappedToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3651]  COND FALSE  !(revert)
[L3654]  CALL        call TSTToken_TSTToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3580]              assume msgsender_MSG != null;
[L3581]              Balance[this] := 0;
[L3582]              name_TSTToken[this] := 1406741980;
[L3583]              symbol_TSTToken[this] := 57413297;
[L3584]              decimals_TSTToken[this] := 18;
[L3654]  RET         call TSTToken_TSTToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3655]  COND FALSE  !(revert)
[L1557]  RET         call TSTToken_TSTToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L1558]              assume !revert && gas >= 0;
[L6517]  RET         call TSTToken_TSTToken(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L6518]              assume !revert && gas >= 0;
[L6521]  CALL        call CorralChoice_TSTToken(this);
[L6333]              havoc msgsender_MSG;
[L6334]              havoc msgvalue_MSG;
[L6335]              havoc choice;
[L6336]              havoc __ret_0_owner;
[L6337]              havoc _newOwner_s153;
[L6338]              havoc __ret_0_totalSupply;
[L6339]              havoc _owner_s298;
[L6340]              havoc __ret_0_balanceOf;
[L6341]              havoc _to_s286;
[L6342]              havoc _value_s286;
[L6343]              havoc __ret_0_transfer;
[L6344]              havoc _owner_s479;
[L6345]              havoc _spender_s479;
[L6346]              havoc __ret_0_allowance;
[L6347]              havoc _from_s435;
[L6348]              havoc _to_s435;
[L6349]              havoc _value_s435;
[L6350]              havoc __ret_0_transferFrom;
[L6351]              havoc _spender_s463;
[L6352]              havoc _value_s463;
[L6353]              havoc __ret_0_approve;
[L6354]              havoc _spender_s521;
[L6355]              havoc _addedValue_s521;
[L6356]              havoc __ret_0_increaseApproval;
[L6357]              havoc _spender_s581;
[L6358]              havoc _subtractedValue_s581;
[L6359]              havoc __ret_0_decreaseApproval;
[L6360]              havoc __ret_0_mintingFinished;
[L6361]              havoc _to_s729;
[L6362]              havoc _amount_s729;
[L6363]              havoc __ret_0_mint;
[L6364]              havoc __ret_0_finishMinting;
[L6365]              havoc __ret_0_cap;
[L6366]              havoc _cap_s704;
[L6367]              havoc __ret_0_name;
[L6368]              havoc __ret_0_symbol;
[L6369]              havoc __ret_0_decimals;
[L6370]              havoc _cap_s750;
[L6371]              havoc tmpNow;
[L6372]              havoc gas;
[L6373]              assume gas > 4000000 && gas <= 8000000;
[L6374]              tmpNow := now;
[L6375]              havoc now;
[L6376]              assume now > tmpNow;
[L6377]              assume msgsender_MSG != null;
[L6378]              assume DType[msgsender_MSG] != SafeMath;
[L6379]              assume DType[msgsender_MSG] != Ownable;
[L6380]              assume DType[msgsender_MSG] != ERC20Basic;
[L6381]              assume DType[msgsender_MSG] != BasicToken;
[L6382]              assume DType[msgsender_MSG] != ERC20;
[L6383]              assume DType[msgsender_MSG] != StandardToken;
[L6384]              assume DType[msgsender_MSG] != MintableToken;
[L6385]              assume DType[msgsender_MSG] != CappedToken;
[L6386]              assume DType[msgsender_MSG] != TSTToken;
[L6387]              Alloc[msgsender_MSG] := true;
[L6388]  COND FALSE  !(choice == 18)
[L6394]  COND FALSE  !(choice == 17)
[L6400]  COND FALSE  !(choice == 16)
[L6406]  COND FALSE  !(choice == 15)
[L6412]  COND FALSE  !(choice == 14)
[L6418]  COND TRUE   choice == 13
[L6419]              gas := gas - 21000;
[L6420]  COND TRUE   gas >= 0
[L6421]              assume _value_s286 >= 0 && _value_s286 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6422]              assume msgvalue_MSG == 0;
[L6423]  CALL        call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s286 && _value_s286 <= balances_BasicToken[this][msgsender_MSG]) && _value_s286 >= 0) && _value_s286 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s286] >= 0) && balances_BasicToken[this][_to_s286] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BasicToken0 := true;
[L2]                 call_transfer_BasicToken0 := false;
[L2]                 revert := revert_hold;
[L555]               havoc __exception;
[L556]               revert := false;
[L557]   COND TRUE   __exception
[L558]               __tmp__Balance := Balance;
[L559]               __tmp__DType := DType;
[L560]               __tmp__Alloc := Alloc;
[L561]               __tmp__balance_ADDR := balance_ADDR;
[L562]               __tmp__M_Ref_int := M_Ref_int;
[L563]               __tmp__sum_balances0 := sum_balances0;
[L564]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L565]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L566]               __tmp__sum_allowed1 := sum_allowed1;
[L567]               __tmp__Length := Length;
[L568]               __tmp__now := now;
[L569]               __tmp__owner_Ownable := owner_Ownable;
[L570]               __tmp__balances_BasicToken := balances_BasicToken;
[L571]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L572]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L573]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L574]               __tmp__cap_CappedToken := cap_CappedToken;
[L575]               __tmp__name_TSTToken := name_TSTToken;
[L576]               __tmp__symbol_TSTToken := symbol_TSTToken;
[L577]               __tmp__decimals_TSTToken := decimals_TSTToken;
[L578]   CALL        call __ret_0_ := transfer~address~uint256_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L2861]  COND FALSE  !(!(_value_s286 <= __tmp__balances_BasicToken[this][msgsender_MSG]))
[L2865]              __var_3 := null;
[L2866]  COND TRUE   !(_to_s286 != null)
[L2867]              revert := true;
[L578]   RET         call __ret_0_ := transfer~address~uint256_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L579]               assume revert || gas < 0;
[L6423]  RET         call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L6521]  RET         call CorralChoice_TSTToken(this);

Loop:
[L6521]  CALL        call CorralChoice_TSTToken(this);
[L6333]              havoc msgsender_MSG;
[L6334]              havoc msgvalue_MSG;
[L6335]              havoc choice;
[L6336]              havoc __ret_0_owner;
[L6337]              havoc _newOwner_s153;
[L6338]              havoc __ret_0_totalSupply;
[L6339]              havoc _owner_s298;
[L6340]              havoc __ret_0_balanceOf;
[L6341]              havoc _to_s286;
[L6342]              havoc _value_s286;
[L6343]              havoc __ret_0_transfer;
[L6344]              havoc _owner_s479;
[L6345]              havoc _spender_s479;
[L6346]              havoc __ret_0_allowance;
[L6347]              havoc _from_s435;
[L6348]              havoc _to_s435;
[L6349]              havoc _value_s435;
[L6350]              havoc __ret_0_transferFrom;
[L6351]              havoc _spender_s463;
[L6352]              havoc _value_s463;
[L6353]              havoc __ret_0_approve;
[L6354]              havoc _spender_s521;
[L6355]              havoc _addedValue_s521;
[L6356]              havoc __ret_0_increaseApproval;
[L6357]              havoc _spender_s581;
[L6358]              havoc _subtractedValue_s581;
[L6359]              havoc __ret_0_decreaseApproval;
[L6360]              havoc __ret_0_mintingFinished;
[L6361]              havoc _to_s729;
[L6362]              havoc _amount_s729;
[L6363]              havoc __ret_0_mint;
[L6364]              havoc __ret_0_finishMinting;
[L6365]              havoc __ret_0_cap;
[L6366]              havoc _cap_s704;
[L6367]              havoc __ret_0_name;
[L6368]              havoc __ret_0_symbol;
[L6369]              havoc __ret_0_decimals;
[L6370]              havoc _cap_s750;
[L6371]              havoc tmpNow;
[L6372]              havoc gas;
[L6373]              assume gas > 4000000 && gas <= 8000000;
[L6374]              tmpNow := now;
[L6375]              havoc now;
[L6376]              assume now > tmpNow;
[L6377]              assume msgsender_MSG != null;
[L6378]              assume DType[msgsender_MSG] != SafeMath;
[L6379]              assume DType[msgsender_MSG] != Ownable;
[L6380]              assume DType[msgsender_MSG] != ERC20Basic;
[L6381]              assume DType[msgsender_MSG] != BasicToken;
[L6382]              assume DType[msgsender_MSG] != ERC20;
[L6383]              assume DType[msgsender_MSG] != StandardToken;
[L6384]              assume DType[msgsender_MSG] != MintableToken;
[L6385]              assume DType[msgsender_MSG] != CappedToken;
[L6386]              assume DType[msgsender_MSG] != TSTToken;
[L6387]              Alloc[msgsender_MSG] := true;
[L6388]  COND FALSE  !(choice == 18)
[L6394]  COND FALSE  !(choice == 17)
[L6400]  COND FALSE  !(choice == 16)
[L6406]  COND FALSE  !(choice == 15)
[L6412]  COND FALSE  !(choice == 14)
[L6418]  COND TRUE   choice == 13
[L6419]              gas := gas - 21000;
[L6420]  COND TRUE   gas >= 0
[L6421]              assume _value_s286 >= 0 && _value_s286 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6422]              assume msgvalue_MSG == 0;
[L6423]  CALL        call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s286 && _value_s286 <= balances_BasicToken[this][msgsender_MSG]) && _value_s286 >= 0) && _value_s286 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s286] >= 0) && balances_BasicToken[this][_to_s286] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BasicToken0 := true;
[L2]                 call_transfer_BasicToken0 := false;
[L2]                 revert := revert_hold;
[L555]               havoc __exception;
[L556]               revert := false;
[L557]   COND TRUE   __exception
[L558]               __tmp__Balance := Balance;
[L559]               __tmp__DType := DType;
[L560]               __tmp__Alloc := Alloc;
[L561]               __tmp__balance_ADDR := balance_ADDR;
[L562]               __tmp__M_Ref_int := M_Ref_int;
[L563]               __tmp__sum_balances0 := sum_balances0;
[L564]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L565]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L566]               __tmp__sum_allowed1 := sum_allowed1;
[L567]               __tmp__Length := Length;
[L568]               __tmp__now := now;
[L569]               __tmp__owner_Ownable := owner_Ownable;
[L570]               __tmp__balances_BasicToken := balances_BasicToken;
[L571]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L572]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L573]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L574]               __tmp__cap_CappedToken := cap_CappedToken;
[L575]               __tmp__name_TSTToken := name_TSTToken;
[L576]               __tmp__symbol_TSTToken := symbol_TSTToken;
[L577]               __tmp__decimals_TSTToken := decimals_TSTToken;
[L578]   CALL        call __ret_0_ := transfer~address~uint256_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L2861]  COND FALSE  !(!(_value_s286 <= __tmp__balances_BasicToken[this][msgsender_MSG]))
[L2865]              __var_3 := null;
[L2866]  COND TRUE   !(_to_s286 != null)
[L2867]              revert := true;
[L578]   RET         call __ret_0_ := transfer~address~uint256_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L579]               assume revert || gas < 0;
[L6423]  RET         call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L6521]  RET         call CorralChoice_TSTToken(this);

[2020-11-25 06:41:39,804 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 06:41:39,804 INFO  L82        PathProgramCache]: Analyzing trace with hash 813880907, now seen corresponding path program 1 times
[2020-11-25 06:41:39,805 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 06:41:39,829 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 06:41:40,088 INFO  L134       CoverageAnalysis]: Checked inductivity of 3875 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 3875 trivial. 0 not checked.
[2020-11-25 06:41:40,088 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 06:41:40,088 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 06:41:40,089 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 06:41:40,089 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 06:41:40,089 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-25 06:41:40,089 INFO  L87              Difference]: Start difference. First operand 3046 states and 3311 transitions. cyclomatic complexity: 267 Second operand 6 states.
[2020-11-25 06:41:40,124 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 06:41:40,124 INFO  L93              Difference]: Finished difference Result 3080 states and 3348 transitions.
[2020-11-25 06:41:40,124 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-11-25 06:41:40,125 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3080 states and 3348 transitions.
[2020-11-25 06:41:40,130 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 06:41:40,136 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3080 states to 3072 states and 3340 transitions.
[2020-11-25 06:41:40,136 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 790
[2020-11-25 06:41:40,137 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 790
[2020-11-25 06:41:40,137 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3072 states and 3340 transitions.
[2020-11-25 06:41:40,139 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 06:41:40,139 INFO  L728         BuchiCegarLoop]: Abstraction has 3072 states and 3340 transitions.
[2020-11-25 06:41:40,141 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3072 states and 3340 transitions.
[2020-11-25 06:41:40,159 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3072 to 3053.
[2020-11-25 06:41:40,159 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3053 states.
[2020-11-25 06:41:40,162 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3053 states to 3053 states and 3319 transitions.
[2020-11-25 06:41:40,162 INFO  L751         BuchiCegarLoop]: Abstraction has 3053 states and 3319 transitions.
[2020-11-25 06:41:40,162 INFO  L631         BuchiCegarLoop]: Abstraction has 3053 states and 3319 transitions.
[2020-11-25 06:41:40,162 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 06:41:40,162 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3053 states and 3319 transitions.
[2020-11-25 06:41:40,165 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 06:41:40,166 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 06:41:40,166 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 06:41:40,167 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [24, 24, 24, 24, 24, 24, 24, 24, 24, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 06:41:40,168 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_BasicToken0 := false;
[L2]                 call_transfer_BasicToken0 := false;
[L2]     CALL        call main();
[L6511]              assume null == 0;
[L6512]  CALL        call this := FreshRefGenerator__success();
[L2509]              havoc newRef;
[L2510]              assume Alloc[newRef] == false;
[L2511]              Alloc[newRef] := true;
[L2512]              assume newRef != null;
[L6512]  RET         call this := FreshRefGenerator__success();
[L6513]              assume now >= 0;
[L6514]              assume DType[this] == TSTToken;
[L6515]              assume msgvalue_MSG == 0;
[L6516]              gas := gas - 53000;
[L6517]  CALL        call TSTToken_TSTToken(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L1531]              havoc __exception;
[L1532]              revert := false;
[L1533]  COND FALSE  !(__exception)
[L1557]  CALL        call TSTToken_TSTToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3626]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3626]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3627]  COND FALSE  !(revert)
[L3630]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3630]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3631]  COND FALSE  !(revert)
[L3634]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3634]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3635]  COND FALSE  !(revert)
[L3638]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3638]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3639]  COND FALSE  !(revert)
[L3642]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3642]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3643]  COND FALSE  !(revert)
[L3646]  CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3275]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3275]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3276]  COND FALSE  !(revert)
[L3279]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3279]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3280]  COND FALSE  !(revert)
[L3283]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3283]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3284]  COND FALSE  !(revert)
[L3287]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3287]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3288]  COND FALSE  !(revert)
[L3291]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3291]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3292]  COND FALSE  !(revert)
[L3295]  CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3239]              assume msgsender_MSG != null;
[L3240]              Balance[this] := 0;
[L3241]              mintingFinished_MintableToken[this] := false;
[L3295]  RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3296]  COND FALSE  !(revert)
[L3646]  RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3647]  COND FALSE  !(revert)
[L3650]  CALL        call CappedToken_CappedToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3464]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3464]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3465]  COND FALSE  !(revert)
[L3468]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3468]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3469]  COND FALSE  !(revert)
[L3472]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3472]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3473]  COND FALSE  !(revert)
[L3476]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3476]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3477]  COND FALSE  !(revert)
[L3480]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3480]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3481]  COND FALSE  !(revert)
[L3484]  CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3275]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3275]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3276]  COND FALSE  !(revert)
[L3279]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3279]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3280]  COND FALSE  !(revert)
[L3283]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3283]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3284]  COND FALSE  !(revert)
[L3287]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3287]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3288]  COND FALSE  !(revert)
[L3291]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3291]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3292]  COND FALSE  !(revert)
[L3295]  CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3239]              assume msgsender_MSG != null;
[L3240]              Balance[this] := 0;
[L3241]              mintingFinished_MintableToken[this] := false;
[L3295]  RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3296]  COND FALSE  !(revert)
[L3484]  RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3485]  COND FALSE  !(revert)
[L3488]  CALL        call CappedToken_CappedToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s704);
[L3419]              assume msgsender_MSG != null;
[L3420]              Balance[this] := 0;
[L3421]              cap_CappedToken[this] := 0;
[L3423]  COND FALSE  !(!(_cap_s704 > 0))
[L3427]              cap_CappedToken[this] := _cap_s704;
[L3488]  RET         call CappedToken_CappedToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s704);
[L3489]  COND FALSE  !(revert)
[L3650]  RET         call CappedToken_CappedToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3651]  COND FALSE  !(revert)
[L3654]  CALL        call TSTToken_TSTToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3580]              assume msgsender_MSG != null;
[L3581]              Balance[this] := 0;
[L3582]              name_TSTToken[this] := 1406741980;
[L3583]              symbol_TSTToken[this] := 57413297;
[L3584]              decimals_TSTToken[this] := 18;
[L3654]  RET         call TSTToken_TSTToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3655]  COND FALSE  !(revert)
[L1557]  RET         call TSTToken_TSTToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L1558]              assume !revert && gas >= 0;
[L6517]  RET         call TSTToken_TSTToken(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L6518]              assume !revert && gas >= 0;
[L6521]  CALL        call CorralChoice_TSTToken(this);
[L6333]              havoc msgsender_MSG;
[L6334]              havoc msgvalue_MSG;
[L6335]              havoc choice;
[L6336]              havoc __ret_0_owner;
[L6337]              havoc _newOwner_s153;
[L6338]              havoc __ret_0_totalSupply;
[L6339]              havoc _owner_s298;
[L6340]              havoc __ret_0_balanceOf;
[L6341]              havoc _to_s286;
[L6342]              havoc _value_s286;
[L6343]              havoc __ret_0_transfer;
[L6344]              havoc _owner_s479;
[L6345]              havoc _spender_s479;
[L6346]              havoc __ret_0_allowance;
[L6347]              havoc _from_s435;
[L6348]              havoc _to_s435;
[L6349]              havoc _value_s435;
[L6350]              havoc __ret_0_transferFrom;
[L6351]              havoc _spender_s463;
[L6352]              havoc _value_s463;
[L6353]              havoc __ret_0_approve;
[L6354]              havoc _spender_s521;
[L6355]              havoc _addedValue_s521;
[L6356]              havoc __ret_0_increaseApproval;
[L6357]              havoc _spender_s581;
[L6358]              havoc _subtractedValue_s581;
[L6359]              havoc __ret_0_decreaseApproval;
[L6360]              havoc __ret_0_mintingFinished;
[L6361]              havoc _to_s729;
[L6362]              havoc _amount_s729;
[L6363]              havoc __ret_0_mint;
[L6364]              havoc __ret_0_finishMinting;
[L6365]              havoc __ret_0_cap;
[L6366]              havoc _cap_s704;
[L6367]              havoc __ret_0_name;
[L6368]              havoc __ret_0_symbol;
[L6369]              havoc __ret_0_decimals;
[L6370]              havoc _cap_s750;
[L6371]              havoc tmpNow;
[L6372]              havoc gas;
[L6373]              assume gas > 4000000 && gas <= 8000000;
[L6374]              tmpNow := now;
[L6375]              havoc now;
[L6376]              assume now > tmpNow;
[L6377]              assume msgsender_MSG != null;
[L6378]              assume DType[msgsender_MSG] != SafeMath;
[L6379]              assume DType[msgsender_MSG] != Ownable;
[L6380]              assume DType[msgsender_MSG] != ERC20Basic;
[L6381]              assume DType[msgsender_MSG] != BasicToken;
[L6382]              assume DType[msgsender_MSG] != ERC20;
[L6383]              assume DType[msgsender_MSG] != StandardToken;
[L6384]              assume DType[msgsender_MSG] != MintableToken;
[L6385]              assume DType[msgsender_MSG] != CappedToken;
[L6386]              assume DType[msgsender_MSG] != TSTToken;
[L6387]              Alloc[msgsender_MSG] := true;
[L6388]  COND FALSE  !(choice == 18)
[L6394]  COND FALSE  !(choice == 17)
[L6400]  COND FALSE  !(choice == 16)
[L6406]  COND FALSE  !(choice == 15)
[L6412]  COND FALSE  !(choice == 14)
[L6418]  COND TRUE   choice == 13
[L6419]              gas := gas - 21000;
[L6420]  COND TRUE   gas >= 0
[L6421]              assume _value_s286 >= 0 && _value_s286 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6422]              assume msgvalue_MSG == 0;
[L6423]  CALL        call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s286 && _value_s286 <= balances_BasicToken[this][msgsender_MSG]) && _value_s286 >= 0) && _value_s286 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s286] >= 0) && balances_BasicToken[this][_to_s286] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BasicToken0 := true;
[L2]                 call_transfer_BasicToken0 := false;
[L2]                 revert := revert_hold;
[L555]               havoc __exception;
[L556]               revert := false;
[L557]   COND FALSE  !(__exception)
[L581]   CALL        call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L2893]  COND FALSE  !(!(_value_s286 <= balances_BasicToken[this][msgsender_MSG]))
[L2897]              __var_3 := null;
[L2898]  COND FALSE  !(!(_to_s286 != null))
[L2902]  CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s286);
[L2590]              assert _b_s68 <= _a_s68;
[L2591]              __ret_0_ := (_a_s68 - _b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2902]  RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s286);
[L2903]  COND FALSE  !(revert)
[L2906]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L2907]              balances_BasicToken[this][msgsender_MSG] := __var_4;
[L2908]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L2909]  CALL        call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s286], _value_s286);
[L2604]              c_s92 := (_a_s92 + _b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2605]              assert c_s92 >= _a_s92;
[L2606]              c_s92 := c_s92;
[L2909]  RET         call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s286], _value_s286);
[L2910]  COND FALSE  !(revert)
[L2913]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s286];
[L2914]              balances_BasicToken[this][_to_s286] := __var_5;
[L2915]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s286];
[L2916]              assert { :EventEmitted "Transfer_BasicToken" } true;
[L2917]              __ret_0_ := true;
[L581]   RET         call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L582]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && name_TSTToken[this] == old(name_TSTToken[this])) && symbol_TSTToken[this] == old(symbol_TSTToken[this])) && decimals_TSTToken[this] == old(decimals_TSTToken[this])) && cap_CappedToken[this] == old(cap_CappedToken[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L6423]  RET         call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L6521]  RET         call CorralChoice_TSTToken(this);

Loop:
[L6521]  CALL        call CorralChoice_TSTToken(this);
[L6333]              havoc msgsender_MSG;
[L6334]              havoc msgvalue_MSG;
[L6335]              havoc choice;
[L6336]              havoc __ret_0_owner;
[L6337]              havoc _newOwner_s153;
[L6338]              havoc __ret_0_totalSupply;
[L6339]              havoc _owner_s298;
[L6340]              havoc __ret_0_balanceOf;
[L6341]              havoc _to_s286;
[L6342]              havoc _value_s286;
[L6343]              havoc __ret_0_transfer;
[L6344]              havoc _owner_s479;
[L6345]              havoc _spender_s479;
[L6346]              havoc __ret_0_allowance;
[L6347]              havoc _from_s435;
[L6348]              havoc _to_s435;
[L6349]              havoc _value_s435;
[L6350]              havoc __ret_0_transferFrom;
[L6351]              havoc _spender_s463;
[L6352]              havoc _value_s463;
[L6353]              havoc __ret_0_approve;
[L6354]              havoc _spender_s521;
[L6355]              havoc _addedValue_s521;
[L6356]              havoc __ret_0_increaseApproval;
[L6357]              havoc _spender_s581;
[L6358]              havoc _subtractedValue_s581;
[L6359]              havoc __ret_0_decreaseApproval;
[L6360]              havoc __ret_0_mintingFinished;
[L6361]              havoc _to_s729;
[L6362]              havoc _amount_s729;
[L6363]              havoc __ret_0_mint;
[L6364]              havoc __ret_0_finishMinting;
[L6365]              havoc __ret_0_cap;
[L6366]              havoc _cap_s704;
[L6367]              havoc __ret_0_name;
[L6368]              havoc __ret_0_symbol;
[L6369]              havoc __ret_0_decimals;
[L6370]              havoc _cap_s750;
[L6371]              havoc tmpNow;
[L6372]              havoc gas;
[L6373]              assume gas > 4000000 && gas <= 8000000;
[L6374]              tmpNow := now;
[L6375]              havoc now;
[L6376]              assume now > tmpNow;
[L6377]              assume msgsender_MSG != null;
[L6378]              assume DType[msgsender_MSG] != SafeMath;
[L6379]              assume DType[msgsender_MSG] != Ownable;
[L6380]              assume DType[msgsender_MSG] != ERC20Basic;
[L6381]              assume DType[msgsender_MSG] != BasicToken;
[L6382]              assume DType[msgsender_MSG] != ERC20;
[L6383]              assume DType[msgsender_MSG] != StandardToken;
[L6384]              assume DType[msgsender_MSG] != MintableToken;
[L6385]              assume DType[msgsender_MSG] != CappedToken;
[L6386]              assume DType[msgsender_MSG] != TSTToken;
[L6387]              Alloc[msgsender_MSG] := true;
[L6388]  COND FALSE  !(choice == 18)
[L6394]  COND FALSE  !(choice == 17)
[L6400]  COND FALSE  !(choice == 16)
[L6406]  COND FALSE  !(choice == 15)
[L6412]  COND FALSE  !(choice == 14)
[L6418]  COND TRUE   choice == 13
[L6419]              gas := gas - 21000;
[L6420]  COND TRUE   gas >= 0
[L6421]              assume _value_s286 >= 0 && _value_s286 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6422]              assume msgvalue_MSG == 0;
[L6423]  CALL        call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s286 && _value_s286 <= balances_BasicToken[this][msgsender_MSG]) && _value_s286 >= 0) && _value_s286 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s286] >= 0) && balances_BasicToken[this][_to_s286] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BasicToken0 := true;
[L2]                 call_transfer_BasicToken0 := false;
[L2]                 revert := revert_hold;
[L555]               havoc __exception;
[L556]               revert := false;
[L557]   COND FALSE  !(__exception)
[L581]   CALL        call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L2893]  COND FALSE  !(!(_value_s286 <= balances_BasicToken[this][msgsender_MSG]))
[L2897]              __var_3 := null;
[L2898]  COND FALSE  !(!(_to_s286 != null))
[L2902]  CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s286);
[L2590]              assert _b_s68 <= _a_s68;
[L2591]              __ret_0_ := (_a_s68 - _b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2902]  RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s286);
[L2903]  COND FALSE  !(revert)
[L2906]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L2907]              balances_BasicToken[this][msgsender_MSG] := __var_4;
[L2908]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L2909]  CALL        call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s286], _value_s286);
[L2604]              c_s92 := (_a_s92 + _b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2605]              assert c_s92 >= _a_s92;
[L2606]              c_s92 := c_s92;
[L2909]  RET         call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s286], _value_s286);
[L2910]  COND FALSE  !(revert)
[L2913]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s286];
[L2914]              balances_BasicToken[this][_to_s286] := __var_5;
[L2915]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s286];
[L2916]              assert { :EventEmitted "Transfer_BasicToken" } true;
[L2917]              __ret_0_ := true;
[L581]   RET         call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L582]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && name_TSTToken[this] == old(name_TSTToken[this])) && symbol_TSTToken[this] == old(symbol_TSTToken[this])) && decimals_TSTToken[this] == old(decimals_TSTToken[this])) && cap_CappedToken[this] == old(cap_CappedToken[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L6423]  RET         call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L6521]  RET         call CorralChoice_TSTToken(this);

[2020-11-25 06:41:40,174 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 06:41:40,174 INFO  L82        PathProgramCache]: Analyzing trace with hash -521462900, now seen corresponding path program 1 times
[2020-11-25 06:41:40,174 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 06:41:40,216 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 06:41:40,953 INFO  L134       CoverageAnalysis]: Checked inductivity of 3875 backedges. 87 proven. 0 refuted. 0 times theorem prover too weak. 3788 trivial. 0 not checked.
[2020-11-25 06:41:40,953 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 06:41:40,953 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [23] imperfect sequences [] total 23
[2020-11-25 06:41:40,954 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 06:41:40,954 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 24 interpolants.
[2020-11-25 06:41:40,954 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=53, Invalid=499, Unknown=0, NotChecked=0, Total=552
[2020-11-25 06:41:40,954 INFO  L87              Difference]: Start difference. First operand 3053 states and 3319 transitions. cyclomatic complexity: 268 Second operand 24 states.
[2020-11-25 06:41:45,493 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 06:41:45,493 INFO  L93              Difference]: Finished difference Result 3131 states and 3422 transitions.
[2020-11-25 06:41:45,493 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 27 states. 
[2020-11-25 06:41:45,493 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3131 states and 3422 transitions.
[2020-11-25 06:41:45,499 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 06:41:45,506 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3131 states to 3131 states and 3422 transitions.
[2020-11-25 06:41:45,506 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 808
[2020-11-25 06:41:45,507 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 808
[2020-11-25 06:41:45,507 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3131 states and 3422 transitions.
[2020-11-25 06:41:45,509 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 06:41:45,509 INFO  L728         BuchiCegarLoop]: Abstraction has 3131 states and 3422 transitions.
[2020-11-25 06:41:45,512 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3131 states and 3422 transitions.
[2020-11-25 06:41:45,529 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3131 to 3116.
[2020-11-25 06:41:45,529 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3116 states.
[2020-11-25 06:41:45,532 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3116 states to 3116 states and 3391 transitions.
[2020-11-25 06:41:45,532 INFO  L751         BuchiCegarLoop]: Abstraction has 3116 states and 3391 transitions.
[2020-11-25 06:41:45,532 INFO  L631         BuchiCegarLoop]: Abstraction has 3116 states and 3391 transitions.
[2020-11-25 06:41:45,532 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 06:41:45,532 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3116 states and 3391 transitions.
[2020-11-25 06:41:45,535 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 06:41:45,535 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 06:41:45,535 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 06:41:45,537 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [24, 24, 24, 24, 24, 24, 24, 24, 24, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 06:41:45,537 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_BasicToken0 := false;
[L2]                 call_transfer_BasicToken0 := false;
[L2]     CALL        call main();
[L6511]              assume null == 0;
[L6512]  CALL        call this := FreshRefGenerator__success();
[L2509]              havoc newRef;
[L2510]              assume Alloc[newRef] == false;
[L2511]              Alloc[newRef] := true;
[L2512]              assume newRef != null;
[L6512]  RET         call this := FreshRefGenerator__success();
[L6513]              assume now >= 0;
[L6514]              assume DType[this] == TSTToken;
[L6515]              assume msgvalue_MSG == 0;
[L6516]              gas := gas - 53000;
[L6517]  CALL        call TSTToken_TSTToken(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L1531]              havoc __exception;
[L1532]              revert := false;
[L1533]  COND FALSE  !(__exception)
[L1557]  CALL        call TSTToken_TSTToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3626]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3626]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3627]  COND FALSE  !(revert)
[L3630]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3630]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3631]  COND FALSE  !(revert)
[L3634]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3634]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3635]  COND FALSE  !(revert)
[L3638]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3638]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3639]  COND FALSE  !(revert)
[L3642]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3642]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3643]  COND FALSE  !(revert)
[L3646]  CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3275]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3275]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3276]  COND FALSE  !(revert)
[L3279]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3279]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3280]  COND FALSE  !(revert)
[L3283]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3283]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3284]  COND FALSE  !(revert)
[L3287]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3287]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3288]  COND FALSE  !(revert)
[L3291]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3291]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3292]  COND FALSE  !(revert)
[L3295]  CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3239]              assume msgsender_MSG != null;
[L3240]              Balance[this] := 0;
[L3241]              mintingFinished_MintableToken[this] := false;
[L3295]  RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3296]  COND FALSE  !(revert)
[L3646]  RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3647]  COND FALSE  !(revert)
[L3650]  CALL        call CappedToken_CappedToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3464]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3464]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3465]  COND FALSE  !(revert)
[L3468]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3468]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3469]  COND FALSE  !(revert)
[L3472]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3472]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3473]  COND FALSE  !(revert)
[L3476]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3476]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3477]  COND FALSE  !(revert)
[L3480]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3480]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3481]  COND FALSE  !(revert)
[L3484]  CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3275]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3275]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3276]  COND FALSE  !(revert)
[L3279]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3279]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3280]  COND FALSE  !(revert)
[L3283]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3283]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3284]  COND FALSE  !(revert)
[L3287]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3287]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3288]  COND FALSE  !(revert)
[L3291]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3291]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3292]  COND FALSE  !(revert)
[L3295]  CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3239]              assume msgsender_MSG != null;
[L3240]              Balance[this] := 0;
[L3241]              mintingFinished_MintableToken[this] := false;
[L3295]  RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3296]  COND FALSE  !(revert)
[L3484]  RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3485]  COND FALSE  !(revert)
[L3488]  CALL        call CappedToken_CappedToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s704);
[L3419]              assume msgsender_MSG != null;
[L3420]              Balance[this] := 0;
[L3421]              cap_CappedToken[this] := 0;
[L3423]  COND FALSE  !(!(_cap_s704 > 0))
[L3427]              cap_CappedToken[this] := _cap_s704;
[L3488]  RET         call CappedToken_CappedToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s704);
[L3489]  COND FALSE  !(revert)
[L3650]  RET         call CappedToken_CappedToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3651]  COND FALSE  !(revert)
[L3654]  CALL        call TSTToken_TSTToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3580]              assume msgsender_MSG != null;
[L3581]              Balance[this] := 0;
[L3582]              name_TSTToken[this] := 1406741980;
[L3583]              symbol_TSTToken[this] := 57413297;
[L3584]              decimals_TSTToken[this] := 18;
[L3654]  RET         call TSTToken_TSTToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3655]  COND FALSE  !(revert)
[L1557]  RET         call TSTToken_TSTToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L1558]              assume !revert && gas >= 0;
[L6517]  RET         call TSTToken_TSTToken(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L6518]              assume !revert && gas >= 0;
[L6521]  CALL        call CorralChoice_TSTToken(this);
[L6333]              havoc msgsender_MSG;
[L6334]              havoc msgvalue_MSG;
[L6335]              havoc choice;
[L6336]              havoc __ret_0_owner;
[L6337]              havoc _newOwner_s153;
[L6338]              havoc __ret_0_totalSupply;
[L6339]              havoc _owner_s298;
[L6340]              havoc __ret_0_balanceOf;
[L6341]              havoc _to_s286;
[L6342]              havoc _value_s286;
[L6343]              havoc __ret_0_transfer;
[L6344]              havoc _owner_s479;
[L6345]              havoc _spender_s479;
[L6346]              havoc __ret_0_allowance;
[L6347]              havoc _from_s435;
[L6348]              havoc _to_s435;
[L6349]              havoc _value_s435;
[L6350]              havoc __ret_0_transferFrom;
[L6351]              havoc _spender_s463;
[L6352]              havoc _value_s463;
[L6353]              havoc __ret_0_approve;
[L6354]              havoc _spender_s521;
[L6355]              havoc _addedValue_s521;
[L6356]              havoc __ret_0_increaseApproval;
[L6357]              havoc _spender_s581;
[L6358]              havoc _subtractedValue_s581;
[L6359]              havoc __ret_0_decreaseApproval;
[L6360]              havoc __ret_0_mintingFinished;
[L6361]              havoc _to_s729;
[L6362]              havoc _amount_s729;
[L6363]              havoc __ret_0_mint;
[L6364]              havoc __ret_0_finishMinting;
[L6365]              havoc __ret_0_cap;
[L6366]              havoc _cap_s704;
[L6367]              havoc __ret_0_name;
[L6368]              havoc __ret_0_symbol;
[L6369]              havoc __ret_0_decimals;
[L6370]              havoc _cap_s750;
[L6371]              havoc tmpNow;
[L6372]              havoc gas;
[L6373]              assume gas > 4000000 && gas <= 8000000;
[L6374]              tmpNow := now;
[L6375]              havoc now;
[L6376]              assume now > tmpNow;
[L6377]              assume msgsender_MSG != null;
[L6378]              assume DType[msgsender_MSG] != SafeMath;
[L6379]              assume DType[msgsender_MSG] != Ownable;
[L6380]              assume DType[msgsender_MSG] != ERC20Basic;
[L6381]              assume DType[msgsender_MSG] != BasicToken;
[L6382]              assume DType[msgsender_MSG] != ERC20;
[L6383]              assume DType[msgsender_MSG] != StandardToken;
[L6384]              assume DType[msgsender_MSG] != MintableToken;
[L6385]              assume DType[msgsender_MSG] != CappedToken;
[L6386]              assume DType[msgsender_MSG] != TSTToken;
[L6387]              Alloc[msgsender_MSG] := true;
[L6388]  COND FALSE  !(choice == 18)
[L6394]  COND FALSE  !(choice == 17)
[L6400]  COND FALSE  !(choice == 16)
[L6406]  COND FALSE  !(choice == 15)
[L6412]  COND FALSE  !(choice == 14)
[L6418]  COND TRUE   choice == 13
[L6419]              gas := gas - 21000;
[L6420]  COND TRUE   gas >= 0
[L6421]              assume _value_s286 >= 0 && _value_s286 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6422]              assume msgvalue_MSG == 0;
[L6423]  CALL        call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s286 && _value_s286 <= balances_BasicToken[this][msgsender_MSG]) && _value_s286 >= 0) && _value_s286 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s286] >= 0) && balances_BasicToken[this][_to_s286] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BasicToken0 := true;
[L2]                 call_transfer_BasicToken0 := false;
[L2]                 revert := revert_hold;
[L555]               havoc __exception;
[L556]               revert := false;
[L557]   COND TRUE   __exception
[L558]               __tmp__Balance := Balance;
[L559]               __tmp__DType := DType;
[L560]               __tmp__Alloc := Alloc;
[L561]               __tmp__balance_ADDR := balance_ADDR;
[L562]               __tmp__M_Ref_int := M_Ref_int;
[L563]               __tmp__sum_balances0 := sum_balances0;
[L564]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L565]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L566]               __tmp__sum_allowed1 := sum_allowed1;
[L567]               __tmp__Length := Length;
[L568]               __tmp__now := now;
[L569]               __tmp__owner_Ownable := owner_Ownable;
[L570]               __tmp__balances_BasicToken := balances_BasicToken;
[L571]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L572]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L573]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L574]               __tmp__cap_CappedToken := cap_CappedToken;
[L575]               __tmp__name_TSTToken := name_TSTToken;
[L576]               __tmp__symbol_TSTToken := symbol_TSTToken;
[L577]               __tmp__decimals_TSTToken := decimals_TSTToken;
[L578]   CALL        call __ret_0_ := transfer~address~uint256_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L2861]  COND FALSE  !(!(_value_s286 <= __tmp__balances_BasicToken[this][msgsender_MSG]))
[L2865]              __var_3 := null;
[L2866]  COND FALSE  !(!(_to_s286 != null))
[L2870]  CALL        call __var_4 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_BasicToken[this][msgsender_MSG], _value_s286);
[L2584]              __ret_0_ := (_a_s68 - _b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2870]  RET         call __var_4 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_BasicToken[this][msgsender_MSG], _value_s286);
[L2871]  COND FALSE  !(revert)
[L2874]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_BasicToken[this][msgsender_MSG];
[L2875]              __tmp__balances_BasicToken[this][msgsender_MSG] := __var_4;
[L2876]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_BasicToken[this][msgsender_MSG];
[L2877]  CALL        call __var_5 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_BasicToken[this][_to_s286], _value_s286);
[L2597]              c_s92 := (_a_s92 + _b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2598]              c_s92 := c_s92;
[L2877]  RET         call __var_5 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_BasicToken[this][_to_s286], _value_s286);
[L2878]  COND FALSE  !(revert)
[L2881]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_BasicToken[this][_to_s286];
[L2882]              __tmp__balances_BasicToken[this][_to_s286] := __var_5;
[L2883]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_BasicToken[this][_to_s286];
[L2884]              __ret_0_ := true;
[L578]   RET         call __ret_0_ := transfer~address~uint256_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L579]               assume revert || gas < 0;
[L6423]  RET         call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L6521]  RET         call CorralChoice_TSTToken(this);

Loop:
[L6521]  CALL        call CorralChoice_TSTToken(this);
[L6333]              havoc msgsender_MSG;
[L6334]              havoc msgvalue_MSG;
[L6335]              havoc choice;
[L6336]              havoc __ret_0_owner;
[L6337]              havoc _newOwner_s153;
[L6338]              havoc __ret_0_totalSupply;
[L6339]              havoc _owner_s298;
[L6340]              havoc __ret_0_balanceOf;
[L6341]              havoc _to_s286;
[L6342]              havoc _value_s286;
[L6343]              havoc __ret_0_transfer;
[L6344]              havoc _owner_s479;
[L6345]              havoc _spender_s479;
[L6346]              havoc __ret_0_allowance;
[L6347]              havoc _from_s435;
[L6348]              havoc _to_s435;
[L6349]              havoc _value_s435;
[L6350]              havoc __ret_0_transferFrom;
[L6351]              havoc _spender_s463;
[L6352]              havoc _value_s463;
[L6353]              havoc __ret_0_approve;
[L6354]              havoc _spender_s521;
[L6355]              havoc _addedValue_s521;
[L6356]              havoc __ret_0_increaseApproval;
[L6357]              havoc _spender_s581;
[L6358]              havoc _subtractedValue_s581;
[L6359]              havoc __ret_0_decreaseApproval;
[L6360]              havoc __ret_0_mintingFinished;
[L6361]              havoc _to_s729;
[L6362]              havoc _amount_s729;
[L6363]              havoc __ret_0_mint;
[L6364]              havoc __ret_0_finishMinting;
[L6365]              havoc __ret_0_cap;
[L6366]              havoc _cap_s704;
[L6367]              havoc __ret_0_name;
[L6368]              havoc __ret_0_symbol;
[L6369]              havoc __ret_0_decimals;
[L6370]              havoc _cap_s750;
[L6371]              havoc tmpNow;
[L6372]              havoc gas;
[L6373]              assume gas > 4000000 && gas <= 8000000;
[L6374]              tmpNow := now;
[L6375]              havoc now;
[L6376]              assume now > tmpNow;
[L6377]              assume msgsender_MSG != null;
[L6378]              assume DType[msgsender_MSG] != SafeMath;
[L6379]              assume DType[msgsender_MSG] != Ownable;
[L6380]              assume DType[msgsender_MSG] != ERC20Basic;
[L6381]              assume DType[msgsender_MSG] != BasicToken;
[L6382]              assume DType[msgsender_MSG] != ERC20;
[L6383]              assume DType[msgsender_MSG] != StandardToken;
[L6384]              assume DType[msgsender_MSG] != MintableToken;
[L6385]              assume DType[msgsender_MSG] != CappedToken;
[L6386]              assume DType[msgsender_MSG] != TSTToken;
[L6387]              Alloc[msgsender_MSG] := true;
[L6388]  COND FALSE  !(choice == 18)
[L6394]  COND FALSE  !(choice == 17)
[L6400]  COND FALSE  !(choice == 16)
[L6406]  COND FALSE  !(choice == 15)
[L6412]  COND FALSE  !(choice == 14)
[L6418]  COND TRUE   choice == 13
[L6419]              gas := gas - 21000;
[L6420]  COND TRUE   gas >= 0
[L6421]              assume _value_s286 >= 0 && _value_s286 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6422]              assume msgvalue_MSG == 0;
[L6423]  CALL        call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s286 && _value_s286 <= balances_BasicToken[this][msgsender_MSG]) && _value_s286 >= 0) && _value_s286 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s286] >= 0) && balances_BasicToken[this][_to_s286] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BasicToken0 := true;
[L2]                 call_transfer_BasicToken0 := false;
[L2]                 revert := revert_hold;
[L555]               havoc __exception;
[L556]               revert := false;
[L557]   COND TRUE   __exception
[L558]               __tmp__Balance := Balance;
[L559]               __tmp__DType := DType;
[L560]               __tmp__Alloc := Alloc;
[L561]               __tmp__balance_ADDR := balance_ADDR;
[L562]               __tmp__M_Ref_int := M_Ref_int;
[L563]               __tmp__sum_balances0 := sum_balances0;
[L564]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L565]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L566]               __tmp__sum_allowed1 := sum_allowed1;
[L567]               __tmp__Length := Length;
[L568]               __tmp__now := now;
[L569]               __tmp__owner_Ownable := owner_Ownable;
[L570]               __tmp__balances_BasicToken := balances_BasicToken;
[L571]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L572]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L573]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L574]               __tmp__cap_CappedToken := cap_CappedToken;
[L575]               __tmp__name_TSTToken := name_TSTToken;
[L576]               __tmp__symbol_TSTToken := symbol_TSTToken;
[L577]               __tmp__decimals_TSTToken := decimals_TSTToken;
[L578]   CALL        call __ret_0_ := transfer~address~uint256_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L2861]  COND FALSE  !(!(_value_s286 <= __tmp__balances_BasicToken[this][msgsender_MSG]))
[L2865]              __var_3 := null;
[L2866]  COND FALSE  !(!(_to_s286 != null))
[L2870]  CALL        call __var_4 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_BasicToken[this][msgsender_MSG], _value_s286);
[L2584]              __ret_0_ := (_a_s68 - _b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2870]  RET         call __var_4 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_BasicToken[this][msgsender_MSG], _value_s286);
[L2871]  COND FALSE  !(revert)
[L2874]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_BasicToken[this][msgsender_MSG];
[L2875]              __tmp__balances_BasicToken[this][msgsender_MSG] := __var_4;
[L2876]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_BasicToken[this][msgsender_MSG];
[L2877]  CALL        call __var_5 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_BasicToken[this][_to_s286], _value_s286);
[L2597]              c_s92 := (_a_s92 + _b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2598]              c_s92 := c_s92;
[L2877]  RET         call __var_5 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_BasicToken[this][_to_s286], _value_s286);
[L2878]  COND FALSE  !(revert)
[L2881]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_BasicToken[this][_to_s286];
[L2882]              __tmp__balances_BasicToken[this][_to_s286] := __var_5;
[L2883]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_BasicToken[this][_to_s286];
[L2884]              __ret_0_ := true;
[L578]   RET         call __ret_0_ := transfer~address~uint256_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L579]               assume revert || gas < 0;
[L6423]  RET         call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L6521]  RET         call CorralChoice_TSTToken(this);

[2020-11-25 06:41:45,543 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 06:41:45,543 INFO  L82        PathProgramCache]: Analyzing trace with hash 425018361, now seen corresponding path program 1 times
[2020-11-25 06:41:45,543 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 06:41:45,561 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 06:41:45,778 INFO  L134       CoverageAnalysis]: Checked inductivity of 3875 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 3875 trivial. 0 not checked.
[2020-11-25 06:41:45,778 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 06:41:45,778 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-25 06:41:45,778 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 06:41:45,778 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-25 06:41:45,779 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-11-25 06:41:45,779 INFO  L87              Difference]: Start difference. First operand 3116 states and 3391 transitions. cyclomatic complexity: 279 Second operand 5 states.
[2020-11-25 06:41:46,067 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 06:41:46,067 INFO  L93              Difference]: Finished difference Result 3784 states and 4194 transitions.
[2020-11-25 06:41:46,068 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 06:41:46,068 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3784 states and 4194 transitions.
[2020-11-25 06:41:46,075 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-11-25 06:41:46,082 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3784 states to 2620 states and 2985 transitions.
[2020-11-25 06:41:46,082 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 562
[2020-11-25 06:41:46,082 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 739
[2020-11-25 06:41:46,083 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2620 states and 2985 transitions.
[2020-11-25 06:41:46,085 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 06:41:46,085 INFO  L728         BuchiCegarLoop]: Abstraction has 2620 states and 2985 transitions.
[2020-11-25 06:41:46,087 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2620 states and 2985 transitions.
[2020-11-25 06:41:46,099 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2620 to 1981.
[2020-11-25 06:41:46,099 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1981 states.
[2020-11-25 06:41:46,101 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1981 states to 1981 states and 2168 transitions.
[2020-11-25 06:41:46,101 INFO  L751         BuchiCegarLoop]: Abstraction has 1981 states and 2168 transitions.
[2020-11-25 06:41:46,101 INFO  L631         BuchiCegarLoop]: Abstraction has 1981 states and 2168 transitions.
[2020-11-25 06:41:46,101 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 06:41:46,101 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1981 states and 2168 transitions.
[2020-11-25 06:41:46,103 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 06:41:46,103 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 06:41:46,103 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 06:41:46,105 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [24, 24, 24, 24, 24, 24, 24, 24, 24, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 06:41:46,105 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_BasicToken0 := false;
[L2]                 call_transfer_BasicToken0 := false;
[L2]     CALL        call main();
[L6511]              assume null == 0;
[L6512]  CALL        call this := FreshRefGenerator__success();
[L2509]              havoc newRef;
[L2510]              assume Alloc[newRef] == false;
[L2511]              Alloc[newRef] := true;
[L2512]              assume newRef != null;
[L6512]  RET         call this := FreshRefGenerator__success();
[L6513]              assume now >= 0;
[L6514]              assume DType[this] == TSTToken;
[L6515]              assume msgvalue_MSG == 0;
[L6516]              gas := gas - 53000;
[L6517]  CALL        call TSTToken_TSTToken(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L1531]              havoc __exception;
[L1532]              revert := false;
[L1533]  COND FALSE  !(__exception)
[L1557]  CALL        call TSTToken_TSTToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3626]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3626]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3627]  COND FALSE  !(revert)
[L3630]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3630]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3631]  COND FALSE  !(revert)
[L3634]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3634]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3635]  COND FALSE  !(revert)
[L3638]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3638]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3639]  COND FALSE  !(revert)
[L3642]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3642]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3643]  COND FALSE  !(revert)
[L3646]  CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3275]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3275]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3276]  COND FALSE  !(revert)
[L3279]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3279]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3280]  COND FALSE  !(revert)
[L3283]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3283]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3284]  COND FALSE  !(revert)
[L3287]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3287]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3288]  COND FALSE  !(revert)
[L3291]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3291]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3292]  COND FALSE  !(revert)
[L3295]  CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3239]              assume msgsender_MSG != null;
[L3240]              Balance[this] := 0;
[L3241]              mintingFinished_MintableToken[this] := false;
[L3295]  RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3296]  COND FALSE  !(revert)
[L3646]  RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3647]  COND FALSE  !(revert)
[L3650]  CALL        call CappedToken_CappedToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3464]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3464]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3465]  COND FALSE  !(revert)
[L3468]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3468]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3469]  COND FALSE  !(revert)
[L3472]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3472]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3473]  COND FALSE  !(revert)
[L3476]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3476]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3477]  COND FALSE  !(revert)
[L3480]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3480]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3481]  COND FALSE  !(revert)
[L3484]  CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3275]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3275]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3276]  COND FALSE  !(revert)
[L3279]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3279]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3280]  COND FALSE  !(revert)
[L3283]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3283]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3284]  COND FALSE  !(revert)
[L3287]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3287]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3288]  COND FALSE  !(revert)
[L3291]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3291]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3292]  COND FALSE  !(revert)
[L3295]  CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3239]              assume msgsender_MSG != null;
[L3240]              Balance[this] := 0;
[L3241]              mintingFinished_MintableToken[this] := false;
[L3295]  RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3296]  COND FALSE  !(revert)
[L3484]  RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3485]  COND FALSE  !(revert)
[L3488]  CALL        call CappedToken_CappedToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s704);
[L3419]              assume msgsender_MSG != null;
[L3420]              Balance[this] := 0;
[L3421]              cap_CappedToken[this] := 0;
[L3423]  COND FALSE  !(!(_cap_s704 > 0))
[L3427]              cap_CappedToken[this] := _cap_s704;
[L3488]  RET         call CappedToken_CappedToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s704);
[L3489]  COND FALSE  !(revert)
[L3650]  RET         call CappedToken_CappedToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3651]  COND FALSE  !(revert)
[L3654]  CALL        call TSTToken_TSTToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3580]              assume msgsender_MSG != null;
[L3581]              Balance[this] := 0;
[L3582]              name_TSTToken[this] := 1406741980;
[L3583]              symbol_TSTToken[this] := 57413297;
[L3584]              decimals_TSTToken[this] := 18;
[L3654]  RET         call TSTToken_TSTToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3655]  COND FALSE  !(revert)
[L1557]  RET         call TSTToken_TSTToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L1558]              assume !revert && gas >= 0;
[L6517]  RET         call TSTToken_TSTToken(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L6518]              assume !revert && gas >= 0;
[L6521]  CALL        call CorralChoice_TSTToken(this);
[L6333]              havoc msgsender_MSG;
[L6334]              havoc msgvalue_MSG;
[L6335]              havoc choice;
[L6336]              havoc __ret_0_owner;
[L6337]              havoc _newOwner_s153;
[L6338]              havoc __ret_0_totalSupply;
[L6339]              havoc _owner_s298;
[L6340]              havoc __ret_0_balanceOf;
[L6341]              havoc _to_s286;
[L6342]              havoc _value_s286;
[L6343]              havoc __ret_0_transfer;
[L6344]              havoc _owner_s479;
[L6345]              havoc _spender_s479;
[L6346]              havoc __ret_0_allowance;
[L6347]              havoc _from_s435;
[L6348]              havoc _to_s435;
[L6349]              havoc _value_s435;
[L6350]              havoc __ret_0_transferFrom;
[L6351]              havoc _spender_s463;
[L6352]              havoc _value_s463;
[L6353]              havoc __ret_0_approve;
[L6354]              havoc _spender_s521;
[L6355]              havoc _addedValue_s521;
[L6356]              havoc __ret_0_increaseApproval;
[L6357]              havoc _spender_s581;
[L6358]              havoc _subtractedValue_s581;
[L6359]              havoc __ret_0_decreaseApproval;
[L6360]              havoc __ret_0_mintingFinished;
[L6361]              havoc _to_s729;
[L6362]              havoc _amount_s729;
[L6363]              havoc __ret_0_mint;
[L6364]              havoc __ret_0_finishMinting;
[L6365]              havoc __ret_0_cap;
[L6366]              havoc _cap_s704;
[L6367]              havoc __ret_0_name;
[L6368]              havoc __ret_0_symbol;
[L6369]              havoc __ret_0_decimals;
[L6370]              havoc _cap_s750;
[L6371]              havoc tmpNow;
[L6372]              havoc gas;
[L6373]              assume gas > 4000000 && gas <= 8000000;
[L6374]              tmpNow := now;
[L6375]              havoc now;
[L6376]              assume now > tmpNow;
[L6377]              assume msgsender_MSG != null;
[L6378]              assume DType[msgsender_MSG] != SafeMath;
[L6379]              assume DType[msgsender_MSG] != Ownable;
[L6380]              assume DType[msgsender_MSG] != ERC20Basic;
[L6381]              assume DType[msgsender_MSG] != BasicToken;
[L6382]              assume DType[msgsender_MSG] != ERC20;
[L6383]              assume DType[msgsender_MSG] != StandardToken;
[L6384]              assume DType[msgsender_MSG] != MintableToken;
[L6385]              assume DType[msgsender_MSG] != CappedToken;
[L6386]              assume DType[msgsender_MSG] != TSTToken;
[L6387]              Alloc[msgsender_MSG] := true;
[L6388]  COND FALSE  !(choice == 18)
[L6394]  COND FALSE  !(choice == 17)
[L6400]  COND FALSE  !(choice == 16)
[L6406]  COND FALSE  !(choice == 15)
[L6412]  COND FALSE  !(choice == 14)
[L6418]  COND TRUE   choice == 13
[L6419]              gas := gas - 21000;
[L6420]  COND TRUE   gas >= 0
[L6421]              assume _value_s286 >= 0 && _value_s286 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6422]              assume msgvalue_MSG == 0;
[L6423]  CALL        call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == _to_s286 && _value_s286 <= balances_BasicToken[this][msgsender_MSG]) && _value_s286 >= 0) && _value_s286 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s286] >= 0) && balances_BasicToken[this][_to_s286] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L555]               havoc __exception;
[L556]               revert := false;
[L557]   COND FALSE  !(__exception)
[L581]   CALL        call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L2893]  COND FALSE  !(!(_value_s286 <= balances_BasicToken[this][msgsender_MSG]))
[L2897]              __var_3 := null;
[L2898]  COND FALSE  !(!(_to_s286 != null))
[L2902]  CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s286);
[L2590]              assert _b_s68 <= _a_s68;
[L2591]              __ret_0_ := (_a_s68 - _b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2902]  RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s286);
[L2903]  COND FALSE  !(revert)
[L2906]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L2907]              balances_BasicToken[this][msgsender_MSG] := __var_4;
[L2908]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L2909]  CALL        call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s286], _value_s286);
[L2604]              c_s92 := (_a_s92 + _b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2605]              assert c_s92 >= _a_s92;
[L2606]              c_s92 := c_s92;
[L2909]  RET         call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s286], _value_s286);
[L2910]  COND FALSE  !(revert)
[L2913]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s286];
[L2914]              balances_BasicToken[this][_to_s286] := __var_5;
[L2915]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s286];
[L2916]              assert { :EventEmitted "Transfer_BasicToken" } true;
[L2917]              __ret_0_ := true;
[L581]   RET         call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L582]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && name_TSTToken[this] == old(name_TSTToken[this])) && symbol_TSTToken[this] == old(symbol_TSTToken[this])) && decimals_TSTToken[this] == old(decimals_TSTToken[this])) && cap_CappedToken[this] == old(cap_CappedToken[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L6423]  RET         call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L6521]  RET         call CorralChoice_TSTToken(this);
[L6521]  CALL        call CorralChoice_TSTToken(this);
[L6333]              havoc msgsender_MSG;
[L6334]              havoc msgvalue_MSG;
[L6335]              havoc choice;
[L6336]              havoc __ret_0_owner;
[L6337]              havoc _newOwner_s153;
[L6338]              havoc __ret_0_totalSupply;
[L6339]              havoc _owner_s298;
[L6340]              havoc __ret_0_balanceOf;
[L6341]              havoc _to_s286;
[L6342]              havoc _value_s286;
[L6343]              havoc __ret_0_transfer;
[L6344]              havoc _owner_s479;
[L6345]              havoc _spender_s479;
[L6346]              havoc __ret_0_allowance;
[L6347]              havoc _from_s435;
[L6348]              havoc _to_s435;
[L6349]              havoc _value_s435;
[L6350]              havoc __ret_0_transferFrom;
[L6351]              havoc _spender_s463;
[L6352]              havoc _value_s463;
[L6353]              havoc __ret_0_approve;
[L6354]              havoc _spender_s521;
[L6355]              havoc _addedValue_s521;
[L6356]              havoc __ret_0_increaseApproval;
[L6357]              havoc _spender_s581;
[L6358]              havoc _subtractedValue_s581;
[L6359]              havoc __ret_0_decreaseApproval;
[L6360]              havoc __ret_0_mintingFinished;
[L6361]              havoc _to_s729;
[L6362]              havoc _amount_s729;
[L6363]              havoc __ret_0_mint;
[L6364]              havoc __ret_0_finishMinting;
[L6365]              havoc __ret_0_cap;
[L6366]              havoc _cap_s704;
[L6367]              havoc __ret_0_name;
[L6368]              havoc __ret_0_symbol;
[L6369]              havoc __ret_0_decimals;
[L6370]              havoc _cap_s750;
[L6371]              havoc tmpNow;
[L6372]              havoc gas;
[L6373]              assume gas > 4000000 && gas <= 8000000;
[L6374]              tmpNow := now;
[L6375]              havoc now;
[L6376]              assume now > tmpNow;
[L6377]              assume msgsender_MSG != null;
[L6378]              assume DType[msgsender_MSG] != SafeMath;
[L6379]              assume DType[msgsender_MSG] != Ownable;
[L6380]              assume DType[msgsender_MSG] != ERC20Basic;
[L6381]              assume DType[msgsender_MSG] != BasicToken;
[L6382]              assume DType[msgsender_MSG] != ERC20;
[L6383]              assume DType[msgsender_MSG] != StandardToken;
[L6384]              assume DType[msgsender_MSG] != MintableToken;
[L6385]              assume DType[msgsender_MSG] != CappedToken;
[L6386]              assume DType[msgsender_MSG] != TSTToken;
[L6387]              Alloc[msgsender_MSG] := true;
[L6388]  COND FALSE  !(choice == 18)
[L6394]  COND FALSE  !(choice == 17)
[L6400]  COND FALSE  !(choice == 16)
[L6406]  COND FALSE  !(choice == 15)
[L6412]  COND FALSE  !(choice == 14)
[L6418]  COND TRUE   choice == 13
[L6419]              gas := gas - 21000;
[L6420]  COND TRUE   gas >= 0
[L6421]              assume _value_s286 >= 0 && _value_s286 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6422]              assume msgvalue_MSG == 0;
[L6423]  CALL        call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s286 && _value_s286 <= balances_BasicToken[this][msgsender_MSG]) && _value_s286 >= 0) && _value_s286 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s286] >= 0) && balances_BasicToken[this][_to_s286] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BasicToken0 := true;
[L2]                 call_transfer_BasicToken0 := false;
[L2]                 revert := revert_hold;
[L555]               havoc __exception;
[L556]               revert := false;
[L557]   COND FALSE  !(__exception)
[L581]   CALL        call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L2893]  COND FALSE  !(!(_value_s286 <= balances_BasicToken[this][msgsender_MSG]))
[L2897]              __var_3 := null;
[L2898]  COND FALSE  !(!(_to_s286 != null))
[L2902]  CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s286);
[L2590]              assert _b_s68 <= _a_s68;
[L2591]              __ret_0_ := (_a_s68 - _b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2902]  RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s286);
[L2903]  COND FALSE  !(revert)
[L2906]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L2907]              balances_BasicToken[this][msgsender_MSG] := __var_4;
[L2908]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L2909]  CALL        call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s286], _value_s286);
[L2604]              c_s92 := (_a_s92 + _b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2605]              assert c_s92 >= _a_s92;
[L2606]              c_s92 := c_s92;
[L2909]  RET         call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s286], _value_s286);
[L2910]  COND FALSE  !(revert)
[L2913]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s286];
[L2914]              balances_BasicToken[this][_to_s286] := __var_5;
[L2915]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s286];
[L2916]              assert { :EventEmitted "Transfer_BasicToken" } true;
[L2917]              __ret_0_ := true;
[L581]   RET         call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L582]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && name_TSTToken[this] == old(name_TSTToken[this])) && symbol_TSTToken[this] == old(symbol_TSTToken[this])) && decimals_TSTToken[this] == old(decimals_TSTToken[this])) && cap_CappedToken[this] == old(cap_CappedToken[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L6423]  RET         call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L6521]  RET         call CorralChoice_TSTToken(this);

Loop:
[L6521]  CALL        call CorralChoice_TSTToken(this);
[L6333]              havoc msgsender_MSG;
[L6334]              havoc msgvalue_MSG;
[L6335]              havoc choice;
[L6336]              havoc __ret_0_owner;
[L6337]              havoc _newOwner_s153;
[L6338]              havoc __ret_0_totalSupply;
[L6339]              havoc _owner_s298;
[L6340]              havoc __ret_0_balanceOf;
[L6341]              havoc _to_s286;
[L6342]              havoc _value_s286;
[L6343]              havoc __ret_0_transfer;
[L6344]              havoc _owner_s479;
[L6345]              havoc _spender_s479;
[L6346]              havoc __ret_0_allowance;
[L6347]              havoc _from_s435;
[L6348]              havoc _to_s435;
[L6349]              havoc _value_s435;
[L6350]              havoc __ret_0_transferFrom;
[L6351]              havoc _spender_s463;
[L6352]              havoc _value_s463;
[L6353]              havoc __ret_0_approve;
[L6354]              havoc _spender_s521;
[L6355]              havoc _addedValue_s521;
[L6356]              havoc __ret_0_increaseApproval;
[L6357]              havoc _spender_s581;
[L6358]              havoc _subtractedValue_s581;
[L6359]              havoc __ret_0_decreaseApproval;
[L6360]              havoc __ret_0_mintingFinished;
[L6361]              havoc _to_s729;
[L6362]              havoc _amount_s729;
[L6363]              havoc __ret_0_mint;
[L6364]              havoc __ret_0_finishMinting;
[L6365]              havoc __ret_0_cap;
[L6366]              havoc _cap_s704;
[L6367]              havoc __ret_0_name;
[L6368]              havoc __ret_0_symbol;
[L6369]              havoc __ret_0_decimals;
[L6370]              havoc _cap_s750;
[L6371]              havoc tmpNow;
[L6372]              havoc gas;
[L6373]              assume gas > 4000000 && gas <= 8000000;
[L6374]              tmpNow := now;
[L6375]              havoc now;
[L6376]              assume now > tmpNow;
[L6377]              assume msgsender_MSG != null;
[L6378]              assume DType[msgsender_MSG] != SafeMath;
[L6379]              assume DType[msgsender_MSG] != Ownable;
[L6380]              assume DType[msgsender_MSG] != ERC20Basic;
[L6381]              assume DType[msgsender_MSG] != BasicToken;
[L6382]              assume DType[msgsender_MSG] != ERC20;
[L6383]              assume DType[msgsender_MSG] != StandardToken;
[L6384]              assume DType[msgsender_MSG] != MintableToken;
[L6385]              assume DType[msgsender_MSG] != CappedToken;
[L6386]              assume DType[msgsender_MSG] != TSTToken;
[L6387]              Alloc[msgsender_MSG] := true;
[L6388]  COND TRUE   choice == 18
[L6389]              gas := gas - 21000;
[L6390]  COND FALSE  !(gas >= 0)
[L6521]  RET         call CorralChoice_TSTToken(this);

[2020-11-25 06:41:46,111 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 06:41:46,111 INFO  L82        PathProgramCache]: Analyzing trace with hash -1117076174, now seen corresponding path program 1 times
[2020-11-25 06:41:46,112 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 06:41:46,161 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 06:41:46,796 INFO  L134       CoverageAnalysis]: Checked inductivity of 3947 backedges. 88 proven. 71 refuted. 0 times theorem prover too weak. 3788 trivial. 0 not checked.
[2020-11-25 06:41:46,796 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 06:41:46,796 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [25] total 25
[2020-11-25 06:41:46,797 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 06:41:46,797 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 25 interpolants.
[2020-11-25 06:41:46,797 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=57, Invalid=543, Unknown=0, NotChecked=0, Total=600
[2020-11-25 06:41:46,797 INFO  L87              Difference]: Start difference. First operand 1981 states and 2168 transitions. cyclomatic complexity: 190 Second operand 25 states.
[2020-11-25 06:41:49,080 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 06:41:49,081 INFO  L93              Difference]: Finished difference Result 2006 states and 2194 transitions.
[2020-11-25 06:41:49,081 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 28 states. 
[2020-11-25 06:41:49,081 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2006 states and 2194 transitions.
[2020-11-25 06:41:49,086 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 06:41:49,092 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2006 states to 2006 states and 2194 transitions.
[2020-11-25 06:41:49,092 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 637
[2020-11-25 06:41:49,092 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 637
[2020-11-25 06:41:49,092 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2006 states and 2194 transitions.
[2020-11-25 06:41:49,094 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 06:41:49,094 INFO  L728         BuchiCegarLoop]: Abstraction has 2006 states and 2194 transitions.
[2020-11-25 06:41:49,097 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2006 states and 2194 transitions.
[2020-11-25 06:41:49,110 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2006 to 1975.
[2020-11-25 06:41:49,110 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1975 states.
[2020-11-25 06:41:49,112 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1975 states to 1975 states and 2160 transitions.
[2020-11-25 06:41:49,113 INFO  L751         BuchiCegarLoop]: Abstraction has 1975 states and 2160 transitions.
[2020-11-25 06:41:49,113 INFO  L631         BuchiCegarLoop]: Abstraction has 1975 states and 2160 transitions.
[2020-11-25 06:41:49,113 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 06:41:49,113 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1975 states and 2160 transitions.
[2020-11-25 06:41:49,116 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 06:41:49,116 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 06:41:49,116 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 06:41:49,119 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [24, 24, 24, 24, 24, 24, 24, 24, 24, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 06:41:49,119 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_BasicToken0 := false;
[L2]                 call_transfer_BasicToken0 := false;
[L2]     CALL        call main();
[L6511]              assume null == 0;
[L6512]  CALL        call this := FreshRefGenerator__success();
[L2509]              havoc newRef;
[L2510]              assume Alloc[newRef] == false;
[L2511]              Alloc[newRef] := true;
[L2512]              assume newRef != null;
[L6512]  RET         call this := FreshRefGenerator__success();
[L6513]              assume now >= 0;
[L6514]              assume DType[this] == TSTToken;
[L6515]              assume msgvalue_MSG == 0;
[L6516]              gas := gas - 53000;
[L6517]  CALL        call TSTToken_TSTToken(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L1531]              havoc __exception;
[L1532]              revert := false;
[L1533]  COND FALSE  !(__exception)
[L1557]  CALL        call TSTToken_TSTToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3626]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3626]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3627]  COND FALSE  !(revert)
[L3630]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3630]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3631]  COND FALSE  !(revert)
[L3634]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3634]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3635]  COND FALSE  !(revert)
[L3638]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3638]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3639]  COND FALSE  !(revert)
[L3642]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3642]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3643]  COND FALSE  !(revert)
[L3646]  CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3275]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3275]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3276]  COND FALSE  !(revert)
[L3279]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3279]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3280]  COND FALSE  !(revert)
[L3283]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3283]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3284]  COND FALSE  !(revert)
[L3287]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3287]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3288]  COND FALSE  !(revert)
[L3291]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3291]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3292]  COND FALSE  !(revert)
[L3295]  CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3239]              assume msgsender_MSG != null;
[L3240]              Balance[this] := 0;
[L3241]              mintingFinished_MintableToken[this] := false;
[L3295]  RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3296]  COND FALSE  !(revert)
[L3646]  RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3647]  COND FALSE  !(revert)
[L3650]  CALL        call CappedToken_CappedToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3464]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3464]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3465]  COND FALSE  !(revert)
[L3468]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3468]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3469]  COND FALSE  !(revert)
[L3472]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3472]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3473]  COND FALSE  !(revert)
[L3476]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3476]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3477]  COND FALSE  !(revert)
[L3480]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3480]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3481]  COND FALSE  !(revert)
[L3484]  CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3275]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3275]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3276]  COND FALSE  !(revert)
[L3279]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3279]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3280]  COND FALSE  !(revert)
[L3283]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3283]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3284]  COND FALSE  !(revert)
[L3287]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3287]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3288]  COND FALSE  !(revert)
[L3291]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3291]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3292]  COND FALSE  !(revert)
[L3295]  CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3239]              assume msgsender_MSG != null;
[L3240]              Balance[this] := 0;
[L3241]              mintingFinished_MintableToken[this] := false;
[L3295]  RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3296]  COND FALSE  !(revert)
[L3484]  RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3485]  COND FALSE  !(revert)
[L3488]  CALL        call CappedToken_CappedToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s704);
[L3419]              assume msgsender_MSG != null;
[L3420]              Balance[this] := 0;
[L3421]              cap_CappedToken[this] := 0;
[L3423]  COND FALSE  !(!(_cap_s704 > 0))
[L3427]              cap_CappedToken[this] := _cap_s704;
[L3488]  RET         call CappedToken_CappedToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s704);
[L3489]  COND FALSE  !(revert)
[L3650]  RET         call CappedToken_CappedToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3651]  COND FALSE  !(revert)
[L3654]  CALL        call TSTToken_TSTToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3580]              assume msgsender_MSG != null;
[L3581]              Balance[this] := 0;
[L3582]              name_TSTToken[this] := 1406741980;
[L3583]              symbol_TSTToken[this] := 57413297;
[L3584]              decimals_TSTToken[this] := 18;
[L3654]  RET         call TSTToken_TSTToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3655]  COND FALSE  !(revert)
[L1557]  RET         call TSTToken_TSTToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L1558]              assume !revert && gas >= 0;
[L6517]  RET         call TSTToken_TSTToken(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L6518]              assume !revert && gas >= 0;
[L6521]  CALL        call CorralChoice_TSTToken(this);
[L6333]              havoc msgsender_MSG;
[L6334]              havoc msgvalue_MSG;
[L6335]              havoc choice;
[L6336]              havoc __ret_0_owner;
[L6337]              havoc _newOwner_s153;
[L6338]              havoc __ret_0_totalSupply;
[L6339]              havoc _owner_s298;
[L6340]              havoc __ret_0_balanceOf;
[L6341]              havoc _to_s286;
[L6342]              havoc _value_s286;
[L6343]              havoc __ret_0_transfer;
[L6344]              havoc _owner_s479;
[L6345]              havoc _spender_s479;
[L6346]              havoc __ret_0_allowance;
[L6347]              havoc _from_s435;
[L6348]              havoc _to_s435;
[L6349]              havoc _value_s435;
[L6350]              havoc __ret_0_transferFrom;
[L6351]              havoc _spender_s463;
[L6352]              havoc _value_s463;
[L6353]              havoc __ret_0_approve;
[L6354]              havoc _spender_s521;
[L6355]              havoc _addedValue_s521;
[L6356]              havoc __ret_0_increaseApproval;
[L6357]              havoc _spender_s581;
[L6358]              havoc _subtractedValue_s581;
[L6359]              havoc __ret_0_decreaseApproval;
[L6360]              havoc __ret_0_mintingFinished;
[L6361]              havoc _to_s729;
[L6362]              havoc _amount_s729;
[L6363]              havoc __ret_0_mint;
[L6364]              havoc __ret_0_finishMinting;
[L6365]              havoc __ret_0_cap;
[L6366]              havoc _cap_s704;
[L6367]              havoc __ret_0_name;
[L6368]              havoc __ret_0_symbol;
[L6369]              havoc __ret_0_decimals;
[L6370]              havoc _cap_s750;
[L6371]              havoc tmpNow;
[L6372]              havoc gas;
[L6373]              assume gas > 4000000 && gas <= 8000000;
[L6374]              tmpNow := now;
[L6375]              havoc now;
[L6376]              assume now > tmpNow;
[L6377]              assume msgsender_MSG != null;
[L6378]              assume DType[msgsender_MSG] != SafeMath;
[L6379]              assume DType[msgsender_MSG] != Ownable;
[L6380]              assume DType[msgsender_MSG] != ERC20Basic;
[L6381]              assume DType[msgsender_MSG] != BasicToken;
[L6382]              assume DType[msgsender_MSG] != ERC20;
[L6383]              assume DType[msgsender_MSG] != StandardToken;
[L6384]              assume DType[msgsender_MSG] != MintableToken;
[L6385]              assume DType[msgsender_MSG] != CappedToken;
[L6386]              assume DType[msgsender_MSG] != TSTToken;
[L6387]              Alloc[msgsender_MSG] := true;
[L6388]  COND FALSE  !(choice == 18)
[L6394]  COND FALSE  !(choice == 17)
[L6400]  COND FALSE  !(choice == 16)
[L6406]  COND FALSE  !(choice == 15)
[L6412]  COND FALSE  !(choice == 14)
[L6418]  COND TRUE   choice == 13
[L6419]              gas := gas - 21000;
[L6420]  COND TRUE   gas >= 0
[L6421]              assume _value_s286 >= 0 && _value_s286 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6422]              assume msgvalue_MSG == 0;
[L6423]  CALL        call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == _to_s286 && _value_s286 <= balances_BasicToken[this][msgsender_MSG]) && _value_s286 >= 0) && _value_s286 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s286] >= 0) && balances_BasicToken[this][_to_s286] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L555]               havoc __exception;
[L556]               revert := false;
[L557]   COND FALSE  !(__exception)
[L581]   CALL        call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L2893]  COND FALSE  !(!(_value_s286 <= balances_BasicToken[this][msgsender_MSG]))
[L2897]              __var_3 := null;
[L2898]  COND FALSE  !(!(_to_s286 != null))
[L2902]  CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s286);
[L2590]              assert _b_s68 <= _a_s68;
[L2591]              __ret_0_ := (_a_s68 - _b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2902]  RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s286);
[L2903]  COND FALSE  !(revert)
[L2906]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L2907]              balances_BasicToken[this][msgsender_MSG] := __var_4;
[L2908]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L2909]  CALL        call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s286], _value_s286);
[L2604]              c_s92 := (_a_s92 + _b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2605]              assert c_s92 >= _a_s92;
[L2606]              c_s92 := c_s92;
[L2909]  RET         call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s286], _value_s286);
[L2910]  COND FALSE  !(revert)
[L2913]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s286];
[L2914]              balances_BasicToken[this][_to_s286] := __var_5;
[L2915]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s286];
[L2916]              assert { :EventEmitted "Transfer_BasicToken" } true;
[L2917]              __ret_0_ := true;
[L581]   RET         call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L582]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((__ret_0_ == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && name_TSTToken[this] == old(name_TSTToken[this])) && symbol_TSTToken[this] == old(symbol_TSTToken[this])) && decimals_TSTToken[this] == old(decimals_TSTToken[this])) && cap_CappedToken[this] == old(cap_CappedToken[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this]);
[L2]                 success_transfer_BasicToken0 := true;
[L2]                 success_transfer_BasicToken0 := false;
[L2]                 revert := revert_hold;
[L6423]  RET         call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L6521]  RET         call CorralChoice_TSTToken(this);
[L6521]  CALL        call CorralChoice_TSTToken(this);
[L6333]              havoc msgsender_MSG;
[L6334]              havoc msgvalue_MSG;
[L6335]              havoc choice;
[L6336]              havoc __ret_0_owner;
[L6337]              havoc _newOwner_s153;
[L6338]              havoc __ret_0_totalSupply;
[L6339]              havoc _owner_s298;
[L6340]              havoc __ret_0_balanceOf;
[L6341]              havoc _to_s286;
[L6342]              havoc _value_s286;
[L6343]              havoc __ret_0_transfer;
[L6344]              havoc _owner_s479;
[L6345]              havoc _spender_s479;
[L6346]              havoc __ret_0_allowance;
[L6347]              havoc _from_s435;
[L6348]              havoc _to_s435;
[L6349]              havoc _value_s435;
[L6350]              havoc __ret_0_transferFrom;
[L6351]              havoc _spender_s463;
[L6352]              havoc _value_s463;
[L6353]              havoc __ret_0_approve;
[L6354]              havoc _spender_s521;
[L6355]              havoc _addedValue_s521;
[L6356]              havoc __ret_0_increaseApproval;
[L6357]              havoc _spender_s581;
[L6358]              havoc _subtractedValue_s581;
[L6359]              havoc __ret_0_decreaseApproval;
[L6360]              havoc __ret_0_mintingFinished;
[L6361]              havoc _to_s729;
[L6362]              havoc _amount_s729;
[L6363]              havoc __ret_0_mint;
[L6364]              havoc __ret_0_finishMinting;
[L6365]              havoc __ret_0_cap;
[L6366]              havoc _cap_s704;
[L6367]              havoc __ret_0_name;
[L6368]              havoc __ret_0_symbol;
[L6369]              havoc __ret_0_decimals;
[L6370]              havoc _cap_s750;
[L6371]              havoc tmpNow;
[L6372]              havoc gas;
[L6373]              assume gas > 4000000 && gas <= 8000000;
[L6374]              tmpNow := now;
[L6375]              havoc now;
[L6376]              assume now > tmpNow;
[L6377]              assume msgsender_MSG != null;
[L6378]              assume DType[msgsender_MSG] != SafeMath;
[L6379]              assume DType[msgsender_MSG] != Ownable;
[L6380]              assume DType[msgsender_MSG] != ERC20Basic;
[L6381]              assume DType[msgsender_MSG] != BasicToken;
[L6382]              assume DType[msgsender_MSG] != ERC20;
[L6383]              assume DType[msgsender_MSG] != StandardToken;
[L6384]              assume DType[msgsender_MSG] != MintableToken;
[L6385]              assume DType[msgsender_MSG] != CappedToken;
[L6386]              assume DType[msgsender_MSG] != TSTToken;
[L6387]              Alloc[msgsender_MSG] := true;
[L6388]  COND FALSE  !(choice == 18)
[L6394]  COND FALSE  !(choice == 17)
[L6400]  COND FALSE  !(choice == 16)
[L6406]  COND FALSE  !(choice == 15)
[L6412]  COND FALSE  !(choice == 14)
[L6418]  COND TRUE   choice == 13
[L6419]              gas := gas - 21000;
[L6420]  COND TRUE   gas >= 0
[L6421]              assume _value_s286 >= 0 && _value_s286 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6422]              assume msgvalue_MSG == 0;
[L6423]  CALL        call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s286 && _value_s286 <= balances_BasicToken[this][msgsender_MSG]) && _value_s286 >= 0) && _value_s286 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s286] >= 0) && balances_BasicToken[this][_to_s286] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BasicToken0 := true;
[L2]                 call_transfer_BasicToken0 := false;
[L2]                 revert := revert_hold;
[L555]               havoc __exception;
[L556]               revert := false;
[L557]   COND FALSE  !(__exception)
[L581]   CALL        call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L2893]  COND FALSE  !(!(_value_s286 <= balances_BasicToken[this][msgsender_MSG]))
[L2897]              __var_3 := null;
[L2898]  COND FALSE  !(!(_to_s286 != null))
[L2902]  CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s286);
[L2590]              assert _b_s68 <= _a_s68;
[L2591]              __ret_0_ := (_a_s68 - _b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2902]  RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s286);
[L2903]  COND FALSE  !(revert)
[L2906]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L2907]              balances_BasicToken[this][msgsender_MSG] := __var_4;
[L2908]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L2909]  CALL        call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s286], _value_s286);
[L2604]              c_s92 := (_a_s92 + _b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2605]              assert c_s92 >= _a_s92;
[L2606]              c_s92 := c_s92;
[L2909]  RET         call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s286], _value_s286);
[L2910]  COND FALSE  !(revert)
[L2913]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s286];
[L2914]              balances_BasicToken[this][_to_s286] := __var_5;
[L2915]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s286];
[L2916]              assert { :EventEmitted "Transfer_BasicToken" } true;
[L2917]              __ret_0_ := true;
[L581]   RET         call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L582]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && name_TSTToken[this] == old(name_TSTToken[this])) && symbol_TSTToken[this] == old(symbol_TSTToken[this])) && decimals_TSTToken[this] == old(decimals_TSTToken[this])) && cap_CappedToken[this] == old(cap_CappedToken[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L6423]  RET         call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L6521]  RET         call CorralChoice_TSTToken(this);

Loop:
[L6521]  CALL        call CorralChoice_TSTToken(this);
[L6333]              havoc msgsender_MSG;
[L6334]              havoc msgvalue_MSG;
[L6335]              havoc choice;
[L6336]              havoc __ret_0_owner;
[L6337]              havoc _newOwner_s153;
[L6338]              havoc __ret_0_totalSupply;
[L6339]              havoc _owner_s298;
[L6340]              havoc __ret_0_balanceOf;
[L6341]              havoc _to_s286;
[L6342]              havoc _value_s286;
[L6343]              havoc __ret_0_transfer;
[L6344]              havoc _owner_s479;
[L6345]              havoc _spender_s479;
[L6346]              havoc __ret_0_allowance;
[L6347]              havoc _from_s435;
[L6348]              havoc _to_s435;
[L6349]              havoc _value_s435;
[L6350]              havoc __ret_0_transferFrom;
[L6351]              havoc _spender_s463;
[L6352]              havoc _value_s463;
[L6353]              havoc __ret_0_approve;
[L6354]              havoc _spender_s521;
[L6355]              havoc _addedValue_s521;
[L6356]              havoc __ret_0_increaseApproval;
[L6357]              havoc _spender_s581;
[L6358]              havoc _subtractedValue_s581;
[L6359]              havoc __ret_0_decreaseApproval;
[L6360]              havoc __ret_0_mintingFinished;
[L6361]              havoc _to_s729;
[L6362]              havoc _amount_s729;
[L6363]              havoc __ret_0_mint;
[L6364]              havoc __ret_0_finishMinting;
[L6365]              havoc __ret_0_cap;
[L6366]              havoc _cap_s704;
[L6367]              havoc __ret_0_name;
[L6368]              havoc __ret_0_symbol;
[L6369]              havoc __ret_0_decimals;
[L6370]              havoc _cap_s750;
[L6371]              havoc tmpNow;
[L6372]              havoc gas;
[L6373]              assume gas > 4000000 && gas <= 8000000;
[L6374]              tmpNow := now;
[L6375]              havoc now;
[L6376]              assume now > tmpNow;
[L6377]              assume msgsender_MSG != null;
[L6378]              assume DType[msgsender_MSG] != SafeMath;
[L6379]              assume DType[msgsender_MSG] != Ownable;
[L6380]              assume DType[msgsender_MSG] != ERC20Basic;
[L6381]              assume DType[msgsender_MSG] != BasicToken;
[L6382]              assume DType[msgsender_MSG] != ERC20;
[L6383]              assume DType[msgsender_MSG] != StandardToken;
[L6384]              assume DType[msgsender_MSG] != MintableToken;
[L6385]              assume DType[msgsender_MSG] != CappedToken;
[L6386]              assume DType[msgsender_MSG] != TSTToken;
[L6387]              Alloc[msgsender_MSG] := true;
[L6388]  COND FALSE  !(choice == 18)
[L6394]  COND FALSE  !(choice == 17)
[L6400]  COND FALSE  !(choice == 16)
[L6406]  COND FALSE  !(choice == 15)
[L6412]  COND FALSE  !(choice == 14)
[L6418]  COND TRUE   choice == 13
[L6419]              gas := gas - 21000;
[L6420]  COND TRUE   gas >= 0
[L6421]              assume _value_s286 >= 0 && _value_s286 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6422]              assume msgvalue_MSG == 0;
[L6423]  CALL        call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s286 && _value_s286 <= balances_BasicToken[this][msgsender_MSG]) && _value_s286 >= 0) && _value_s286 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s286] >= 0) && balances_BasicToken[this][_to_s286] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BasicToken0 := true;
[L2]                 call_transfer_BasicToken0 := false;
[L2]                 revert := revert_hold;
[L555]               havoc __exception;
[L556]               revert := false;
[L557]   COND FALSE  !(__exception)
[L581]   CALL        call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L2893]  COND FALSE  !(!(_value_s286 <= balances_BasicToken[this][msgsender_MSG]))
[L2897]              __var_3 := null;
[L2898]  COND FALSE  !(!(_to_s286 != null))
[L2902]  CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s286);
[L2590]              assert _b_s68 <= _a_s68;
[L2591]              __ret_0_ := (_a_s68 - _b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2902]  RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s286);
[L2903]  COND FALSE  !(revert)
[L2906]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L2907]              balances_BasicToken[this][msgsender_MSG] := __var_4;
[L2908]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L2909]  CALL        call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s286], _value_s286);
[L2604]              c_s92 := (_a_s92 + _b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2605]              assert c_s92 >= _a_s92;
[L2606]              c_s92 := c_s92;
[L2909]  RET         call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s286], _value_s286);
[L2910]  COND FALSE  !(revert)
[L2913]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s286];
[L2914]              balances_BasicToken[this][_to_s286] := __var_5;
[L2915]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s286];
[L2916]              assert { :EventEmitted "Transfer_BasicToken" } true;
[L2917]              __ret_0_ := true;
[L581]   RET         call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L582]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && name_TSTToken[this] == old(name_TSTToken[this])) && symbol_TSTToken[this] == old(symbol_TSTToken[this])) && decimals_TSTToken[this] == old(decimals_TSTToken[this])) && cap_CappedToken[this] == old(cap_CappedToken[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L6423]  RET         call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L6521]  RET         call CorralChoice_TSTToken(this);

[2020-11-25 06:41:49,127 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 06:41:49,127 INFO  L82        PathProgramCache]: Analyzing trace with hash -1253766182, now seen corresponding path program 1 times
[2020-11-25 06:41:49,129 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 06:41:49,177 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 06:41:49,937 INFO  L134       CoverageAnalysis]: Checked inductivity of 3947 backedges. 91 proven. 0 refuted. 0 times theorem prover too weak. 3856 trivial. 0 not checked.
[2020-11-25 06:41:49,937 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 06:41:49,937 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [27] imperfect sequences [] total 27
[2020-11-25 06:41:49,938 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 06:41:49,938 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 28 interpolants.
[2020-11-25 06:41:49,938 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=70, Invalid=686, Unknown=0, NotChecked=0, Total=756
[2020-11-25 06:41:49,938 INFO  L87              Difference]: Start difference. First operand 1975 states and 2160 transitions. cyclomatic complexity: 188 Second operand 28 states.
[2020-11-25 06:41:52,494 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 06:41:52,494 INFO  L93              Difference]: Finished difference Result 2002 states and 2194 transitions.
[2020-11-25 06:41:52,494 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 29 states. 
[2020-11-25 06:41:52,495 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2002 states and 2194 transitions.
[2020-11-25 06:41:52,498 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 06:41:52,501 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2002 states to 2002 states and 2194 transitions.
[2020-11-25 06:41:52,501 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 633
[2020-11-25 06:41:52,502 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 633
[2020-11-25 06:41:52,502 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2002 states and 2194 transitions.
[2020-11-25 06:41:52,503 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 06:41:52,503 INFO  L728         BuchiCegarLoop]: Abstraction has 2002 states and 2194 transitions.
[2020-11-25 06:41:52,505 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2002 states and 2194 transitions.
[2020-11-25 06:41:52,514 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2002 to 1991.
[2020-11-25 06:41:52,514 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1991 states.
[2020-11-25 06:41:52,516 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1991 states to 1991 states and 2183 transitions.
[2020-11-25 06:41:52,516 INFO  L751         BuchiCegarLoop]: Abstraction has 1991 states and 2183 transitions.
[2020-11-25 06:41:52,516 INFO  L631         BuchiCegarLoop]: Abstraction has 1991 states and 2183 transitions.
[2020-11-25 06:41:52,516 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 06:41:52,516 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1991 states and 2183 transitions.
[2020-11-25 06:41:52,518 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 06:41:52,518 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 06:41:52,518 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 06:41:52,519 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [24, 24, 24, 24, 24, 24, 24, 24, 24, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 06:41:52,519 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_BasicToken0 := false;
[L2]                 call_transfer_BasicToken0 := false;
[L2]     CALL        call main();
[L6511]              assume null == 0;
[L6512]  CALL        call this := FreshRefGenerator__success();
[L2509]              havoc newRef;
[L2510]              assume Alloc[newRef] == false;
[L2511]              Alloc[newRef] := true;
[L2512]              assume newRef != null;
[L6512]  RET         call this := FreshRefGenerator__success();
[L6513]              assume now >= 0;
[L6514]              assume DType[this] == TSTToken;
[L6515]              assume msgvalue_MSG == 0;
[L6516]              gas := gas - 53000;
[L6517]  CALL        call TSTToken_TSTToken(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L1531]              havoc __exception;
[L1532]              revert := false;
[L1533]  COND FALSE  !(__exception)
[L1557]  CALL        call TSTToken_TSTToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3626]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3626]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3627]  COND FALSE  !(revert)
[L3630]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3630]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3631]  COND FALSE  !(revert)
[L3634]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3634]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3635]  COND FALSE  !(revert)
[L3638]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3638]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3639]  COND FALSE  !(revert)
[L3642]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3642]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3643]  COND FALSE  !(revert)
[L3646]  CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3275]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3275]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3276]  COND FALSE  !(revert)
[L3279]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3279]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3280]  COND FALSE  !(revert)
[L3283]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3283]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3284]  COND FALSE  !(revert)
[L3287]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3287]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3288]  COND FALSE  !(revert)
[L3291]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3291]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3292]  COND FALSE  !(revert)
[L3295]  CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3239]              assume msgsender_MSG != null;
[L3240]              Balance[this] := 0;
[L3241]              mintingFinished_MintableToken[this] := false;
[L3295]  RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3296]  COND FALSE  !(revert)
[L3646]  RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3647]  COND FALSE  !(revert)
[L3650]  CALL        call CappedToken_CappedToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3464]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3464]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3465]  COND FALSE  !(revert)
[L3468]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3468]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3469]  COND FALSE  !(revert)
[L3472]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3472]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3473]  COND FALSE  !(revert)
[L3476]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3476]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3477]  COND FALSE  !(revert)
[L3480]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3480]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3481]  COND FALSE  !(revert)
[L3484]  CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3275]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3275]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3276]  COND FALSE  !(revert)
[L3279]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3279]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3280]  COND FALSE  !(revert)
[L3283]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3283]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3284]  COND FALSE  !(revert)
[L3287]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3287]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3288]  COND FALSE  !(revert)
[L3291]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3291]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3292]  COND FALSE  !(revert)
[L3295]  CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3239]              assume msgsender_MSG != null;
[L3240]              Balance[this] := 0;
[L3241]              mintingFinished_MintableToken[this] := false;
[L3295]  RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3296]  COND FALSE  !(revert)
[L3484]  RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3485]  COND FALSE  !(revert)
[L3488]  CALL        call CappedToken_CappedToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s704);
[L3419]              assume msgsender_MSG != null;
[L3420]              Balance[this] := 0;
[L3421]              cap_CappedToken[this] := 0;
[L3423]  COND FALSE  !(!(_cap_s704 > 0))
[L3427]              cap_CappedToken[this] := _cap_s704;
[L3488]  RET         call CappedToken_CappedToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s704);
[L3489]  COND FALSE  !(revert)
[L3650]  RET         call CappedToken_CappedToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3651]  COND FALSE  !(revert)
[L3654]  CALL        call TSTToken_TSTToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3580]              assume msgsender_MSG != null;
[L3581]              Balance[this] := 0;
[L3582]              name_TSTToken[this] := 1406741980;
[L3583]              symbol_TSTToken[this] := 57413297;
[L3584]              decimals_TSTToken[this] := 18;
[L3654]  RET         call TSTToken_TSTToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3655]  COND FALSE  !(revert)
[L1557]  RET         call TSTToken_TSTToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L1558]              assume !revert && gas >= 0;
[L6517]  RET         call TSTToken_TSTToken(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L6518]              assume !revert && gas >= 0;
[L6521]  CALL        call CorralChoice_TSTToken(this);
[L6333]              havoc msgsender_MSG;
[L6334]              havoc msgvalue_MSG;
[L6335]              havoc choice;
[L6336]              havoc __ret_0_owner;
[L6337]              havoc _newOwner_s153;
[L6338]              havoc __ret_0_totalSupply;
[L6339]              havoc _owner_s298;
[L6340]              havoc __ret_0_balanceOf;
[L6341]              havoc _to_s286;
[L6342]              havoc _value_s286;
[L6343]              havoc __ret_0_transfer;
[L6344]              havoc _owner_s479;
[L6345]              havoc _spender_s479;
[L6346]              havoc __ret_0_allowance;
[L6347]              havoc _from_s435;
[L6348]              havoc _to_s435;
[L6349]              havoc _value_s435;
[L6350]              havoc __ret_0_transferFrom;
[L6351]              havoc _spender_s463;
[L6352]              havoc _value_s463;
[L6353]              havoc __ret_0_approve;
[L6354]              havoc _spender_s521;
[L6355]              havoc _addedValue_s521;
[L6356]              havoc __ret_0_increaseApproval;
[L6357]              havoc _spender_s581;
[L6358]              havoc _subtractedValue_s581;
[L6359]              havoc __ret_0_decreaseApproval;
[L6360]              havoc __ret_0_mintingFinished;
[L6361]              havoc _to_s729;
[L6362]              havoc _amount_s729;
[L6363]              havoc __ret_0_mint;
[L6364]              havoc __ret_0_finishMinting;
[L6365]              havoc __ret_0_cap;
[L6366]              havoc _cap_s704;
[L6367]              havoc __ret_0_name;
[L6368]              havoc __ret_0_symbol;
[L6369]              havoc __ret_0_decimals;
[L6370]              havoc _cap_s750;
[L6371]              havoc tmpNow;
[L6372]              havoc gas;
[L6373]              assume gas > 4000000 && gas <= 8000000;
[L6374]              tmpNow := now;
[L6375]              havoc now;
[L6376]              assume now > tmpNow;
[L6377]              assume msgsender_MSG != null;
[L6378]              assume DType[msgsender_MSG] != SafeMath;
[L6379]              assume DType[msgsender_MSG] != Ownable;
[L6380]              assume DType[msgsender_MSG] != ERC20Basic;
[L6381]              assume DType[msgsender_MSG] != BasicToken;
[L6382]              assume DType[msgsender_MSG] != ERC20;
[L6383]              assume DType[msgsender_MSG] != StandardToken;
[L6384]              assume DType[msgsender_MSG] != MintableToken;
[L6385]              assume DType[msgsender_MSG] != CappedToken;
[L6386]              assume DType[msgsender_MSG] != TSTToken;
[L6387]              Alloc[msgsender_MSG] := true;
[L6388]  COND FALSE  !(choice == 18)
[L6394]  COND FALSE  !(choice == 17)
[L6400]  COND FALSE  !(choice == 16)
[L6406]  COND FALSE  !(choice == 15)
[L6412]  COND FALSE  !(choice == 14)
[L6418]  COND FALSE  !(choice == 13)
[L6425]  COND FALSE  !(choice == 12)
[L6431]  COND TRUE   choice == 11
[L6432]              gas := gas - 21000;
[L6433]  COND TRUE   gas >= 0
[L6434]              assume _value_s435 >= 0 && _value_s435 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6435]              assume msgvalue_MSG == 0;
[L6436]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _from_s435, _to_s435, _value_s435);
[L800]               havoc __exception;
[L801]               revert := false;
[L802]   COND FALSE  !(__exception)
[L826]   CALL        call __ret_0_ := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s435, _to_s435, _value_s435);
[L3083]  COND FALSE  !(!(_value_s435 <= balances_BasicToken[this][_from_s435]))
[L3087]  COND FALSE  !(!(_value_s435 <= allowed_StandardToken[this][_from_s435][msgsender_MSG]))
[L3091]              __var_6 := null;
[L3092]  COND FALSE  !(!(_to_s435 != null))
[L3096]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s435], _value_s435);
[L2590]              assert _b_s68 <= _a_s68;
[L2591]              __ret_0_ := (_a_s68 - _b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3096]  RET         call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s435], _value_s435);
[L3097]  COND FALSE  !(revert)
[L3100]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_from_s435];
[L3101]              balances_BasicToken[this][_from_s435] := __var_7;
[L3102]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_from_s435];
[L3103]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s435], _value_s435);
[L2604]              c_s92 := (_a_s92 + _b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2605]              assert c_s92 >= _a_s92;
[L2606]              c_s92 := c_s92;
[L3103]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s435], _value_s435);
[L3104]  COND FALSE  !(revert)
[L3107]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s435];
[L3108]              balances_BasicToken[this][_to_s435] := __var_8;
[L3109]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s435];
[L3110]  CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s435][msgsender_MSG], _value_s435);
[L2590]              assert _b_s68 <= _a_s68;
[L2591]              __ret_0_ := (_a_s68 - _b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3110]  RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s435][msgsender_MSG], _value_s435);
[L3111]  COND FALSE  !(revert)
[L3114]              sum_allowed1[_from_s435] := sum_allowed1[_from_s435] - allowed_StandardToken[this][_from_s435][msgsender_MSG];
[L3115]              allowed_StandardToken[this][_from_s435][msgsender_MSG] := __var_9;
[L3116]              sum_allowed1[_from_s435] := sum_allowed1[_from_s435] + allowed_StandardToken[this][_from_s435][msgsender_MSG];
[L3117]              assert { :EventEmitted "Transfer_StandardToken" } true;
[L3118]              __ret_0_ := true;
[L826]   RET         call __ret_0_ := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s435, _to_s435, _value_s435);
[L827]               assume !revert && gas >= 0;
[L6436]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _from_s435, _to_s435, _value_s435);
[L6521]  RET         call CorralChoice_TSTToken(this);
[L6521]  CALL        call CorralChoice_TSTToken(this);
[L6333]              havoc msgsender_MSG;
[L6334]              havoc msgvalue_MSG;
[L6335]              havoc choice;
[L6336]              havoc __ret_0_owner;
[L6337]              havoc _newOwner_s153;
[L6338]              havoc __ret_0_totalSupply;
[L6339]              havoc _owner_s298;
[L6340]              havoc __ret_0_balanceOf;
[L6341]              havoc _to_s286;
[L6342]              havoc _value_s286;
[L6343]              havoc __ret_0_transfer;
[L6344]              havoc _owner_s479;
[L6345]              havoc _spender_s479;
[L6346]              havoc __ret_0_allowance;
[L6347]              havoc _from_s435;
[L6348]              havoc _to_s435;
[L6349]              havoc _value_s435;
[L6350]              havoc __ret_0_transferFrom;
[L6351]              havoc _spender_s463;
[L6352]              havoc _value_s463;
[L6353]              havoc __ret_0_approve;
[L6354]              havoc _spender_s521;
[L6355]              havoc _addedValue_s521;
[L6356]              havoc __ret_0_increaseApproval;
[L6357]              havoc _spender_s581;
[L6358]              havoc _subtractedValue_s581;
[L6359]              havoc __ret_0_decreaseApproval;
[L6360]              havoc __ret_0_mintingFinished;
[L6361]              havoc _to_s729;
[L6362]              havoc _amount_s729;
[L6363]              havoc __ret_0_mint;
[L6364]              havoc __ret_0_finishMinting;
[L6365]              havoc __ret_0_cap;
[L6366]              havoc _cap_s704;
[L6367]              havoc __ret_0_name;
[L6368]              havoc __ret_0_symbol;
[L6369]              havoc __ret_0_decimals;
[L6370]              havoc _cap_s750;
[L6371]              havoc tmpNow;
[L6372]              havoc gas;
[L6373]              assume gas > 4000000 && gas <= 8000000;
[L6374]              tmpNow := now;
[L6375]              havoc now;
[L6376]              assume now > tmpNow;
[L6377]              assume msgsender_MSG != null;
[L6378]              assume DType[msgsender_MSG] != SafeMath;
[L6379]              assume DType[msgsender_MSG] != Ownable;
[L6380]              assume DType[msgsender_MSG] != ERC20Basic;
[L6381]              assume DType[msgsender_MSG] != BasicToken;
[L6382]              assume DType[msgsender_MSG] != ERC20;
[L6383]              assume DType[msgsender_MSG] != StandardToken;
[L6384]              assume DType[msgsender_MSG] != MintableToken;
[L6385]              assume DType[msgsender_MSG] != CappedToken;
[L6386]              assume DType[msgsender_MSG] != TSTToken;
[L6387]              Alloc[msgsender_MSG] := true;
[L6388]  COND FALSE  !(choice == 18)
[L6394]  COND FALSE  !(choice == 17)
[L6400]  COND FALSE  !(choice == 16)
[L6406]  COND FALSE  !(choice == 15)
[L6412]  COND FALSE  !(choice == 14)
[L6418]  COND TRUE   choice == 13
[L6419]              gas := gas - 21000;
[L6420]  COND TRUE   gas >= 0
[L6421]              assume _value_s286 >= 0 && _value_s286 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6422]              assume msgvalue_MSG == 0;
[L6423]  CALL        call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s286 && _value_s286 <= balances_BasicToken[this][msgsender_MSG]) && _value_s286 >= 0) && _value_s286 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s286] >= 0) && balances_BasicToken[this][_to_s286] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BasicToken0 := true;
[L2]                 call_transfer_BasicToken0 := false;
[L2]                 revert := revert_hold;
[L555]               havoc __exception;
[L556]               revert := false;
[L557]   COND FALSE  !(__exception)
[L581]   CALL        call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L2893]  COND FALSE  !(!(_value_s286 <= balances_BasicToken[this][msgsender_MSG]))
[L2897]              __var_3 := null;
[L2898]  COND FALSE  !(!(_to_s286 != null))
[L2902]  CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s286);
[L2590]              assert _b_s68 <= _a_s68;
[L2591]              __ret_0_ := (_a_s68 - _b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2902]  RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s286);
[L2903]  COND FALSE  !(revert)
[L2906]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L2907]              balances_BasicToken[this][msgsender_MSG] := __var_4;
[L2908]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L2909]  CALL        call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s286], _value_s286);
[L2604]              c_s92 := (_a_s92 + _b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2605]              assert c_s92 >= _a_s92;
[L2606]              c_s92 := c_s92;
[L2909]  RET         call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s286], _value_s286);
[L2910]  COND FALSE  !(revert)
[L2913]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s286];
[L2914]              balances_BasicToken[this][_to_s286] := __var_5;
[L2915]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s286];
[L2916]              assert { :EventEmitted "Transfer_BasicToken" } true;
[L2917]              __ret_0_ := true;
[L581]   RET         call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L582]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && name_TSTToken[this] == old(name_TSTToken[this])) && symbol_TSTToken[this] == old(symbol_TSTToken[this])) && decimals_TSTToken[this] == old(decimals_TSTToken[this])) && cap_CappedToken[this] == old(cap_CappedToken[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L6423]  RET         call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L6521]  RET         call CorralChoice_TSTToken(this);

Loop:
[L6521]  CALL        call CorralChoice_TSTToken(this);
[L6333]              havoc msgsender_MSG;
[L6334]              havoc msgvalue_MSG;
[L6335]              havoc choice;
[L6336]              havoc __ret_0_owner;
[L6337]              havoc _newOwner_s153;
[L6338]              havoc __ret_0_totalSupply;
[L6339]              havoc _owner_s298;
[L6340]              havoc __ret_0_balanceOf;
[L6341]              havoc _to_s286;
[L6342]              havoc _value_s286;
[L6343]              havoc __ret_0_transfer;
[L6344]              havoc _owner_s479;
[L6345]              havoc _spender_s479;
[L6346]              havoc __ret_0_allowance;
[L6347]              havoc _from_s435;
[L6348]              havoc _to_s435;
[L6349]              havoc _value_s435;
[L6350]              havoc __ret_0_transferFrom;
[L6351]              havoc _spender_s463;
[L6352]              havoc _value_s463;
[L6353]              havoc __ret_0_approve;
[L6354]              havoc _spender_s521;
[L6355]              havoc _addedValue_s521;
[L6356]              havoc __ret_0_increaseApproval;
[L6357]              havoc _spender_s581;
[L6358]              havoc _subtractedValue_s581;
[L6359]              havoc __ret_0_decreaseApproval;
[L6360]              havoc __ret_0_mintingFinished;
[L6361]              havoc _to_s729;
[L6362]              havoc _amount_s729;
[L6363]              havoc __ret_0_mint;
[L6364]              havoc __ret_0_finishMinting;
[L6365]              havoc __ret_0_cap;
[L6366]              havoc _cap_s704;
[L6367]              havoc __ret_0_name;
[L6368]              havoc __ret_0_symbol;
[L6369]              havoc __ret_0_decimals;
[L6370]              havoc _cap_s750;
[L6371]              havoc tmpNow;
[L6372]              havoc gas;
[L6373]              assume gas > 4000000 && gas <= 8000000;
[L6374]              tmpNow := now;
[L6375]              havoc now;
[L6376]              assume now > tmpNow;
[L6377]              assume msgsender_MSG != null;
[L6378]              assume DType[msgsender_MSG] != SafeMath;
[L6379]              assume DType[msgsender_MSG] != Ownable;
[L6380]              assume DType[msgsender_MSG] != ERC20Basic;
[L6381]              assume DType[msgsender_MSG] != BasicToken;
[L6382]              assume DType[msgsender_MSG] != ERC20;
[L6383]              assume DType[msgsender_MSG] != StandardToken;
[L6384]              assume DType[msgsender_MSG] != MintableToken;
[L6385]              assume DType[msgsender_MSG] != CappedToken;
[L6386]              assume DType[msgsender_MSG] != TSTToken;
[L6387]              Alloc[msgsender_MSG] := true;
[L6388]  COND FALSE  !(choice == 18)
[L6394]  COND FALSE  !(choice == 17)
[L6400]  COND FALSE  !(choice == 16)
[L6406]  COND FALSE  !(choice == 15)
[L6412]  COND FALSE  !(choice == 14)
[L6418]  COND TRUE   choice == 13
[L6419]              gas := gas - 21000;
[L6420]  COND TRUE   gas >= 0
[L6421]              assume _value_s286 >= 0 && _value_s286 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6422]              assume msgvalue_MSG == 0;
[L6423]  CALL        call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s286 && _value_s286 <= balances_BasicToken[this][msgsender_MSG]) && _value_s286 >= 0) && _value_s286 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s286] >= 0) && balances_BasicToken[this][_to_s286] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BasicToken0 := true;
[L2]                 call_transfer_BasicToken0 := false;
[L2]                 revert := revert_hold;
[L555]               havoc __exception;
[L556]               revert := false;
[L557]   COND FALSE  !(__exception)
[L581]   CALL        call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L2893]  COND FALSE  !(!(_value_s286 <= balances_BasicToken[this][msgsender_MSG]))
[L2897]              __var_3 := null;
[L2898]  COND FALSE  !(!(_to_s286 != null))
[L2902]  CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s286);
[L2590]              assert _b_s68 <= _a_s68;
[L2591]              __ret_0_ := (_a_s68 - _b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2902]  RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s286);
[L2903]  COND FALSE  !(revert)
[L2906]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L2907]              balances_BasicToken[this][msgsender_MSG] := __var_4;
[L2908]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L2909]  CALL        call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s286], _value_s286);
[L2604]              c_s92 := (_a_s92 + _b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2605]              assert c_s92 >= _a_s92;
[L2606]              c_s92 := c_s92;
[L2909]  RET         call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s286], _value_s286);
[L2910]  COND FALSE  !(revert)
[L2913]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s286];
[L2914]              balances_BasicToken[this][_to_s286] := __var_5;
[L2915]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s286];
[L2916]              assert { :EventEmitted "Transfer_BasicToken" } true;
[L2917]              __ret_0_ := true;
[L581]   RET         call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L582]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && name_TSTToken[this] == old(name_TSTToken[this])) && symbol_TSTToken[this] == old(symbol_TSTToken[this])) && decimals_TSTToken[this] == old(decimals_TSTToken[this])) && cap_CappedToken[this] == old(cap_CappedToken[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L6423]  RET         call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L6521]  RET         call CorralChoice_TSTToken(this);

[2020-11-25 06:41:52,525 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 06:41:52,525 INFO  L82        PathProgramCache]: Analyzing trace with hash -549407732, now seen corresponding path program 1 times
[2020-11-25 06:41:52,526 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 06:41:52,585 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 06:41:53,614 INFO  L134       CoverageAnalysis]: Checked inductivity of 3942 backedges. 87 proven. 19 refuted. 0 times theorem prover too weak. 3836 trivial. 0 not checked.
[2020-11-25 06:41:53,614 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 06:41:53,615 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [35] total 35
[2020-11-25 06:41:53,615 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 06:41:53,615 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 36 interpolants.
[2020-11-25 06:41:53,615 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=114, Invalid=1146, Unknown=0, NotChecked=0, Total=1260
[2020-11-25 06:41:53,616 INFO  L87              Difference]: Start difference. First operand 1991 states and 2183 transitions. cyclomatic complexity: 196 Second operand 36 states.
[2020-11-25 06:41:57,369 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 06:41:57,369 INFO  L93              Difference]: Finished difference Result 2012 states and 2214 transitions.
[2020-11-25 06:41:57,369 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 36 states. 
[2020-11-25 06:41:57,369 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2012 states and 2214 transitions.
[2020-11-25 06:41:57,373 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 06:41:57,377 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2012 states to 2012 states and 2214 transitions.
[2020-11-25 06:41:57,377 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 637
[2020-11-25 06:41:57,377 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 637
[2020-11-25 06:41:57,377 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2012 states and 2214 transitions.
[2020-11-25 06:41:57,378 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 06:41:57,378 INFO  L728         BuchiCegarLoop]: Abstraction has 2012 states and 2214 transitions.
[2020-11-25 06:41:57,380 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2012 states and 2214 transitions.
[2020-11-25 06:41:57,389 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2012 to 1991.
[2020-11-25 06:41:57,389 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1991 states.
[2020-11-25 06:41:57,391 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1991 states to 1991 states and 2183 transitions.
[2020-11-25 06:41:57,391 INFO  L751         BuchiCegarLoop]: Abstraction has 1991 states and 2183 transitions.
[2020-11-25 06:41:57,391 INFO  L631         BuchiCegarLoop]: Abstraction has 1991 states and 2183 transitions.
[2020-11-25 06:41:57,391 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-25 06:41:57,391 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1991 states and 2183 transitions.
[2020-11-25 06:41:57,393 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 06:41:57,393 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 06:41:57,393 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 06:41:57,394 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [24, 24, 24, 24, 24, 24, 24, 24, 24, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 06:41:57,394 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_BasicToken0 := false;
[L2]                 call_transfer_BasicToken0 := false;
[L2]     CALL        call main();
[L6511]              assume null == 0;
[L6512]  CALL        call this := FreshRefGenerator__success();
[L2509]              havoc newRef;
[L2510]              assume Alloc[newRef] == false;
[L2511]              Alloc[newRef] := true;
[L2512]              assume newRef != null;
[L6512]  RET         call this := FreshRefGenerator__success();
[L6513]              assume now >= 0;
[L6514]              assume DType[this] == TSTToken;
[L6515]              assume msgvalue_MSG == 0;
[L6516]              gas := gas - 53000;
[L6517]  CALL        call TSTToken_TSTToken(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L1531]              havoc __exception;
[L1532]              revert := false;
[L1533]  COND FALSE  !(__exception)
[L1557]  CALL        call TSTToken_TSTToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3626]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3626]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3627]  COND FALSE  !(revert)
[L3630]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3630]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3631]  COND FALSE  !(revert)
[L3634]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3634]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3635]  COND FALSE  !(revert)
[L3638]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3638]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3639]  COND FALSE  !(revert)
[L3642]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3642]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3643]  COND FALSE  !(revert)
[L3646]  CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3275]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3275]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3276]  COND FALSE  !(revert)
[L3279]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3279]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3280]  COND FALSE  !(revert)
[L3283]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3283]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3284]  COND FALSE  !(revert)
[L3287]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3287]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3288]  COND FALSE  !(revert)
[L3291]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3291]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3292]  COND FALSE  !(revert)
[L3295]  CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3239]              assume msgsender_MSG != null;
[L3240]              Balance[this] := 0;
[L3241]              mintingFinished_MintableToken[this] := false;
[L3295]  RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3296]  COND FALSE  !(revert)
[L3646]  RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3647]  COND FALSE  !(revert)
[L3650]  CALL        call CappedToken_CappedToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3464]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3464]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3465]  COND FALSE  !(revert)
[L3468]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3468]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3469]  COND FALSE  !(revert)
[L3472]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3472]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3473]  COND FALSE  !(revert)
[L3476]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3476]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3477]  COND FALSE  !(revert)
[L3480]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3480]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3481]  COND FALSE  !(revert)
[L3484]  CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3275]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3275]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3276]  COND FALSE  !(revert)
[L3279]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3279]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3280]  COND FALSE  !(revert)
[L3283]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3283]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3284]  COND FALSE  !(revert)
[L3287]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3287]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3288]  COND FALSE  !(revert)
[L3291]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3291]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3292]  COND FALSE  !(revert)
[L3295]  CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3239]              assume msgsender_MSG != null;
[L3240]              Balance[this] := 0;
[L3241]              mintingFinished_MintableToken[this] := false;
[L3295]  RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3296]  COND FALSE  !(revert)
[L3484]  RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3485]  COND FALSE  !(revert)
[L3488]  CALL        call CappedToken_CappedToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s704);
[L3419]              assume msgsender_MSG != null;
[L3420]              Balance[this] := 0;
[L3421]              cap_CappedToken[this] := 0;
[L3423]  COND FALSE  !(!(_cap_s704 > 0))
[L3427]              cap_CappedToken[this] := _cap_s704;
[L3488]  RET         call CappedToken_CappedToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s704);
[L3489]  COND FALSE  !(revert)
[L3650]  RET         call CappedToken_CappedToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3651]  COND FALSE  !(revert)
[L3654]  CALL        call TSTToken_TSTToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3580]              assume msgsender_MSG != null;
[L3581]              Balance[this] := 0;
[L3582]              name_TSTToken[this] := 1406741980;
[L3583]              symbol_TSTToken[this] := 57413297;
[L3584]              decimals_TSTToken[this] := 18;
[L3654]  RET         call TSTToken_TSTToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3655]  COND FALSE  !(revert)
[L1557]  RET         call TSTToken_TSTToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L1558]              assume !revert && gas >= 0;
[L6517]  RET         call TSTToken_TSTToken(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L6518]              assume !revert && gas >= 0;
[L6521]  CALL        call CorralChoice_TSTToken(this);
[L6333]              havoc msgsender_MSG;
[L6334]              havoc msgvalue_MSG;
[L6335]              havoc choice;
[L6336]              havoc __ret_0_owner;
[L6337]              havoc _newOwner_s153;
[L6338]              havoc __ret_0_totalSupply;
[L6339]              havoc _owner_s298;
[L6340]              havoc __ret_0_balanceOf;
[L6341]              havoc _to_s286;
[L6342]              havoc _value_s286;
[L6343]              havoc __ret_0_transfer;
[L6344]              havoc _owner_s479;
[L6345]              havoc _spender_s479;
[L6346]              havoc __ret_0_allowance;
[L6347]              havoc _from_s435;
[L6348]              havoc _to_s435;
[L6349]              havoc _value_s435;
[L6350]              havoc __ret_0_transferFrom;
[L6351]              havoc _spender_s463;
[L6352]              havoc _value_s463;
[L6353]              havoc __ret_0_approve;
[L6354]              havoc _spender_s521;
[L6355]              havoc _addedValue_s521;
[L6356]              havoc __ret_0_increaseApproval;
[L6357]              havoc _spender_s581;
[L6358]              havoc _subtractedValue_s581;
[L6359]              havoc __ret_0_decreaseApproval;
[L6360]              havoc __ret_0_mintingFinished;
[L6361]              havoc _to_s729;
[L6362]              havoc _amount_s729;
[L6363]              havoc __ret_0_mint;
[L6364]              havoc __ret_0_finishMinting;
[L6365]              havoc __ret_0_cap;
[L6366]              havoc _cap_s704;
[L6367]              havoc __ret_0_name;
[L6368]              havoc __ret_0_symbol;
[L6369]              havoc __ret_0_decimals;
[L6370]              havoc _cap_s750;
[L6371]              havoc tmpNow;
[L6372]              havoc gas;
[L6373]              assume gas > 4000000 && gas <= 8000000;
[L6374]              tmpNow := now;
[L6375]              havoc now;
[L6376]              assume now > tmpNow;
[L6377]              assume msgsender_MSG != null;
[L6378]              assume DType[msgsender_MSG] != SafeMath;
[L6379]              assume DType[msgsender_MSG] != Ownable;
[L6380]              assume DType[msgsender_MSG] != ERC20Basic;
[L6381]              assume DType[msgsender_MSG] != BasicToken;
[L6382]              assume DType[msgsender_MSG] != ERC20;
[L6383]              assume DType[msgsender_MSG] != StandardToken;
[L6384]              assume DType[msgsender_MSG] != MintableToken;
[L6385]              assume DType[msgsender_MSG] != CappedToken;
[L6386]              assume DType[msgsender_MSG] != TSTToken;
[L6387]              Alloc[msgsender_MSG] := true;
[L6388]  COND FALSE  !(choice == 18)
[L6394]  COND FALSE  !(choice == 17)
[L6400]  COND FALSE  !(choice == 16)
[L6406]  COND FALSE  !(choice == 15)
[L6412]  COND FALSE  !(choice == 14)
[L6418]  COND FALSE  !(choice == 13)
[L6425]  COND FALSE  !(choice == 12)
[L6431]  COND FALSE  !(choice == 11)
[L6438]  COND FALSE  !(choice == 10)
[L6445]  COND FALSE  !(choice == 9)
[L6452]  COND FALSE  !(choice == 8)
[L6459]  COND FALSE  !(choice == 7)
[L6465]  COND TRUE   choice == 6
[L6466]              gas := gas - 21000;
[L6467]  COND TRUE   gas >= 0
[L6468]              assume _amount_s729 >= 0 && _amount_s729 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6469]              assume msgvalue_MSG == 0;
[L6470]  CALL        call __ret_0_mint := mint~address~uint256_CappedToken(this, msgsender_MSG, msgvalue_MSG, _to_s729, _amount_s729);
[L1399]              havoc __exception;
[L1400]              revert := false;
[L1401]  COND FALSE  !(__exception)
[L1425]  CALL        call __ret_0_ := mint~address~uint256_CappedToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s729, _amount_s729);
[L3529]  CALL        call __var_14 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s729);
[L2604]              c_s92 := (_a_s92 + _b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2605]              assert c_s92 >= _a_s92;
[L2606]              c_s92 := c_s92;
[L3529]  RET         call __var_14 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s729);
[L3530]  COND FALSE  !(revert)
[L3533]  COND FALSE  !(!(__var_14 <= cap_CappedToken[this]))
[L3537]  COND FALSE  !(DType[this] == TSTToken)
[L3542]  COND TRUE   DType[this] == CappedToken
[L3543]  CALL        call __var_15 := mint~address~uint256_MintableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s729, _amount_s729);
[L3333]  CALL        call hasMintPermission_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5344]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3333]  RET         call hasMintPermission_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3334]  COND FALSE  !(revert)
[L3337]  CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5328]  COND FALSE  !(!!mintingFinished_MintableToken[this])
[L3337]  RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3338]  COND FALSE  !(revert)
[L3341]  CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s664);
[L2604]              c_s92 := (_a_s92 + _b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2605]              assert c_s92 >= _a_s92;
[L2606]              c_s92 := c_s92;
[L3341]  RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s664);
[L3342]  COND FALSE  !(revert)
[L3345]              totalSupply__BasicToken[this] := __var_12;
[L3346]  CALL        call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s664], _amount_s664);
[L2604]              c_s92 := (_a_s92 + _b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2605]              assert c_s92 >= _a_s92;
[L2606]              c_s92 := c_s92;
[L3346]  RET         call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s664], _amount_s664);
[L3347]  COND FALSE  !(revert)
[L3350]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s664];
[L3351]              balances_BasicToken[this][_to_s664] := __var_13;
[L3352]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s664];
[L3353]              assert { :EventEmitted "Mint_MintableToken" } true;
[L3354]              assert { :EventEmitted "Transfer_MintableToken" } true;
[L3355]              __ret_0_ := true;
[L3543]  RET         call __var_15 := mint~address~uint256_MintableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s729, _amount_s729);
[L3544]  COND FALSE  !(revert)
[L3550]              __ret_0_ := __var_15;
[L1425]  RET         call __ret_0_ := mint~address~uint256_CappedToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s729, _amount_s729);
[L1426]              assume !revert && gas >= 0;
[L6470]  RET         call __ret_0_mint := mint~address~uint256_CappedToken(this, msgsender_MSG, msgvalue_MSG, _to_s729, _amount_s729);
[L6521]  RET         call CorralChoice_TSTToken(this);
[L6521]  CALL        call CorralChoice_TSTToken(this);
[L6333]              havoc msgsender_MSG;
[L6334]              havoc msgvalue_MSG;
[L6335]              havoc choice;
[L6336]              havoc __ret_0_owner;
[L6337]              havoc _newOwner_s153;
[L6338]              havoc __ret_0_totalSupply;
[L6339]              havoc _owner_s298;
[L6340]              havoc __ret_0_balanceOf;
[L6341]              havoc _to_s286;
[L6342]              havoc _value_s286;
[L6343]              havoc __ret_0_transfer;
[L6344]              havoc _owner_s479;
[L6345]              havoc _spender_s479;
[L6346]              havoc __ret_0_allowance;
[L6347]              havoc _from_s435;
[L6348]              havoc _to_s435;
[L6349]              havoc _value_s435;
[L6350]              havoc __ret_0_transferFrom;
[L6351]              havoc _spender_s463;
[L6352]              havoc _value_s463;
[L6353]              havoc __ret_0_approve;
[L6354]              havoc _spender_s521;
[L6355]              havoc _addedValue_s521;
[L6356]              havoc __ret_0_increaseApproval;
[L6357]              havoc _spender_s581;
[L6358]              havoc _subtractedValue_s581;
[L6359]              havoc __ret_0_decreaseApproval;
[L6360]              havoc __ret_0_mintingFinished;
[L6361]              havoc _to_s729;
[L6362]              havoc _amount_s729;
[L6363]              havoc __ret_0_mint;
[L6364]              havoc __ret_0_finishMinting;
[L6365]              havoc __ret_0_cap;
[L6366]              havoc _cap_s704;
[L6367]              havoc __ret_0_name;
[L6368]              havoc __ret_0_symbol;
[L6369]              havoc __ret_0_decimals;
[L6370]              havoc _cap_s750;
[L6371]              havoc tmpNow;
[L6372]              havoc gas;
[L6373]              assume gas > 4000000 && gas <= 8000000;
[L6374]              tmpNow := now;
[L6375]              havoc now;
[L6376]              assume now > tmpNow;
[L6377]              assume msgsender_MSG != null;
[L6378]              assume DType[msgsender_MSG] != SafeMath;
[L6379]              assume DType[msgsender_MSG] != Ownable;
[L6380]              assume DType[msgsender_MSG] != ERC20Basic;
[L6381]              assume DType[msgsender_MSG] != BasicToken;
[L6382]              assume DType[msgsender_MSG] != ERC20;
[L6383]              assume DType[msgsender_MSG] != StandardToken;
[L6384]              assume DType[msgsender_MSG] != MintableToken;
[L6385]              assume DType[msgsender_MSG] != CappedToken;
[L6386]              assume DType[msgsender_MSG] != TSTToken;
[L6387]              Alloc[msgsender_MSG] := true;
[L6388]  COND FALSE  !(choice == 18)
[L6394]  COND FALSE  !(choice == 17)
[L6400]  COND FALSE  !(choice == 16)
[L6406]  COND FALSE  !(choice == 15)
[L6412]  COND FALSE  !(choice == 14)
[L6418]  COND TRUE   choice == 13
[L6419]              gas := gas - 21000;
[L6420]  COND TRUE   gas >= 0
[L6421]              assume _value_s286 >= 0 && _value_s286 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6422]              assume msgvalue_MSG == 0;
[L6423]  CALL        call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s286 && _value_s286 <= balances_BasicToken[this][msgsender_MSG]) && _value_s286 >= 0) && _value_s286 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s286] >= 0) && balances_BasicToken[this][_to_s286] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BasicToken0 := true;
[L2]                 call_transfer_BasicToken0 := false;
[L2]                 revert := revert_hold;
[L555]               havoc __exception;
[L556]               revert := false;
[L557]   COND FALSE  !(__exception)
[L581]   CALL        call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L2893]  COND FALSE  !(!(_value_s286 <= balances_BasicToken[this][msgsender_MSG]))
[L2897]              __var_3 := null;
[L2898]  COND FALSE  !(!(_to_s286 != null))
[L2902]  CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s286);
[L2590]              assert _b_s68 <= _a_s68;
[L2591]              __ret_0_ := (_a_s68 - _b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2902]  RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s286);
[L2903]  COND FALSE  !(revert)
[L2906]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L2907]              balances_BasicToken[this][msgsender_MSG] := __var_4;
[L2908]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L2909]  CALL        call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s286], _value_s286);
[L2604]              c_s92 := (_a_s92 + _b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2605]              assert c_s92 >= _a_s92;
[L2606]              c_s92 := c_s92;
[L2909]  RET         call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s286], _value_s286);
[L2910]  COND FALSE  !(revert)
[L2913]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s286];
[L2914]              balances_BasicToken[this][_to_s286] := __var_5;
[L2915]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s286];
[L2916]              assert { :EventEmitted "Transfer_BasicToken" } true;
[L2917]              __ret_0_ := true;
[L581]   RET         call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L582]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && name_TSTToken[this] == old(name_TSTToken[this])) && symbol_TSTToken[this] == old(symbol_TSTToken[this])) && decimals_TSTToken[this] == old(decimals_TSTToken[this])) && cap_CappedToken[this] == old(cap_CappedToken[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L6423]  RET         call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L6521]  RET         call CorralChoice_TSTToken(this);

Loop:
[L6521]  CALL        call CorralChoice_TSTToken(this);
[L6333]              havoc msgsender_MSG;
[L6334]              havoc msgvalue_MSG;
[L6335]              havoc choice;
[L6336]              havoc __ret_0_owner;
[L6337]              havoc _newOwner_s153;
[L6338]              havoc __ret_0_totalSupply;
[L6339]              havoc _owner_s298;
[L6340]              havoc __ret_0_balanceOf;
[L6341]              havoc _to_s286;
[L6342]              havoc _value_s286;
[L6343]              havoc __ret_0_transfer;
[L6344]              havoc _owner_s479;
[L6345]              havoc _spender_s479;
[L6346]              havoc __ret_0_allowance;
[L6347]              havoc _from_s435;
[L6348]              havoc _to_s435;
[L6349]              havoc _value_s435;
[L6350]              havoc __ret_0_transferFrom;
[L6351]              havoc _spender_s463;
[L6352]              havoc _value_s463;
[L6353]              havoc __ret_0_approve;
[L6354]              havoc _spender_s521;
[L6355]              havoc _addedValue_s521;
[L6356]              havoc __ret_0_increaseApproval;
[L6357]              havoc _spender_s581;
[L6358]              havoc _subtractedValue_s581;
[L6359]              havoc __ret_0_decreaseApproval;
[L6360]              havoc __ret_0_mintingFinished;
[L6361]              havoc _to_s729;
[L6362]              havoc _amount_s729;
[L6363]              havoc __ret_0_mint;
[L6364]              havoc __ret_0_finishMinting;
[L6365]              havoc __ret_0_cap;
[L6366]              havoc _cap_s704;
[L6367]              havoc __ret_0_name;
[L6368]              havoc __ret_0_symbol;
[L6369]              havoc __ret_0_decimals;
[L6370]              havoc _cap_s750;
[L6371]              havoc tmpNow;
[L6372]              havoc gas;
[L6373]              assume gas > 4000000 && gas <= 8000000;
[L6374]              tmpNow := now;
[L6375]              havoc now;
[L6376]              assume now > tmpNow;
[L6377]              assume msgsender_MSG != null;
[L6378]              assume DType[msgsender_MSG] != SafeMath;
[L6379]              assume DType[msgsender_MSG] != Ownable;
[L6380]              assume DType[msgsender_MSG] != ERC20Basic;
[L6381]              assume DType[msgsender_MSG] != BasicToken;
[L6382]              assume DType[msgsender_MSG] != ERC20;
[L6383]              assume DType[msgsender_MSG] != StandardToken;
[L6384]              assume DType[msgsender_MSG] != MintableToken;
[L6385]              assume DType[msgsender_MSG] != CappedToken;
[L6386]              assume DType[msgsender_MSG] != TSTToken;
[L6387]              Alloc[msgsender_MSG] := true;
[L6388]  COND FALSE  !(choice == 18)
[L6394]  COND FALSE  !(choice == 17)
[L6400]  COND FALSE  !(choice == 16)
[L6406]  COND FALSE  !(choice == 15)
[L6412]  COND FALSE  !(choice == 14)
[L6418]  COND TRUE   choice == 13
[L6419]              gas := gas - 21000;
[L6420]  COND TRUE   gas >= 0
[L6421]              assume _value_s286 >= 0 && _value_s286 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6422]              assume msgvalue_MSG == 0;
[L6423]  CALL        call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s286 && _value_s286 <= balances_BasicToken[this][msgsender_MSG]) && _value_s286 >= 0) && _value_s286 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s286] >= 0) && balances_BasicToken[this][_to_s286] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BasicToken0 := true;
[L2]                 call_transfer_BasicToken0 := false;
[L2]                 revert := revert_hold;
[L555]               havoc __exception;
[L556]               revert := false;
[L557]   COND FALSE  !(__exception)
[L581]   CALL        call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L2893]  COND FALSE  !(!(_value_s286 <= balances_BasicToken[this][msgsender_MSG]))
[L2897]              __var_3 := null;
[L2898]  COND FALSE  !(!(_to_s286 != null))
[L2902]  CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s286);
[L2590]              assert _b_s68 <= _a_s68;
[L2591]              __ret_0_ := (_a_s68 - _b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2902]  RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s286);
[L2903]  COND FALSE  !(revert)
[L2906]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L2907]              balances_BasicToken[this][msgsender_MSG] := __var_4;
[L2908]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L2909]  CALL        call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s286], _value_s286);
[L2604]              c_s92 := (_a_s92 + _b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2605]              assert c_s92 >= _a_s92;
[L2606]              c_s92 := c_s92;
[L2909]  RET         call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s286], _value_s286);
[L2910]  COND FALSE  !(revert)
[L2913]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s286];
[L2914]              balances_BasicToken[this][_to_s286] := __var_5;
[L2915]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s286];
[L2916]              assert { :EventEmitted "Transfer_BasicToken" } true;
[L2917]              __ret_0_ := true;
[L581]   RET         call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L582]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && name_TSTToken[this] == old(name_TSTToken[this])) && symbol_TSTToken[this] == old(symbol_TSTToken[this])) && decimals_TSTToken[this] == old(decimals_TSTToken[this])) && cap_CappedToken[this] == old(cap_CappedToken[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L6423]  RET         call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L6521]  RET         call CorralChoice_TSTToken(this);

[2020-11-25 06:41:57,399 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 06:41:57,399 INFO  L82        PathProgramCache]: Analyzing trace with hash 881811274, now seen corresponding path program 1 times
[2020-11-25 06:41:57,400 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 06:41:57,419 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 06:41:57,667 INFO  L134       CoverageAnalysis]: Checked inductivity of 3953 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 3952 trivial. 0 not checked.
[2020-11-25 06:41:57,668 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 06:41:57,669 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 06:41:57,670 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 06:41:57,671 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 06:41:57,671 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-25 06:41:57,671 INFO  L87              Difference]: Start difference. First operand 1991 states and 2183 transitions. cyclomatic complexity: 196 Second operand 6 states.
[2020-11-25 06:41:57,713 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 06:41:57,713 INFO  L93              Difference]: Finished difference Result 2011 states and 2201 transitions.
[2020-11-25 06:41:57,713 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-11-25 06:41:57,713 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2011 states and 2201 transitions.
[2020-11-25 06:41:57,718 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 06:41:57,723 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2011 states to 1981 states and 2169 transitions.
[2020-11-25 06:41:57,723 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 620
[2020-11-25 06:41:57,724 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 620
[2020-11-25 06:41:57,724 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1981 states and 2169 transitions.
[2020-11-25 06:41:57,725 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 06:41:57,725 INFO  L728         BuchiCegarLoop]: Abstraction has 1981 states and 2169 transitions.
[2020-11-25 06:41:57,727 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1981 states and 2169 transitions.
[2020-11-25 06:41:57,739 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1981 to 1981.
[2020-11-25 06:41:57,739 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1981 states.
[2020-11-25 06:41:57,741 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1981 states to 1981 states and 2169 transitions.
[2020-11-25 06:41:57,742 INFO  L751         BuchiCegarLoop]: Abstraction has 1981 states and 2169 transitions.
[2020-11-25 06:41:57,742 INFO  L631         BuchiCegarLoop]: Abstraction has 1981 states and 2169 transitions.
[2020-11-25 06:41:57,742 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-11-25 06:41:57,742 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1981 states and 2169 transitions.
[2020-11-25 06:41:57,745 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 06:41:57,745 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 06:41:57,745 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 06:41:57,747 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [24, 24, 24, 24, 24, 24, 24, 24, 24, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 06:41:57,747 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_BasicToken0 := false;
[L2]                 call_transfer_BasicToken0 := false;
[L2]     CALL        call main();
[L6511]              assume null == 0;
[L6512]  CALL        call this := FreshRefGenerator__success();
[L2509]              havoc newRef;
[L2510]              assume Alloc[newRef] == false;
[L2511]              Alloc[newRef] := true;
[L2512]              assume newRef != null;
[L6512]  RET         call this := FreshRefGenerator__success();
[L6513]              assume now >= 0;
[L6514]              assume DType[this] == TSTToken;
[L6515]              assume msgvalue_MSG == 0;
[L6516]              gas := gas - 53000;
[L6517]  CALL        call TSTToken_TSTToken(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L1531]              havoc __exception;
[L1532]              revert := false;
[L1533]  COND FALSE  !(__exception)
[L1557]  CALL        call TSTToken_TSTToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3626]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3626]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3627]  COND FALSE  !(revert)
[L3630]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3630]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3631]  COND FALSE  !(revert)
[L3634]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3634]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3635]  COND FALSE  !(revert)
[L3638]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3638]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3639]  COND FALSE  !(revert)
[L3642]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3642]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3643]  COND FALSE  !(revert)
[L3646]  CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3275]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3275]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3276]  COND FALSE  !(revert)
[L3279]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3279]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3280]  COND FALSE  !(revert)
[L3283]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3283]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3284]  COND FALSE  !(revert)
[L3287]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3287]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3288]  COND FALSE  !(revert)
[L3291]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3291]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3292]  COND FALSE  !(revert)
[L3295]  CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3239]              assume msgsender_MSG != null;
[L3240]              Balance[this] := 0;
[L3241]              mintingFinished_MintableToken[this] := false;
[L3295]  RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3296]  COND FALSE  !(revert)
[L3646]  RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3647]  COND FALSE  !(revert)
[L3650]  CALL        call CappedToken_CappedToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3464]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3464]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3465]  COND FALSE  !(revert)
[L3468]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3468]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3469]  COND FALSE  !(revert)
[L3472]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3472]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3473]  COND FALSE  !(revert)
[L3476]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3476]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3477]  COND FALSE  !(revert)
[L3480]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3480]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3481]  COND FALSE  !(revert)
[L3484]  CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3275]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3275]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3276]  COND FALSE  !(revert)
[L3279]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3279]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3280]  COND FALSE  !(revert)
[L3283]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3283]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3284]  COND FALSE  !(revert)
[L3287]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3287]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3288]  COND FALSE  !(revert)
[L3291]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3291]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3292]  COND FALSE  !(revert)
[L3295]  CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3239]              assume msgsender_MSG != null;
[L3240]              Balance[this] := 0;
[L3241]              mintingFinished_MintableToken[this] := false;
[L3295]  RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3296]  COND FALSE  !(revert)
[L3484]  RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3485]  COND FALSE  !(revert)
[L3488]  CALL        call CappedToken_CappedToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s704);
[L3419]              assume msgsender_MSG != null;
[L3420]              Balance[this] := 0;
[L3421]              cap_CappedToken[this] := 0;
[L3423]  COND FALSE  !(!(_cap_s704 > 0))
[L3427]              cap_CappedToken[this] := _cap_s704;
[L3488]  RET         call CappedToken_CappedToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s704);
[L3489]  COND FALSE  !(revert)
[L3650]  RET         call CappedToken_CappedToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3651]  COND FALSE  !(revert)
[L3654]  CALL        call TSTToken_TSTToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3580]              assume msgsender_MSG != null;
[L3581]              Balance[this] := 0;
[L3582]              name_TSTToken[this] := 1406741980;
[L3583]              symbol_TSTToken[this] := 57413297;
[L3584]              decimals_TSTToken[this] := 18;
[L3654]  RET         call TSTToken_TSTToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3655]  COND FALSE  !(revert)
[L1557]  RET         call TSTToken_TSTToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L1558]              assume !revert && gas >= 0;
[L6517]  RET         call TSTToken_TSTToken(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L6518]              assume !revert && gas >= 0;
[L6521]  CALL        call CorralChoice_TSTToken(this);
[L6333]              havoc msgsender_MSG;
[L6334]              havoc msgvalue_MSG;
[L6335]              havoc choice;
[L6336]              havoc __ret_0_owner;
[L6337]              havoc _newOwner_s153;
[L6338]              havoc __ret_0_totalSupply;
[L6339]              havoc _owner_s298;
[L6340]              havoc __ret_0_balanceOf;
[L6341]              havoc _to_s286;
[L6342]              havoc _value_s286;
[L6343]              havoc __ret_0_transfer;
[L6344]              havoc _owner_s479;
[L6345]              havoc _spender_s479;
[L6346]              havoc __ret_0_allowance;
[L6347]              havoc _from_s435;
[L6348]              havoc _to_s435;
[L6349]              havoc _value_s435;
[L6350]              havoc __ret_0_transferFrom;
[L6351]              havoc _spender_s463;
[L6352]              havoc _value_s463;
[L6353]              havoc __ret_0_approve;
[L6354]              havoc _spender_s521;
[L6355]              havoc _addedValue_s521;
[L6356]              havoc __ret_0_increaseApproval;
[L6357]              havoc _spender_s581;
[L6358]              havoc _subtractedValue_s581;
[L6359]              havoc __ret_0_decreaseApproval;
[L6360]              havoc __ret_0_mintingFinished;
[L6361]              havoc _to_s729;
[L6362]              havoc _amount_s729;
[L6363]              havoc __ret_0_mint;
[L6364]              havoc __ret_0_finishMinting;
[L6365]              havoc __ret_0_cap;
[L6366]              havoc _cap_s704;
[L6367]              havoc __ret_0_name;
[L6368]              havoc __ret_0_symbol;
[L6369]              havoc __ret_0_decimals;
[L6370]              havoc _cap_s750;
[L6371]              havoc tmpNow;
[L6372]              havoc gas;
[L6373]              assume gas > 4000000 && gas <= 8000000;
[L6374]              tmpNow := now;
[L6375]              havoc now;
[L6376]              assume now > tmpNow;
[L6377]              assume msgsender_MSG != null;
[L6378]              assume DType[msgsender_MSG] != SafeMath;
[L6379]              assume DType[msgsender_MSG] != Ownable;
[L6380]              assume DType[msgsender_MSG] != ERC20Basic;
[L6381]              assume DType[msgsender_MSG] != BasicToken;
[L6382]              assume DType[msgsender_MSG] != ERC20;
[L6383]              assume DType[msgsender_MSG] != StandardToken;
[L6384]              assume DType[msgsender_MSG] != MintableToken;
[L6385]              assume DType[msgsender_MSG] != CappedToken;
[L6386]              assume DType[msgsender_MSG] != TSTToken;
[L6387]              Alloc[msgsender_MSG] := true;
[L6388]  COND FALSE  !(choice == 18)
[L6394]  COND FALSE  !(choice == 17)
[L6400]  COND FALSE  !(choice == 16)
[L6406]  COND FALSE  !(choice == 15)
[L6412]  COND FALSE  !(choice == 14)
[L6418]  COND FALSE  !(choice == 13)
[L6425]  COND FALSE  !(choice == 12)
[L6431]  COND FALSE  !(choice == 11)
[L6438]  COND FALSE  !(choice == 10)
[L6445]  COND FALSE  !(choice == 9)
[L6452]  COND FALSE  !(choice == 8)
[L6459]  COND FALSE  !(choice == 7)
[L6465]  COND TRUE   choice == 6
[L6466]              gas := gas - 21000;
[L6467]  COND TRUE   gas >= 0
[L6468]              assume _amount_s729 >= 0 && _amount_s729 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6469]              assume msgvalue_MSG == 0;
[L6470]  CALL        call __ret_0_mint := mint~address~uint256_CappedToken(this, msgsender_MSG, msgvalue_MSG, _to_s729, _amount_s729);
[L1399]              havoc __exception;
[L1400]              revert := false;
[L1401]  COND FALSE  !(__exception)
[L1425]  CALL        call __ret_0_ := mint~address~uint256_CappedToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s729, _amount_s729);
[L3529]  CALL        call __var_14 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s729);
[L2604]              c_s92 := (_a_s92 + _b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2605]              assert c_s92 >= _a_s92;
[L2606]              c_s92 := c_s92;
[L3529]  RET         call __var_14 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s729);
[L3530]  COND FALSE  !(revert)
[L3533]  COND FALSE  !(!(__var_14 <= cap_CappedToken[this]))
[L3537]  COND TRUE   DType[this] == TSTToken
[L3538]  CALL        call __var_15 := mint~address~uint256_MintableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s729, _amount_s729);
[L3333]  CALL        call hasMintPermission_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5344]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3333]  RET         call hasMintPermission_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3334]  COND FALSE  !(revert)
[L3337]  CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5328]  COND FALSE  !(!!mintingFinished_MintableToken[this])
[L3337]  RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3338]  COND FALSE  !(revert)
[L3341]  CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s664);
[L2604]              c_s92 := (_a_s92 + _b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2605]              assert c_s92 >= _a_s92;
[L2606]              c_s92 := c_s92;
[L3341]  RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s664);
[L3342]  COND FALSE  !(revert)
[L3345]              totalSupply__BasicToken[this] := __var_12;
[L3346]  CALL        call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s664], _amount_s664);
[L2604]              c_s92 := (_a_s92 + _b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2605]              assert c_s92 >= _a_s92;
[L2606]              c_s92 := c_s92;
[L3346]  RET         call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s664], _amount_s664);
[L3347]  COND FALSE  !(revert)
[L3350]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s664];
[L3351]              balances_BasicToken[this][_to_s664] := __var_13;
[L3352]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s664];
[L3353]              assert { :EventEmitted "Mint_MintableToken" } true;
[L3354]              assert { :EventEmitted "Transfer_MintableToken" } true;
[L3355]              __ret_0_ := true;
[L3538]  RET         call __var_15 := mint~address~uint256_MintableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s729, _amount_s729);
[L3539]  COND FALSE  !(revert)
[L3550]              __ret_0_ := __var_15;
[L1425]  RET         call __ret_0_ := mint~address~uint256_CappedToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s729, _amount_s729);
[L1426]              assume !revert && gas >= 0;
[L6470]  RET         call __ret_0_mint := mint~address~uint256_CappedToken(this, msgsender_MSG, msgvalue_MSG, _to_s729, _amount_s729);
[L6521]  RET         call CorralChoice_TSTToken(this);
[L6521]  CALL        call CorralChoice_TSTToken(this);
[L6333]              havoc msgsender_MSG;
[L6334]              havoc msgvalue_MSG;
[L6335]              havoc choice;
[L6336]              havoc __ret_0_owner;
[L6337]              havoc _newOwner_s153;
[L6338]              havoc __ret_0_totalSupply;
[L6339]              havoc _owner_s298;
[L6340]              havoc __ret_0_balanceOf;
[L6341]              havoc _to_s286;
[L6342]              havoc _value_s286;
[L6343]              havoc __ret_0_transfer;
[L6344]              havoc _owner_s479;
[L6345]              havoc _spender_s479;
[L6346]              havoc __ret_0_allowance;
[L6347]              havoc _from_s435;
[L6348]              havoc _to_s435;
[L6349]              havoc _value_s435;
[L6350]              havoc __ret_0_transferFrom;
[L6351]              havoc _spender_s463;
[L6352]              havoc _value_s463;
[L6353]              havoc __ret_0_approve;
[L6354]              havoc _spender_s521;
[L6355]              havoc _addedValue_s521;
[L6356]              havoc __ret_0_increaseApproval;
[L6357]              havoc _spender_s581;
[L6358]              havoc _subtractedValue_s581;
[L6359]              havoc __ret_0_decreaseApproval;
[L6360]              havoc __ret_0_mintingFinished;
[L6361]              havoc _to_s729;
[L6362]              havoc _amount_s729;
[L6363]              havoc __ret_0_mint;
[L6364]              havoc __ret_0_finishMinting;
[L6365]              havoc __ret_0_cap;
[L6366]              havoc _cap_s704;
[L6367]              havoc __ret_0_name;
[L6368]              havoc __ret_0_symbol;
[L6369]              havoc __ret_0_decimals;
[L6370]              havoc _cap_s750;
[L6371]              havoc tmpNow;
[L6372]              havoc gas;
[L6373]              assume gas > 4000000 && gas <= 8000000;
[L6374]              tmpNow := now;
[L6375]              havoc now;
[L6376]              assume now > tmpNow;
[L6377]              assume msgsender_MSG != null;
[L6378]              assume DType[msgsender_MSG] != SafeMath;
[L6379]              assume DType[msgsender_MSG] != Ownable;
[L6380]              assume DType[msgsender_MSG] != ERC20Basic;
[L6381]              assume DType[msgsender_MSG] != BasicToken;
[L6382]              assume DType[msgsender_MSG] != ERC20;
[L6383]              assume DType[msgsender_MSG] != StandardToken;
[L6384]              assume DType[msgsender_MSG] != MintableToken;
[L6385]              assume DType[msgsender_MSG] != CappedToken;
[L6386]              assume DType[msgsender_MSG] != TSTToken;
[L6387]              Alloc[msgsender_MSG] := true;
[L6388]  COND FALSE  !(choice == 18)
[L6394]  COND FALSE  !(choice == 17)
[L6400]  COND FALSE  !(choice == 16)
[L6406]  COND FALSE  !(choice == 15)
[L6412]  COND FALSE  !(choice == 14)
[L6418]  COND TRUE   choice == 13
[L6419]              gas := gas - 21000;
[L6420]  COND TRUE   gas >= 0
[L6421]              assume _value_s286 >= 0 && _value_s286 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6422]              assume msgvalue_MSG == 0;
[L6423]  CALL        call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s286 && _value_s286 <= balances_BasicToken[this][msgsender_MSG]) && _value_s286 >= 0) && _value_s286 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s286] >= 0) && balances_BasicToken[this][_to_s286] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BasicToken0 := true;
[L2]                 call_transfer_BasicToken0 := false;
[L2]                 revert := revert_hold;
[L555]               havoc __exception;
[L556]               revert := false;
[L557]   COND FALSE  !(__exception)
[L581]   CALL        call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L2893]  COND FALSE  !(!(_value_s286 <= balances_BasicToken[this][msgsender_MSG]))
[L2897]              __var_3 := null;
[L2898]  COND FALSE  !(!(_to_s286 != null))
[L2902]  CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s286);
[L2590]              assert _b_s68 <= _a_s68;
[L2591]              __ret_0_ := (_a_s68 - _b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2902]  RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s286);
[L2903]  COND FALSE  !(revert)
[L2906]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L2907]              balances_BasicToken[this][msgsender_MSG] := __var_4;
[L2908]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L2909]  CALL        call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s286], _value_s286);
[L2604]              c_s92 := (_a_s92 + _b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2605]              assert c_s92 >= _a_s92;
[L2606]              c_s92 := c_s92;
[L2909]  RET         call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s286], _value_s286);
[L2910]  COND FALSE  !(revert)
[L2913]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s286];
[L2914]              balances_BasicToken[this][_to_s286] := __var_5;
[L2915]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s286];
[L2916]              assert { :EventEmitted "Transfer_BasicToken" } true;
[L2917]              __ret_0_ := true;
[L581]   RET         call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L582]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && name_TSTToken[this] == old(name_TSTToken[this])) && symbol_TSTToken[this] == old(symbol_TSTToken[this])) && decimals_TSTToken[this] == old(decimals_TSTToken[this])) && cap_CappedToken[this] == old(cap_CappedToken[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L6423]  RET         call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L6521]  RET         call CorralChoice_TSTToken(this);

Loop:
[L6521]  CALL        call CorralChoice_TSTToken(this);
[L6333]              havoc msgsender_MSG;
[L6334]              havoc msgvalue_MSG;
[L6335]              havoc choice;
[L6336]              havoc __ret_0_owner;
[L6337]              havoc _newOwner_s153;
[L6338]              havoc __ret_0_totalSupply;
[L6339]              havoc _owner_s298;
[L6340]              havoc __ret_0_balanceOf;
[L6341]              havoc _to_s286;
[L6342]              havoc _value_s286;
[L6343]              havoc __ret_0_transfer;
[L6344]              havoc _owner_s479;
[L6345]              havoc _spender_s479;
[L6346]              havoc __ret_0_allowance;
[L6347]              havoc _from_s435;
[L6348]              havoc _to_s435;
[L6349]              havoc _value_s435;
[L6350]              havoc __ret_0_transferFrom;
[L6351]              havoc _spender_s463;
[L6352]              havoc _value_s463;
[L6353]              havoc __ret_0_approve;
[L6354]              havoc _spender_s521;
[L6355]              havoc _addedValue_s521;
[L6356]              havoc __ret_0_increaseApproval;
[L6357]              havoc _spender_s581;
[L6358]              havoc _subtractedValue_s581;
[L6359]              havoc __ret_0_decreaseApproval;
[L6360]              havoc __ret_0_mintingFinished;
[L6361]              havoc _to_s729;
[L6362]              havoc _amount_s729;
[L6363]              havoc __ret_0_mint;
[L6364]              havoc __ret_0_finishMinting;
[L6365]              havoc __ret_0_cap;
[L6366]              havoc _cap_s704;
[L6367]              havoc __ret_0_name;
[L6368]              havoc __ret_0_symbol;
[L6369]              havoc __ret_0_decimals;
[L6370]              havoc _cap_s750;
[L6371]              havoc tmpNow;
[L6372]              havoc gas;
[L6373]              assume gas > 4000000 && gas <= 8000000;
[L6374]              tmpNow := now;
[L6375]              havoc now;
[L6376]              assume now > tmpNow;
[L6377]              assume msgsender_MSG != null;
[L6378]              assume DType[msgsender_MSG] != SafeMath;
[L6379]              assume DType[msgsender_MSG] != Ownable;
[L6380]              assume DType[msgsender_MSG] != ERC20Basic;
[L6381]              assume DType[msgsender_MSG] != BasicToken;
[L6382]              assume DType[msgsender_MSG] != ERC20;
[L6383]              assume DType[msgsender_MSG] != StandardToken;
[L6384]              assume DType[msgsender_MSG] != MintableToken;
[L6385]              assume DType[msgsender_MSG] != CappedToken;
[L6386]              assume DType[msgsender_MSG] != TSTToken;
[L6387]              Alloc[msgsender_MSG] := true;
[L6388]  COND TRUE   choice == 18
[L6389]              gas := gas - 21000;
[L6390]  COND FALSE  !(gas >= 0)
[L6521]  RET         call CorralChoice_TSTToken(this);

[2020-11-25 06:41:57,754 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 06:41:57,754 INFO  L82        PathProgramCache]: Analyzing trace with hash -1820431687, now seen corresponding path program 1 times
[2020-11-25 06:41:57,755 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 06:41:57,815 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 06:41:58,805 INFO  L134       CoverageAnalysis]: Checked inductivity of 3953 backedges. 95 proven. 63 refuted. 0 times theorem prover too weak. 3795 trivial. 0 not checked.
[2020-11-25 06:41:58,806 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 06:41:58,806 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [33] total 33
[2020-11-25 06:41:58,806 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 06:41:58,806 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 34 interpolants.
[2020-11-25 06:41:58,806 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=109, Invalid=1013, Unknown=0, NotChecked=0, Total=1122
[2020-11-25 06:41:58,807 INFO  L87              Difference]: Start difference. First operand 1981 states and 2169 transitions. cyclomatic complexity: 192 Second operand 34 states.
[2020-11-25 06:42:03,362 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 06:42:03,362 INFO  L93              Difference]: Finished difference Result 2004 states and 2208 transitions.
[2020-11-25 06:42:03,362 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 35 states. 
[2020-11-25 06:42:03,362 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2004 states and 2208 transitions.
[2020-11-25 06:42:03,366 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 06:42:03,370 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2004 states to 2004 states and 2208 transitions.
[2020-11-25 06:42:03,370 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 635
[2020-11-25 06:42:03,370 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 635
[2020-11-25 06:42:03,370 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2004 states and 2208 transitions.
[2020-11-25 06:42:03,371 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 06:42:03,371 INFO  L728         BuchiCegarLoop]: Abstraction has 2004 states and 2208 transitions.
[2020-11-25 06:42:03,373 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2004 states and 2208 transitions.
[2020-11-25 06:42:03,381 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2004 to 1983.
[2020-11-25 06:42:03,381 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1983 states.
[2020-11-25 06:42:03,382 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1983 states to 1983 states and 2175 transitions.
[2020-11-25 06:42:03,383 INFO  L751         BuchiCegarLoop]: Abstraction has 1983 states and 2175 transitions.
[2020-11-25 06:42:03,383 INFO  L631         BuchiCegarLoop]: Abstraction has 1983 states and 2175 transitions.
[2020-11-25 06:42:03,383 INFO  L445         BuchiCegarLoop]: ======== Iteration 13============
[2020-11-25 06:42:03,383 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1983 states and 2175 transitions.
[2020-11-25 06:42:03,384 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 06:42:03,384 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 06:42:03,385 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 06:42:03,386 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [24, 24, 24, 24, 24, 24, 24, 24, 24, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 06:42:03,386 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_BasicToken0 := false;
[L2]                 call_transfer_BasicToken0 := false;
[L2]     CALL        call main();
[L6511]              assume null == 0;
[L6512]  CALL        call this := FreshRefGenerator__success();
[L2509]              havoc newRef;
[L2510]              assume Alloc[newRef] == false;
[L2511]              Alloc[newRef] := true;
[L2512]              assume newRef != null;
[L6512]  RET         call this := FreshRefGenerator__success();
[L6513]              assume now >= 0;
[L6514]              assume DType[this] == TSTToken;
[L6515]              assume msgvalue_MSG == 0;
[L6516]              gas := gas - 53000;
[L6517]  CALL        call TSTToken_TSTToken(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L1531]              havoc __exception;
[L1532]              revert := false;
[L1533]  COND FALSE  !(__exception)
[L1557]  CALL        call TSTToken_TSTToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3626]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3626]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3627]  COND FALSE  !(revert)
[L3630]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3630]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3631]  COND FALSE  !(revert)
[L3634]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3634]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3635]  COND FALSE  !(revert)
[L3638]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3638]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3639]  COND FALSE  !(revert)
[L3642]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3642]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3643]  COND FALSE  !(revert)
[L3646]  CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3275]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3275]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3276]  COND FALSE  !(revert)
[L3279]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3279]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3280]  COND FALSE  !(revert)
[L3283]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3283]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3284]  COND FALSE  !(revert)
[L3287]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3287]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3288]  COND FALSE  !(revert)
[L3291]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3291]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3292]  COND FALSE  !(revert)
[L3295]  CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3239]              assume msgsender_MSG != null;
[L3240]              Balance[this] := 0;
[L3241]              mintingFinished_MintableToken[this] := false;
[L3295]  RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3296]  COND FALSE  !(revert)
[L3646]  RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3647]  COND FALSE  !(revert)
[L3650]  CALL        call CappedToken_CappedToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3464]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3464]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3465]  COND FALSE  !(revert)
[L3468]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3468]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3469]  COND FALSE  !(revert)
[L3472]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3472]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3473]  COND FALSE  !(revert)
[L3476]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3476]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3477]  COND FALSE  !(revert)
[L3480]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3480]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3481]  COND FALSE  !(revert)
[L3484]  CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3275]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3275]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3276]  COND FALSE  !(revert)
[L3279]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3279]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3280]  COND FALSE  !(revert)
[L3283]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3283]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3284]  COND FALSE  !(revert)
[L3287]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3287]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3288]  COND FALSE  !(revert)
[L3291]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3291]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3292]  COND FALSE  !(revert)
[L3295]  CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3239]              assume msgsender_MSG != null;
[L3240]              Balance[this] := 0;
[L3241]              mintingFinished_MintableToken[this] := false;
[L3295]  RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3296]  COND FALSE  !(revert)
[L3484]  RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3485]  COND FALSE  !(revert)
[L3488]  CALL        call CappedToken_CappedToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s704);
[L3419]              assume msgsender_MSG != null;
[L3420]              Balance[this] := 0;
[L3421]              cap_CappedToken[this] := 0;
[L3423]  COND FALSE  !(!(_cap_s704 > 0))
[L3427]              cap_CappedToken[this] := _cap_s704;
[L3488]  RET         call CappedToken_CappedToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s704);
[L3489]  COND FALSE  !(revert)
[L3650]  RET         call CappedToken_CappedToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3651]  COND FALSE  !(revert)
[L3654]  CALL        call TSTToken_TSTToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3580]              assume msgsender_MSG != null;
[L3581]              Balance[this] := 0;
[L3582]              name_TSTToken[this] := 1406741980;
[L3583]              symbol_TSTToken[this] := 57413297;
[L3584]              decimals_TSTToken[this] := 18;
[L3654]  RET         call TSTToken_TSTToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3655]  COND FALSE  !(revert)
[L1557]  RET         call TSTToken_TSTToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L1558]              assume !revert && gas >= 0;
[L6517]  RET         call TSTToken_TSTToken(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L6518]              assume !revert && gas >= 0;
[L6521]  CALL        call CorralChoice_TSTToken(this);
[L6333]              havoc msgsender_MSG;
[L6334]              havoc msgvalue_MSG;
[L6335]              havoc choice;
[L6336]              havoc __ret_0_owner;
[L6337]              havoc _newOwner_s153;
[L6338]              havoc __ret_0_totalSupply;
[L6339]              havoc _owner_s298;
[L6340]              havoc __ret_0_balanceOf;
[L6341]              havoc _to_s286;
[L6342]              havoc _value_s286;
[L6343]              havoc __ret_0_transfer;
[L6344]              havoc _owner_s479;
[L6345]              havoc _spender_s479;
[L6346]              havoc __ret_0_allowance;
[L6347]              havoc _from_s435;
[L6348]              havoc _to_s435;
[L6349]              havoc _value_s435;
[L6350]              havoc __ret_0_transferFrom;
[L6351]              havoc _spender_s463;
[L6352]              havoc _value_s463;
[L6353]              havoc __ret_0_approve;
[L6354]              havoc _spender_s521;
[L6355]              havoc _addedValue_s521;
[L6356]              havoc __ret_0_increaseApproval;
[L6357]              havoc _spender_s581;
[L6358]              havoc _subtractedValue_s581;
[L6359]              havoc __ret_0_decreaseApproval;
[L6360]              havoc __ret_0_mintingFinished;
[L6361]              havoc _to_s729;
[L6362]              havoc _amount_s729;
[L6363]              havoc __ret_0_mint;
[L6364]              havoc __ret_0_finishMinting;
[L6365]              havoc __ret_0_cap;
[L6366]              havoc _cap_s704;
[L6367]              havoc __ret_0_name;
[L6368]              havoc __ret_0_symbol;
[L6369]              havoc __ret_0_decimals;
[L6370]              havoc _cap_s750;
[L6371]              havoc tmpNow;
[L6372]              havoc gas;
[L6373]              assume gas > 4000000 && gas <= 8000000;
[L6374]              tmpNow := now;
[L6375]              havoc now;
[L6376]              assume now > tmpNow;
[L6377]              assume msgsender_MSG != null;
[L6378]              assume DType[msgsender_MSG] != SafeMath;
[L6379]              assume DType[msgsender_MSG] != Ownable;
[L6380]              assume DType[msgsender_MSG] != ERC20Basic;
[L6381]              assume DType[msgsender_MSG] != BasicToken;
[L6382]              assume DType[msgsender_MSG] != ERC20;
[L6383]              assume DType[msgsender_MSG] != StandardToken;
[L6384]              assume DType[msgsender_MSG] != MintableToken;
[L6385]              assume DType[msgsender_MSG] != CappedToken;
[L6386]              assume DType[msgsender_MSG] != TSTToken;
[L6387]              Alloc[msgsender_MSG] := true;
[L6388]  COND FALSE  !(choice == 18)
[L6394]  COND FALSE  !(choice == 17)
[L6400]  COND FALSE  !(choice == 16)
[L6406]  COND FALSE  !(choice == 15)
[L6412]  COND FALSE  !(choice == 14)
[L6418]  COND TRUE   choice == 13
[L6419]              gas := gas - 21000;
[L6420]  COND TRUE   gas >= 0
[L6421]              assume _value_s286 >= 0 && _value_s286 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6422]              assume msgvalue_MSG == 0;
[L6423]  CALL        call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == _to_s286 && _value_s286 <= balances_BasicToken[this][msgsender_MSG]) && _value_s286 >= 0) && _value_s286 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s286] >= 0) && balances_BasicToken[this][_to_s286] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L555]               havoc __exception;
[L556]               revert := false;
[L557]   COND FALSE  !(__exception)
[L581]   CALL        call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L2893]  COND FALSE  !(!(_value_s286 <= balances_BasicToken[this][msgsender_MSG]))
[L2897]              __var_3 := null;
[L2898]  COND FALSE  !(!(_to_s286 != null))
[L2902]  CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s286);
[L2590]              assert _b_s68 <= _a_s68;
[L2591]              __ret_0_ := (_a_s68 - _b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2902]  RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s286);
[L2903]  COND FALSE  !(revert)
[L2906]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L2907]              balances_BasicToken[this][msgsender_MSG] := __var_4;
[L2908]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L2909]  CALL        call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s286], _value_s286);
[L2604]              c_s92 := (_a_s92 + _b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2605]              assert c_s92 >= _a_s92;
[L2606]              c_s92 := c_s92;
[L2909]  RET         call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s286], _value_s286);
[L2910]  COND FALSE  !(revert)
[L2913]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s286];
[L2914]              balances_BasicToken[this][_to_s286] := __var_5;
[L2915]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s286];
[L2916]              assert { :EventEmitted "Transfer_BasicToken" } true;
[L2917]              __ret_0_ := true;
[L581]   RET         call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L582]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((__ret_0_ == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && name_TSTToken[this] == old(name_TSTToken[this])) && symbol_TSTToken[this] == old(symbol_TSTToken[this])) && decimals_TSTToken[this] == old(decimals_TSTToken[this])) && cap_CappedToken[this] == old(cap_CappedToken[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this]);
[L2]                 success_transfer_BasicToken0 := true;
[L2]                 success_transfer_BasicToken0 := false;
[L2]                 revert := revert_hold;
[L6423]  RET         call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L6521]  RET         call CorralChoice_TSTToken(this);
[L6521]  CALL        call CorralChoice_TSTToken(this);
[L6333]              havoc msgsender_MSG;
[L6334]              havoc msgvalue_MSG;
[L6335]              havoc choice;
[L6336]              havoc __ret_0_owner;
[L6337]              havoc _newOwner_s153;
[L6338]              havoc __ret_0_totalSupply;
[L6339]              havoc _owner_s298;
[L6340]              havoc __ret_0_balanceOf;
[L6341]              havoc _to_s286;
[L6342]              havoc _value_s286;
[L6343]              havoc __ret_0_transfer;
[L6344]              havoc _owner_s479;
[L6345]              havoc _spender_s479;
[L6346]              havoc __ret_0_allowance;
[L6347]              havoc _from_s435;
[L6348]              havoc _to_s435;
[L6349]              havoc _value_s435;
[L6350]              havoc __ret_0_transferFrom;
[L6351]              havoc _spender_s463;
[L6352]              havoc _value_s463;
[L6353]              havoc __ret_0_approve;
[L6354]              havoc _spender_s521;
[L6355]              havoc _addedValue_s521;
[L6356]              havoc __ret_0_increaseApproval;
[L6357]              havoc _spender_s581;
[L6358]              havoc _subtractedValue_s581;
[L6359]              havoc __ret_0_decreaseApproval;
[L6360]              havoc __ret_0_mintingFinished;
[L6361]              havoc _to_s729;
[L6362]              havoc _amount_s729;
[L6363]              havoc __ret_0_mint;
[L6364]              havoc __ret_0_finishMinting;
[L6365]              havoc __ret_0_cap;
[L6366]              havoc _cap_s704;
[L6367]              havoc __ret_0_name;
[L6368]              havoc __ret_0_symbol;
[L6369]              havoc __ret_0_decimals;
[L6370]              havoc _cap_s750;
[L6371]              havoc tmpNow;
[L6372]              havoc gas;
[L6373]              assume gas > 4000000 && gas <= 8000000;
[L6374]              tmpNow := now;
[L6375]              havoc now;
[L6376]              assume now > tmpNow;
[L6377]              assume msgsender_MSG != null;
[L6378]              assume DType[msgsender_MSG] != SafeMath;
[L6379]              assume DType[msgsender_MSG] != Ownable;
[L6380]              assume DType[msgsender_MSG] != ERC20Basic;
[L6381]              assume DType[msgsender_MSG] != BasicToken;
[L6382]              assume DType[msgsender_MSG] != ERC20;
[L6383]              assume DType[msgsender_MSG] != StandardToken;
[L6384]              assume DType[msgsender_MSG] != MintableToken;
[L6385]              assume DType[msgsender_MSG] != CappedToken;
[L6386]              assume DType[msgsender_MSG] != TSTToken;
[L6387]              Alloc[msgsender_MSG] := true;
[L6388]  COND FALSE  !(choice == 18)
[L6394]  COND FALSE  !(choice == 17)
[L6400]  COND FALSE  !(choice == 16)
[L6406]  COND FALSE  !(choice == 15)
[L6412]  COND FALSE  !(choice == 14)
[L6418]  COND TRUE   choice == 13
[L6419]              gas := gas - 21000;
[L6420]  COND TRUE   gas >= 0
[L6421]              assume _value_s286 >= 0 && _value_s286 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6422]              assume msgvalue_MSG == 0;
[L6423]  CALL        call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == _to_s286 && _value_s286 <= balances_BasicToken[this][msgsender_MSG]) && _value_s286 >= 0) && _value_s286 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s286] >= 0) && balances_BasicToken[this][_to_s286] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L555]               havoc __exception;
[L556]               revert := false;
[L557]   COND FALSE  !(__exception)
[L581]   CALL        call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L2893]  COND FALSE  !(!(_value_s286 <= balances_BasicToken[this][msgsender_MSG]))
[L2897]              __var_3 := null;
[L2898]  COND FALSE  !(!(_to_s286 != null))
[L2902]  CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s286);
[L2590]              assert _b_s68 <= _a_s68;
[L2591]              __ret_0_ := (_a_s68 - _b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2902]  RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s286);
[L2903]  COND FALSE  !(revert)
[L2906]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L2907]              balances_BasicToken[this][msgsender_MSG] := __var_4;
[L2908]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L2909]  CALL        call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s286], _value_s286);
[L2604]              c_s92 := (_a_s92 + _b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2605]              assert c_s92 >= _a_s92;
[L2606]              c_s92 := c_s92;
[L2909]  RET         call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s286], _value_s286);
[L2910]  COND FALSE  !(revert)
[L2913]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s286];
[L2914]              balances_BasicToken[this][_to_s286] := __var_5;
[L2915]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s286];
[L2916]              assert { :EventEmitted "Transfer_BasicToken" } true;
[L2917]              __ret_0_ := true;
[L581]   RET         call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L582]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && name_TSTToken[this] == old(name_TSTToken[this])) && symbol_TSTToken[this] == old(symbol_TSTToken[this])) && decimals_TSTToken[this] == old(decimals_TSTToken[this])) && cap_CappedToken[this] == old(cap_CappedToken[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L6423]  RET         call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L6521]  RET         call CorralChoice_TSTToken(this);
[L6521]  CALL        call CorralChoice_TSTToken(this);
[L6333]              havoc msgsender_MSG;
[L6334]              havoc msgvalue_MSG;
[L6335]              havoc choice;
[L6336]              havoc __ret_0_owner;
[L6337]              havoc _newOwner_s153;
[L6338]              havoc __ret_0_totalSupply;
[L6339]              havoc _owner_s298;
[L6340]              havoc __ret_0_balanceOf;
[L6341]              havoc _to_s286;
[L6342]              havoc _value_s286;
[L6343]              havoc __ret_0_transfer;
[L6344]              havoc _owner_s479;
[L6345]              havoc _spender_s479;
[L6346]              havoc __ret_0_allowance;
[L6347]              havoc _from_s435;
[L6348]              havoc _to_s435;
[L6349]              havoc _value_s435;
[L6350]              havoc __ret_0_transferFrom;
[L6351]              havoc _spender_s463;
[L6352]              havoc _value_s463;
[L6353]              havoc __ret_0_approve;
[L6354]              havoc _spender_s521;
[L6355]              havoc _addedValue_s521;
[L6356]              havoc __ret_0_increaseApproval;
[L6357]              havoc _spender_s581;
[L6358]              havoc _subtractedValue_s581;
[L6359]              havoc __ret_0_decreaseApproval;
[L6360]              havoc __ret_0_mintingFinished;
[L6361]              havoc _to_s729;
[L6362]              havoc _amount_s729;
[L6363]              havoc __ret_0_mint;
[L6364]              havoc __ret_0_finishMinting;
[L6365]              havoc __ret_0_cap;
[L6366]              havoc _cap_s704;
[L6367]              havoc __ret_0_name;
[L6368]              havoc __ret_0_symbol;
[L6369]              havoc __ret_0_decimals;
[L6370]              havoc _cap_s750;
[L6371]              havoc tmpNow;
[L6372]              havoc gas;
[L6373]              assume gas > 4000000 && gas <= 8000000;
[L6374]              tmpNow := now;
[L6375]              havoc now;
[L6376]              assume now > tmpNow;
[L6377]              assume msgsender_MSG != null;
[L6378]              assume DType[msgsender_MSG] != SafeMath;
[L6379]              assume DType[msgsender_MSG] != Ownable;
[L6380]              assume DType[msgsender_MSG] != ERC20Basic;
[L6381]              assume DType[msgsender_MSG] != BasicToken;
[L6382]              assume DType[msgsender_MSG] != ERC20;
[L6383]              assume DType[msgsender_MSG] != StandardToken;
[L6384]              assume DType[msgsender_MSG] != MintableToken;
[L6385]              assume DType[msgsender_MSG] != CappedToken;
[L6386]              assume DType[msgsender_MSG] != TSTToken;
[L6387]              Alloc[msgsender_MSG] := true;
[L6388]  COND FALSE  !(choice == 18)
[L6394]  COND FALSE  !(choice == 17)
[L6400]  COND FALSE  !(choice == 16)
[L6406]  COND FALSE  !(choice == 15)
[L6412]  COND FALSE  !(choice == 14)
[L6418]  COND TRUE   choice == 13
[L6419]              gas := gas - 21000;
[L6420]  COND TRUE   gas >= 0
[L6421]              assume _value_s286 >= 0 && _value_s286 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6422]              assume msgvalue_MSG == 0;
[L6423]  CALL        call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s286 && _value_s286 <= balances_BasicToken[this][msgsender_MSG]) && _value_s286 >= 0) && _value_s286 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s286] >= 0) && balances_BasicToken[this][_to_s286] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BasicToken0 := true;
[L2]                 call_transfer_BasicToken0 := false;
[L2]                 revert := revert_hold;
[L555]               havoc __exception;
[L556]               revert := false;
[L557]   COND FALSE  !(__exception)
[L581]   CALL        call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L2893]  COND FALSE  !(!(_value_s286 <= balances_BasicToken[this][msgsender_MSG]))
[L2897]              __var_3 := null;
[L2898]  COND FALSE  !(!(_to_s286 != null))
[L2902]  CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s286);
[L2590]              assert _b_s68 <= _a_s68;
[L2591]              __ret_0_ := (_a_s68 - _b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2902]  RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s286);
[L2903]  COND FALSE  !(revert)
[L2906]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L2907]              balances_BasicToken[this][msgsender_MSG] := __var_4;
[L2908]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L2909]  CALL        call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s286], _value_s286);
[L2604]              c_s92 := (_a_s92 + _b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2605]              assert c_s92 >= _a_s92;
[L2606]              c_s92 := c_s92;
[L2909]  RET         call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s286], _value_s286);
[L2910]  COND FALSE  !(revert)
[L2913]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s286];
[L2914]              balances_BasicToken[this][_to_s286] := __var_5;
[L2915]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s286];
[L2916]              assert { :EventEmitted "Transfer_BasicToken" } true;
[L2917]              __ret_0_ := true;
[L581]   RET         call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L582]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && name_TSTToken[this] == old(name_TSTToken[this])) && symbol_TSTToken[this] == old(symbol_TSTToken[this])) && decimals_TSTToken[this] == old(decimals_TSTToken[this])) && cap_CappedToken[this] == old(cap_CappedToken[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L6423]  RET         call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L6521]  RET         call CorralChoice_TSTToken(this);

Loop:
[L6521]  CALL        call CorralChoice_TSTToken(this);
[L6333]              havoc msgsender_MSG;
[L6334]              havoc msgvalue_MSG;
[L6335]              havoc choice;
[L6336]              havoc __ret_0_owner;
[L6337]              havoc _newOwner_s153;
[L6338]              havoc __ret_0_totalSupply;
[L6339]              havoc _owner_s298;
[L6340]              havoc __ret_0_balanceOf;
[L6341]              havoc _to_s286;
[L6342]              havoc _value_s286;
[L6343]              havoc __ret_0_transfer;
[L6344]              havoc _owner_s479;
[L6345]              havoc _spender_s479;
[L6346]              havoc __ret_0_allowance;
[L6347]              havoc _from_s435;
[L6348]              havoc _to_s435;
[L6349]              havoc _value_s435;
[L6350]              havoc __ret_0_transferFrom;
[L6351]              havoc _spender_s463;
[L6352]              havoc _value_s463;
[L6353]              havoc __ret_0_approve;
[L6354]              havoc _spender_s521;
[L6355]              havoc _addedValue_s521;
[L6356]              havoc __ret_0_increaseApproval;
[L6357]              havoc _spender_s581;
[L6358]              havoc _subtractedValue_s581;
[L6359]              havoc __ret_0_decreaseApproval;
[L6360]              havoc __ret_0_mintingFinished;
[L6361]              havoc _to_s729;
[L6362]              havoc _amount_s729;
[L6363]              havoc __ret_0_mint;
[L6364]              havoc __ret_0_finishMinting;
[L6365]              havoc __ret_0_cap;
[L6366]              havoc _cap_s704;
[L6367]              havoc __ret_0_name;
[L6368]              havoc __ret_0_symbol;
[L6369]              havoc __ret_0_decimals;
[L6370]              havoc _cap_s750;
[L6371]              havoc tmpNow;
[L6372]              havoc gas;
[L6373]              assume gas > 4000000 && gas <= 8000000;
[L6374]              tmpNow := now;
[L6375]              havoc now;
[L6376]              assume now > tmpNow;
[L6377]              assume msgsender_MSG != null;
[L6378]              assume DType[msgsender_MSG] != SafeMath;
[L6379]              assume DType[msgsender_MSG] != Ownable;
[L6380]              assume DType[msgsender_MSG] != ERC20Basic;
[L6381]              assume DType[msgsender_MSG] != BasicToken;
[L6382]              assume DType[msgsender_MSG] != ERC20;
[L6383]              assume DType[msgsender_MSG] != StandardToken;
[L6384]              assume DType[msgsender_MSG] != MintableToken;
[L6385]              assume DType[msgsender_MSG] != CappedToken;
[L6386]              assume DType[msgsender_MSG] != TSTToken;
[L6387]              Alloc[msgsender_MSG] := true;
[L6388]  COND FALSE  !(choice == 18)
[L6394]  COND FALSE  !(choice == 17)
[L6400]  COND FALSE  !(choice == 16)
[L6406]  COND FALSE  !(choice == 15)
[L6412]  COND FALSE  !(choice == 14)
[L6418]  COND TRUE   choice == 13
[L6419]              gas := gas - 21000;
[L6420]  COND TRUE   gas >= 0
[L6421]              assume _value_s286 >= 0 && _value_s286 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6422]              assume msgvalue_MSG == 0;
[L6423]  CALL        call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s286 && _value_s286 <= balances_BasicToken[this][msgsender_MSG]) && _value_s286 >= 0) && _value_s286 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s286] >= 0) && balances_BasicToken[this][_to_s286] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BasicToken0 := true;
[L2]                 call_transfer_BasicToken0 := false;
[L2]                 revert := revert_hold;
[L555]               havoc __exception;
[L556]               revert := false;
[L557]   COND FALSE  !(__exception)
[L581]   CALL        call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L2893]  COND FALSE  !(!(_value_s286 <= balances_BasicToken[this][msgsender_MSG]))
[L2897]              __var_3 := null;
[L2898]  COND FALSE  !(!(_to_s286 != null))
[L2902]  CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s286);
[L2590]              assert _b_s68 <= _a_s68;
[L2591]              __ret_0_ := (_a_s68 - _b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2902]  RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s286);
[L2903]  COND FALSE  !(revert)
[L2906]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L2907]              balances_BasicToken[this][msgsender_MSG] := __var_4;
[L2908]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L2909]  CALL        call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s286], _value_s286);
[L2604]              c_s92 := (_a_s92 + _b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2605]              assert c_s92 >= _a_s92;
[L2606]              c_s92 := c_s92;
[L2909]  RET         call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s286], _value_s286);
[L2910]  COND FALSE  !(revert)
[L2913]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s286];
[L2914]              balances_BasicToken[this][_to_s286] := __var_5;
[L2915]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s286];
[L2916]              assert { :EventEmitted "Transfer_BasicToken" } true;
[L2917]              __ret_0_ := true;
[L581]   RET         call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L582]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && name_TSTToken[this] == old(name_TSTToken[this])) && symbol_TSTToken[this] == old(symbol_TSTToken[this])) && decimals_TSTToken[this] == old(decimals_TSTToken[this])) && cap_CappedToken[this] == old(cap_CappedToken[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L6423]  RET         call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L6521]  RET         call CorralChoice_TSTToken(this);

[2020-11-25 06:42:03,392 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 06:42:03,392 INFO  L82        PathProgramCache]: Analyzing trace with hash -1573518464, now seen corresponding path program 1 times
[2020-11-25 06:42:03,392 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 06:42:03,434 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 06:42:04,151 INFO  L134       CoverageAnalysis]: Checked inductivity of 4139 backedges. 137 proven. 8 refuted. 0 times theorem prover too weak. 3994 trivial. 0 not checked.
[2020-11-25 06:42:04,152 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 06:42:04,152 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [28] total 28
[2020-11-25 06:42:04,152 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 06:42:04,152 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 28 interpolants.
[2020-11-25 06:42:04,152 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=80, Invalid=676, Unknown=0, NotChecked=0, Total=756
[2020-11-25 06:42:04,153 INFO  L87              Difference]: Start difference. First operand 1983 states and 2175 transitions. cyclomatic complexity: 197 Second operand 28 states.
[2020-11-25 06:42:06,050 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 06:42:06,050 INFO  L93              Difference]: Finished difference Result 2006 states and 2209 transitions.
[2020-11-25 06:42:06,050 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 30 states. 
[2020-11-25 06:42:06,050 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2006 states and 2209 transitions.
[2020-11-25 06:42:06,054 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 06:42:06,058 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2006 states to 2006 states and 2209 transitions.
[2020-11-25 06:42:06,058 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 635
[2020-11-25 06:42:06,058 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 635
[2020-11-25 06:42:06,059 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2006 states and 2209 transitions.
[2020-11-25 06:42:06,060 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 06:42:06,060 INFO  L728         BuchiCegarLoop]: Abstraction has 2006 states and 2209 transitions.
[2020-11-25 06:42:06,061 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2006 states and 2209 transitions.
[2020-11-25 06:42:06,070 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2006 to 1987.
[2020-11-25 06:42:06,070 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1987 states.
[2020-11-25 06:42:06,071 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1987 states to 1987 states and 2186 transitions.
[2020-11-25 06:42:06,071 INFO  L751         BuchiCegarLoop]: Abstraction has 1987 states and 2186 transitions.
[2020-11-25 06:42:06,072 INFO  L631         BuchiCegarLoop]: Abstraction has 1987 states and 2186 transitions.
[2020-11-25 06:42:06,072 INFO  L445         BuchiCegarLoop]: ======== Iteration 14============
[2020-11-25 06:42:06,072 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1987 states and 2186 transitions.
[2020-11-25 06:42:06,074 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 06:42:06,074 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 06:42:06,074 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 06:42:06,075 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [24, 24, 24, 24, 24, 24, 24, 24, 24, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 06:42:06,075 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_BasicToken0 := false;
[L2]                 call_transfer_BasicToken0 := false;
[L2]     CALL        call main();
[L6511]              assume null == 0;
[L6512]  CALL        call this := FreshRefGenerator__success();
[L2509]              havoc newRef;
[L2510]              assume Alloc[newRef] == false;
[L2511]              Alloc[newRef] := true;
[L2512]              assume newRef != null;
[L6512]  RET         call this := FreshRefGenerator__success();
[L6513]              assume now >= 0;
[L6514]              assume DType[this] == TSTToken;
[L6515]              assume msgvalue_MSG == 0;
[L6516]              gas := gas - 53000;
[L6517]  CALL        call TSTToken_TSTToken(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L1531]              havoc __exception;
[L1532]              revert := false;
[L1533]  COND FALSE  !(__exception)
[L1557]  CALL        call TSTToken_TSTToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3626]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3626]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3627]  COND FALSE  !(revert)
[L3630]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3630]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3631]  COND FALSE  !(revert)
[L3634]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3634]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3635]  COND FALSE  !(revert)
[L3638]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3638]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3639]  COND FALSE  !(revert)
[L3642]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3642]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3643]  COND FALSE  !(revert)
[L3646]  CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3275]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3275]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3276]  COND FALSE  !(revert)
[L3279]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3279]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3280]  COND FALSE  !(revert)
[L3283]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3283]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3284]  COND FALSE  !(revert)
[L3287]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3287]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3288]  COND FALSE  !(revert)
[L3291]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3291]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3292]  COND FALSE  !(revert)
[L3295]  CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3239]              assume msgsender_MSG != null;
[L3240]              Balance[this] := 0;
[L3241]              mintingFinished_MintableToken[this] := false;
[L3295]  RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3296]  COND FALSE  !(revert)
[L3646]  RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3647]  COND FALSE  !(revert)
[L3650]  CALL        call CappedToken_CappedToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3464]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3464]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3465]  COND FALSE  !(revert)
[L3468]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3468]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3469]  COND FALSE  !(revert)
[L3472]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3472]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3473]  COND FALSE  !(revert)
[L3476]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3476]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3477]  COND FALSE  !(revert)
[L3480]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3480]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3481]  COND FALSE  !(revert)
[L3484]  CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3275]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3275]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3276]  COND FALSE  !(revert)
[L3279]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3279]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3280]  COND FALSE  !(revert)
[L3283]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3283]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3284]  COND FALSE  !(revert)
[L3287]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3287]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3288]  COND FALSE  !(revert)
[L3291]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3291]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3292]  COND FALSE  !(revert)
[L3295]  CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3239]              assume msgsender_MSG != null;
[L3240]              Balance[this] := 0;
[L3241]              mintingFinished_MintableToken[this] := false;
[L3295]  RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3296]  COND FALSE  !(revert)
[L3484]  RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3485]  COND FALSE  !(revert)
[L3488]  CALL        call CappedToken_CappedToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s704);
[L3419]              assume msgsender_MSG != null;
[L3420]              Balance[this] := 0;
[L3421]              cap_CappedToken[this] := 0;
[L3423]  COND FALSE  !(!(_cap_s704 > 0))
[L3427]              cap_CappedToken[this] := _cap_s704;
[L3488]  RET         call CappedToken_CappedToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s704);
[L3489]  COND FALSE  !(revert)
[L3650]  RET         call CappedToken_CappedToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3651]  COND FALSE  !(revert)
[L3654]  CALL        call TSTToken_TSTToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3580]              assume msgsender_MSG != null;
[L3581]              Balance[this] := 0;
[L3582]              name_TSTToken[this] := 1406741980;
[L3583]              symbol_TSTToken[this] := 57413297;
[L3584]              decimals_TSTToken[this] := 18;
[L3654]  RET         call TSTToken_TSTToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3655]  COND FALSE  !(revert)
[L1557]  RET         call TSTToken_TSTToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L1558]              assume !revert && gas >= 0;
[L6517]  RET         call TSTToken_TSTToken(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L6518]              assume !revert && gas >= 0;
[L6521]  CALL        call CorralChoice_TSTToken(this);
[L6333]              havoc msgsender_MSG;
[L6334]              havoc msgvalue_MSG;
[L6335]              havoc choice;
[L6336]              havoc __ret_0_owner;
[L6337]              havoc _newOwner_s153;
[L6338]              havoc __ret_0_totalSupply;
[L6339]              havoc _owner_s298;
[L6340]              havoc __ret_0_balanceOf;
[L6341]              havoc _to_s286;
[L6342]              havoc _value_s286;
[L6343]              havoc __ret_0_transfer;
[L6344]              havoc _owner_s479;
[L6345]              havoc _spender_s479;
[L6346]              havoc __ret_0_allowance;
[L6347]              havoc _from_s435;
[L6348]              havoc _to_s435;
[L6349]              havoc _value_s435;
[L6350]              havoc __ret_0_transferFrom;
[L6351]              havoc _spender_s463;
[L6352]              havoc _value_s463;
[L6353]              havoc __ret_0_approve;
[L6354]              havoc _spender_s521;
[L6355]              havoc _addedValue_s521;
[L6356]              havoc __ret_0_increaseApproval;
[L6357]              havoc _spender_s581;
[L6358]              havoc _subtractedValue_s581;
[L6359]              havoc __ret_0_decreaseApproval;
[L6360]              havoc __ret_0_mintingFinished;
[L6361]              havoc _to_s729;
[L6362]              havoc _amount_s729;
[L6363]              havoc __ret_0_mint;
[L6364]              havoc __ret_0_finishMinting;
[L6365]              havoc __ret_0_cap;
[L6366]              havoc _cap_s704;
[L6367]              havoc __ret_0_name;
[L6368]              havoc __ret_0_symbol;
[L6369]              havoc __ret_0_decimals;
[L6370]              havoc _cap_s750;
[L6371]              havoc tmpNow;
[L6372]              havoc gas;
[L6373]              assume gas > 4000000 && gas <= 8000000;
[L6374]              tmpNow := now;
[L6375]              havoc now;
[L6376]              assume now > tmpNow;
[L6377]              assume msgsender_MSG != null;
[L6378]              assume DType[msgsender_MSG] != SafeMath;
[L6379]              assume DType[msgsender_MSG] != Ownable;
[L6380]              assume DType[msgsender_MSG] != ERC20Basic;
[L6381]              assume DType[msgsender_MSG] != BasicToken;
[L6382]              assume DType[msgsender_MSG] != ERC20;
[L6383]              assume DType[msgsender_MSG] != StandardToken;
[L6384]              assume DType[msgsender_MSG] != MintableToken;
[L6385]              assume DType[msgsender_MSG] != CappedToken;
[L6386]              assume DType[msgsender_MSG] != TSTToken;
[L6387]              Alloc[msgsender_MSG] := true;
[L6388]  COND FALSE  !(choice == 18)
[L6394]  COND FALSE  !(choice == 17)
[L6400]  COND FALSE  !(choice == 16)
[L6406]  COND FALSE  !(choice == 15)
[L6412]  COND FALSE  !(choice == 14)
[L6418]  COND TRUE   choice == 13
[L6419]              gas := gas - 21000;
[L6420]  COND TRUE   gas >= 0
[L6421]              assume _value_s286 >= 0 && _value_s286 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6422]              assume msgvalue_MSG == 0;
[L6423]  CALL        call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == _to_s286 && _value_s286 <= balances_BasicToken[this][msgsender_MSG]) && _value_s286 >= 0) && _value_s286 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s286] >= 0) && balances_BasicToken[this][_to_s286] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L555]               havoc __exception;
[L556]               revert := false;
[L557]   COND FALSE  !(__exception)
[L581]   CALL        call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L2893]  COND FALSE  !(!(_value_s286 <= balances_BasicToken[this][msgsender_MSG]))
[L2897]              __var_3 := null;
[L2898]  COND FALSE  !(!(_to_s286 != null))
[L2902]  CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s286);
[L2590]              assert _b_s68 <= _a_s68;
[L2591]              __ret_0_ := (_a_s68 - _b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2902]  RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s286);
[L2903]  COND FALSE  !(revert)
[L2906]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L2907]              balances_BasicToken[this][msgsender_MSG] := __var_4;
[L2908]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L2909]  CALL        call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s286], _value_s286);
[L2604]              c_s92 := (_a_s92 + _b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2605]              assert c_s92 >= _a_s92;
[L2606]              c_s92 := c_s92;
[L2909]  RET         call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s286], _value_s286);
[L2910]  COND FALSE  !(revert)
[L2913]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s286];
[L2914]              balances_BasicToken[this][_to_s286] := __var_5;
[L2915]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s286];
[L2916]              assert { :EventEmitted "Transfer_BasicToken" } true;
[L2917]              __ret_0_ := true;
[L581]   RET         call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L582]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((__ret_0_ == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && name_TSTToken[this] == old(name_TSTToken[this])) && symbol_TSTToken[this] == old(symbol_TSTToken[this])) && decimals_TSTToken[this] == old(decimals_TSTToken[this])) && cap_CappedToken[this] == old(cap_CappedToken[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this]);
[L2]                 success_transfer_BasicToken0 := true;
[L2]                 success_transfer_BasicToken0 := false;
[L2]                 revert := revert_hold;
[L6423]  RET         call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L6521]  RET         call CorralChoice_TSTToken(this);
[L6521]  CALL        call CorralChoice_TSTToken(this);
[L6333]              havoc msgsender_MSG;
[L6334]              havoc msgvalue_MSG;
[L6335]              havoc choice;
[L6336]              havoc __ret_0_owner;
[L6337]              havoc _newOwner_s153;
[L6338]              havoc __ret_0_totalSupply;
[L6339]              havoc _owner_s298;
[L6340]              havoc __ret_0_balanceOf;
[L6341]              havoc _to_s286;
[L6342]              havoc _value_s286;
[L6343]              havoc __ret_0_transfer;
[L6344]              havoc _owner_s479;
[L6345]              havoc _spender_s479;
[L6346]              havoc __ret_0_allowance;
[L6347]              havoc _from_s435;
[L6348]              havoc _to_s435;
[L6349]              havoc _value_s435;
[L6350]              havoc __ret_0_transferFrom;
[L6351]              havoc _spender_s463;
[L6352]              havoc _value_s463;
[L6353]              havoc __ret_0_approve;
[L6354]              havoc _spender_s521;
[L6355]              havoc _addedValue_s521;
[L6356]              havoc __ret_0_increaseApproval;
[L6357]              havoc _spender_s581;
[L6358]              havoc _subtractedValue_s581;
[L6359]              havoc __ret_0_decreaseApproval;
[L6360]              havoc __ret_0_mintingFinished;
[L6361]              havoc _to_s729;
[L6362]              havoc _amount_s729;
[L6363]              havoc __ret_0_mint;
[L6364]              havoc __ret_0_finishMinting;
[L6365]              havoc __ret_0_cap;
[L6366]              havoc _cap_s704;
[L6367]              havoc __ret_0_name;
[L6368]              havoc __ret_0_symbol;
[L6369]              havoc __ret_0_decimals;
[L6370]              havoc _cap_s750;
[L6371]              havoc tmpNow;
[L6372]              havoc gas;
[L6373]              assume gas > 4000000 && gas <= 8000000;
[L6374]              tmpNow := now;
[L6375]              havoc now;
[L6376]              assume now > tmpNow;
[L6377]              assume msgsender_MSG != null;
[L6378]              assume DType[msgsender_MSG] != SafeMath;
[L6379]              assume DType[msgsender_MSG] != Ownable;
[L6380]              assume DType[msgsender_MSG] != ERC20Basic;
[L6381]              assume DType[msgsender_MSG] != BasicToken;
[L6382]              assume DType[msgsender_MSG] != ERC20;
[L6383]              assume DType[msgsender_MSG] != StandardToken;
[L6384]              assume DType[msgsender_MSG] != MintableToken;
[L6385]              assume DType[msgsender_MSG] != CappedToken;
[L6386]              assume DType[msgsender_MSG] != TSTToken;
[L6387]              Alloc[msgsender_MSG] := true;
[L6388]  COND FALSE  !(choice == 18)
[L6394]  COND FALSE  !(choice == 17)
[L6400]  COND FALSE  !(choice == 16)
[L6406]  COND FALSE  !(choice == 15)
[L6412]  COND FALSE  !(choice == 14)
[L6418]  COND FALSE  !(choice == 13)
[L6425]  COND FALSE  !(choice == 12)
[L6431]  COND FALSE  !(choice == 11)
[L6438]  COND FALSE  !(choice == 10)
[L6445]  COND FALSE  !(choice == 9)
[L6452]  COND FALSE  !(choice == 8)
[L6459]  COND FALSE  !(choice == 7)
[L6465]  COND TRUE   choice == 6
[L6466]              gas := gas - 21000;
[L6467]  COND TRUE   gas >= 0
[L6468]              assume _amount_s729 >= 0 && _amount_s729 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6469]              assume msgvalue_MSG == 0;
[L6470]  CALL        call __ret_0_mint := mint~address~uint256_CappedToken(this, msgsender_MSG, msgvalue_MSG, _to_s729, _amount_s729);
[L1399]              havoc __exception;
[L1400]              revert := false;
[L1401]  COND FALSE  !(__exception)
[L1425]  CALL        call __ret_0_ := mint~address~uint256_CappedToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s729, _amount_s729);
[L3529]  CALL        call __var_14 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s729);
[L2604]              c_s92 := (_a_s92 + _b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2605]              assert c_s92 >= _a_s92;
[L2606]              c_s92 := c_s92;
[L3529]  RET         call __var_14 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s729);
[L3530]  COND FALSE  !(revert)
[L3533]  COND FALSE  !(!(__var_14 <= cap_CappedToken[this]))
[L3537]  COND TRUE   DType[this] == TSTToken
[L3538]  CALL        call __var_15 := mint~address~uint256_MintableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s729, _amount_s729);
[L3333]  CALL        call hasMintPermission_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5344]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3333]  RET         call hasMintPermission_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3334]  COND FALSE  !(revert)
[L3337]  CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5328]  COND FALSE  !(!!mintingFinished_MintableToken[this])
[L3337]  RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3338]  COND FALSE  !(revert)
[L3341]  CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s664);
[L2604]              c_s92 := (_a_s92 + _b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2605]              assert c_s92 >= _a_s92;
[L2606]              c_s92 := c_s92;
[L3341]  RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s664);
[L3342]  COND FALSE  !(revert)
[L3345]              totalSupply__BasicToken[this] := __var_12;
[L3346]  CALL        call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s664], _amount_s664);
[L2604]              c_s92 := (_a_s92 + _b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2605]              assert c_s92 >= _a_s92;
[L2606]              c_s92 := c_s92;
[L3346]  RET         call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s664], _amount_s664);
[L3347]  COND FALSE  !(revert)
[L3350]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s664];
[L3351]              balances_BasicToken[this][_to_s664] := __var_13;
[L3352]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s664];
[L3353]              assert { :EventEmitted "Mint_MintableToken" } true;
[L3354]              assert { :EventEmitted "Transfer_MintableToken" } true;
[L3355]              __ret_0_ := true;
[L3538]  RET         call __var_15 := mint~address~uint256_MintableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s729, _amount_s729);
[L3539]  COND FALSE  !(revert)
[L3550]              __ret_0_ := __var_15;
[L1425]  RET         call __ret_0_ := mint~address~uint256_CappedToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s729, _amount_s729);
[L1426]              assume !revert && gas >= 0;
[L6470]  RET         call __ret_0_mint := mint~address~uint256_CappedToken(this, msgsender_MSG, msgvalue_MSG, _to_s729, _amount_s729);
[L6521]  RET         call CorralChoice_TSTToken(this);
[L6521]  CALL        call CorralChoice_TSTToken(this);
[L6333]              havoc msgsender_MSG;
[L6334]              havoc msgvalue_MSG;
[L6335]              havoc choice;
[L6336]              havoc __ret_0_owner;
[L6337]              havoc _newOwner_s153;
[L6338]              havoc __ret_0_totalSupply;
[L6339]              havoc _owner_s298;
[L6340]              havoc __ret_0_balanceOf;
[L6341]              havoc _to_s286;
[L6342]              havoc _value_s286;
[L6343]              havoc __ret_0_transfer;
[L6344]              havoc _owner_s479;
[L6345]              havoc _spender_s479;
[L6346]              havoc __ret_0_allowance;
[L6347]              havoc _from_s435;
[L6348]              havoc _to_s435;
[L6349]              havoc _value_s435;
[L6350]              havoc __ret_0_transferFrom;
[L6351]              havoc _spender_s463;
[L6352]              havoc _value_s463;
[L6353]              havoc __ret_0_approve;
[L6354]              havoc _spender_s521;
[L6355]              havoc _addedValue_s521;
[L6356]              havoc __ret_0_increaseApproval;
[L6357]              havoc _spender_s581;
[L6358]              havoc _subtractedValue_s581;
[L6359]              havoc __ret_0_decreaseApproval;
[L6360]              havoc __ret_0_mintingFinished;
[L6361]              havoc _to_s729;
[L6362]              havoc _amount_s729;
[L6363]              havoc __ret_0_mint;
[L6364]              havoc __ret_0_finishMinting;
[L6365]              havoc __ret_0_cap;
[L6366]              havoc _cap_s704;
[L6367]              havoc __ret_0_name;
[L6368]              havoc __ret_0_symbol;
[L6369]              havoc __ret_0_decimals;
[L6370]              havoc _cap_s750;
[L6371]              havoc tmpNow;
[L6372]              havoc gas;
[L6373]              assume gas > 4000000 && gas <= 8000000;
[L6374]              tmpNow := now;
[L6375]              havoc now;
[L6376]              assume now > tmpNow;
[L6377]              assume msgsender_MSG != null;
[L6378]              assume DType[msgsender_MSG] != SafeMath;
[L6379]              assume DType[msgsender_MSG] != Ownable;
[L6380]              assume DType[msgsender_MSG] != ERC20Basic;
[L6381]              assume DType[msgsender_MSG] != BasicToken;
[L6382]              assume DType[msgsender_MSG] != ERC20;
[L6383]              assume DType[msgsender_MSG] != StandardToken;
[L6384]              assume DType[msgsender_MSG] != MintableToken;
[L6385]              assume DType[msgsender_MSG] != CappedToken;
[L6386]              assume DType[msgsender_MSG] != TSTToken;
[L6387]              Alloc[msgsender_MSG] := true;
[L6388]  COND FALSE  !(choice == 18)
[L6394]  COND FALSE  !(choice == 17)
[L6400]  COND FALSE  !(choice == 16)
[L6406]  COND FALSE  !(choice == 15)
[L6412]  COND FALSE  !(choice == 14)
[L6418]  COND TRUE   choice == 13
[L6419]              gas := gas - 21000;
[L6420]  COND TRUE   gas >= 0
[L6421]              assume _value_s286 >= 0 && _value_s286 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6422]              assume msgvalue_MSG == 0;
[L6423]  CALL        call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s286 && _value_s286 <= balances_BasicToken[this][msgsender_MSG]) && _value_s286 >= 0) && _value_s286 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s286] >= 0) && balances_BasicToken[this][_to_s286] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BasicToken0 := true;
[L2]                 call_transfer_BasicToken0 := false;
[L2]                 revert := revert_hold;
[L555]               havoc __exception;
[L556]               revert := false;
[L557]   COND FALSE  !(__exception)
[L581]   CALL        call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L2893]  COND FALSE  !(!(_value_s286 <= balances_BasicToken[this][msgsender_MSG]))
[L2897]              __var_3 := null;
[L2898]  COND FALSE  !(!(_to_s286 != null))
[L2902]  CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s286);
[L2590]              assert _b_s68 <= _a_s68;
[L2591]              __ret_0_ := (_a_s68 - _b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2902]  RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s286);
[L2903]  COND FALSE  !(revert)
[L2906]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L2907]              balances_BasicToken[this][msgsender_MSG] := __var_4;
[L2908]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L2909]  CALL        call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s286], _value_s286);
[L2604]              c_s92 := (_a_s92 + _b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2605]              assert c_s92 >= _a_s92;
[L2606]              c_s92 := c_s92;
[L2909]  RET         call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s286], _value_s286);
[L2910]  COND FALSE  !(revert)
[L2913]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s286];
[L2914]              balances_BasicToken[this][_to_s286] := __var_5;
[L2915]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s286];
[L2916]              assert { :EventEmitted "Transfer_BasicToken" } true;
[L2917]              __ret_0_ := true;
[L581]   RET         call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L582]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && name_TSTToken[this] == old(name_TSTToken[this])) && symbol_TSTToken[this] == old(symbol_TSTToken[this])) && decimals_TSTToken[this] == old(decimals_TSTToken[this])) && cap_CappedToken[this] == old(cap_CappedToken[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L6423]  RET         call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L6521]  RET         call CorralChoice_TSTToken(this);

Loop:
[L6521]  CALL        call CorralChoice_TSTToken(this);
[L6333]              havoc msgsender_MSG;
[L6334]              havoc msgvalue_MSG;
[L6335]              havoc choice;
[L6336]              havoc __ret_0_owner;
[L6337]              havoc _newOwner_s153;
[L6338]              havoc __ret_0_totalSupply;
[L6339]              havoc _owner_s298;
[L6340]              havoc __ret_0_balanceOf;
[L6341]              havoc _to_s286;
[L6342]              havoc _value_s286;
[L6343]              havoc __ret_0_transfer;
[L6344]              havoc _owner_s479;
[L6345]              havoc _spender_s479;
[L6346]              havoc __ret_0_allowance;
[L6347]              havoc _from_s435;
[L6348]              havoc _to_s435;
[L6349]              havoc _value_s435;
[L6350]              havoc __ret_0_transferFrom;
[L6351]              havoc _spender_s463;
[L6352]              havoc _value_s463;
[L6353]              havoc __ret_0_approve;
[L6354]              havoc _spender_s521;
[L6355]              havoc _addedValue_s521;
[L6356]              havoc __ret_0_increaseApproval;
[L6357]              havoc _spender_s581;
[L6358]              havoc _subtractedValue_s581;
[L6359]              havoc __ret_0_decreaseApproval;
[L6360]              havoc __ret_0_mintingFinished;
[L6361]              havoc _to_s729;
[L6362]              havoc _amount_s729;
[L6363]              havoc __ret_0_mint;
[L6364]              havoc __ret_0_finishMinting;
[L6365]              havoc __ret_0_cap;
[L6366]              havoc _cap_s704;
[L6367]              havoc __ret_0_name;
[L6368]              havoc __ret_0_symbol;
[L6369]              havoc __ret_0_decimals;
[L6370]              havoc _cap_s750;
[L6371]              havoc tmpNow;
[L6372]              havoc gas;
[L6373]              assume gas > 4000000 && gas <= 8000000;
[L6374]              tmpNow := now;
[L6375]              havoc now;
[L6376]              assume now > tmpNow;
[L6377]              assume msgsender_MSG != null;
[L6378]              assume DType[msgsender_MSG] != SafeMath;
[L6379]              assume DType[msgsender_MSG] != Ownable;
[L6380]              assume DType[msgsender_MSG] != ERC20Basic;
[L6381]              assume DType[msgsender_MSG] != BasicToken;
[L6382]              assume DType[msgsender_MSG] != ERC20;
[L6383]              assume DType[msgsender_MSG] != StandardToken;
[L6384]              assume DType[msgsender_MSG] != MintableToken;
[L6385]              assume DType[msgsender_MSG] != CappedToken;
[L6386]              assume DType[msgsender_MSG] != TSTToken;
[L6387]              Alloc[msgsender_MSG] := true;
[L6388]  COND TRUE   choice == 18
[L6389]              gas := gas - 21000;
[L6390]  COND FALSE  !(gas >= 0)
[L6521]  RET         call CorralChoice_TSTToken(this);

[2020-11-25 06:42:06,080 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 06:42:06,080 INFO  L82        PathProgramCache]: Analyzing trace with hash -1720170489, now seen corresponding path program 1 times
[2020-11-25 06:42:06,081 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 06:42:06,139 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 06:42:08,493 INFO  L134       CoverageAnalysis]: Checked inductivity of 4106 backedges. 103 proven. 134 refuted. 0 times theorem prover too weak. 3869 trivial. 0 not checked.
[2020-11-25 06:42:08,493 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 06:42:08,494 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [53] total 53
[2020-11-25 06:42:08,495 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 06:42:08,495 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 54 interpolants.
[2020-11-25 06:42:08,495 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=251, Invalid=2611, Unknown=0, NotChecked=0, Total=2862
[2020-11-25 06:42:08,495 INFO  L87              Difference]: Start difference. First operand 1987 states and 2186 transitions. cyclomatic complexity: 205 Second operand 54 states.
[2020-11-25 06:42:12,093 WARN  L188               SmtUtils]: Spent 146.00 ms on a formula simplification. DAG size of input: 124 DAG size of output: 114
[2020-11-25 06:42:13,424 WARN  L188               SmtUtils]: Spent 268.00 ms on a formula simplification. DAG size of input: 174 DAG size of output: 170
[2020-11-25 06:42:19,738 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 06:42:19,739 INFO  L93              Difference]: Finished difference Result 2010 states and 2224 transitions.
[2020-11-25 06:42:19,739 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 48 states. 
[2020-11-25 06:42:19,739 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2010 states and 2224 transitions.
[2020-11-25 06:42:19,742 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 06:42:19,746 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2010 states to 2010 states and 2224 transitions.
[2020-11-25 06:42:19,746 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 637
[2020-11-25 06:42:19,746 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 637
[2020-11-25 06:42:19,746 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2010 states and 2224 transitions.
[2020-11-25 06:42:19,748 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 06:42:19,748 INFO  L728         BuchiCegarLoop]: Abstraction has 2010 states and 2224 transitions.
[2020-11-25 06:42:19,749 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2010 states and 2224 transitions.
[2020-11-25 06:42:19,757 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2010 to 1980.
[2020-11-25 06:42:19,757 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1980 states.
[2020-11-25 06:42:19,758 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1980 states to 1980 states and 2172 transitions.
[2020-11-25 06:42:19,758 INFO  L751         BuchiCegarLoop]: Abstraction has 1980 states and 2172 transitions.
[2020-11-25 06:42:19,758 INFO  L631         BuchiCegarLoop]: Abstraction has 1980 states and 2172 transitions.
[2020-11-25 06:42:19,758 INFO  L445         BuchiCegarLoop]: ======== Iteration 15============
[2020-11-25 06:42:19,758 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1980 states and 2172 transitions.
[2020-11-25 06:42:19,760 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 06:42:19,760 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 06:42:19,760 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 06:42:19,762 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [24, 24, 24, 24, 24, 24, 24, 24, 24, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 06:42:19,762 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_BasicToken0 := false;
[L2]                 call_transfer_BasicToken0 := false;
[L2]     CALL        call main();
[L6511]              assume null == 0;
[L6512]  CALL        call this := FreshRefGenerator__success();
[L2509]              havoc newRef;
[L2510]              assume Alloc[newRef] == false;
[L2511]              Alloc[newRef] := true;
[L2512]              assume newRef != null;
[L6512]  RET         call this := FreshRefGenerator__success();
[L6513]              assume now >= 0;
[L6514]              assume DType[this] == TSTToken;
[L6515]              assume msgvalue_MSG == 0;
[L6516]              gas := gas - 53000;
[L6517]  CALL        call TSTToken_TSTToken(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L1531]              havoc __exception;
[L1532]              revert := false;
[L1533]  COND FALSE  !(__exception)
[L1557]  CALL        call TSTToken_TSTToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3626]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3626]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3627]  COND FALSE  !(revert)
[L3630]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3630]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3631]  COND FALSE  !(revert)
[L3634]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3634]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3635]  COND FALSE  !(revert)
[L3638]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3638]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3639]  COND FALSE  !(revert)
[L3642]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3642]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3643]  COND FALSE  !(revert)
[L3646]  CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3275]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3275]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3276]  COND FALSE  !(revert)
[L3279]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3279]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3280]  COND FALSE  !(revert)
[L3283]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3283]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3284]  COND FALSE  !(revert)
[L3287]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3287]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3288]  COND FALSE  !(revert)
[L3291]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3291]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3292]  COND FALSE  !(revert)
[L3295]  CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3239]              assume msgsender_MSG != null;
[L3240]              Balance[this] := 0;
[L3241]              mintingFinished_MintableToken[this] := false;
[L3295]  RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3296]  COND FALSE  !(revert)
[L3646]  RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3647]  COND FALSE  !(revert)
[L3650]  CALL        call CappedToken_CappedToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3464]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3464]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3465]  COND FALSE  !(revert)
[L3468]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3468]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3469]  COND FALSE  !(revert)
[L3472]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3472]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3473]  COND FALSE  !(revert)
[L3476]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3476]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3477]  COND FALSE  !(revert)
[L3480]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3480]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3481]  COND FALSE  !(revert)
[L3484]  CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3275]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3275]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3276]  COND FALSE  !(revert)
[L3279]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3279]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3280]  COND FALSE  !(revert)
[L3283]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3283]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3284]  COND FALSE  !(revert)
[L3287]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3287]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3288]  COND FALSE  !(revert)
[L3291]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3291]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3292]  COND FALSE  !(revert)
[L3295]  CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3239]              assume msgsender_MSG != null;
[L3240]              Balance[this] := 0;
[L3241]              mintingFinished_MintableToken[this] := false;
[L3295]  RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3296]  COND FALSE  !(revert)
[L3484]  RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3485]  COND FALSE  !(revert)
[L3488]  CALL        call CappedToken_CappedToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s704);
[L3419]              assume msgsender_MSG != null;
[L3420]              Balance[this] := 0;
[L3421]              cap_CappedToken[this] := 0;
[L3423]  COND FALSE  !(!(_cap_s704 > 0))
[L3427]              cap_CappedToken[this] := _cap_s704;
[L3488]  RET         call CappedToken_CappedToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s704);
[L3489]  COND FALSE  !(revert)
[L3650]  RET         call CappedToken_CappedToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3651]  COND FALSE  !(revert)
[L3654]  CALL        call TSTToken_TSTToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3580]              assume msgsender_MSG != null;
[L3581]              Balance[this] := 0;
[L3582]              name_TSTToken[this] := 1406741980;
[L3583]              symbol_TSTToken[this] := 57413297;
[L3584]              decimals_TSTToken[this] := 18;
[L3654]  RET         call TSTToken_TSTToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3655]  COND FALSE  !(revert)
[L1557]  RET         call TSTToken_TSTToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L1558]              assume !revert && gas >= 0;
[L6517]  RET         call TSTToken_TSTToken(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L6518]              assume !revert && gas >= 0;
[L6521]  CALL        call CorralChoice_TSTToken(this);
[L6333]              havoc msgsender_MSG;
[L6334]              havoc msgvalue_MSG;
[L6335]              havoc choice;
[L6336]              havoc __ret_0_owner;
[L6337]              havoc _newOwner_s153;
[L6338]              havoc __ret_0_totalSupply;
[L6339]              havoc _owner_s298;
[L6340]              havoc __ret_0_balanceOf;
[L6341]              havoc _to_s286;
[L6342]              havoc _value_s286;
[L6343]              havoc __ret_0_transfer;
[L6344]              havoc _owner_s479;
[L6345]              havoc _spender_s479;
[L6346]              havoc __ret_0_allowance;
[L6347]              havoc _from_s435;
[L6348]              havoc _to_s435;
[L6349]              havoc _value_s435;
[L6350]              havoc __ret_0_transferFrom;
[L6351]              havoc _spender_s463;
[L6352]              havoc _value_s463;
[L6353]              havoc __ret_0_approve;
[L6354]              havoc _spender_s521;
[L6355]              havoc _addedValue_s521;
[L6356]              havoc __ret_0_increaseApproval;
[L6357]              havoc _spender_s581;
[L6358]              havoc _subtractedValue_s581;
[L6359]              havoc __ret_0_decreaseApproval;
[L6360]              havoc __ret_0_mintingFinished;
[L6361]              havoc _to_s729;
[L6362]              havoc _amount_s729;
[L6363]              havoc __ret_0_mint;
[L6364]              havoc __ret_0_finishMinting;
[L6365]              havoc __ret_0_cap;
[L6366]              havoc _cap_s704;
[L6367]              havoc __ret_0_name;
[L6368]              havoc __ret_0_symbol;
[L6369]              havoc __ret_0_decimals;
[L6370]              havoc _cap_s750;
[L6371]              havoc tmpNow;
[L6372]              havoc gas;
[L6373]              assume gas > 4000000 && gas <= 8000000;
[L6374]              tmpNow := now;
[L6375]              havoc now;
[L6376]              assume now > tmpNow;
[L6377]              assume msgsender_MSG != null;
[L6378]              assume DType[msgsender_MSG] != SafeMath;
[L6379]              assume DType[msgsender_MSG] != Ownable;
[L6380]              assume DType[msgsender_MSG] != ERC20Basic;
[L6381]              assume DType[msgsender_MSG] != BasicToken;
[L6382]              assume DType[msgsender_MSG] != ERC20;
[L6383]              assume DType[msgsender_MSG] != StandardToken;
[L6384]              assume DType[msgsender_MSG] != MintableToken;
[L6385]              assume DType[msgsender_MSG] != CappedToken;
[L6386]              assume DType[msgsender_MSG] != TSTToken;
[L6387]              Alloc[msgsender_MSG] := true;
[L6388]  COND FALSE  !(choice == 18)
[L6394]  COND FALSE  !(choice == 17)
[L6400]  COND FALSE  !(choice == 16)
[L6406]  COND FALSE  !(choice == 15)
[L6412]  COND FALSE  !(choice == 14)
[L6418]  COND FALSE  !(choice == 13)
[L6425]  COND FALSE  !(choice == 12)
[L6431]  COND TRUE   choice == 11
[L6432]              gas := gas - 21000;
[L6433]  COND TRUE   gas >= 0
[L6434]              assume _value_s435 >= 0 && _value_s435 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6435]              assume msgvalue_MSG == 0;
[L6436]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _from_s435, _to_s435, _value_s435);
[L800]               havoc __exception;
[L801]               revert := false;
[L802]   COND FALSE  !(__exception)
[L826]   CALL        call __ret_0_ := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s435, _to_s435, _value_s435);
[L3083]  COND FALSE  !(!(_value_s435 <= balances_BasicToken[this][_from_s435]))
[L3087]  COND FALSE  !(!(_value_s435 <= allowed_StandardToken[this][_from_s435][msgsender_MSG]))
[L3091]              __var_6 := null;
[L3092]  COND FALSE  !(!(_to_s435 != null))
[L3096]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s435], _value_s435);
[L2590]              assert _b_s68 <= _a_s68;
[L2591]              __ret_0_ := (_a_s68 - _b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3096]  RET         call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s435], _value_s435);
[L3097]  COND FALSE  !(revert)
[L3100]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_from_s435];
[L3101]              balances_BasicToken[this][_from_s435] := __var_7;
[L3102]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_from_s435];
[L3103]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s435], _value_s435);
[L2604]              c_s92 := (_a_s92 + _b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2605]              assert c_s92 >= _a_s92;
[L2606]              c_s92 := c_s92;
[L3103]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s435], _value_s435);
[L3104]  COND FALSE  !(revert)
[L3107]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s435];
[L3108]              balances_BasicToken[this][_to_s435] := __var_8;
[L3109]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s435];
[L3110]  CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s435][msgsender_MSG], _value_s435);
[L2590]              assert _b_s68 <= _a_s68;
[L2591]              __ret_0_ := (_a_s68 - _b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3110]  RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s435][msgsender_MSG], _value_s435);
[L3111]  COND FALSE  !(revert)
[L3114]              sum_allowed1[_from_s435] := sum_allowed1[_from_s435] - allowed_StandardToken[this][_from_s435][msgsender_MSG];
[L3115]              allowed_StandardToken[this][_from_s435][msgsender_MSG] := __var_9;
[L3116]              sum_allowed1[_from_s435] := sum_allowed1[_from_s435] + allowed_StandardToken[this][_from_s435][msgsender_MSG];
[L3117]              assert { :EventEmitted "Transfer_StandardToken" } true;
[L3118]              __ret_0_ := true;
[L826]   RET         call __ret_0_ := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s435, _to_s435, _value_s435);
[L827]               assume !revert && gas >= 0;
[L6436]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _from_s435, _to_s435, _value_s435);
[L6521]  RET         call CorralChoice_TSTToken(this);
[L6521]  CALL        call CorralChoice_TSTToken(this);
[L6333]              havoc msgsender_MSG;
[L6334]              havoc msgvalue_MSG;
[L6335]              havoc choice;
[L6336]              havoc __ret_0_owner;
[L6337]              havoc _newOwner_s153;
[L6338]              havoc __ret_0_totalSupply;
[L6339]              havoc _owner_s298;
[L6340]              havoc __ret_0_balanceOf;
[L6341]              havoc _to_s286;
[L6342]              havoc _value_s286;
[L6343]              havoc __ret_0_transfer;
[L6344]              havoc _owner_s479;
[L6345]              havoc _spender_s479;
[L6346]              havoc __ret_0_allowance;
[L6347]              havoc _from_s435;
[L6348]              havoc _to_s435;
[L6349]              havoc _value_s435;
[L6350]              havoc __ret_0_transferFrom;
[L6351]              havoc _spender_s463;
[L6352]              havoc _value_s463;
[L6353]              havoc __ret_0_approve;
[L6354]              havoc _spender_s521;
[L6355]              havoc _addedValue_s521;
[L6356]              havoc __ret_0_increaseApproval;
[L6357]              havoc _spender_s581;
[L6358]              havoc _subtractedValue_s581;
[L6359]              havoc __ret_0_decreaseApproval;
[L6360]              havoc __ret_0_mintingFinished;
[L6361]              havoc _to_s729;
[L6362]              havoc _amount_s729;
[L6363]              havoc __ret_0_mint;
[L6364]              havoc __ret_0_finishMinting;
[L6365]              havoc __ret_0_cap;
[L6366]              havoc _cap_s704;
[L6367]              havoc __ret_0_name;
[L6368]              havoc __ret_0_symbol;
[L6369]              havoc __ret_0_decimals;
[L6370]              havoc _cap_s750;
[L6371]              havoc tmpNow;
[L6372]              havoc gas;
[L6373]              assume gas > 4000000 && gas <= 8000000;
[L6374]              tmpNow := now;
[L6375]              havoc now;
[L6376]              assume now > tmpNow;
[L6377]              assume msgsender_MSG != null;
[L6378]              assume DType[msgsender_MSG] != SafeMath;
[L6379]              assume DType[msgsender_MSG] != Ownable;
[L6380]              assume DType[msgsender_MSG] != ERC20Basic;
[L6381]              assume DType[msgsender_MSG] != BasicToken;
[L6382]              assume DType[msgsender_MSG] != ERC20;
[L6383]              assume DType[msgsender_MSG] != StandardToken;
[L6384]              assume DType[msgsender_MSG] != MintableToken;
[L6385]              assume DType[msgsender_MSG] != CappedToken;
[L6386]              assume DType[msgsender_MSG] != TSTToken;
[L6387]              Alloc[msgsender_MSG] := true;
[L6388]  COND FALSE  !(choice == 18)
[L6394]  COND FALSE  !(choice == 17)
[L6400]  COND FALSE  !(choice == 16)
[L6406]  COND FALSE  !(choice == 15)
[L6412]  COND FALSE  !(choice == 14)
[L6418]  COND TRUE   choice == 13
[L6419]              gas := gas - 21000;
[L6420]  COND TRUE   gas >= 0
[L6421]              assume _value_s286 >= 0 && _value_s286 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6422]              assume msgvalue_MSG == 0;
[L6423]  CALL        call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == _to_s286 && _value_s286 <= balances_BasicToken[this][msgsender_MSG]) && _value_s286 >= 0) && _value_s286 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s286] >= 0) && balances_BasicToken[this][_to_s286] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L555]               havoc __exception;
[L556]               revert := false;
[L557]   COND FALSE  !(__exception)
[L581]   CALL        call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L2893]  COND FALSE  !(!(_value_s286 <= balances_BasicToken[this][msgsender_MSG]))
[L2897]              __var_3 := null;
[L2898]  COND FALSE  !(!(_to_s286 != null))
[L2902]  CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s286);
[L2590]              assert _b_s68 <= _a_s68;
[L2591]              __ret_0_ := (_a_s68 - _b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2902]  RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s286);
[L2903]  COND FALSE  !(revert)
[L2906]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L2907]              balances_BasicToken[this][msgsender_MSG] := __var_4;
[L2908]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L2909]  CALL        call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s286], _value_s286);
[L2604]              c_s92 := (_a_s92 + _b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2605]              assert c_s92 >= _a_s92;
[L2606]              c_s92 := c_s92;
[L2909]  RET         call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s286], _value_s286);
[L2910]  COND FALSE  !(revert)
[L2913]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s286];
[L2914]              balances_BasicToken[this][_to_s286] := __var_5;
[L2915]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s286];
[L2916]              assert { :EventEmitted "Transfer_BasicToken" } true;
[L2917]              __ret_0_ := true;
[L581]   RET         call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L582]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && name_TSTToken[this] == old(name_TSTToken[this])) && symbol_TSTToken[this] == old(symbol_TSTToken[this])) && decimals_TSTToken[this] == old(decimals_TSTToken[this])) && cap_CappedToken[this] == old(cap_CappedToken[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L6423]  RET         call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L6521]  RET         call CorralChoice_TSTToken(this);
[L6521]  CALL        call CorralChoice_TSTToken(this);
[L6333]              havoc msgsender_MSG;
[L6334]              havoc msgvalue_MSG;
[L6335]              havoc choice;
[L6336]              havoc __ret_0_owner;
[L6337]              havoc _newOwner_s153;
[L6338]              havoc __ret_0_totalSupply;
[L6339]              havoc _owner_s298;
[L6340]              havoc __ret_0_balanceOf;
[L6341]              havoc _to_s286;
[L6342]              havoc _value_s286;
[L6343]              havoc __ret_0_transfer;
[L6344]              havoc _owner_s479;
[L6345]              havoc _spender_s479;
[L6346]              havoc __ret_0_allowance;
[L6347]              havoc _from_s435;
[L6348]              havoc _to_s435;
[L6349]              havoc _value_s435;
[L6350]              havoc __ret_0_transferFrom;
[L6351]              havoc _spender_s463;
[L6352]              havoc _value_s463;
[L6353]              havoc __ret_0_approve;
[L6354]              havoc _spender_s521;
[L6355]              havoc _addedValue_s521;
[L6356]              havoc __ret_0_increaseApproval;
[L6357]              havoc _spender_s581;
[L6358]              havoc _subtractedValue_s581;
[L6359]              havoc __ret_0_decreaseApproval;
[L6360]              havoc __ret_0_mintingFinished;
[L6361]              havoc _to_s729;
[L6362]              havoc _amount_s729;
[L6363]              havoc __ret_0_mint;
[L6364]              havoc __ret_0_finishMinting;
[L6365]              havoc __ret_0_cap;
[L6366]              havoc _cap_s704;
[L6367]              havoc __ret_0_name;
[L6368]              havoc __ret_0_symbol;
[L6369]              havoc __ret_0_decimals;
[L6370]              havoc _cap_s750;
[L6371]              havoc tmpNow;
[L6372]              havoc gas;
[L6373]              assume gas > 4000000 && gas <= 8000000;
[L6374]              tmpNow := now;
[L6375]              havoc now;
[L6376]              assume now > tmpNow;
[L6377]              assume msgsender_MSG != null;
[L6378]              assume DType[msgsender_MSG] != SafeMath;
[L6379]              assume DType[msgsender_MSG] != Ownable;
[L6380]              assume DType[msgsender_MSG] != ERC20Basic;
[L6381]              assume DType[msgsender_MSG] != BasicToken;
[L6382]              assume DType[msgsender_MSG] != ERC20;
[L6383]              assume DType[msgsender_MSG] != StandardToken;
[L6384]              assume DType[msgsender_MSG] != MintableToken;
[L6385]              assume DType[msgsender_MSG] != CappedToken;
[L6386]              assume DType[msgsender_MSG] != TSTToken;
[L6387]              Alloc[msgsender_MSG] := true;
[L6388]  COND FALSE  !(choice == 18)
[L6394]  COND FALSE  !(choice == 17)
[L6400]  COND FALSE  !(choice == 16)
[L6406]  COND FALSE  !(choice == 15)
[L6412]  COND FALSE  !(choice == 14)
[L6418]  COND TRUE   choice == 13
[L6419]              gas := gas - 21000;
[L6420]  COND TRUE   gas >= 0
[L6421]              assume _value_s286 >= 0 && _value_s286 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6422]              assume msgvalue_MSG == 0;
[L6423]  CALL        call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s286 && _value_s286 <= balances_BasicToken[this][msgsender_MSG]) && _value_s286 >= 0) && _value_s286 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s286] >= 0) && balances_BasicToken[this][_to_s286] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BasicToken0 := true;
[L2]                 call_transfer_BasicToken0 := false;
[L2]                 revert := revert_hold;
[L555]               havoc __exception;
[L556]               revert := false;
[L557]   COND FALSE  !(__exception)
[L581]   CALL        call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L2893]  COND FALSE  !(!(_value_s286 <= balances_BasicToken[this][msgsender_MSG]))
[L2897]              __var_3 := null;
[L2898]  COND FALSE  !(!(_to_s286 != null))
[L2902]  CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s286);
[L2590]              assert _b_s68 <= _a_s68;
[L2591]              __ret_0_ := (_a_s68 - _b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2902]  RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s286);
[L2903]  COND FALSE  !(revert)
[L2906]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L2907]              balances_BasicToken[this][msgsender_MSG] := __var_4;
[L2908]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L2909]  CALL        call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s286], _value_s286);
[L2604]              c_s92 := (_a_s92 + _b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2605]              assert c_s92 >= _a_s92;
[L2606]              c_s92 := c_s92;
[L2909]  RET         call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s286], _value_s286);
[L2910]  COND FALSE  !(revert)
[L2913]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s286];
[L2914]              balances_BasicToken[this][_to_s286] := __var_5;
[L2915]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s286];
[L2916]              assert { :EventEmitted "Transfer_BasicToken" } true;
[L2917]              __ret_0_ := true;
[L581]   RET         call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L582]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && name_TSTToken[this] == old(name_TSTToken[this])) && symbol_TSTToken[this] == old(symbol_TSTToken[this])) && decimals_TSTToken[this] == old(decimals_TSTToken[this])) && cap_CappedToken[this] == old(cap_CappedToken[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L6423]  RET         call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L6521]  RET         call CorralChoice_TSTToken(this);

Loop:
[L6521]  CALL        call CorralChoice_TSTToken(this);
[L6333]              havoc msgsender_MSG;
[L6334]              havoc msgvalue_MSG;
[L6335]              havoc choice;
[L6336]              havoc __ret_0_owner;
[L6337]              havoc _newOwner_s153;
[L6338]              havoc __ret_0_totalSupply;
[L6339]              havoc _owner_s298;
[L6340]              havoc __ret_0_balanceOf;
[L6341]              havoc _to_s286;
[L6342]              havoc _value_s286;
[L6343]              havoc __ret_0_transfer;
[L6344]              havoc _owner_s479;
[L6345]              havoc _spender_s479;
[L6346]              havoc __ret_0_allowance;
[L6347]              havoc _from_s435;
[L6348]              havoc _to_s435;
[L6349]              havoc _value_s435;
[L6350]              havoc __ret_0_transferFrom;
[L6351]              havoc _spender_s463;
[L6352]              havoc _value_s463;
[L6353]              havoc __ret_0_approve;
[L6354]              havoc _spender_s521;
[L6355]              havoc _addedValue_s521;
[L6356]              havoc __ret_0_increaseApproval;
[L6357]              havoc _spender_s581;
[L6358]              havoc _subtractedValue_s581;
[L6359]              havoc __ret_0_decreaseApproval;
[L6360]              havoc __ret_0_mintingFinished;
[L6361]              havoc _to_s729;
[L6362]              havoc _amount_s729;
[L6363]              havoc __ret_0_mint;
[L6364]              havoc __ret_0_finishMinting;
[L6365]              havoc __ret_0_cap;
[L6366]              havoc _cap_s704;
[L6367]              havoc __ret_0_name;
[L6368]              havoc __ret_0_symbol;
[L6369]              havoc __ret_0_decimals;
[L6370]              havoc _cap_s750;
[L6371]              havoc tmpNow;
[L6372]              havoc gas;
[L6373]              assume gas > 4000000 && gas <= 8000000;
[L6374]              tmpNow := now;
[L6375]              havoc now;
[L6376]              assume now > tmpNow;
[L6377]              assume msgsender_MSG != null;
[L6378]              assume DType[msgsender_MSG] != SafeMath;
[L6379]              assume DType[msgsender_MSG] != Ownable;
[L6380]              assume DType[msgsender_MSG] != ERC20Basic;
[L6381]              assume DType[msgsender_MSG] != BasicToken;
[L6382]              assume DType[msgsender_MSG] != ERC20;
[L6383]              assume DType[msgsender_MSG] != StandardToken;
[L6384]              assume DType[msgsender_MSG] != MintableToken;
[L6385]              assume DType[msgsender_MSG] != CappedToken;
[L6386]              assume DType[msgsender_MSG] != TSTToken;
[L6387]              Alloc[msgsender_MSG] := true;
[L6388]  COND TRUE   choice == 18
[L6389]              gas := gas - 21000;
[L6390]  COND FALSE  !(gas >= 0)
[L6521]  RET         call CorralChoice_TSTToken(this);

[2020-11-25 06:42:19,766 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 06:42:19,766 INFO  L82        PathProgramCache]: Analyzing trace with hash -1424433742, now seen corresponding path program 1 times
[2020-11-25 06:42:19,767 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 06:42:19,887 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 06:42:22,605 INFO  L134       CoverageAnalysis]: Checked inductivity of 4093 backedges. 100 proven. 138 refuted. 0 times theorem prover too weak. 3855 trivial. 0 not checked.
[2020-11-25 06:42:22,605 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 06:42:22,605 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [57] total 57
[2020-11-25 06:42:22,606 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 06:42:22,606 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 58 interpolants.
[2020-11-25 06:42:22,606 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=182, Invalid=3124, Unknown=0, NotChecked=0, Total=3306
[2020-11-25 06:42:22,606 INFO  L87              Difference]: Start difference. First operand 1980 states and 2172 transitions. cyclomatic complexity: 197 Second operand 58 states.
[2020-11-25 06:42:34,839 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 06:42:34,839 INFO  L93              Difference]: Finished difference Result 2734 states and 3108 transitions.
[2020-11-25 06:42:34,839 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 64 states. 
[2020-11-25 06:42:34,840 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2734 states and 3108 transitions.
[2020-11-25 06:42:34,844 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 06:42:34,850 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2734 states to 2734 states and 3108 transitions.
[2020-11-25 06:42:34,850 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 990
[2020-11-25 06:42:34,851 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 990
[2020-11-25 06:42:34,851 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2734 states and 3108 transitions.
[2020-11-25 06:42:34,853 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 06:42:34,853 INFO  L728         BuchiCegarLoop]: Abstraction has 2734 states and 3108 transitions.
[2020-11-25 06:42:34,854 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2734 states and 3108 transitions.
[2020-11-25 06:42:34,866 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2734 to 2685.
[2020-11-25 06:42:34,866 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2685 states.
[2020-11-25 06:42:34,869 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2685 states to 2685 states and 3040 transitions.
[2020-11-25 06:42:34,869 INFO  L751         BuchiCegarLoop]: Abstraction has 2685 states and 3040 transitions.
[2020-11-25 06:42:34,869 INFO  L631         BuchiCegarLoop]: Abstraction has 2685 states and 3040 transitions.
[2020-11-25 06:42:34,869 INFO  L445         BuchiCegarLoop]: ======== Iteration 16============
[2020-11-25 06:42:34,869 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2685 states and 3040 transitions.
[2020-11-25 06:42:34,872 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 06:42:34,872 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 06:42:34,872 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 06:42:34,874 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [24, 24, 24, 24, 24, 24, 24, 24, 24, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 06:42:34,874 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_BasicToken0 := false;
[L2]                 call_transfer_BasicToken0 := false;
[L2]     CALL        call main();
[L6511]              assume null == 0;
[L6512]  CALL        call this := FreshRefGenerator__success();
[L2509]              havoc newRef;
[L2510]              assume Alloc[newRef] == false;
[L2511]              Alloc[newRef] := true;
[L2512]              assume newRef != null;
[L6512]  RET         call this := FreshRefGenerator__success();
[L6513]              assume now >= 0;
[L6514]              assume DType[this] == TSTToken;
[L6515]              assume msgvalue_MSG == 0;
[L6516]              gas := gas - 53000;
[L6517]  CALL        call TSTToken_TSTToken(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L1531]              havoc __exception;
[L1532]              revert := false;
[L1533]  COND FALSE  !(__exception)
[L1557]  CALL        call TSTToken_TSTToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3626]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3626]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3627]  COND FALSE  !(revert)
[L3630]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3630]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3631]  COND FALSE  !(revert)
[L3634]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3634]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3635]  COND FALSE  !(revert)
[L3638]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3638]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3639]  COND FALSE  !(revert)
[L3642]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3642]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3643]  COND FALSE  !(revert)
[L3646]  CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3275]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3275]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3276]  COND FALSE  !(revert)
[L3279]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3279]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3280]  COND FALSE  !(revert)
[L3283]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3283]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3284]  COND FALSE  !(revert)
[L3287]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3287]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3288]  COND FALSE  !(revert)
[L3291]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3291]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3292]  COND FALSE  !(revert)
[L3295]  CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3239]              assume msgsender_MSG != null;
[L3240]              Balance[this] := 0;
[L3241]              mintingFinished_MintableToken[this] := false;
[L3295]  RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3296]  COND FALSE  !(revert)
[L3646]  RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3647]  COND FALSE  !(revert)
[L3650]  CALL        call CappedToken_CappedToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3464]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3464]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3465]  COND FALSE  !(revert)
[L3468]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3468]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3469]  COND FALSE  !(revert)
[L3472]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3472]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3473]  COND FALSE  !(revert)
[L3476]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3476]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3477]  COND FALSE  !(revert)
[L3480]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3480]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3481]  COND FALSE  !(revert)
[L3484]  CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3275]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3275]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3276]  COND FALSE  !(revert)
[L3279]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3279]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3280]  COND FALSE  !(revert)
[L3283]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3283]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3284]  COND FALSE  !(revert)
[L3287]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3287]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3288]  COND FALSE  !(revert)
[L3291]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3291]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3292]  COND FALSE  !(revert)
[L3295]  CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3239]              assume msgsender_MSG != null;
[L3240]              Balance[this] := 0;
[L3241]              mintingFinished_MintableToken[this] := false;
[L3295]  RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3296]  COND FALSE  !(revert)
[L3484]  RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3485]  COND FALSE  !(revert)
[L3488]  CALL        call CappedToken_CappedToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s704);
[L3419]              assume msgsender_MSG != null;
[L3420]              Balance[this] := 0;
[L3421]              cap_CappedToken[this] := 0;
[L3423]  COND FALSE  !(!(_cap_s704 > 0))
[L3427]              cap_CappedToken[this] := _cap_s704;
[L3488]  RET         call CappedToken_CappedToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s704);
[L3489]  COND FALSE  !(revert)
[L3650]  RET         call CappedToken_CappedToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3651]  COND FALSE  !(revert)
[L3654]  CALL        call TSTToken_TSTToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3580]              assume msgsender_MSG != null;
[L3581]              Balance[this] := 0;
[L3582]              name_TSTToken[this] := 1406741980;
[L3583]              symbol_TSTToken[this] := 57413297;
[L3584]              decimals_TSTToken[this] := 18;
[L3654]  RET         call TSTToken_TSTToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3655]  COND FALSE  !(revert)
[L1557]  RET         call TSTToken_TSTToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L1558]              assume !revert && gas >= 0;
[L6517]  RET         call TSTToken_TSTToken(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L6518]              assume !revert && gas >= 0;
[L6521]  CALL        call CorralChoice_TSTToken(this);
[L6333]              havoc msgsender_MSG;
[L6334]              havoc msgvalue_MSG;
[L6335]              havoc choice;
[L6336]              havoc __ret_0_owner;
[L6337]              havoc _newOwner_s153;
[L6338]              havoc __ret_0_totalSupply;
[L6339]              havoc _owner_s298;
[L6340]              havoc __ret_0_balanceOf;
[L6341]              havoc _to_s286;
[L6342]              havoc _value_s286;
[L6343]              havoc __ret_0_transfer;
[L6344]              havoc _owner_s479;
[L6345]              havoc _spender_s479;
[L6346]              havoc __ret_0_allowance;
[L6347]              havoc _from_s435;
[L6348]              havoc _to_s435;
[L6349]              havoc _value_s435;
[L6350]              havoc __ret_0_transferFrom;
[L6351]              havoc _spender_s463;
[L6352]              havoc _value_s463;
[L6353]              havoc __ret_0_approve;
[L6354]              havoc _spender_s521;
[L6355]              havoc _addedValue_s521;
[L6356]              havoc __ret_0_increaseApproval;
[L6357]              havoc _spender_s581;
[L6358]              havoc _subtractedValue_s581;
[L6359]              havoc __ret_0_decreaseApproval;
[L6360]              havoc __ret_0_mintingFinished;
[L6361]              havoc _to_s729;
[L6362]              havoc _amount_s729;
[L6363]              havoc __ret_0_mint;
[L6364]              havoc __ret_0_finishMinting;
[L6365]              havoc __ret_0_cap;
[L6366]              havoc _cap_s704;
[L6367]              havoc __ret_0_name;
[L6368]              havoc __ret_0_symbol;
[L6369]              havoc __ret_0_decimals;
[L6370]              havoc _cap_s750;
[L6371]              havoc tmpNow;
[L6372]              havoc gas;
[L6373]              assume gas > 4000000 && gas <= 8000000;
[L6374]              tmpNow := now;
[L6375]              havoc now;
[L6376]              assume now > tmpNow;
[L6377]              assume msgsender_MSG != null;
[L6378]              assume DType[msgsender_MSG] != SafeMath;
[L6379]              assume DType[msgsender_MSG] != Ownable;
[L6380]              assume DType[msgsender_MSG] != ERC20Basic;
[L6381]              assume DType[msgsender_MSG] != BasicToken;
[L6382]              assume DType[msgsender_MSG] != ERC20;
[L6383]              assume DType[msgsender_MSG] != StandardToken;
[L6384]              assume DType[msgsender_MSG] != MintableToken;
[L6385]              assume DType[msgsender_MSG] != CappedToken;
[L6386]              assume DType[msgsender_MSG] != TSTToken;
[L6387]              Alloc[msgsender_MSG] := true;
[L6388]  COND FALSE  !(choice == 18)
[L6394]  COND FALSE  !(choice == 17)
[L6400]  COND FALSE  !(choice == 16)
[L6406]  COND FALSE  !(choice == 15)
[L6412]  COND FALSE  !(choice == 14)
[L6418]  COND FALSE  !(choice == 13)
[L6425]  COND FALSE  !(choice == 12)
[L6431]  COND TRUE   choice == 11
[L6432]              gas := gas - 21000;
[L6433]  COND TRUE   gas >= 0
[L6434]              assume _value_s435 >= 0 && _value_s435 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6435]              assume msgvalue_MSG == 0;
[L6436]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _from_s435, _to_s435, _value_s435);
[L800]               havoc __exception;
[L801]               revert := false;
[L802]   COND FALSE  !(__exception)
[L826]   CALL        call __ret_0_ := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s435, _to_s435, _value_s435);
[L3083]  COND FALSE  !(!(_value_s435 <= balances_BasicToken[this][_from_s435]))
[L3087]  COND FALSE  !(!(_value_s435 <= allowed_StandardToken[this][_from_s435][msgsender_MSG]))
[L3091]              __var_6 := null;
[L3092]  COND FALSE  !(!(_to_s435 != null))
[L3096]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s435], _value_s435);
[L2590]              assert _b_s68 <= _a_s68;
[L2591]              __ret_0_ := (_a_s68 - _b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3096]  RET         call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s435], _value_s435);
[L3097]  COND FALSE  !(revert)
[L3100]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_from_s435];
[L3101]              balances_BasicToken[this][_from_s435] := __var_7;
[L3102]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_from_s435];
[L3103]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s435], _value_s435);
[L2604]              c_s92 := (_a_s92 + _b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2605]              assert c_s92 >= _a_s92;
[L2606]              c_s92 := c_s92;
[L3103]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s435], _value_s435);
[L3104]  COND FALSE  !(revert)
[L3107]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s435];
[L3108]              balances_BasicToken[this][_to_s435] := __var_8;
[L3109]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s435];
[L3110]  CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s435][msgsender_MSG], _value_s435);
[L2590]              assert _b_s68 <= _a_s68;
[L2591]              __ret_0_ := (_a_s68 - _b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3110]  RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s435][msgsender_MSG], _value_s435);
[L3111]  COND FALSE  !(revert)
[L3114]              sum_allowed1[_from_s435] := sum_allowed1[_from_s435] - allowed_StandardToken[this][_from_s435][msgsender_MSG];
[L3115]              allowed_StandardToken[this][_from_s435][msgsender_MSG] := __var_9;
[L3116]              sum_allowed1[_from_s435] := sum_allowed1[_from_s435] + allowed_StandardToken[this][_from_s435][msgsender_MSG];
[L3117]              assert { :EventEmitted "Transfer_StandardToken" } true;
[L3118]              __ret_0_ := true;
[L826]   RET         call __ret_0_ := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s435, _to_s435, _value_s435);
[L827]               assume !revert && gas >= 0;
[L6436]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _from_s435, _to_s435, _value_s435);
[L6521]  RET         call CorralChoice_TSTToken(this);
[L6521]  CALL        call CorralChoice_TSTToken(this);
[L6333]              havoc msgsender_MSG;
[L6334]              havoc msgvalue_MSG;
[L6335]              havoc choice;
[L6336]              havoc __ret_0_owner;
[L6337]              havoc _newOwner_s153;
[L6338]              havoc __ret_0_totalSupply;
[L6339]              havoc _owner_s298;
[L6340]              havoc __ret_0_balanceOf;
[L6341]              havoc _to_s286;
[L6342]              havoc _value_s286;
[L6343]              havoc __ret_0_transfer;
[L6344]              havoc _owner_s479;
[L6345]              havoc _spender_s479;
[L6346]              havoc __ret_0_allowance;
[L6347]              havoc _from_s435;
[L6348]              havoc _to_s435;
[L6349]              havoc _value_s435;
[L6350]              havoc __ret_0_transferFrom;
[L6351]              havoc _spender_s463;
[L6352]              havoc _value_s463;
[L6353]              havoc __ret_0_approve;
[L6354]              havoc _spender_s521;
[L6355]              havoc _addedValue_s521;
[L6356]              havoc __ret_0_increaseApproval;
[L6357]              havoc _spender_s581;
[L6358]              havoc _subtractedValue_s581;
[L6359]              havoc __ret_0_decreaseApproval;
[L6360]              havoc __ret_0_mintingFinished;
[L6361]              havoc _to_s729;
[L6362]              havoc _amount_s729;
[L6363]              havoc __ret_0_mint;
[L6364]              havoc __ret_0_finishMinting;
[L6365]              havoc __ret_0_cap;
[L6366]              havoc _cap_s704;
[L6367]              havoc __ret_0_name;
[L6368]              havoc __ret_0_symbol;
[L6369]              havoc __ret_0_decimals;
[L6370]              havoc _cap_s750;
[L6371]              havoc tmpNow;
[L6372]              havoc gas;
[L6373]              assume gas > 4000000 && gas <= 8000000;
[L6374]              tmpNow := now;
[L6375]              havoc now;
[L6376]              assume now > tmpNow;
[L6377]              assume msgsender_MSG != null;
[L6378]              assume DType[msgsender_MSG] != SafeMath;
[L6379]              assume DType[msgsender_MSG] != Ownable;
[L6380]              assume DType[msgsender_MSG] != ERC20Basic;
[L6381]              assume DType[msgsender_MSG] != BasicToken;
[L6382]              assume DType[msgsender_MSG] != ERC20;
[L6383]              assume DType[msgsender_MSG] != StandardToken;
[L6384]              assume DType[msgsender_MSG] != MintableToken;
[L6385]              assume DType[msgsender_MSG] != CappedToken;
[L6386]              assume DType[msgsender_MSG] != TSTToken;
[L6387]              Alloc[msgsender_MSG] := true;
[L6388]  COND FALSE  !(choice == 18)
[L6394]  COND FALSE  !(choice == 17)
[L6400]  COND FALSE  !(choice == 16)
[L6406]  COND FALSE  !(choice == 15)
[L6412]  COND FALSE  !(choice == 14)
[L6418]  COND FALSE  !(choice == 13)
[L6425]  COND FALSE  !(choice == 12)
[L6431]  COND FALSE  !(choice == 11)
[L6438]  COND FALSE  !(choice == 10)
[L6445]  COND FALSE  !(choice == 9)
[L6452]  COND FALSE  !(choice == 8)
[L6459]  COND FALSE  !(choice == 7)
[L6465]  COND TRUE   choice == 6
[L6466]              gas := gas - 21000;
[L6467]  COND TRUE   gas >= 0
[L6468]              assume _amount_s729 >= 0 && _amount_s729 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6469]              assume msgvalue_MSG == 0;
[L6470]  CALL        call __ret_0_mint := mint~address~uint256_CappedToken(this, msgsender_MSG, msgvalue_MSG, _to_s729, _amount_s729);
[L1399]              havoc __exception;
[L1400]              revert := false;
[L1401]  COND FALSE  !(__exception)
[L1425]  CALL        call __ret_0_ := mint~address~uint256_CappedToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s729, _amount_s729);
[L3529]  CALL        call __var_14 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s729);
[L2604]              c_s92 := (_a_s92 + _b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2605]              assert c_s92 >= _a_s92;
[L2606]              c_s92 := c_s92;
[L3529]  RET         call __var_14 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s729);
[L3530]  COND FALSE  !(revert)
[L3533]  COND FALSE  !(!(__var_14 <= cap_CappedToken[this]))
[L3537]  COND TRUE   DType[this] == TSTToken
[L3538]  CALL        call __var_15 := mint~address~uint256_MintableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s729, _amount_s729);
[L3333]  CALL        call hasMintPermission_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5344]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3333]  RET         call hasMintPermission_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3334]  COND FALSE  !(revert)
[L3337]  CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5328]  COND FALSE  !(!!mintingFinished_MintableToken[this])
[L3337]  RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3338]  COND FALSE  !(revert)
[L3341]  CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s664);
[L2604]              c_s92 := (_a_s92 + _b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2605]              assert c_s92 >= _a_s92;
[L2606]              c_s92 := c_s92;
[L3341]  RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s664);
[L3342]  COND FALSE  !(revert)
[L3345]              totalSupply__BasicToken[this] := __var_12;
[L3346]  CALL        call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s664], _amount_s664);
[L2604]              c_s92 := (_a_s92 + _b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2605]              assert c_s92 >= _a_s92;
[L2606]              c_s92 := c_s92;
[L3346]  RET         call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s664], _amount_s664);
[L3347]  COND FALSE  !(revert)
[L3350]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s664];
[L3351]              balances_BasicToken[this][_to_s664] := __var_13;
[L3352]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s664];
[L3353]              assert { :EventEmitted "Mint_MintableToken" } true;
[L3354]              assert { :EventEmitted "Transfer_MintableToken" } true;
[L3355]              __ret_0_ := true;
[L3538]  RET         call __var_15 := mint~address~uint256_MintableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s729, _amount_s729);
[L3539]  COND FALSE  !(revert)
[L3550]              __ret_0_ := __var_15;
[L1425]  RET         call __ret_0_ := mint~address~uint256_CappedToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s729, _amount_s729);
[L1426]              assume !revert && gas >= 0;
[L6470]  RET         call __ret_0_mint := mint~address~uint256_CappedToken(this, msgsender_MSG, msgvalue_MSG, _to_s729, _amount_s729);
[L6521]  RET         call CorralChoice_TSTToken(this);
[L6521]  CALL        call CorralChoice_TSTToken(this);
[L6333]              havoc msgsender_MSG;
[L6334]              havoc msgvalue_MSG;
[L6335]              havoc choice;
[L6336]              havoc __ret_0_owner;
[L6337]              havoc _newOwner_s153;
[L6338]              havoc __ret_0_totalSupply;
[L6339]              havoc _owner_s298;
[L6340]              havoc __ret_0_balanceOf;
[L6341]              havoc _to_s286;
[L6342]              havoc _value_s286;
[L6343]              havoc __ret_0_transfer;
[L6344]              havoc _owner_s479;
[L6345]              havoc _spender_s479;
[L6346]              havoc __ret_0_allowance;
[L6347]              havoc _from_s435;
[L6348]              havoc _to_s435;
[L6349]              havoc _value_s435;
[L6350]              havoc __ret_0_transferFrom;
[L6351]              havoc _spender_s463;
[L6352]              havoc _value_s463;
[L6353]              havoc __ret_0_approve;
[L6354]              havoc _spender_s521;
[L6355]              havoc _addedValue_s521;
[L6356]              havoc __ret_0_increaseApproval;
[L6357]              havoc _spender_s581;
[L6358]              havoc _subtractedValue_s581;
[L6359]              havoc __ret_0_decreaseApproval;
[L6360]              havoc __ret_0_mintingFinished;
[L6361]              havoc _to_s729;
[L6362]              havoc _amount_s729;
[L6363]              havoc __ret_0_mint;
[L6364]              havoc __ret_0_finishMinting;
[L6365]              havoc __ret_0_cap;
[L6366]              havoc _cap_s704;
[L6367]              havoc __ret_0_name;
[L6368]              havoc __ret_0_symbol;
[L6369]              havoc __ret_0_decimals;
[L6370]              havoc _cap_s750;
[L6371]              havoc tmpNow;
[L6372]              havoc gas;
[L6373]              assume gas > 4000000 && gas <= 8000000;
[L6374]              tmpNow := now;
[L6375]              havoc now;
[L6376]              assume now > tmpNow;
[L6377]              assume msgsender_MSG != null;
[L6378]              assume DType[msgsender_MSG] != SafeMath;
[L6379]              assume DType[msgsender_MSG] != Ownable;
[L6380]              assume DType[msgsender_MSG] != ERC20Basic;
[L6381]              assume DType[msgsender_MSG] != BasicToken;
[L6382]              assume DType[msgsender_MSG] != ERC20;
[L6383]              assume DType[msgsender_MSG] != StandardToken;
[L6384]              assume DType[msgsender_MSG] != MintableToken;
[L6385]              assume DType[msgsender_MSG] != CappedToken;
[L6386]              assume DType[msgsender_MSG] != TSTToken;
[L6387]              Alloc[msgsender_MSG] := true;
[L6388]  COND FALSE  !(choice == 18)
[L6394]  COND FALSE  !(choice == 17)
[L6400]  COND FALSE  !(choice == 16)
[L6406]  COND FALSE  !(choice == 15)
[L6412]  COND FALSE  !(choice == 14)
[L6418]  COND TRUE   choice == 13
[L6419]              gas := gas - 21000;
[L6420]  COND TRUE   gas >= 0
[L6421]              assume _value_s286 >= 0 && _value_s286 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6422]              assume msgvalue_MSG == 0;
[L6423]  CALL        call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s286 && _value_s286 <= balances_BasicToken[this][msgsender_MSG]) && _value_s286 >= 0) && _value_s286 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s286] >= 0) && balances_BasicToken[this][_to_s286] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BasicToken0 := true;
[L2]                 call_transfer_BasicToken0 := false;
[L2]                 revert := revert_hold;
[L555]               havoc __exception;
[L556]               revert := false;
[L557]   COND FALSE  !(__exception)
[L581]   CALL        call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L2893]  COND FALSE  !(!(_value_s286 <= balances_BasicToken[this][msgsender_MSG]))
[L2897]              __var_3 := null;
[L2898]  COND FALSE  !(!(_to_s286 != null))
[L2902]  CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s286);
[L2590]              assert _b_s68 <= _a_s68;
[L2591]              __ret_0_ := (_a_s68 - _b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2902]  RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s286);
[L2903]  COND FALSE  !(revert)
[L2906]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L2907]              balances_BasicToken[this][msgsender_MSG] := __var_4;
[L2908]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L2909]  CALL        call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s286], _value_s286);
[L2604]              c_s92 := (_a_s92 + _b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2605]              assert c_s92 >= _a_s92;
[L2606]              c_s92 := c_s92;
[L2909]  RET         call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s286], _value_s286);
[L2910]  COND FALSE  !(revert)
[L2913]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s286];
[L2914]              balances_BasicToken[this][_to_s286] := __var_5;
[L2915]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s286];
[L2916]              assert { :EventEmitted "Transfer_BasicToken" } true;
[L2917]              __ret_0_ := true;
[L581]   RET         call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L582]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && name_TSTToken[this] == old(name_TSTToken[this])) && symbol_TSTToken[this] == old(symbol_TSTToken[this])) && decimals_TSTToken[this] == old(decimals_TSTToken[this])) && cap_CappedToken[this] == old(cap_CappedToken[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L6423]  RET         call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L6521]  RET         call CorralChoice_TSTToken(this);

Loop:
[L6521]  CALL        call CorralChoice_TSTToken(this);
[L6333]              havoc msgsender_MSG;
[L6334]              havoc msgvalue_MSG;
[L6335]              havoc choice;
[L6336]              havoc __ret_0_owner;
[L6337]              havoc _newOwner_s153;
[L6338]              havoc __ret_0_totalSupply;
[L6339]              havoc _owner_s298;
[L6340]              havoc __ret_0_balanceOf;
[L6341]              havoc _to_s286;
[L6342]              havoc _value_s286;
[L6343]              havoc __ret_0_transfer;
[L6344]              havoc _owner_s479;
[L6345]              havoc _spender_s479;
[L6346]              havoc __ret_0_allowance;
[L6347]              havoc _from_s435;
[L6348]              havoc _to_s435;
[L6349]              havoc _value_s435;
[L6350]              havoc __ret_0_transferFrom;
[L6351]              havoc _spender_s463;
[L6352]              havoc _value_s463;
[L6353]              havoc __ret_0_approve;
[L6354]              havoc _spender_s521;
[L6355]              havoc _addedValue_s521;
[L6356]              havoc __ret_0_increaseApproval;
[L6357]              havoc _spender_s581;
[L6358]              havoc _subtractedValue_s581;
[L6359]              havoc __ret_0_decreaseApproval;
[L6360]              havoc __ret_0_mintingFinished;
[L6361]              havoc _to_s729;
[L6362]              havoc _amount_s729;
[L6363]              havoc __ret_0_mint;
[L6364]              havoc __ret_0_finishMinting;
[L6365]              havoc __ret_0_cap;
[L6366]              havoc _cap_s704;
[L6367]              havoc __ret_0_name;
[L6368]              havoc __ret_0_symbol;
[L6369]              havoc __ret_0_decimals;
[L6370]              havoc _cap_s750;
[L6371]              havoc tmpNow;
[L6372]              havoc gas;
[L6373]              assume gas > 4000000 && gas <= 8000000;
[L6374]              tmpNow := now;
[L6375]              havoc now;
[L6376]              assume now > tmpNow;
[L6377]              assume msgsender_MSG != null;
[L6378]              assume DType[msgsender_MSG] != SafeMath;
[L6379]              assume DType[msgsender_MSG] != Ownable;
[L6380]              assume DType[msgsender_MSG] != ERC20Basic;
[L6381]              assume DType[msgsender_MSG] != BasicToken;
[L6382]              assume DType[msgsender_MSG] != ERC20;
[L6383]              assume DType[msgsender_MSG] != StandardToken;
[L6384]              assume DType[msgsender_MSG] != MintableToken;
[L6385]              assume DType[msgsender_MSG] != CappedToken;
[L6386]              assume DType[msgsender_MSG] != TSTToken;
[L6387]              Alloc[msgsender_MSG] := true;
[L6388]  COND TRUE   choice == 18
[L6389]              gas := gas - 21000;
[L6390]  COND FALSE  !(gas >= 0)
[L6521]  RET         call CorralChoice_TSTToken(this);

[2020-11-25 06:42:34,879 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 06:42:34,879 INFO  L82        PathProgramCache]: Analyzing trace with hash 1972028217, now seen corresponding path program 1 times
[2020-11-25 06:42:34,880 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 06:42:34,969 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
Received shutdown request...
[2020-11-25 06:56:32,114 FATAL L265        ToolchainWalker]: An unrecoverable error occured during an interaction with an SMT solver:
de.uni_freiburg.informatik.ultimate.logic.SMTLIBException: Timeout exceeded
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator$IntegerInterpolator.interpolate(Interpolator.java:1432)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator$MixedLAInterpolator.convert(Interpolator.java:1288)
	at de.uni_freiburg.informatik.ultimate.logic.TermTransformer.cacheConvert(TermTransformer.java:131)
	at de.uni_freiburg.informatik.ultimate.logic.TermTransformer.access$0(TermTransformer.java:127)
	at de.uni_freiburg.informatik.ultimate.logic.TermTransformer$Convert.walk(TermTransformer.java:79)
	at de.uni_freiburg.informatik.ultimate.logic.NonRecursive.run(NonRecursive.java:122)
	at de.uni_freiburg.informatik.ultimate.logic.NonRecursive.run(NonRecursive.java:113)
	at de.uni_freiburg.informatik.ultimate.logic.TermTransformer.transform(TermTransformer.java:253)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator.mixedPivotLA(Interpolator.java:1478)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator.combine(Interpolator.java:359)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator.access$2(Interpolator.java:328)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator$CombineInterpolants.walk(Interpolator.java:153)
	at de.uni_freiburg.informatik.ultimate.logic.NonRecursive.run(NonRecursive.java:122)
	at de.uni_freiburg.informatik.ultimate.logic.NonRecursive.run(NonRecursive.java:113)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator.interpolate(Interpolator.java:220)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator.getInterpolants(Interpolator.java:201)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.smtlib2.SMTInterpol.getInterpolants(SMTInterpol.java:919)
	at de.uni_freiburg.informatik.ultimate.modelcheckerutils.smt.managedscript.ManagedScript.getInterpolants(ManagedScript.java:200)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.NestedInterpolantsBuilder.computeCraigInterpolants(NestedInterpolantsBuilder.java:303)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.NestedInterpolantsBuilder.<init>(NestedInterpolantsBuilder.java:167)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.NestedInterpolantsBuilder.<init>(NestedInterpolantsBuilder.java:182)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.InterpolatingTraceCheckCraig.computeInterpolantsTree(InterpolatingTraceCheckCraig.java:271)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.InterpolatingTraceCheckCraig.computeInterpolants(InterpolatingTraceCheckCraig.java:207)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.InterpolatingTraceCheckCraig.<init>(InterpolatingTraceCheckCraig.java:109)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.TraceCheckConstructor.constructCraig(TraceCheckConstructor.java:211)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.TraceCheckConstructor.constructTraceCheck(TraceCheckConstructor.java:183)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.TraceCheckConstructor.get(TraceCheckConstructor.java:165)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.FixedRefinementStrategy.getTraceCheck(FixedRefinementStrategy.java:134)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.BaseRefinementStrategy.checkFeasibility(BaseRefinementStrategy.java:223)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.BaseRefinementStrategy.executeStrategy(BaseRefinementStrategy.java:197)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.TraceAbstractionRefinementEngine.<init>(TraceAbstractionRefinementEngine.java:70)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck$LassoCheckResult.checkFeasibilityAndComputeInterpolants(LassoCheck.java:1126)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck$LassoCheckResult.checkStemFeasibility(LassoCheck.java:1080)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck$LassoCheckResult.<init>(LassoCheck.java:994)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck.<init>(LassoCheck.java:276)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiCegarLoop.iterate(BuchiCegarLoop.java:479)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver.doTerminationAnalysis(BuchiAutomizerObserver.java:153)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver.finish(BuchiAutomizerObserver.java:413)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.PluginConnector.runObserver(PluginConnector.java:168)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.PluginConnector.runTool(PluginConnector.java:151)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.PluginConnector.run(PluginConnector.java:128)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.executePluginConnector(ToolchainWalker.java:232)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.processPlugin(ToolchainWalker.java:226)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.walkUnprotected(ToolchainWalker.java:142)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.walk(ToolchainWalker.java:104)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainManager$Toolchain.processToolchain(ToolchainManager.java:317)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.toolchain.DefaultToolchainJob.run(DefaultToolchainJob.java:145)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)
[2020-11-25 06:56:32,115 INFO  L168              Benchmark]: Toolchain (without parser) took 898516.39 ms. Allocated memory was 1.0 GB in the beginning and 6.6 GB in the end (delta: 5.6 GB). Free memory was 929.8 MB in the beginning and 2.7 GB in the end (delta: -1.8 GB). Peak memory consumption was 6.1 GB. Max. memory is 15.3 GB.
[2020-11-25 06:56:32,116 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.17 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 06:56:32,116 INFO  L168              Benchmark]: Boogie Preprocessor took 131.69 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 919.1 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 06:56:32,116 INFO  L168              Benchmark]: UtopiaSpecLang took 76.28 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 908.4 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 06:56:32,116 INFO  L168              Benchmark]: Boogie Printer took 22.22 ms. Allocated memory is still 1.0 GB. Free memory was 908.4 MB in the beginning and 903.0 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 06:56:32,116 INFO  L168              Benchmark]: RCFGBuilder took 1018.54 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 66.6 MB). Free memory was 903.0 MB in the beginning and 994.0 MB in the end (delta: -91.0 MB). Peak memory consumption was 190.4 MB. Max. memory is 15.3 GB.
[2020-11-25 06:56:32,117 INFO  L168              Benchmark]: UtopiaLTL2Aut took 27.56 ms. Allocated memory is still 1.1 GB. Free memory was 994.0 MB in the beginning and 990.5 MB in the end (delta: 3.5 MB). Peak memory consumption was 3.5 MB. Max. memory is 15.3 GB.
[2020-11-25 06:56:32,117 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1886.86 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 157.8 MB). Free memory was 990.5 MB in the beginning and 894.1 MB in the end (delta: 96.4 MB). Peak memory consumption was 508.2 MB. Max. memory is 15.3 GB.
[2020-11-25 06:56:32,118 INFO  L168              Benchmark]: BlockEncodingV2 took 177.28 ms. Allocated memory is still 1.3 GB. Free memory was 894.1 MB in the beginning and 792.9 MB in the end (delta: 101.2 MB). Peak memory consumption was 101.2 MB. Max. memory is 15.3 GB.
[2020-11-25 06:56:32,118 INFO  L168              Benchmark]: BuchiAutomizer took 895172.89 ms. Allocated memory was 1.3 GB in the beginning and 6.6 GB in the end (delta: 5.4 GB). Free memory was 792.9 MB in the beginning and 2.7 GB in the end (delta: -1.9 GB). Peak memory consumption was 5.8 GB. Max. memory is 15.3 GB.
[2020-11-25 06:56:32,121 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    5816 locations, 10620 edges
  - StatisticsResult: Encoded RCFG
    5748 locations, 10448 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.17 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 131.69 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 919.1 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 76.28 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 908.4 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 22.22 ms. Allocated memory is still 1.0 GB. Free memory was 908.4 MB in the beginning and 903.0 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 1018.54 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 66.6 MB). Free memory was 903.0 MB in the beginning and 994.0 MB in the end (delta: -91.0 MB). Peak memory consumption was 190.4 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 27.56 ms. Allocated memory is still 1.1 GB. Free memory was 994.0 MB in the beginning and 990.5 MB in the end (delta: 3.5 MB). Peak memory consumption was 3.5 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1886.86 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 157.8 MB). Free memory was 990.5 MB in the beginning and 894.1 MB in the end (delta: 96.4 MB). Peak memory consumption was 508.2 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 177.28 ms. Allocated memory is still 1.3 GB. Free memory was 894.1 MB in the beginning and 792.9 MB in the end (delta: 101.2 MB). Peak memory consumption was 101.2 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 895172.89 ms. Allocated memory was 1.3 GB in the beginning and 6.6 GB in the end (delta: 5.4 GB). Free memory was 792.9 MB in the beginning and 2.7 GB in the end (delta: -1.9 GB). Peak memory consumption was 5.8 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    2302 locations, 3215 edges
  - StatisticsResult: BuchiProgram size
    5816 locations, 10620 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer:
  - ExceptionOrErrorResult: SMTLIBException: Timeout exceeded
    de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer: SMTLIBException: Timeout exceeded: de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator$IntegerInterpolator.interpolate(Interpolator.java:1432)
RESULT: Ultimate could not prove your program: Toolchain returned no result.
Completed graceful shutdown
