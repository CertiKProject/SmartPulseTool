This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 14:00:41,535 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 14:00:41,537 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 14:00:41,547 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 14:00:41,547 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 14:00:41,548 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 14:00:41,549 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 14:00:41,550 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 14:00:41,552 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 14:00:41,552 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 14:00:41,553 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 14:00:41,553 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 14:00:41,554 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 14:00:41,554 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 14:00:41,555 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 14:00:41,556 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 14:00:41,556 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 14:00:41,558 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 14:00:41,559 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 14:00:41,560 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 14:00:41,561 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 14:00:41,561 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 14:00:41,563 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 14:00:41,563 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 14:00:41,563 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 14:00:41,564 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 14:00:41,564 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 14:00:41,565 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 14:00:41,565 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 14:00:41,565 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 14:00:41,566 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 14:00:41,566 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 14:00:41,567 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 14:00:41,567 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 14:00:41,568 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 14:00:41,568 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 14:00:41,568 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 14:00:41,568 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 14:00:41,569 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 14:00:41,569 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 14:00:41,570 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 14:00:41,570 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 14:00:41,578 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 14:00:41,578 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 14:00:41,579 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 14:00:41,579 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 14:00:41,579 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 14:00:41,579 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 14:00:41,579 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 14:00:41,579 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 14:00:41,579 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 14:00:41,579 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 14:00:41,580 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 14:00:41,580 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 14:00:41,580 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 14:00:41,580 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 14:00:41,580 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 14:00:41,580 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 14:00:41,580 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 14:00:41,580 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 14:00:41,580 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 14:00:41,580 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 14:00:41,581 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 14:00:41,581 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 14:00:41,581 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 14:00:41,581 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 14:00:41,581 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 14:00:41,581 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 14:00:41,604 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 14:00:41,616 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 14:00:41,619 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 14:00:41,620 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 14:00:41,620 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 14:00:41,621 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transfer-self.bpl
[2020-11-25 14:00:41,621 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transfer-self.bpl'
[2020-11-25 14:00:41,726 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 14:00:41,727 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 14:00:41,728 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 14:00:41,728 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 14:00:41,728 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 14:00:41,744 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:00:41" (1/1) ...
[2020-11-25 14:00:41,746 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:00:41" (1/1) ...
[2020-11-25 14:00:41,782 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:00:41" (1/1) ...
[2020-11-25 14:00:41,783 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:00:41" (1/1) ...
[2020-11-25 14:00:41,813 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:00:41" (1/1) ...
[2020-11-25 14:00:41,826 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:00:41" (1/1) ...
[2020-11-25 14:00:41,837 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:00:41" (1/1) ...
[2020-11-25 14:00:41,852 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 14:00:41,852 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 14:00:41,853 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 14:00:41,855 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 14:00:41,859 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:00:41" (1/1) ...
[2020-11-25 14:00:41,880 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(DkargoToken.transfer(to, value), msg.sender == to && value <= _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(DkargoToken.transfer(to, value), return == true && _supply_ERC20[this] == old(_supply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this] == old(_allowances_ERC20[this]) && _name_DkargoToken[this] == old(_name_DkargoToken[this]) && _symbol_DkargoToken[this] == old(_symbol_DkargoToken[this]) && _dkargoPrefix_DkargoPrefix[this] == old(_dkargoPrefix_DkargoPrefix[this]) && _infcs_ERC165[this] == old(_infcs_ERC165[this]) && _slist_AddressChain[this] == old(_slist_AddressChain[this]) && _owner_Ownership[this] == old(_owner_Ownership[this]))))
[2020-11-25 14:00:41,885 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(DkargoToken.transfer(to, value), msg.sender == to && value <= _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(DkargoToken.transfer(to, value), return == true && _supply_ERC20[this] == old(_supply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this] == old(_allowances_ERC20[this]) && _name_DkargoToken[this] == old(_name_DkargoToken[this]) && _symbol_DkargoToken[this] == old(_symbol_DkargoToken[this]) && _dkargoPrefix_DkargoPrefix[this] == old(_dkargoPrefix_DkargoPrefix[this]) && _infcs_ERC165[this] == old(_infcs_ERC165[this]) && _slist_AddressChain[this] == old(_slist_AddressChain[this]) && _owner_Ownership[this] == old(_owner_Ownership[this]))))
[2020-11-25 14:00:41,893 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(DkargoToken.transfer(to, value), msg.sender == to && value <= _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(DkargoToken.transfer(to, value), return == true && _supply_ERC20[this] == old(_supply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this] == old(_allowances_ERC20[this]) && _name_DkargoToken[this] == old(_name_DkargoToken[this]) && _symbol_DkargoToken[this] == old(_symbol_DkargoToken[this]) && _dkargoPrefix_DkargoPrefix[this] == old(_dkargoPrefix_DkargoPrefix[this]) && _infcs_ERC165[this] == old(_infcs_ERC165[this]) && _slist_AddressChain[this] == old(_slist_AddressChain[this]) && _owner_Ownership[this] == old(_owner_Ownership[this]))))
[2020-11-25 14:00:41,903 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( msg.sender==to_s1257 && value_s1257<=_balances_ERC20[this][msg.sender] ) && value_s1257>=0 ) && value_s1257<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][to_s1257]>=0 ) && _balances_ERC20[this][to_s1257]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][msg.sender]>=0 ) && _balances_ERC20[this][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>],IdentifierExpression[to_s1257,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>]],BinaryExpression[COMPLEQ,IdentifierExpression[value_s1257,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>]]]]],BinaryExpression[COMPGEQ,IdentifierExpression[value_s1257,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[value_s1257,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>]]],[IdentifierExpression[to_s1257,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>]]],[IdentifierExpression[to_s1257,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 14:00:41,906 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( __ret_0_==true && _supply_ERC20[this]==( old(_supply_ERC20[this]) ) ) && _balances_ERC20[this]==( old(_balances_ERC20[this]) ) ) && _allowances_ERC20[this]==( old(_allowances_ERC20[this]) ) ) && _name_DkargoToken[this]==( old(_name_DkargoToken[this]) ) ) && _symbol_DkargoToken[this]==( old(_symbol_DkargoToken[this]) ) ) && _dkargoPrefix_DkargoPrefix[this]==( old(_dkargoPrefix_DkargoPrefix[this]) ) ) && _infcs_ERC165[this]==( old(_infcs_ERC165[this]) ) ) && _slist_AddressChain[this]==( old(_slist_AddressChain[this]) ) ) && _owner_Ownership[this]==( old(_owner_Ownership[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[__ret_0_,<IMPLEMENTATION_OUTPARAM,transfer~address~uint256_DkargoToken>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_supply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_supply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_name_DkargoToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_name_DkargoToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_symbol_DkargoToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_symbol_DkargoToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_dkargoPrefix_DkargoPrefix,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_dkargoPrefix_DkargoPrefix,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_infcs_ERC165,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_infcs_ERC165,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_slist_AddressChain,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_slist_AddressChain,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_owner_Ownership,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_owner_Ownership,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>]]]]]]
[2020-11-25 14:00:41,912 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(DkargoToken.transfer(to, value), msg.sender == to && value <= _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(DkargoToken.transfer(to, value), return == true && _supply_ERC20[this] == old(_supply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this] == old(_allowances_ERC20[this]) && _name_DkargoToken[this] == old(_name_DkargoToken[this]) && _symbol_DkargoToken[this] == old(_symbol_DkargoToken[this]) && _dkargoPrefix_DkargoPrefix[this] == old(_dkargoPrefix_DkargoPrefix[this]) && _infcs_ERC165[this] == old(_infcs_ERC165[this]) && _slist_AddressChain[this] == old(_slist_AddressChain[this]) && _owner_Ownership[this] == old(_owner_Ownership[this]))))
[2020-11-25 14:00:41,912 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transfer_DkargoToken0) ==> ( <>AP(success_transfer_DkargoToken0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 14:00:41,927 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:00:41 PropertyContainer
[2020-11-25 14:00:41,927 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 14:00:41,927 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 14:00:41,928 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 14:00:41,928 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 14:00:41,928 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:00:41" (1/2) ...
[2020-11-25 14:00:41,929 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 14:00:41,929 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 14:00:41,948 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:00:41" (2/2) ...
[2020-11-25 14:00:41,949 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 14:00:41,949 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 14:00:41,949 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 14:00:41,949 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 14:00:41,950 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:00:41" (1/2) ...
[2020-11-25 14:00:42,006 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 14:00:42,006 INFO  L130     BoogieDeclarations]: Found specification of procedure AddressChain.NodeInfo_ctor__success
[2020-11-25 14:00:42,007 INFO  L130     BoogieDeclarations]: Found specification of procedure AddressChain.NodeList_ctor__success
[2020-11-25 14:00:42,007 INFO  L130     BoogieDeclarations]: Found specification of procedure DkargoPrefix_DkargoPrefix_NoBaseCtor__success
[2020-11-25 14:00:42,007 INFO  L130     BoogieDeclarations]: Found specification of procedure DkargoPrefix_DkargoPrefix
[2020-11-25 14:00:42,007 INFO  L138     BoogieDeclarations]: Found implementation of procedure DkargoPrefix_DkargoPrefix
[2020-11-25 14:00:42,007 INFO  L130     BoogieDeclarations]: Found specification of procedure getDkargoPrefix_DkargoPrefix
[2020-11-25 14:00:42,007 INFO  L138     BoogieDeclarations]: Found implementation of procedure getDkargoPrefix_DkargoPrefix
[2020-11-25 14:00:42,007 INFO  L130     BoogieDeclarations]: Found specification of procedure _setDkargoPrefix~string_DkargoPrefix__success
[2020-11-25 14:00:42,007 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownership_Ownership_NoBaseCtor__success
[2020-11-25 14:00:42,008 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownership_Ownership
[2020-11-25 14:00:42,008 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownership_Ownership
[2020-11-25 14:00:42,008 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownership
[2020-11-25 14:00:42,008 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownership
[2020-11-25 14:00:42,008 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownership
[2020-11-25 14:00:42,008 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownership
[2020-11-25 14:00:42,008 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner_Ownership
[2020-11-25 14:00:42,008 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner_Ownership
[2020-11-25 14:00:42,008 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 14:00:42,009 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 14:00:42,009 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 14:00:42,009 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 14:00:42,009 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256~string_SafeMath__success
[2020-11-25 14:00:42,009 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 14:00:42,009 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 14:00:42,009 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 14:00:42,009 INFO  L130     BoogieDeclarations]: Found specification of procedure AddressChain_AddressChain_NoBaseCtor__success
[2020-11-25 14:00:42,009 INFO  L130     BoogieDeclarations]: Found specification of procedure AddressChain_AddressChain
[2020-11-25 14:00:42,010 INFO  L138     BoogieDeclarations]: Found implementation of procedure AddressChain_AddressChain
[2020-11-25 14:00:42,010 INFO  L130     BoogieDeclarations]: Found specification of procedure count_AddressChain
[2020-11-25 14:00:42,010 INFO  L138     BoogieDeclarations]: Found implementation of procedure count_AddressChain
[2020-11-25 14:00:42,010 INFO  L130     BoogieDeclarations]: Found specification of procedure head_AddressChain
[2020-11-25 14:00:42,010 INFO  L138     BoogieDeclarations]: Found implementation of procedure head_AddressChain
[2020-11-25 14:00:42,010 INFO  L130     BoogieDeclarations]: Found specification of procedure tail_AddressChain
[2020-11-25 14:00:42,010 INFO  L138     BoogieDeclarations]: Found implementation of procedure tail_AddressChain
[2020-11-25 14:00:42,010 INFO  L130     BoogieDeclarations]: Found specification of procedure nextOf~address_AddressChain
[2020-11-25 14:00:42,010 INFO  L138     BoogieDeclarations]: Found implementation of procedure nextOf~address_AddressChain
[2020-11-25 14:00:42,010 INFO  L130     BoogieDeclarations]: Found specification of procedure prevOf~address_AddressChain
[2020-11-25 14:00:42,010 INFO  L138     BoogieDeclarations]: Found implementation of procedure prevOf~address_AddressChain
[2020-11-25 14:00:42,011 INFO  L130     BoogieDeclarations]: Found specification of procedure isLinked~address_AddressChain
[2020-11-25 14:00:42,011 INFO  L138     BoogieDeclarations]: Found implementation of procedure isLinked~address_AddressChain
[2020-11-25 14:00:42,011 INFO  L130     BoogieDeclarations]: Found specification of procedure _linkChain~address_AddressChain__success
[2020-11-25 14:00:42,011 INFO  L130     BoogieDeclarations]: Found specification of procedure _unlinkChain~address_AddressChain__success
[2020-11-25 14:00:42,011 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC165_IERC165_NoBaseCtor__success
[2020-11-25 14:00:42,011 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC165_IERC165
[2020-11-25 14:00:42,011 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC165_IERC165
[2020-11-25 14:00:42,011 INFO  L130     BoogieDeclarations]: Found specification of procedure supportsInterface~bytes4_IERC165
[2020-11-25 14:00:42,011 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC165_ERC165_NoBaseCtor__success
[2020-11-25 14:00:42,012 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC165_ERC165
[2020-11-25 14:00:42,012 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC165_ERC165
[2020-11-25 14:00:42,012 INFO  L130     BoogieDeclarations]: Found specification of procedure supportsInterface~bytes4_ERC165
[2020-11-25 14:00:42,012 INFO  L138     BoogieDeclarations]: Found implementation of procedure supportsInterface~bytes4_ERC165
[2020-11-25 14:00:42,012 INFO  L130     BoogieDeclarations]: Found specification of procedure _registerInterface~bytes4_ERC165__success
[2020-11-25 14:00:42,012 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 14:00:42,012 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-25 14:00:42,012 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-25 14:00:42,012 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-25 14:00:42,012 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-25 14:00:42,013 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-25 14:00:42,013 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-25 14:00:42,013 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-25 14:00:42,013 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-25 14:00:42,013 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 14:00:42,013 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 14:00:42,013 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 14:00:42,013 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 14:00:42,013 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20
[2020-11-25 14:00:42,013 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20
[2020-11-25 14:00:42,014 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20
[2020-11-25 14:00:42,014 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 14:00:42,014 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 14:00:42,014 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20
[2020-11-25 14:00:42,014 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20
[2020-11-25 14:00:42,014 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20
[2020-11-25 14:00:42,014 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20
[2020-11-25 14:00:42,014 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 14:00:42,014 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20
[2020-11-25 14:00:42,014 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 14:00:42,015 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 14:00:42,015 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__success
[2020-11-25 14:00:42,015 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__success
[2020-11-25 14:00:42,015 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Safe_ERC20Safe_NoBaseCtor__success
[2020-11-25 14:00:42,015 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Safe_ERC20Safe
[2020-11-25 14:00:42,015 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Safe_ERC20Safe
[2020-11-25 14:00:42,015 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Safe
[2020-11-25 14:00:42,015 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20Safe
[2020-11-25 14:00:42,015 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20Safe
[2020-11-25 14:00:42,015 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20Safe
[2020-11-25 14:00:42,016 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20Safe
[2020-11-25 14:00:42,016 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20Safe
[2020-11-25 14:00:42,016 INFO  L130     BoogieDeclarations]: Found specification of procedure DkargoToken_DkargoToken_NoBaseCtor__success
[2020-11-25 14:00:42,016 INFO  L130     BoogieDeclarations]: Found specification of procedure DkargoToken_DkargoToken
[2020-11-25 14:00:42,016 INFO  L138     BoogieDeclarations]: Found implementation of procedure DkargoToken_DkargoToken
[2020-11-25 14:00:42,016 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_DkargoToken
[2020-11-25 14:00:42,016 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_DkargoToken
[2020-11-25 14:00:42,016 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_DkargoToken
[2020-11-25 14:00:42,016 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_DkargoToken
[2020-11-25 14:00:42,016 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_DkargoToken
[2020-11-25 14:00:42,016 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_DkargoToken
[2020-11-25 14:00:42,017 INFO  L130     BoogieDeclarations]: Found specification of procedure name_DkargoToken
[2020-11-25 14:00:42,017 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_DkargoToken
[2020-11-25 14:00:42,017 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_DkargoToken
[2020-11-25 14:00:42,017 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_DkargoToken
[2020-11-25 14:00:42,017 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_DkargoToken
[2020-11-25 14:00:42,017 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_DkargoToken
[2020-11-25 14:00:42,017 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 14:00:42,017 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 14:00:42,017 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 14:00:42,017 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 14:00:42,017 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_DkargoPrefix
[2020-11-25 14:00:42,018 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_DkargoPrefix
[2020-11-25 14:00:42,018 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Ownership
[2020-11-25 14:00:42,018 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Ownership
[2020-11-25 14:00:42,018 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 14:00:42,018 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 14:00:42,018 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_AddressChain
[2020-11-25 14:00:42,018 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_AddressChain
[2020-11-25 14:00:42,018 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC165
[2020-11-25 14:00:42,018 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC165
[2020-11-25 14:00:42,018 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC165
[2020-11-25 14:00:42,019 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC165
[2020-11-25 14:00:42,019 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-25 14:00:42,019 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-25 14:00:42,019 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 14:00:42,019 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 14:00:42,019 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Safe
[2020-11-25 14:00:42,019 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Safe
[2020-11-25 14:00:42,019 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_DkargoToken
[2020-11-25 14:00:42,019 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 14:00:42,020 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 14:00:42,020 INFO  L130     BoogieDeclarations]: Found specification of procedure AddressChain.NodeInfo_ctor__fail
[2020-11-25 14:00:42,020 INFO  L130     BoogieDeclarations]: Found specification of procedure AddressChain.NodeList_ctor__fail
[2020-11-25 14:00:42,020 INFO  L130     BoogieDeclarations]: Found specification of procedure DkargoPrefix_DkargoPrefix_NoBaseCtor__fail
[2020-11-25 14:00:42,020 INFO  L130     BoogieDeclarations]: Found specification of procedure DkargoPrefix_DkargoPrefix__success
[2020-11-25 14:00:42,020 INFO  L130     BoogieDeclarations]: Found specification of procedure DkargoPrefix_DkargoPrefix__fail
[2020-11-25 14:00:42,020 INFO  L130     BoogieDeclarations]: Found specification of procedure getDkargoPrefix_DkargoPrefix__success
[2020-11-25 14:00:42,020 INFO  L130     BoogieDeclarations]: Found specification of procedure getDkargoPrefix_DkargoPrefix__fail
[2020-11-25 14:00:42,020 INFO  L130     BoogieDeclarations]: Found specification of procedure _setDkargoPrefix~string_DkargoPrefix__fail
[2020-11-25 14:00:42,020 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownership_Ownership_NoBaseCtor__fail
[2020-11-25 14:00:42,021 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownership_Ownership__success
[2020-11-25 14:00:42,021 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownership_Ownership__fail
[2020-11-25 14:00:42,021 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownership__success
[2020-11-25 14:00:42,021 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownership__fail
[2020-11-25 14:00:42,021 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownership__success
[2020-11-25 14:00:42,021 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownership__fail
[2020-11-25 14:00:42,021 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner_Ownership__success
[2020-11-25 14:00:42,021 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner_Ownership__fail
[2020-11-25 14:00:42,021 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 14:00:42,022 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 14:00:42,022 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 14:00:42,022 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 14:00:42,022 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256~string_SafeMath__fail
[2020-11-25 14:00:42,022 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 14:00:42,022 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 14:00:42,022 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 14:00:42,022 INFO  L130     BoogieDeclarations]: Found specification of procedure AddressChain_AddressChain_NoBaseCtor__fail
[2020-11-25 14:00:42,022 INFO  L130     BoogieDeclarations]: Found specification of procedure AddressChain_AddressChain__success
[2020-11-25 14:00:42,022 INFO  L130     BoogieDeclarations]: Found specification of procedure AddressChain_AddressChain__fail
[2020-11-25 14:00:42,023 INFO  L130     BoogieDeclarations]: Found specification of procedure count_AddressChain__success
[2020-11-25 14:00:42,023 INFO  L130     BoogieDeclarations]: Found specification of procedure count_AddressChain__fail
[2020-11-25 14:00:42,023 INFO  L130     BoogieDeclarations]: Found specification of procedure head_AddressChain__success
[2020-11-25 14:00:42,023 INFO  L130     BoogieDeclarations]: Found specification of procedure head_AddressChain__fail
[2020-11-25 14:00:42,023 INFO  L130     BoogieDeclarations]: Found specification of procedure tail_AddressChain__success
[2020-11-25 14:00:42,023 INFO  L130     BoogieDeclarations]: Found specification of procedure tail_AddressChain__fail
[2020-11-25 14:00:42,023 INFO  L130     BoogieDeclarations]: Found specification of procedure nextOf~address_AddressChain__success
[2020-11-25 14:00:42,023 INFO  L130     BoogieDeclarations]: Found specification of procedure nextOf~address_AddressChain__fail
[2020-11-25 14:00:42,023 INFO  L130     BoogieDeclarations]: Found specification of procedure prevOf~address_AddressChain__success
[2020-11-25 14:00:42,023 INFO  L130     BoogieDeclarations]: Found specification of procedure prevOf~address_AddressChain__fail
[2020-11-25 14:00:42,023 INFO  L130     BoogieDeclarations]: Found specification of procedure isLinked~address_AddressChain__success
[2020-11-25 14:00:42,024 INFO  L130     BoogieDeclarations]: Found specification of procedure isLinked~address_AddressChain__fail
[2020-11-25 14:00:42,024 INFO  L130     BoogieDeclarations]: Found specification of procedure _linkChain~address_AddressChain__fail
[2020-11-25 14:00:42,024 INFO  L130     BoogieDeclarations]: Found specification of procedure _unlinkChain~address_AddressChain__fail
[2020-11-25 14:00:42,024 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC165_IERC165_NoBaseCtor__fail
[2020-11-25 14:00:42,024 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC165_IERC165__success
[2020-11-25 14:00:42,024 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC165_IERC165__fail
[2020-11-25 14:00:42,024 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC165_ERC165_NoBaseCtor__fail
[2020-11-25 14:00:42,024 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC165_ERC165__success
[2020-11-25 14:00:42,024 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC165_ERC165__fail
[2020-11-25 14:00:42,024 INFO  L130     BoogieDeclarations]: Found specification of procedure supportsInterface~bytes4_ERC165__success
[2020-11-25 14:00:42,024 INFO  L130     BoogieDeclarations]: Found specification of procedure supportsInterface~bytes4_ERC165__fail
[2020-11-25 14:00:42,025 INFO  L130     BoogieDeclarations]: Found specification of procedure _registerInterface~bytes4_ERC165__fail
[2020-11-25 14:00:42,025 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 14:00:42,025 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-25 14:00:42,025 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-25 14:00:42,025 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 14:00:42,025 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 14:00:42,025 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 14:00:42,025 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__success
[2020-11-25 14:00:42,025 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__fail
[2020-11-25 14:00:42,025 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__success
[2020-11-25 14:00:42,025 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 14:00:42,025 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 14:00:42,026 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 14:00:42,026 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__success
[2020-11-25 14:00:42,026 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__fail
[2020-11-25 14:00:42,026 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__success
[2020-11-25 14:00:42,026 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__fail
[2020-11-25 14:00:42,026 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__success
[2020-11-25 14:00:42,026 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__fail
[2020-11-25 14:00:42,026 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 14:00:42,026 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 14:00:42,026 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 14:00:42,026 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 14:00:42,026 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Safe_ERC20Safe_NoBaseCtor__fail
[2020-11-25 14:00:42,027 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Safe_ERC20Safe__success
[2020-11-25 14:00:42,027 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Safe_ERC20Safe__fail
[2020-11-25 14:00:42,027 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Safe__success
[2020-11-25 14:00:42,027 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Safe__fail
[2020-11-25 14:00:42,027 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20Safe__success
[2020-11-25 14:00:42,027 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20Safe__fail
[2020-11-25 14:00:42,027 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20Safe__success
[2020-11-25 14:00:42,027 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20Safe__fail
[2020-11-25 14:00:42,027 INFO  L130     BoogieDeclarations]: Found specification of procedure DkargoToken_DkargoToken_NoBaseCtor__fail
[2020-11-25 14:00:42,027 INFO  L130     BoogieDeclarations]: Found specification of procedure DkargoToken_DkargoToken__success
[2020-11-25 14:00:42,027 INFO  L130     BoogieDeclarations]: Found specification of procedure DkargoToken_DkargoToken__fail
[2020-11-25 14:00:42,027 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_DkargoToken__success
[2020-11-25 14:00:42,028 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_DkargoToken__fail
[2020-11-25 14:00:42,028 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_DkargoToken__success
[2020-11-25 14:00:42,028 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_DkargoToken__fail
[2020-11-25 14:00:42,028 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_DkargoToken__success
[2020-11-25 14:00:42,028 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_DkargoToken__fail
[2020-11-25 14:00:42,028 INFO  L130     BoogieDeclarations]: Found specification of procedure name_DkargoToken__success
[2020-11-25 14:00:42,028 INFO  L130     BoogieDeclarations]: Found specification of procedure name_DkargoToken__fail
[2020-11-25 14:00:42,028 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_DkargoToken__success
[2020-11-25 14:00:42,028 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_DkargoToken__fail
[2020-11-25 14:00:42,028 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_DkargoToken__success
[2020-11-25 14:00:42,028 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_DkargoToken__fail
[2020-11-25 14:00:42,028 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 14:00:42,029 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 14:00:42,029 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 14:00:42,029 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 14:00:42,029 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 14:00:42,029 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 14:00:42,029 INFO  L138     BoogieDeclarations]: Found implementation of procedure AddressChain.NodeInfo_ctor__fail
[2020-11-25 14:00:42,029 INFO  L138     BoogieDeclarations]: Found implementation of procedure AddressChain.NodeInfo_ctor__success
[2020-11-25 14:00:42,029 INFO  L138     BoogieDeclarations]: Found implementation of procedure AddressChain.NodeList_ctor__fail
[2020-11-25 14:00:42,029 INFO  L138     BoogieDeclarations]: Found implementation of procedure AddressChain.NodeList_ctor__success
[2020-11-25 14:00:42,029 INFO  L138     BoogieDeclarations]: Found implementation of procedure DkargoPrefix_DkargoPrefix_NoBaseCtor__fail
[2020-11-25 14:00:42,029 INFO  L138     BoogieDeclarations]: Found implementation of procedure DkargoPrefix_DkargoPrefix_NoBaseCtor__success
[2020-11-25 14:00:42,029 INFO  L138     BoogieDeclarations]: Found implementation of procedure DkargoPrefix_DkargoPrefix__fail
[2020-11-25 14:00:42,029 INFO  L138     BoogieDeclarations]: Found implementation of procedure DkargoPrefix_DkargoPrefix__success
[2020-11-25 14:00:42,030 INFO  L138     BoogieDeclarations]: Found implementation of procedure getDkargoPrefix_DkargoPrefix__fail
[2020-11-25 14:00:42,030 INFO  L138     BoogieDeclarations]: Found implementation of procedure getDkargoPrefix_DkargoPrefix__success
[2020-11-25 14:00:42,030 INFO  L138     BoogieDeclarations]: Found implementation of procedure _setDkargoPrefix~string_DkargoPrefix__fail
[2020-11-25 14:00:42,030 INFO  L138     BoogieDeclarations]: Found implementation of procedure _setDkargoPrefix~string_DkargoPrefix__success
[2020-11-25 14:00:42,030 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownership_Ownership_NoBaseCtor__fail
[2020-11-25 14:00:42,030 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownership_Ownership_NoBaseCtor__success
[2020-11-25 14:00:42,030 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownership_Ownership__fail
[2020-11-25 14:00:42,030 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownership_Ownership__success
[2020-11-25 14:00:42,030 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownership__fail
[2020-11-25 14:00:42,030 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownership__success
[2020-11-25 14:00:42,030 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownership__fail
[2020-11-25 14:00:42,030 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownership__success
[2020-11-25 14:00:42,031 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner_Ownership__fail
[2020-11-25 14:00:42,031 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner_Ownership__success
[2020-11-25 14:00:42,031 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 14:00:42,031 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 14:00:42,031 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 14:00:42,031 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 14:00:42,031 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 14:00:42,031 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 14:00:42,031 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256~string_SafeMath__fail
[2020-11-25 14:00:42,031 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256~string_SafeMath__success
[2020-11-25 14:00:42,031 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 14:00:42,031 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 14:00:42,032 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 14:00:42,032 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 14:00:42,032 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 14:00:42,032 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 14:00:42,032 INFO  L138     BoogieDeclarations]: Found implementation of procedure AddressChain_AddressChain_NoBaseCtor__fail
[2020-11-25 14:00:42,032 INFO  L138     BoogieDeclarations]: Found implementation of procedure AddressChain_AddressChain_NoBaseCtor__success
[2020-11-25 14:00:42,032 INFO  L138     BoogieDeclarations]: Found implementation of procedure AddressChain_AddressChain__fail
[2020-11-25 14:00:42,033 INFO  L138     BoogieDeclarations]: Found implementation of procedure AddressChain_AddressChain__success
[2020-11-25 14:00:42,033 INFO  L138     BoogieDeclarations]: Found implementation of procedure count_AddressChain__fail
[2020-11-25 14:00:42,033 INFO  L138     BoogieDeclarations]: Found implementation of procedure count_AddressChain__success
[2020-11-25 14:00:42,033 INFO  L138     BoogieDeclarations]: Found implementation of procedure head_AddressChain__fail
[2020-11-25 14:00:42,033 INFO  L138     BoogieDeclarations]: Found implementation of procedure head_AddressChain__success
[2020-11-25 14:00:42,033 INFO  L138     BoogieDeclarations]: Found implementation of procedure tail_AddressChain__fail
[2020-11-25 14:00:42,033 INFO  L138     BoogieDeclarations]: Found implementation of procedure tail_AddressChain__success
[2020-11-25 14:00:42,033 INFO  L138     BoogieDeclarations]: Found implementation of procedure nextOf~address_AddressChain__fail
[2020-11-25 14:00:42,033 INFO  L138     BoogieDeclarations]: Found implementation of procedure nextOf~address_AddressChain__success
[2020-11-25 14:00:42,033 INFO  L138     BoogieDeclarations]: Found implementation of procedure prevOf~address_AddressChain__fail
[2020-11-25 14:00:42,033 INFO  L138     BoogieDeclarations]: Found implementation of procedure prevOf~address_AddressChain__success
[2020-11-25 14:00:42,033 INFO  L138     BoogieDeclarations]: Found implementation of procedure isLinked~address_AddressChain__fail
[2020-11-25 14:00:42,034 INFO  L138     BoogieDeclarations]: Found implementation of procedure isLinked~address_AddressChain__success
[2020-11-25 14:00:42,034 INFO  L138     BoogieDeclarations]: Found implementation of procedure _linkChain~address_AddressChain__fail
[2020-11-25 14:00:42,034 INFO  L138     BoogieDeclarations]: Found implementation of procedure _linkChain~address_AddressChain__success
[2020-11-25 14:00:42,034 INFO  L138     BoogieDeclarations]: Found implementation of procedure _unlinkChain~address_AddressChain__fail
[2020-11-25 14:00:42,034 INFO  L138     BoogieDeclarations]: Found implementation of procedure _unlinkChain~address_AddressChain__success
[2020-11-25 14:00:42,034 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC165_IERC165_NoBaseCtor__fail
[2020-11-25 14:00:42,034 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC165_IERC165_NoBaseCtor__success
[2020-11-25 14:00:42,034 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC165_IERC165__fail
[2020-11-25 14:00:42,034 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC165_IERC165__success
[2020-11-25 14:00:42,034 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC165_ERC165_NoBaseCtor__fail
[2020-11-25 14:00:42,034 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC165_ERC165_NoBaseCtor__success
[2020-11-25 14:00:42,035 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC165_ERC165__fail
[2020-11-25 14:00:42,035 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC165_ERC165__success
[2020-11-25 14:00:42,035 INFO  L138     BoogieDeclarations]: Found implementation of procedure supportsInterface~bytes4_ERC165__fail
[2020-11-25 14:00:42,035 INFO  L138     BoogieDeclarations]: Found implementation of procedure supportsInterface~bytes4_ERC165__success
[2020-11-25 14:00:42,035 INFO  L138     BoogieDeclarations]: Found implementation of procedure _registerInterface~bytes4_ERC165__fail
[2020-11-25 14:00:42,035 INFO  L138     BoogieDeclarations]: Found implementation of procedure _registerInterface~bytes4_ERC165__success
[2020-11-25 14:00:42,035 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 14:00:42,035 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 14:00:42,035 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-25 14:00:42,035 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-25 14:00:42,035 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 14:00:42,035 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 14:00:42,035 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 14:00:42,036 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 14:00:42,036 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__fail
[2020-11-25 14:00:42,036 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__success
[2020-11-25 14:00:42,036 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 14:00:42,036 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__success
[2020-11-25 14:00:42,036 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 14:00:42,036 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 14:00:42,036 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__fail
[2020-11-25 14:00:42,036 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__success
[2020-11-25 14:00:42,036 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__fail
[2020-11-25 14:00:42,036 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__success
[2020-11-25 14:00:42,036 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__fail
[2020-11-25 14:00:42,036 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__success
[2020-11-25 14:00:42,037 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 14:00:42,037 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 14:00:42,037 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 14:00:42,037 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 14:00:42,037 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 14:00:42,037 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__success
[2020-11-25 14:00:42,037 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 14:00:42,037 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__success
[2020-11-25 14:00:42,037 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Safe_ERC20Safe_NoBaseCtor__fail
[2020-11-25 14:00:42,037 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Safe_ERC20Safe_NoBaseCtor__success
[2020-11-25 14:00:42,037 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Safe_ERC20Safe__fail
[2020-11-25 14:00:42,037 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Safe_ERC20Safe__success
[2020-11-25 14:00:42,037 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20Safe__fail
[2020-11-25 14:00:42,038 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20Safe__success
[2020-11-25 14:00:42,038 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20Safe__fail
[2020-11-25 14:00:42,038 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20Safe__success
[2020-11-25 14:00:42,038 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20Safe__fail
[2020-11-25 14:00:42,038 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20Safe__success
[2020-11-25 14:00:42,038 INFO  L138     BoogieDeclarations]: Found implementation of procedure DkargoToken_DkargoToken_NoBaseCtor__fail
[2020-11-25 14:00:42,038 INFO  L138     BoogieDeclarations]: Found implementation of procedure DkargoToken_DkargoToken_NoBaseCtor__success
[2020-11-25 14:00:42,038 INFO  L138     BoogieDeclarations]: Found implementation of procedure DkargoToken_DkargoToken__fail
[2020-11-25 14:00:42,038 INFO  L138     BoogieDeclarations]: Found implementation of procedure DkargoToken_DkargoToken__success
[2020-11-25 14:00:42,038 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_DkargoToken__fail
[2020-11-25 14:00:42,038 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_DkargoToken__success
[2020-11-25 14:00:42,038 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_DkargoToken__fail
[2020-11-25 14:00:42,038 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_DkargoToken__success
[2020-11-25 14:00:42,039 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_DkargoToken__fail
[2020-11-25 14:00:42,039 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_DkargoToken__success
[2020-11-25 14:00:42,039 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_DkargoToken__fail
[2020-11-25 14:00:42,039 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_DkargoToken__success
[2020-11-25 14:00:42,039 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_DkargoToken__fail
[2020-11-25 14:00:42,039 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_DkargoToken__success
[2020-11-25 14:00:42,039 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_DkargoToken__fail
[2020-11-25 14:00:42,039 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_DkargoToken__success
[2020-11-25 14:00:42,039 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 14:00:42,039 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 14:00:42,039 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 14:00:42,039 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 14:00:42,040 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 14:00:42,040 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 14:00:42,040 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 14:00:42,040 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 14:00:42,040 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_DkargoPrefix
[2020-11-25 14:00:42,040 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_DkargoPrefix
[2020-11-25 14:00:42,040 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Ownership
[2020-11-25 14:00:42,040 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Ownership
[2020-11-25 14:00:42,040 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 14:00:42,040 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 14:00:42,040 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_AddressChain
[2020-11-25 14:00:42,040 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_AddressChain
[2020-11-25 14:00:42,040 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC165
[2020-11-25 14:00:42,041 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC165
[2020-11-25 14:00:42,041 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC165
[2020-11-25 14:00:42,041 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC165
[2020-11-25 14:00:42,041 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-25 14:00:42,041 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-25 14:00:42,041 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 14:00:42,041 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 14:00:42,041 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Safe
[2020-11-25 14:00:42,041 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Safe
[2020-11-25 14:00:42,041 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_DkargoToken
[2020-11-25 14:00:42,041 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 14:00:42,041 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 14:00:42,042 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 14:00:42,531 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 14:00:42,531 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 14:00:42,532 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 14:00:43,057 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 14:00:43,057 INFO  L286             CfgBuilder]: Removed 10 assue(true) statements.
[2020-11-25 14:00:43,059 INFO  L202        PluginConnector]: Adding new model DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:00:43 BoogieIcfgContainer
[2020-11-25 14:00:43,059 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:00:41" (2/2) ...
[2020-11-25 14:00:43,059 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 14:00:43,060 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@62d795d9 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:00:43, skipping insertion in model container
[2020-11-25 14:00:43,060 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 14:00:43,060 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 14:00:43,060 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 14:00:43,061 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 14:00:43,061 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:00:41" (1/3) ...
[2020-11-25 14:00:43,062 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@6e6d4780 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:00:43, skipping insertion in model container
[2020-11-25 14:00:43,062 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:00:41" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 14:00:43,096 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:00:43 NWAContainer
[2020-11-25 14:00:43,096 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 14:00:43,096 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 14:00:43,096 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 14:00:43,097 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 14:00:43,098 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:00:43" (3/4) ...
[2020-11-25 14:00:43,098 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@1827a7e5 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:00:43, skipping insertion in model container
[2020-11-25 14:00:43,098 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:00:43" (4/4) ...
[2020-11-25 14:00:43,100 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 14:00:43,105 INFO  L110   BuchiProductObserver]: Initial RCFG 3094 locations, 4212 edges
[2020-11-25 14:00:43,105 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 14:00:43,114 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 14:00:45,258 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 14:00:45,267 INFO  L110   BuchiProductObserver]: BuchiProgram size 7634 locations, 13669 edges
[2020-11-25 14:00:45,268 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:00:45 BoogieIcfgContainer
[2020-11-25 14:00:45,268 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 14:00:45,268 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 14:00:45,268 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 14:00:45,269 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 14:00:45,270 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:00:45" (1/1) ...
[2020-11-25 14:00:45,402 INFO  L313           BlockEncoder]: Initial Icfg 7634 locations, 13669 edges
[2020-11-25 14:00:45,402 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 14:00:45,402 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 14:00:45,403 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 14:00:45,403 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 14:00:45,419 INFO  L70    emoveInfeasibleEdges]: Removed 288 edges and 23 locations because of local infeasibility
[2020-11-25 14:00:45,434 INFO  L70        RemoveSinkStates]: Removed 200 edges and 133 locations by removing sink states
[2020-11-25 14:00:45,450 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 14:00:45,455 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 14:00:45,460 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 14:00:45,460 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 14:00:45,464 INFO  L313           BlockEncoder]: Encoded RCFG 7442 locations, 13128 edges
[2020-11-25 14:00:45,465 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 02:00:45 BasicIcfg
[2020-11-25 14:00:45,465 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 14:00:45,465 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 14:00:45,465 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 14:00:45,467 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 14:00:45,467 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 14:00:45,467 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:00:41" (1/6) ...
[2020-11-25 14:00:45,468 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4ad7a6f5 and model type DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 02:00:45, skipping insertion in model container
[2020-11-25 14:00:45,468 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 14:00:45,468 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:00:41" (2/6) ...
[2020-11-25 14:00:45,468 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4ad7a6f5 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 02:00:45, skipping insertion in model container
[2020-11-25 14:00:45,468 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 14:00:45,469 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:00:43" (3/6) ...
[2020-11-25 14:00:45,469 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4ad7a6f5 and model type DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 02:00:45, skipping insertion in model container
[2020-11-25 14:00:45,469 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 14:00:45,469 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:00:43" (4/6) ...
[2020-11-25 14:00:45,469 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4ad7a6f5 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 02:00:45, skipping insertion in model container
[2020-11-25 14:00:45,469 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 14:00:45,469 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:00:45" (5/6) ...
[2020-11-25 14:00:45,469 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4ad7a6f5 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 02:00:45, skipping insertion in model container
[2020-11-25 14:00:45,470 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 14:00:45,470 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 02:00:45" (6/6) ...
[2020-11-25 14:00:45,470 INFO  L404   chiAutomizerObserver]: Analyzing ICFG DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transfer-self.bpl_BEv2
[2020-11-25 14:00:45,504 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 14:00:45,505 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 14:00:45,505 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 14:00:45,505 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 14:00:45,505 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 14:00:45,505 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 14:00:45,505 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 14:00:45,505 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 14:00:45,505 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 14:00:45,562 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7442 states.
[2020-11-25 14:00:45,625 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:00:45,625 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:00:45,625 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:00:45,632 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:00:45,632 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:00:45,632 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 14:00:45,633 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7442 states.
[2020-11-25 14:00:45,660 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:00:45,660 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:00:45,660 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:00:45,662 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:00:45,662 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_DkargoToken0 := false;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]     CALL        call main();
[L8440]              assume null == 0;
[L8441]  CALL        call this := FreshRefGenerator__success();
[L3983]              havoc newRef;
[L3984]              assume Alloc[newRef] == false;
[L3985]              Alloc[newRef] := true;
[L3986]              assume newRef != null;
[L8441]  RET         call this := FreshRefGenerator__success();
[L8442]              assume now >= 0;
[L8443]              assume DType[this] == DkargoToken;
[L8444]              assume msgvalue_MSG == 0;
[L8445]              gas := gas - 53000;
[L8446]  CALL        call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2403]              havoc __exception;
[L2404]              revert := false;
[L2405]  COND FALSE  !(__exception)
[L2438]  CALL        call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5753]  CALL        call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L4104]  CALL        call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4086]              assume msgsender_MSG != null;
[L4087]              Balance[this] := 0;
[L4088]              _owner_Ownership[this] := null;
[L4090]              assert { :EventEmitted "OwnershipTransferred_Ownership" } true;
[L4091]              _owner_Ownership[this] := msgsender_MSG;
[L4104]  RET         call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4105]  COND FALSE  !(revert)
[L5753]  RET         call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]  COND TRUE   revert
[L2438]  RET         call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2439]              assume !revert && gas >= 0;
[L8446]  RET         call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L8447]              assume !revert && gas >= 0;

Loop:
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND TRUE   choice == 23
[L8286]              gas := gas - 21000;
[L8287]  COND FALSE  !(gas >= 0)
[L8450]  RET         call CorralChoice_DkargoToken(this);

[2020-11-25 14:00:45,675 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:00:45,676 INFO  L82        PathProgramCache]: Analyzing trace with hash -1528866322, now seen corresponding path program 1 times
[2020-11-25 14:00:45,681 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:00:45,706 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:00:45,749 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 14:00:45,751 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 14:00:45,751 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 14:00:46,122 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:00:46,131 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 14:00:46,131 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 14:00:46,132 INFO  L87              Difference]: Start difference. First operand 7442 states. Second operand 3 states.
[2020-11-25 14:00:46,459 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:00:46,459 INFO  L93              Difference]: Finished difference Result 6492 states and 10625 transitions.
[2020-11-25 14:00:46,459 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 14:00:46,461 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6492 states and 10625 transitions.
[2020-11-25 14:00:46,506 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 14:00:46,563 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6492 states to 6492 states and 10625 transitions.
[2020-11-25 14:00:46,563 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 13
[2020-11-25 14:00:46,568 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1331
[2020-11-25 14:00:46,568 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6492 states and 10625 transitions.
[2020-11-25 14:00:46,588 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:00:46,588 INFO  L728         BuchiCegarLoop]: Abstraction has 6492 states and 10625 transitions.
[2020-11-25 14:00:46,607 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6492 states and 10625 transitions.
[2020-11-25 14:00:46,700 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6492 to 5794.
[2020-11-25 14:00:46,701 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5794 states.
[2020-11-25 14:00:46,715 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5794 states to 5794 states and 9393 transitions.
[2020-11-25 14:00:46,716 INFO  L751         BuchiCegarLoop]: Abstraction has 5794 states and 9393 transitions.
[2020-11-25 14:00:46,716 INFO  L631         BuchiCegarLoop]: Abstraction has 5794 states and 9393 transitions.
[2020-11-25 14:00:46,716 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 14:00:46,716 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5794 states and 9393 transitions.
[2020-11-25 14:00:46,731 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:00:46,731 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:00:46,731 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:00:46,732 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:00:46,733 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_DkargoToken0 := false;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]     CALL        call main();
[L8440]              assume null == 0;
[L8441]  CALL        call this := FreshRefGenerator__success();
[L3983]              havoc newRef;
[L3984]              assume Alloc[newRef] == false;
[L3985]              Alloc[newRef] := true;
[L3986]              assume newRef != null;
[L8441]  RET         call this := FreshRefGenerator__success();
[L8442]              assume now >= 0;
[L8443]              assume DType[this] == DkargoToken;
[L8444]              assume msgvalue_MSG == 0;
[L8445]              gas := gas - 53000;
[L8446]  CALL        call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2403]              havoc __exception;
[L2404]              revert := false;
[L2405]  COND FALSE  !(__exception)
[L2438]  CALL        call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5753]  CALL        call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L4104]  CALL        call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4086]              assume msgsender_MSG != null;
[L4087]              Balance[this] := 0;
[L4088]              _owner_Ownership[this] := null;
[L4090]              assert { :EventEmitted "OwnershipTransferred_Ownership" } true;
[L4091]              _owner_Ownership[this] := msgsender_MSG;
[L4104]  RET         call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4105]  COND FALSE  !(revert)
[L5753]  RET         call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]  COND FALSE  !(revert)
[L5757]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L5757]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5758]  COND FALSE  !(revert)
[L5761]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L4913]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L4913]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]  COND FALSE  !(revert)
[L4917]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4868]              assume msgsender_MSG != null;
[L4869]              Balance[this] := 0;
[L4870]              _supply_ERC20[this] := 0;
[L4871]              _balances_ERC20[this] := zeroRefintArr();
[L4872]              sum__balances1[this] := 0;
[L4873]              _allowances_ERC20[this] := zeroRefRefintArr();
[L4874]              sum__allowances2[this] := 0;
[L4876]              pebs_s747 := supply_s747;
[L4877]  COND TRUE   DType[this] == DkargoToken
[L4878]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L5282]              __var_24 := null;
[L5283]  COND TRUE   !(account_s999 != null)
[L5284]              revert := true;
[L4878]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L4879]  COND TRUE   revert
[L4917]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4918]  COND TRUE   revert
[L5761]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L5762]  COND TRUE   revert
[L2438]  RET         call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2439]              assume !revert && gas >= 0;
[L8446]  RET         call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L8447]              assume !revert && gas >= 0;

Loop:
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND TRUE   choice == 23
[L8286]              gas := gas - 21000;
[L8287]  COND FALSE  !(gas >= 0)
[L8450]  RET         call CorralChoice_DkargoToken(this);

[2020-11-25 14:00:46,736 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:00:46,736 INFO  L82        PathProgramCache]: Analyzing trace with hash -275255144, now seen corresponding path program 1 times
[2020-11-25 14:00:46,738 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:00:46,745 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:00:46,773 INFO  L134       CoverageAnalysis]: Checked inductivity of 10 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 10 trivial. 0 not checked.
[2020-11-25 14:00:46,773 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 14:00:46,773 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 14:00:46,775 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:00:46,775 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 14:00:46,775 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 14:00:46,775 INFO  L87              Difference]: Start difference. First operand 5794 states and 9393 transitions. cyclomatic complexity: 3601 Second operand 4 states.
[2020-11-25 14:00:47,418 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:00:47,418 INFO  L93              Difference]: Finished difference Result 5197 states and 5990 transitions.
[2020-11-25 14:00:47,419 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 14:00:47,419 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5197 states and 5990 transitions.
[2020-11-25 14:00:47,431 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:00:47,445 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5197 states to 5197 states and 5990 transitions.
[2020-11-25 14:00:47,445 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1079
[2020-11-25 14:00:47,445 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1079
[2020-11-25 14:00:47,445 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5197 states and 5990 transitions.
[2020-11-25 14:00:47,449 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:00:47,450 INFO  L728         BuchiCegarLoop]: Abstraction has 5197 states and 5990 transitions.
[2020-11-25 14:00:47,454 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5197 states and 5990 transitions.
[2020-11-25 14:00:47,491 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5197 to 5197.
[2020-11-25 14:00:47,492 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5197 states.
[2020-11-25 14:00:47,497 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5197 states to 5197 states and 5990 transitions.
[2020-11-25 14:00:47,498 INFO  L751         BuchiCegarLoop]: Abstraction has 5197 states and 5990 transitions.
[2020-11-25 14:00:47,498 INFO  L631         BuchiCegarLoop]: Abstraction has 5197 states and 5990 transitions.
[2020-11-25 14:00:47,498 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 14:00:47,498 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5197 states and 5990 transitions.
[2020-11-25 14:00:47,505 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:00:47,505 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:00:47,505 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:00:47,506 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:00:47,507 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_DkargoToken0 := false;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]     CALL        call main();
[L8440]              assume null == 0;
[L8441]  CALL        call this := FreshRefGenerator__success();
[L3983]              havoc newRef;
[L3984]              assume Alloc[newRef] == false;
[L3985]              Alloc[newRef] := true;
[L3986]              assume newRef != null;
[L8441]  RET         call this := FreshRefGenerator__success();
[L8442]              assume now >= 0;
[L8443]              assume DType[this] == DkargoToken;
[L8444]              assume msgvalue_MSG == 0;
[L8445]              gas := gas - 53000;
[L8446]  CALL        call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2403]              havoc __exception;
[L2404]              revert := false;
[L2405]  COND FALSE  !(__exception)
[L2438]  CALL        call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5753]  CALL        call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L4104]  CALL        call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4086]              assume msgsender_MSG != null;
[L4087]              Balance[this] := 0;
[L4088]              _owner_Ownership[this] := null;
[L4090]              assert { :EventEmitted "OwnershipTransferred_Ownership" } true;
[L4091]              _owner_Ownership[this] := msgsender_MSG;
[L4104]  RET         call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4105]  COND FALSE  !(revert)
[L5753]  RET         call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]  COND FALSE  !(revert)
[L5757]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L5757]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5758]  COND FALSE  !(revert)
[L5761]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L4913]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L4913]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]  COND FALSE  !(revert)
[L4917]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4868]              assume msgsender_MSG != null;
[L4869]              Balance[this] := 0;
[L4870]              _supply_ERC20[this] := 0;
[L4871]              _balances_ERC20[this] := zeroRefintArr();
[L4872]              sum__balances1[this] := 0;
[L4873]              _allowances_ERC20[this] := zeroRefRefintArr();
[L4874]              sum__allowances2[this] := 0;
[L4876]              pebs_s747 := supply_s747;
[L4877]  COND TRUE   DType[this] == DkargoToken
[L4878]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L5282]              __var_24 := null;
[L5283]  COND TRUE   !(account_s999 != null)
[L5284]              revert := true;
[L4878]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L4879]  COND TRUE   revert
[L4917]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4918]  COND TRUE   revert
[L5761]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L5762]  COND TRUE   revert
[L2438]  RET         call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2439]              assume !revert && gas >= 0;
[L8446]  RET         call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L8447]              assume !revert && gas >= 0;
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND FALSE  !(choice == 23)
[L8291]  COND FALSE  !(choice == 22)
[L8297]  COND FALSE  !(choice == 21)
[L8303]  COND FALSE  !(choice == 20)
[L8309]  COND FALSE  !(choice == 19)
[L8315]  COND FALSE  !(choice == 18)
[L8321]  COND FALSE  !(choice == 17)
[L8327]  COND FALSE  !(choice == 16)
[L8333]  COND FALSE  !(choice == 15)
[L8339]  COND FALSE  !(choice == 14)
[L8345]  COND FALSE  !(choice == 13)
[L8351]  COND TRUE   choice == 12
[L8352]              gas := gas - 21000;
[L8353]  COND TRUE   gas >= 0
[L8354]              assume value_s1257 >= 0 && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8355]              assume msgvalue_MSG == 0;
[L8356]  CALL        call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s1257 && value_s1257 <= _balances_ERC20[this][msgsender_MSG]) && value_s1257 >= 0) && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1257] >= 0) && _balances_ERC20[this][to_s1257] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_DkargoToken0 := true;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L2561]              havoc __exception;
[L2562]              revert := false;
[L2563]  COND FALSE  !(__exception)
[L2596]  CALL        call __ret_0_ := transfer~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5896]  COND TRUE   DType[this] == DkargoToken
[L5897]  CALL        call ret_s1257 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L4997]  COND TRUE   DType[this] == DkargoToken
[L4998]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L5226]              __var_20 := null;
[L5227]  COND TRUE   !(sender_s956 != null)
[L5228]              revert := true;
[L4998]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L4999]  COND TRUE   revert
[L5897]  RET         call ret_s1257 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5898]  COND TRUE   revert
[L2596]  RET         call __ret_0_ := transfer~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2597]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && _supply_ERC20[this] == old(_supply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _name_DkargoToken[this] == old(_name_DkargoToken[this])) && _symbol_DkargoToken[this] == old(_symbol_DkargoToken[this])) && _dkargoPrefix_DkargoPrefix[this] == old(_dkargoPrefix_DkargoPrefix[this])) && _infcs_ERC165[this] == old(_infcs_ERC165[this])) && _slist_AddressChain[this] == old(_slist_AddressChain[this])) && _owner_Ownership[this] == old(_owner_Ownership[this]));
[L2]                 revert := revert_hold;
[L8356]  RET         call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L8450]  RET         call CorralChoice_DkargoToken(this);

Loop:
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND FALSE  !(choice == 23)
[L8291]  COND FALSE  !(choice == 22)
[L8297]  COND FALSE  !(choice == 21)
[L8303]  COND FALSE  !(choice == 20)
[L8309]  COND FALSE  !(choice == 19)
[L8315]  COND FALSE  !(choice == 18)
[L8321]  COND FALSE  !(choice == 17)
[L8327]  COND FALSE  !(choice == 16)
[L8333]  COND FALSE  !(choice == 15)
[L8339]  COND FALSE  !(choice == 14)
[L8345]  COND FALSE  !(choice == 13)
[L8351]  COND TRUE   choice == 12
[L8352]              gas := gas - 21000;
[L8353]  COND TRUE   gas >= 0
[L8354]              assume value_s1257 >= 0 && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8355]              assume msgvalue_MSG == 0;
[L8356]  CALL        call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s1257 && value_s1257 <= _balances_ERC20[this][msgsender_MSG]) && value_s1257 >= 0) && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1257] >= 0) && _balances_ERC20[this][to_s1257] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_DkargoToken0 := true;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L2561]              havoc __exception;
[L2562]              revert := false;
[L2563]  COND FALSE  !(__exception)
[L2596]  CALL        call __ret_0_ := transfer~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5896]  COND TRUE   DType[this] == DkargoToken
[L5897]  CALL        call ret_s1257 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L4997]  COND TRUE   DType[this] == DkargoToken
[L4998]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L5226]              __var_20 := null;
[L5227]  COND TRUE   !(sender_s956 != null)
[L5228]              revert := true;
[L4998]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L4999]  COND TRUE   revert
[L5897]  RET         call ret_s1257 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5898]  COND TRUE   revert
[L2596]  RET         call __ret_0_ := transfer~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2597]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && _supply_ERC20[this] == old(_supply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _name_DkargoToken[this] == old(_name_DkargoToken[this])) && _symbol_DkargoToken[this] == old(_symbol_DkargoToken[this])) && _dkargoPrefix_DkargoPrefix[this] == old(_dkargoPrefix_DkargoPrefix[this])) && _infcs_ERC165[this] == old(_infcs_ERC165[this])) && _slist_AddressChain[this] == old(_slist_AddressChain[this])) && _owner_Ownership[this] == old(_owner_Ownership[this]));
[L2]                 revert := revert_hold;
[L8356]  RET         call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L8450]  RET         call CorralChoice_DkargoToken(this);

[2020-11-25 14:00:47,511 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:00:47,511 INFO  L82        PathProgramCache]: Analyzing trace with hash 1203618213, now seen corresponding path program 1 times
[2020-11-25 14:00:47,512 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:00:47,522 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:00:47,584 INFO  L134       CoverageAnalysis]: Checked inductivity of 10 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 10 trivial. 0 not checked.
[2020-11-25 14:00:47,584 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 14:00:47,584 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [8] imperfect sequences [] total 8
[2020-11-25 14:00:47,585 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:00:47,585 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 14:00:47,585 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 14:00:47,585 INFO  L87              Difference]: Start difference. First operand 5197 states and 5990 transitions. cyclomatic complexity: 795 Second operand 8 states.
[2020-11-25 14:00:47,685 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:00:47,686 INFO  L93              Difference]: Finished difference Result 5217 states and 6014 transitions.
[2020-11-25 14:00:47,686 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 14:00:47,686 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5217 states and 6014 transitions.
[2020-11-25 14:00:47,700 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:00:47,717 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5217 states to 5196 states and 5988 transitions.
[2020-11-25 14:00:47,717 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1079
[2020-11-25 14:00:47,718 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1079
[2020-11-25 14:00:47,718 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5196 states and 5988 transitions.
[2020-11-25 14:00:47,722 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:00:47,722 INFO  L728         BuchiCegarLoop]: Abstraction has 5196 states and 5988 transitions.
[2020-11-25 14:00:47,727 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5196 states and 5988 transitions.
[2020-11-25 14:00:47,762 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5196 to 5196.
[2020-11-25 14:00:47,762 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5196 states.
[2020-11-25 14:00:47,768 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5196 states to 5196 states and 5988 transitions.
[2020-11-25 14:00:47,768 INFO  L751         BuchiCegarLoop]: Abstraction has 5196 states and 5988 transitions.
[2020-11-25 14:00:47,768 INFO  L631         BuchiCegarLoop]: Abstraction has 5196 states and 5988 transitions.
[2020-11-25 14:00:47,769 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 14:00:47,769 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5196 states and 5988 transitions.
[2020-11-25 14:00:47,776 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:00:47,776 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:00:47,776 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:00:47,778 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:00:47,778 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_DkargoToken0 := false;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]     CALL        call main();
[L8440]              assume null == 0;
[L8441]  CALL        call this := FreshRefGenerator__success();
[L3983]              havoc newRef;
[L3984]              assume Alloc[newRef] == false;
[L3985]              Alloc[newRef] := true;
[L3986]              assume newRef != null;
[L8441]  RET         call this := FreshRefGenerator__success();
[L8442]              assume now >= 0;
[L8443]              assume DType[this] == DkargoToken;
[L8444]              assume msgvalue_MSG == 0;
[L8445]              gas := gas - 53000;
[L8446]  CALL        call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2403]              havoc __exception;
[L2404]              revert := false;
[L2405]  COND FALSE  !(__exception)
[L2438]  CALL        call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5753]  CALL        call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L4104]  CALL        call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4086]              assume msgsender_MSG != null;
[L4087]              Balance[this] := 0;
[L4088]              _owner_Ownership[this] := null;
[L4090]              assert { :EventEmitted "OwnershipTransferred_Ownership" } true;
[L4091]              _owner_Ownership[this] := msgsender_MSG;
[L4104]  RET         call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4105]  COND FALSE  !(revert)
[L5753]  RET         call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]  COND FALSE  !(revert)
[L5757]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L5757]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5758]  COND FALSE  !(revert)
[L5761]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L4913]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L4913]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]  COND FALSE  !(revert)
[L4917]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4868]              assume msgsender_MSG != null;
[L4869]              Balance[this] := 0;
[L4870]              _supply_ERC20[this] := 0;
[L4871]              _balances_ERC20[this] := zeroRefintArr();
[L4872]              sum__balances1[this] := 0;
[L4873]              _allowances_ERC20[this] := zeroRefRefintArr();
[L4874]              sum__allowances2[this] := 0;
[L4876]              pebs_s747 := supply_s747;
[L4877]  COND TRUE   DType[this] == DkargoToken
[L4878]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L5282]              __var_24 := null;
[L5283]  COND FALSE  !(!(account_s999 != null))
[L5287]  CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND TRUE   !(c_s130 >= a_s130)
[L4214]              revert := true;
[L5287]  RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L5288]  COND TRUE   revert
[L4878]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L4879]  COND TRUE   revert
[L4917]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4918]  COND TRUE   revert
[L5761]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L5762]  COND TRUE   revert
[L2438]  RET         call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2439]              assume !revert && gas >= 0;
[L8446]  RET         call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L8447]              assume !revert && gas >= 0;
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND FALSE  !(choice == 23)
[L8291]  COND FALSE  !(choice == 22)
[L8297]  COND FALSE  !(choice == 21)
[L8303]  COND FALSE  !(choice == 20)
[L8309]  COND FALSE  !(choice == 19)
[L8315]  COND FALSE  !(choice == 18)
[L8321]  COND FALSE  !(choice == 17)
[L8327]  COND FALSE  !(choice == 16)
[L8333]  COND FALSE  !(choice == 15)
[L8339]  COND FALSE  !(choice == 14)
[L8345]  COND FALSE  !(choice == 13)
[L8351]  COND TRUE   choice == 12
[L8352]              gas := gas - 21000;
[L8353]  COND TRUE   gas >= 0
[L8354]              assume value_s1257 >= 0 && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8355]              assume msgvalue_MSG == 0;
[L8356]  CALL        call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s1257 && value_s1257 <= _balances_ERC20[this][msgsender_MSG]) && value_s1257 >= 0) && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1257] >= 0) && _balances_ERC20[this][to_s1257] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_DkargoToken0 := true;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L2561]              havoc __exception;
[L2562]              revert := false;
[L2563]  COND FALSE  !(__exception)
[L2596]  CALL        call __ret_0_ := transfer~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5896]  COND TRUE   DType[this] == DkargoToken
[L5897]  CALL        call ret_s1257 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L4997]  COND TRUE   DType[this] == DkargoToken
[L4998]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L5226]              __var_20 := null;
[L5227]  COND TRUE   !(sender_s956 != null)
[L5228]              revert := true;
[L4998]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L4999]  COND TRUE   revert
[L5897]  RET         call ret_s1257 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5898]  COND TRUE   revert
[L2596]  RET         call __ret_0_ := transfer~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2597]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && _supply_ERC20[this] == old(_supply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _name_DkargoToken[this] == old(_name_DkargoToken[this])) && _symbol_DkargoToken[this] == old(_symbol_DkargoToken[this])) && _dkargoPrefix_DkargoPrefix[this] == old(_dkargoPrefix_DkargoPrefix[this])) && _infcs_ERC165[this] == old(_infcs_ERC165[this])) && _slist_AddressChain[this] == old(_slist_AddressChain[this])) && _owner_Ownership[this] == old(_owner_Ownership[this]));
[L2]                 revert := revert_hold;
[L8356]  RET         call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L8450]  RET         call CorralChoice_DkargoToken(this);

Loop:
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND FALSE  !(choice == 23)
[L8291]  COND FALSE  !(choice == 22)
[L8297]  COND FALSE  !(choice == 21)
[L8303]  COND FALSE  !(choice == 20)
[L8309]  COND FALSE  !(choice == 19)
[L8315]  COND FALSE  !(choice == 18)
[L8321]  COND FALSE  !(choice == 17)
[L8327]  COND FALSE  !(choice == 16)
[L8333]  COND FALSE  !(choice == 15)
[L8339]  COND FALSE  !(choice == 14)
[L8345]  COND FALSE  !(choice == 13)
[L8351]  COND TRUE   choice == 12
[L8352]              gas := gas - 21000;
[L8353]  COND TRUE   gas >= 0
[L8354]              assume value_s1257 >= 0 && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8355]              assume msgvalue_MSG == 0;
[L8356]  CALL        call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s1257 && value_s1257 <= _balances_ERC20[this][msgsender_MSG]) && value_s1257 >= 0) && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1257] >= 0) && _balances_ERC20[this][to_s1257] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_DkargoToken0 := true;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L2561]              havoc __exception;
[L2562]              revert := false;
[L2563]  COND FALSE  !(__exception)
[L2596]  CALL        call __ret_0_ := transfer~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5896]  COND TRUE   DType[this] == DkargoToken
[L5897]  CALL        call ret_s1257 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L4997]  COND TRUE   DType[this] == DkargoToken
[L4998]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L5226]              __var_20 := null;
[L5227]  COND TRUE   !(sender_s956 != null)
[L5228]              revert := true;
[L4998]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L4999]  COND TRUE   revert
[L5897]  RET         call ret_s1257 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5898]  COND TRUE   revert
[L2596]  RET         call __ret_0_ := transfer~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2597]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && _supply_ERC20[this] == old(_supply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _name_DkargoToken[this] == old(_name_DkargoToken[this])) && _symbol_DkargoToken[this] == old(_symbol_DkargoToken[this])) && _dkargoPrefix_DkargoPrefix[this] == old(_dkargoPrefix_DkargoPrefix[this])) && _infcs_ERC165[this] == old(_infcs_ERC165[this])) && _slist_AddressChain[this] == old(_slist_AddressChain[this])) && _owner_Ownership[this] == old(_owner_Ownership[this]));
[L2]                 revert := revert_hold;
[L8356]  RET         call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L8450]  RET         call CorralChoice_DkargoToken(this);

[2020-11-25 14:00:47,782 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:00:47,782 INFO  L82        PathProgramCache]: Analyzing trace with hash 2056898726, now seen corresponding path program 1 times
[2020-11-25 14:00:47,783 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:00:47,794 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:00:47,857 INFO  L134       CoverageAnalysis]: Checked inductivity of 10 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 10 trivial. 0 not checked.
[2020-11-25 14:00:47,857 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 14:00:47,858 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 14:00:47,858 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:00:47,858 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 14:00:47,858 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 14:00:47,858 INFO  L87              Difference]: Start difference. First operand 5196 states and 5988 transitions. cyclomatic complexity: 794 Second operand 3 states.
[2020-11-25 14:00:47,944 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:00:47,944 INFO  L93              Difference]: Finished difference Result 5882 states and 6652 transitions.
[2020-11-25 14:00:47,944 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 14:00:47,944 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5882 states and 6652 transitions.
[2020-11-25 14:00:47,956 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 14:00:47,970 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5882 states to 5515 states and 6208 transitions.
[2020-11-25 14:00:47,970 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1197
[2020-11-25 14:00:47,971 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1259
[2020-11-25 14:00:47,971 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5515 states and 6208 transitions.
[2020-11-25 14:00:47,976 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:00:47,976 INFO  L728         BuchiCegarLoop]: Abstraction has 5515 states and 6208 transitions.
[2020-11-25 14:00:47,980 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5515 states and 6208 transitions.
[2020-11-25 14:00:48,007 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5515 to 4897.
[2020-11-25 14:00:48,007 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4897 states.
[2020-11-25 14:00:48,012 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4897 states to 4897 states and 5428 transitions.
[2020-11-25 14:00:48,012 INFO  L751         BuchiCegarLoop]: Abstraction has 4897 states and 5428 transitions.
[2020-11-25 14:00:48,012 INFO  L631         BuchiCegarLoop]: Abstraction has 4897 states and 5428 transitions.
[2020-11-25 14:00:48,012 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 14:00:48,012 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4897 states and 5428 transitions.
[2020-11-25 14:00:48,017 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:00:48,017 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:00:48,017 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:00:48,019 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:00:48,019 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_DkargoToken0 := false;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]     CALL        call main();
[L8440]              assume null == 0;
[L8441]  CALL        call this := FreshRefGenerator__success();
[L3983]              havoc newRef;
[L3984]              assume Alloc[newRef] == false;
[L3985]              Alloc[newRef] := true;
[L3986]              assume newRef != null;
[L8441]  RET         call this := FreshRefGenerator__success();
[L8442]              assume now >= 0;
[L8443]              assume DType[this] == DkargoToken;
[L8444]              assume msgvalue_MSG == 0;
[L8445]              gas := gas - 53000;
[L8446]  CALL        call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2403]              havoc __exception;
[L2404]              revert := false;
[L2405]  COND FALSE  !(__exception)
[L2438]  CALL        call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5753]  CALL        call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L4104]  CALL        call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4086]              assume msgsender_MSG != null;
[L4087]              Balance[this] := 0;
[L4088]              _owner_Ownership[this] := null;
[L4090]              assert { :EventEmitted "OwnershipTransferred_Ownership" } true;
[L4091]              _owner_Ownership[this] := msgsender_MSG;
[L4104]  RET         call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4105]  COND FALSE  !(revert)
[L5753]  RET         call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]  COND FALSE  !(revert)
[L5757]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L5757]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5758]  COND FALSE  !(revert)
[L5761]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L4913]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L4913]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]  COND FALSE  !(revert)
[L4917]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4868]              assume msgsender_MSG != null;
[L4869]              Balance[this] := 0;
[L4870]              _supply_ERC20[this] := 0;
[L4871]              _balances_ERC20[this] := zeroRefintArr();
[L4872]              sum__balances1[this] := 0;
[L4873]              _allowances_ERC20[this] := zeroRefRefintArr();
[L4874]              sum__allowances2[this] := 0;
[L4876]              pebs_s747 := supply_s747;
[L4877]  COND TRUE   DType[this] == DkargoToken
[L4878]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L5282]              __var_24 := null;
[L5283]  COND FALSE  !(!(account_s999 != null))
[L5287]  CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5287]  RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L5288]  COND FALSE  !(revert)
[L5291]              _supply_ERC20[this] := __var_25;
[L5292]  CALL        call __var_26 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s999], amount_s999);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5292]  RET         call __var_26 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s999], amount_s999);
[L5293]  COND FALSE  !(revert)
[L5296]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][account_s999];
[L5297]              _balances_ERC20[this][account_s999] := __var_26;
[L5298]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][account_s999];
[L5299]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4878]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L4879]  COND FALSE  !(revert)
[L4917]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4918]  COND FALSE  !(revert)
[L5761]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L5762]  COND FALSE  !(revert)
[L5765]  CALL        call ERC20Safe_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG);
[L5381]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L5381]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5382]  COND FALSE  !(revert)
[L5385]  CALL        call ERC20Safe_ERC20Safe_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5362]              assume msgsender_MSG != null;
[L5363]              Balance[this] := 0;
[L5385]  RET         call ERC20Safe_ERC20Safe_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5386]  COND FALSE  !(revert)
[L5765]  RET         call ERC20Safe_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]  COND FALSE  !(revert)
[L5769]  CALL        call AddressChain_AddressChain__success(this, msgsender_MSG, msgvalue_MSG);
[L4361]  CALL        call AddressChain_AddressChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4340]              assume msgsender_MSG != null;
[L4341]              Balance[this] := 0;
[L4343]  CALL        call __var_3 := FreshRefGenerator__success();
[L3983]              havoc newRef;
[L3984]              assume Alloc[newRef] == false;
[L3985]              Alloc[newRef] := true;
[L3986]              assume newRef != null;
[L4343]  RET         call __var_3 := FreshRefGenerator__success();
[L4344]  COND FALSE  !(revert)
[L4347]              _slist_AddressChain[this] := __var_3;
[L4361]  RET         call AddressChain_AddressChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4362]  COND FALSE  !(revert)
[L5769]  RET         call AddressChain_AddressChain__success(this, msgsender_MSG, msgvalue_MSG);
[L5770]  COND FALSE  !(revert)
[L5773]  CALL        call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4689]  CALL        call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4674]              assume msgsender_MSG != null;
[L4675]              Balance[this] := 0;
[L4689]  RET         call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4690]  COND FALSE  !(revert)
[L5773]  RET         call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L5774]  COND FALSE  !(revert)
[L5777]  CALL        call ERC165_ERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4759]  CALL        call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4689]  CALL        call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4674]              assume msgsender_MSG != null;
[L4675]              Balance[this] := 0;
[L4689]  RET         call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4690]  COND FALSE  !(revert)
[L4759]  RET         call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4760]  COND FALSE  !(revert)
[L4763]  CALL        call ERC165_ERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4723]              assume msgsender_MSG != null;
[L4724]              Balance[this] := 0;
[L4725]              _infcs_ERC165[this] := zerointboolArr();
[L4727]              __var_16 := 33540519;
[L4728]  COND TRUE   DType[this] == DkargoToken
[L4729]  CALL        call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, 33540519);
[L4792]  COND FALSE  !(!(infcid_s644 != -1))
[L4796]              _infcs_ERC165[this][infcid_s644] := true;
[L4729]  RET         call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, 33540519);
[L4730]  COND FALSE  !(revert)
[L4763]  RET         call ERC165_ERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4764]  COND FALSE  !(revert)
[L5777]  RET         call ERC165_ERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L5778]  COND FALSE  !(revert)
[L5781]  CALL        call DkargoPrefix_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG);
[L4045]  CALL        call DkargoPrefix_DkargoPrefix_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4029]              assume msgsender_MSG != null;
[L4030]              Balance[this] := 0;
[L4031]              _dkargoPrefix_DkargoPrefix[this] := -1676636045;
[L4045]  RET         call DkargoPrefix_DkargoPrefix_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4046]  COND FALSE  !(revert)
[L5781]  RET         call DkargoPrefix_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]  COND FALSE  !(revert)
[L5785]  CALL        call DkargoToken_DkargoToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5675]              assume msgsender_MSG != null;
[L5676]              Balance[this] := 0;
[L5677]              _name_DkargoToken[this] := -1676636045;
[L5678]              _symbol_DkargoToken[this] := -1676636045;
[L5680]  COND TRUE   DType[this] == DkargoToken
[L5681]  CALL        call _setDkargoPrefix~string_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG, 978340553);
[L4070]              _dkargoPrefix_DkargoPrefix[this] := prefix_s21;
[L5681]  RET         call _setDkargoPrefix~string_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG, 978340553);
[L5682]  COND FALSE  !(revert)
[L5688]              __var_39 := -1804674067;
[L5689]  COND TRUE   DType[this] == DkargoToken
[L5690]  CALL        call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, -1804674067);
[L4792]  COND FALSE  !(!(infcid_s644 != -1))
[L4796]              _infcs_ERC165[this][infcid_s644] := true;
[L5690]  RET         call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, -1804674067);
[L5691]  COND FALSE  !(revert)
[L5697]              _name_DkargoToken[this] := name_s1191;
[L5698]              _symbol_DkargoToken[this] := symbol_s1191;
[L5699]  COND TRUE   DType[this] == DkargoToken
[L5700]  CALL        call _linkChain~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4504]              __var_6 := null;
[L4505]  COND FALSE  !(!(node_s455 != null))
[L4509]  COND TRUE   DType[this] == DkargoToken
[L4510]  CALL        call __var_7 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4446]  COND TRUE   (count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376
[L4447]              __ret_0_ := true;
[L4510]  RET         call __var_7 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4511]  COND FALSE  !(revert)
[L4522]  COND FALSE  !(!!__var_7)
[L4526]  COND TRUE   count_AddressChain.NodeList[_slist_AddressChain[this]] == 0
[L4527]              tail_AddressChain.NodeList[_slist_AddressChain[this]] := node_s455;
[L4528]              head_AddressChain.NodeList[_slist_AddressChain[this]] := node_s455;
[L4534]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, count_AddressChain.NodeList[_slist_AddressChain[this]], 1);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L4534]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, count_AddressChain.NodeList[_slist_AddressChain[this]], 1);
[L4535]  COND FALSE  !(revert)
[L4538]              count_AddressChain.NodeList[_slist_AddressChain[this]] := __var_8;
[L4539]              assert { :EventEmitted "AddressChainLinked_AddressChain" } true;
[L5700]  RET         call _linkChain~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5701]  COND FALSE  !(revert)
[L5785]  RET         call DkargoToken_DkargoToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5786]  COND FALSE  !(revert)
[L2438]  RET         call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2439]              assume !revert && gas >= 0;
[L8446]  RET         call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L8447]              assume !revert && gas >= 0;
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND FALSE  !(choice == 23)
[L8291]  COND FALSE  !(choice == 22)
[L8297]  COND FALSE  !(choice == 21)
[L8303]  COND FALSE  !(choice == 20)
[L8309]  COND FALSE  !(choice == 19)
[L8315]  COND FALSE  !(choice == 18)
[L8321]  COND FALSE  !(choice == 17)
[L8327]  COND FALSE  !(choice == 16)
[L8333]  COND FALSE  !(choice == 15)
[L8339]  COND FALSE  !(choice == 14)
[L8345]  COND FALSE  !(choice == 13)
[L8351]  COND TRUE   choice == 12
[L8352]              gas := gas - 21000;
[L8353]  COND TRUE   gas >= 0
[L8354]              assume value_s1257 >= 0 && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8355]              assume msgvalue_MSG == 0;
[L8356]  CALL        call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s1257 && value_s1257 <= _balances_ERC20[this][msgsender_MSG]) && value_s1257 >= 0) && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1257] >= 0) && _balances_ERC20[this][to_s1257] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_DkargoToken0 := true;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L2561]              havoc __exception;
[L2562]              revert := false;
[L2563]  COND TRUE   __exception
[L2564]              __tmp__Balance := Balance;
[L2565]              __tmp__DType := DType;
[L2566]              __tmp__Alloc := Alloc;
[L2567]              __tmp__balance_ADDR := balance_ADDR;
[L2568]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L2569]              __tmp__sum := sum;
[L2570]              __tmp__M_int_bool := M_int_bool;
[L2571]              __tmp__sum__infcs0 := sum__infcs0;
[L2572]              __tmp__M_Ref_int := M_Ref_int;
[L2573]              __tmp__sum__balances1 := sum__balances1;
[L2574]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2575]              __tmp__sum__allowances2 := sum__allowances2;
[L2576]              __tmp__Length := Length;
[L2577]              __tmp__now := now;
[L2578]              __tmp___dkargoPrefix_DkargoPrefix := _dkargoPrefix_DkargoPrefix;
[L2579]              __tmp___owner_Ownership := _owner_Ownership;
[L2580]              __tmp__prev_AddressChain.NodeInfo := prev_AddressChain.NodeInfo;
[L2581]              __tmp__next_AddressChain.NodeInfo := next_AddressChain.NodeInfo;
[L2582]              __tmp__count_AddressChain.NodeList := count_AddressChain.NodeList;
[L2583]              __tmp__head_AddressChain.NodeList := head_AddressChain.NodeList;
[L2584]              __tmp__tail_AddressChain.NodeList := tail_AddressChain.NodeList;
[L2585]              __tmp__map_AddressChain.NodeList := map_AddressChain.NodeList;
[L2586]              __tmp___slist_AddressChain := _slist_AddressChain;
[L2587]              __tmp___infcs_ERC165 := _infcs_ERC165;
[L2588]              __tmp___supply_ERC20 := _supply_ERC20;
[L2589]              __tmp___balances_ERC20 := _balances_ERC20;
[L2590]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L2591]              __tmp___name_DkargoToken := _name_DkargoToken;
[L2592]              __tmp___symbol_DkargoToken := _symbol_DkargoToken;
[L2593]  CALL        call __ret_0_ := transfer~address~uint256_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5823]  COND TRUE   __tmp__DType[this] == DkargoToken
[L5824]  CALL        call ret_s1257 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L4973]  COND TRUE   __tmp__DType[this] == DkargoToken
[L4974]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L5194]              __var_20 := null;
[L5195]  COND TRUE   !(sender_s956 != null)
[L5196]              revert := true;
[L4974]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L4975]  COND TRUE   revert
[L5824]  RET         call ret_s1257 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5825]  COND TRUE   revert
[L2593]  RET         call __ret_0_ := transfer~address~uint256_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2594]              assume revert || gas < 0;
[L8356]  RET         call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L8450]  RET         call CorralChoice_DkargoToken(this);

Loop:
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND FALSE  !(choice == 23)
[L8291]  COND FALSE  !(choice == 22)
[L8297]  COND FALSE  !(choice == 21)
[L8303]  COND FALSE  !(choice == 20)
[L8309]  COND FALSE  !(choice == 19)
[L8315]  COND FALSE  !(choice == 18)
[L8321]  COND FALSE  !(choice == 17)
[L8327]  COND FALSE  !(choice == 16)
[L8333]  COND FALSE  !(choice == 15)
[L8339]  COND FALSE  !(choice == 14)
[L8345]  COND FALSE  !(choice == 13)
[L8351]  COND TRUE   choice == 12
[L8352]              gas := gas - 21000;
[L8353]  COND TRUE   gas >= 0
[L8354]              assume value_s1257 >= 0 && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8355]              assume msgvalue_MSG == 0;
[L8356]  CALL        call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s1257 && value_s1257 <= _balances_ERC20[this][msgsender_MSG]) && value_s1257 >= 0) && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1257] >= 0) && _balances_ERC20[this][to_s1257] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_DkargoToken0 := true;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L2561]              havoc __exception;
[L2562]              revert := false;
[L2563]  COND TRUE   __exception
[L2564]              __tmp__Balance := Balance;
[L2565]              __tmp__DType := DType;
[L2566]              __tmp__Alloc := Alloc;
[L2567]              __tmp__balance_ADDR := balance_ADDR;
[L2568]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L2569]              __tmp__sum := sum;
[L2570]              __tmp__M_int_bool := M_int_bool;
[L2571]              __tmp__sum__infcs0 := sum__infcs0;
[L2572]              __tmp__M_Ref_int := M_Ref_int;
[L2573]              __tmp__sum__balances1 := sum__balances1;
[L2574]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2575]              __tmp__sum__allowances2 := sum__allowances2;
[L2576]              __tmp__Length := Length;
[L2577]              __tmp__now := now;
[L2578]              __tmp___dkargoPrefix_DkargoPrefix := _dkargoPrefix_DkargoPrefix;
[L2579]              __tmp___owner_Ownership := _owner_Ownership;
[L2580]              __tmp__prev_AddressChain.NodeInfo := prev_AddressChain.NodeInfo;
[L2581]              __tmp__next_AddressChain.NodeInfo := next_AddressChain.NodeInfo;
[L2582]              __tmp__count_AddressChain.NodeList := count_AddressChain.NodeList;
[L2583]              __tmp__head_AddressChain.NodeList := head_AddressChain.NodeList;
[L2584]              __tmp__tail_AddressChain.NodeList := tail_AddressChain.NodeList;
[L2585]              __tmp__map_AddressChain.NodeList := map_AddressChain.NodeList;
[L2586]              __tmp___slist_AddressChain := _slist_AddressChain;
[L2587]              __tmp___infcs_ERC165 := _infcs_ERC165;
[L2588]              __tmp___supply_ERC20 := _supply_ERC20;
[L2589]              __tmp___balances_ERC20 := _balances_ERC20;
[L2590]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L2591]              __tmp___name_DkargoToken := _name_DkargoToken;
[L2592]              __tmp___symbol_DkargoToken := _symbol_DkargoToken;
[L2593]  CALL        call __ret_0_ := transfer~address~uint256_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5823]  COND TRUE   __tmp__DType[this] == DkargoToken
[L5824]  CALL        call ret_s1257 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L4973]  COND TRUE   __tmp__DType[this] == DkargoToken
[L4974]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L5194]              __var_20 := null;
[L5195]  COND TRUE   !(sender_s956 != null)
[L5196]              revert := true;
[L4974]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L4975]  COND TRUE   revert
[L5824]  RET         call ret_s1257 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5825]  COND TRUE   revert
[L2593]  RET         call __ret_0_ := transfer~address~uint256_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2594]              assume revert || gas < 0;
[L8356]  RET         call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L8450]  RET         call CorralChoice_DkargoToken(this);

[2020-11-25 14:00:48,024 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:00:48,024 INFO  L82        PathProgramCache]: Analyzing trace with hash -540196722, now seen corresponding path program 1 times
[2020-11-25 14:00:48,025 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:00:48,043 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:00:48,109 INFO  L134       CoverageAnalysis]: Checked inductivity of 65 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 65 trivial. 0 not checked.
[2020-11-25 14:00:48,109 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 14:00:48,109 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 14:00:48,110 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:00:48,110 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 14:00:48,110 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 14:00:48,110 INFO  L87              Difference]: Start difference. First operand 4897 states and 5428 transitions. cyclomatic complexity: 533 Second operand 4 states.
[2020-11-25 14:00:48,134 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:00:48,134 INFO  L93              Difference]: Finished difference Result 4911 states and 5456 transitions.
[2020-11-25 14:00:48,134 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 14:00:48,134 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4911 states and 5456 transitions.
[2020-11-25 14:00:48,142 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:00:48,155 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4911 states to 4901 states and 5444 transitions.
[2020-11-25 14:00:48,155 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1097
[2020-11-25 14:00:48,155 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1097
[2020-11-25 14:00:48,155 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4901 states and 5444 transitions.
[2020-11-25 14:00:48,159 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:00:48,159 INFO  L728         BuchiCegarLoop]: Abstraction has 4901 states and 5444 transitions.
[2020-11-25 14:00:48,163 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4901 states and 5444 transitions.
[2020-11-25 14:00:48,193 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4901 to 4901.
[2020-11-25 14:00:48,193 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4901 states.
[2020-11-25 14:00:48,198 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4901 states to 4901 states and 5444 transitions.
[2020-11-25 14:00:48,198 INFO  L751         BuchiCegarLoop]: Abstraction has 4901 states and 5444 transitions.
[2020-11-25 14:00:48,198 INFO  L631         BuchiCegarLoop]: Abstraction has 4901 states and 5444 transitions.
[2020-11-25 14:00:48,198 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 14:00:48,198 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4901 states and 5444 transitions.
[2020-11-25 14:00:48,203 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:00:48,203 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:00:48,203 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:00:48,205 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:00:48,205 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_DkargoToken0 := false;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]     CALL        call main();
[L8440]              assume null == 0;
[L8441]  CALL        call this := FreshRefGenerator__success();
[L3983]              havoc newRef;
[L3984]              assume Alloc[newRef] == false;
[L3985]              Alloc[newRef] := true;
[L3986]              assume newRef != null;
[L8441]  RET         call this := FreshRefGenerator__success();
[L8442]              assume now >= 0;
[L8443]              assume DType[this] == DkargoToken;
[L8444]              assume msgvalue_MSG == 0;
[L8445]              gas := gas - 53000;
[L8446]  CALL        call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2403]              havoc __exception;
[L2404]              revert := false;
[L2405]  COND FALSE  !(__exception)
[L2438]  CALL        call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5753]  CALL        call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L4104]  CALL        call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4086]              assume msgsender_MSG != null;
[L4087]              Balance[this] := 0;
[L4088]              _owner_Ownership[this] := null;
[L4090]              assert { :EventEmitted "OwnershipTransferred_Ownership" } true;
[L4091]              _owner_Ownership[this] := msgsender_MSG;
[L4104]  RET         call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4105]  COND FALSE  !(revert)
[L5753]  RET         call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]  COND FALSE  !(revert)
[L5757]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L5757]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5758]  COND FALSE  !(revert)
[L5761]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L4913]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L4913]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]  COND FALSE  !(revert)
[L4917]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4868]              assume msgsender_MSG != null;
[L4869]              Balance[this] := 0;
[L4870]              _supply_ERC20[this] := 0;
[L4871]              _balances_ERC20[this] := zeroRefintArr();
[L4872]              sum__balances1[this] := 0;
[L4873]              _allowances_ERC20[this] := zeroRefRefintArr();
[L4874]              sum__allowances2[this] := 0;
[L4876]              pebs_s747 := supply_s747;
[L4877]  COND TRUE   DType[this] == DkargoToken
[L4878]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L5282]              __var_24 := null;
[L5283]  COND FALSE  !(!(account_s999 != null))
[L5287]  CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5287]  RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L5288]  COND FALSE  !(revert)
[L5291]              _supply_ERC20[this] := __var_25;
[L5292]  CALL        call __var_26 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s999], amount_s999);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5292]  RET         call __var_26 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s999], amount_s999);
[L5293]  COND FALSE  !(revert)
[L5296]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][account_s999];
[L5297]              _balances_ERC20[this][account_s999] := __var_26;
[L5298]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][account_s999];
[L5299]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4878]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L4879]  COND FALSE  !(revert)
[L4917]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4918]  COND FALSE  !(revert)
[L5761]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L5762]  COND FALSE  !(revert)
[L5765]  CALL        call ERC20Safe_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG);
[L5381]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L5381]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5382]  COND FALSE  !(revert)
[L5385]  CALL        call ERC20Safe_ERC20Safe_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5362]              assume msgsender_MSG != null;
[L5363]              Balance[this] := 0;
[L5385]  RET         call ERC20Safe_ERC20Safe_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5386]  COND FALSE  !(revert)
[L5765]  RET         call ERC20Safe_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]  COND FALSE  !(revert)
[L5769]  CALL        call AddressChain_AddressChain__success(this, msgsender_MSG, msgvalue_MSG);
[L4361]  CALL        call AddressChain_AddressChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4340]              assume msgsender_MSG != null;
[L4341]              Balance[this] := 0;
[L4343]  CALL        call __var_3 := FreshRefGenerator__success();
[L3983]              havoc newRef;
[L3984]              assume Alloc[newRef] == false;
[L3985]              Alloc[newRef] := true;
[L3986]              assume newRef != null;
[L4343]  RET         call __var_3 := FreshRefGenerator__success();
[L4344]  COND FALSE  !(revert)
[L4347]              _slist_AddressChain[this] := __var_3;
[L4361]  RET         call AddressChain_AddressChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4362]  COND FALSE  !(revert)
[L5769]  RET         call AddressChain_AddressChain__success(this, msgsender_MSG, msgvalue_MSG);
[L5770]  COND FALSE  !(revert)
[L5773]  CALL        call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4689]  CALL        call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4674]              assume msgsender_MSG != null;
[L4675]              Balance[this] := 0;
[L4689]  RET         call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4690]  COND FALSE  !(revert)
[L5773]  RET         call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L5774]  COND FALSE  !(revert)
[L5777]  CALL        call ERC165_ERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4759]  CALL        call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4689]  CALL        call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4674]              assume msgsender_MSG != null;
[L4675]              Balance[this] := 0;
[L4689]  RET         call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4690]  COND FALSE  !(revert)
[L4759]  RET         call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4760]  COND FALSE  !(revert)
[L4763]  CALL        call ERC165_ERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4723]              assume msgsender_MSG != null;
[L4724]              Balance[this] := 0;
[L4725]              _infcs_ERC165[this] := zerointboolArr();
[L4727]              __var_16 := 33540519;
[L4728]  COND TRUE   DType[this] == DkargoToken
[L4729]  CALL        call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, 33540519);
[L4792]  COND FALSE  !(!(infcid_s644 != -1))
[L4796]              _infcs_ERC165[this][infcid_s644] := true;
[L4729]  RET         call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, 33540519);
[L4730]  COND FALSE  !(revert)
[L4763]  RET         call ERC165_ERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4764]  COND FALSE  !(revert)
[L5777]  RET         call ERC165_ERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L5778]  COND FALSE  !(revert)
[L5781]  CALL        call DkargoPrefix_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG);
[L4045]  CALL        call DkargoPrefix_DkargoPrefix_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4029]              assume msgsender_MSG != null;
[L4030]              Balance[this] := 0;
[L4031]              _dkargoPrefix_DkargoPrefix[this] := -1676636045;
[L4045]  RET         call DkargoPrefix_DkargoPrefix_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4046]  COND FALSE  !(revert)
[L5781]  RET         call DkargoPrefix_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]  COND FALSE  !(revert)
[L5785]  CALL        call DkargoToken_DkargoToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5675]              assume msgsender_MSG != null;
[L5676]              Balance[this] := 0;
[L5677]              _name_DkargoToken[this] := -1676636045;
[L5678]              _symbol_DkargoToken[this] := -1676636045;
[L5680]  COND TRUE   DType[this] == DkargoToken
[L5681]  CALL        call _setDkargoPrefix~string_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG, 978340553);
[L4070]              _dkargoPrefix_DkargoPrefix[this] := prefix_s21;
[L5681]  RET         call _setDkargoPrefix~string_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG, 978340553);
[L5682]  COND FALSE  !(revert)
[L5688]              __var_39 := -1804674067;
[L5689]  COND TRUE   DType[this] == DkargoToken
[L5690]  CALL        call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, -1804674067);
[L4792]  COND FALSE  !(!(infcid_s644 != -1))
[L4796]              _infcs_ERC165[this][infcid_s644] := true;
[L5690]  RET         call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, -1804674067);
[L5691]  COND FALSE  !(revert)
[L5697]              _name_DkargoToken[this] := name_s1191;
[L5698]              _symbol_DkargoToken[this] := symbol_s1191;
[L5699]  COND TRUE   DType[this] == DkargoToken
[L5700]  CALL        call _linkChain~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4504]              __var_6 := null;
[L4505]  COND FALSE  !(!(node_s455 != null))
[L4509]  COND TRUE   DType[this] == DkargoToken
[L4510]  CALL        call __var_7 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4446]  COND FALSE  !((count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376)
[L4450]              __var_4 := null;
[L4451]              __var_5 := null;
[L4452]              __ret_0_ := (if prev_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null && next_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null then false else true);
[L4510]  RET         call __var_7 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4511]  COND FALSE  !(revert)
[L4522]  COND FALSE  !(!!__var_7)
[L4526]  COND TRUE   count_AddressChain.NodeList[_slist_AddressChain[this]] == 0
[L4527]              tail_AddressChain.NodeList[_slist_AddressChain[this]] := node_s455;
[L4528]              head_AddressChain.NodeList[_slist_AddressChain[this]] := node_s455;
[L4534]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, count_AddressChain.NodeList[_slist_AddressChain[this]], 1);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L4534]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, count_AddressChain.NodeList[_slist_AddressChain[this]], 1);
[L4535]  COND FALSE  !(revert)
[L4538]              count_AddressChain.NodeList[_slist_AddressChain[this]] := __var_8;
[L4539]              assert { :EventEmitted "AddressChainLinked_AddressChain" } true;
[L5700]  RET         call _linkChain~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5701]  COND FALSE  !(revert)
[L5785]  RET         call DkargoToken_DkargoToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5786]  COND FALSE  !(revert)
[L2438]  RET         call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2439]              assume !revert && gas >= 0;
[L8446]  RET         call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L8447]              assume !revert && gas >= 0;
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND FALSE  !(choice == 23)
[L8291]  COND FALSE  !(choice == 22)
[L8297]  COND FALSE  !(choice == 21)
[L8303]  COND FALSE  !(choice == 20)
[L8309]  COND FALSE  !(choice == 19)
[L8315]  COND FALSE  !(choice == 18)
[L8321]  COND FALSE  !(choice == 17)
[L8327]  COND FALSE  !(choice == 16)
[L8333]  COND FALSE  !(choice == 15)
[L8339]  COND FALSE  !(choice == 14)
[L8345]  COND FALSE  !(choice == 13)
[L8351]  COND TRUE   choice == 12
[L8352]              gas := gas - 21000;
[L8353]  COND TRUE   gas >= 0
[L8354]              assume value_s1257 >= 0 && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8355]              assume msgvalue_MSG == 0;
[L8356]  CALL        call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s1257 && value_s1257 <= _balances_ERC20[this][msgsender_MSG]) && value_s1257 >= 0) && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1257] >= 0) && _balances_ERC20[this][to_s1257] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_DkargoToken0 := true;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L2561]              havoc __exception;
[L2562]              revert := false;
[L2563]  COND TRUE   __exception
[L2564]              __tmp__Balance := Balance;
[L2565]              __tmp__DType := DType;
[L2566]              __tmp__Alloc := Alloc;
[L2567]              __tmp__balance_ADDR := balance_ADDR;
[L2568]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L2569]              __tmp__sum := sum;
[L2570]              __tmp__M_int_bool := M_int_bool;
[L2571]              __tmp__sum__infcs0 := sum__infcs0;
[L2572]              __tmp__M_Ref_int := M_Ref_int;
[L2573]              __tmp__sum__balances1 := sum__balances1;
[L2574]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2575]              __tmp__sum__allowances2 := sum__allowances2;
[L2576]              __tmp__Length := Length;
[L2577]              __tmp__now := now;
[L2578]              __tmp___dkargoPrefix_DkargoPrefix := _dkargoPrefix_DkargoPrefix;
[L2579]              __tmp___owner_Ownership := _owner_Ownership;
[L2580]              __tmp__prev_AddressChain.NodeInfo := prev_AddressChain.NodeInfo;
[L2581]              __tmp__next_AddressChain.NodeInfo := next_AddressChain.NodeInfo;
[L2582]              __tmp__count_AddressChain.NodeList := count_AddressChain.NodeList;
[L2583]              __tmp__head_AddressChain.NodeList := head_AddressChain.NodeList;
[L2584]              __tmp__tail_AddressChain.NodeList := tail_AddressChain.NodeList;
[L2585]              __tmp__map_AddressChain.NodeList := map_AddressChain.NodeList;
[L2586]              __tmp___slist_AddressChain := _slist_AddressChain;
[L2587]              __tmp___infcs_ERC165 := _infcs_ERC165;
[L2588]              __tmp___supply_ERC20 := _supply_ERC20;
[L2589]              __tmp___balances_ERC20 := _balances_ERC20;
[L2590]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L2591]              __tmp___name_DkargoToken := _name_DkargoToken;
[L2592]              __tmp___symbol_DkargoToken := _symbol_DkargoToken;
[L2593]  CALL        call __ret_0_ := transfer~address~uint256_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5823]  COND TRUE   __tmp__DType[this] == DkargoToken
[L5824]  CALL        call ret_s1257 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L4973]  COND TRUE   __tmp__DType[this] == DkargoToken
[L4974]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L5194]              __var_20 := null;
[L5195]  COND TRUE   !(sender_s956 != null)
[L5196]              revert := true;
[L4974]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L4975]  COND TRUE   revert
[L5824]  RET         call ret_s1257 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5825]  COND TRUE   revert
[L2593]  RET         call __ret_0_ := transfer~address~uint256_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2594]              assume revert || gas < 0;
[L8356]  RET         call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L8450]  RET         call CorralChoice_DkargoToken(this);

Loop:
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND FALSE  !(choice == 23)
[L8291]  COND FALSE  !(choice == 22)
[L8297]  COND FALSE  !(choice == 21)
[L8303]  COND FALSE  !(choice == 20)
[L8309]  COND FALSE  !(choice == 19)
[L8315]  COND FALSE  !(choice == 18)
[L8321]  COND FALSE  !(choice == 17)
[L8327]  COND FALSE  !(choice == 16)
[L8333]  COND FALSE  !(choice == 15)
[L8339]  COND FALSE  !(choice == 14)
[L8345]  COND FALSE  !(choice == 13)
[L8351]  COND TRUE   choice == 12
[L8352]              gas := gas - 21000;
[L8353]  COND TRUE   gas >= 0
[L8354]              assume value_s1257 >= 0 && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8355]              assume msgvalue_MSG == 0;
[L8356]  CALL        call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s1257 && value_s1257 <= _balances_ERC20[this][msgsender_MSG]) && value_s1257 >= 0) && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1257] >= 0) && _balances_ERC20[this][to_s1257] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_DkargoToken0 := true;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L2561]              havoc __exception;
[L2562]              revert := false;
[L2563]  COND TRUE   __exception
[L2564]              __tmp__Balance := Balance;
[L2565]              __tmp__DType := DType;
[L2566]              __tmp__Alloc := Alloc;
[L2567]              __tmp__balance_ADDR := balance_ADDR;
[L2568]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L2569]              __tmp__sum := sum;
[L2570]              __tmp__M_int_bool := M_int_bool;
[L2571]              __tmp__sum__infcs0 := sum__infcs0;
[L2572]              __tmp__M_Ref_int := M_Ref_int;
[L2573]              __tmp__sum__balances1 := sum__balances1;
[L2574]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2575]              __tmp__sum__allowances2 := sum__allowances2;
[L2576]              __tmp__Length := Length;
[L2577]              __tmp__now := now;
[L2578]              __tmp___dkargoPrefix_DkargoPrefix := _dkargoPrefix_DkargoPrefix;
[L2579]              __tmp___owner_Ownership := _owner_Ownership;
[L2580]              __tmp__prev_AddressChain.NodeInfo := prev_AddressChain.NodeInfo;
[L2581]              __tmp__next_AddressChain.NodeInfo := next_AddressChain.NodeInfo;
[L2582]              __tmp__count_AddressChain.NodeList := count_AddressChain.NodeList;
[L2583]              __tmp__head_AddressChain.NodeList := head_AddressChain.NodeList;
[L2584]              __tmp__tail_AddressChain.NodeList := tail_AddressChain.NodeList;
[L2585]              __tmp__map_AddressChain.NodeList := map_AddressChain.NodeList;
[L2586]              __tmp___slist_AddressChain := _slist_AddressChain;
[L2587]              __tmp___infcs_ERC165 := _infcs_ERC165;
[L2588]              __tmp___supply_ERC20 := _supply_ERC20;
[L2589]              __tmp___balances_ERC20 := _balances_ERC20;
[L2590]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L2591]              __tmp___name_DkargoToken := _name_DkargoToken;
[L2592]              __tmp___symbol_DkargoToken := _symbol_DkargoToken;
[L2593]  CALL        call __ret_0_ := transfer~address~uint256_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5823]  COND TRUE   __tmp__DType[this] == DkargoToken
[L5824]  CALL        call ret_s1257 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L4973]  COND TRUE   __tmp__DType[this] == DkargoToken
[L4974]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L5194]              __var_20 := null;
[L5195]  COND TRUE   !(sender_s956 != null)
[L5196]              revert := true;
[L4974]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L4975]  COND TRUE   revert
[L5824]  RET         call ret_s1257 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5825]  COND TRUE   revert
[L2593]  RET         call __ret_0_ := transfer~address~uint256_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2594]              assume revert || gas < 0;
[L8356]  RET         call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L8450]  RET         call CorralChoice_DkargoToken(this);

[2020-11-25 14:00:48,210 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:00:48,210 INFO  L82        PathProgramCache]: Analyzing trace with hash 660955423, now seen corresponding path program 1 times
[2020-11-25 14:00:48,211 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:00:48,227 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:00:48,305 INFO  L134       CoverageAnalysis]: Checked inductivity of 65 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 65 trivial. 0 not checked.
[2020-11-25 14:00:48,306 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 14:00:48,306 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 14:00:48,306 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:00:48,307 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 14:00:48,307 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 14:00:48,307 INFO  L87              Difference]: Start difference. First operand 4901 states and 5444 transitions. cyclomatic complexity: 545 Second operand 7 states.
[2020-11-25 14:00:48,367 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:00:48,367 INFO  L93              Difference]: Finished difference Result 4937 states and 5488 transitions.
[2020-11-25 14:00:48,367 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 14:00:48,367 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4937 states and 5488 transitions.
[2020-11-25 14:00:48,377 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:00:48,386 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4937 states to 4905 states and 5452 transitions.
[2020-11-25 14:00:48,386 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1099
[2020-11-25 14:00:48,387 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1099
[2020-11-25 14:00:48,387 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4905 states and 5452 transitions.
[2020-11-25 14:00:48,390 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:00:48,390 INFO  L728         BuchiCegarLoop]: Abstraction has 4905 states and 5452 transitions.
[2020-11-25 14:00:48,394 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4905 states and 5452 transitions.
[2020-11-25 14:00:48,421 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4905 to 4905.
[2020-11-25 14:00:48,421 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4905 states.
[2020-11-25 14:00:48,425 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4905 states to 4905 states and 5452 transitions.
[2020-11-25 14:00:48,426 INFO  L751         BuchiCegarLoop]: Abstraction has 4905 states and 5452 transitions.
[2020-11-25 14:00:48,426 INFO  L631         BuchiCegarLoop]: Abstraction has 4905 states and 5452 transitions.
[2020-11-25 14:00:48,426 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 14:00:48,426 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4905 states and 5452 transitions.
[2020-11-25 14:00:48,431 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:00:48,431 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:00:48,431 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:00:48,432 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:00:48,432 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_DkargoToken0 := false;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]     CALL        call main();
[L8440]              assume null == 0;
[L8441]  CALL        call this := FreshRefGenerator__success();
[L3983]              havoc newRef;
[L3984]              assume Alloc[newRef] == false;
[L3985]              Alloc[newRef] := true;
[L3986]              assume newRef != null;
[L8441]  RET         call this := FreshRefGenerator__success();
[L8442]              assume now >= 0;
[L8443]              assume DType[this] == DkargoToken;
[L8444]              assume msgvalue_MSG == 0;
[L8445]              gas := gas - 53000;
[L8446]  CALL        call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2403]              havoc __exception;
[L2404]              revert := false;
[L2405]  COND FALSE  !(__exception)
[L2438]  CALL        call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5753]  CALL        call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L4104]  CALL        call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4086]              assume msgsender_MSG != null;
[L4087]              Balance[this] := 0;
[L4088]              _owner_Ownership[this] := null;
[L4090]              assert { :EventEmitted "OwnershipTransferred_Ownership" } true;
[L4091]              _owner_Ownership[this] := msgsender_MSG;
[L4104]  RET         call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4105]  COND FALSE  !(revert)
[L5753]  RET         call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]  COND FALSE  !(revert)
[L5757]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L5757]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5758]  COND FALSE  !(revert)
[L5761]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L4913]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L4913]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]  COND FALSE  !(revert)
[L4917]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4868]              assume msgsender_MSG != null;
[L4869]              Balance[this] := 0;
[L4870]              _supply_ERC20[this] := 0;
[L4871]              _balances_ERC20[this] := zeroRefintArr();
[L4872]              sum__balances1[this] := 0;
[L4873]              _allowances_ERC20[this] := zeroRefRefintArr();
[L4874]              sum__allowances2[this] := 0;
[L4876]              pebs_s747 := supply_s747;
[L4877]  COND TRUE   DType[this] == DkargoToken
[L4878]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L5282]              __var_24 := null;
[L5283]  COND FALSE  !(!(account_s999 != null))
[L5287]  CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5287]  RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L5288]  COND FALSE  !(revert)
[L5291]              _supply_ERC20[this] := __var_25;
[L5292]  CALL        call __var_26 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s999], amount_s999);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5292]  RET         call __var_26 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s999], amount_s999);
[L5293]  COND FALSE  !(revert)
[L5296]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][account_s999];
[L5297]              _balances_ERC20[this][account_s999] := __var_26;
[L5298]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][account_s999];
[L5299]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4878]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L4879]  COND FALSE  !(revert)
[L4917]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4918]  COND FALSE  !(revert)
[L5761]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L5762]  COND FALSE  !(revert)
[L5765]  CALL        call ERC20Safe_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG);
[L5381]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L5381]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5382]  COND FALSE  !(revert)
[L5385]  CALL        call ERC20Safe_ERC20Safe_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5362]              assume msgsender_MSG != null;
[L5363]              Balance[this] := 0;
[L5385]  RET         call ERC20Safe_ERC20Safe_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5386]  COND FALSE  !(revert)
[L5765]  RET         call ERC20Safe_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]  COND FALSE  !(revert)
[L5769]  CALL        call AddressChain_AddressChain__success(this, msgsender_MSG, msgvalue_MSG);
[L4361]  CALL        call AddressChain_AddressChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4340]              assume msgsender_MSG != null;
[L4341]              Balance[this] := 0;
[L4343]  CALL        call __var_3 := FreshRefGenerator__success();
[L3983]              havoc newRef;
[L3984]              assume Alloc[newRef] == false;
[L3985]              Alloc[newRef] := true;
[L3986]              assume newRef != null;
[L4343]  RET         call __var_3 := FreshRefGenerator__success();
[L4344]  COND FALSE  !(revert)
[L4347]              _slist_AddressChain[this] := __var_3;
[L4361]  RET         call AddressChain_AddressChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4362]  COND FALSE  !(revert)
[L5769]  RET         call AddressChain_AddressChain__success(this, msgsender_MSG, msgvalue_MSG);
[L5770]  COND FALSE  !(revert)
[L5773]  CALL        call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4689]  CALL        call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4674]              assume msgsender_MSG != null;
[L4675]              Balance[this] := 0;
[L4689]  RET         call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4690]  COND FALSE  !(revert)
[L5773]  RET         call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L5774]  COND FALSE  !(revert)
[L5777]  CALL        call ERC165_ERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4759]  CALL        call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4689]  CALL        call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4674]              assume msgsender_MSG != null;
[L4675]              Balance[this] := 0;
[L4689]  RET         call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4690]  COND FALSE  !(revert)
[L4759]  RET         call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4760]  COND FALSE  !(revert)
[L4763]  CALL        call ERC165_ERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4723]              assume msgsender_MSG != null;
[L4724]              Balance[this] := 0;
[L4725]              _infcs_ERC165[this] := zerointboolArr();
[L4727]              __var_16 := 33540519;
[L4728]  COND TRUE   DType[this] == DkargoToken
[L4729]  CALL        call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, 33540519);
[L4792]  COND FALSE  !(!(infcid_s644 != -1))
[L4796]              _infcs_ERC165[this][infcid_s644] := true;
[L4729]  RET         call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, 33540519);
[L4730]  COND FALSE  !(revert)
[L4763]  RET         call ERC165_ERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4764]  COND FALSE  !(revert)
[L5777]  RET         call ERC165_ERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L5778]  COND FALSE  !(revert)
[L5781]  CALL        call DkargoPrefix_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG);
[L4045]  CALL        call DkargoPrefix_DkargoPrefix_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4029]              assume msgsender_MSG != null;
[L4030]              Balance[this] := 0;
[L4031]              _dkargoPrefix_DkargoPrefix[this] := -1676636045;
[L4045]  RET         call DkargoPrefix_DkargoPrefix_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4046]  COND FALSE  !(revert)
[L5781]  RET         call DkargoPrefix_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]  COND FALSE  !(revert)
[L5785]  CALL        call DkargoToken_DkargoToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5675]              assume msgsender_MSG != null;
[L5676]              Balance[this] := 0;
[L5677]              _name_DkargoToken[this] := -1676636045;
[L5678]              _symbol_DkargoToken[this] := -1676636045;
[L5680]  COND TRUE   DType[this] == DkargoToken
[L5681]  CALL        call _setDkargoPrefix~string_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG, 978340553);
[L4070]              _dkargoPrefix_DkargoPrefix[this] := prefix_s21;
[L5681]  RET         call _setDkargoPrefix~string_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG, 978340553);
[L5682]  COND FALSE  !(revert)
[L5688]              __var_39 := -1804674067;
[L5689]  COND TRUE   DType[this] == DkargoToken
[L5690]  CALL        call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, -1804674067);
[L4792]  COND FALSE  !(!(infcid_s644 != -1))
[L4796]              _infcs_ERC165[this][infcid_s644] := true;
[L5690]  RET         call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, -1804674067);
[L5691]  COND FALSE  !(revert)
[L5697]              _name_DkargoToken[this] := name_s1191;
[L5698]              _symbol_DkargoToken[this] := symbol_s1191;
[L5699]  COND TRUE   DType[this] == DkargoToken
[L5700]  CALL        call _linkChain~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4504]              __var_6 := null;
[L4505]  COND FALSE  !(!(node_s455 != null))
[L4509]  COND TRUE   DType[this] == DkargoToken
[L4510]  CALL        call __var_7 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4446]  COND FALSE  !((count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376)
[L4450]              __var_4 := null;
[L4451]              __var_5 := null;
[L4452]              __ret_0_ := (if prev_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null && next_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null then false else true);
[L4510]  RET         call __var_7 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4511]  COND FALSE  !(revert)
[L4522]  COND FALSE  !(!!__var_7)
[L4526]  COND TRUE   count_AddressChain.NodeList[_slist_AddressChain[this]] == 0
[L4527]              tail_AddressChain.NodeList[_slist_AddressChain[this]] := node_s455;
[L4528]              head_AddressChain.NodeList[_slist_AddressChain[this]] := node_s455;
[L4534]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, count_AddressChain.NodeList[_slist_AddressChain[this]], 1);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L4534]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, count_AddressChain.NodeList[_slist_AddressChain[this]], 1);
[L4535]  COND FALSE  !(revert)
[L4538]              count_AddressChain.NodeList[_slist_AddressChain[this]] := __var_8;
[L4539]              assert { :EventEmitted "AddressChainLinked_AddressChain" } true;
[L5700]  RET         call _linkChain~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5701]  COND FALSE  !(revert)
[L5785]  RET         call DkargoToken_DkargoToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5786]  COND FALSE  !(revert)
[L2438]  RET         call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2439]              assume !revert && gas >= 0;
[L8446]  RET         call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L8447]              assume !revert && gas >= 0;
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND FALSE  !(choice == 23)
[L8291]  COND FALSE  !(choice == 22)
[L8297]  COND FALSE  !(choice == 21)
[L8303]  COND FALSE  !(choice == 20)
[L8309]  COND FALSE  !(choice == 19)
[L8315]  COND FALSE  !(choice == 18)
[L8321]  COND FALSE  !(choice == 17)
[L8327]  COND FALSE  !(choice == 16)
[L8333]  COND FALSE  !(choice == 15)
[L8339]  COND FALSE  !(choice == 14)
[L8345]  COND FALSE  !(choice == 13)
[L8351]  COND TRUE   choice == 12
[L8352]              gas := gas - 21000;
[L8353]  COND TRUE   gas >= 0
[L8354]              assume value_s1257 >= 0 && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8355]              assume msgvalue_MSG == 0;
[L8356]  CALL        call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s1257 && value_s1257 <= _balances_ERC20[this][msgsender_MSG]) && value_s1257 >= 0) && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1257] >= 0) && _balances_ERC20[this][to_s1257] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_DkargoToken0 := true;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L2561]              havoc __exception;
[L2562]              revert := false;
[L2563]  COND TRUE   __exception
[L2564]              __tmp__Balance := Balance;
[L2565]              __tmp__DType := DType;
[L2566]              __tmp__Alloc := Alloc;
[L2567]              __tmp__balance_ADDR := balance_ADDR;
[L2568]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L2569]              __tmp__sum := sum;
[L2570]              __tmp__M_int_bool := M_int_bool;
[L2571]              __tmp__sum__infcs0 := sum__infcs0;
[L2572]              __tmp__M_Ref_int := M_Ref_int;
[L2573]              __tmp__sum__balances1 := sum__balances1;
[L2574]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2575]              __tmp__sum__allowances2 := sum__allowances2;
[L2576]              __tmp__Length := Length;
[L2577]              __tmp__now := now;
[L2578]              __tmp___dkargoPrefix_DkargoPrefix := _dkargoPrefix_DkargoPrefix;
[L2579]              __tmp___owner_Ownership := _owner_Ownership;
[L2580]              __tmp__prev_AddressChain.NodeInfo := prev_AddressChain.NodeInfo;
[L2581]              __tmp__next_AddressChain.NodeInfo := next_AddressChain.NodeInfo;
[L2582]              __tmp__count_AddressChain.NodeList := count_AddressChain.NodeList;
[L2583]              __tmp__head_AddressChain.NodeList := head_AddressChain.NodeList;
[L2584]              __tmp__tail_AddressChain.NodeList := tail_AddressChain.NodeList;
[L2585]              __tmp__map_AddressChain.NodeList := map_AddressChain.NodeList;
[L2586]              __tmp___slist_AddressChain := _slist_AddressChain;
[L2587]              __tmp___infcs_ERC165 := _infcs_ERC165;
[L2588]              __tmp___supply_ERC20 := _supply_ERC20;
[L2589]              __tmp___balances_ERC20 := _balances_ERC20;
[L2590]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L2591]              __tmp___name_DkargoToken := _name_DkargoToken;
[L2592]              __tmp___symbol_DkargoToken := _symbol_DkargoToken;
[L2593]  CALL        call __ret_0_ := transfer~address~uint256_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5823]  COND TRUE   __tmp__DType[this] == DkargoToken
[L5824]  CALL        call ret_s1257 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L4973]  COND TRUE   __tmp__DType[this] == DkargoToken
[L4974]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L5194]              __var_20 := null;
[L5195]  COND FALSE  !(!(sender_s956 != null))
[L5199]              __var_21 := null;
[L5200]  COND TRUE   !(recipient_s956 != null)
[L5201]              revert := true;
[L4974]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L4975]  COND TRUE   revert
[L5824]  RET         call ret_s1257 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5825]  COND TRUE   revert
[L2593]  RET         call __ret_0_ := transfer~address~uint256_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2594]              assume revert || gas < 0;
[L8356]  RET         call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L8450]  RET         call CorralChoice_DkargoToken(this);

Loop:
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND FALSE  !(choice == 23)
[L8291]  COND FALSE  !(choice == 22)
[L8297]  COND FALSE  !(choice == 21)
[L8303]  COND FALSE  !(choice == 20)
[L8309]  COND FALSE  !(choice == 19)
[L8315]  COND FALSE  !(choice == 18)
[L8321]  COND FALSE  !(choice == 17)
[L8327]  COND FALSE  !(choice == 16)
[L8333]  COND FALSE  !(choice == 15)
[L8339]  COND FALSE  !(choice == 14)
[L8345]  COND FALSE  !(choice == 13)
[L8351]  COND TRUE   choice == 12
[L8352]              gas := gas - 21000;
[L8353]  COND TRUE   gas >= 0
[L8354]              assume value_s1257 >= 0 && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8355]              assume msgvalue_MSG == 0;
[L8356]  CALL        call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s1257 && value_s1257 <= _balances_ERC20[this][msgsender_MSG]) && value_s1257 >= 0) && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1257] >= 0) && _balances_ERC20[this][to_s1257] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_DkargoToken0 := true;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L2561]              havoc __exception;
[L2562]              revert := false;
[L2563]  COND TRUE   __exception
[L2564]              __tmp__Balance := Balance;
[L2565]              __tmp__DType := DType;
[L2566]              __tmp__Alloc := Alloc;
[L2567]              __tmp__balance_ADDR := balance_ADDR;
[L2568]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L2569]              __tmp__sum := sum;
[L2570]              __tmp__M_int_bool := M_int_bool;
[L2571]              __tmp__sum__infcs0 := sum__infcs0;
[L2572]              __tmp__M_Ref_int := M_Ref_int;
[L2573]              __tmp__sum__balances1 := sum__balances1;
[L2574]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2575]              __tmp__sum__allowances2 := sum__allowances2;
[L2576]              __tmp__Length := Length;
[L2577]              __tmp__now := now;
[L2578]              __tmp___dkargoPrefix_DkargoPrefix := _dkargoPrefix_DkargoPrefix;
[L2579]              __tmp___owner_Ownership := _owner_Ownership;
[L2580]              __tmp__prev_AddressChain.NodeInfo := prev_AddressChain.NodeInfo;
[L2581]              __tmp__next_AddressChain.NodeInfo := next_AddressChain.NodeInfo;
[L2582]              __tmp__count_AddressChain.NodeList := count_AddressChain.NodeList;
[L2583]              __tmp__head_AddressChain.NodeList := head_AddressChain.NodeList;
[L2584]              __tmp__tail_AddressChain.NodeList := tail_AddressChain.NodeList;
[L2585]              __tmp__map_AddressChain.NodeList := map_AddressChain.NodeList;
[L2586]              __tmp___slist_AddressChain := _slist_AddressChain;
[L2587]              __tmp___infcs_ERC165 := _infcs_ERC165;
[L2588]              __tmp___supply_ERC20 := _supply_ERC20;
[L2589]              __tmp___balances_ERC20 := _balances_ERC20;
[L2590]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L2591]              __tmp___name_DkargoToken := _name_DkargoToken;
[L2592]              __tmp___symbol_DkargoToken := _symbol_DkargoToken;
[L2593]  CALL        call __ret_0_ := transfer~address~uint256_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5823]  COND TRUE   __tmp__DType[this] == DkargoToken
[L5824]  CALL        call ret_s1257 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L4973]  COND TRUE   __tmp__DType[this] == DkargoToken
[L4974]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L5194]              __var_20 := null;
[L5195]  COND FALSE  !(!(sender_s956 != null))
[L5199]              __var_21 := null;
[L5200]  COND TRUE   !(recipient_s956 != null)
[L5201]              revert := true;
[L4974]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L4975]  COND TRUE   revert
[L5824]  RET         call ret_s1257 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5825]  COND TRUE   revert
[L2593]  RET         call __ret_0_ := transfer~address~uint256_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2594]              assume revert || gas < 0;
[L8356]  RET         call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L8450]  RET         call CorralChoice_DkargoToken(this);

[2020-11-25 14:00:48,437 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:00:48,437 INFO  L82        PathProgramCache]: Analyzing trace with hash -2063422603, now seen corresponding path program 1 times
[2020-11-25 14:00:48,438 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:00:48,452 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:00:48,530 INFO  L134       CoverageAnalysis]: Checked inductivity of 65 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 65 trivial. 0 not checked.
[2020-11-25 14:00:48,530 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 14:00:48,530 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [8] imperfect sequences [] total 8
[2020-11-25 14:00:48,531 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:00:48,531 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 14:00:48,531 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 14:00:48,531 INFO  L87              Difference]: Start difference. First operand 4905 states and 5452 transitions. cyclomatic complexity: 549 Second operand 8 states.
[2020-11-25 14:00:48,606 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:00:48,606 INFO  L93              Difference]: Finished difference Result 5033 states and 5597 transitions.
[2020-11-25 14:00:48,606 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 14:00:48,606 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5033 states and 5597 transitions.
[2020-11-25 14:00:48,617 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:00:48,630 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5033 states to 5025 states and 5589 transitions.
[2020-11-25 14:00:48,630 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1124
[2020-11-25 14:00:48,630 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1124
[2020-11-25 14:00:48,630 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5025 states and 5589 transitions.
[2020-11-25 14:00:48,634 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:00:48,634 INFO  L728         BuchiCegarLoop]: Abstraction has 5025 states and 5589 transitions.
[2020-11-25 14:00:48,638 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5025 states and 5589 transitions.
[2020-11-25 14:00:48,668 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5025 to 5012.
[2020-11-25 14:00:48,668 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5012 states.
[2020-11-25 14:00:48,673 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5012 states to 5012 states and 5574 transitions.
[2020-11-25 14:00:48,673 INFO  L751         BuchiCegarLoop]: Abstraction has 5012 states and 5574 transitions.
[2020-11-25 14:00:48,673 INFO  L631         BuchiCegarLoop]: Abstraction has 5012 states and 5574 transitions.
[2020-11-25 14:00:48,673 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 14:00:48,673 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5012 states and 5574 transitions.
[2020-11-25 14:00:48,678 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:00:48,678 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:00:48,678 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:00:48,680 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:00:48,680 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_DkargoToken0 := false;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]     CALL        call main();
[L8440]              assume null == 0;
[L8441]  CALL        call this := FreshRefGenerator__success();
[L3983]              havoc newRef;
[L3984]              assume Alloc[newRef] == false;
[L3985]              Alloc[newRef] := true;
[L3986]              assume newRef != null;
[L8441]  RET         call this := FreshRefGenerator__success();
[L8442]              assume now >= 0;
[L8443]              assume DType[this] == DkargoToken;
[L8444]              assume msgvalue_MSG == 0;
[L8445]              gas := gas - 53000;
[L8446]  CALL        call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2403]              havoc __exception;
[L2404]              revert := false;
[L2405]  COND FALSE  !(__exception)
[L2438]  CALL        call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5753]  CALL        call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L4104]  CALL        call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4086]              assume msgsender_MSG != null;
[L4087]              Balance[this] := 0;
[L4088]              _owner_Ownership[this] := null;
[L4090]              assert { :EventEmitted "OwnershipTransferred_Ownership" } true;
[L4091]              _owner_Ownership[this] := msgsender_MSG;
[L4104]  RET         call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4105]  COND FALSE  !(revert)
[L5753]  RET         call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]  COND FALSE  !(revert)
[L5757]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L5757]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5758]  COND FALSE  !(revert)
[L5761]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L4913]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L4913]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]  COND FALSE  !(revert)
[L4917]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4868]              assume msgsender_MSG != null;
[L4869]              Balance[this] := 0;
[L4870]              _supply_ERC20[this] := 0;
[L4871]              _balances_ERC20[this] := zeroRefintArr();
[L4872]              sum__balances1[this] := 0;
[L4873]              _allowances_ERC20[this] := zeroRefRefintArr();
[L4874]              sum__allowances2[this] := 0;
[L4876]              pebs_s747 := supply_s747;
[L4877]  COND TRUE   DType[this] == DkargoToken
[L4878]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L5282]              __var_24 := null;
[L5283]  COND FALSE  !(!(account_s999 != null))
[L5287]  CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5287]  RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L5288]  COND FALSE  !(revert)
[L5291]              _supply_ERC20[this] := __var_25;
[L5292]  CALL        call __var_26 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s999], amount_s999);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5292]  RET         call __var_26 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s999], amount_s999);
[L5293]  COND FALSE  !(revert)
[L5296]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][account_s999];
[L5297]              _balances_ERC20[this][account_s999] := __var_26;
[L5298]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][account_s999];
[L5299]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4878]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L4879]  COND FALSE  !(revert)
[L4917]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4918]  COND FALSE  !(revert)
[L5761]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L5762]  COND FALSE  !(revert)
[L5765]  CALL        call ERC20Safe_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG);
[L5381]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L5381]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5382]  COND FALSE  !(revert)
[L5385]  CALL        call ERC20Safe_ERC20Safe_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5362]              assume msgsender_MSG != null;
[L5363]              Balance[this] := 0;
[L5385]  RET         call ERC20Safe_ERC20Safe_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5386]  COND FALSE  !(revert)
[L5765]  RET         call ERC20Safe_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]  COND FALSE  !(revert)
[L5769]  CALL        call AddressChain_AddressChain__success(this, msgsender_MSG, msgvalue_MSG);
[L4361]  CALL        call AddressChain_AddressChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4340]              assume msgsender_MSG != null;
[L4341]              Balance[this] := 0;
[L4343]  CALL        call __var_3 := FreshRefGenerator__success();
[L3983]              havoc newRef;
[L3984]              assume Alloc[newRef] == false;
[L3985]              Alloc[newRef] := true;
[L3986]              assume newRef != null;
[L4343]  RET         call __var_3 := FreshRefGenerator__success();
[L4344]  COND FALSE  !(revert)
[L4347]              _slist_AddressChain[this] := __var_3;
[L4361]  RET         call AddressChain_AddressChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4362]  COND FALSE  !(revert)
[L5769]  RET         call AddressChain_AddressChain__success(this, msgsender_MSG, msgvalue_MSG);
[L5770]  COND FALSE  !(revert)
[L5773]  CALL        call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4689]  CALL        call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4674]              assume msgsender_MSG != null;
[L4675]              Balance[this] := 0;
[L4689]  RET         call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4690]  COND FALSE  !(revert)
[L5773]  RET         call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L5774]  COND FALSE  !(revert)
[L5777]  CALL        call ERC165_ERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4759]  CALL        call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4689]  CALL        call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4674]              assume msgsender_MSG != null;
[L4675]              Balance[this] := 0;
[L4689]  RET         call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4690]  COND FALSE  !(revert)
[L4759]  RET         call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4760]  COND FALSE  !(revert)
[L4763]  CALL        call ERC165_ERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4723]              assume msgsender_MSG != null;
[L4724]              Balance[this] := 0;
[L4725]              _infcs_ERC165[this] := zerointboolArr();
[L4727]              __var_16 := 33540519;
[L4728]  COND TRUE   DType[this] == DkargoToken
[L4729]  CALL        call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, 33540519);
[L4792]  COND FALSE  !(!(infcid_s644 != -1))
[L4796]              _infcs_ERC165[this][infcid_s644] := true;
[L4729]  RET         call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, 33540519);
[L4730]  COND FALSE  !(revert)
[L4763]  RET         call ERC165_ERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4764]  COND FALSE  !(revert)
[L5777]  RET         call ERC165_ERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L5778]  COND FALSE  !(revert)
[L5781]  CALL        call DkargoPrefix_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG);
[L4045]  CALL        call DkargoPrefix_DkargoPrefix_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4029]              assume msgsender_MSG != null;
[L4030]              Balance[this] := 0;
[L4031]              _dkargoPrefix_DkargoPrefix[this] := -1676636045;
[L4045]  RET         call DkargoPrefix_DkargoPrefix_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4046]  COND FALSE  !(revert)
[L5781]  RET         call DkargoPrefix_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]  COND FALSE  !(revert)
[L5785]  CALL        call DkargoToken_DkargoToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5675]              assume msgsender_MSG != null;
[L5676]              Balance[this] := 0;
[L5677]              _name_DkargoToken[this] := -1676636045;
[L5678]              _symbol_DkargoToken[this] := -1676636045;
[L5680]  COND TRUE   DType[this] == DkargoToken
[L5681]  CALL        call _setDkargoPrefix~string_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG, 978340553);
[L4070]              _dkargoPrefix_DkargoPrefix[this] := prefix_s21;
[L5681]  RET         call _setDkargoPrefix~string_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG, 978340553);
[L5682]  COND FALSE  !(revert)
[L5688]              __var_39 := -1804674067;
[L5689]  COND TRUE   DType[this] == DkargoToken
[L5690]  CALL        call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, -1804674067);
[L4792]  COND FALSE  !(!(infcid_s644 != -1))
[L4796]              _infcs_ERC165[this][infcid_s644] := true;
[L5690]  RET         call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, -1804674067);
[L5691]  COND FALSE  !(revert)
[L5697]              _name_DkargoToken[this] := name_s1191;
[L5698]              _symbol_DkargoToken[this] := symbol_s1191;
[L5699]  COND TRUE   DType[this] == DkargoToken
[L5700]  CALL        call _linkChain~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4504]              __var_6 := null;
[L4505]  COND FALSE  !(!(node_s455 != null))
[L4509]  COND TRUE   DType[this] == DkargoToken
[L4510]  CALL        call __var_7 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4446]  COND FALSE  !((count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376)
[L4450]              __var_4 := null;
[L4451]              __var_5 := null;
[L4452]              __ret_0_ := (if prev_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null && next_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null then false else true);
[L4510]  RET         call __var_7 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4511]  COND FALSE  !(revert)
[L4522]  COND FALSE  !(!!__var_7)
[L4526]  COND TRUE   count_AddressChain.NodeList[_slist_AddressChain[this]] == 0
[L4527]              tail_AddressChain.NodeList[_slist_AddressChain[this]] := node_s455;
[L4528]              head_AddressChain.NodeList[_slist_AddressChain[this]] := node_s455;
[L4534]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, count_AddressChain.NodeList[_slist_AddressChain[this]], 1);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L4534]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, count_AddressChain.NodeList[_slist_AddressChain[this]], 1);
[L4535]  COND FALSE  !(revert)
[L4538]              count_AddressChain.NodeList[_slist_AddressChain[this]] := __var_8;
[L4539]              assert { :EventEmitted "AddressChainLinked_AddressChain" } true;
[L5700]  RET         call _linkChain~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5701]  COND FALSE  !(revert)
[L5785]  RET         call DkargoToken_DkargoToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5786]  COND FALSE  !(revert)
[L2438]  RET         call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2439]              assume !revert && gas >= 0;
[L8446]  RET         call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L8447]              assume !revert && gas >= 0;
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND FALSE  !(choice == 23)
[L8291]  COND FALSE  !(choice == 22)
[L8297]  COND FALSE  !(choice == 21)
[L8303]  COND FALSE  !(choice == 20)
[L8309]  COND FALSE  !(choice == 19)
[L8315]  COND FALSE  !(choice == 18)
[L8321]  COND FALSE  !(choice == 17)
[L8327]  COND FALSE  !(choice == 16)
[L8333]  COND FALSE  !(choice == 15)
[L8339]  COND FALSE  !(choice == 14)
[L8345]  COND FALSE  !(choice == 13)
[L8351]  COND TRUE   choice == 12
[L8352]              gas := gas - 21000;
[L8353]  COND TRUE   gas >= 0
[L8354]              assume value_s1257 >= 0 && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8355]              assume msgvalue_MSG == 0;
[L8356]  CALL        call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s1257 && value_s1257 <= _balances_ERC20[this][msgsender_MSG]) && value_s1257 >= 0) && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1257] >= 0) && _balances_ERC20[this][to_s1257] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_DkargoToken0 := true;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L2561]              havoc __exception;
[L2562]              revert := false;
[L2563]  COND TRUE   __exception
[L2564]              __tmp__Balance := Balance;
[L2565]              __tmp__DType := DType;
[L2566]              __tmp__Alloc := Alloc;
[L2567]              __tmp__balance_ADDR := balance_ADDR;
[L2568]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L2569]              __tmp__sum := sum;
[L2570]              __tmp__M_int_bool := M_int_bool;
[L2571]              __tmp__sum__infcs0 := sum__infcs0;
[L2572]              __tmp__M_Ref_int := M_Ref_int;
[L2573]              __tmp__sum__balances1 := sum__balances1;
[L2574]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2575]              __tmp__sum__allowances2 := sum__allowances2;
[L2576]              __tmp__Length := Length;
[L2577]              __tmp__now := now;
[L2578]              __tmp___dkargoPrefix_DkargoPrefix := _dkargoPrefix_DkargoPrefix;
[L2579]              __tmp___owner_Ownership := _owner_Ownership;
[L2580]              __tmp__prev_AddressChain.NodeInfo := prev_AddressChain.NodeInfo;
[L2581]              __tmp__next_AddressChain.NodeInfo := next_AddressChain.NodeInfo;
[L2582]              __tmp__count_AddressChain.NodeList := count_AddressChain.NodeList;
[L2583]              __tmp__head_AddressChain.NodeList := head_AddressChain.NodeList;
[L2584]              __tmp__tail_AddressChain.NodeList := tail_AddressChain.NodeList;
[L2585]              __tmp__map_AddressChain.NodeList := map_AddressChain.NodeList;
[L2586]              __tmp___slist_AddressChain := _slist_AddressChain;
[L2587]              __tmp___infcs_ERC165 := _infcs_ERC165;
[L2588]              __tmp___supply_ERC20 := _supply_ERC20;
[L2589]              __tmp___balances_ERC20 := _balances_ERC20;
[L2590]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L2591]              __tmp___name_DkargoToken := _name_DkargoToken;
[L2592]              __tmp___symbol_DkargoToken := _symbol_DkargoToken;
[L2593]  CALL        call __ret_0_ := transfer~address~uint256_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5823]  COND TRUE   __tmp__DType[this] == DkargoToken
[L5824]  CALL        call ret_s1257 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L4973]  COND TRUE   __tmp__DType[this] == DkargoToken
[L4974]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L5194]              __var_20 := null;
[L5195]  COND FALSE  !(!(sender_s956 != null))
[L5199]              __var_21 := null;
[L5200]  COND FALSE  !(!(recipient_s956 != null))
[L5204]  CALL        call __var_22 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L4224]  COND TRUE   !(b_s157 <= a_s157)
[L4225]              revert := true;
[L5204]  RET         call __var_22 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L5205]  COND TRUE   revert
[L4974]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L4975]  COND TRUE   revert
[L5824]  RET         call ret_s1257 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5825]  COND TRUE   revert
[L2593]  RET         call __ret_0_ := transfer~address~uint256_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2594]              assume revert || gas < 0;
[L8356]  RET         call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L8450]  RET         call CorralChoice_DkargoToken(this);

Loop:
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND FALSE  !(choice == 23)
[L8291]  COND FALSE  !(choice == 22)
[L8297]  COND FALSE  !(choice == 21)
[L8303]  COND FALSE  !(choice == 20)
[L8309]  COND FALSE  !(choice == 19)
[L8315]  COND FALSE  !(choice == 18)
[L8321]  COND FALSE  !(choice == 17)
[L8327]  COND FALSE  !(choice == 16)
[L8333]  COND FALSE  !(choice == 15)
[L8339]  COND FALSE  !(choice == 14)
[L8345]  COND FALSE  !(choice == 13)
[L8351]  COND TRUE   choice == 12
[L8352]              gas := gas - 21000;
[L8353]  COND TRUE   gas >= 0
[L8354]              assume value_s1257 >= 0 && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8355]              assume msgvalue_MSG == 0;
[L8356]  CALL        call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s1257 && value_s1257 <= _balances_ERC20[this][msgsender_MSG]) && value_s1257 >= 0) && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1257] >= 0) && _balances_ERC20[this][to_s1257] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_DkargoToken0 := true;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L2561]              havoc __exception;
[L2562]              revert := false;
[L2563]  COND TRUE   __exception
[L2564]              __tmp__Balance := Balance;
[L2565]              __tmp__DType := DType;
[L2566]              __tmp__Alloc := Alloc;
[L2567]              __tmp__balance_ADDR := balance_ADDR;
[L2568]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L2569]              __tmp__sum := sum;
[L2570]              __tmp__M_int_bool := M_int_bool;
[L2571]              __tmp__sum__infcs0 := sum__infcs0;
[L2572]              __tmp__M_Ref_int := M_Ref_int;
[L2573]              __tmp__sum__balances1 := sum__balances1;
[L2574]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2575]              __tmp__sum__allowances2 := sum__allowances2;
[L2576]              __tmp__Length := Length;
[L2577]              __tmp__now := now;
[L2578]              __tmp___dkargoPrefix_DkargoPrefix := _dkargoPrefix_DkargoPrefix;
[L2579]              __tmp___owner_Ownership := _owner_Ownership;
[L2580]              __tmp__prev_AddressChain.NodeInfo := prev_AddressChain.NodeInfo;
[L2581]              __tmp__next_AddressChain.NodeInfo := next_AddressChain.NodeInfo;
[L2582]              __tmp__count_AddressChain.NodeList := count_AddressChain.NodeList;
[L2583]              __tmp__head_AddressChain.NodeList := head_AddressChain.NodeList;
[L2584]              __tmp__tail_AddressChain.NodeList := tail_AddressChain.NodeList;
[L2585]              __tmp__map_AddressChain.NodeList := map_AddressChain.NodeList;
[L2586]              __tmp___slist_AddressChain := _slist_AddressChain;
[L2587]              __tmp___infcs_ERC165 := _infcs_ERC165;
[L2588]              __tmp___supply_ERC20 := _supply_ERC20;
[L2589]              __tmp___balances_ERC20 := _balances_ERC20;
[L2590]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L2591]              __tmp___name_DkargoToken := _name_DkargoToken;
[L2592]              __tmp___symbol_DkargoToken := _symbol_DkargoToken;
[L2593]  CALL        call __ret_0_ := transfer~address~uint256_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5823]  COND TRUE   __tmp__DType[this] == DkargoToken
[L5824]  CALL        call ret_s1257 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L4973]  COND TRUE   __tmp__DType[this] == DkargoToken
[L4974]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L5194]              __var_20 := null;
[L5195]  COND FALSE  !(!(sender_s956 != null))
[L5199]              __var_21 := null;
[L5200]  COND FALSE  !(!(recipient_s956 != null))
[L5204]  CALL        call __var_22 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L4224]  COND TRUE   !(b_s157 <= a_s157)
[L4225]              revert := true;
[L5204]  RET         call __var_22 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L5205]  COND TRUE   revert
[L4974]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L4975]  COND TRUE   revert
[L5824]  RET         call ret_s1257 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5825]  COND TRUE   revert
[L2593]  RET         call __ret_0_ := transfer~address~uint256_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2594]              assume revert || gas < 0;
[L8356]  RET         call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L8450]  RET         call CorralChoice_DkargoToken(this);

[2020-11-25 14:00:48,685 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:00:48,685 INFO  L82        PathProgramCache]: Analyzing trace with hash 1756216186, now seen corresponding path program 1 times
[2020-11-25 14:00:48,686 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:00:48,700 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:00:48,856 INFO  L134       CoverageAnalysis]: Checked inductivity of 65 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 65 trivial. 0 not checked.
[2020-11-25 14:00:48,856 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 14:00:48,856 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [9] imperfect sequences [] total 9
[2020-11-25 14:00:48,857 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:00:48,857 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 14:00:48,857 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=15, Invalid=57, Unknown=0, NotChecked=0, Total=72
[2020-11-25 14:00:48,857 INFO  L87              Difference]: Start difference. First operand 5012 states and 5574 transitions. cyclomatic complexity: 564 Second operand 9 states.
[2020-11-25 14:00:50,773 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:00:50,774 INFO  L93              Difference]: Finished difference Result 5233 states and 5814 transitions.
[2020-11-25 14:00:50,774 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-11-25 14:00:50,774 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5233 states and 5814 transitions.
[2020-11-25 14:00:50,785 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 14:00:50,801 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5233 states to 5233 states and 5814 transitions.
[2020-11-25 14:00:50,801 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1231
[2020-11-25 14:00:50,801 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1231
[2020-11-25 14:00:50,801 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5233 states and 5814 transitions.
[2020-11-25 14:00:50,805 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:00:50,805 INFO  L728         BuchiCegarLoop]: Abstraction has 5233 states and 5814 transitions.
[2020-11-25 14:00:50,809 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5233 states and 5814 transitions.
[2020-11-25 14:00:50,839 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5233 to 5012.
[2020-11-25 14:00:50,839 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5012 states.
[2020-11-25 14:00:50,844 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5012 states to 5012 states and 5574 transitions.
[2020-11-25 14:00:50,844 INFO  L751         BuchiCegarLoop]: Abstraction has 5012 states and 5574 transitions.
[2020-11-25 14:00:50,845 INFO  L631         BuchiCegarLoop]: Abstraction has 5012 states and 5574 transitions.
[2020-11-25 14:00:50,845 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 14:00:50,845 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5012 states and 5574 transitions.
[2020-11-25 14:00:50,850 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:00:50,850 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:00:50,850 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:00:50,851 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:00:50,852 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_DkargoToken0 := false;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]     CALL        call main();
[L8440]              assume null == 0;
[L8441]  CALL        call this := FreshRefGenerator__success();
[L3983]              havoc newRef;
[L3984]              assume Alloc[newRef] == false;
[L3985]              Alloc[newRef] := true;
[L3986]              assume newRef != null;
[L8441]  RET         call this := FreshRefGenerator__success();
[L8442]              assume now >= 0;
[L8443]              assume DType[this] == DkargoToken;
[L8444]              assume msgvalue_MSG == 0;
[L8445]              gas := gas - 53000;
[L8446]  CALL        call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2403]              havoc __exception;
[L2404]              revert := false;
[L2405]  COND FALSE  !(__exception)
[L2438]  CALL        call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5753]  CALL        call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L4104]  CALL        call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4086]              assume msgsender_MSG != null;
[L4087]              Balance[this] := 0;
[L4088]              _owner_Ownership[this] := null;
[L4090]              assert { :EventEmitted "OwnershipTransferred_Ownership" } true;
[L4091]              _owner_Ownership[this] := msgsender_MSG;
[L4104]  RET         call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4105]  COND FALSE  !(revert)
[L5753]  RET         call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]  COND FALSE  !(revert)
[L5757]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L5757]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5758]  COND FALSE  !(revert)
[L5761]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L4913]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L4913]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]  COND FALSE  !(revert)
[L4917]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4868]              assume msgsender_MSG != null;
[L4869]              Balance[this] := 0;
[L4870]              _supply_ERC20[this] := 0;
[L4871]              _balances_ERC20[this] := zeroRefintArr();
[L4872]              sum__balances1[this] := 0;
[L4873]              _allowances_ERC20[this] := zeroRefRefintArr();
[L4874]              sum__allowances2[this] := 0;
[L4876]              pebs_s747 := supply_s747;
[L4877]  COND TRUE   DType[this] == DkargoToken
[L4878]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L5282]              __var_24 := null;
[L5283]  COND FALSE  !(!(account_s999 != null))
[L5287]  CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5287]  RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L5288]  COND FALSE  !(revert)
[L5291]              _supply_ERC20[this] := __var_25;
[L5292]  CALL        call __var_26 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s999], amount_s999);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5292]  RET         call __var_26 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s999], amount_s999);
[L5293]  COND FALSE  !(revert)
[L5296]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][account_s999];
[L5297]              _balances_ERC20[this][account_s999] := __var_26;
[L5298]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][account_s999];
[L5299]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4878]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L4879]  COND FALSE  !(revert)
[L4917]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4918]  COND FALSE  !(revert)
[L5761]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L5762]  COND FALSE  !(revert)
[L5765]  CALL        call ERC20Safe_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG);
[L5381]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L5381]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5382]  COND FALSE  !(revert)
[L5385]  CALL        call ERC20Safe_ERC20Safe_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5362]              assume msgsender_MSG != null;
[L5363]              Balance[this] := 0;
[L5385]  RET         call ERC20Safe_ERC20Safe_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5386]  COND FALSE  !(revert)
[L5765]  RET         call ERC20Safe_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]  COND FALSE  !(revert)
[L5769]  CALL        call AddressChain_AddressChain__success(this, msgsender_MSG, msgvalue_MSG);
[L4361]  CALL        call AddressChain_AddressChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4340]              assume msgsender_MSG != null;
[L4341]              Balance[this] := 0;
[L4343]  CALL        call __var_3 := FreshRefGenerator__success();
[L3983]              havoc newRef;
[L3984]              assume Alloc[newRef] == false;
[L3985]              Alloc[newRef] := true;
[L3986]              assume newRef != null;
[L4343]  RET         call __var_3 := FreshRefGenerator__success();
[L4344]  COND FALSE  !(revert)
[L4347]              _slist_AddressChain[this] := __var_3;
[L4361]  RET         call AddressChain_AddressChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4362]  COND FALSE  !(revert)
[L5769]  RET         call AddressChain_AddressChain__success(this, msgsender_MSG, msgvalue_MSG);
[L5770]  COND FALSE  !(revert)
[L5773]  CALL        call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4689]  CALL        call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4674]              assume msgsender_MSG != null;
[L4675]              Balance[this] := 0;
[L4689]  RET         call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4690]  COND FALSE  !(revert)
[L5773]  RET         call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L5774]  COND FALSE  !(revert)
[L5777]  CALL        call ERC165_ERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4759]  CALL        call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4689]  CALL        call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4674]              assume msgsender_MSG != null;
[L4675]              Balance[this] := 0;
[L4689]  RET         call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4690]  COND FALSE  !(revert)
[L4759]  RET         call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4760]  COND FALSE  !(revert)
[L4763]  CALL        call ERC165_ERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4723]              assume msgsender_MSG != null;
[L4724]              Balance[this] := 0;
[L4725]              _infcs_ERC165[this] := zerointboolArr();
[L4727]              __var_16 := 33540519;
[L4728]  COND TRUE   DType[this] == DkargoToken
[L4729]  CALL        call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, 33540519);
[L4792]  COND FALSE  !(!(infcid_s644 != -1))
[L4796]              _infcs_ERC165[this][infcid_s644] := true;
[L4729]  RET         call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, 33540519);
[L4730]  COND FALSE  !(revert)
[L4763]  RET         call ERC165_ERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4764]  COND FALSE  !(revert)
[L5777]  RET         call ERC165_ERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L5778]  COND FALSE  !(revert)
[L5781]  CALL        call DkargoPrefix_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG);
[L4045]  CALL        call DkargoPrefix_DkargoPrefix_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4029]              assume msgsender_MSG != null;
[L4030]              Balance[this] := 0;
[L4031]              _dkargoPrefix_DkargoPrefix[this] := -1676636045;
[L4045]  RET         call DkargoPrefix_DkargoPrefix_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4046]  COND FALSE  !(revert)
[L5781]  RET         call DkargoPrefix_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]  COND FALSE  !(revert)
[L5785]  CALL        call DkargoToken_DkargoToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5675]              assume msgsender_MSG != null;
[L5676]              Balance[this] := 0;
[L5677]              _name_DkargoToken[this] := -1676636045;
[L5678]              _symbol_DkargoToken[this] := -1676636045;
[L5680]  COND TRUE   DType[this] == DkargoToken
[L5681]  CALL        call _setDkargoPrefix~string_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG, 978340553);
[L4070]              _dkargoPrefix_DkargoPrefix[this] := prefix_s21;
[L5681]  RET         call _setDkargoPrefix~string_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG, 978340553);
[L5682]  COND FALSE  !(revert)
[L5688]              __var_39 := -1804674067;
[L5689]  COND TRUE   DType[this] == DkargoToken
[L5690]  CALL        call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, -1804674067);
[L4792]  COND FALSE  !(!(infcid_s644 != -1))
[L4796]              _infcs_ERC165[this][infcid_s644] := true;
[L5690]  RET         call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, -1804674067);
[L5691]  COND FALSE  !(revert)
[L5697]              _name_DkargoToken[this] := name_s1191;
[L5698]              _symbol_DkargoToken[this] := symbol_s1191;
[L5699]  COND TRUE   DType[this] == DkargoToken
[L5700]  CALL        call _linkChain~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4504]              __var_6 := null;
[L4505]  COND FALSE  !(!(node_s455 != null))
[L4509]  COND TRUE   DType[this] == DkargoToken
[L4510]  CALL        call __var_7 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4446]  COND FALSE  !((count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376)
[L4450]              __var_4 := null;
[L4451]              __var_5 := null;
[L4452]              __ret_0_ := (if prev_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null && next_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null then false else true);
[L4510]  RET         call __var_7 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4511]  COND FALSE  !(revert)
[L4522]  COND FALSE  !(!!__var_7)
[L4526]  COND TRUE   count_AddressChain.NodeList[_slist_AddressChain[this]] == 0
[L4527]              tail_AddressChain.NodeList[_slist_AddressChain[this]] := node_s455;
[L4528]              head_AddressChain.NodeList[_slist_AddressChain[this]] := node_s455;
[L4534]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, count_AddressChain.NodeList[_slist_AddressChain[this]], 1);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L4534]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, count_AddressChain.NodeList[_slist_AddressChain[this]], 1);
[L4535]  COND FALSE  !(revert)
[L4538]              count_AddressChain.NodeList[_slist_AddressChain[this]] := __var_8;
[L4539]              assert { :EventEmitted "AddressChainLinked_AddressChain" } true;
[L5700]  RET         call _linkChain~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5701]  COND FALSE  !(revert)
[L5785]  RET         call DkargoToken_DkargoToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5786]  COND FALSE  !(revert)
[L2438]  RET         call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2439]              assume !revert && gas >= 0;
[L8446]  RET         call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L8447]              assume !revert && gas >= 0;
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND FALSE  !(choice == 23)
[L8291]  COND FALSE  !(choice == 22)
[L8297]  COND FALSE  !(choice == 21)
[L8303]  COND FALSE  !(choice == 20)
[L8309]  COND FALSE  !(choice == 19)
[L8315]  COND FALSE  !(choice == 18)
[L8321]  COND FALSE  !(choice == 17)
[L8327]  COND FALSE  !(choice == 16)
[L8333]  COND FALSE  !(choice == 15)
[L8339]  COND FALSE  !(choice == 14)
[L8345]  COND FALSE  !(choice == 13)
[L8351]  COND TRUE   choice == 12
[L8352]              gas := gas - 21000;
[L8353]  COND TRUE   gas >= 0
[L8354]              assume value_s1257 >= 0 && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8355]              assume msgvalue_MSG == 0;
[L8356]  CALL        call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s1257 && value_s1257 <= _balances_ERC20[this][msgsender_MSG]) && value_s1257 >= 0) && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1257] >= 0) && _balances_ERC20[this][to_s1257] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_DkargoToken0 := true;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L2561]              havoc __exception;
[L2562]              revert := false;
[L2563]  COND TRUE   __exception
[L2564]              __tmp__Balance := Balance;
[L2565]              __tmp__DType := DType;
[L2566]              __tmp__Alloc := Alloc;
[L2567]              __tmp__balance_ADDR := balance_ADDR;
[L2568]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L2569]              __tmp__sum := sum;
[L2570]              __tmp__M_int_bool := M_int_bool;
[L2571]              __tmp__sum__infcs0 := sum__infcs0;
[L2572]              __tmp__M_Ref_int := M_Ref_int;
[L2573]              __tmp__sum__balances1 := sum__balances1;
[L2574]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2575]              __tmp__sum__allowances2 := sum__allowances2;
[L2576]              __tmp__Length := Length;
[L2577]              __tmp__now := now;
[L2578]              __tmp___dkargoPrefix_DkargoPrefix := _dkargoPrefix_DkargoPrefix;
[L2579]              __tmp___owner_Ownership := _owner_Ownership;
[L2580]              __tmp__prev_AddressChain.NodeInfo := prev_AddressChain.NodeInfo;
[L2581]              __tmp__next_AddressChain.NodeInfo := next_AddressChain.NodeInfo;
[L2582]              __tmp__count_AddressChain.NodeList := count_AddressChain.NodeList;
[L2583]              __tmp__head_AddressChain.NodeList := head_AddressChain.NodeList;
[L2584]              __tmp__tail_AddressChain.NodeList := tail_AddressChain.NodeList;
[L2585]              __tmp__map_AddressChain.NodeList := map_AddressChain.NodeList;
[L2586]              __tmp___slist_AddressChain := _slist_AddressChain;
[L2587]              __tmp___infcs_ERC165 := _infcs_ERC165;
[L2588]              __tmp___supply_ERC20 := _supply_ERC20;
[L2589]              __tmp___balances_ERC20 := _balances_ERC20;
[L2590]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L2591]              __tmp___name_DkargoToken := _name_DkargoToken;
[L2592]              __tmp___symbol_DkargoToken := _symbol_DkargoToken;
[L2593]  CALL        call __ret_0_ := transfer~address~uint256_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5823]  COND TRUE   __tmp__DType[this] == DkargoToken
[L5824]  CALL        call ret_s1257 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L4973]  COND TRUE   __tmp__DType[this] == DkargoToken
[L4974]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L5194]              __var_20 := null;
[L5195]  COND FALSE  !(!(sender_s956 != null))
[L5199]              __var_21 := null;
[L5200]  COND FALSE  !(!(recipient_s956 != null))
[L5204]  CALL        call __var_22 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L4224]  COND FALSE  !(!(b_s157 <= a_s157))
[L4228]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4229]              __ret_0_ := c_s157;
[L5204]  RET         call __var_22 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L5205]  COND FALSE  !(revert)
[L5208]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] - __tmp___balances_ERC20[this][sender_s956];
[L5209]              __tmp___balances_ERC20[this][sender_s956] := __var_22;
[L5210]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] + __tmp___balances_ERC20[this][sender_s956];
[L5211]  CALL        call __var_23 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s956], amount_s956);
[L4200]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4201]  COND TRUE   !(c_s130 >= a_s130)
[L4202]              revert := true;
[L5211]  RET         call __var_23 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s956], amount_s956);
[L5212]  COND TRUE   revert
[L4974]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L4975]  COND TRUE   revert
[L5824]  RET         call ret_s1257 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5825]  COND TRUE   revert
[L2593]  RET         call __ret_0_ := transfer~address~uint256_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2594]              assume revert || gas < 0;
[L8356]  RET         call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L8450]  RET         call CorralChoice_DkargoToken(this);

Loop:
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND FALSE  !(choice == 23)
[L8291]  COND FALSE  !(choice == 22)
[L8297]  COND FALSE  !(choice == 21)
[L8303]  COND FALSE  !(choice == 20)
[L8309]  COND FALSE  !(choice == 19)
[L8315]  COND FALSE  !(choice == 18)
[L8321]  COND FALSE  !(choice == 17)
[L8327]  COND FALSE  !(choice == 16)
[L8333]  COND FALSE  !(choice == 15)
[L8339]  COND FALSE  !(choice == 14)
[L8345]  COND FALSE  !(choice == 13)
[L8351]  COND TRUE   choice == 12
[L8352]              gas := gas - 21000;
[L8353]  COND TRUE   gas >= 0
[L8354]              assume value_s1257 >= 0 && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8355]              assume msgvalue_MSG == 0;
[L8356]  CALL        call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s1257 && value_s1257 <= _balances_ERC20[this][msgsender_MSG]) && value_s1257 >= 0) && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1257] >= 0) && _balances_ERC20[this][to_s1257] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_DkargoToken0 := true;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L2561]              havoc __exception;
[L2562]              revert := false;
[L2563]  COND TRUE   __exception
[L2564]              __tmp__Balance := Balance;
[L2565]              __tmp__DType := DType;
[L2566]              __tmp__Alloc := Alloc;
[L2567]              __tmp__balance_ADDR := balance_ADDR;
[L2568]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L2569]              __tmp__sum := sum;
[L2570]              __tmp__M_int_bool := M_int_bool;
[L2571]              __tmp__sum__infcs0 := sum__infcs0;
[L2572]              __tmp__M_Ref_int := M_Ref_int;
[L2573]              __tmp__sum__balances1 := sum__balances1;
[L2574]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2575]              __tmp__sum__allowances2 := sum__allowances2;
[L2576]              __tmp__Length := Length;
[L2577]              __tmp__now := now;
[L2578]              __tmp___dkargoPrefix_DkargoPrefix := _dkargoPrefix_DkargoPrefix;
[L2579]              __tmp___owner_Ownership := _owner_Ownership;
[L2580]              __tmp__prev_AddressChain.NodeInfo := prev_AddressChain.NodeInfo;
[L2581]              __tmp__next_AddressChain.NodeInfo := next_AddressChain.NodeInfo;
[L2582]              __tmp__count_AddressChain.NodeList := count_AddressChain.NodeList;
[L2583]              __tmp__head_AddressChain.NodeList := head_AddressChain.NodeList;
[L2584]              __tmp__tail_AddressChain.NodeList := tail_AddressChain.NodeList;
[L2585]              __tmp__map_AddressChain.NodeList := map_AddressChain.NodeList;
[L2586]              __tmp___slist_AddressChain := _slist_AddressChain;
[L2587]              __tmp___infcs_ERC165 := _infcs_ERC165;
[L2588]              __tmp___supply_ERC20 := _supply_ERC20;
[L2589]              __tmp___balances_ERC20 := _balances_ERC20;
[L2590]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L2591]              __tmp___name_DkargoToken := _name_DkargoToken;
[L2592]              __tmp___symbol_DkargoToken := _symbol_DkargoToken;
[L2593]  CALL        call __ret_0_ := transfer~address~uint256_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5823]  COND TRUE   __tmp__DType[this] == DkargoToken
[L5824]  CALL        call ret_s1257 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L4973]  COND TRUE   __tmp__DType[this] == DkargoToken
[L4974]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L5194]              __var_20 := null;
[L5195]  COND FALSE  !(!(sender_s956 != null))
[L5199]              __var_21 := null;
[L5200]  COND FALSE  !(!(recipient_s956 != null))
[L5204]  CALL        call __var_22 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L4224]  COND FALSE  !(!(b_s157 <= a_s157))
[L4228]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4229]              __ret_0_ := c_s157;
[L5204]  RET         call __var_22 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L5205]  COND FALSE  !(revert)
[L5208]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] - __tmp___balances_ERC20[this][sender_s956];
[L5209]              __tmp___balances_ERC20[this][sender_s956] := __var_22;
[L5210]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] + __tmp___balances_ERC20[this][sender_s956];
[L5211]  CALL        call __var_23 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s956], amount_s956);
[L4200]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4201]  COND TRUE   !(c_s130 >= a_s130)
[L4202]              revert := true;
[L5211]  RET         call __var_23 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s956], amount_s956);
[L5212]  COND TRUE   revert
[L4974]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L4975]  COND TRUE   revert
[L5824]  RET         call ret_s1257 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5825]  COND TRUE   revert
[L2593]  RET         call __ret_0_ := transfer~address~uint256_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2594]              assume revert || gas < 0;
[L8356]  RET         call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L8450]  RET         call CorralChoice_DkargoToken(this);

[2020-11-25 14:00:50,856 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:00:50,856 INFO  L82        PathProgramCache]: Analyzing trace with hash 1698233763, now seen corresponding path program 1 times
[2020-11-25 14:00:50,857 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:00:50,889 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:00:51,195 INFO  L134       CoverageAnalysis]: Checked inductivity of 65 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 65 trivial. 0 not checked.
[2020-11-25 14:00:51,196 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 14:00:51,196 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [14] imperfect sequences [] total 14
[2020-11-25 14:00:51,196 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:00:51,196 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-11-25 14:00:51,197 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=26, Invalid=156, Unknown=0, NotChecked=0, Total=182
[2020-11-25 14:00:51,197 INFO  L87              Difference]: Start difference. First operand 5012 states and 5574 transitions. cyclomatic complexity: 564 Second operand 14 states.
[2020-11-25 14:00:56,063 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:00:56,064 INFO  L93              Difference]: Finished difference Result 5209 states and 5780 transitions.
[2020-11-25 14:00:56,064 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 15 states. 
[2020-11-25 14:00:56,064 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5209 states and 5780 transitions.
[2020-11-25 14:00:56,074 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 14:00:56,083 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5209 states to 5209 states and 5780 transitions.
[2020-11-25 14:00:56,083 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1219
[2020-11-25 14:00:56,084 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1219
[2020-11-25 14:00:56,084 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5209 states and 5780 transitions.
[2020-11-25 14:00:56,086 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:00:56,086 INFO  L728         BuchiCegarLoop]: Abstraction has 5209 states and 5780 transitions.
[2020-11-25 14:00:56,090 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5209 states and 5780 transitions.
[2020-11-25 14:00:56,116 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5209 to 4988.
[2020-11-25 14:00:56,116 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4988 states.
[2020-11-25 14:00:56,121 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4988 states to 4988 states and 5540 transitions.
[2020-11-25 14:00:56,121 INFO  L751         BuchiCegarLoop]: Abstraction has 4988 states and 5540 transitions.
[2020-11-25 14:00:56,121 INFO  L631         BuchiCegarLoop]: Abstraction has 4988 states and 5540 transitions.
[2020-11-25 14:00:56,122 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 14:00:56,122 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4988 states and 5540 transitions.
[2020-11-25 14:00:56,127 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:00:56,127 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:00:56,127 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:00:56,129 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:00:56,129 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_DkargoToken0 := false;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]     CALL        call main();
[L8440]              assume null == 0;
[L8441]  CALL        call this := FreshRefGenerator__success();
[L3983]              havoc newRef;
[L3984]              assume Alloc[newRef] == false;
[L3985]              Alloc[newRef] := true;
[L3986]              assume newRef != null;
[L8441]  RET         call this := FreshRefGenerator__success();
[L8442]              assume now >= 0;
[L8443]              assume DType[this] == DkargoToken;
[L8444]              assume msgvalue_MSG == 0;
[L8445]              gas := gas - 53000;
[L8446]  CALL        call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2403]              havoc __exception;
[L2404]              revert := false;
[L2405]  COND FALSE  !(__exception)
[L2438]  CALL        call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5753]  CALL        call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L4104]  CALL        call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4086]              assume msgsender_MSG != null;
[L4087]              Balance[this] := 0;
[L4088]              _owner_Ownership[this] := null;
[L4090]              assert { :EventEmitted "OwnershipTransferred_Ownership" } true;
[L4091]              _owner_Ownership[this] := msgsender_MSG;
[L4104]  RET         call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4105]  COND FALSE  !(revert)
[L5753]  RET         call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]  COND FALSE  !(revert)
[L5757]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L5757]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5758]  COND FALSE  !(revert)
[L5761]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L4913]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L4913]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]  COND FALSE  !(revert)
[L4917]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4868]              assume msgsender_MSG != null;
[L4869]              Balance[this] := 0;
[L4870]              _supply_ERC20[this] := 0;
[L4871]              _balances_ERC20[this] := zeroRefintArr();
[L4872]              sum__balances1[this] := 0;
[L4873]              _allowances_ERC20[this] := zeroRefRefintArr();
[L4874]              sum__allowances2[this] := 0;
[L4876]              pebs_s747 := supply_s747;
[L4877]  COND TRUE   DType[this] == DkargoToken
[L4878]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L5282]              __var_24 := null;
[L5283]  COND FALSE  !(!(account_s999 != null))
[L5287]  CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5287]  RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L5288]  COND FALSE  !(revert)
[L5291]              _supply_ERC20[this] := __var_25;
[L5292]  CALL        call __var_26 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s999], amount_s999);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5292]  RET         call __var_26 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s999], amount_s999);
[L5293]  COND FALSE  !(revert)
[L5296]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][account_s999];
[L5297]              _balances_ERC20[this][account_s999] := __var_26;
[L5298]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][account_s999];
[L5299]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4878]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L4879]  COND FALSE  !(revert)
[L4917]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4918]  COND FALSE  !(revert)
[L5761]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L5762]  COND FALSE  !(revert)
[L5765]  CALL        call ERC20Safe_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG);
[L5381]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L5381]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5382]  COND FALSE  !(revert)
[L5385]  CALL        call ERC20Safe_ERC20Safe_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5362]              assume msgsender_MSG != null;
[L5363]              Balance[this] := 0;
[L5385]  RET         call ERC20Safe_ERC20Safe_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5386]  COND FALSE  !(revert)
[L5765]  RET         call ERC20Safe_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]  COND FALSE  !(revert)
[L5769]  CALL        call AddressChain_AddressChain__success(this, msgsender_MSG, msgvalue_MSG);
[L4361]  CALL        call AddressChain_AddressChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4340]              assume msgsender_MSG != null;
[L4341]              Balance[this] := 0;
[L4343]  CALL        call __var_3 := FreshRefGenerator__success();
[L3983]              havoc newRef;
[L3984]              assume Alloc[newRef] == false;
[L3985]              Alloc[newRef] := true;
[L3986]              assume newRef != null;
[L4343]  RET         call __var_3 := FreshRefGenerator__success();
[L4344]  COND FALSE  !(revert)
[L4347]              _slist_AddressChain[this] := __var_3;
[L4361]  RET         call AddressChain_AddressChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4362]  COND FALSE  !(revert)
[L5769]  RET         call AddressChain_AddressChain__success(this, msgsender_MSG, msgvalue_MSG);
[L5770]  COND FALSE  !(revert)
[L5773]  CALL        call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4689]  CALL        call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4674]              assume msgsender_MSG != null;
[L4675]              Balance[this] := 0;
[L4689]  RET         call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4690]  COND FALSE  !(revert)
[L5773]  RET         call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L5774]  COND FALSE  !(revert)
[L5777]  CALL        call ERC165_ERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4759]  CALL        call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4689]  CALL        call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4674]              assume msgsender_MSG != null;
[L4675]              Balance[this] := 0;
[L4689]  RET         call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4690]  COND FALSE  !(revert)
[L4759]  RET         call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4760]  COND FALSE  !(revert)
[L4763]  CALL        call ERC165_ERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4723]              assume msgsender_MSG != null;
[L4724]              Balance[this] := 0;
[L4725]              _infcs_ERC165[this] := zerointboolArr();
[L4727]              __var_16 := 33540519;
[L4728]  COND TRUE   DType[this] == DkargoToken
[L4729]  CALL        call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, 33540519);
[L4792]  COND FALSE  !(!(infcid_s644 != -1))
[L4796]              _infcs_ERC165[this][infcid_s644] := true;
[L4729]  RET         call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, 33540519);
[L4730]  COND FALSE  !(revert)
[L4763]  RET         call ERC165_ERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4764]  COND FALSE  !(revert)
[L5777]  RET         call ERC165_ERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L5778]  COND FALSE  !(revert)
[L5781]  CALL        call DkargoPrefix_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG);
[L4045]  CALL        call DkargoPrefix_DkargoPrefix_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4029]              assume msgsender_MSG != null;
[L4030]              Balance[this] := 0;
[L4031]              _dkargoPrefix_DkargoPrefix[this] := -1676636045;
[L4045]  RET         call DkargoPrefix_DkargoPrefix_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4046]  COND FALSE  !(revert)
[L5781]  RET         call DkargoPrefix_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]  COND FALSE  !(revert)
[L5785]  CALL        call DkargoToken_DkargoToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5675]              assume msgsender_MSG != null;
[L5676]              Balance[this] := 0;
[L5677]              _name_DkargoToken[this] := -1676636045;
[L5678]              _symbol_DkargoToken[this] := -1676636045;
[L5680]  COND TRUE   DType[this] == DkargoToken
[L5681]  CALL        call _setDkargoPrefix~string_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG, 978340553);
[L4070]              _dkargoPrefix_DkargoPrefix[this] := prefix_s21;
[L5681]  RET         call _setDkargoPrefix~string_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG, 978340553);
[L5682]  COND FALSE  !(revert)
[L5688]              __var_39 := -1804674067;
[L5689]  COND TRUE   DType[this] == DkargoToken
[L5690]  CALL        call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, -1804674067);
[L4792]  COND FALSE  !(!(infcid_s644 != -1))
[L4796]              _infcs_ERC165[this][infcid_s644] := true;
[L5690]  RET         call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, -1804674067);
[L5691]  COND FALSE  !(revert)
[L5697]              _name_DkargoToken[this] := name_s1191;
[L5698]              _symbol_DkargoToken[this] := symbol_s1191;
[L5699]  COND TRUE   DType[this] == DkargoToken
[L5700]  CALL        call _linkChain~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4504]              __var_6 := null;
[L4505]  COND FALSE  !(!(node_s455 != null))
[L4509]  COND TRUE   DType[this] == DkargoToken
[L4510]  CALL        call __var_7 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4446]  COND FALSE  !((count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376)
[L4450]              __var_4 := null;
[L4451]              __var_5 := null;
[L4452]              __ret_0_ := (if prev_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null && next_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null then false else true);
[L4510]  RET         call __var_7 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4511]  COND FALSE  !(revert)
[L4522]  COND FALSE  !(!!__var_7)
[L4526]  COND TRUE   count_AddressChain.NodeList[_slist_AddressChain[this]] == 0
[L4527]              tail_AddressChain.NodeList[_slist_AddressChain[this]] := node_s455;
[L4528]              head_AddressChain.NodeList[_slist_AddressChain[this]] := node_s455;
[L4534]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, count_AddressChain.NodeList[_slist_AddressChain[this]], 1);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L4534]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, count_AddressChain.NodeList[_slist_AddressChain[this]], 1);
[L4535]  COND FALSE  !(revert)
[L4538]              count_AddressChain.NodeList[_slist_AddressChain[this]] := __var_8;
[L4539]              assert { :EventEmitted "AddressChainLinked_AddressChain" } true;
[L5700]  RET         call _linkChain~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5701]  COND FALSE  !(revert)
[L5785]  RET         call DkargoToken_DkargoToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5786]  COND FALSE  !(revert)
[L2438]  RET         call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2439]              assume !revert && gas >= 0;
[L8446]  RET         call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L8447]              assume !revert && gas >= 0;
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND FALSE  !(choice == 23)
[L8291]  COND FALSE  !(choice == 22)
[L8297]  COND FALSE  !(choice == 21)
[L8303]  COND FALSE  !(choice == 20)
[L8309]  COND FALSE  !(choice == 19)
[L8315]  COND FALSE  !(choice == 18)
[L8321]  COND FALSE  !(choice == 17)
[L8327]  COND FALSE  !(choice == 16)
[L8333]  COND FALSE  !(choice == 15)
[L8339]  COND FALSE  !(choice == 14)
[L8345]  COND FALSE  !(choice == 13)
[L8351]  COND TRUE   choice == 12
[L8352]              gas := gas - 21000;
[L8353]  COND TRUE   gas >= 0
[L8354]              assume value_s1257 >= 0 && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8355]              assume msgvalue_MSG == 0;
[L8356]  CALL        call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s1257 && value_s1257 <= _balances_ERC20[this][msgsender_MSG]) && value_s1257 >= 0) && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1257] >= 0) && _balances_ERC20[this][to_s1257] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_DkargoToken0 := true;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L2561]              havoc __exception;
[L2562]              revert := false;
[L2563]  COND TRUE   __exception
[L2564]              __tmp__Balance := Balance;
[L2565]              __tmp__DType := DType;
[L2566]              __tmp__Alloc := Alloc;
[L2567]              __tmp__balance_ADDR := balance_ADDR;
[L2568]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L2569]              __tmp__sum := sum;
[L2570]              __tmp__M_int_bool := M_int_bool;
[L2571]              __tmp__sum__infcs0 := sum__infcs0;
[L2572]              __tmp__M_Ref_int := M_Ref_int;
[L2573]              __tmp__sum__balances1 := sum__balances1;
[L2574]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2575]              __tmp__sum__allowances2 := sum__allowances2;
[L2576]              __tmp__Length := Length;
[L2577]              __tmp__now := now;
[L2578]              __tmp___dkargoPrefix_DkargoPrefix := _dkargoPrefix_DkargoPrefix;
[L2579]              __tmp___owner_Ownership := _owner_Ownership;
[L2580]              __tmp__prev_AddressChain.NodeInfo := prev_AddressChain.NodeInfo;
[L2581]              __tmp__next_AddressChain.NodeInfo := next_AddressChain.NodeInfo;
[L2582]              __tmp__count_AddressChain.NodeList := count_AddressChain.NodeList;
[L2583]              __tmp__head_AddressChain.NodeList := head_AddressChain.NodeList;
[L2584]              __tmp__tail_AddressChain.NodeList := tail_AddressChain.NodeList;
[L2585]              __tmp__map_AddressChain.NodeList := map_AddressChain.NodeList;
[L2586]              __tmp___slist_AddressChain := _slist_AddressChain;
[L2587]              __tmp___infcs_ERC165 := _infcs_ERC165;
[L2588]              __tmp___supply_ERC20 := _supply_ERC20;
[L2589]              __tmp___balances_ERC20 := _balances_ERC20;
[L2590]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L2591]              __tmp___name_DkargoToken := _name_DkargoToken;
[L2592]              __tmp___symbol_DkargoToken := _symbol_DkargoToken;
[L2593]  CALL        call __ret_0_ := transfer~address~uint256_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5823]  COND TRUE   __tmp__DType[this] == DkargoToken
[L5824]  CALL        call ret_s1257 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L4973]  COND TRUE   __tmp__DType[this] == DkargoToken
[L4974]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L5194]              __var_20 := null;
[L5195]  COND FALSE  !(!(sender_s956 != null))
[L5199]              __var_21 := null;
[L5200]  COND FALSE  !(!(recipient_s956 != null))
[L5204]  CALL        call __var_22 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L4224]  COND FALSE  !(!(b_s157 <= a_s157))
[L4228]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4229]              __ret_0_ := c_s157;
[L5204]  RET         call __var_22 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L5205]  COND FALSE  !(revert)
[L5208]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] - __tmp___balances_ERC20[this][sender_s956];
[L5209]              __tmp___balances_ERC20[this][sender_s956] := __var_22;
[L5210]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] + __tmp___balances_ERC20[this][sender_s956];
[L5211]  CALL        call __var_23 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s956], amount_s956);
[L4200]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4201]  COND FALSE  !(!(c_s130 >= a_s130))
[L4205]              __ret_0_ := c_s130;
[L5211]  RET         call __var_23 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s956], amount_s956);
[L5212]  COND FALSE  !(revert)
[L5215]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] - __tmp___balances_ERC20[this][recipient_s956];
[L5216]              __tmp___balances_ERC20[this][recipient_s956] := __var_23;
[L5217]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] + __tmp___balances_ERC20[this][recipient_s956];
[L4974]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L4975]  COND FALSE  !(revert)
[L4991]              __ret_0_ := true;
[L5824]  RET         call ret_s1257 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5825]  COND FALSE  !(revert)
[L5831]              ret_s1257 := ret_s1257;
[L5832]  COND TRUE   __tmp__DType[this] == DkargoToken
[L5833]  CALL        call __var_41 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4431]  COND TRUE   (__tmp__count_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == 1 && __tmp__head_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376) && __tmp__tail_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376
[L4432]              __ret_0_ := true;
[L5833]  RET         call __var_41 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5834]  COND FALSE  !(revert)
[L5840]  COND TRUE   __tmp__DType[this] == DkargoToken
[L5841]  CALL        call __var_42 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5127]              __ret_0_ := __tmp___balances_ERC20[this][account_s841];
[L5841]  RET         call __var_42 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5842]  COND FALSE  !(revert)
[L5848]  COND TRUE   __var_41 && __var_42 == 0
[L5849]  COND TRUE   __tmp__DType[this] == DkargoToken
[L5850]  CALL        call _unlinkChain~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4553]              __var_9 := null;
[L4554]  COND TRUE   !(node_s586 != null)
[L4555]              revert := true;
[L5850]  RET         call _unlinkChain~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5851]  COND TRUE   revert
[L2593]  RET         call __ret_0_ := transfer~address~uint256_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2594]              assume revert || gas < 0;
[L8356]  RET         call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L8450]  RET         call CorralChoice_DkargoToken(this);

Loop:
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND FALSE  !(choice == 23)
[L8291]  COND FALSE  !(choice == 22)
[L8297]  COND FALSE  !(choice == 21)
[L8303]  COND FALSE  !(choice == 20)
[L8309]  COND FALSE  !(choice == 19)
[L8315]  COND FALSE  !(choice == 18)
[L8321]  COND FALSE  !(choice == 17)
[L8327]  COND FALSE  !(choice == 16)
[L8333]  COND FALSE  !(choice == 15)
[L8339]  COND FALSE  !(choice == 14)
[L8345]  COND FALSE  !(choice == 13)
[L8351]  COND TRUE   choice == 12
[L8352]              gas := gas - 21000;
[L8353]  COND TRUE   gas >= 0
[L8354]              assume value_s1257 >= 0 && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8355]              assume msgvalue_MSG == 0;
[L8356]  CALL        call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s1257 && value_s1257 <= _balances_ERC20[this][msgsender_MSG]) && value_s1257 >= 0) && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1257] >= 0) && _balances_ERC20[this][to_s1257] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_DkargoToken0 := true;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L2561]              havoc __exception;
[L2562]              revert := false;
[L2563]  COND TRUE   __exception
[L2564]              __tmp__Balance := Balance;
[L2565]              __tmp__DType := DType;
[L2566]              __tmp__Alloc := Alloc;
[L2567]              __tmp__balance_ADDR := balance_ADDR;
[L2568]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L2569]              __tmp__sum := sum;
[L2570]              __tmp__M_int_bool := M_int_bool;
[L2571]              __tmp__sum__infcs0 := sum__infcs0;
[L2572]              __tmp__M_Ref_int := M_Ref_int;
[L2573]              __tmp__sum__balances1 := sum__balances1;
[L2574]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2575]              __tmp__sum__allowances2 := sum__allowances2;
[L2576]              __tmp__Length := Length;
[L2577]              __tmp__now := now;
[L2578]              __tmp___dkargoPrefix_DkargoPrefix := _dkargoPrefix_DkargoPrefix;
[L2579]              __tmp___owner_Ownership := _owner_Ownership;
[L2580]              __tmp__prev_AddressChain.NodeInfo := prev_AddressChain.NodeInfo;
[L2581]              __tmp__next_AddressChain.NodeInfo := next_AddressChain.NodeInfo;
[L2582]              __tmp__count_AddressChain.NodeList := count_AddressChain.NodeList;
[L2583]              __tmp__head_AddressChain.NodeList := head_AddressChain.NodeList;
[L2584]              __tmp__tail_AddressChain.NodeList := tail_AddressChain.NodeList;
[L2585]              __tmp__map_AddressChain.NodeList := map_AddressChain.NodeList;
[L2586]              __tmp___slist_AddressChain := _slist_AddressChain;
[L2587]              __tmp___infcs_ERC165 := _infcs_ERC165;
[L2588]              __tmp___supply_ERC20 := _supply_ERC20;
[L2589]              __tmp___balances_ERC20 := _balances_ERC20;
[L2590]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L2591]              __tmp___name_DkargoToken := _name_DkargoToken;
[L2592]              __tmp___symbol_DkargoToken := _symbol_DkargoToken;
[L2593]  CALL        call __ret_0_ := transfer~address~uint256_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5823]  COND TRUE   __tmp__DType[this] == DkargoToken
[L5824]  CALL        call ret_s1257 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L4973]  COND TRUE   __tmp__DType[this] == DkargoToken
[L4974]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L5194]              __var_20 := null;
[L5195]  COND FALSE  !(!(sender_s956 != null))
[L5199]              __var_21 := null;
[L5200]  COND FALSE  !(!(recipient_s956 != null))
[L5204]  CALL        call __var_22 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L4224]  COND FALSE  !(!(b_s157 <= a_s157))
[L4228]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4229]              __ret_0_ := c_s157;
[L5204]  RET         call __var_22 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L5205]  COND FALSE  !(revert)
[L5208]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] - __tmp___balances_ERC20[this][sender_s956];
[L5209]              __tmp___balances_ERC20[this][sender_s956] := __var_22;
[L5210]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] + __tmp___balances_ERC20[this][sender_s956];
[L5211]  CALL        call __var_23 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s956], amount_s956);
[L4200]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4201]  COND FALSE  !(!(c_s130 >= a_s130))
[L4205]              __ret_0_ := c_s130;
[L5211]  RET         call __var_23 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s956], amount_s956);
[L5212]  COND FALSE  !(revert)
[L5215]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] - __tmp___balances_ERC20[this][recipient_s956];
[L5216]              __tmp___balances_ERC20[this][recipient_s956] := __var_23;
[L5217]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] + __tmp___balances_ERC20[this][recipient_s956];
[L4974]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L4975]  COND FALSE  !(revert)
[L4991]              __ret_0_ := true;
[L5824]  RET         call ret_s1257 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5825]  COND FALSE  !(revert)
[L5831]              ret_s1257 := ret_s1257;
[L5832]  COND TRUE   __tmp__DType[this] == DkargoToken
[L5833]  CALL        call __var_41 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4431]  COND TRUE   (__tmp__count_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == 1 && __tmp__head_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376) && __tmp__tail_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376
[L4432]              __ret_0_ := true;
[L5833]  RET         call __var_41 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5834]  COND FALSE  !(revert)
[L5840]  COND TRUE   __tmp__DType[this] == DkargoToken
[L5841]  CALL        call __var_42 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5127]              __ret_0_ := __tmp___balances_ERC20[this][account_s841];
[L5841]  RET         call __var_42 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5842]  COND FALSE  !(revert)
[L5848]  COND TRUE   __var_41 && __var_42 == 0
[L5849]  COND TRUE   __tmp__DType[this] == DkargoToken
[L5850]  CALL        call _unlinkChain~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4553]              __var_9 := null;
[L4554]  COND TRUE   !(node_s586 != null)
[L4555]              revert := true;
[L5850]  RET         call _unlinkChain~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5851]  COND TRUE   revert
[L2593]  RET         call __ret_0_ := transfer~address~uint256_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2594]              assume revert || gas < 0;
[L8356]  RET         call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L8450]  RET         call CorralChoice_DkargoToken(this);

[2020-11-25 14:00:56,133 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:00:56,133 INFO  L82        PathProgramCache]: Analyzing trace with hash 1487896152, now seen corresponding path program 1 times
[2020-11-25 14:00:56,134 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:00:56,147 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:00:56,260 INFO  L134       CoverageAnalysis]: Checked inductivity of 65 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 65 trivial. 0 not checked.
[2020-11-25 14:00:56,260 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 14:00:56,260 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 14:00:56,261 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:00:56,261 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 14:00:56,261 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-25 14:00:56,261 INFO  L87              Difference]: Start difference. First operand 4988 states and 5540 transitions. cyclomatic complexity: 554 Second operand 6 states.
[2020-11-25 14:00:56,312 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:00:56,312 INFO  L93              Difference]: Finished difference Result 5012 states and 5565 transitions.
[2020-11-25 14:00:56,312 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-11-25 14:00:56,312 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5012 states and 5565 transitions.
[2020-11-25 14:00:56,321 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:00:56,329 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5012 states to 4992 states and 5544 transitions.
[2020-11-25 14:00:56,329 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1114
[2020-11-25 14:00:56,330 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1114
[2020-11-25 14:00:56,330 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4992 states and 5544 transitions.
[2020-11-25 14:00:56,332 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:00:56,332 INFO  L728         BuchiCegarLoop]: Abstraction has 4992 states and 5544 transitions.
[2020-11-25 14:00:56,336 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4992 states and 5544 transitions.
[2020-11-25 14:00:56,359 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4992 to 4992.
[2020-11-25 14:00:56,360 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4992 states.
[2020-11-25 14:00:56,364 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4992 states to 4992 states and 5544 transitions.
[2020-11-25 14:00:56,364 INFO  L751         BuchiCegarLoop]: Abstraction has 4992 states and 5544 transitions.
[2020-11-25 14:00:56,364 INFO  L631         BuchiCegarLoop]: Abstraction has 4992 states and 5544 transitions.
[2020-11-25 14:00:56,364 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-25 14:00:56,365 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4992 states and 5544 transitions.
[2020-11-25 14:00:56,370 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:00:56,370 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:00:56,370 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:00:56,371 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:00:56,371 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_DkargoToken0 := false;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]     CALL        call main();
[L8440]              assume null == 0;
[L8441]  CALL        call this := FreshRefGenerator__success();
[L3983]              havoc newRef;
[L3984]              assume Alloc[newRef] == false;
[L3985]              Alloc[newRef] := true;
[L3986]              assume newRef != null;
[L8441]  RET         call this := FreshRefGenerator__success();
[L8442]              assume now >= 0;
[L8443]              assume DType[this] == DkargoToken;
[L8444]              assume msgvalue_MSG == 0;
[L8445]              gas := gas - 53000;
[L8446]  CALL        call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2403]              havoc __exception;
[L2404]              revert := false;
[L2405]  COND FALSE  !(__exception)
[L2438]  CALL        call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5753]  CALL        call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L4104]  CALL        call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4086]              assume msgsender_MSG != null;
[L4087]              Balance[this] := 0;
[L4088]              _owner_Ownership[this] := null;
[L4090]              assert { :EventEmitted "OwnershipTransferred_Ownership" } true;
[L4091]              _owner_Ownership[this] := msgsender_MSG;
[L4104]  RET         call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4105]  COND FALSE  !(revert)
[L5753]  RET         call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]  COND FALSE  !(revert)
[L5757]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L5757]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5758]  COND FALSE  !(revert)
[L5761]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L4913]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L4913]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]  COND FALSE  !(revert)
[L4917]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4868]              assume msgsender_MSG != null;
[L4869]              Balance[this] := 0;
[L4870]              _supply_ERC20[this] := 0;
[L4871]              _balances_ERC20[this] := zeroRefintArr();
[L4872]              sum__balances1[this] := 0;
[L4873]              _allowances_ERC20[this] := zeroRefRefintArr();
[L4874]              sum__allowances2[this] := 0;
[L4876]              pebs_s747 := supply_s747;
[L4877]  COND TRUE   DType[this] == DkargoToken
[L4878]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L5282]              __var_24 := null;
[L5283]  COND FALSE  !(!(account_s999 != null))
[L5287]  CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5287]  RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L5288]  COND FALSE  !(revert)
[L5291]              _supply_ERC20[this] := __var_25;
[L5292]  CALL        call __var_26 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s999], amount_s999);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5292]  RET         call __var_26 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s999], amount_s999);
[L5293]  COND FALSE  !(revert)
[L5296]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][account_s999];
[L5297]              _balances_ERC20[this][account_s999] := __var_26;
[L5298]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][account_s999];
[L5299]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4878]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L4879]  COND FALSE  !(revert)
[L4917]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4918]  COND FALSE  !(revert)
[L5761]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L5762]  COND FALSE  !(revert)
[L5765]  CALL        call ERC20Safe_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG);
[L5381]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L5381]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5382]  COND FALSE  !(revert)
[L5385]  CALL        call ERC20Safe_ERC20Safe_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5362]              assume msgsender_MSG != null;
[L5363]              Balance[this] := 0;
[L5385]  RET         call ERC20Safe_ERC20Safe_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5386]  COND FALSE  !(revert)
[L5765]  RET         call ERC20Safe_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]  COND FALSE  !(revert)
[L5769]  CALL        call AddressChain_AddressChain__success(this, msgsender_MSG, msgvalue_MSG);
[L4361]  CALL        call AddressChain_AddressChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4340]              assume msgsender_MSG != null;
[L4341]              Balance[this] := 0;
[L4343]  CALL        call __var_3 := FreshRefGenerator__success();
[L3983]              havoc newRef;
[L3984]              assume Alloc[newRef] == false;
[L3985]              Alloc[newRef] := true;
[L3986]              assume newRef != null;
[L4343]  RET         call __var_3 := FreshRefGenerator__success();
[L4344]  COND FALSE  !(revert)
[L4347]              _slist_AddressChain[this] := __var_3;
[L4361]  RET         call AddressChain_AddressChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4362]  COND FALSE  !(revert)
[L5769]  RET         call AddressChain_AddressChain__success(this, msgsender_MSG, msgvalue_MSG);
[L5770]  COND FALSE  !(revert)
[L5773]  CALL        call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4689]  CALL        call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4674]              assume msgsender_MSG != null;
[L4675]              Balance[this] := 0;
[L4689]  RET         call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4690]  COND FALSE  !(revert)
[L5773]  RET         call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L5774]  COND FALSE  !(revert)
[L5777]  CALL        call ERC165_ERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4759]  CALL        call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4689]  CALL        call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4674]              assume msgsender_MSG != null;
[L4675]              Balance[this] := 0;
[L4689]  RET         call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4690]  COND FALSE  !(revert)
[L4759]  RET         call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4760]  COND FALSE  !(revert)
[L4763]  CALL        call ERC165_ERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4723]              assume msgsender_MSG != null;
[L4724]              Balance[this] := 0;
[L4725]              _infcs_ERC165[this] := zerointboolArr();
[L4727]              __var_16 := 33540519;
[L4728]  COND TRUE   DType[this] == DkargoToken
[L4729]  CALL        call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, 33540519);
[L4792]  COND FALSE  !(!(infcid_s644 != -1))
[L4796]              _infcs_ERC165[this][infcid_s644] := true;
[L4729]  RET         call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, 33540519);
[L4730]  COND FALSE  !(revert)
[L4763]  RET         call ERC165_ERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4764]  COND FALSE  !(revert)
[L5777]  RET         call ERC165_ERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L5778]  COND FALSE  !(revert)
[L5781]  CALL        call DkargoPrefix_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG);
[L4045]  CALL        call DkargoPrefix_DkargoPrefix_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4029]              assume msgsender_MSG != null;
[L4030]              Balance[this] := 0;
[L4031]              _dkargoPrefix_DkargoPrefix[this] := -1676636045;
[L4045]  RET         call DkargoPrefix_DkargoPrefix_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4046]  COND FALSE  !(revert)
[L5781]  RET         call DkargoPrefix_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]  COND FALSE  !(revert)
[L5785]  CALL        call DkargoToken_DkargoToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5675]              assume msgsender_MSG != null;
[L5676]              Balance[this] := 0;
[L5677]              _name_DkargoToken[this] := -1676636045;
[L5678]              _symbol_DkargoToken[this] := -1676636045;
[L5680]  COND TRUE   DType[this] == DkargoToken
[L5681]  CALL        call _setDkargoPrefix~string_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG, 978340553);
[L4070]              _dkargoPrefix_DkargoPrefix[this] := prefix_s21;
[L5681]  RET         call _setDkargoPrefix~string_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG, 978340553);
[L5682]  COND FALSE  !(revert)
[L5688]              __var_39 := -1804674067;
[L5689]  COND TRUE   DType[this] == DkargoToken
[L5690]  CALL        call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, -1804674067);
[L4792]  COND FALSE  !(!(infcid_s644 != -1))
[L4796]              _infcs_ERC165[this][infcid_s644] := true;
[L5690]  RET         call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, -1804674067);
[L5691]  COND FALSE  !(revert)
[L5697]              _name_DkargoToken[this] := name_s1191;
[L5698]              _symbol_DkargoToken[this] := symbol_s1191;
[L5699]  COND TRUE   DType[this] == DkargoToken
[L5700]  CALL        call _linkChain~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4504]              __var_6 := null;
[L4505]  COND FALSE  !(!(node_s455 != null))
[L4509]  COND TRUE   DType[this] == DkargoToken
[L4510]  CALL        call __var_7 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4446]  COND FALSE  !((count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376)
[L4450]              __var_4 := null;
[L4451]              __var_5 := null;
[L4452]              __ret_0_ := (if prev_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null && next_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null then false else true);
[L4510]  RET         call __var_7 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4511]  COND FALSE  !(revert)
[L4522]  COND FALSE  !(!!__var_7)
[L4526]  COND TRUE   count_AddressChain.NodeList[_slist_AddressChain[this]] == 0
[L4527]              tail_AddressChain.NodeList[_slist_AddressChain[this]] := node_s455;
[L4528]              head_AddressChain.NodeList[_slist_AddressChain[this]] := node_s455;
[L4534]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, count_AddressChain.NodeList[_slist_AddressChain[this]], 1);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L4534]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, count_AddressChain.NodeList[_slist_AddressChain[this]], 1);
[L4535]  COND FALSE  !(revert)
[L4538]              count_AddressChain.NodeList[_slist_AddressChain[this]] := __var_8;
[L4539]              assert { :EventEmitted "AddressChainLinked_AddressChain" } true;
[L5700]  RET         call _linkChain~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5701]  COND FALSE  !(revert)
[L5785]  RET         call DkargoToken_DkargoToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5786]  COND FALSE  !(revert)
[L2438]  RET         call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2439]              assume !revert && gas >= 0;
[L8446]  RET         call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L8447]              assume !revert && gas >= 0;
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND FALSE  !(choice == 23)
[L8291]  COND FALSE  !(choice == 22)
[L8297]  COND FALSE  !(choice == 21)
[L8303]  COND FALSE  !(choice == 20)
[L8309]  COND FALSE  !(choice == 19)
[L8315]  COND FALSE  !(choice == 18)
[L8321]  COND FALSE  !(choice == 17)
[L8327]  COND FALSE  !(choice == 16)
[L8333]  COND FALSE  !(choice == 15)
[L8339]  COND FALSE  !(choice == 14)
[L8345]  COND FALSE  !(choice == 13)
[L8351]  COND TRUE   choice == 12
[L8352]              gas := gas - 21000;
[L8353]  COND TRUE   gas >= 0
[L8354]              assume value_s1257 >= 0 && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8355]              assume msgvalue_MSG == 0;
[L8356]  CALL        call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s1257 && value_s1257 <= _balances_ERC20[this][msgsender_MSG]) && value_s1257 >= 0) && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1257] >= 0) && _balances_ERC20[this][to_s1257] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_DkargoToken0 := true;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L2561]              havoc __exception;
[L2562]              revert := false;
[L2563]  COND TRUE   __exception
[L2564]              __tmp__Balance := Balance;
[L2565]              __tmp__DType := DType;
[L2566]              __tmp__Alloc := Alloc;
[L2567]              __tmp__balance_ADDR := balance_ADDR;
[L2568]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L2569]              __tmp__sum := sum;
[L2570]              __tmp__M_int_bool := M_int_bool;
[L2571]              __tmp__sum__infcs0 := sum__infcs0;
[L2572]              __tmp__M_Ref_int := M_Ref_int;
[L2573]              __tmp__sum__balances1 := sum__balances1;
[L2574]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2575]              __tmp__sum__allowances2 := sum__allowances2;
[L2576]              __tmp__Length := Length;
[L2577]              __tmp__now := now;
[L2578]              __tmp___dkargoPrefix_DkargoPrefix := _dkargoPrefix_DkargoPrefix;
[L2579]              __tmp___owner_Ownership := _owner_Ownership;
[L2580]              __tmp__prev_AddressChain.NodeInfo := prev_AddressChain.NodeInfo;
[L2581]              __tmp__next_AddressChain.NodeInfo := next_AddressChain.NodeInfo;
[L2582]              __tmp__count_AddressChain.NodeList := count_AddressChain.NodeList;
[L2583]              __tmp__head_AddressChain.NodeList := head_AddressChain.NodeList;
[L2584]              __tmp__tail_AddressChain.NodeList := tail_AddressChain.NodeList;
[L2585]              __tmp__map_AddressChain.NodeList := map_AddressChain.NodeList;
[L2586]              __tmp___slist_AddressChain := _slist_AddressChain;
[L2587]              __tmp___infcs_ERC165 := _infcs_ERC165;
[L2588]              __tmp___supply_ERC20 := _supply_ERC20;
[L2589]              __tmp___balances_ERC20 := _balances_ERC20;
[L2590]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L2591]              __tmp___name_DkargoToken := _name_DkargoToken;
[L2592]              __tmp___symbol_DkargoToken := _symbol_DkargoToken;
[L2593]  CALL        call __ret_0_ := transfer~address~uint256_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5823]  COND TRUE   __tmp__DType[this] == DkargoToken
[L5824]  CALL        call ret_s1257 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L4973]  COND TRUE   __tmp__DType[this] == DkargoToken
[L4974]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L5194]              __var_20 := null;
[L5195]  COND FALSE  !(!(sender_s956 != null))
[L5199]              __var_21 := null;
[L5200]  COND FALSE  !(!(recipient_s956 != null))
[L5204]  CALL        call __var_22 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L4224]  COND FALSE  !(!(b_s157 <= a_s157))
[L4228]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4229]              __ret_0_ := c_s157;
[L5204]  RET         call __var_22 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L5205]  COND FALSE  !(revert)
[L5208]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] - __tmp___balances_ERC20[this][sender_s956];
[L5209]              __tmp___balances_ERC20[this][sender_s956] := __var_22;
[L5210]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] + __tmp___balances_ERC20[this][sender_s956];
[L5211]  CALL        call __var_23 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s956], amount_s956);
[L4200]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4201]  COND FALSE  !(!(c_s130 >= a_s130))
[L4205]              __ret_0_ := c_s130;
[L5211]  RET         call __var_23 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s956], amount_s956);
[L5212]  COND FALSE  !(revert)
[L5215]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] - __tmp___balances_ERC20[this][recipient_s956];
[L5216]              __tmp___balances_ERC20[this][recipient_s956] := __var_23;
[L5217]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] + __tmp___balances_ERC20[this][recipient_s956];
[L4974]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L4975]  COND FALSE  !(revert)
[L4991]              __ret_0_ := true;
[L5824]  RET         call ret_s1257 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5825]  COND FALSE  !(revert)
[L5831]              ret_s1257 := ret_s1257;
[L5832]  COND TRUE   __tmp__DType[this] == DkargoToken
[L5833]  CALL        call __var_41 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4431]  COND TRUE   (__tmp__count_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == 1 && __tmp__head_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376) && __tmp__tail_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376
[L4432]              __ret_0_ := true;
[L5833]  RET         call __var_41 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5834]  COND FALSE  !(revert)
[L5840]  COND TRUE   __tmp__DType[this] == DkargoToken
[L5841]  CALL        call __var_42 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5127]              __ret_0_ := __tmp___balances_ERC20[this][account_s841];
[L5841]  RET         call __var_42 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5842]  COND FALSE  !(revert)
[L5848]  COND TRUE   __var_41 && __var_42 == 0
[L5849]  COND TRUE   __tmp__DType[this] == DkargoToken
[L5850]  CALL        call _unlinkChain~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4553]              __var_9 := null;
[L4554]  COND FALSE  !(!(node_s586 != null))
[L4558]  COND FALSE  !(__tmp__DType[this] == DkargoToken)
[L4563]  COND TRUE   __tmp__DType[this] == AddressChain
[L4564]  CALL        call __var_10 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, node_s586);
[L4431]  COND TRUE   (__tmp__count_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == 1 && __tmp__head_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376) && __tmp__tail_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376
[L4432]              __ret_0_ := true;
[L4564]  RET         call __var_10 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, node_s586);
[L4565]  COND FALSE  !(revert)
[L4571]  COND TRUE   !__var_10
[L4572]              revert := true;
[L5850]  RET         call _unlinkChain~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5851]  COND TRUE   revert
[L2593]  RET         call __ret_0_ := transfer~address~uint256_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2594]              assume revert || gas < 0;
[L8356]  RET         call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L8450]  RET         call CorralChoice_DkargoToken(this);

Loop:
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND FALSE  !(choice == 23)
[L8291]  COND FALSE  !(choice == 22)
[L8297]  COND FALSE  !(choice == 21)
[L8303]  COND FALSE  !(choice == 20)
[L8309]  COND FALSE  !(choice == 19)
[L8315]  COND FALSE  !(choice == 18)
[L8321]  COND FALSE  !(choice == 17)
[L8327]  COND FALSE  !(choice == 16)
[L8333]  COND FALSE  !(choice == 15)
[L8339]  COND FALSE  !(choice == 14)
[L8345]  COND FALSE  !(choice == 13)
[L8351]  COND TRUE   choice == 12
[L8352]              gas := gas - 21000;
[L8353]  COND TRUE   gas >= 0
[L8354]              assume value_s1257 >= 0 && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8355]              assume msgvalue_MSG == 0;
[L8356]  CALL        call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s1257 && value_s1257 <= _balances_ERC20[this][msgsender_MSG]) && value_s1257 >= 0) && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1257] >= 0) && _balances_ERC20[this][to_s1257] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_DkargoToken0 := true;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L2561]              havoc __exception;
[L2562]              revert := false;
[L2563]  COND TRUE   __exception
[L2564]              __tmp__Balance := Balance;
[L2565]              __tmp__DType := DType;
[L2566]              __tmp__Alloc := Alloc;
[L2567]              __tmp__balance_ADDR := balance_ADDR;
[L2568]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L2569]              __tmp__sum := sum;
[L2570]              __tmp__M_int_bool := M_int_bool;
[L2571]              __tmp__sum__infcs0 := sum__infcs0;
[L2572]              __tmp__M_Ref_int := M_Ref_int;
[L2573]              __tmp__sum__balances1 := sum__balances1;
[L2574]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2575]              __tmp__sum__allowances2 := sum__allowances2;
[L2576]              __tmp__Length := Length;
[L2577]              __tmp__now := now;
[L2578]              __tmp___dkargoPrefix_DkargoPrefix := _dkargoPrefix_DkargoPrefix;
[L2579]              __tmp___owner_Ownership := _owner_Ownership;
[L2580]              __tmp__prev_AddressChain.NodeInfo := prev_AddressChain.NodeInfo;
[L2581]              __tmp__next_AddressChain.NodeInfo := next_AddressChain.NodeInfo;
[L2582]              __tmp__count_AddressChain.NodeList := count_AddressChain.NodeList;
[L2583]              __tmp__head_AddressChain.NodeList := head_AddressChain.NodeList;
[L2584]              __tmp__tail_AddressChain.NodeList := tail_AddressChain.NodeList;
[L2585]              __tmp__map_AddressChain.NodeList := map_AddressChain.NodeList;
[L2586]              __tmp___slist_AddressChain := _slist_AddressChain;
[L2587]              __tmp___infcs_ERC165 := _infcs_ERC165;
[L2588]              __tmp___supply_ERC20 := _supply_ERC20;
[L2589]              __tmp___balances_ERC20 := _balances_ERC20;
[L2590]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L2591]              __tmp___name_DkargoToken := _name_DkargoToken;
[L2592]              __tmp___symbol_DkargoToken := _symbol_DkargoToken;
[L2593]  CALL        call __ret_0_ := transfer~address~uint256_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5823]  COND TRUE   __tmp__DType[this] == DkargoToken
[L5824]  CALL        call ret_s1257 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L4973]  COND TRUE   __tmp__DType[this] == DkargoToken
[L4974]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L5194]              __var_20 := null;
[L5195]  COND FALSE  !(!(sender_s956 != null))
[L5199]              __var_21 := null;
[L5200]  COND FALSE  !(!(recipient_s956 != null))
[L5204]  CALL        call __var_22 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L4224]  COND FALSE  !(!(b_s157 <= a_s157))
[L4228]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4229]              __ret_0_ := c_s157;
[L5204]  RET         call __var_22 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L5205]  COND FALSE  !(revert)
[L5208]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] - __tmp___balances_ERC20[this][sender_s956];
[L5209]              __tmp___balances_ERC20[this][sender_s956] := __var_22;
[L5210]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] + __tmp___balances_ERC20[this][sender_s956];
[L5211]  CALL        call __var_23 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s956], amount_s956);
[L4200]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4201]  COND FALSE  !(!(c_s130 >= a_s130))
[L4205]              __ret_0_ := c_s130;
[L5211]  RET         call __var_23 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s956], amount_s956);
[L5212]  COND FALSE  !(revert)
[L5215]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] - __tmp___balances_ERC20[this][recipient_s956];
[L5216]              __tmp___balances_ERC20[this][recipient_s956] := __var_23;
[L5217]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] + __tmp___balances_ERC20[this][recipient_s956];
[L4974]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L4975]  COND FALSE  !(revert)
[L4991]              __ret_0_ := true;
[L5824]  RET         call ret_s1257 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5825]  COND FALSE  !(revert)
[L5831]              ret_s1257 := ret_s1257;
[L5832]  COND TRUE   __tmp__DType[this] == DkargoToken
[L5833]  CALL        call __var_41 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4431]  COND TRUE   (__tmp__count_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == 1 && __tmp__head_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376) && __tmp__tail_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376
[L4432]              __ret_0_ := true;
[L5833]  RET         call __var_41 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5834]  COND FALSE  !(revert)
[L5840]  COND TRUE   __tmp__DType[this] == DkargoToken
[L5841]  CALL        call __var_42 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5127]              __ret_0_ := __tmp___balances_ERC20[this][account_s841];
[L5841]  RET         call __var_42 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5842]  COND FALSE  !(revert)
[L5848]  COND TRUE   __var_41 && __var_42 == 0
[L5849]  COND TRUE   __tmp__DType[this] == DkargoToken
[L5850]  CALL        call _unlinkChain~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4553]              __var_9 := null;
[L4554]  COND FALSE  !(!(node_s586 != null))
[L4558]  COND FALSE  !(__tmp__DType[this] == DkargoToken)
[L4563]  COND TRUE   __tmp__DType[this] == AddressChain
[L4564]  CALL        call __var_10 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, node_s586);
[L4431]  COND TRUE   (__tmp__count_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == 1 && __tmp__head_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376) && __tmp__tail_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376
[L4432]              __ret_0_ := true;
[L4564]  RET         call __var_10 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, node_s586);
[L4565]  COND FALSE  !(revert)
[L4571]  COND TRUE   !__var_10
[L4572]              revert := true;
[L5850]  RET         call _unlinkChain~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5851]  COND TRUE   revert
[L2593]  RET         call __ret_0_ := transfer~address~uint256_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2594]              assume revert || gas < 0;
[L8356]  RET         call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L8450]  RET         call CorralChoice_DkargoToken(this);

[2020-11-25 14:00:56,376 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:00:56,376 INFO  L82        PathProgramCache]: Analyzing trace with hash -400429225, now seen corresponding path program 1 times
[2020-11-25 14:00:56,377 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:00:56,391 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:00:56,462 INFO  L134       CoverageAnalysis]: Checked inductivity of 69 backedges. 2 proven. 0 refuted. 0 times theorem prover too weak. 67 trivial. 0 not checked.
[2020-11-25 14:00:56,463 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 14:00:56,463 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 14:00:56,463 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:00:56,463 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 14:00:56,463 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 14:00:56,464 INFO  L87              Difference]: Start difference. First operand 4992 states and 5544 transitions. cyclomatic complexity: 554 Second operand 4 states.
[2020-11-25 14:00:56,486 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:00:56,486 INFO  L93              Difference]: Finished difference Result 5010 states and 5580 transitions.
[2020-11-25 14:00:56,486 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 14:00:56,486 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5010 states and 5580 transitions.
[2020-11-25 14:00:56,494 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:00:56,502 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5010 states to 5010 states and 5580 transitions.
[2020-11-25 14:00:56,502 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1116
[2020-11-25 14:00:56,503 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1116
[2020-11-25 14:00:56,503 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5010 states and 5580 transitions.
[2020-11-25 14:00:56,505 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:00:56,505 INFO  L728         BuchiCegarLoop]: Abstraction has 5010 states and 5580 transitions.
[2020-11-25 14:00:56,509 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5010 states and 5580 transitions.
[2020-11-25 14:00:56,530 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5010 to 5006.
[2020-11-25 14:00:56,530 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5006 states.
[2020-11-25 14:00:56,535 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5006 states to 5006 states and 5574 transitions.
[2020-11-25 14:00:56,535 INFO  L751         BuchiCegarLoop]: Abstraction has 5006 states and 5574 transitions.
[2020-11-25 14:00:56,535 INFO  L631         BuchiCegarLoop]: Abstraction has 5006 states and 5574 transitions.
[2020-11-25 14:00:56,535 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-11-25 14:00:56,535 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5006 states and 5574 transitions.
[2020-11-25 14:00:56,540 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:00:56,540 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:00:56,540 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:00:56,542 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:00:56,542 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_DkargoToken0 := false;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]     CALL        call main();
[L8440]              assume null == 0;
[L8441]  CALL        call this := FreshRefGenerator__success();
[L3983]              havoc newRef;
[L3984]              assume Alloc[newRef] == false;
[L3985]              Alloc[newRef] := true;
[L3986]              assume newRef != null;
[L8441]  RET         call this := FreshRefGenerator__success();
[L8442]              assume now >= 0;
[L8443]              assume DType[this] == DkargoToken;
[L8444]              assume msgvalue_MSG == 0;
[L8445]              gas := gas - 53000;
[L8446]  CALL        call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2403]              havoc __exception;
[L2404]              revert := false;
[L2405]  COND FALSE  !(__exception)
[L2438]  CALL        call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5753]  CALL        call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L4104]  CALL        call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4086]              assume msgsender_MSG != null;
[L4087]              Balance[this] := 0;
[L4088]              _owner_Ownership[this] := null;
[L4090]              assert { :EventEmitted "OwnershipTransferred_Ownership" } true;
[L4091]              _owner_Ownership[this] := msgsender_MSG;
[L4104]  RET         call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4105]  COND FALSE  !(revert)
[L5753]  RET         call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]  COND FALSE  !(revert)
[L5757]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L5757]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5758]  COND FALSE  !(revert)
[L5761]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L4913]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L4913]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]  COND FALSE  !(revert)
[L4917]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4868]              assume msgsender_MSG != null;
[L4869]              Balance[this] := 0;
[L4870]              _supply_ERC20[this] := 0;
[L4871]              _balances_ERC20[this] := zeroRefintArr();
[L4872]              sum__balances1[this] := 0;
[L4873]              _allowances_ERC20[this] := zeroRefRefintArr();
[L4874]              sum__allowances2[this] := 0;
[L4876]              pebs_s747 := supply_s747;
[L4877]  COND TRUE   DType[this] == DkargoToken
[L4878]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L5282]              __var_24 := null;
[L5283]  COND FALSE  !(!(account_s999 != null))
[L5287]  CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5287]  RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L5288]  COND FALSE  !(revert)
[L5291]              _supply_ERC20[this] := __var_25;
[L5292]  CALL        call __var_26 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s999], amount_s999);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5292]  RET         call __var_26 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s999], amount_s999);
[L5293]  COND FALSE  !(revert)
[L5296]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][account_s999];
[L5297]              _balances_ERC20[this][account_s999] := __var_26;
[L5298]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][account_s999];
[L5299]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4878]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L4879]  COND FALSE  !(revert)
[L4917]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4918]  COND FALSE  !(revert)
[L5761]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L5762]  COND FALSE  !(revert)
[L5765]  CALL        call ERC20Safe_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG);
[L5381]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L5381]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5382]  COND FALSE  !(revert)
[L5385]  CALL        call ERC20Safe_ERC20Safe_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5362]              assume msgsender_MSG != null;
[L5363]              Balance[this] := 0;
[L5385]  RET         call ERC20Safe_ERC20Safe_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5386]  COND FALSE  !(revert)
[L5765]  RET         call ERC20Safe_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]  COND FALSE  !(revert)
[L5769]  CALL        call AddressChain_AddressChain__success(this, msgsender_MSG, msgvalue_MSG);
[L4361]  CALL        call AddressChain_AddressChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4340]              assume msgsender_MSG != null;
[L4341]              Balance[this] := 0;
[L4343]  CALL        call __var_3 := FreshRefGenerator__success();
[L3983]              havoc newRef;
[L3984]              assume Alloc[newRef] == false;
[L3985]              Alloc[newRef] := true;
[L3986]              assume newRef != null;
[L4343]  RET         call __var_3 := FreshRefGenerator__success();
[L4344]  COND FALSE  !(revert)
[L4347]              _slist_AddressChain[this] := __var_3;
[L4361]  RET         call AddressChain_AddressChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4362]  COND FALSE  !(revert)
[L5769]  RET         call AddressChain_AddressChain__success(this, msgsender_MSG, msgvalue_MSG);
[L5770]  COND FALSE  !(revert)
[L5773]  CALL        call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4689]  CALL        call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4674]              assume msgsender_MSG != null;
[L4675]              Balance[this] := 0;
[L4689]  RET         call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4690]  COND FALSE  !(revert)
[L5773]  RET         call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L5774]  COND FALSE  !(revert)
[L5777]  CALL        call ERC165_ERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4759]  CALL        call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4689]  CALL        call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4674]              assume msgsender_MSG != null;
[L4675]              Balance[this] := 0;
[L4689]  RET         call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4690]  COND FALSE  !(revert)
[L4759]  RET         call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4760]  COND FALSE  !(revert)
[L4763]  CALL        call ERC165_ERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4723]              assume msgsender_MSG != null;
[L4724]              Balance[this] := 0;
[L4725]              _infcs_ERC165[this] := zerointboolArr();
[L4727]              __var_16 := 33540519;
[L4728]  COND TRUE   DType[this] == DkargoToken
[L4729]  CALL        call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, 33540519);
[L4792]  COND FALSE  !(!(infcid_s644 != -1))
[L4796]              _infcs_ERC165[this][infcid_s644] := true;
[L4729]  RET         call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, 33540519);
[L4730]  COND FALSE  !(revert)
[L4763]  RET         call ERC165_ERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4764]  COND FALSE  !(revert)
[L5777]  RET         call ERC165_ERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L5778]  COND FALSE  !(revert)
[L5781]  CALL        call DkargoPrefix_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG);
[L4045]  CALL        call DkargoPrefix_DkargoPrefix_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4029]              assume msgsender_MSG != null;
[L4030]              Balance[this] := 0;
[L4031]              _dkargoPrefix_DkargoPrefix[this] := -1676636045;
[L4045]  RET         call DkargoPrefix_DkargoPrefix_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4046]  COND FALSE  !(revert)
[L5781]  RET         call DkargoPrefix_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]  COND FALSE  !(revert)
[L5785]  CALL        call DkargoToken_DkargoToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5675]              assume msgsender_MSG != null;
[L5676]              Balance[this] := 0;
[L5677]              _name_DkargoToken[this] := -1676636045;
[L5678]              _symbol_DkargoToken[this] := -1676636045;
[L5680]  COND TRUE   DType[this] == DkargoToken
[L5681]  CALL        call _setDkargoPrefix~string_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG, 978340553);
[L4070]              _dkargoPrefix_DkargoPrefix[this] := prefix_s21;
[L5681]  RET         call _setDkargoPrefix~string_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG, 978340553);
[L5682]  COND FALSE  !(revert)
[L5688]              __var_39 := -1804674067;
[L5689]  COND TRUE   DType[this] == DkargoToken
[L5690]  CALL        call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, -1804674067);
[L4792]  COND FALSE  !(!(infcid_s644 != -1))
[L4796]              _infcs_ERC165[this][infcid_s644] := true;
[L5690]  RET         call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, -1804674067);
[L5691]  COND FALSE  !(revert)
[L5697]              _name_DkargoToken[this] := name_s1191;
[L5698]              _symbol_DkargoToken[this] := symbol_s1191;
[L5699]  COND TRUE   DType[this] == DkargoToken
[L5700]  CALL        call _linkChain~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4504]              __var_6 := null;
[L4505]  COND FALSE  !(!(node_s455 != null))
[L4509]  COND TRUE   DType[this] == DkargoToken
[L4510]  CALL        call __var_7 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4446]  COND FALSE  !((count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376)
[L4450]              __var_4 := null;
[L4451]              __var_5 := null;
[L4452]              __ret_0_ := (if prev_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null && next_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null then false else true);
[L4510]  RET         call __var_7 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4511]  COND FALSE  !(revert)
[L4522]  COND FALSE  !(!!__var_7)
[L4526]  COND TRUE   count_AddressChain.NodeList[_slist_AddressChain[this]] == 0
[L4527]              tail_AddressChain.NodeList[_slist_AddressChain[this]] := node_s455;
[L4528]              head_AddressChain.NodeList[_slist_AddressChain[this]] := node_s455;
[L4534]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, count_AddressChain.NodeList[_slist_AddressChain[this]], 1);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L4534]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, count_AddressChain.NodeList[_slist_AddressChain[this]], 1);
[L4535]  COND FALSE  !(revert)
[L4538]              count_AddressChain.NodeList[_slist_AddressChain[this]] := __var_8;
[L4539]              assert { :EventEmitted "AddressChainLinked_AddressChain" } true;
[L5700]  RET         call _linkChain~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5701]  COND FALSE  !(revert)
[L5785]  RET         call DkargoToken_DkargoToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5786]  COND FALSE  !(revert)
[L2438]  RET         call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2439]              assume !revert && gas >= 0;
[L8446]  RET         call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L8447]              assume !revert && gas >= 0;
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND FALSE  !(choice == 23)
[L8291]  COND FALSE  !(choice == 22)
[L8297]  COND FALSE  !(choice == 21)
[L8303]  COND FALSE  !(choice == 20)
[L8309]  COND FALSE  !(choice == 19)
[L8315]  COND FALSE  !(choice == 18)
[L8321]  COND FALSE  !(choice == 17)
[L8327]  COND FALSE  !(choice == 16)
[L8333]  COND FALSE  !(choice == 15)
[L8339]  COND FALSE  !(choice == 14)
[L8345]  COND FALSE  !(choice == 13)
[L8351]  COND TRUE   choice == 12
[L8352]              gas := gas - 21000;
[L8353]  COND TRUE   gas >= 0
[L8354]              assume value_s1257 >= 0 && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8355]              assume msgvalue_MSG == 0;
[L8356]  CALL        call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s1257 && value_s1257 <= _balances_ERC20[this][msgsender_MSG]) && value_s1257 >= 0) && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1257] >= 0) && _balances_ERC20[this][to_s1257] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_DkargoToken0 := true;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L2561]              havoc __exception;
[L2562]              revert := false;
[L2563]  COND TRUE   __exception
[L2564]              __tmp__Balance := Balance;
[L2565]              __tmp__DType := DType;
[L2566]              __tmp__Alloc := Alloc;
[L2567]              __tmp__balance_ADDR := balance_ADDR;
[L2568]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L2569]              __tmp__sum := sum;
[L2570]              __tmp__M_int_bool := M_int_bool;
[L2571]              __tmp__sum__infcs0 := sum__infcs0;
[L2572]              __tmp__M_Ref_int := M_Ref_int;
[L2573]              __tmp__sum__balances1 := sum__balances1;
[L2574]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2575]              __tmp__sum__allowances2 := sum__allowances2;
[L2576]              __tmp__Length := Length;
[L2577]              __tmp__now := now;
[L2578]              __tmp___dkargoPrefix_DkargoPrefix := _dkargoPrefix_DkargoPrefix;
[L2579]              __tmp___owner_Ownership := _owner_Ownership;
[L2580]              __tmp__prev_AddressChain.NodeInfo := prev_AddressChain.NodeInfo;
[L2581]              __tmp__next_AddressChain.NodeInfo := next_AddressChain.NodeInfo;
[L2582]              __tmp__count_AddressChain.NodeList := count_AddressChain.NodeList;
[L2583]              __tmp__head_AddressChain.NodeList := head_AddressChain.NodeList;
[L2584]              __tmp__tail_AddressChain.NodeList := tail_AddressChain.NodeList;
[L2585]              __tmp__map_AddressChain.NodeList := map_AddressChain.NodeList;
[L2586]              __tmp___slist_AddressChain := _slist_AddressChain;
[L2587]              __tmp___infcs_ERC165 := _infcs_ERC165;
[L2588]              __tmp___supply_ERC20 := _supply_ERC20;
[L2589]              __tmp___balances_ERC20 := _balances_ERC20;
[L2590]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L2591]              __tmp___name_DkargoToken := _name_DkargoToken;
[L2592]              __tmp___symbol_DkargoToken := _symbol_DkargoToken;
[L2593]  CALL        call __ret_0_ := transfer~address~uint256_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5823]  COND TRUE   __tmp__DType[this] == DkargoToken
[L5824]  CALL        call ret_s1257 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L4973]  COND TRUE   __tmp__DType[this] == DkargoToken
[L4974]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L5194]              __var_20 := null;
[L5195]  COND FALSE  !(!(sender_s956 != null))
[L5199]              __var_21 := null;
[L5200]  COND FALSE  !(!(recipient_s956 != null))
[L5204]  CALL        call __var_22 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L4224]  COND FALSE  !(!(b_s157 <= a_s157))
[L4228]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4229]              __ret_0_ := c_s157;
[L5204]  RET         call __var_22 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L5205]  COND FALSE  !(revert)
[L5208]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] - __tmp___balances_ERC20[this][sender_s956];
[L5209]              __tmp___balances_ERC20[this][sender_s956] := __var_22;
[L5210]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] + __tmp___balances_ERC20[this][sender_s956];
[L5211]  CALL        call __var_23 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s956], amount_s956);
[L4200]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4201]  COND FALSE  !(!(c_s130 >= a_s130))
[L4205]              __ret_0_ := c_s130;
[L5211]  RET         call __var_23 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s956], amount_s956);
[L5212]  COND FALSE  !(revert)
[L5215]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] - __tmp___balances_ERC20[this][recipient_s956];
[L5216]              __tmp___balances_ERC20[this][recipient_s956] := __var_23;
[L5217]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] + __tmp___balances_ERC20[this][recipient_s956];
[L4974]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L4975]  COND FALSE  !(revert)
[L4991]              __ret_0_ := true;
[L5824]  RET         call ret_s1257 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5825]  COND FALSE  !(revert)
[L5831]              ret_s1257 := ret_s1257;
[L5832]  COND TRUE   __tmp__DType[this] == DkargoToken
[L5833]  CALL        call __var_41 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4431]  COND TRUE   (__tmp__count_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == 1 && __tmp__head_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376) && __tmp__tail_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376
[L4432]              __ret_0_ := true;
[L5833]  RET         call __var_41 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5834]  COND FALSE  !(revert)
[L5840]  COND TRUE   __tmp__DType[this] == DkargoToken
[L5841]  CALL        call __var_42 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5127]              __ret_0_ := __tmp___balances_ERC20[this][account_s841];
[L5841]  RET         call __var_42 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5842]  COND FALSE  !(revert)
[L5848]  COND TRUE   __var_41 && __var_42 == 0
[L5849]  COND TRUE   __tmp__DType[this] == DkargoToken
[L5850]  CALL        call _unlinkChain~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4553]              __var_9 := null;
[L4554]  COND FALSE  !(!(node_s586 != null))
[L4558]  COND FALSE  !(__tmp__DType[this] == DkargoToken)
[L4563]  COND TRUE   __tmp__DType[this] == AddressChain
[L4564]  CALL        call __var_10 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, node_s586);
[L4431]  COND FALSE  !((__tmp__count_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == 1 && __tmp__head_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376) && __tmp__tail_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376)
[L4435]              __var_4 := null;
[L4436]              __var_5 := null;
[L4437]              __ret_0_ := (if __tmp__prev_AddressChain.NodeInfo[__tmp__M_Ref_Ref[__tmp__map_AddressChain.NodeList[__tmp___slist_AddressChain[this]]][node_s376]] == null && __tmp__next_AddressChain.NodeInfo[__tmp__M_Ref_Ref[__tmp__map_AddressChain.NodeList[__tmp___slist_AddressChain[this]]][node_s376]] == null then false else true);
[L4564]  RET         call __var_10 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, node_s586);
[L4565]  COND FALSE  !(revert)
[L4571]  COND TRUE   !__var_10
[L4572]              revert := true;
[L5850]  RET         call _unlinkChain~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5851]  COND TRUE   revert
[L2593]  RET         call __ret_0_ := transfer~address~uint256_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2594]              assume revert || gas < 0;
[L8356]  RET         call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L8450]  RET         call CorralChoice_DkargoToken(this);

Loop:
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND FALSE  !(choice == 23)
[L8291]  COND FALSE  !(choice == 22)
[L8297]  COND FALSE  !(choice == 21)
[L8303]  COND FALSE  !(choice == 20)
[L8309]  COND FALSE  !(choice == 19)
[L8315]  COND FALSE  !(choice == 18)
[L8321]  COND FALSE  !(choice == 17)
[L8327]  COND FALSE  !(choice == 16)
[L8333]  COND FALSE  !(choice == 15)
[L8339]  COND FALSE  !(choice == 14)
[L8345]  COND FALSE  !(choice == 13)
[L8351]  COND TRUE   choice == 12
[L8352]              gas := gas - 21000;
[L8353]  COND TRUE   gas >= 0
[L8354]              assume value_s1257 >= 0 && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8355]              assume msgvalue_MSG == 0;
[L8356]  CALL        call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s1257 && value_s1257 <= _balances_ERC20[this][msgsender_MSG]) && value_s1257 >= 0) && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1257] >= 0) && _balances_ERC20[this][to_s1257] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_DkargoToken0 := true;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L2561]              havoc __exception;
[L2562]              revert := false;
[L2563]  COND TRUE   __exception
[L2564]              __tmp__Balance := Balance;
[L2565]              __tmp__DType := DType;
[L2566]              __tmp__Alloc := Alloc;
[L2567]              __tmp__balance_ADDR := balance_ADDR;
[L2568]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L2569]              __tmp__sum := sum;
[L2570]              __tmp__M_int_bool := M_int_bool;
[L2571]              __tmp__sum__infcs0 := sum__infcs0;
[L2572]              __tmp__M_Ref_int := M_Ref_int;
[L2573]              __tmp__sum__balances1 := sum__balances1;
[L2574]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2575]              __tmp__sum__allowances2 := sum__allowances2;
[L2576]              __tmp__Length := Length;
[L2577]              __tmp__now := now;
[L2578]              __tmp___dkargoPrefix_DkargoPrefix := _dkargoPrefix_DkargoPrefix;
[L2579]              __tmp___owner_Ownership := _owner_Ownership;
[L2580]              __tmp__prev_AddressChain.NodeInfo := prev_AddressChain.NodeInfo;
[L2581]              __tmp__next_AddressChain.NodeInfo := next_AddressChain.NodeInfo;
[L2582]              __tmp__count_AddressChain.NodeList := count_AddressChain.NodeList;
[L2583]              __tmp__head_AddressChain.NodeList := head_AddressChain.NodeList;
[L2584]              __tmp__tail_AddressChain.NodeList := tail_AddressChain.NodeList;
[L2585]              __tmp__map_AddressChain.NodeList := map_AddressChain.NodeList;
[L2586]              __tmp___slist_AddressChain := _slist_AddressChain;
[L2587]              __tmp___infcs_ERC165 := _infcs_ERC165;
[L2588]              __tmp___supply_ERC20 := _supply_ERC20;
[L2589]              __tmp___balances_ERC20 := _balances_ERC20;
[L2590]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L2591]              __tmp___name_DkargoToken := _name_DkargoToken;
[L2592]              __tmp___symbol_DkargoToken := _symbol_DkargoToken;
[L2593]  CALL        call __ret_0_ := transfer~address~uint256_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5823]  COND TRUE   __tmp__DType[this] == DkargoToken
[L5824]  CALL        call ret_s1257 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L4973]  COND TRUE   __tmp__DType[this] == DkargoToken
[L4974]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L5194]              __var_20 := null;
[L5195]  COND FALSE  !(!(sender_s956 != null))
[L5199]              __var_21 := null;
[L5200]  COND FALSE  !(!(recipient_s956 != null))
[L5204]  CALL        call __var_22 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L4224]  COND FALSE  !(!(b_s157 <= a_s157))
[L4228]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4229]              __ret_0_ := c_s157;
[L5204]  RET         call __var_22 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L5205]  COND FALSE  !(revert)
[L5208]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] - __tmp___balances_ERC20[this][sender_s956];
[L5209]              __tmp___balances_ERC20[this][sender_s956] := __var_22;
[L5210]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] + __tmp___balances_ERC20[this][sender_s956];
[L5211]  CALL        call __var_23 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s956], amount_s956);
[L4200]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4201]  COND FALSE  !(!(c_s130 >= a_s130))
[L4205]              __ret_0_ := c_s130;
[L5211]  RET         call __var_23 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s956], amount_s956);
[L5212]  COND FALSE  !(revert)
[L5215]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] - __tmp___balances_ERC20[this][recipient_s956];
[L5216]              __tmp___balances_ERC20[this][recipient_s956] := __var_23;
[L5217]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] + __tmp___balances_ERC20[this][recipient_s956];
[L4974]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L4975]  COND FALSE  !(revert)
[L4991]              __ret_0_ := true;
[L5824]  RET         call ret_s1257 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5825]  COND FALSE  !(revert)
[L5831]              ret_s1257 := ret_s1257;
[L5832]  COND TRUE   __tmp__DType[this] == DkargoToken
[L5833]  CALL        call __var_41 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4431]  COND TRUE   (__tmp__count_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == 1 && __tmp__head_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376) && __tmp__tail_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376
[L4432]              __ret_0_ := true;
[L5833]  RET         call __var_41 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5834]  COND FALSE  !(revert)
[L5840]  COND TRUE   __tmp__DType[this] == DkargoToken
[L5841]  CALL        call __var_42 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5127]              __ret_0_ := __tmp___balances_ERC20[this][account_s841];
[L5841]  RET         call __var_42 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5842]  COND FALSE  !(revert)
[L5848]  COND TRUE   __var_41 && __var_42 == 0
[L5849]  COND TRUE   __tmp__DType[this] == DkargoToken
[L5850]  CALL        call _unlinkChain~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4553]              __var_9 := null;
[L4554]  COND FALSE  !(!(node_s586 != null))
[L4558]  COND FALSE  !(__tmp__DType[this] == DkargoToken)
[L4563]  COND TRUE   __tmp__DType[this] == AddressChain
[L4564]  CALL        call __var_10 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, node_s586);
[L4431]  COND FALSE  !((__tmp__count_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == 1 && __tmp__head_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376) && __tmp__tail_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376)
[L4435]              __var_4 := null;
[L4436]              __var_5 := null;
[L4437]              __ret_0_ := (if __tmp__prev_AddressChain.NodeInfo[__tmp__M_Ref_Ref[__tmp__map_AddressChain.NodeList[__tmp___slist_AddressChain[this]]][node_s376]] == null && __tmp__next_AddressChain.NodeInfo[__tmp__M_Ref_Ref[__tmp__map_AddressChain.NodeList[__tmp___slist_AddressChain[this]]][node_s376]] == null then false else true);
[L4564]  RET         call __var_10 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, node_s586);
[L4565]  COND FALSE  !(revert)
[L4571]  COND TRUE   !__var_10
[L4572]              revert := true;
[L5850]  RET         call _unlinkChain~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5851]  COND TRUE   revert
[L2593]  RET         call __ret_0_ := transfer~address~uint256_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2594]              assume revert || gas < 0;
[L8356]  RET         call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L8450]  RET         call CorralChoice_DkargoToken(this);

[2020-11-25 14:00:56,546 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:00:56,547 INFO  L82        PathProgramCache]: Analyzing trace with hash 1360501562, now seen corresponding path program 1 times
[2020-11-25 14:00:56,547 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:00:56,562 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:00:56,640 INFO  L134       CoverageAnalysis]: Checked inductivity of 68 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 68 trivial. 0 not checked.
[2020-11-25 14:00:56,640 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 14:00:56,640 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 14:00:56,640 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:00:56,641 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 14:00:56,641 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 14:00:56,641 INFO  L87              Difference]: Start difference. First operand 5006 states and 5574 transitions. cyclomatic complexity: 570 Second operand 4 states.
[2020-11-25 14:00:56,695 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:00:56,695 INFO  L93              Difference]: Finished difference Result 5064 states and 5646 transitions.
[2020-11-25 14:00:56,695 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 14:00:56,696 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5064 states and 5646 transitions.
[2020-11-25 14:00:56,704 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:00:56,712 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5064 states to 5064 states and 5646 transitions.
[2020-11-25 14:00:56,712 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1119
[2020-11-25 14:00:56,713 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1119
[2020-11-25 14:00:56,713 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5064 states and 5646 transitions.
[2020-11-25 14:00:56,715 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:00:56,715 INFO  L728         BuchiCegarLoop]: Abstraction has 5064 states and 5646 transitions.
[2020-11-25 14:00:56,719 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5064 states and 5646 transitions.
[2020-11-25 14:00:56,741 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5064 to 5060.
[2020-11-25 14:00:56,741 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5060 states.
[2020-11-25 14:00:56,745 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5060 states to 5060 states and 5642 transitions.
[2020-11-25 14:00:56,745 INFO  L751         BuchiCegarLoop]: Abstraction has 5060 states and 5642 transitions.
[2020-11-25 14:00:56,745 INFO  L631         BuchiCegarLoop]: Abstraction has 5060 states and 5642 transitions.
[2020-11-25 14:00:56,746 INFO  L445         BuchiCegarLoop]: ======== Iteration 13============
[2020-11-25 14:00:56,746 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5060 states and 5642 transitions.
[2020-11-25 14:00:56,750 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:00:56,750 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:00:56,750 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:00:56,752 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:00:56,752 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_DkargoToken0 := false;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]     CALL        call main();
[L8440]              assume null == 0;
[L8441]  CALL        call this := FreshRefGenerator__success();
[L3983]              havoc newRef;
[L3984]              assume Alloc[newRef] == false;
[L3985]              Alloc[newRef] := true;
[L3986]              assume newRef != null;
[L8441]  RET         call this := FreshRefGenerator__success();
[L8442]              assume now >= 0;
[L8443]              assume DType[this] == DkargoToken;
[L8444]              assume msgvalue_MSG == 0;
[L8445]              gas := gas - 53000;
[L8446]  CALL        call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2403]              havoc __exception;
[L2404]              revert := false;
[L2405]  COND FALSE  !(__exception)
[L2438]  CALL        call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5753]  CALL        call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L4104]  CALL        call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4086]              assume msgsender_MSG != null;
[L4087]              Balance[this] := 0;
[L4088]              _owner_Ownership[this] := null;
[L4090]              assert { :EventEmitted "OwnershipTransferred_Ownership" } true;
[L4091]              _owner_Ownership[this] := msgsender_MSG;
[L4104]  RET         call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4105]  COND FALSE  !(revert)
[L5753]  RET         call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]  COND FALSE  !(revert)
[L5757]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L5757]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5758]  COND FALSE  !(revert)
[L5761]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L4913]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L4913]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]  COND FALSE  !(revert)
[L4917]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4868]              assume msgsender_MSG != null;
[L4869]              Balance[this] := 0;
[L4870]              _supply_ERC20[this] := 0;
[L4871]              _balances_ERC20[this] := zeroRefintArr();
[L4872]              sum__balances1[this] := 0;
[L4873]              _allowances_ERC20[this] := zeroRefRefintArr();
[L4874]              sum__allowances2[this] := 0;
[L4876]              pebs_s747 := supply_s747;
[L4877]  COND TRUE   DType[this] == DkargoToken
[L4878]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L5282]              __var_24 := null;
[L5283]  COND FALSE  !(!(account_s999 != null))
[L5287]  CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5287]  RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L5288]  COND FALSE  !(revert)
[L5291]              _supply_ERC20[this] := __var_25;
[L5292]  CALL        call __var_26 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s999], amount_s999);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5292]  RET         call __var_26 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s999], amount_s999);
[L5293]  COND FALSE  !(revert)
[L5296]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][account_s999];
[L5297]              _balances_ERC20[this][account_s999] := __var_26;
[L5298]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][account_s999];
[L5299]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4878]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L4879]  COND FALSE  !(revert)
[L4917]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4918]  COND FALSE  !(revert)
[L5761]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L5762]  COND FALSE  !(revert)
[L5765]  CALL        call ERC20Safe_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG);
[L5381]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L5381]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5382]  COND FALSE  !(revert)
[L5385]  CALL        call ERC20Safe_ERC20Safe_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5362]              assume msgsender_MSG != null;
[L5363]              Balance[this] := 0;
[L5385]  RET         call ERC20Safe_ERC20Safe_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5386]  COND FALSE  !(revert)
[L5765]  RET         call ERC20Safe_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]  COND FALSE  !(revert)
[L5769]  CALL        call AddressChain_AddressChain__success(this, msgsender_MSG, msgvalue_MSG);
[L4361]  CALL        call AddressChain_AddressChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4340]              assume msgsender_MSG != null;
[L4341]              Balance[this] := 0;
[L4343]  CALL        call __var_3 := FreshRefGenerator__success();
[L3983]              havoc newRef;
[L3984]              assume Alloc[newRef] == false;
[L3985]              Alloc[newRef] := true;
[L3986]              assume newRef != null;
[L4343]  RET         call __var_3 := FreshRefGenerator__success();
[L4344]  COND FALSE  !(revert)
[L4347]              _slist_AddressChain[this] := __var_3;
[L4361]  RET         call AddressChain_AddressChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4362]  COND FALSE  !(revert)
[L5769]  RET         call AddressChain_AddressChain__success(this, msgsender_MSG, msgvalue_MSG);
[L5770]  COND FALSE  !(revert)
[L5773]  CALL        call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4689]  CALL        call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4674]              assume msgsender_MSG != null;
[L4675]              Balance[this] := 0;
[L4689]  RET         call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4690]  COND FALSE  !(revert)
[L5773]  RET         call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L5774]  COND FALSE  !(revert)
[L5777]  CALL        call ERC165_ERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4759]  CALL        call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4689]  CALL        call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4674]              assume msgsender_MSG != null;
[L4675]              Balance[this] := 0;
[L4689]  RET         call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4690]  COND FALSE  !(revert)
[L4759]  RET         call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4760]  COND FALSE  !(revert)
[L4763]  CALL        call ERC165_ERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4723]              assume msgsender_MSG != null;
[L4724]              Balance[this] := 0;
[L4725]              _infcs_ERC165[this] := zerointboolArr();
[L4727]              __var_16 := 33540519;
[L4728]  COND TRUE   DType[this] == DkargoToken
[L4729]  CALL        call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, 33540519);
[L4792]  COND FALSE  !(!(infcid_s644 != -1))
[L4796]              _infcs_ERC165[this][infcid_s644] := true;
[L4729]  RET         call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, 33540519);
[L4730]  COND FALSE  !(revert)
[L4763]  RET         call ERC165_ERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4764]  COND FALSE  !(revert)
[L5777]  RET         call ERC165_ERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L5778]  COND FALSE  !(revert)
[L5781]  CALL        call DkargoPrefix_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG);
[L4045]  CALL        call DkargoPrefix_DkargoPrefix_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4029]              assume msgsender_MSG != null;
[L4030]              Balance[this] := 0;
[L4031]              _dkargoPrefix_DkargoPrefix[this] := -1676636045;
[L4045]  RET         call DkargoPrefix_DkargoPrefix_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4046]  COND FALSE  !(revert)
[L5781]  RET         call DkargoPrefix_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]  COND FALSE  !(revert)
[L5785]  CALL        call DkargoToken_DkargoToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5675]              assume msgsender_MSG != null;
[L5676]              Balance[this] := 0;
[L5677]              _name_DkargoToken[this] := -1676636045;
[L5678]              _symbol_DkargoToken[this] := -1676636045;
[L5680]  COND TRUE   DType[this] == DkargoToken
[L5681]  CALL        call _setDkargoPrefix~string_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG, 978340553);
[L4070]              _dkargoPrefix_DkargoPrefix[this] := prefix_s21;
[L5681]  RET         call _setDkargoPrefix~string_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG, 978340553);
[L5682]  COND FALSE  !(revert)
[L5688]              __var_39 := -1804674067;
[L5689]  COND TRUE   DType[this] == DkargoToken
[L5690]  CALL        call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, -1804674067);
[L4792]  COND FALSE  !(!(infcid_s644 != -1))
[L4796]              _infcs_ERC165[this][infcid_s644] := true;
[L5690]  RET         call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, -1804674067);
[L5691]  COND FALSE  !(revert)
[L5697]              _name_DkargoToken[this] := name_s1191;
[L5698]              _symbol_DkargoToken[this] := symbol_s1191;
[L5699]  COND TRUE   DType[this] == DkargoToken
[L5700]  CALL        call _linkChain~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4504]              __var_6 := null;
[L4505]  COND FALSE  !(!(node_s455 != null))
[L4509]  COND TRUE   DType[this] == DkargoToken
[L4510]  CALL        call __var_7 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4446]  COND FALSE  !((count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376)
[L4450]              __var_4 := null;
[L4451]              __var_5 := null;
[L4452]              __ret_0_ := (if prev_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null && next_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null then false else true);
[L4510]  RET         call __var_7 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4511]  COND FALSE  !(revert)
[L4522]  COND FALSE  !(!!__var_7)
[L4526]  COND TRUE   count_AddressChain.NodeList[_slist_AddressChain[this]] == 0
[L4527]              tail_AddressChain.NodeList[_slist_AddressChain[this]] := node_s455;
[L4528]              head_AddressChain.NodeList[_slist_AddressChain[this]] := node_s455;
[L4534]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, count_AddressChain.NodeList[_slist_AddressChain[this]], 1);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L4534]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, count_AddressChain.NodeList[_slist_AddressChain[this]], 1);
[L4535]  COND FALSE  !(revert)
[L4538]              count_AddressChain.NodeList[_slist_AddressChain[this]] := __var_8;
[L4539]              assert { :EventEmitted "AddressChainLinked_AddressChain" } true;
[L5700]  RET         call _linkChain~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5701]  COND FALSE  !(revert)
[L5785]  RET         call DkargoToken_DkargoToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5786]  COND FALSE  !(revert)
[L2438]  RET         call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2439]              assume !revert && gas >= 0;
[L8446]  RET         call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L8447]              assume !revert && gas >= 0;
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND FALSE  !(choice == 23)
[L8291]  COND FALSE  !(choice == 22)
[L8297]  COND FALSE  !(choice == 21)
[L8303]  COND FALSE  !(choice == 20)
[L8309]  COND FALSE  !(choice == 19)
[L8315]  COND FALSE  !(choice == 18)
[L8321]  COND FALSE  !(choice == 17)
[L8327]  COND FALSE  !(choice == 16)
[L8333]  COND FALSE  !(choice == 15)
[L8339]  COND FALSE  !(choice == 14)
[L8345]  COND FALSE  !(choice == 13)
[L8351]  COND TRUE   choice == 12
[L8352]              gas := gas - 21000;
[L8353]  COND TRUE   gas >= 0
[L8354]              assume value_s1257 >= 0 && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8355]              assume msgvalue_MSG == 0;
[L8356]  CALL        call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s1257 && value_s1257 <= _balances_ERC20[this][msgsender_MSG]) && value_s1257 >= 0) && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1257] >= 0) && _balances_ERC20[this][to_s1257] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_DkargoToken0 := true;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L2561]              havoc __exception;
[L2562]              revert := false;
[L2563]  COND TRUE   __exception
[L2564]              __tmp__Balance := Balance;
[L2565]              __tmp__DType := DType;
[L2566]              __tmp__Alloc := Alloc;
[L2567]              __tmp__balance_ADDR := balance_ADDR;
[L2568]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L2569]              __tmp__sum := sum;
[L2570]              __tmp__M_int_bool := M_int_bool;
[L2571]              __tmp__sum__infcs0 := sum__infcs0;
[L2572]              __tmp__M_Ref_int := M_Ref_int;
[L2573]              __tmp__sum__balances1 := sum__balances1;
[L2574]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2575]              __tmp__sum__allowances2 := sum__allowances2;
[L2576]              __tmp__Length := Length;
[L2577]              __tmp__now := now;
[L2578]              __tmp___dkargoPrefix_DkargoPrefix := _dkargoPrefix_DkargoPrefix;
[L2579]              __tmp___owner_Ownership := _owner_Ownership;
[L2580]              __tmp__prev_AddressChain.NodeInfo := prev_AddressChain.NodeInfo;
[L2581]              __tmp__next_AddressChain.NodeInfo := next_AddressChain.NodeInfo;
[L2582]              __tmp__count_AddressChain.NodeList := count_AddressChain.NodeList;
[L2583]              __tmp__head_AddressChain.NodeList := head_AddressChain.NodeList;
[L2584]              __tmp__tail_AddressChain.NodeList := tail_AddressChain.NodeList;
[L2585]              __tmp__map_AddressChain.NodeList := map_AddressChain.NodeList;
[L2586]              __tmp___slist_AddressChain := _slist_AddressChain;
[L2587]              __tmp___infcs_ERC165 := _infcs_ERC165;
[L2588]              __tmp___supply_ERC20 := _supply_ERC20;
[L2589]              __tmp___balances_ERC20 := _balances_ERC20;
[L2590]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L2591]              __tmp___name_DkargoToken := _name_DkargoToken;
[L2592]              __tmp___symbol_DkargoToken := _symbol_DkargoToken;
[L2593]  CALL        call __ret_0_ := transfer~address~uint256_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5823]  COND TRUE   __tmp__DType[this] == DkargoToken
[L5824]  CALL        call ret_s1257 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L4973]  COND TRUE   __tmp__DType[this] == DkargoToken
[L4974]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L5194]              __var_20 := null;
[L5195]  COND FALSE  !(!(sender_s956 != null))
[L5199]              __var_21 := null;
[L5200]  COND FALSE  !(!(recipient_s956 != null))
[L5204]  CALL        call __var_22 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L4224]  COND FALSE  !(!(b_s157 <= a_s157))
[L4228]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4229]              __ret_0_ := c_s157;
[L5204]  RET         call __var_22 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L5205]  COND FALSE  !(revert)
[L5208]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] - __tmp___balances_ERC20[this][sender_s956];
[L5209]              __tmp___balances_ERC20[this][sender_s956] := __var_22;
[L5210]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] + __tmp___balances_ERC20[this][sender_s956];
[L5211]  CALL        call __var_23 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s956], amount_s956);
[L4200]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4201]  COND FALSE  !(!(c_s130 >= a_s130))
[L4205]              __ret_0_ := c_s130;
[L5211]  RET         call __var_23 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s956], amount_s956);
[L5212]  COND FALSE  !(revert)
[L5215]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] - __tmp___balances_ERC20[this][recipient_s956];
[L5216]              __tmp___balances_ERC20[this][recipient_s956] := __var_23;
[L5217]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] + __tmp___balances_ERC20[this][recipient_s956];
[L4974]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L4975]  COND FALSE  !(revert)
[L4991]              __ret_0_ := true;
[L5824]  RET         call ret_s1257 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5825]  COND FALSE  !(revert)
[L5831]              ret_s1257 := ret_s1257;
[L5832]  COND TRUE   __tmp__DType[this] == DkargoToken
[L5833]  CALL        call __var_41 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4431]  COND TRUE   (__tmp__count_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == 1 && __tmp__head_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376) && __tmp__tail_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376
[L4432]              __ret_0_ := true;
[L5833]  RET         call __var_41 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5834]  COND FALSE  !(revert)
[L5840]  COND TRUE   __tmp__DType[this] == DkargoToken
[L5841]  CALL        call __var_42 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5127]              __ret_0_ := __tmp___balances_ERC20[this][account_s841];
[L5841]  RET         call __var_42 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5842]  COND FALSE  !(revert)
[L5848]  COND TRUE   __var_41 && __var_42 == 0
[L5849]  COND TRUE   __tmp__DType[this] == DkargoToken
[L5850]  CALL        call _unlinkChain~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4553]              __var_9 := null;
[L4554]  COND FALSE  !(!(node_s586 != null))
[L4558]  COND TRUE   __tmp__DType[this] == DkargoToken
[L4559]  CALL        call __var_10 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, node_s586);
[L4431]  COND FALSE  !((__tmp__count_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == 1 && __tmp__head_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376) && __tmp__tail_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376)
[L4435]              __var_4 := null;
[L4436]              __var_5 := null;
[L4437]              __ret_0_ := (if __tmp__prev_AddressChain.NodeInfo[__tmp__M_Ref_Ref[__tmp__map_AddressChain.NodeList[__tmp___slist_AddressChain[this]]][node_s376]] == null && __tmp__next_AddressChain.NodeInfo[__tmp__M_Ref_Ref[__tmp__map_AddressChain.NodeList[__tmp___slist_AddressChain[this]]][node_s376]] == null then false else true);
[L4559]  RET         call __var_10 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, node_s586);
[L4560]  COND FALSE  !(revert)
[L4571]  COND TRUE   !__var_10
[L4572]              revert := true;
[L5850]  RET         call _unlinkChain~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5851]  COND TRUE   revert
[L2593]  RET         call __ret_0_ := transfer~address~uint256_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2594]              assume revert || gas < 0;
[L8356]  RET         call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L8450]  RET         call CorralChoice_DkargoToken(this);

Loop:
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND FALSE  !(choice == 23)
[L8291]  COND FALSE  !(choice == 22)
[L8297]  COND FALSE  !(choice == 21)
[L8303]  COND FALSE  !(choice == 20)
[L8309]  COND FALSE  !(choice == 19)
[L8315]  COND FALSE  !(choice == 18)
[L8321]  COND FALSE  !(choice == 17)
[L8327]  COND FALSE  !(choice == 16)
[L8333]  COND FALSE  !(choice == 15)
[L8339]  COND FALSE  !(choice == 14)
[L8345]  COND FALSE  !(choice == 13)
[L8351]  COND TRUE   choice == 12
[L8352]              gas := gas - 21000;
[L8353]  COND TRUE   gas >= 0
[L8354]              assume value_s1257 >= 0 && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8355]              assume msgvalue_MSG == 0;
[L8356]  CALL        call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s1257 && value_s1257 <= _balances_ERC20[this][msgsender_MSG]) && value_s1257 >= 0) && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1257] >= 0) && _balances_ERC20[this][to_s1257] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_DkargoToken0 := true;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L2561]              havoc __exception;
[L2562]              revert := false;
[L2563]  COND TRUE   __exception
[L2564]              __tmp__Balance := Balance;
[L2565]              __tmp__DType := DType;
[L2566]              __tmp__Alloc := Alloc;
[L2567]              __tmp__balance_ADDR := balance_ADDR;
[L2568]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L2569]              __tmp__sum := sum;
[L2570]              __tmp__M_int_bool := M_int_bool;
[L2571]              __tmp__sum__infcs0 := sum__infcs0;
[L2572]              __tmp__M_Ref_int := M_Ref_int;
[L2573]              __tmp__sum__balances1 := sum__balances1;
[L2574]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2575]              __tmp__sum__allowances2 := sum__allowances2;
[L2576]              __tmp__Length := Length;
[L2577]              __tmp__now := now;
[L2578]              __tmp___dkargoPrefix_DkargoPrefix := _dkargoPrefix_DkargoPrefix;
[L2579]              __tmp___owner_Ownership := _owner_Ownership;
[L2580]              __tmp__prev_AddressChain.NodeInfo := prev_AddressChain.NodeInfo;
[L2581]              __tmp__next_AddressChain.NodeInfo := next_AddressChain.NodeInfo;
[L2582]              __tmp__count_AddressChain.NodeList := count_AddressChain.NodeList;
[L2583]              __tmp__head_AddressChain.NodeList := head_AddressChain.NodeList;
[L2584]              __tmp__tail_AddressChain.NodeList := tail_AddressChain.NodeList;
[L2585]              __tmp__map_AddressChain.NodeList := map_AddressChain.NodeList;
[L2586]              __tmp___slist_AddressChain := _slist_AddressChain;
[L2587]              __tmp___infcs_ERC165 := _infcs_ERC165;
[L2588]              __tmp___supply_ERC20 := _supply_ERC20;
[L2589]              __tmp___balances_ERC20 := _balances_ERC20;
[L2590]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L2591]              __tmp___name_DkargoToken := _name_DkargoToken;
[L2592]              __tmp___symbol_DkargoToken := _symbol_DkargoToken;
[L2593]  CALL        call __ret_0_ := transfer~address~uint256_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5823]  COND TRUE   __tmp__DType[this] == DkargoToken
[L5824]  CALL        call ret_s1257 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L4973]  COND TRUE   __tmp__DType[this] == DkargoToken
[L4974]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L5194]              __var_20 := null;
[L5195]  COND FALSE  !(!(sender_s956 != null))
[L5199]              __var_21 := null;
[L5200]  COND FALSE  !(!(recipient_s956 != null))
[L5204]  CALL        call __var_22 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L4224]  COND FALSE  !(!(b_s157 <= a_s157))
[L4228]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4229]              __ret_0_ := c_s157;
[L5204]  RET         call __var_22 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L5205]  COND FALSE  !(revert)
[L5208]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] - __tmp___balances_ERC20[this][sender_s956];
[L5209]              __tmp___balances_ERC20[this][sender_s956] := __var_22;
[L5210]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] + __tmp___balances_ERC20[this][sender_s956];
[L5211]  CALL        call __var_23 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s956], amount_s956);
[L4200]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4201]  COND FALSE  !(!(c_s130 >= a_s130))
[L4205]              __ret_0_ := c_s130;
[L5211]  RET         call __var_23 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s956], amount_s956);
[L5212]  COND FALSE  !(revert)
[L5215]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] - __tmp___balances_ERC20[this][recipient_s956];
[L5216]              __tmp___balances_ERC20[this][recipient_s956] := __var_23;
[L5217]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] + __tmp___balances_ERC20[this][recipient_s956];
[L4974]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L4975]  COND FALSE  !(revert)
[L4991]              __ret_0_ := true;
[L5824]  RET         call ret_s1257 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5825]  COND FALSE  !(revert)
[L5831]              ret_s1257 := ret_s1257;
[L5832]  COND TRUE   __tmp__DType[this] == DkargoToken
[L5833]  CALL        call __var_41 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4431]  COND TRUE   (__tmp__count_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == 1 && __tmp__head_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376) && __tmp__tail_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376
[L4432]              __ret_0_ := true;
[L5833]  RET         call __var_41 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5834]  COND FALSE  !(revert)
[L5840]  COND TRUE   __tmp__DType[this] == DkargoToken
[L5841]  CALL        call __var_42 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5127]              __ret_0_ := __tmp___balances_ERC20[this][account_s841];
[L5841]  RET         call __var_42 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5842]  COND FALSE  !(revert)
[L5848]  COND TRUE   __var_41 && __var_42 == 0
[L5849]  COND TRUE   __tmp__DType[this] == DkargoToken
[L5850]  CALL        call _unlinkChain~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4553]              __var_9 := null;
[L4554]  COND FALSE  !(!(node_s586 != null))
[L4558]  COND TRUE   __tmp__DType[this] == DkargoToken
[L4559]  CALL        call __var_10 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, node_s586);
[L4431]  COND FALSE  !((__tmp__count_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == 1 && __tmp__head_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376) && __tmp__tail_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376)
[L4435]              __var_4 := null;
[L4436]              __var_5 := null;
[L4437]              __ret_0_ := (if __tmp__prev_AddressChain.NodeInfo[__tmp__M_Ref_Ref[__tmp__map_AddressChain.NodeList[__tmp___slist_AddressChain[this]]][node_s376]] == null && __tmp__next_AddressChain.NodeInfo[__tmp__M_Ref_Ref[__tmp__map_AddressChain.NodeList[__tmp___slist_AddressChain[this]]][node_s376]] == null then false else true);
[L4559]  RET         call __var_10 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, node_s586);
[L4560]  COND FALSE  !(revert)
[L4571]  COND TRUE   !__var_10
[L4572]              revert := true;
[L5850]  RET         call _unlinkChain~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5851]  COND TRUE   revert
[L2593]  RET         call __ret_0_ := transfer~address~uint256_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2594]              assume revert || gas < 0;
[L8356]  RET         call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L8450]  RET         call CorralChoice_DkargoToken(this);

[2020-11-25 14:00:56,757 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:00:56,757 INFO  L82        PathProgramCache]: Analyzing trace with hash 1863309030, now seen corresponding path program 1 times
[2020-11-25 14:00:56,758 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:00:56,772 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:00:56,927 INFO  L134       CoverageAnalysis]: Checked inductivity of 68 backedges. 0 proven. 2 refuted. 0 times theorem prover too weak. 66 trivial. 0 not checked.
[2020-11-25 14:00:56,927 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 14:00:56,927 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-11-25 14:00:56,927 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:00:56,928 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 14:00:56,928 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 14:00:56,928 INFO  L87              Difference]: Start difference. First operand 5060 states and 5642 transitions. cyclomatic complexity: 584 Second operand 7 states.
[2020-11-25 14:00:58,907 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:00:58,907 INFO  L93              Difference]: Finished difference Result 5526 states and 6222 transitions.
[2020-11-25 14:00:58,908 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 14:00:58,908 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5526 states and 6222 transitions.
[2020-11-25 14:00:58,919 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 14:00:58,930 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5526 states to 5526 states and 6222 transitions.
[2020-11-25 14:00:58,930 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1231
[2020-11-25 14:00:58,930 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1231
[2020-11-25 14:00:58,930 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5526 states and 6222 transitions.
[2020-11-25 14:00:58,933 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:00:58,933 INFO  L728         BuchiCegarLoop]: Abstraction has 5526 states and 6222 transitions.
[2020-11-25 14:00:58,937 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5526 states and 6222 transitions.
[2020-11-25 14:00:58,961 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5526 to 5130.
[2020-11-25 14:00:58,961 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5130 states.
[2020-11-25 14:00:58,965 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5130 states to 5130 states and 5736 transitions.
[2020-11-25 14:00:58,965 INFO  L751         BuchiCegarLoop]: Abstraction has 5130 states and 5736 transitions.
[2020-11-25 14:00:58,965 INFO  L631         BuchiCegarLoop]: Abstraction has 5130 states and 5736 transitions.
[2020-11-25 14:00:58,966 INFO  L445         BuchiCegarLoop]: ======== Iteration 14============
[2020-11-25 14:00:58,966 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5130 states and 5736 transitions.
[2020-11-25 14:00:58,970 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:00:58,970 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:00:58,970 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:00:58,971 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:00:58,971 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_DkargoToken0 := false;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]     CALL        call main();
[L8440]              assume null == 0;
[L8441]  CALL        call this := FreshRefGenerator__success();
[L3983]              havoc newRef;
[L3984]              assume Alloc[newRef] == false;
[L3985]              Alloc[newRef] := true;
[L3986]              assume newRef != null;
[L8441]  RET         call this := FreshRefGenerator__success();
[L8442]              assume now >= 0;
[L8443]              assume DType[this] == DkargoToken;
[L8444]              assume msgvalue_MSG == 0;
[L8445]              gas := gas - 53000;
[L8446]  CALL        call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2403]              havoc __exception;
[L2404]              revert := false;
[L2405]  COND FALSE  !(__exception)
[L2438]  CALL        call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5753]  CALL        call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L4104]  CALL        call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4086]              assume msgsender_MSG != null;
[L4087]              Balance[this] := 0;
[L4088]              _owner_Ownership[this] := null;
[L4090]              assert { :EventEmitted "OwnershipTransferred_Ownership" } true;
[L4091]              _owner_Ownership[this] := msgsender_MSG;
[L4104]  RET         call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4105]  COND FALSE  !(revert)
[L5753]  RET         call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]  COND FALSE  !(revert)
[L5757]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L5757]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5758]  COND FALSE  !(revert)
[L5761]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L4913]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L4913]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]  COND FALSE  !(revert)
[L4917]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4868]              assume msgsender_MSG != null;
[L4869]              Balance[this] := 0;
[L4870]              _supply_ERC20[this] := 0;
[L4871]              _balances_ERC20[this] := zeroRefintArr();
[L4872]              sum__balances1[this] := 0;
[L4873]              _allowances_ERC20[this] := zeroRefRefintArr();
[L4874]              sum__allowances2[this] := 0;
[L4876]              pebs_s747 := supply_s747;
[L4877]  COND TRUE   DType[this] == DkargoToken
[L4878]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L5282]              __var_24 := null;
[L5283]  COND FALSE  !(!(account_s999 != null))
[L5287]  CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5287]  RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L5288]  COND FALSE  !(revert)
[L5291]              _supply_ERC20[this] := __var_25;
[L5292]  CALL        call __var_26 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s999], amount_s999);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5292]  RET         call __var_26 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s999], amount_s999);
[L5293]  COND FALSE  !(revert)
[L5296]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][account_s999];
[L5297]              _balances_ERC20[this][account_s999] := __var_26;
[L5298]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][account_s999];
[L5299]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4878]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L4879]  COND FALSE  !(revert)
[L4917]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4918]  COND FALSE  !(revert)
[L5761]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L5762]  COND FALSE  !(revert)
[L5765]  CALL        call ERC20Safe_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG);
[L5381]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L5381]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5382]  COND FALSE  !(revert)
[L5385]  CALL        call ERC20Safe_ERC20Safe_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5362]              assume msgsender_MSG != null;
[L5363]              Balance[this] := 0;
[L5385]  RET         call ERC20Safe_ERC20Safe_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5386]  COND FALSE  !(revert)
[L5765]  RET         call ERC20Safe_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]  COND FALSE  !(revert)
[L5769]  CALL        call AddressChain_AddressChain__success(this, msgsender_MSG, msgvalue_MSG);
[L4361]  CALL        call AddressChain_AddressChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4340]              assume msgsender_MSG != null;
[L4341]              Balance[this] := 0;
[L4343]  CALL        call __var_3 := FreshRefGenerator__success();
[L3983]              havoc newRef;
[L3984]              assume Alloc[newRef] == false;
[L3985]              Alloc[newRef] := true;
[L3986]              assume newRef != null;
[L4343]  RET         call __var_3 := FreshRefGenerator__success();
[L4344]  COND FALSE  !(revert)
[L4347]              _slist_AddressChain[this] := __var_3;
[L4361]  RET         call AddressChain_AddressChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4362]  COND FALSE  !(revert)
[L5769]  RET         call AddressChain_AddressChain__success(this, msgsender_MSG, msgvalue_MSG);
[L5770]  COND FALSE  !(revert)
[L5773]  CALL        call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4689]  CALL        call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4674]              assume msgsender_MSG != null;
[L4675]              Balance[this] := 0;
[L4689]  RET         call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4690]  COND FALSE  !(revert)
[L5773]  RET         call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L5774]  COND FALSE  !(revert)
[L5777]  CALL        call ERC165_ERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4759]  CALL        call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4689]  CALL        call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4674]              assume msgsender_MSG != null;
[L4675]              Balance[this] := 0;
[L4689]  RET         call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4690]  COND FALSE  !(revert)
[L4759]  RET         call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4760]  COND FALSE  !(revert)
[L4763]  CALL        call ERC165_ERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4723]              assume msgsender_MSG != null;
[L4724]              Balance[this] := 0;
[L4725]              _infcs_ERC165[this] := zerointboolArr();
[L4727]              __var_16 := 33540519;
[L4728]  COND TRUE   DType[this] == DkargoToken
[L4729]  CALL        call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, 33540519);
[L4792]  COND FALSE  !(!(infcid_s644 != -1))
[L4796]              _infcs_ERC165[this][infcid_s644] := true;
[L4729]  RET         call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, 33540519);
[L4730]  COND FALSE  !(revert)
[L4763]  RET         call ERC165_ERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4764]  COND FALSE  !(revert)
[L5777]  RET         call ERC165_ERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L5778]  COND FALSE  !(revert)
[L5781]  CALL        call DkargoPrefix_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG);
[L4045]  CALL        call DkargoPrefix_DkargoPrefix_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4029]              assume msgsender_MSG != null;
[L4030]              Balance[this] := 0;
[L4031]              _dkargoPrefix_DkargoPrefix[this] := -1676636045;
[L4045]  RET         call DkargoPrefix_DkargoPrefix_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4046]  COND FALSE  !(revert)
[L5781]  RET         call DkargoPrefix_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]  COND FALSE  !(revert)
[L5785]  CALL        call DkargoToken_DkargoToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5675]              assume msgsender_MSG != null;
[L5676]              Balance[this] := 0;
[L5677]              _name_DkargoToken[this] := -1676636045;
[L5678]              _symbol_DkargoToken[this] := -1676636045;
[L5680]  COND TRUE   DType[this] == DkargoToken
[L5681]  CALL        call _setDkargoPrefix~string_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG, 978340553);
[L4070]              _dkargoPrefix_DkargoPrefix[this] := prefix_s21;
[L5681]  RET         call _setDkargoPrefix~string_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG, 978340553);
[L5682]  COND FALSE  !(revert)
[L5688]              __var_39 := -1804674067;
[L5689]  COND TRUE   DType[this] == DkargoToken
[L5690]  CALL        call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, -1804674067);
[L4792]  COND FALSE  !(!(infcid_s644 != -1))
[L4796]              _infcs_ERC165[this][infcid_s644] := true;
[L5690]  RET         call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, -1804674067);
[L5691]  COND FALSE  !(revert)
[L5697]              _name_DkargoToken[this] := name_s1191;
[L5698]              _symbol_DkargoToken[this] := symbol_s1191;
[L5699]  COND TRUE   DType[this] == DkargoToken
[L5700]  CALL        call _linkChain~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4504]              __var_6 := null;
[L4505]  COND FALSE  !(!(node_s455 != null))
[L4509]  COND TRUE   DType[this] == DkargoToken
[L4510]  CALL        call __var_7 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4446]  COND FALSE  !((count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376)
[L4450]              __var_4 := null;
[L4451]              __var_5 := null;
[L4452]              __ret_0_ := (if prev_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null && next_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null then false else true);
[L4510]  RET         call __var_7 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4511]  COND FALSE  !(revert)
[L4522]  COND FALSE  !(!!__var_7)
[L4526]  COND TRUE   count_AddressChain.NodeList[_slist_AddressChain[this]] == 0
[L4527]              tail_AddressChain.NodeList[_slist_AddressChain[this]] := node_s455;
[L4528]              head_AddressChain.NodeList[_slist_AddressChain[this]] := node_s455;
[L4534]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, count_AddressChain.NodeList[_slist_AddressChain[this]], 1);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L4534]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, count_AddressChain.NodeList[_slist_AddressChain[this]], 1);
[L4535]  COND FALSE  !(revert)
[L4538]              count_AddressChain.NodeList[_slist_AddressChain[this]] := __var_8;
[L4539]              assert { :EventEmitted "AddressChainLinked_AddressChain" } true;
[L5700]  RET         call _linkChain~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5701]  COND FALSE  !(revert)
[L5785]  RET         call DkargoToken_DkargoToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5786]  COND FALSE  !(revert)
[L2438]  RET         call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2439]              assume !revert && gas >= 0;
[L8446]  RET         call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L8447]              assume !revert && gas >= 0;
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND FALSE  !(choice == 23)
[L8291]  COND FALSE  !(choice == 22)
[L8297]  COND FALSE  !(choice == 21)
[L8303]  COND FALSE  !(choice == 20)
[L8309]  COND FALSE  !(choice == 19)
[L8315]  COND FALSE  !(choice == 18)
[L8321]  COND FALSE  !(choice == 17)
[L8327]  COND FALSE  !(choice == 16)
[L8333]  COND FALSE  !(choice == 15)
[L8339]  COND FALSE  !(choice == 14)
[L8345]  COND FALSE  !(choice == 13)
[L8351]  COND TRUE   choice == 12
[L8352]              gas := gas - 21000;
[L8353]  COND TRUE   gas >= 0
[L8354]              assume value_s1257 >= 0 && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8355]              assume msgvalue_MSG == 0;
[L8356]  CALL        call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s1257 && value_s1257 <= _balances_ERC20[this][msgsender_MSG]) && value_s1257 >= 0) && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1257] >= 0) && _balances_ERC20[this][to_s1257] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_DkargoToken0 := true;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L2561]              havoc __exception;
[L2562]              revert := false;
[L2563]  COND FALSE  !(__exception)
[L2596]  CALL        call __ret_0_ := transfer~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5896]  COND TRUE   DType[this] == DkargoToken
[L5897]  CALL        call ret_s1257 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L4997]  COND TRUE   DType[this] == DkargoToken
[L4998]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L5226]              __var_20 := null;
[L5227]  COND FALSE  !(!(sender_s956 != null))
[L5231]              __var_21 := null;
[L5232]  COND FALSE  !(!(recipient_s956 != null))
[L5236]  CALL        call __var_22 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L4236]  COND FALSE  !(!(b_s157 <= a_s157))
[L4240]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4241]              __ret_0_ := c_s157;
[L5236]  RET         call __var_22 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L5237]  COND FALSE  !(revert)
[L5240]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][sender_s956];
[L5241]              _balances_ERC20[this][sender_s956] := __var_22;
[L5242]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][sender_s956];
[L5243]  CALL        call __var_23 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s956], amount_s956);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5243]  RET         call __var_23 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s956], amount_s956);
[L5244]  COND FALSE  !(revert)
[L5247]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][recipient_s956];
[L5248]              _balances_ERC20[this][recipient_s956] := __var_23;
[L5249]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][recipient_s956];
[L5250]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4998]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L4999]  COND FALSE  !(revert)
[L5015]              __ret_0_ := true;
[L5897]  RET         call ret_s1257 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5898]  COND FALSE  !(revert)
[L5904]              ret_s1257 := ret_s1257;
[L5905]  COND TRUE   DType[this] == DkargoToken
[L5906]  CALL        call __var_41 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4446]  COND TRUE   (count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376
[L4447]              __ret_0_ := true;
[L5906]  RET         call __var_41 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5907]  COND FALSE  !(revert)
[L5913]  COND TRUE   DType[this] == DkargoToken
[L5914]  CALL        call __var_42 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5133]              __ret_0_ := _balances_ERC20[this][account_s841];
[L5914]  RET         call __var_42 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5915]  COND FALSE  !(revert)
[L5921]  COND FALSE  !(__var_41 && __var_42 == 0)
[L5931]  COND TRUE   DType[this] == DkargoToken
[L5932]  CALL        call __var_43 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L4446]  COND TRUE   (count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376
[L4447]              __ret_0_ := true;
[L5932]  RET         call __var_43 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L5933]  COND FALSE  !(revert)
[L5939]  COND TRUE   DType[this] == DkargoToken
[L5940]  CALL        call __var_44 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L5133]              __ret_0_ := _balances_ERC20[this][account_s841];
[L5940]  RET         call __var_44 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L5941]  COND FALSE  !(revert)
[L5947]  COND FALSE  !(!__var_43 && __var_44 > 0)
[L5957]              __ret_0_ := ret_s1257;
[L2596]  RET         call __ret_0_ := transfer~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2597]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && _supply_ERC20[this] == old(_supply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _name_DkargoToken[this] == old(_name_DkargoToken[this])) && _symbol_DkargoToken[this] == old(_symbol_DkargoToken[this])) && _dkargoPrefix_DkargoPrefix[this] == old(_dkargoPrefix_DkargoPrefix[this])) && _infcs_ERC165[this] == old(_infcs_ERC165[this])) && _slist_AddressChain[this] == old(_slist_AddressChain[this])) && _owner_Ownership[this] == old(_owner_Ownership[this]));
[L2]                 revert := revert_hold;
[L8356]  RET         call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L8450]  RET         call CorralChoice_DkargoToken(this);

Loop:
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND FALSE  !(choice == 23)
[L8291]  COND FALSE  !(choice == 22)
[L8297]  COND FALSE  !(choice == 21)
[L8303]  COND FALSE  !(choice == 20)
[L8309]  COND FALSE  !(choice == 19)
[L8315]  COND FALSE  !(choice == 18)
[L8321]  COND FALSE  !(choice == 17)
[L8327]  COND FALSE  !(choice == 16)
[L8333]  COND FALSE  !(choice == 15)
[L8339]  COND FALSE  !(choice == 14)
[L8345]  COND FALSE  !(choice == 13)
[L8351]  COND TRUE   choice == 12
[L8352]              gas := gas - 21000;
[L8353]  COND TRUE   gas >= 0
[L8354]              assume value_s1257 >= 0 && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8355]              assume msgvalue_MSG == 0;
[L8356]  CALL        call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s1257 && value_s1257 <= _balances_ERC20[this][msgsender_MSG]) && value_s1257 >= 0) && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1257] >= 0) && _balances_ERC20[this][to_s1257] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_DkargoToken0 := true;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L2561]              havoc __exception;
[L2562]              revert := false;
[L2563]  COND FALSE  !(__exception)
[L2596]  CALL        call __ret_0_ := transfer~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5896]  COND TRUE   DType[this] == DkargoToken
[L5897]  CALL        call ret_s1257 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L4997]  COND TRUE   DType[this] == DkargoToken
[L4998]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L5226]              __var_20 := null;
[L5227]  COND FALSE  !(!(sender_s956 != null))
[L5231]              __var_21 := null;
[L5232]  COND FALSE  !(!(recipient_s956 != null))
[L5236]  CALL        call __var_22 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L4236]  COND FALSE  !(!(b_s157 <= a_s157))
[L4240]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4241]              __ret_0_ := c_s157;
[L5236]  RET         call __var_22 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L5237]  COND FALSE  !(revert)
[L5240]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][sender_s956];
[L5241]              _balances_ERC20[this][sender_s956] := __var_22;
[L5242]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][sender_s956];
[L5243]  CALL        call __var_23 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s956], amount_s956);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5243]  RET         call __var_23 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s956], amount_s956);
[L5244]  COND FALSE  !(revert)
[L5247]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][recipient_s956];
[L5248]              _balances_ERC20[this][recipient_s956] := __var_23;
[L5249]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][recipient_s956];
[L5250]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4998]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L4999]  COND FALSE  !(revert)
[L5015]              __ret_0_ := true;
[L5897]  RET         call ret_s1257 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5898]  COND FALSE  !(revert)
[L5904]              ret_s1257 := ret_s1257;
[L5905]  COND TRUE   DType[this] == DkargoToken
[L5906]  CALL        call __var_41 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4446]  COND TRUE   (count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376
[L4447]              __ret_0_ := true;
[L5906]  RET         call __var_41 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5907]  COND FALSE  !(revert)
[L5913]  COND TRUE   DType[this] == DkargoToken
[L5914]  CALL        call __var_42 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5133]              __ret_0_ := _balances_ERC20[this][account_s841];
[L5914]  RET         call __var_42 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5915]  COND FALSE  !(revert)
[L5921]  COND FALSE  !(__var_41 && __var_42 == 0)
[L5931]  COND TRUE   DType[this] == DkargoToken
[L5932]  CALL        call __var_43 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L4446]  COND TRUE   (count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376
[L4447]              __ret_0_ := true;
[L5932]  RET         call __var_43 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L5933]  COND FALSE  !(revert)
[L5939]  COND TRUE   DType[this] == DkargoToken
[L5940]  CALL        call __var_44 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L5133]              __ret_0_ := _balances_ERC20[this][account_s841];
[L5940]  RET         call __var_44 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L5941]  COND FALSE  !(revert)
[L5947]  COND FALSE  !(!__var_43 && __var_44 > 0)
[L5957]              __ret_0_ := ret_s1257;
[L2596]  RET         call __ret_0_ := transfer~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2597]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && _supply_ERC20[this] == old(_supply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _name_DkargoToken[this] == old(_name_DkargoToken[this])) && _symbol_DkargoToken[this] == old(_symbol_DkargoToken[this])) && _dkargoPrefix_DkargoPrefix[this] == old(_dkargoPrefix_DkargoPrefix[this])) && _infcs_ERC165[this] == old(_infcs_ERC165[this])) && _slist_AddressChain[this] == old(_slist_AddressChain[this])) && _owner_Ownership[this] == old(_owner_Ownership[this]));
[L2]                 revert := revert_hold;
[L8356]  RET         call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L8450]  RET         call CorralChoice_DkargoToken(this);

[2020-11-25 14:00:58,975 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:00:58,975 INFO  L82        PathProgramCache]: Analyzing trace with hash 277467276, now seen corresponding path program 1 times
[2020-11-25 14:00:58,976 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:00:59,007 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
Received shutdown request...
[2020-11-25 14:15:40,270 FATAL L265        ToolchainWalker]: An unrecoverable error occured during an interaction with an SMT solver:
de.uni_freiburg.informatik.ultimate.logic.SMTLIBException: Timeout exceeded
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator$IntegerInterpolator.interpolate(Interpolator.java:1432)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator$MixedLAInterpolator.convert(Interpolator.java:1288)
	at de.uni_freiburg.informatik.ultimate.logic.TermTransformer.cacheConvert(TermTransformer.java:131)
	at de.uni_freiburg.informatik.ultimate.logic.TermTransformer.access$0(TermTransformer.java:127)
	at de.uni_freiburg.informatik.ultimate.logic.TermTransformer$Convert.walk(TermTransformer.java:79)
	at de.uni_freiburg.informatik.ultimate.logic.NonRecursive.run(NonRecursive.java:122)
	at de.uni_freiburg.informatik.ultimate.logic.NonRecursive.run(NonRecursive.java:113)
	at de.uni_freiburg.informatik.ultimate.logic.TermTransformer.transform(TermTransformer.java:253)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator.mixedPivotLA(Interpolator.java:1478)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator.combine(Interpolator.java:359)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator.access$2(Interpolator.java:328)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator$CombineInterpolants.walk(Interpolator.java:153)
	at de.uni_freiburg.informatik.ultimate.logic.NonRecursive.run(NonRecursive.java:122)
	at de.uni_freiburg.informatik.ultimate.logic.NonRecursive.run(NonRecursive.java:113)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator.interpolate(Interpolator.java:220)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator.getInterpolants(Interpolator.java:201)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.smtlib2.SMTInterpol.getInterpolants(SMTInterpol.java:919)
	at de.uni_freiburg.informatik.ultimate.modelcheckerutils.smt.managedscript.ManagedScript.getInterpolants(ManagedScript.java:200)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.NestedInterpolantsBuilder.computeCraigInterpolants(NestedInterpolantsBuilder.java:303)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.NestedInterpolantsBuilder.<init>(NestedInterpolantsBuilder.java:167)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.NestedInterpolantsBuilder.<init>(NestedInterpolantsBuilder.java:182)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.InterpolatingTraceCheckCraig.computeInterpolantsTree(InterpolatingTraceCheckCraig.java:271)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.InterpolatingTraceCheckCraig.computeInterpolants(InterpolatingTraceCheckCraig.java:207)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.InterpolatingTraceCheckCraig.<init>(InterpolatingTraceCheckCraig.java:109)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.TraceCheckConstructor.constructCraig(TraceCheckConstructor.java:211)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.TraceCheckConstructor.constructTraceCheck(TraceCheckConstructor.java:183)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.TraceCheckConstructor.get(TraceCheckConstructor.java:165)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.FixedRefinementStrategy.getTraceCheck(FixedRefinementStrategy.java:134)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.BaseRefinementStrategy.checkFeasibility(BaseRefinementStrategy.java:223)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.BaseRefinementStrategy.executeStrategy(BaseRefinementStrategy.java:197)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.TraceAbstractionRefinementEngine.<init>(TraceAbstractionRefinementEngine.java:70)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck$LassoCheckResult.checkFeasibilityAndComputeInterpolants(LassoCheck.java:1126)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck$LassoCheckResult.checkStemFeasibility(LassoCheck.java:1080)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck$LassoCheckResult.<init>(LassoCheck.java:994)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck.<init>(LassoCheck.java:276)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiCegarLoop.iterate(BuchiCegarLoop.java:479)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver.doTerminationAnalysis(BuchiAutomizerObserver.java:153)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver.finish(BuchiAutomizerObserver.java:413)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.PluginConnector.runObserver(PluginConnector.java:168)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.PluginConnector.runTool(PluginConnector.java:151)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.PluginConnector.run(PluginConnector.java:128)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.executePluginConnector(ToolchainWalker.java:232)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.processPlugin(ToolchainWalker.java:226)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.walkUnprotected(ToolchainWalker.java:142)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.walk(ToolchainWalker.java:104)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainManager$Toolchain.processToolchain(ToolchainManager.java:317)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.toolchain.DefaultToolchainJob.run(DefaultToolchainJob.java:145)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)
[2020-11-25 14:15:40,271 INFO  L168              Benchmark]: Toolchain (without parser) took 898544.67 ms. Allocated memory was 1.0 GB in the beginning and 6.5 GB in the end (delta: 5.5 GB). Free memory was 929.8 MB in the beginning and 4.2 GB in the end (delta: -3.3 GB). Peak memory consumption was 6.2 GB. Max. memory is 15.3 GB.
[2020-11-25 14:15:40,272 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 14:15:40,272 INFO  L168              Benchmark]: Boogie Preprocessor took 124.40 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 913.7 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
[2020-11-25 14:15:40,273 INFO  L168              Benchmark]: UtopiaSpecLang took 74.67 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 903.0 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 14:15:40,273 INFO  L168              Benchmark]: Boogie Printer took 21.39 ms. Allocated memory is still 1.0 GB. Free memory was 903.0 MB in the beginning and 897.6 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 14:15:40,273 INFO  L168              Benchmark]: RCFGBuilder took 1110.63 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 61.3 MB). Free memory was 897.6 MB in the beginning and 917.0 MB in the end (delta: -19.4 MB). Peak memory consumption was 184.5 MB. Max. memory is 15.3 GB.
[2020-11-25 14:15:40,274 INFO  L168              Benchmark]: UtopiaLTL2Aut took 36.23 ms. Allocated memory is still 1.1 GB. Free memory was 917.0 MB in the beginning and 913.5 MB in the end (delta: 3.5 MB). Peak memory consumption was 3.5 MB. Max. memory is 15.3 GB.
[2020-11-25 14:15:40,274 INFO  L168              Benchmark]: BÃ¼chi Program Product took 2171.65 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 191.4 MB). Free memory was 913.5 MB in the beginning and 1.0 GB in the end (delta: -91.2 MB). Peak memory consumption was 477.1 MB. Max. memory is 15.3 GB.
[2020-11-25 14:15:40,275 INFO  L168              Benchmark]: BlockEncodingV2 took 196.55 ms. Allocated memory is still 1.3 GB. Free memory was 1.0 GB in the beginning and 898.3 MB in the end (delta: 106.5 MB). Peak memory consumption was 106.5 MB. Max. memory is 15.3 GB.
[2020-11-25 14:15:40,275 INFO  L168              Benchmark]: BuchiAutomizer took 894806.23 ms. Allocated memory was 1.3 GB in the beginning and 6.5 GB in the end (delta: 5.2 GB). Free memory was 898.3 MB in the beginning and 4.2 GB in the end (delta: -3.3 GB). Peak memory consumption was 5.9 GB. Max. memory is 15.3 GB.
[2020-11-25 14:15:40,278 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    7634 locations, 13669 edges
  - StatisticsResult: Encoded RCFG
    7442 locations, 13128 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 124.40 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 913.7 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 74.67 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 903.0 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 21.39 ms. Allocated memory is still 1.0 GB. Free memory was 903.0 MB in the beginning and 897.6 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 1110.63 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 61.3 MB). Free memory was 897.6 MB in the beginning and 917.0 MB in the end (delta: -19.4 MB). Peak memory consumption was 184.5 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 36.23 ms. Allocated memory is still 1.1 GB. Free memory was 917.0 MB in the beginning and 913.5 MB in the end (delta: 3.5 MB). Peak memory consumption was 3.5 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 2171.65 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 191.4 MB). Free memory was 913.5 MB in the beginning and 1.0 GB in the end (delta: -91.2 MB). Peak memory consumption was 477.1 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 196.55 ms. Allocated memory is still 1.3 GB. Free memory was 1.0 GB in the beginning and 898.3 MB in the end (delta: 106.5 MB). Peak memory consumption was 106.5 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 894806.23 ms. Allocated memory was 1.3 GB in the beginning and 6.5 GB in the end (delta: 5.2 GB). Free memory was 898.3 MB in the beginning and 4.2 GB in the end (delta: -3.3 GB). Peak memory consumption was 5.9 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    3094 locations, 4212 edges
  - StatisticsResult: BuchiProgram size
    7634 locations, 13669 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer:
  - ExceptionOrErrorResult: SMTLIBException: Timeout exceeded
    de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer: SMTLIBException: Timeout exceeded: de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator$IntegerInterpolator.interpolate(Interpolator.java:1432)
RESULT: Ultimate could not prove your program: Toolchain returned no result.
Completed graceful shutdown
