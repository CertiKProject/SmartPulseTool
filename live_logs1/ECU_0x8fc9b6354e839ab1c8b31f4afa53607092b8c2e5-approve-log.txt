This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 15:00:40,299 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 15:00:40,300 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 15:00:40,307 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 15:00:40,307 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 15:00:40,308 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 15:00:40,309 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 15:00:40,310 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 15:00:40,311 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 15:00:40,311 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 15:00:40,312 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 15:00:40,312 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 15:00:40,312 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 15:00:40,313 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 15:00:40,314 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 15:00:40,314 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 15:00:40,314 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 15:00:40,315 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 15:00:40,316 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 15:00:40,317 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 15:00:40,317 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 15:00:40,318 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 15:00:40,319 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 15:00:40,319 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 15:00:40,319 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 15:00:40,320 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 15:00:40,320 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 15:00:40,321 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 15:00:40,321 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 15:00:40,321 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 15:00:40,321 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 15:00:40,322 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 15:00:40,322 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 15:00:40,322 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 15:00:40,323 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 15:00:40,323 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 15:00:40,323 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 15:00:40,323 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 15:00:40,323 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 15:00:40,324 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 15:00:40,324 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 15:00:40,324 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 15:00:40,330 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 15:00:40,330 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 15:00:40,331 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 15:00:40,331 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 15:00:40,331 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 15:00:40,331 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 15:00:40,331 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 15:00:40,331 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 15:00:40,331 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 15:00:40,331 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 15:00:40,331 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 15:00:40,332 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 15:00:40,332 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 15:00:40,332 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 15:00:40,332 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 15:00:40,332 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 15:00:40,332 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 15:00:40,332 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 15:00:40,332 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 15:00:40,332 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 15:00:40,332 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 15:00:40,332 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 15:00:40,332 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 15:00:40,332 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 15:00:40,332 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 15:00:40,333 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 15:00:40,350 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 15:00:40,364 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 15:00:40,367 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 15:00:40,369 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 15:00:40,369 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 15:00:40,370 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/ECU_0x8fc9b6354e839ab1c8b31f4afa53607092b8c2e5_approve.bpl
[2020-11-25 15:00:40,370 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/ECU_0x8fc9b6354e839ab1c8b31f4afa53607092b8c2e5_approve.bpl'
[2020-11-25 15:00:40,475 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 15:00:40,477 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 15:00:40,477 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 15:00:40,477 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 15:00:40,477 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 15:00:40,493 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "ECU_0x8fc9b6354e839ab1c8b31f4afa53607092b8c2e5_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:00:40" (1/1) ...
[2020-11-25 15:00:40,495 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "ECU_0x8fc9b6354e839ab1c8b31f4afa53607092b8c2e5_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:00:40" (1/1) ...
[2020-11-25 15:00:40,529 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "ECU_0x8fc9b6354e839ab1c8b31f4afa53607092b8c2e5_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:00:40" (1/1) ...
[2020-11-25 15:00:40,530 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "ECU_0x8fc9b6354e839ab1c8b31f4afa53607092b8c2e5_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:00:40" (1/1) ...
[2020-11-25 15:00:40,556 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "ECU_0x8fc9b6354e839ab1c8b31f4afa53607092b8c2e5_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:00:40" (1/1) ...
[2020-11-25 15:00:40,570 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "ECU_0x8fc9b6354e839ab1c8b31f4afa53607092b8c2e5_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:00:40" (1/1) ...
[2020-11-25 15:00:40,580 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "ECU_0x8fc9b6354e839ab1c8b31f4afa53607092b8c2e5_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:00:40" (1/1) ...
[2020-11-25 15:00:40,592 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 15:00:40,593 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 15:00:40,593 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 15:00:40,595 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 15:00:40,599 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "ECU_0x8fc9b6354e839ab1c8b31f4afa53607092b8c2e5_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:00:40" (1/1) ...
[2020-11-25 15:00:40,618 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(StandardToken.approve(spender, value), p1 != msg.sender || p2 != spender) ==> <>(finished(StandardToken.approve(spender, value), return == true && allowed_StandardToken[this][msg.sender][spender] == value &&  totalSupply_ERC20Basic[this] == old(totalSupply_ERC20Basic[this]) && balances_BasicToken[this] == old(balances_BasicToken[this]) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2]) && allowedAddresses_BasicToken[this] == old(allowedAddresses_BasicToken[this]) && lockedAddresses_BasicToken[this] == old(lockedAddresses_BasicToken[this]) && locked_BasicToken[this] == old(locked_BasicToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]))))
[2020-11-25 15:00:40,623 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(StandardToken.approve(spender, value), p1 != msg.sender || p2 != spender) ==> <>(finished(StandardToken.approve(spender, value), return == true && allowed_StandardToken[this][msg.sender][spender] == value &&  totalSupply_ERC20Basic[this] == old(totalSupply_ERC20Basic[this]) && balances_BasicToken[this] == old(balances_BasicToken[this]) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2]) && allowedAddresses_BasicToken[this] == old(allowedAddresses_BasicToken[this]) && lockedAddresses_BasicToken[this] == old(lockedAddresses_BasicToken[this]) && locked_BasicToken[this] == old(locked_BasicToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]))))
[2020-11-25 15:00:40,630 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(StandardToken.approve(spender, value), p1 != msg.sender || p2 != spender) ==> <>(finished(StandardToken.approve(spender, value), return == true && allowed_StandardToken[this][msg.sender][spender] == value &&  totalSupply_ERC20Basic[this] == old(totalSupply_ERC20Basic[this]) && balances_BasicToken[this] == old(balances_BasicToken[this]) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2]) && allowedAddresses_BasicToken[this] == old(allowedAddresses_BasicToken[this]) && lockedAddresses_BasicToken[this] == old(lockedAddresses_BasicToken[this]) && locked_BasicToken[this] == old(locked_BasicToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]))))
[2020-11-25 15:00:40,637 INFO  L636   opiaSpecLangObserver]: Parsed ( p1!=msg.sender || p2!=_spender_s509 ) to BinaryExpression[LOGICOR,BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]],BinaryExpression[COMPNEQ,IdentifierExpression[p2,GLOBAL],IdentifierExpression[_spender_s509,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]]
[2020-11-25 15:00:40,640 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( __ret_0_==true && allowed_StandardToken[this][msg.sender][_spender_s509]==_value_s509 ) && totalSupply_ERC20Basic[this]==( old(totalSupply_ERC20Basic[this]) ) ) && balances_BasicToken[this]==( old(balances_BasicToken[this]) ) ) && allowed_StandardToken[this][p1][p2]==( old(allowed_StandardToken[this][p1][p2]) ) ) && allowedAddresses_BasicToken[this]==( old(allowedAddresses_BasicToken[this]) ) ) && lockedAddresses_BasicToken[this]==( old(lockedAddresses_BasicToken[this]) ) ) && locked_BasicToken[this]==( old(locked_BasicToken[this]) ) ) && owner_Ownable[this]==( old(owner_Ownable[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[__ret_0_,<IMPLEMENTATION_OUTPARAM,approve~address~uint256_StandardToken>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]],[IdentifierExpression[_spender_s509,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]],IdentifierExpression[_value_s509,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[totalSupply_ERC20Basic,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[totalSupply_ERC20Basic,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]],[IdentifierExpression[p1,GLOBAL]]],[IdentifierExpression[p2,GLOBAL]]],UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]],[IdentifierExpression[p1,GLOBAL]]],[IdentifierExpression[p2,GLOBAL]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[allowedAddresses_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[allowedAddresses_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[lockedAddresses_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[lockedAddresses_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[locked_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[locked_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[owner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[owner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]]]]]
[2020-11-25 15:00:40,646 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(StandardToken.approve(spender, value), p1 != msg.sender || p2 != spender) ==> <>(finished(StandardToken.approve(spender, value), return == true && allowed_StandardToken[this][msg.sender][spender] == value &&  totalSupply_ERC20Basic[this] == old(totalSupply_ERC20Basic[this]) && balances_BasicToken[this] == old(balances_BasicToken[this]) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2]) && allowedAddresses_BasicToken[this] == old(allowedAddresses_BasicToken[this]) && lockedAddresses_BasicToken[this] == old(lockedAddresses_BasicToken[this]) && locked_BasicToken[this] == old(locked_BasicToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]))))
[2020-11-25 15:00:40,646 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_approve_StandardToken0) ==> ( <>AP(success_approve_StandardToken0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 15:00:40,658 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 03:00:40 PropertyContainer
[2020-11-25 15:00:40,659 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 15:00:40,659 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 15:00:40,659 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 15:00:40,659 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 15:00:40,660 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "ECU_0x8fc9b6354e839ab1c8b31f4afa53607092b8c2e5_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:00:40" (1/2) ...
[2020-11-25 15:00:40,660 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 15:00:40,660 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 15:00:40,680 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 03:00:40" (2/2) ...
[2020-11-25 15:00:40,680 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 15:00:40,681 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 15:00:40,681 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 15:00:40,681 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 15:00:40,681 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "ECU_0x8fc9b6354e839ab1c8b31f4afa53607092b8c2e5_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:00:40" (1/2) ...
[2020-11-25 15:00:40,733 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 15:00:40,733 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 15:00:40,733 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 15:00:40,734 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 15:00:40,734 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 15:00:40,734 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 15:00:40,734 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 15:00:40,734 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 15:00:40,734 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-25 15:00:40,734 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable
[2020-11-25 15:00:40,734 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable
[2020-11-25 15:00:40,734 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable
[2020-11-25 15:00:40,734 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable
[2020-11-25 15:00:40,734 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable
[2020-11-25 15:00:40,735 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable
[2020-11-25 15:00:40,735 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic_NoBaseCtor__success
[2020-11-25 15:00:40,735 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic
[2020-11-25 15:00:40,735 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic
[2020-11-25 15:00:40,735 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20Basic
[2020-11-25 15:00:40,735 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Basic
[2020-11-25 15:00:40,735 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20Basic
[2020-11-25 15:00:40,736 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20Basic
[2020-11-25 15:00:40,736 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken_NoBaseCtor__success
[2020-11-25 15:00:40,736 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken
[2020-11-25 15:00:40,736 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken
[2020-11-25 15:00:40,736 INFO  L130     BoogieDeclarations]: Found specification of procedure allowAddress~address~bool_BasicToken
[2020-11-25 15:00:40,736 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowAddress~address~bool_BasicToken
[2020-11-25 15:00:40,736 INFO  L130     BoogieDeclarations]: Found specification of procedure lockAddress~address~bool_BasicToken
[2020-11-25 15:00:40,736 INFO  L138     BoogieDeclarations]: Found implementation of procedure lockAddress~address~bool_BasicToken
[2020-11-25 15:00:40,736 INFO  L130     BoogieDeclarations]: Found specification of procedure setLocked~bool_BasicToken
[2020-11-25 15:00:40,736 INFO  L138     BoogieDeclarations]: Found implementation of procedure setLocked~bool_BasicToken
[2020-11-25 15:00:40,736 INFO  L130     BoogieDeclarations]: Found specification of procedure canTransfer~address_BasicToken
[2020-11-25 15:00:40,736 INFO  L138     BoogieDeclarations]: Found implementation of procedure canTransfer~address_BasicToken
[2020-11-25 15:00:40,737 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken
[2020-11-25 15:00:40,737 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken
[2020-11-25 15:00:40,737 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken
[2020-11-25 15:00:40,737 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken
[2020-11-25 15:00:40,737 INFO  L130     BoogieDeclarations]: Found specification of procedure allowedAddresses~address_BasicToken
[2020-11-25 15:00:40,737 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowedAddresses~address_BasicToken
[2020-11-25 15:00:40,737 INFO  L130     BoogieDeclarations]: Found specification of procedure lockedAddresses~address_BasicToken
[2020-11-25 15:00:40,737 INFO  L138     BoogieDeclarations]: Found implementation of procedure lockedAddresses~address_BasicToken
[2020-11-25 15:00:40,737 INFO  L130     BoogieDeclarations]: Found specification of procedure locked_BasicToken
[2020-11-25 15:00:40,737 INFO  L138     BoogieDeclarations]: Found implementation of procedure locked_BasicToken
[2020-11-25 15:00:40,738 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 15:00:40,738 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 15:00:40,738 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 15:00:40,738 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 15:00:40,738 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 15:00:40,738 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 15:00:40,738 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken_NoBaseCtor__success
[2020-11-25 15:00:40,738 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken
[2020-11-25 15:00:40,738 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken
[2020-11-25 15:00:40,738 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken
[2020-11-25 15:00:40,738 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken
[2020-11-25 15:00:40,739 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken
[2020-11-25 15:00:40,739 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken
[2020-11-25 15:00:40,739 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken
[2020-11-25 15:00:40,739 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken
[2020-11-25 15:00:40,739 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken
[2020-11-25 15:00:40,739 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken
[2020-11-25 15:00:40,739 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken
[2020-11-25 15:00:40,739 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken
[2020-11-25 15:00:40,739 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken_NoBaseCtor__success
[2020-11-25 15:00:40,739 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken
[2020-11-25 15:00:40,740 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken
[2020-11-25 15:00:40,740 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_BurnableToken
[2020-11-25 15:00:40,740 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_BurnableToken
[2020-11-25 15:00:40,740 INFO  L130     BoogieDeclarations]: Found specification of procedure ECU_ECU_NoBaseCtor__success
[2020-11-25 15:00:40,740 INFO  L130     BoogieDeclarations]: Found specification of procedure ECU_ECU
[2020-11-25 15:00:40,740 INFO  L138     BoogieDeclarations]: Found implementation of procedure ECU_ECU
[2020-11-25 15:00:40,740 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ECU
[2020-11-25 15:00:40,740 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ECU
[2020-11-25 15:00:40,740 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ECU
[2020-11-25 15:00:40,740 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ECU
[2020-11-25 15:00:40,741 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ECU
[2020-11-25 15:00:40,741 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ECU
[2020-11-25 15:00:40,741 INFO  L130     BoogieDeclarations]: Found specification of procedure initialSupply_ECU
[2020-11-25 15:00:40,741 INFO  L138     BoogieDeclarations]: Found implementation of procedure initialSupply_ECU
[2020-11-25 15:00:40,741 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 15:00:40,741 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 15:00:40,741 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 15:00:40,741 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 15:00:40,741 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 15:00:40,741 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 15:00:40,742 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Ownable
[2020-11-25 15:00:40,742 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Ownable
[2020-11-25 15:00:40,742 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Basic
[2020-11-25 15:00:40,742 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Basic
[2020-11-25 15:00:40,742 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_BasicToken
[2020-11-25 15:00:40,742 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_BasicToken
[2020-11-25 15:00:40,742 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 15:00:40,742 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 15:00:40,742 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_StandardToken
[2020-11-25 15:00:40,742 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_StandardToken
[2020-11-25 15:00:40,742 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_BurnableToken
[2020-11-25 15:00:40,743 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_BurnableToken
[2020-11-25 15:00:40,743 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ECU
[2020-11-25 15:00:40,743 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 15:00:40,743 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 15:00:40,743 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 15:00:40,743 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 15:00:40,743 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 15:00:40,743 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 15:00:40,743 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 15:00:40,743 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 15:00:40,743 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 15:00:40,744 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-25 15:00:40,744 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__success
[2020-11-25 15:00:40,744 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__fail
[2020-11-25 15:00:40,744 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__success
[2020-11-25 15:00:40,744 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__fail
[2020-11-25 15:00:40,744 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__success
[2020-11-25 15:00:40,744 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__fail
[2020-11-25 15:00:40,744 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic_NoBaseCtor__fail
[2020-11-25 15:00:40,744 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic__success
[2020-11-25 15:00:40,744 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic__fail
[2020-11-25 15:00:40,745 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20Basic__success
[2020-11-25 15:00:40,745 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20Basic__fail
[2020-11-25 15:00:40,745 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken_NoBaseCtor__fail
[2020-11-25 15:00:40,745 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken__success
[2020-11-25 15:00:40,745 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken__fail
[2020-11-25 15:00:40,745 INFO  L130     BoogieDeclarations]: Found specification of procedure allowAddress~address~bool_BasicToken__success
[2020-11-25 15:00:40,745 INFO  L130     BoogieDeclarations]: Found specification of procedure allowAddress~address~bool_BasicToken__fail
[2020-11-25 15:00:40,745 INFO  L130     BoogieDeclarations]: Found specification of procedure lockAddress~address~bool_BasicToken__success
[2020-11-25 15:00:40,745 INFO  L130     BoogieDeclarations]: Found specification of procedure lockAddress~address~bool_BasicToken__fail
[2020-11-25 15:00:40,745 INFO  L130     BoogieDeclarations]: Found specification of procedure setLocked~bool_BasicToken__success
[2020-11-25 15:00:40,745 INFO  L130     BoogieDeclarations]: Found specification of procedure setLocked~bool_BasicToken__fail
[2020-11-25 15:00:40,746 INFO  L130     BoogieDeclarations]: Found specification of procedure canTransfer~address_BasicToken__success
[2020-11-25 15:00:40,746 INFO  L130     BoogieDeclarations]: Found specification of procedure canTransfer~address_BasicToken__fail
[2020-11-25 15:00:40,746 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken__success
[2020-11-25 15:00:40,746 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken__fail
[2020-11-25 15:00:40,746 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken__success
[2020-11-25 15:00:40,746 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken__fail
[2020-11-25 15:00:40,746 INFO  L130     BoogieDeclarations]: Found specification of procedure allowedAddresses~address_BasicToken__success
[2020-11-25 15:00:40,746 INFO  L130     BoogieDeclarations]: Found specification of procedure allowedAddresses~address_BasicToken__fail
[2020-11-25 15:00:40,746 INFO  L130     BoogieDeclarations]: Found specification of procedure lockedAddresses~address_BasicToken__success
[2020-11-25 15:00:40,746 INFO  L130     BoogieDeclarations]: Found specification of procedure lockedAddresses~address_BasicToken__fail
[2020-11-25 15:00:40,747 INFO  L130     BoogieDeclarations]: Found specification of procedure locked_BasicToken__success
[2020-11-25 15:00:40,747 INFO  L130     BoogieDeclarations]: Found specification of procedure locked_BasicToken__fail
[2020-11-25 15:00:40,747 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 15:00:40,747 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 15:00:40,747 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 15:00:40,747 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken_NoBaseCtor__fail
[2020-11-25 15:00:40,747 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken__success
[2020-11-25 15:00:40,747 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken__fail
[2020-11-25 15:00:40,747 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken__success
[2020-11-25 15:00:40,747 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken__fail
[2020-11-25 15:00:40,747 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken__success
[2020-11-25 15:00:40,748 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken__fail
[2020-11-25 15:00:40,748 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken__success
[2020-11-25 15:00:40,748 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken__fail
[2020-11-25 15:00:40,748 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken__success
[2020-11-25 15:00:40,748 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken__fail
[2020-11-25 15:00:40,748 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken__success
[2020-11-25 15:00:40,748 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken__fail
[2020-11-25 15:00:40,748 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken_NoBaseCtor__fail
[2020-11-25 15:00:40,748 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken__success
[2020-11-25 15:00:40,749 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken__fail
[2020-11-25 15:00:40,749 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_BurnableToken__success
[2020-11-25 15:00:40,749 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_BurnableToken__fail
[2020-11-25 15:00:40,749 INFO  L130     BoogieDeclarations]: Found specification of procedure ECU_ECU_NoBaseCtor__fail
[2020-11-25 15:00:40,749 INFO  L130     BoogieDeclarations]: Found specification of procedure ECU_ECU__success
[2020-11-25 15:00:40,749 INFO  L130     BoogieDeclarations]: Found specification of procedure ECU_ECU__fail
[2020-11-25 15:00:40,749 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ECU__success
[2020-11-25 15:00:40,749 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ECU__fail
[2020-11-25 15:00:40,749 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ECU__success
[2020-11-25 15:00:40,749 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ECU__fail
[2020-11-25 15:00:40,749 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ECU__success
[2020-11-25 15:00:40,749 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ECU__fail
[2020-11-25 15:00:40,750 INFO  L130     BoogieDeclarations]: Found specification of procedure initialSupply_ECU__success
[2020-11-25 15:00:40,750 INFO  L130     BoogieDeclarations]: Found specification of procedure initialSupply_ECU__fail
[2020-11-25 15:00:40,750 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 15:00:40,750 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 15:00:40,750 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 15:00:40,750 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 15:00:40,750 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 15:00:40,750 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 15:00:40,750 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 15:00:40,750 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 15:00:40,750 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 15:00:40,751 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 15:00:40,751 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 15:00:40,751 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 15:00:40,751 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 15:00:40,751 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 15:00:40,751 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 15:00:40,751 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 15:00:40,751 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 15:00:40,751 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 15:00:40,751 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-25 15:00:40,751 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-25 15:00:40,751 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__fail
[2020-11-25 15:00:40,752 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__success
[2020-11-25 15:00:40,752 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__fail
[2020-11-25 15:00:40,752 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__success
[2020-11-25 15:00:40,752 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__fail
[2020-11-25 15:00:40,752 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__success
[2020-11-25 15:00:40,752 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic_NoBaseCtor__fail
[2020-11-25 15:00:40,752 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic_NoBaseCtor__success
[2020-11-25 15:00:40,752 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic__fail
[2020-11-25 15:00:40,752 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic__success
[2020-11-25 15:00:40,752 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20Basic__fail
[2020-11-25 15:00:40,752 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20Basic__success
[2020-11-25 15:00:40,752 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken_NoBaseCtor__fail
[2020-11-25 15:00:40,753 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken_NoBaseCtor__success
[2020-11-25 15:00:40,753 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken__fail
[2020-11-25 15:00:40,753 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken__success
[2020-11-25 15:00:40,753 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowAddress~address~bool_BasicToken__fail
[2020-11-25 15:00:40,753 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowAddress~address~bool_BasicToken__success
[2020-11-25 15:00:40,753 INFO  L138     BoogieDeclarations]: Found implementation of procedure lockAddress~address~bool_BasicToken__fail
[2020-11-25 15:00:40,753 INFO  L138     BoogieDeclarations]: Found implementation of procedure lockAddress~address~bool_BasicToken__success
[2020-11-25 15:00:40,753 INFO  L138     BoogieDeclarations]: Found implementation of procedure setLocked~bool_BasicToken__fail
[2020-11-25 15:00:40,753 INFO  L138     BoogieDeclarations]: Found implementation of procedure setLocked~bool_BasicToken__success
[2020-11-25 15:00:40,753 INFO  L138     BoogieDeclarations]: Found implementation of procedure canTransfer~address_BasicToken__fail
[2020-11-25 15:00:40,753 INFO  L138     BoogieDeclarations]: Found implementation of procedure canTransfer~address_BasicToken__success
[2020-11-25 15:00:40,753 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken__fail
[2020-11-25 15:00:40,754 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken__success
[2020-11-25 15:00:40,754 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken__fail
[2020-11-25 15:00:40,754 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken__success
[2020-11-25 15:00:40,754 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowedAddresses~address_BasicToken__fail
[2020-11-25 15:00:40,754 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowedAddresses~address_BasicToken__success
[2020-11-25 15:00:40,754 INFO  L138     BoogieDeclarations]: Found implementation of procedure lockedAddresses~address_BasicToken__fail
[2020-11-25 15:00:40,754 INFO  L138     BoogieDeclarations]: Found implementation of procedure lockedAddresses~address_BasicToken__success
[2020-11-25 15:00:40,754 INFO  L138     BoogieDeclarations]: Found implementation of procedure locked_BasicToken__fail
[2020-11-25 15:00:40,754 INFO  L138     BoogieDeclarations]: Found implementation of procedure locked_BasicToken__success
[2020-11-25 15:00:40,754 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 15:00:40,754 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 15:00:40,754 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 15:00:40,755 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 15:00:40,755 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken_NoBaseCtor__fail
[2020-11-25 15:00:40,755 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken_NoBaseCtor__success
[2020-11-25 15:00:40,755 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken__fail
[2020-11-25 15:00:40,755 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken__success
[2020-11-25 15:00:40,755 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken__fail
[2020-11-25 15:00:40,755 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken__success
[2020-11-25 15:00:40,755 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken__fail
[2020-11-25 15:00:40,755 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken__success
[2020-11-25 15:00:40,755 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken__fail
[2020-11-25 15:00:40,755 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken__success
[2020-11-25 15:00:40,755 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken__fail
[2020-11-25 15:00:40,756 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken__success
[2020-11-25 15:00:40,756 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken__fail
[2020-11-25 15:00:40,756 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken__success
[2020-11-25 15:00:40,756 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken_NoBaseCtor__fail
[2020-11-25 15:00:40,756 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken_NoBaseCtor__success
[2020-11-25 15:00:40,756 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken__fail
[2020-11-25 15:00:40,756 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken__success
[2020-11-25 15:00:40,756 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_BurnableToken__fail
[2020-11-25 15:00:40,756 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_BurnableToken__success
[2020-11-25 15:00:40,756 INFO  L138     BoogieDeclarations]: Found implementation of procedure ECU_ECU_NoBaseCtor__fail
[2020-11-25 15:00:40,756 INFO  L138     BoogieDeclarations]: Found implementation of procedure ECU_ECU_NoBaseCtor__success
[2020-11-25 15:00:40,756 INFO  L138     BoogieDeclarations]: Found implementation of procedure ECU_ECU__fail
[2020-11-25 15:00:40,757 INFO  L138     BoogieDeclarations]: Found implementation of procedure ECU_ECU__success
[2020-11-25 15:00:40,757 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ECU__fail
[2020-11-25 15:00:40,757 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ECU__success
[2020-11-25 15:00:40,757 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ECU__fail
[2020-11-25 15:00:40,757 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ECU__success
[2020-11-25 15:00:40,757 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ECU__fail
[2020-11-25 15:00:40,757 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ECU__success
[2020-11-25 15:00:40,757 INFO  L138     BoogieDeclarations]: Found implementation of procedure initialSupply_ECU__fail
[2020-11-25 15:00:40,757 INFO  L138     BoogieDeclarations]: Found implementation of procedure initialSupply_ECU__success
[2020-11-25 15:00:40,757 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 15:00:40,757 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 15:00:40,757 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 15:00:40,757 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 15:00:40,758 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 15:00:40,758 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 15:00:40,758 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 15:00:40,758 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 15:00:40,758 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 15:00:40,758 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 15:00:40,758 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Ownable
[2020-11-25 15:00:40,759 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Ownable
[2020-11-25 15:00:40,759 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Basic
[2020-11-25 15:00:40,759 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Basic
[2020-11-25 15:00:40,759 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_BasicToken
[2020-11-25 15:00:40,759 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_BasicToken
[2020-11-25 15:00:40,759 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 15:00:40,759 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 15:00:40,759 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_StandardToken
[2020-11-25 15:00:40,759 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_StandardToken
[2020-11-25 15:00:40,759 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_BurnableToken
[2020-11-25 15:00:40,759 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_BurnableToken
[2020-11-25 15:00:40,760 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ECU
[2020-11-25 15:00:40,760 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 15:00:40,760 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 15:00:40,760 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 15:00:41,318 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 15:00:41,392 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 15:00:41,392 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 15:00:41,393 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 15:00:41,729 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 15:00:41,729 INFO  L286             CfgBuilder]: Removed 8 assue(true) statements.
[2020-11-25 15:00:41,732 INFO  L202        PluginConnector]: Adding new model ECU_0x8fc9b6354e839ab1c8b31f4afa53607092b8c2e5_approve.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 03:00:41 BoogieIcfgContainer
[2020-11-25 15:00:41,732 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 03:00:40" (2/2) ...
[2020-11-25 15:00:41,732 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 15:00:41,732 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@1c4d40ff and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 03:00:41, skipping insertion in model container
[2020-11-25 15:00:41,732 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 15:00:41,732 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 15:00:41,732 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 15:00:41,734 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 15:00:41,734 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "ECU_0x8fc9b6354e839ab1c8b31f4afa53607092b8c2e5_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:00:40" (1/3) ...
[2020-11-25 15:00:41,735 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@33e753b1 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 03:00:41, skipping insertion in model container
[2020-11-25 15:00:41,735 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 03:00:40" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 15:00:41,771 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 03:00:41 NWAContainer
[2020-11-25 15:00:41,772 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 15:00:41,772 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 15:00:41,772 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 15:00:41,773 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 15:00:41,773 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "ECU_0x8fc9b6354e839ab1c8b31f4afa53607092b8c2e5_approve.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 03:00:41" (3/4) ...
[2020-11-25 15:00:41,774 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@2c1d1609 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 03:00:41, skipping insertion in model container
[2020-11-25 15:00:41,774 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 03:00:41" (4/4) ...
[2020-11-25 15:00:41,777 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 15:00:41,782 INFO  L110   BuchiProductObserver]: Initial RCFG 2507 locations, 3478 edges
[2020-11-25 15:00:41,782 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 15:00:41,793 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 15:00:43,646 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 15:00:43,654 INFO  L110   BuchiProductObserver]: BuchiProgram size 6264 locations, 11468 edges
[2020-11-25 15:00:43,655 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 03:00:43 BoogieIcfgContainer
[2020-11-25 15:00:43,655 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 15:00:43,655 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 15:00:43,655 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 15:00:43,657 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 15:00:43,657 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 03:00:43" (1/1) ...
[2020-11-25 15:00:43,792 INFO  L313           BlockEncoder]: Initial Icfg 6264 locations, 11468 edges
[2020-11-25 15:00:43,792 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 15:00:43,793 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 15:00:43,793 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 15:00:43,794 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 15:00:43,808 INFO  L70    emoveInfeasibleEdges]: Removed 93 edges and 19 locations because of local infeasibility
[2020-11-25 15:00:43,822 INFO  L70        RemoveSinkStates]: Removed 14 edges and 9 locations by removing sink states
[2020-11-25 15:00:43,839 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 15:00:43,845 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 15:00:43,851 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 15:00:43,851 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 15:00:43,857 INFO  L313           BlockEncoder]: Encoded RCFG 6202 locations, 11311 edges
[2020-11-25 15:00:43,858 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 03:00:43 BasicIcfg
[2020-11-25 15:00:43,858 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 15:00:43,858 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 15:00:43,858 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 15:00:43,861 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 15:00:43,861 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 15:00:43,861 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "ECU_0x8fc9b6354e839ab1c8b31f4afa53607092b8c2e5_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:00:40" (1/6) ...
[2020-11-25 15:00:43,863 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@32ab5f7a and model type ECU_0x8fc9b6354e839ab1c8b31f4afa53607092b8c2e5_approve.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 03:00:43, skipping insertion in model container
[2020-11-25 15:00:43,863 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 15:00:43,863 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 03:00:40" (2/6) ...
[2020-11-25 15:00:43,863 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@32ab5f7a and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 03:00:43, skipping insertion in model container
[2020-11-25 15:00:43,863 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 15:00:43,863 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "ECU_0x8fc9b6354e839ab1c8b31f4afa53607092b8c2e5_approve.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 03:00:41" (3/6) ...
[2020-11-25 15:00:43,863 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@32ab5f7a and model type ECU_0x8fc9b6354e839ab1c8b31f4afa53607092b8c2e5_approve.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 03:00:43, skipping insertion in model container
[2020-11-25 15:00:43,863 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 15:00:43,863 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 03:00:41" (4/6) ...
[2020-11-25 15:00:43,864 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@32ab5f7a and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 03:00:43, skipping insertion in model container
[2020-11-25 15:00:43,864 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 15:00:43,864 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 03:00:43" (5/6) ...
[2020-11-25 15:00:43,864 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@32ab5f7a and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 03:00:43, skipping insertion in model container
[2020-11-25 15:00:43,864 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 15:00:43,864 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 03:00:43" (6/6) ...
[2020-11-25 15:00:43,865 INFO  L404   chiAutomizerObserver]: Analyzing ICFG ECU_0x8fc9b6354e839ab1c8b31f4afa53607092b8c2e5_approve.bpl_BEv2
[2020-11-25 15:00:43,897 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 15:00:43,897 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 15:00:43,897 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 15:00:43,897 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 15:00:43,897 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 15:00:43,897 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 15:00:43,897 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 15:00:43,897 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 15:00:43,898 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 15:00:43,951 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6202 states.
[2020-11-25 15:00:44,007 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 15:00:44,007 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 15:00:44,007 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 15:00:44,014 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 15:00:44,015 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 15:00:44,015 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 15:00:44,015 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6202 states.
[2020-11-25 15:00:44,038 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 15:00:44,038 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 15:00:44,039 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 15:00:44,040 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 15:00:44,040 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_StandardToken0 := false;
[L3]                 call_approve_StandardToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L7235]              assume null == 0;
[L7236]  CALL        call this := FreshRefGenerator__success();
[L3066]              havoc newRef;
[L3067]              assume Alloc[newRef] == false;
[L3068]              Alloc[newRef] := true;
[L3069]              assume newRef != null;
[L7236]  RET         call this := FreshRefGenerator__success();
[L7237]              assume now >= 0;
[L7238]              assume DType[this] == ECU;
[L7239]              assume msgvalue_MSG == 0;
[L7240]              gas := gas - 53000;
[L7241]  CALL        call ECU_ECU(this, msgsender_MSG, msgvalue_MSG);
[L1850]              havoc __exception;
[L1851]              revert := false;
[L1852]  COND FALSE  !(__exception)
[L1881]  CALL        call ECU_ECU__success(this, msgsender_MSG, msgvalue_MSG);
[L4152]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3258]              assume msgsender_MSG != null;
[L3259]              Balance[this] := 0;
[L3260]              totalSupply_ERC20Basic[this] := 0;
[L3274]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3275]  COND TRUE   revert
[L4152]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4153]  COND TRUE   revert
[L1881]  RET         call ECU_ECU__success(this, msgsender_MSG, msgvalue_MSG);
[L1882]              assume !revert && gas >= 0;
[L7241]  RET         call ECU_ECU(this, msgsender_MSG, msgvalue_MSG);
[L7242]              assume !revert && gas >= 0;

Loop:
[L7245]  CALL        call CorralChoice_ECU(this);
[L7029]              havoc msgsender_MSG;
[L7030]              havoc msgvalue_MSG;
[L7031]              havoc choice;
[L7032]              havoc __ret_0_owner;
[L7033]              havoc newOwner_s146;
[L7034]              havoc __ret_0_totalSupply;
[L7035]              havoc _owner_s352;
[L7036]              havoc balance_s352;
[L7037]              havoc _to_s340;
[L7038]              havoc _value_s340;
[L7039]              havoc __ret_0_transfer;
[L7040]              havoc arg745_s0;
[L7041]              havoc __ret_0_allowedAddresses;
[L7042]              havoc arg746_s0;
[L7043]              havoc __ret_0_lockedAddresses;
[L7044]              havoc __ret_0_locked;
[L7045]              havoc _addr_s218;
[L7046]              havoc _allowed_s218;
[L7047]              havoc _addr_s240;
[L7048]              havoc _locked_s240;
[L7049]              havoc _locked_s252;
[L7050]              havoc _addr_s282;
[L7051]              havoc __ret_0_canTransfer;
[L7052]              havoc _owner_s525;
[L7053]              havoc _spender_s525;
[L7054]              havoc remaining_s525;
[L7055]              havoc _from_s481;
[L7056]              havoc _to_s481;
[L7057]              havoc _value_s481;
[L7058]              havoc __ret_0_transferFrom;
[L7059]              havoc _spender_s509;
[L7060]              havoc _value_s509;
[L7061]              havoc __ret_0_approve;
[L7062]              havoc _spender_s566;
[L7063]              havoc _addedValue_s566;
[L7064]              havoc success_s566;
[L7065]              havoc _spender_s626;
[L7066]              havoc _subtractedValue_s626;
[L7067]              havoc success_s626;
[L7068]              havoc _value_s692;
[L7069]              havoc __ret_0_name;
[L7070]              havoc __ret_0_symbol;
[L7071]              havoc __ret_0_decimals;
[L7072]              havoc __ret_0_initialSupply;
[L7073]              havoc tmpNow;
[L7074]              havoc gas;
[L7075]              assume gas > 4000000 && gas <= 8000000;
[L7076]              tmpNow := now;
[L7077]              havoc now;
[L7078]              assume now > tmpNow;
[L7079]              assume msgsender_MSG != null;
[L7080]              assume DType[msgsender_MSG] != SafeMath;
[L7081]              assume DType[msgsender_MSG] != Ownable;
[L7082]              assume DType[msgsender_MSG] != ERC20Basic;
[L7083]              assume DType[msgsender_MSG] != BasicToken;
[L7084]              assume DType[msgsender_MSG] != ERC20;
[L7085]              assume DType[msgsender_MSG] != StandardToken;
[L7086]              assume DType[msgsender_MSG] != BurnableToken;
[L7087]              assume DType[msgsender_MSG] != ECU;
[L7088]              Alloc[msgsender_MSG] := true;
[L7089]  COND TRUE   choice == 22
[L7090]              gas := gas - 21000;
[L7091]  COND FALSE  !(gas >= 0)
[L7245]  RET         call CorralChoice_ECU(this);

[2020-11-25 15:00:44,054 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 15:00:44,054 INFO  L82        PathProgramCache]: Analyzing trace with hash 1376676758, now seen corresponding path program 1 times
[2020-11-25 15:00:44,058 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 15:00:44,106 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 15:00:44,152 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 15:00:44,154 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 15:00:44,154 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 15:00:44,616 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 15:00:44,624 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 15:00:44,625 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 15:00:44,626 INFO  L87              Difference]: Start difference. First operand 6202 states. Second operand 4 states.
[2020-11-25 15:00:45,136 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 15:00:45,136 INFO  L93              Difference]: Finished difference Result 3450 states and 3891 transitions.
[2020-11-25 15:00:45,136 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 15:00:45,137 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3450 states and 3891 transitions.
[2020-11-25 15:00:45,155 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 15:00:45,184 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3450 states to 3446 states and 3883 transitions.
[2020-11-25 15:00:45,185 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-25 15:00:45,187 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1021
[2020-11-25 15:00:45,187 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3446 states and 3883 transitions.
[2020-11-25 15:00:45,196 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 15:00:45,196 INFO  L728         BuchiCegarLoop]: Abstraction has 3446 states and 3883 transitions.
[2020-11-25 15:00:45,211 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3446 states and 3883 transitions.
[2020-11-25 15:00:45,265 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3446 to 3446.
[2020-11-25 15:00:45,266 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3446 states.
[2020-11-25 15:00:45,270 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3446 states to 3446 states and 3883 transitions.
[2020-11-25 15:00:45,271 INFO  L751         BuchiCegarLoop]: Abstraction has 3446 states and 3883 transitions.
[2020-11-25 15:00:45,271 INFO  L631         BuchiCegarLoop]: Abstraction has 3446 states and 3883 transitions.
[2020-11-25 15:00:45,271 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 15:00:45,271 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3446 states and 3883 transitions.
[2020-11-25 15:00:45,279 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 15:00:45,279 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 15:00:45,279 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 15:00:45,281 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 15:00:45,281 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_StandardToken0 := false;
[L3]                 call_approve_StandardToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L7235]              assume null == 0;
[L7236]  CALL        call this := FreshRefGenerator__success();
[L3066]              havoc newRef;
[L3067]              assume Alloc[newRef] == false;
[L3068]              Alloc[newRef] := true;
[L3069]              assume newRef != null;
[L7236]  RET         call this := FreshRefGenerator__success();
[L7237]              assume now >= 0;
[L7238]              assume DType[this] == ECU;
[L7239]              assume msgvalue_MSG == 0;
[L7240]              gas := gas - 53000;
[L7241]  CALL        call ECU_ECU(this, msgsender_MSG, msgvalue_MSG);
[L1850]              havoc __exception;
[L1851]              revert := false;
[L1852]  COND FALSE  !(__exception)
[L1881]  CALL        call ECU_ECU__success(this, msgsender_MSG, msgvalue_MSG);
[L4152]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3258]              assume msgsender_MSG != null;
[L3259]              Balance[this] := 0;
[L3260]              totalSupply_ERC20Basic[this] := 0;
[L3274]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3275]  COND FALSE  !(revert)
[L4152]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4153]  COND TRUE   revert
[L1881]  RET         call ECU_ECU__success(this, msgsender_MSG, msgvalue_MSG);
[L1882]              assume !revert && gas >= 0;
[L7241]  RET         call ECU_ECU(this, msgsender_MSG, msgvalue_MSG);
[L7242]              assume !revert && gas >= 0;
[L7245]  CALL        call CorralChoice_ECU(this);
[L7029]              havoc msgsender_MSG;
[L7030]              havoc msgvalue_MSG;
[L7031]              havoc choice;
[L7032]              havoc __ret_0_owner;
[L7033]              havoc newOwner_s146;
[L7034]              havoc __ret_0_totalSupply;
[L7035]              havoc _owner_s352;
[L7036]              havoc balance_s352;
[L7037]              havoc _to_s340;
[L7038]              havoc _value_s340;
[L7039]              havoc __ret_0_transfer;
[L7040]              havoc arg745_s0;
[L7041]              havoc __ret_0_allowedAddresses;
[L7042]              havoc arg746_s0;
[L7043]              havoc __ret_0_lockedAddresses;
[L7044]              havoc __ret_0_locked;
[L7045]              havoc _addr_s218;
[L7046]              havoc _allowed_s218;
[L7047]              havoc _addr_s240;
[L7048]              havoc _locked_s240;
[L7049]              havoc _locked_s252;
[L7050]              havoc _addr_s282;
[L7051]              havoc __ret_0_canTransfer;
[L7052]              havoc _owner_s525;
[L7053]              havoc _spender_s525;
[L7054]              havoc remaining_s525;
[L7055]              havoc _from_s481;
[L7056]              havoc _to_s481;
[L7057]              havoc _value_s481;
[L7058]              havoc __ret_0_transferFrom;
[L7059]              havoc _spender_s509;
[L7060]              havoc _value_s509;
[L7061]              havoc __ret_0_approve;
[L7062]              havoc _spender_s566;
[L7063]              havoc _addedValue_s566;
[L7064]              havoc success_s566;
[L7065]              havoc _spender_s626;
[L7066]              havoc _subtractedValue_s626;
[L7067]              havoc success_s626;
[L7068]              havoc _value_s692;
[L7069]              havoc __ret_0_name;
[L7070]              havoc __ret_0_symbol;
[L7071]              havoc __ret_0_decimals;
[L7072]              havoc __ret_0_initialSupply;
[L7073]              havoc tmpNow;
[L7074]              havoc gas;
[L7075]              assume gas > 4000000 && gas <= 8000000;
[L7076]              tmpNow := now;
[L7077]              havoc now;
[L7078]              assume now > tmpNow;
[L7079]              assume msgsender_MSG != null;
[L7080]              assume DType[msgsender_MSG] != SafeMath;
[L7081]              assume DType[msgsender_MSG] != Ownable;
[L7082]              assume DType[msgsender_MSG] != ERC20Basic;
[L7083]              assume DType[msgsender_MSG] != BasicToken;
[L7084]              assume DType[msgsender_MSG] != ERC20;
[L7085]              assume DType[msgsender_MSG] != StandardToken;
[L7086]              assume DType[msgsender_MSG] != BurnableToken;
[L7087]              assume DType[msgsender_MSG] != ECU;
[L7088]              Alloc[msgsender_MSG] := true;
[L7089]  COND FALSE  !(choice == 22)
[L7095]  COND FALSE  !(choice == 21)
[L7101]  COND FALSE  !(choice == 20)
[L7107]  COND FALSE  !(choice == 19)
[L7113]  COND FALSE  !(choice == 18)
[L7120]  COND FALSE  !(choice == 17)
[L7126]  COND FALSE  !(choice == 16)
[L7132]  COND FALSE  !(choice == 15)
[L7138]  COND FALSE  !(choice == 14)
[L7144]  COND FALSE  !(choice == 13)
[L7150]  COND FALSE  !(choice == 12)
[L7156]  COND FALSE  !(choice == 11)
[L7162]  COND FALSE  !(choice == 10)
[L7168]  COND FALSE  !(choice == 9)
[L7175]  COND TRUE   choice == 8
[L7176]              gas := gas - 21000;
[L7177]  COND TRUE   gas >= 0
[L7178]              assume _value_s509 >= 0 && _value_s509 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7179]              assume msgvalue_MSG == 0;
[L7180]  CALL        call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s509, _value_s509);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != _spender_s509;
[L3]                 call_approve_StandardToken0 := true;
[L3]                 call_approve_StandardToken0 := false;
[L3]                 revert := revert_hold;
[L1407]              havoc __exception;
[L1408]              revert := false;
[L1409]  COND FALSE  !(__exception)
[L1438]  CALL        call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s509, _value_s509);
[L3853]              sum_allowed3[msgsender_MSG] := sum_allowed3[msgsender_MSG] - allowed_StandardToken[this][msgsender_MSG][_spender_s509];
[L3854]              allowed_StandardToken[this][msgsender_MSG][_spender_s509] := _value_s509;
[L3855]              sum_allowed3[msgsender_MSG] := sum_allowed3[msgsender_MSG] + allowed_StandardToken[this][msgsender_MSG][_spender_s509];
[L3856]              assert { :EventEmitted "Approval_StandardToken" } true;
[L3857]              __ret_0_ := true;
[L1438]  RET         call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s509, _value_s509);
[L1439]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((__ret_0_ == true && allowed_StandardToken[this][msgsender_MSG][_spender_s509] == _value_s509) && totalSupply_ERC20Basic[this] == old(totalSupply_ERC20Basic[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2])) && allowedAddresses_BasicToken[this] == old(allowedAddresses_BasicToken[this])) && lockedAddresses_BasicToken[this] == old(lockedAddresses_BasicToken[this])) && locked_BasicToken[this] == old(locked_BasicToken[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L3]                 revert := revert_hold;
[L7180]  RET         call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s509, _value_s509);
[L7245]  RET         call CorralChoice_ECU(this);

Loop:
[L7245]  CALL        call CorralChoice_ECU(this);
[L7029]              havoc msgsender_MSG;
[L7030]              havoc msgvalue_MSG;
[L7031]              havoc choice;
[L7032]              havoc __ret_0_owner;
[L7033]              havoc newOwner_s146;
[L7034]              havoc __ret_0_totalSupply;
[L7035]              havoc _owner_s352;
[L7036]              havoc balance_s352;
[L7037]              havoc _to_s340;
[L7038]              havoc _value_s340;
[L7039]              havoc __ret_0_transfer;
[L7040]              havoc arg745_s0;
[L7041]              havoc __ret_0_allowedAddresses;
[L7042]              havoc arg746_s0;
[L7043]              havoc __ret_0_lockedAddresses;
[L7044]              havoc __ret_0_locked;
[L7045]              havoc _addr_s218;
[L7046]              havoc _allowed_s218;
[L7047]              havoc _addr_s240;
[L7048]              havoc _locked_s240;
[L7049]              havoc _locked_s252;
[L7050]              havoc _addr_s282;
[L7051]              havoc __ret_0_canTransfer;
[L7052]              havoc _owner_s525;
[L7053]              havoc _spender_s525;
[L7054]              havoc remaining_s525;
[L7055]              havoc _from_s481;
[L7056]              havoc _to_s481;
[L7057]              havoc _value_s481;
[L7058]              havoc __ret_0_transferFrom;
[L7059]              havoc _spender_s509;
[L7060]              havoc _value_s509;
[L7061]              havoc __ret_0_approve;
[L7062]              havoc _spender_s566;
[L7063]              havoc _addedValue_s566;
[L7064]              havoc success_s566;
[L7065]              havoc _spender_s626;
[L7066]              havoc _subtractedValue_s626;
[L7067]              havoc success_s626;
[L7068]              havoc _value_s692;
[L7069]              havoc __ret_0_name;
[L7070]              havoc __ret_0_symbol;
[L7071]              havoc __ret_0_decimals;
[L7072]              havoc __ret_0_initialSupply;
[L7073]              havoc tmpNow;
[L7074]              havoc gas;
[L7075]              assume gas > 4000000 && gas <= 8000000;
[L7076]              tmpNow := now;
[L7077]              havoc now;
[L7078]              assume now > tmpNow;
[L7079]              assume msgsender_MSG != null;
[L7080]              assume DType[msgsender_MSG] != SafeMath;
[L7081]              assume DType[msgsender_MSG] != Ownable;
[L7082]              assume DType[msgsender_MSG] != ERC20Basic;
[L7083]              assume DType[msgsender_MSG] != BasicToken;
[L7084]              assume DType[msgsender_MSG] != ERC20;
[L7085]              assume DType[msgsender_MSG] != StandardToken;
[L7086]              assume DType[msgsender_MSG] != BurnableToken;
[L7087]              assume DType[msgsender_MSG] != ECU;
[L7088]              Alloc[msgsender_MSG] := true;
[L7089]  COND FALSE  !(choice == 22)
[L7095]  COND FALSE  !(choice == 21)
[L7101]  COND FALSE  !(choice == 20)
[L7107]  COND FALSE  !(choice == 19)
[L7113]  COND FALSE  !(choice == 18)
[L7120]  COND FALSE  !(choice == 17)
[L7126]  COND FALSE  !(choice == 16)
[L7132]  COND FALSE  !(choice == 15)
[L7138]  COND FALSE  !(choice == 14)
[L7144]  COND FALSE  !(choice == 13)
[L7150]  COND FALSE  !(choice == 12)
[L7156]  COND FALSE  !(choice == 11)
[L7162]  COND FALSE  !(choice == 10)
[L7168]  COND FALSE  !(choice == 9)
[L7175]  COND TRUE   choice == 8
[L7176]              gas := gas - 21000;
[L7177]  COND TRUE   gas >= 0
[L7178]              assume _value_s509 >= 0 && _value_s509 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7179]              assume msgvalue_MSG == 0;
[L7180]  CALL        call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s509, _value_s509);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != _spender_s509;
[L3]                 call_approve_StandardToken0 := true;
[L3]                 call_approve_StandardToken0 := false;
[L3]                 revert := revert_hold;
[L1407]              havoc __exception;
[L1408]              revert := false;
[L1409]  COND FALSE  !(__exception)
[L1438]  CALL        call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s509, _value_s509);
[L3853]              sum_allowed3[msgsender_MSG] := sum_allowed3[msgsender_MSG] - allowed_StandardToken[this][msgsender_MSG][_spender_s509];
[L3854]              allowed_StandardToken[this][msgsender_MSG][_spender_s509] := _value_s509;
[L3855]              sum_allowed3[msgsender_MSG] := sum_allowed3[msgsender_MSG] + allowed_StandardToken[this][msgsender_MSG][_spender_s509];
[L3856]              assert { :EventEmitted "Approval_StandardToken" } true;
[L3857]              __ret_0_ := true;
[L1438]  RET         call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s509, _value_s509);
[L1439]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((__ret_0_ == true && allowed_StandardToken[this][msgsender_MSG][_spender_s509] == _value_s509) && totalSupply_ERC20Basic[this] == old(totalSupply_ERC20Basic[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2])) && allowedAddresses_BasicToken[this] == old(allowedAddresses_BasicToken[this])) && lockedAddresses_BasicToken[this] == old(lockedAddresses_BasicToken[this])) && locked_BasicToken[this] == old(locked_BasicToken[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L3]                 revert := revert_hold;
[L7180]  RET         call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s509, _value_s509);
[L7245]  RET         call CorralChoice_ECU(this);

[2020-11-25 15:00:45,285 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 15:00:45,286 INFO  L82        PathProgramCache]: Analyzing trace with hash -1689699427, now seen corresponding path program 1 times
[2020-11-25 15:00:45,286 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 15:00:45,295 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 15:00:45,316 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 15:00:45,316 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 15:00:45,316 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 15:00:45,317 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 15:00:45,317 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 15:00:45,317 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 15:00:45,318 INFO  L87              Difference]: Start difference. First operand 3446 states and 3883 transitions. cyclomatic complexity: 439 Second operand 4 states.
[2020-11-25 15:00:45,929 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 15:00:45,929 INFO  L93              Difference]: Finished difference Result 4634 states and 5257 transitions.
[2020-11-25 15:00:45,929 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 15:00:45,929 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4634 states and 5257 transitions.
[2020-11-25 15:00:45,944 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-25 15:00:45,960 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4634 states to 4538 states and 5149 transitions.
[2020-11-25 15:00:45,960 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1315
[2020-11-25 15:00:45,962 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1315
[2020-11-25 15:00:45,962 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4538 states and 5149 transitions.
[2020-11-25 15:00:45,969 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 15:00:45,969 INFO  L728         BuchiCegarLoop]: Abstraction has 4538 states and 5149 transitions.
[2020-11-25 15:00:45,973 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4538 states and 5149 transitions.
[2020-11-25 15:00:46,008 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4538 to 3626.
[2020-11-25 15:00:46,009 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3626 states.
[2020-11-25 15:00:46,013 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3626 states to 3626 states and 3965 transitions.
[2020-11-25 15:00:46,013 INFO  L751         BuchiCegarLoop]: Abstraction has 3626 states and 3965 transitions.
[2020-11-25 15:00:46,013 INFO  L631         BuchiCegarLoop]: Abstraction has 3626 states and 3965 transitions.
[2020-11-25 15:00:46,013 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 15:00:46,013 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3626 states and 3965 transitions.
[2020-11-25 15:00:46,019 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 15:00:46,019 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 15:00:46,019 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 15:00:46,023 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 15:00:46,023 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_StandardToken0 := false;
[L3]                 call_approve_StandardToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L7235]              assume null == 0;
[L7236]  CALL        call this := FreshRefGenerator__success();
[L3066]              havoc newRef;
[L3067]              assume Alloc[newRef] == false;
[L3068]              Alloc[newRef] := true;
[L3069]              assume newRef != null;
[L7236]  RET         call this := FreshRefGenerator__success();
[L7237]              assume now >= 0;
[L7238]              assume DType[this] == ECU;
[L7239]              assume msgvalue_MSG == 0;
[L7240]              gas := gas - 53000;
[L7241]  CALL        call ECU_ECU(this, msgsender_MSG, msgvalue_MSG);
[L1850]              havoc __exception;
[L1851]              revert := false;
[L1852]  COND FALSE  !(__exception)
[L1881]  CALL        call ECU_ECU__success(this, msgsender_MSG, msgvalue_MSG);
[L4152]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3258]              assume msgsender_MSG != null;
[L3259]              Balance[this] := 0;
[L3260]              totalSupply_ERC20Basic[this] := 0;
[L3274]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3275]  COND FALSE  !(revert)
[L4152]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4153]  COND FALSE  !(revert)
[L4156]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3641]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3258]              assume msgsender_MSG != null;
[L3259]              Balance[this] := 0;
[L3260]              totalSupply_ERC20Basic[this] := 0;
[L3274]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3275]  COND FALSE  !(revert)
[L3641]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3642]  COND FALSE  !(revert)
[L3645]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3622]              assume msgsender_MSG != null;
[L3623]              Balance[this] := 0;
[L3645]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3646]  COND FALSE  !(revert)
[L4156]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4157]  COND FALSE  !(revert)
[L4160]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3197]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3180]              assume msgsender_MSG != null;
[L3181]              Balance[this] := 0;
[L3182]              owner_Ownable[this] := null;
[L3184]              owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3197]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3198]  COND FALSE  !(revert)
[L4160]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4161]  COND FALSE  !(revert)
[L4164]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3258]              assume msgsender_MSG != null;
[L3259]              Balance[this] := 0;
[L3260]              totalSupply_ERC20Basic[this] := 0;
[L3274]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3275]  COND FALSE  !(revert)
[L3336]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3337]  COND FALSE  !(revert)
[L3340]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3197]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3180]              assume msgsender_MSG != null;
[L3181]              Balance[this] := 0;
[L3182]              owner_Ownable[this] := null;
[L3184]              owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3197]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3198]  COND FALSE  !(revert)
[L3340]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3341]  COND FALSE  !(revert)
[L3344]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3308]              assume msgsender_MSG != null;
[L3309]              Balance[this] := 0;
[L3310]              balances_BasicToken[this] := zeroRefintArr();
[L3311]              sum_balances0[this] := 0;
[L3312]              allowedAddresses_BasicToken[this] := zeroRefboolArr();
[L3313]              lockedAddresses_BasicToken[this] := zeroRefboolArr();
[L3314]              locked_BasicToken[this] := true;
[L3344]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]  COND FALSE  !(revert)
[L4164]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4165]  COND FALSE  !(revert)
[L4168]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3697]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3258]              assume msgsender_MSG != null;
[L3259]              Balance[this] := 0;
[L3260]              totalSupply_ERC20Basic[this] := 0;
[L3274]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3275]  COND FALSE  !(revert)
[L3697]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3698]  COND FALSE  !(revert)
[L3701]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3641]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3258]              assume msgsender_MSG != null;
[L3259]              Balance[this] := 0;
[L3260]              totalSupply_ERC20Basic[this] := 0;
[L3274]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3275]  COND FALSE  !(revert)
[L3641]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3642]  COND FALSE  !(revert)
[L3645]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3622]              assume msgsender_MSG != null;
[L3623]              Balance[this] := 0;
[L3645]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3646]  COND FALSE  !(revert)
[L3701]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3702]  COND FALSE  !(revert)
[L3705]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3197]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3180]              assume msgsender_MSG != null;
[L3181]              Balance[this] := 0;
[L3182]              owner_Ownable[this] := null;
[L3184]              owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3197]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3198]  COND FALSE  !(revert)
[L3705]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3706]  COND FALSE  !(revert)
[L3709]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3258]              assume msgsender_MSG != null;
[L3259]              Balance[this] := 0;
[L3260]              totalSupply_ERC20Basic[this] := 0;
[L3274]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3275]  COND FALSE  !(revert)
[L3336]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3337]  COND FALSE  !(revert)
[L3340]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3197]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3180]              assume msgsender_MSG != null;
[L3181]              Balance[this] := 0;
[L3182]              owner_Ownable[this] := null;
[L3184]              owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3197]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3198]  COND FALSE  !(revert)
[L3340]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3341]  COND FALSE  !(revert)
[L3344]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3308]              assume msgsender_MSG != null;
[L3309]              Balance[this] := 0;
[L3310]              balances_BasicToken[this] := zeroRefintArr();
[L3311]              sum_balances0[this] := 0;
[L3312]              allowedAddresses_BasicToken[this] := zeroRefboolArr();
[L3313]              lockedAddresses_BasicToken[this] := zeroRefboolArr();
[L3314]              locked_BasicToken[this] := true;
[L3344]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]  COND FALSE  !(revert)
[L3709]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3710]  COND FALSE  !(revert)
[L3713]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3664]              assume msgsender_MSG != null;
[L3665]              Balance[this] := 0;
[L3666]              allowed_StandardToken[this] := zeroRefRefintArr();
[L3667]              sum_allowed3[this] := 0;
[L3713]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  COND FALSE  !(revert)
[L4168]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4169]  COND FALSE  !(revert)
[L4172]  CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3993]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3258]              assume msgsender_MSG != null;
[L3259]              Balance[this] := 0;
[L3260]              totalSupply_ERC20Basic[this] := 0;
[L3274]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3275]  COND FALSE  !(revert)
[L3993]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3994]  COND FALSE  !(revert)
[L3997]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3641]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3258]              assume msgsender_MSG != null;
[L3259]              Balance[this] := 0;
[L3260]              totalSupply_ERC20Basic[this] := 0;
[L3274]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3275]  COND FALSE  !(revert)
[L3641]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3642]  COND FALSE  !(revert)
[L3645]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3622]              assume msgsender_MSG != null;
[L3623]              Balance[this] := 0;
[L3645]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3646]  COND FALSE  !(revert)
[L3997]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3998]  COND FALSE  !(revert)
[L4001]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3197]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3180]              assume msgsender_MSG != null;
[L3181]              Balance[this] := 0;
[L3182]              owner_Ownable[this] := null;
[L3184]              owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3197]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3198]  COND FALSE  !(revert)
[L4001]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4002]  COND FALSE  !(revert)
[L4005]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3258]              assume msgsender_MSG != null;
[L3259]              Balance[this] := 0;
[L3260]              totalSupply_ERC20Basic[this] := 0;
[L3274]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3275]  COND FALSE  !(revert)
[L3336]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3337]  COND FALSE  !(revert)
[L3340]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3197]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3180]              assume msgsender_MSG != null;
[L3181]              Balance[this] := 0;
[L3182]              owner_Ownable[this] := null;
[L3184]              owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3197]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3198]  COND FALSE  !(revert)
[L3340]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3341]  COND FALSE  !(revert)
[L3344]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3308]              assume msgsender_MSG != null;
[L3309]              Balance[this] := 0;
[L3310]              balances_BasicToken[this] := zeroRefintArr();
[L3311]              sum_balances0[this] := 0;
[L3312]              allowedAddresses_BasicToken[this] := zeroRefboolArr();
[L3313]              lockedAddresses_BasicToken[this] := zeroRefboolArr();
[L3314]              locked_BasicToken[this] := true;
[L3344]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]  COND FALSE  !(revert)
[L4005]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4009]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3697]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3258]              assume msgsender_MSG != null;
[L3259]              Balance[this] := 0;
[L3260]              totalSupply_ERC20Basic[this] := 0;
[L3274]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3275]  COND FALSE  !(revert)
[L3697]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3698]  COND FALSE  !(revert)
[L3701]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3641]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3258]              assume msgsender_MSG != null;
[L3259]              Balance[this] := 0;
[L3260]              totalSupply_ERC20Basic[this] := 0;
[L3274]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3275]  COND FALSE  !(revert)
[L3641]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3642]  COND FALSE  !(revert)
[L3645]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3622]              assume msgsender_MSG != null;
[L3623]              Balance[this] := 0;
[L3645]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3646]  COND FALSE  !(revert)
[L3701]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3702]  COND FALSE  !(revert)
[L3705]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3197]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3180]              assume msgsender_MSG != null;
[L3181]              Balance[this] := 0;
[L3182]              owner_Ownable[this] := null;
[L3184]              owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3197]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3198]  COND FALSE  !(revert)
[L3705]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3706]  COND FALSE  !(revert)
[L3709]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3258]              assume msgsender_MSG != null;
[L3259]              Balance[this] := 0;
[L3260]              totalSupply_ERC20Basic[this] := 0;
[L3274]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3275]  COND FALSE  !(revert)
[L3336]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3337]  COND FALSE  !(revert)
[L3340]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3197]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3180]              assume msgsender_MSG != null;
[L3181]              Balance[this] := 0;
[L3182]              owner_Ownable[this] := null;
[L3184]              owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3197]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3198]  COND FALSE  !(revert)
[L3340]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3341]  COND FALSE  !(revert)
[L3344]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3308]              assume msgsender_MSG != null;
[L3309]              Balance[this] := 0;
[L3310]              balances_BasicToken[this] := zeroRefintArr();
[L3311]              sum_balances0[this] := 0;
[L3312]              allowedAddresses_BasicToken[this] := zeroRefboolArr();
[L3313]              lockedAddresses_BasicToken[this] := zeroRefboolArr();
[L3314]              locked_BasicToken[this] := true;
[L3344]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]  COND FALSE  !(revert)
[L3709]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3710]  COND FALSE  !(revert)
[L3713]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3664]              assume msgsender_MSG != null;
[L3665]              Balance[this] := 0;
[L3666]              allowed_StandardToken[this] := zeroRefRefintArr();
[L3667]              sum_allowed3[this] := 0;
[L3713]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  COND FALSE  !(revert)
[L4009]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4010]  COND FALSE  !(revert)
[L4013]  CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3958]              assume msgsender_MSG != null;
[L3959]              Balance[this] := 0;
[L4013]  RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4014]  COND FALSE  !(revert)
[L4172]  RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4173]  COND FALSE  !(revert)
[L4176]  CALL        call ECU_ECU_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4100]              assume msgsender_MSG != null;
[L4101]              Balance[this] := 0;
[L4102]              name_ECU[this] := -2027621617;
[L4103]              symbol_ECU[this] := 1342424742;
[L4104]              decimals_ECU[this] := 18;
[L4105]              __var_15 := decimals_ECU[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4106]              initialSupply_ECU[this] := 1000000000 * (nonlinearPow(10, decimals_ECU[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4108]              totalSupply_ERC20Basic[this] := initialSupply_ECU[this];
[L4109]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][19781008330533595146085782002824322930726574509];
[L4110]              balances_BasicToken[this][19781008330533595146085782002824322930726574509] := initialSupply_ECU[this];
[L4111]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][19781008330533595146085782002824322930726574509];
[L4112]              assert { :EventEmitted "Transfer_ECU" } true;
[L4113]              allowedAddresses_BasicToken[this][owner_Ownable[this]] := true;
[L4176]  RET         call ECU_ECU_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4177]  COND FALSE  !(revert)
[L1881]  RET         call ECU_ECU__success(this, msgsender_MSG, msgvalue_MSG);
[L1882]              assume !revert && gas >= 0;
[L7241]  RET         call ECU_ECU(this, msgsender_MSG, msgvalue_MSG);
[L7242]              assume !revert && gas >= 0;
[L7245]  CALL        call CorralChoice_ECU(this);
[L7029]              havoc msgsender_MSG;
[L7030]              havoc msgvalue_MSG;
[L7031]              havoc choice;
[L7032]              havoc __ret_0_owner;
[L7033]              havoc newOwner_s146;
[L7034]              havoc __ret_0_totalSupply;
[L7035]              havoc _owner_s352;
[L7036]              havoc balance_s352;
[L7037]              havoc _to_s340;
[L7038]              havoc _value_s340;
[L7039]              havoc __ret_0_transfer;
[L7040]              havoc arg745_s0;
[L7041]              havoc __ret_0_allowedAddresses;
[L7042]              havoc arg746_s0;
[L7043]              havoc __ret_0_lockedAddresses;
[L7044]              havoc __ret_0_locked;
[L7045]              havoc _addr_s218;
[L7046]              havoc _allowed_s218;
[L7047]              havoc _addr_s240;
[L7048]              havoc _locked_s240;
[L7049]              havoc _locked_s252;
[L7050]              havoc _addr_s282;
[L7051]              havoc __ret_0_canTransfer;
[L7052]              havoc _owner_s525;
[L7053]              havoc _spender_s525;
[L7054]              havoc remaining_s525;
[L7055]              havoc _from_s481;
[L7056]              havoc _to_s481;
[L7057]              havoc _value_s481;
[L7058]              havoc __ret_0_transferFrom;
[L7059]              havoc _spender_s509;
[L7060]              havoc _value_s509;
[L7061]              havoc __ret_0_approve;
[L7062]              havoc _spender_s566;
[L7063]              havoc _addedValue_s566;
[L7064]              havoc success_s566;
[L7065]              havoc _spender_s626;
[L7066]              havoc _subtractedValue_s626;
[L7067]              havoc success_s626;
[L7068]              havoc _value_s692;
[L7069]              havoc __ret_0_name;
[L7070]              havoc __ret_0_symbol;
[L7071]              havoc __ret_0_decimals;
[L7072]              havoc __ret_0_initialSupply;
[L7073]              havoc tmpNow;
[L7074]              havoc gas;
[L7075]              assume gas > 4000000 && gas <= 8000000;
[L7076]              tmpNow := now;
[L7077]              havoc now;
[L7078]              assume now > tmpNow;
[L7079]              assume msgsender_MSG != null;
[L7080]              assume DType[msgsender_MSG] != SafeMath;
[L7081]              assume DType[msgsender_MSG] != Ownable;
[L7082]              assume DType[msgsender_MSG] != ERC20Basic;
[L7083]              assume DType[msgsender_MSG] != BasicToken;
[L7084]              assume DType[msgsender_MSG] != ERC20;
[L7085]              assume DType[msgsender_MSG] != StandardToken;
[L7086]              assume DType[msgsender_MSG] != BurnableToken;
[L7087]              assume DType[msgsender_MSG] != ECU;
[L7088]              Alloc[msgsender_MSG] := true;
[L7089]  COND FALSE  !(choice == 22)
[L7095]  COND FALSE  !(choice == 21)
[L7101]  COND FALSE  !(choice == 20)
[L7107]  COND FALSE  !(choice == 19)
[L7113]  COND FALSE  !(choice == 18)
[L7120]  COND FALSE  !(choice == 17)
[L7126]  COND FALSE  !(choice == 16)
[L7132]  COND FALSE  !(choice == 15)
[L7138]  COND FALSE  !(choice == 14)
[L7144]  COND FALSE  !(choice == 13)
[L7150]  COND FALSE  !(choice == 12)
[L7156]  COND FALSE  !(choice == 11)
[L7162]  COND FALSE  !(choice == 10)
[L7168]  COND FALSE  !(choice == 9)
[L7175]  COND TRUE   choice == 8
[L7176]              gas := gas - 21000;
[L7177]  COND TRUE   gas >= 0
[L7178]              assume _value_s509 >= 0 && _value_s509 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7179]              assume msgvalue_MSG == 0;
[L7180]  CALL        call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s509, _value_s509);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != _spender_s509;
[L3]                 call_approve_StandardToken0 := true;
[L3]                 call_approve_StandardToken0 := false;
[L3]                 revert := revert_hold;
[L1407]              havoc __exception;
[L1408]              revert := false;
[L1409]  COND FALSE  !(__exception)
[L1438]  CALL        call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s509, _value_s509);
[L3853]              sum_allowed3[msgsender_MSG] := sum_allowed3[msgsender_MSG] - allowed_StandardToken[this][msgsender_MSG][_spender_s509];
[L3854]              allowed_StandardToken[this][msgsender_MSG][_spender_s509] := _value_s509;
[L3855]              sum_allowed3[msgsender_MSG] := sum_allowed3[msgsender_MSG] + allowed_StandardToken[this][msgsender_MSG][_spender_s509];
[L3856]              assert { :EventEmitted "Approval_StandardToken" } true;
[L3857]              __ret_0_ := true;
[L1438]  RET         call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s509, _value_s509);
[L1439]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((__ret_0_ == true && allowed_StandardToken[this][msgsender_MSG][_spender_s509] == _value_s509) && totalSupply_ERC20Basic[this] == old(totalSupply_ERC20Basic[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2])) && allowedAddresses_BasicToken[this] == old(allowedAddresses_BasicToken[this])) && lockedAddresses_BasicToken[this] == old(lockedAddresses_BasicToken[this])) && locked_BasicToken[this] == old(locked_BasicToken[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L3]                 revert := revert_hold;
[L7180]  RET         call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s509, _value_s509);
[L7245]  RET         call CorralChoice_ECU(this);

Loop:
[L7245]  CALL        call CorralChoice_ECU(this);
[L7029]              havoc msgsender_MSG;
[L7030]              havoc msgvalue_MSG;
[L7031]              havoc choice;
[L7032]              havoc __ret_0_owner;
[L7033]              havoc newOwner_s146;
[L7034]              havoc __ret_0_totalSupply;
[L7035]              havoc _owner_s352;
[L7036]              havoc balance_s352;
[L7037]              havoc _to_s340;
[L7038]              havoc _value_s340;
[L7039]              havoc __ret_0_transfer;
[L7040]              havoc arg745_s0;
[L7041]              havoc __ret_0_allowedAddresses;
[L7042]              havoc arg746_s0;
[L7043]              havoc __ret_0_lockedAddresses;
[L7044]              havoc __ret_0_locked;
[L7045]              havoc _addr_s218;
[L7046]              havoc _allowed_s218;
[L7047]              havoc _addr_s240;
[L7048]              havoc _locked_s240;
[L7049]              havoc _locked_s252;
[L7050]              havoc _addr_s282;
[L7051]              havoc __ret_0_canTransfer;
[L7052]              havoc _owner_s525;
[L7053]              havoc _spender_s525;
[L7054]              havoc remaining_s525;
[L7055]              havoc _from_s481;
[L7056]              havoc _to_s481;
[L7057]              havoc _value_s481;
[L7058]              havoc __ret_0_transferFrom;
[L7059]              havoc _spender_s509;
[L7060]              havoc _value_s509;
[L7061]              havoc __ret_0_approve;
[L7062]              havoc _spender_s566;
[L7063]              havoc _addedValue_s566;
[L7064]              havoc success_s566;
[L7065]              havoc _spender_s626;
[L7066]              havoc _subtractedValue_s626;
[L7067]              havoc success_s626;
[L7068]              havoc _value_s692;
[L7069]              havoc __ret_0_name;
[L7070]              havoc __ret_0_symbol;
[L7071]              havoc __ret_0_decimals;
[L7072]              havoc __ret_0_initialSupply;
[L7073]              havoc tmpNow;
[L7074]              havoc gas;
[L7075]              assume gas > 4000000 && gas <= 8000000;
[L7076]              tmpNow := now;
[L7077]              havoc now;
[L7078]              assume now > tmpNow;
[L7079]              assume msgsender_MSG != null;
[L7080]              assume DType[msgsender_MSG] != SafeMath;
[L7081]              assume DType[msgsender_MSG] != Ownable;
[L7082]              assume DType[msgsender_MSG] != ERC20Basic;
[L7083]              assume DType[msgsender_MSG] != BasicToken;
[L7084]              assume DType[msgsender_MSG] != ERC20;
[L7085]              assume DType[msgsender_MSG] != StandardToken;
[L7086]              assume DType[msgsender_MSG] != BurnableToken;
[L7087]              assume DType[msgsender_MSG] != ECU;
[L7088]              Alloc[msgsender_MSG] := true;
[L7089]  COND FALSE  !(choice == 22)
[L7095]  COND FALSE  !(choice == 21)
[L7101]  COND FALSE  !(choice == 20)
[L7107]  COND FALSE  !(choice == 19)
[L7113]  COND FALSE  !(choice == 18)
[L7120]  COND FALSE  !(choice == 17)
[L7126]  COND FALSE  !(choice == 16)
[L7132]  COND FALSE  !(choice == 15)
[L7138]  COND FALSE  !(choice == 14)
[L7144]  COND FALSE  !(choice == 13)
[L7150]  COND FALSE  !(choice == 12)
[L7156]  COND FALSE  !(choice == 11)
[L7162]  COND FALSE  !(choice == 10)
[L7168]  COND FALSE  !(choice == 9)
[L7175]  COND TRUE   choice == 8
[L7176]              gas := gas - 21000;
[L7177]  COND TRUE   gas >= 0
[L7178]              assume _value_s509 >= 0 && _value_s509 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7179]              assume msgvalue_MSG == 0;
[L7180]  CALL        call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s509, _value_s509);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != _spender_s509;
[L3]                 call_approve_StandardToken0 := true;
[L3]                 call_approve_StandardToken0 := false;
[L3]                 revert := revert_hold;
[L1407]              havoc __exception;
[L1408]              revert := false;
[L1409]  COND FALSE  !(__exception)
[L1438]  CALL        call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s509, _value_s509);
[L3853]              sum_allowed3[msgsender_MSG] := sum_allowed3[msgsender_MSG] - allowed_StandardToken[this][msgsender_MSG][_spender_s509];
[L3854]              allowed_StandardToken[this][msgsender_MSG][_spender_s509] := _value_s509;
[L3855]              sum_allowed3[msgsender_MSG] := sum_allowed3[msgsender_MSG] + allowed_StandardToken[this][msgsender_MSG][_spender_s509];
[L3856]              assert { :EventEmitted "Approval_StandardToken" } true;
[L3857]              __ret_0_ := true;
[L1438]  RET         call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s509, _value_s509);
[L1439]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((__ret_0_ == true && allowed_StandardToken[this][msgsender_MSG][_spender_s509] == _value_s509) && totalSupply_ERC20Basic[this] == old(totalSupply_ERC20Basic[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2])) && allowedAddresses_BasicToken[this] == old(allowedAddresses_BasicToken[this])) && lockedAddresses_BasicToken[this] == old(lockedAddresses_BasicToken[this])) && locked_BasicToken[this] == old(locked_BasicToken[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L3]                 revert := revert_hold;
[L7180]  RET         call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s509, _value_s509);
[L7245]  RET         call CorralChoice_ECU(this);

[2020-11-25 15:00:46,029 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 15:00:46,030 INFO  L82        PathProgramCache]: Analyzing trace with hash -425476239, now seen corresponding path program 1 times
[2020-11-25 15:00:46,030 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 15:00:46,109 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 15:00:46,437 INFO  L134       CoverageAnalysis]: Checked inductivity of 1312 backedges. 7 proven. 0 refuted. 0 times theorem prover too weak. 1305 trivial. 0 not checked.
[2020-11-25 15:00:46,437 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 15:00:46,438 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [14] imperfect sequences [] total 14
[2020-11-25 15:00:46,439 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 15:00:46,440 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 15 interpolants.
[2020-11-25 15:00:46,440 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=29, Invalid=181, Unknown=0, NotChecked=0, Total=210
[2020-11-25 15:00:46,440 INFO  L87              Difference]: Start difference. First operand 3626 states and 3965 transitions. cyclomatic complexity: 341 Second operand 15 states.
[2020-11-25 15:00:48,588 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 15:00:48,589 INFO  L93              Difference]: Finished difference Result 3789 states and 4164 transitions.
[2020-11-25 15:00:48,589 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 17 states. 
[2020-11-25 15:00:48,589 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3789 states and 4164 transitions.
[2020-11-25 15:00:48,600 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 12
[2020-11-25 15:00:48,614 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3789 states to 3789 states and 4164 transitions.
[2020-11-25 15:00:48,614 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1178
[2020-11-25 15:00:48,616 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1178
[2020-11-25 15:00:48,616 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3789 states and 4164 transitions.
[2020-11-25 15:00:48,621 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 15:00:48,621 INFO  L728         BuchiCegarLoop]: Abstraction has 3789 states and 4164 transitions.
[2020-11-25 15:00:48,625 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3789 states and 4164 transitions.
[2020-11-25 15:00:48,659 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3789 to 3750.
[2020-11-25 15:00:48,659 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3750 states.
[2020-11-25 15:00:48,664 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3750 states to 3750 states and 4111 transitions.
[2020-11-25 15:00:48,664 INFO  L751         BuchiCegarLoop]: Abstraction has 3750 states and 4111 transitions.
[2020-11-25 15:00:48,664 INFO  L631         BuchiCegarLoop]: Abstraction has 3750 states and 4111 transitions.
[2020-11-25 15:00:48,664 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 15:00:48,664 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3750 states and 4111 transitions.
[2020-11-25 15:00:48,670 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-25 15:00:48,670 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 15:00:48,670 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 15:00:48,673 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 15:00:48,673 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_StandardToken0 := false;
[L3]                 call_approve_StandardToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L7235]              assume null == 0;
[L7236]  CALL        call this := FreshRefGenerator__success();
[L3066]              havoc newRef;
[L3067]              assume Alloc[newRef] == false;
[L3068]              Alloc[newRef] := true;
[L3069]              assume newRef != null;
[L7236]  RET         call this := FreshRefGenerator__success();
[L7237]              assume now >= 0;
[L7238]              assume DType[this] == ECU;
[L7239]              assume msgvalue_MSG == 0;
[L7240]              gas := gas - 53000;
[L7241]  CALL        call ECU_ECU(this, msgsender_MSG, msgvalue_MSG);
[L1850]              havoc __exception;
[L1851]              revert := false;
[L1852]  COND TRUE   __exception
[L1853]              __tmp__Balance := Balance;
[L1854]              __tmp__DType := DType;
[L1855]              __tmp__Alloc := Alloc;
[L1856]              __tmp__balance_ADDR := balance_ADDR;
[L1857]              __tmp__M_Ref_int := M_Ref_int;
[L1858]              __tmp__sum_balances0 := sum_balances0;
[L1859]              __tmp__M_Ref_bool := M_Ref_bool;
[L1860]              __tmp__sum_allowedAddresses1 := sum_allowedAddresses1;
[L1861]              __tmp__sum_lockedAddresses2 := sum_lockedAddresses2;
[L1862]              __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L1863]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1864]              __tmp__sum_allowed3 := sum_allowed3;
[L1865]              __tmp__Length := Length;
[L1866]              __tmp__now := now;
[L1867]              __tmp__owner_Ownable := owner_Ownable;
[L1868]              __tmp__totalSupply_ERC20Basic := totalSupply_ERC20Basic;
[L1869]              __tmp__balances_BasicToken := balances_BasicToken;
[L1870]              __tmp__allowedAddresses_BasicToken := allowedAddresses_BasicToken;
[L1871]              __tmp__lockedAddresses_BasicToken := lockedAddresses_BasicToken;
[L1872]              __tmp__locked_BasicToken := locked_BasicToken;
[L1873]              __tmp__allowed_StandardToken := allowed_StandardToken;
[L1874]              __tmp__name_ECU := name_ECU;
[L1875]              __tmp__symbol_ECU := symbol_ECU;
[L1876]              __tmp__decimals_ECU := decimals_ECU;
[L1877]              __tmp__initialSupply_ECU := initialSupply_ECU;
[L1878]  CALL        call ECU_ECU__fail(this, msgsender_MSG, msgvalue_MSG);
[L4119]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3266]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3249]              assume msgsender_MSG != null;
[L3250]              __tmp__Balance[this] := 0;
[L3251]              __tmp__totalSupply_ERC20Basic[this] := 0;
[L3266]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3267]  COND FALSE  !(revert)
[L4119]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L4120]  COND FALSE  !(revert)
[L4123]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3629]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3266]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3249]              assume msgsender_MSG != null;
[L3250]              __tmp__Balance[this] := 0;
[L3251]              __tmp__totalSupply_ERC20Basic[this] := 0;
[L3266]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3267]  COND FALSE  !(revert)
[L3629]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3630]  COND FALSE  !(revert)
[L3633]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3614]              assume msgsender_MSG != null;
[L3615]              __tmp__Balance[this] := 0;
[L3633]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3634]  COND FALSE  !(revert)
[L4123]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4124]  COND FALSE  !(revert)
[L4127]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3189]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3170]              assume msgsender_MSG != null;
[L3171]              __tmp__Balance[this] := 0;
[L3172]              __tmp__owner_Ownable[this] := null;
[L3174]              __tmp__owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3189]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3190]  COND FALSE  !(revert)
[L4127]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4128]  COND FALSE  !(revert)
[L4131]  CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3320]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3266]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3249]              assume msgsender_MSG != null;
[L3250]              __tmp__Balance[this] := 0;
[L3251]              __tmp__totalSupply_ERC20Basic[this] := 0;
[L3266]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3267]  COND FALSE  !(revert)
[L3320]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3321]  COND FALSE  !(revert)
[L3324]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3189]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3170]              assume msgsender_MSG != null;
[L3171]              __tmp__Balance[this] := 0;
[L3172]              __tmp__owner_Ownable[this] := null;
[L3174]              __tmp__owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3189]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3190]  COND FALSE  !(revert)
[L3324]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3325]  COND FALSE  !(revert)
[L3328]  CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3295]              assume msgsender_MSG != null;
[L3296]              __tmp__Balance[this] := 0;
[L3297]              __tmp__balances_BasicToken[this] := zeroRefintArr();
[L3298]              __tmp__sum_balances0[this] := 0;
[L3299]              __tmp__allowedAddresses_BasicToken[this] := zeroRefboolArr();
[L3300]              __tmp__lockedAddresses_BasicToken[this] := zeroRefboolArr();
[L3301]              __tmp__locked_BasicToken[this] := true;
[L3328]  RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3329]  COND FALSE  !(revert)
[L4131]  RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L4132]  COND FALSE  !(revert)
[L4135]  CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3673]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3266]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3249]              assume msgsender_MSG != null;
[L3250]              __tmp__Balance[this] := 0;
[L3251]              __tmp__totalSupply_ERC20Basic[this] := 0;
[L3266]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3267]  COND FALSE  !(revert)
[L3673]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3674]  COND FALSE  !(revert)
[L3677]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3629]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3266]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3249]              assume msgsender_MSG != null;
[L3250]              __tmp__Balance[this] := 0;
[L3251]              __tmp__totalSupply_ERC20Basic[this] := 0;
[L3266]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3267]  COND FALSE  !(revert)
[L3629]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3630]  COND FALSE  !(revert)
[L3633]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3614]              assume msgsender_MSG != null;
[L3615]              __tmp__Balance[this] := 0;
[L3633]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3634]  COND FALSE  !(revert)
[L3677]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3678]  COND FALSE  !(revert)
[L3681]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3189]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3170]              assume msgsender_MSG != null;
[L3171]              __tmp__Balance[this] := 0;
[L3172]              __tmp__owner_Ownable[this] := null;
[L3174]              __tmp__owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3189]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3190]  COND FALSE  !(revert)
[L3681]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3682]  COND FALSE  !(revert)
[L3685]  CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3320]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3266]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3249]              assume msgsender_MSG != null;
[L3250]              __tmp__Balance[this] := 0;
[L3251]              __tmp__totalSupply_ERC20Basic[this] := 0;
[L3266]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3267]  COND FALSE  !(revert)
[L3320]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3321]  COND FALSE  !(revert)
[L3324]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3189]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3170]              assume msgsender_MSG != null;
[L3171]              __tmp__Balance[this] := 0;
[L3172]              __tmp__owner_Ownable[this] := null;
[L3174]              __tmp__owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3189]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3190]  COND FALSE  !(revert)
[L3324]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3325]  COND FALSE  !(revert)
[L3328]  CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3295]              assume msgsender_MSG != null;
[L3296]              __tmp__Balance[this] := 0;
[L3297]              __tmp__balances_BasicToken[this] := zeroRefintArr();
[L3298]              __tmp__sum_balances0[this] := 0;
[L3299]              __tmp__allowedAddresses_BasicToken[this] := zeroRefboolArr();
[L3300]              __tmp__lockedAddresses_BasicToken[this] := zeroRefboolArr();
[L3301]              __tmp__locked_BasicToken[this] := true;
[L3328]  RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3329]  COND FALSE  !(revert)
[L3685]  RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3686]  COND FALSE  !(revert)
[L3689]  CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3654]              assume msgsender_MSG != null;
[L3655]              __tmp__Balance[this] := 0;
[L3656]              __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L3657]              __tmp__sum_allowed3[this] := 0;
[L3689]  RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3690]  COND FALSE  !(revert)
[L4135]  RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L4136]  COND FALSE  !(revert)
[L4139]  CALL        call BurnableToken_BurnableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3965]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3266]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3249]              assume msgsender_MSG != null;
[L3250]              __tmp__Balance[this] := 0;
[L3251]              __tmp__totalSupply_ERC20Basic[this] := 0;
[L3266]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3267]  COND FALSE  !(revert)
[L3965]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3966]  COND FALSE  !(revert)
[L3969]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3629]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3266]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3249]              assume msgsender_MSG != null;
[L3250]              __tmp__Balance[this] := 0;
[L3251]              __tmp__totalSupply_ERC20Basic[this] := 0;
[L3266]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3267]  COND FALSE  !(revert)
[L3629]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3630]  COND FALSE  !(revert)
[L3633]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3614]              assume msgsender_MSG != null;
[L3615]              __tmp__Balance[this] := 0;
[L3633]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3634]  COND FALSE  !(revert)
[L3969]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3970]  COND FALSE  !(revert)
[L3973]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3189]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3170]              assume msgsender_MSG != null;
[L3171]              __tmp__Balance[this] := 0;
[L3172]              __tmp__owner_Ownable[this] := null;
[L3174]              __tmp__owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3189]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3190]  COND FALSE  !(revert)
[L3973]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3974]  COND FALSE  !(revert)
[L3977]  CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3320]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3266]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3249]              assume msgsender_MSG != null;
[L3250]              __tmp__Balance[this] := 0;
[L3251]              __tmp__totalSupply_ERC20Basic[this] := 0;
[L3266]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3267]  COND FALSE  !(revert)
[L3320]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3321]  COND FALSE  !(revert)
[L3324]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3189]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3170]              assume msgsender_MSG != null;
[L3171]              __tmp__Balance[this] := 0;
[L3172]              __tmp__owner_Ownable[this] := null;
[L3174]              __tmp__owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3189]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3190]  COND FALSE  !(revert)
[L3324]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3325]  COND FALSE  !(revert)
[L3328]  CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3295]              assume msgsender_MSG != null;
[L3296]              __tmp__Balance[this] := 0;
[L3297]              __tmp__balances_BasicToken[this] := zeroRefintArr();
[L3298]              __tmp__sum_balances0[this] := 0;
[L3299]              __tmp__allowedAddresses_BasicToken[this] := zeroRefboolArr();
[L3300]              __tmp__lockedAddresses_BasicToken[this] := zeroRefboolArr();
[L3301]              __tmp__locked_BasicToken[this] := true;
[L3328]  RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3329]  COND FALSE  !(revert)
[L3977]  RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3978]  COND FALSE  !(revert)
[L3981]  CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3673]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3266]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3249]              assume msgsender_MSG != null;
[L3250]              __tmp__Balance[this] := 0;
[L3251]              __tmp__totalSupply_ERC20Basic[this] := 0;
[L3266]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3267]  COND FALSE  !(revert)
[L3673]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3674]  COND FALSE  !(revert)
[L3677]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3629]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3266]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3249]              assume msgsender_MSG != null;
[L3250]              __tmp__Balance[this] := 0;
[L3251]              __tmp__totalSupply_ERC20Basic[this] := 0;
[L3266]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3267]  COND FALSE  !(revert)
[L3629]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3630]  COND FALSE  !(revert)
[L3633]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3614]              assume msgsender_MSG != null;
[L3615]              __tmp__Balance[this] := 0;
[L3633]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3634]  COND FALSE  !(revert)
[L3677]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3678]  COND FALSE  !(revert)
[L3681]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3189]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3170]              assume msgsender_MSG != null;
[L3171]              __tmp__Balance[this] := 0;
[L3172]              __tmp__owner_Ownable[this] := null;
[L3174]              __tmp__owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3189]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3190]  COND FALSE  !(revert)
[L3681]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3682]  COND FALSE  !(revert)
[L3685]  CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3320]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3266]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3249]              assume msgsender_MSG != null;
[L3250]              __tmp__Balance[this] := 0;
[L3251]              __tmp__totalSupply_ERC20Basic[this] := 0;
[L3266]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3267]  COND FALSE  !(revert)
[L3320]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3321]  COND FALSE  !(revert)
[L3324]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3189]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3170]              assume msgsender_MSG != null;
[L3171]              __tmp__Balance[this] := 0;
[L3172]              __tmp__owner_Ownable[this] := null;
[L3174]              __tmp__owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3189]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3190]  COND FALSE  !(revert)
[L3324]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3325]  COND FALSE  !(revert)
[L3328]  CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3295]              assume msgsender_MSG != null;
[L3296]              __tmp__Balance[this] := 0;
[L3297]              __tmp__balances_BasicToken[this] := zeroRefintArr();
[L3298]              __tmp__sum_balances0[this] := 0;
[L3299]              __tmp__allowedAddresses_BasicToken[this] := zeroRefboolArr();
[L3300]              __tmp__lockedAddresses_BasicToken[this] := zeroRefboolArr();
[L3301]              __tmp__locked_BasicToken[this] := true;
[L3328]  RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3329]  COND FALSE  !(revert)
[L3685]  RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3686]  COND FALSE  !(revert)
[L3689]  CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3654]              assume msgsender_MSG != null;
[L3655]              __tmp__Balance[this] := 0;
[L3656]              __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L3657]              __tmp__sum_allowed3[this] := 0;
[L3689]  RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3690]  COND FALSE  !(revert)
[L3981]  RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3982]  COND FALSE  !(revert)
[L3985]  CALL        call BurnableToken_BurnableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3950]              assume msgsender_MSG != null;
[L3951]              __tmp__Balance[this] := 0;
[L3985]  RET         call BurnableToken_BurnableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3986]  COND FALSE  !(revert)
[L4139]  RET         call BurnableToken_BurnableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L4140]  COND FALSE  !(revert)
[L4143]  CALL        call ECU_ECU_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4081]              assume msgsender_MSG != null;
[L4082]              __tmp__Balance[this] := 0;
[L4083]              __tmp__name_ECU[this] := -2027621617;
[L4084]              __tmp__symbol_ECU[this] := 1342424742;
[L4085]              __tmp__decimals_ECU[this] := 18;
[L4086]              __var_15 := __tmp__decimals_ECU[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4087]              __tmp__initialSupply_ECU[this] := 1000000000 * (nonlinearPow(10, __tmp__decimals_ECU[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4089]              __tmp__totalSupply_ERC20Basic[this] := __tmp__initialSupply_ECU[this];
[L4090]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_BasicToken[this][19781008330533595146085782002824322930726574509];
[L4091]              __tmp__balances_BasicToken[this][19781008330533595146085782002824322930726574509] := __tmp__initialSupply_ECU[this];
[L4092]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_BasicToken[this][19781008330533595146085782002824322930726574509];
[L4093]              __tmp__allowedAddresses_BasicToken[this][__tmp__owner_Ownable[this]] := true;
[L4143]  RET         call ECU_ECU_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4144]  COND FALSE  !(revert)
[L1878]  RET         call ECU_ECU__fail(this, msgsender_MSG, msgvalue_MSG);
[L1879]              assume revert || gas < 0;
[L7241]  RET         call ECU_ECU(this, msgsender_MSG, msgvalue_MSG);
[L7242]              assume !revert && gas >= 0;
[L7245]  CALL        call CorralChoice_ECU(this);
[L7029]              havoc msgsender_MSG;
[L7030]              havoc msgvalue_MSG;
[L7031]              havoc choice;
[L7032]              havoc __ret_0_owner;
[L7033]              havoc newOwner_s146;
[L7034]              havoc __ret_0_totalSupply;
[L7035]              havoc _owner_s352;
[L7036]              havoc balance_s352;
[L7037]              havoc _to_s340;
[L7038]              havoc _value_s340;
[L7039]              havoc __ret_0_transfer;
[L7040]              havoc arg745_s0;
[L7041]              havoc __ret_0_allowedAddresses;
[L7042]              havoc arg746_s0;
[L7043]              havoc __ret_0_lockedAddresses;
[L7044]              havoc __ret_0_locked;
[L7045]              havoc _addr_s218;
[L7046]              havoc _allowed_s218;
[L7047]              havoc _addr_s240;
[L7048]              havoc _locked_s240;
[L7049]              havoc _locked_s252;
[L7050]              havoc _addr_s282;
[L7051]              havoc __ret_0_canTransfer;
[L7052]              havoc _owner_s525;
[L7053]              havoc _spender_s525;
[L7054]              havoc remaining_s525;
[L7055]              havoc _from_s481;
[L7056]              havoc _to_s481;
[L7057]              havoc _value_s481;
[L7058]              havoc __ret_0_transferFrom;
[L7059]              havoc _spender_s509;
[L7060]              havoc _value_s509;
[L7061]              havoc __ret_0_approve;
[L7062]              havoc _spender_s566;
[L7063]              havoc _addedValue_s566;
[L7064]              havoc success_s566;
[L7065]              havoc _spender_s626;
[L7066]              havoc _subtractedValue_s626;
[L7067]              havoc success_s626;
[L7068]              havoc _value_s692;
[L7069]              havoc __ret_0_name;
[L7070]              havoc __ret_0_symbol;
[L7071]              havoc __ret_0_decimals;
[L7072]              havoc __ret_0_initialSupply;
[L7073]              havoc tmpNow;
[L7074]              havoc gas;
[L7075]              assume gas > 4000000 && gas <= 8000000;
[L7076]              tmpNow := now;
[L7077]              havoc now;
[L7078]              assume now > tmpNow;
[L7079]              assume msgsender_MSG != null;
[L7080]              assume DType[msgsender_MSG] != SafeMath;
[L7081]              assume DType[msgsender_MSG] != Ownable;
[L7082]              assume DType[msgsender_MSG] != ERC20Basic;
[L7083]              assume DType[msgsender_MSG] != BasicToken;
[L7084]              assume DType[msgsender_MSG] != ERC20;
[L7085]              assume DType[msgsender_MSG] != StandardToken;
[L7086]              assume DType[msgsender_MSG] != BurnableToken;
[L7087]              assume DType[msgsender_MSG] != ECU;
[L7088]              Alloc[msgsender_MSG] := true;
[L7089]  COND FALSE  !(choice == 22)
[L7095]  COND FALSE  !(choice == 21)
[L7101]  COND FALSE  !(choice == 20)
[L7107]  COND FALSE  !(choice == 19)
[L7113]  COND FALSE  !(choice == 18)
[L7120]  COND FALSE  !(choice == 17)
[L7126]  COND FALSE  !(choice == 16)
[L7132]  COND FALSE  !(choice == 15)
[L7138]  COND FALSE  !(choice == 14)
[L7144]  COND FALSE  !(choice == 13)
[L7150]  COND FALSE  !(choice == 12)
[L7156]  COND FALSE  !(choice == 11)
[L7162]  COND FALSE  !(choice == 10)
[L7168]  COND FALSE  !(choice == 9)
[L7175]  COND TRUE   choice == 8
[L7176]              gas := gas - 21000;
[L7177]  COND TRUE   gas >= 0
[L7178]              assume _value_s509 >= 0 && _value_s509 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7179]              assume msgvalue_MSG == 0;
[L7180]  CALL        call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s509, _value_s509);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != _spender_s509;
[L3]                 call_approve_StandardToken0 := true;
[L3]                 call_approve_StandardToken0 := false;
[L3]                 revert := revert_hold;
[L1407]              havoc __exception;
[L1408]              revert := false;
[L1409]  COND FALSE  !(__exception)
[L1438]  CALL        call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s509, _value_s509);
[L3853]              sum_allowed3[msgsender_MSG] := sum_allowed3[msgsender_MSG] - allowed_StandardToken[this][msgsender_MSG][_spender_s509];
[L3854]              allowed_StandardToken[this][msgsender_MSG][_spender_s509] := _value_s509;
[L3855]              sum_allowed3[msgsender_MSG] := sum_allowed3[msgsender_MSG] + allowed_StandardToken[this][msgsender_MSG][_spender_s509];
[L3856]              assert { :EventEmitted "Approval_StandardToken" } true;
[L3857]              __ret_0_ := true;
[L1438]  RET         call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s509, _value_s509);
[L1439]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((__ret_0_ == true && allowed_StandardToken[this][msgsender_MSG][_spender_s509] == _value_s509) && totalSupply_ERC20Basic[this] == old(totalSupply_ERC20Basic[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2])) && allowedAddresses_BasicToken[this] == old(allowedAddresses_BasicToken[this])) && lockedAddresses_BasicToken[this] == old(lockedAddresses_BasicToken[this])) && locked_BasicToken[this] == old(locked_BasicToken[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L3]                 revert := revert_hold;
[L7180]  RET         call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s509, _value_s509);
[L7245]  RET         call CorralChoice_ECU(this);

Loop:
[L7245]  CALL        call CorralChoice_ECU(this);
[L7029]              havoc msgsender_MSG;
[L7030]              havoc msgvalue_MSG;
[L7031]              havoc choice;
[L7032]              havoc __ret_0_owner;
[L7033]              havoc newOwner_s146;
[L7034]              havoc __ret_0_totalSupply;
[L7035]              havoc _owner_s352;
[L7036]              havoc balance_s352;
[L7037]              havoc _to_s340;
[L7038]              havoc _value_s340;
[L7039]              havoc __ret_0_transfer;
[L7040]              havoc arg745_s0;
[L7041]              havoc __ret_0_allowedAddresses;
[L7042]              havoc arg746_s0;
[L7043]              havoc __ret_0_lockedAddresses;
[L7044]              havoc __ret_0_locked;
[L7045]              havoc _addr_s218;
[L7046]              havoc _allowed_s218;
[L7047]              havoc _addr_s240;
[L7048]              havoc _locked_s240;
[L7049]              havoc _locked_s252;
[L7050]              havoc _addr_s282;
[L7051]              havoc __ret_0_canTransfer;
[L7052]              havoc _owner_s525;
[L7053]              havoc _spender_s525;
[L7054]              havoc remaining_s525;
[L7055]              havoc _from_s481;
[L7056]              havoc _to_s481;
[L7057]              havoc _value_s481;
[L7058]              havoc __ret_0_transferFrom;
[L7059]              havoc _spender_s509;
[L7060]              havoc _value_s509;
[L7061]              havoc __ret_0_approve;
[L7062]              havoc _spender_s566;
[L7063]              havoc _addedValue_s566;
[L7064]              havoc success_s566;
[L7065]              havoc _spender_s626;
[L7066]              havoc _subtractedValue_s626;
[L7067]              havoc success_s626;
[L7068]              havoc _value_s692;
[L7069]              havoc __ret_0_name;
[L7070]              havoc __ret_0_symbol;
[L7071]              havoc __ret_0_decimals;
[L7072]              havoc __ret_0_initialSupply;
[L7073]              havoc tmpNow;
[L7074]              havoc gas;
[L7075]              assume gas > 4000000 && gas <= 8000000;
[L7076]              tmpNow := now;
[L7077]              havoc now;
[L7078]              assume now > tmpNow;
[L7079]              assume msgsender_MSG != null;
[L7080]              assume DType[msgsender_MSG] != SafeMath;
[L7081]              assume DType[msgsender_MSG] != Ownable;
[L7082]              assume DType[msgsender_MSG] != ERC20Basic;
[L7083]              assume DType[msgsender_MSG] != BasicToken;
[L7084]              assume DType[msgsender_MSG] != ERC20;
[L7085]              assume DType[msgsender_MSG] != StandardToken;
[L7086]              assume DType[msgsender_MSG] != BurnableToken;
[L7087]              assume DType[msgsender_MSG] != ECU;
[L7088]              Alloc[msgsender_MSG] := true;
[L7089]  COND FALSE  !(choice == 22)
[L7095]  COND FALSE  !(choice == 21)
[L7101]  COND FALSE  !(choice == 20)
[L7107]  COND FALSE  !(choice == 19)
[L7113]  COND FALSE  !(choice == 18)
[L7120]  COND FALSE  !(choice == 17)
[L7126]  COND FALSE  !(choice == 16)
[L7132]  COND FALSE  !(choice == 15)
[L7138]  COND FALSE  !(choice == 14)
[L7144]  COND FALSE  !(choice == 13)
[L7150]  COND FALSE  !(choice == 12)
[L7156]  COND FALSE  !(choice == 11)
[L7162]  COND FALSE  !(choice == 10)
[L7168]  COND FALSE  !(choice == 9)
[L7175]  COND TRUE   choice == 8
[L7176]              gas := gas - 21000;
[L7177]  COND TRUE   gas >= 0
[L7178]              assume _value_s509 >= 0 && _value_s509 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7179]              assume msgvalue_MSG == 0;
[L7180]  CALL        call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s509, _value_s509);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != _spender_s509;
[L3]                 call_approve_StandardToken0 := true;
[L3]                 call_approve_StandardToken0 := false;
[L3]                 revert := revert_hold;
[L1407]              havoc __exception;
[L1408]              revert := false;
[L1409]  COND TRUE   __exception
[L1410]              __tmp__Balance := Balance;
[L1411]              __tmp__DType := DType;
[L1412]              __tmp__Alloc := Alloc;
[L1413]              __tmp__balance_ADDR := balance_ADDR;
[L1414]              __tmp__M_Ref_int := M_Ref_int;
[L1415]              __tmp__sum_balances0 := sum_balances0;
[L1416]              __tmp__M_Ref_bool := M_Ref_bool;
[L1417]              __tmp__sum_allowedAddresses1 := sum_allowedAddresses1;
[L1418]              __tmp__sum_lockedAddresses2 := sum_lockedAddresses2;
[L1419]              __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L1420]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1421]              __tmp__sum_allowed3 := sum_allowed3;
[L1422]              __tmp__Length := Length;
[L1423]              __tmp__now := now;
[L1424]              __tmp__owner_Ownable := owner_Ownable;
[L1425]              __tmp__totalSupply_ERC20Basic := totalSupply_ERC20Basic;
[L1426]              __tmp__balances_BasicToken := balances_BasicToken;
[L1427]              __tmp__allowedAddresses_BasicToken := allowedAddresses_BasicToken;
[L1428]              __tmp__lockedAddresses_BasicToken := lockedAddresses_BasicToken;
[L1429]              __tmp__locked_BasicToken := locked_BasicToken;
[L1430]              __tmp__allowed_StandardToken := allowed_StandardToken;
[L1431]              __tmp__name_ECU := name_ECU;
[L1432]              __tmp__symbol_ECU := symbol_ECU;
[L1433]              __tmp__decimals_ECU := decimals_ECU;
[L1434]              __tmp__initialSupply_ECU := initialSupply_ECU;
[L1435]  CALL        call __ret_0_ := approve~address~uint256_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG, _spender_s509, _value_s509);
[L3844]              __tmp__sum_allowed3[msgsender_MSG] := __tmp__sum_allowed3[msgsender_MSG] - __tmp__allowed_StandardToken[this][msgsender_MSG][_spender_s509];
[L3845]              __tmp__allowed_StandardToken[this][msgsender_MSG][_spender_s509] := _value_s509;
[L3846]              __tmp__sum_allowed3[msgsender_MSG] := __tmp__sum_allowed3[msgsender_MSG] + __tmp__allowed_StandardToken[this][msgsender_MSG][_spender_s509];
[L3847]              __ret_0_ := true;
[L1435]  RET         call __ret_0_ := approve~address~uint256_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG, _spender_s509, _value_s509);
[L1436]              assume revert || gas < 0;
[L7180]  RET         call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s509, _value_s509);
[L7245]  RET         call CorralChoice_ECU(this);

[2020-11-25 15:00:48,679 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 15:00:48,679 INFO  L82        PathProgramCache]: Analyzing trace with hash 12003757, now seen corresponding path program 1 times
[2020-11-25 15:00:48,680 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 15:00:48,703 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 15:00:48,850 INFO  L134       CoverageAnalysis]: Checked inductivity of 1312 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1312 trivial. 0 not checked.
[2020-11-25 15:00:48,850 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 15:00:48,850 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 15:00:48,851 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 15:00:48,851 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 15:00:48,851 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-11-25 15:00:48,851 INFO  L87              Difference]: Start difference. First operand 3750 states and 4111 transitions. cyclomatic complexity: 365 Second operand 4 states.
[2020-11-25 15:00:49,139 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 15:00:49,139 INFO  L93              Difference]: Finished difference Result 4513 states and 5122 transitions.
[2020-11-25 15:00:49,140 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 15:00:49,140 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4513 states and 5122 transitions.
[2020-11-25 15:00:49,151 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 14
[2020-11-25 15:00:49,164 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4513 states to 4318 states and 4915 transitions.
[2020-11-25 15:00:49,164 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1357
[2020-11-25 15:00:49,165 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1357
[2020-11-25 15:00:49,165 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4318 states and 4915 transitions.
[2020-11-25 15:00:49,169 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 15:00:49,169 INFO  L728         BuchiCegarLoop]: Abstraction has 4318 states and 4915 transitions.
[2020-11-25 15:00:49,172 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4318 states and 4915 transitions.
[2020-11-25 15:00:49,195 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4318 to 3744.
[2020-11-25 15:00:49,195 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3744 states.
[2020-11-25 15:00:49,198 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3744 states to 3744 states and 4148 transitions.
[2020-11-25 15:00:49,198 INFO  L751         BuchiCegarLoop]: Abstraction has 3744 states and 4148 transitions.
[2020-11-25 15:00:49,198 INFO  L631         BuchiCegarLoop]: Abstraction has 3744 states and 4148 transitions.
[2020-11-25 15:00:49,199 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 15:00:49,199 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3744 states and 4148 transitions.
[2020-11-25 15:00:49,203 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 10
[2020-11-25 15:00:49,203 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 15:00:49,203 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 15:00:49,205 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 15:00:49,205 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_StandardToken0 := false;
[L3]                 call_approve_StandardToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L7235]              assume null == 0;
[L7236]  CALL        call this := FreshRefGenerator__success();
[L3066]              havoc newRef;
[L3067]              assume Alloc[newRef] == false;
[L3068]              Alloc[newRef] := true;
[L3069]              assume newRef != null;
[L7236]  RET         call this := FreshRefGenerator__success();
[L7237]              assume now >= 0;
[L7238]              assume DType[this] == ECU;
[L7239]              assume msgvalue_MSG == 0;
[L7240]              gas := gas - 53000;
[L7241]  CALL        call ECU_ECU(this, msgsender_MSG, msgvalue_MSG);
[L1850]              havoc __exception;
[L1851]              revert := false;
[L1852]  COND FALSE  !(__exception)
[L1881]  CALL        call ECU_ECU__success(this, msgsender_MSG, msgvalue_MSG);
[L4152]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3258]              assume msgsender_MSG != null;
[L3259]              Balance[this] := 0;
[L3260]              totalSupply_ERC20Basic[this] := 0;
[L3274]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3275]  COND FALSE  !(revert)
[L4152]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4153]  COND FALSE  !(revert)
[L4156]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3641]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3258]              assume msgsender_MSG != null;
[L3259]              Balance[this] := 0;
[L3260]              totalSupply_ERC20Basic[this] := 0;
[L3274]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3275]  COND FALSE  !(revert)
[L3641]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3642]  COND FALSE  !(revert)
[L3645]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3622]              assume msgsender_MSG != null;
[L3623]              Balance[this] := 0;
[L3645]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3646]  COND FALSE  !(revert)
[L4156]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4157]  COND FALSE  !(revert)
[L4160]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3197]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3180]              assume msgsender_MSG != null;
[L3181]              Balance[this] := 0;
[L3182]              owner_Ownable[this] := null;
[L3184]              owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3197]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3198]  COND FALSE  !(revert)
[L4160]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4161]  COND FALSE  !(revert)
[L4164]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3258]              assume msgsender_MSG != null;
[L3259]              Balance[this] := 0;
[L3260]              totalSupply_ERC20Basic[this] := 0;
[L3274]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3275]  COND FALSE  !(revert)
[L3336]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3337]  COND FALSE  !(revert)
[L3340]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3197]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3180]              assume msgsender_MSG != null;
[L3181]              Balance[this] := 0;
[L3182]              owner_Ownable[this] := null;
[L3184]              owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3197]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3198]  COND FALSE  !(revert)
[L3340]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3341]  COND FALSE  !(revert)
[L3344]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3308]              assume msgsender_MSG != null;
[L3309]              Balance[this] := 0;
[L3310]              balances_BasicToken[this] := zeroRefintArr();
[L3311]              sum_balances0[this] := 0;
[L3312]              allowedAddresses_BasicToken[this] := zeroRefboolArr();
[L3313]              lockedAddresses_BasicToken[this] := zeroRefboolArr();
[L3314]              locked_BasicToken[this] := true;
[L3344]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]  COND FALSE  !(revert)
[L4164]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4165]  COND FALSE  !(revert)
[L4168]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3697]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3258]              assume msgsender_MSG != null;
[L3259]              Balance[this] := 0;
[L3260]              totalSupply_ERC20Basic[this] := 0;
[L3274]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3275]  COND FALSE  !(revert)
[L3697]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3698]  COND FALSE  !(revert)
[L3701]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3641]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3258]              assume msgsender_MSG != null;
[L3259]              Balance[this] := 0;
[L3260]              totalSupply_ERC20Basic[this] := 0;
[L3274]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3275]  COND FALSE  !(revert)
[L3641]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3642]  COND FALSE  !(revert)
[L3645]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3622]              assume msgsender_MSG != null;
[L3623]              Balance[this] := 0;
[L3645]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3646]  COND FALSE  !(revert)
[L3701]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3702]  COND FALSE  !(revert)
[L3705]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3197]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3180]              assume msgsender_MSG != null;
[L3181]              Balance[this] := 0;
[L3182]              owner_Ownable[this] := null;
[L3184]              owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3197]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3198]  COND FALSE  !(revert)
[L3705]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3706]  COND FALSE  !(revert)
[L3709]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3258]              assume msgsender_MSG != null;
[L3259]              Balance[this] := 0;
[L3260]              totalSupply_ERC20Basic[this] := 0;
[L3274]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3275]  COND FALSE  !(revert)
[L3336]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3337]  COND FALSE  !(revert)
[L3340]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3197]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3180]              assume msgsender_MSG != null;
[L3181]              Balance[this] := 0;
[L3182]              owner_Ownable[this] := null;
[L3184]              owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3197]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3198]  COND FALSE  !(revert)
[L3340]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3341]  COND FALSE  !(revert)
[L3344]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3308]              assume msgsender_MSG != null;
[L3309]              Balance[this] := 0;
[L3310]              balances_BasicToken[this] := zeroRefintArr();
[L3311]              sum_balances0[this] := 0;
[L3312]              allowedAddresses_BasicToken[this] := zeroRefboolArr();
[L3313]              lockedAddresses_BasicToken[this] := zeroRefboolArr();
[L3314]              locked_BasicToken[this] := true;
[L3344]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]  COND FALSE  !(revert)
[L3709]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3710]  COND FALSE  !(revert)
[L3713]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3664]              assume msgsender_MSG != null;
[L3665]              Balance[this] := 0;
[L3666]              allowed_StandardToken[this] := zeroRefRefintArr();
[L3667]              sum_allowed3[this] := 0;
[L3713]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  COND FALSE  !(revert)
[L4168]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4169]  COND FALSE  !(revert)
[L4172]  CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3993]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3258]              assume msgsender_MSG != null;
[L3259]              Balance[this] := 0;
[L3260]              totalSupply_ERC20Basic[this] := 0;
[L3274]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3275]  COND FALSE  !(revert)
[L3993]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3994]  COND FALSE  !(revert)
[L3997]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3641]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3258]              assume msgsender_MSG != null;
[L3259]              Balance[this] := 0;
[L3260]              totalSupply_ERC20Basic[this] := 0;
[L3274]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3275]  COND FALSE  !(revert)
[L3641]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3642]  COND FALSE  !(revert)
[L3645]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3622]              assume msgsender_MSG != null;
[L3623]              Balance[this] := 0;
[L3645]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3646]  COND FALSE  !(revert)
[L3997]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3998]  COND FALSE  !(revert)
[L4001]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3197]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3180]              assume msgsender_MSG != null;
[L3181]              Balance[this] := 0;
[L3182]              owner_Ownable[this] := null;
[L3184]              owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3197]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3198]  COND FALSE  !(revert)
[L4001]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4002]  COND FALSE  !(revert)
[L4005]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3258]              assume msgsender_MSG != null;
[L3259]              Balance[this] := 0;
[L3260]              totalSupply_ERC20Basic[this] := 0;
[L3274]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3275]  COND FALSE  !(revert)
[L3336]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3337]  COND FALSE  !(revert)
[L3340]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3197]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3180]              assume msgsender_MSG != null;
[L3181]              Balance[this] := 0;
[L3182]              owner_Ownable[this] := null;
[L3184]              owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3197]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3198]  COND FALSE  !(revert)
[L3340]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3341]  COND FALSE  !(revert)
[L3344]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3308]              assume msgsender_MSG != null;
[L3309]              Balance[this] := 0;
[L3310]              balances_BasicToken[this] := zeroRefintArr();
[L3311]              sum_balances0[this] := 0;
[L3312]              allowedAddresses_BasicToken[this] := zeroRefboolArr();
[L3313]              lockedAddresses_BasicToken[this] := zeroRefboolArr();
[L3314]              locked_BasicToken[this] := true;
[L3344]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]  COND FALSE  !(revert)
[L4005]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4009]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3697]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3258]              assume msgsender_MSG != null;
[L3259]              Balance[this] := 0;
[L3260]              totalSupply_ERC20Basic[this] := 0;
[L3274]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3275]  COND FALSE  !(revert)
[L3697]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3698]  COND FALSE  !(revert)
[L3701]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3641]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3258]              assume msgsender_MSG != null;
[L3259]              Balance[this] := 0;
[L3260]              totalSupply_ERC20Basic[this] := 0;
[L3274]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3275]  COND FALSE  !(revert)
[L3641]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3642]  COND FALSE  !(revert)
[L3645]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3622]              assume msgsender_MSG != null;
[L3623]              Balance[this] := 0;
[L3645]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3646]  COND FALSE  !(revert)
[L3701]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3702]  COND FALSE  !(revert)
[L3705]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3197]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3180]              assume msgsender_MSG != null;
[L3181]              Balance[this] := 0;
[L3182]              owner_Ownable[this] := null;
[L3184]              owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3197]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3198]  COND FALSE  !(revert)
[L3705]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3706]  COND FALSE  !(revert)
[L3709]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3258]              assume msgsender_MSG != null;
[L3259]              Balance[this] := 0;
[L3260]              totalSupply_ERC20Basic[this] := 0;
[L3274]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3275]  COND FALSE  !(revert)
[L3336]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3337]  COND FALSE  !(revert)
[L3340]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3197]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3180]              assume msgsender_MSG != null;
[L3181]              Balance[this] := 0;
[L3182]              owner_Ownable[this] := null;
[L3184]              owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3197]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3198]  COND FALSE  !(revert)
[L3340]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3341]  COND FALSE  !(revert)
[L3344]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3308]              assume msgsender_MSG != null;
[L3309]              Balance[this] := 0;
[L3310]              balances_BasicToken[this] := zeroRefintArr();
[L3311]              sum_balances0[this] := 0;
[L3312]              allowedAddresses_BasicToken[this] := zeroRefboolArr();
[L3313]              lockedAddresses_BasicToken[this] := zeroRefboolArr();
[L3314]              locked_BasicToken[this] := true;
[L3344]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]  COND FALSE  !(revert)
[L3709]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3710]  COND FALSE  !(revert)
[L3713]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3664]              assume msgsender_MSG != null;
[L3665]              Balance[this] := 0;
[L3666]              allowed_StandardToken[this] := zeroRefRefintArr();
[L3667]              sum_allowed3[this] := 0;
[L3713]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  COND FALSE  !(revert)
[L4009]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4010]  COND FALSE  !(revert)
[L4013]  CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3958]              assume msgsender_MSG != null;
[L3959]              Balance[this] := 0;
[L4013]  RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4014]  COND FALSE  !(revert)
[L4172]  RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4173]  COND FALSE  !(revert)
[L4176]  CALL        call ECU_ECU_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4100]              assume msgsender_MSG != null;
[L4101]              Balance[this] := 0;
[L4102]              name_ECU[this] := -2027621617;
[L4103]              symbol_ECU[this] := 1342424742;
[L4104]              decimals_ECU[this] := 18;
[L4105]              __var_15 := decimals_ECU[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4106]              initialSupply_ECU[this] := 1000000000 * (nonlinearPow(10, decimals_ECU[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4108]              totalSupply_ERC20Basic[this] := initialSupply_ECU[this];
[L4109]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][19781008330533595146085782002824322930726574509];
[L4110]              balances_BasicToken[this][19781008330533595146085782002824322930726574509] := initialSupply_ECU[this];
[L4111]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][19781008330533595146085782002824322930726574509];
[L4112]              assert { :EventEmitted "Transfer_ECU" } true;
[L4113]              allowedAddresses_BasicToken[this][owner_Ownable[this]] := true;
[L4176]  RET         call ECU_ECU_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4177]  COND FALSE  !(revert)
[L1881]  RET         call ECU_ECU__success(this, msgsender_MSG, msgvalue_MSG);
[L1882]              assume !revert && gas >= 0;
[L7241]  RET         call ECU_ECU(this, msgsender_MSG, msgvalue_MSG);
[L7242]              assume !revert && gas >= 0;
[L7245]  CALL        call CorralChoice_ECU(this);
[L7029]              havoc msgsender_MSG;
[L7030]              havoc msgvalue_MSG;
[L7031]              havoc choice;
[L7032]              havoc __ret_0_owner;
[L7033]              havoc newOwner_s146;
[L7034]              havoc __ret_0_totalSupply;
[L7035]              havoc _owner_s352;
[L7036]              havoc balance_s352;
[L7037]              havoc _to_s340;
[L7038]              havoc _value_s340;
[L7039]              havoc __ret_0_transfer;
[L7040]              havoc arg745_s0;
[L7041]              havoc __ret_0_allowedAddresses;
[L7042]              havoc arg746_s0;
[L7043]              havoc __ret_0_lockedAddresses;
[L7044]              havoc __ret_0_locked;
[L7045]              havoc _addr_s218;
[L7046]              havoc _allowed_s218;
[L7047]              havoc _addr_s240;
[L7048]              havoc _locked_s240;
[L7049]              havoc _locked_s252;
[L7050]              havoc _addr_s282;
[L7051]              havoc __ret_0_canTransfer;
[L7052]              havoc _owner_s525;
[L7053]              havoc _spender_s525;
[L7054]              havoc remaining_s525;
[L7055]              havoc _from_s481;
[L7056]              havoc _to_s481;
[L7057]              havoc _value_s481;
[L7058]              havoc __ret_0_transferFrom;
[L7059]              havoc _spender_s509;
[L7060]              havoc _value_s509;
[L7061]              havoc __ret_0_approve;
[L7062]              havoc _spender_s566;
[L7063]              havoc _addedValue_s566;
[L7064]              havoc success_s566;
[L7065]              havoc _spender_s626;
[L7066]              havoc _subtractedValue_s626;
[L7067]              havoc success_s626;
[L7068]              havoc _value_s692;
[L7069]              havoc __ret_0_name;
[L7070]              havoc __ret_0_symbol;
[L7071]              havoc __ret_0_decimals;
[L7072]              havoc __ret_0_initialSupply;
[L7073]              havoc tmpNow;
[L7074]              havoc gas;
[L7075]              assume gas > 4000000 && gas <= 8000000;
[L7076]              tmpNow := now;
[L7077]              havoc now;
[L7078]              assume now > tmpNow;
[L7079]              assume msgsender_MSG != null;
[L7080]              assume DType[msgsender_MSG] != SafeMath;
[L7081]              assume DType[msgsender_MSG] != Ownable;
[L7082]              assume DType[msgsender_MSG] != ERC20Basic;
[L7083]              assume DType[msgsender_MSG] != BasicToken;
[L7084]              assume DType[msgsender_MSG] != ERC20;
[L7085]              assume DType[msgsender_MSG] != StandardToken;
[L7086]              assume DType[msgsender_MSG] != BurnableToken;
[L7087]              assume DType[msgsender_MSG] != ECU;
[L7088]              Alloc[msgsender_MSG] := true;
[L7089]  COND FALSE  !(choice == 22)
[L7095]  COND FALSE  !(choice == 21)
[L7101]  COND FALSE  !(choice == 20)
[L7107]  COND FALSE  !(choice == 19)
[L7113]  COND FALSE  !(choice == 18)
[L7120]  COND FALSE  !(choice == 17)
[L7126]  COND FALSE  !(choice == 16)
[L7132]  COND FALSE  !(choice == 15)
[L7138]  COND FALSE  !(choice == 14)
[L7144]  COND FALSE  !(choice == 13)
[L7150]  COND FALSE  !(choice == 12)
[L7156]  COND FALSE  !(choice == 11)
[L7162]  COND FALSE  !(choice == 10)
[L7168]  COND FALSE  !(choice == 9)
[L7175]  COND TRUE   choice == 8
[L7176]              gas := gas - 21000;
[L7177]  COND TRUE   gas >= 0
[L7178]              assume _value_s509 >= 0 && _value_s509 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7179]              assume msgvalue_MSG == 0;
[L7180]  CALL        call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s509, _value_s509);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != _spender_s509;
[L3]                 call_approve_StandardToken0 := true;
[L3]                 call_approve_StandardToken0 := false;
[L3]                 revert := revert_hold;
[L1407]              havoc __exception;
[L1408]              revert := false;
[L1409]  COND TRUE   __exception
[L1410]              __tmp__Balance := Balance;
[L1411]              __tmp__DType := DType;
[L1412]              __tmp__Alloc := Alloc;
[L1413]              __tmp__balance_ADDR := balance_ADDR;
[L1414]              __tmp__M_Ref_int := M_Ref_int;
[L1415]              __tmp__sum_balances0 := sum_balances0;
[L1416]              __tmp__M_Ref_bool := M_Ref_bool;
[L1417]              __tmp__sum_allowedAddresses1 := sum_allowedAddresses1;
[L1418]              __tmp__sum_lockedAddresses2 := sum_lockedAddresses2;
[L1419]              __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L1420]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1421]              __tmp__sum_allowed3 := sum_allowed3;
[L1422]              __tmp__Length := Length;
[L1423]              __tmp__now := now;
[L1424]              __tmp__owner_Ownable := owner_Ownable;
[L1425]              __tmp__totalSupply_ERC20Basic := totalSupply_ERC20Basic;
[L1426]              __tmp__balances_BasicToken := balances_BasicToken;
[L1427]              __tmp__allowedAddresses_BasicToken := allowedAddresses_BasicToken;
[L1428]              __tmp__lockedAddresses_BasicToken := lockedAddresses_BasicToken;
[L1429]              __tmp__locked_BasicToken := locked_BasicToken;
[L1430]              __tmp__allowed_StandardToken := allowed_StandardToken;
[L1431]              __tmp__name_ECU := name_ECU;
[L1432]              __tmp__symbol_ECU := symbol_ECU;
[L1433]              __tmp__decimals_ECU := decimals_ECU;
[L1434]              __tmp__initialSupply_ECU := initialSupply_ECU;
[L1435]  CALL        call __ret_0_ := approve~address~uint256_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG, _spender_s509, _value_s509);
[L3844]              __tmp__sum_allowed3[msgsender_MSG] := __tmp__sum_allowed3[msgsender_MSG] - __tmp__allowed_StandardToken[this][msgsender_MSG][_spender_s509];
[L3845]              __tmp__allowed_StandardToken[this][msgsender_MSG][_spender_s509] := _value_s509;
[L3846]              __tmp__sum_allowed3[msgsender_MSG] := __tmp__sum_allowed3[msgsender_MSG] + __tmp__allowed_StandardToken[this][msgsender_MSG][_spender_s509];
[L3847]              __ret_0_ := true;
[L1435]  RET         call __ret_0_ := approve~address~uint256_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG, _spender_s509, _value_s509);
[L1436]              assume revert || gas < 0;
[L7180]  RET         call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s509, _value_s509);
[L7245]  RET         call CorralChoice_ECU(this);

Loop:
[L7245]  CALL        call CorralChoice_ECU(this);
[L7029]              havoc msgsender_MSG;
[L7030]              havoc msgvalue_MSG;
[L7031]              havoc choice;
[L7032]              havoc __ret_0_owner;
[L7033]              havoc newOwner_s146;
[L7034]              havoc __ret_0_totalSupply;
[L7035]              havoc _owner_s352;
[L7036]              havoc balance_s352;
[L7037]              havoc _to_s340;
[L7038]              havoc _value_s340;
[L7039]              havoc __ret_0_transfer;
[L7040]              havoc arg745_s0;
[L7041]              havoc __ret_0_allowedAddresses;
[L7042]              havoc arg746_s0;
[L7043]              havoc __ret_0_lockedAddresses;
[L7044]              havoc __ret_0_locked;
[L7045]              havoc _addr_s218;
[L7046]              havoc _allowed_s218;
[L7047]              havoc _addr_s240;
[L7048]              havoc _locked_s240;
[L7049]              havoc _locked_s252;
[L7050]              havoc _addr_s282;
[L7051]              havoc __ret_0_canTransfer;
[L7052]              havoc _owner_s525;
[L7053]              havoc _spender_s525;
[L7054]              havoc remaining_s525;
[L7055]              havoc _from_s481;
[L7056]              havoc _to_s481;
[L7057]              havoc _value_s481;
[L7058]              havoc __ret_0_transferFrom;
[L7059]              havoc _spender_s509;
[L7060]              havoc _value_s509;
[L7061]              havoc __ret_0_approve;
[L7062]              havoc _spender_s566;
[L7063]              havoc _addedValue_s566;
[L7064]              havoc success_s566;
[L7065]              havoc _spender_s626;
[L7066]              havoc _subtractedValue_s626;
[L7067]              havoc success_s626;
[L7068]              havoc _value_s692;
[L7069]              havoc __ret_0_name;
[L7070]              havoc __ret_0_symbol;
[L7071]              havoc __ret_0_decimals;
[L7072]              havoc __ret_0_initialSupply;
[L7073]              havoc tmpNow;
[L7074]              havoc gas;
[L7075]              assume gas > 4000000 && gas <= 8000000;
[L7076]              tmpNow := now;
[L7077]              havoc now;
[L7078]              assume now > tmpNow;
[L7079]              assume msgsender_MSG != null;
[L7080]              assume DType[msgsender_MSG] != SafeMath;
[L7081]              assume DType[msgsender_MSG] != Ownable;
[L7082]              assume DType[msgsender_MSG] != ERC20Basic;
[L7083]              assume DType[msgsender_MSG] != BasicToken;
[L7084]              assume DType[msgsender_MSG] != ERC20;
[L7085]              assume DType[msgsender_MSG] != StandardToken;
[L7086]              assume DType[msgsender_MSG] != BurnableToken;
[L7087]              assume DType[msgsender_MSG] != ECU;
[L7088]              Alloc[msgsender_MSG] := true;
[L7089]  COND FALSE  !(choice == 22)
[L7095]  COND FALSE  !(choice == 21)
[L7101]  COND FALSE  !(choice == 20)
[L7107]  COND FALSE  !(choice == 19)
[L7113]  COND FALSE  !(choice == 18)
[L7120]  COND FALSE  !(choice == 17)
[L7126]  COND FALSE  !(choice == 16)
[L7132]  COND FALSE  !(choice == 15)
[L7138]  COND FALSE  !(choice == 14)
[L7144]  COND FALSE  !(choice == 13)
[L7150]  COND FALSE  !(choice == 12)
[L7156]  COND FALSE  !(choice == 11)
[L7162]  COND FALSE  !(choice == 10)
[L7168]  COND FALSE  !(choice == 9)
[L7175]  COND TRUE   choice == 8
[L7176]              gas := gas - 21000;
[L7177]  COND TRUE   gas >= 0
[L7178]              assume _value_s509 >= 0 && _value_s509 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7179]              assume msgvalue_MSG == 0;
[L7180]  CALL        call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s509, _value_s509);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != _spender_s509;
[L3]                 call_approve_StandardToken0 := true;
[L3]                 call_approve_StandardToken0 := false;
[L3]                 revert := revert_hold;
[L1407]              havoc __exception;
[L1408]              revert := false;
[L1409]  COND TRUE   __exception
[L1410]              __tmp__Balance := Balance;
[L1411]              __tmp__DType := DType;
[L1412]              __tmp__Alloc := Alloc;
[L1413]              __tmp__balance_ADDR := balance_ADDR;
[L1414]              __tmp__M_Ref_int := M_Ref_int;
[L1415]              __tmp__sum_balances0 := sum_balances0;
[L1416]              __tmp__M_Ref_bool := M_Ref_bool;
[L1417]              __tmp__sum_allowedAddresses1 := sum_allowedAddresses1;
[L1418]              __tmp__sum_lockedAddresses2 := sum_lockedAddresses2;
[L1419]              __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L1420]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1421]              __tmp__sum_allowed3 := sum_allowed3;
[L1422]              __tmp__Length := Length;
[L1423]              __tmp__now := now;
[L1424]              __tmp__owner_Ownable := owner_Ownable;
[L1425]              __tmp__totalSupply_ERC20Basic := totalSupply_ERC20Basic;
[L1426]              __tmp__balances_BasicToken := balances_BasicToken;
[L1427]              __tmp__allowedAddresses_BasicToken := allowedAddresses_BasicToken;
[L1428]              __tmp__lockedAddresses_BasicToken := lockedAddresses_BasicToken;
[L1429]              __tmp__locked_BasicToken := locked_BasicToken;
[L1430]              __tmp__allowed_StandardToken := allowed_StandardToken;
[L1431]              __tmp__name_ECU := name_ECU;
[L1432]              __tmp__symbol_ECU := symbol_ECU;
[L1433]              __tmp__decimals_ECU := decimals_ECU;
[L1434]              __tmp__initialSupply_ECU := initialSupply_ECU;
[L1435]  CALL        call __ret_0_ := approve~address~uint256_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG, _spender_s509, _value_s509);
[L3844]              __tmp__sum_allowed3[msgsender_MSG] := __tmp__sum_allowed3[msgsender_MSG] - __tmp__allowed_StandardToken[this][msgsender_MSG][_spender_s509];
[L3845]              __tmp__allowed_StandardToken[this][msgsender_MSG][_spender_s509] := _value_s509;
[L3846]              __tmp__sum_allowed3[msgsender_MSG] := __tmp__sum_allowed3[msgsender_MSG] + __tmp__allowed_StandardToken[this][msgsender_MSG][_spender_s509];
[L3847]              __ret_0_ := true;
[L1435]  RET         call __ret_0_ := approve~address~uint256_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG, _spender_s509, _value_s509);
[L1436]              assume revert || gas < 0;
[L7180]  RET         call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s509, _value_s509);
[L7245]  RET         call CorralChoice_ECU(this);

[2020-11-25 15:00:49,211 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 15:00:49,211 INFO  L82        PathProgramCache]: Analyzing trace with hash 754671314, now seen corresponding path program 1 times
[2020-11-25 15:00:49,211 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 15:00:49,228 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 15:00:49,365 INFO  L134       CoverageAnalysis]: Checked inductivity of 1312 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1312 trivial. 0 not checked.
[2020-11-25 15:00:49,366 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 15:00:49,366 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-25 15:00:49,366 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 15:00:49,366 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-25 15:00:49,366 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-11-25 15:00:49,366 INFO  L87              Difference]: Start difference. First operand 3744 states and 4148 transitions. cyclomatic complexity: 408 Second operand 5 states.
[2020-11-25 15:00:49,689 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 15:00:49,689 INFO  L93              Difference]: Finished difference Result 4333 states and 4839 transitions.
[2020-11-25 15:00:49,689 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 15:00:49,689 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4333 states and 4839 transitions.
[2020-11-25 15:00:49,699 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 12
[2020-11-25 15:00:49,707 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4333 states to 3123 states and 3609 transitions.
[2020-11-25 15:00:49,707 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 802
[2020-11-25 15:00:49,708 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 934
[2020-11-25 15:00:49,708 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3123 states and 3609 transitions.
[2020-11-25 15:00:49,710 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 15:00:49,710 INFO  L728         BuchiCegarLoop]: Abstraction has 3123 states and 3609 transitions.
[2020-11-25 15:00:49,712 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3123 states and 3609 transitions.
[2020-11-25 15:00:49,725 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3123 to 2192.
[2020-11-25 15:00:49,725 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2192 states.
[2020-11-25 15:00:49,727 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2192 states to 2192 states and 2418 transitions.
[2020-11-25 15:00:49,727 INFO  L751         BuchiCegarLoop]: Abstraction has 2192 states and 2418 transitions.
[2020-11-25 15:00:49,727 INFO  L631         BuchiCegarLoop]: Abstraction has 2192 states and 2418 transitions.
[2020-11-25 15:00:49,727 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 15:00:49,727 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2192 states and 2418 transitions.
[2020-11-25 15:00:49,729 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 15:00:49,729 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 15:00:49,729 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 15:00:49,731 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 15:00:49,731 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_StandardToken0 := false;
[L3]                 call_approve_StandardToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L7235]              assume null == 0;
[L7236]  CALL        call this := FreshRefGenerator__success();
[L3066]              havoc newRef;
[L3067]              assume Alloc[newRef] == false;
[L3068]              Alloc[newRef] := true;
[L3069]              assume newRef != null;
[L7236]  RET         call this := FreshRefGenerator__success();
[L7237]              assume now >= 0;
[L7238]              assume DType[this] == ECU;
[L7239]              assume msgvalue_MSG == 0;
[L7240]              gas := gas - 53000;
[L7241]  CALL        call ECU_ECU(this, msgsender_MSG, msgvalue_MSG);
[L1850]              havoc __exception;
[L1851]              revert := false;
[L1852]  COND FALSE  !(__exception)
[L1881]  CALL        call ECU_ECU__success(this, msgsender_MSG, msgvalue_MSG);
[L4152]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3258]              assume msgsender_MSG != null;
[L3259]              Balance[this] := 0;
[L3260]              totalSupply_ERC20Basic[this] := 0;
[L3274]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3275]  COND FALSE  !(revert)
[L4152]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4153]  COND FALSE  !(revert)
[L4156]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3641]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3258]              assume msgsender_MSG != null;
[L3259]              Balance[this] := 0;
[L3260]              totalSupply_ERC20Basic[this] := 0;
[L3274]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3275]  COND FALSE  !(revert)
[L3641]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3642]  COND FALSE  !(revert)
[L3645]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3622]              assume msgsender_MSG != null;
[L3623]              Balance[this] := 0;
[L3645]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3646]  COND FALSE  !(revert)
[L4156]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4157]  COND FALSE  !(revert)
[L4160]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3197]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3180]              assume msgsender_MSG != null;
[L3181]              Balance[this] := 0;
[L3182]              owner_Ownable[this] := null;
[L3184]              owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3197]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3198]  COND FALSE  !(revert)
[L4160]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4161]  COND FALSE  !(revert)
[L4164]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3258]              assume msgsender_MSG != null;
[L3259]              Balance[this] := 0;
[L3260]              totalSupply_ERC20Basic[this] := 0;
[L3274]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3275]  COND FALSE  !(revert)
[L3336]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3337]  COND FALSE  !(revert)
[L3340]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3197]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3180]              assume msgsender_MSG != null;
[L3181]              Balance[this] := 0;
[L3182]              owner_Ownable[this] := null;
[L3184]              owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3197]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3198]  COND FALSE  !(revert)
[L3340]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3341]  COND FALSE  !(revert)
[L3344]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3308]              assume msgsender_MSG != null;
[L3309]              Balance[this] := 0;
[L3310]              balances_BasicToken[this] := zeroRefintArr();
[L3311]              sum_balances0[this] := 0;
[L3312]              allowedAddresses_BasicToken[this] := zeroRefboolArr();
[L3313]              lockedAddresses_BasicToken[this] := zeroRefboolArr();
[L3314]              locked_BasicToken[this] := true;
[L3344]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]  COND FALSE  !(revert)
[L4164]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4165]  COND FALSE  !(revert)
[L4168]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3697]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3258]              assume msgsender_MSG != null;
[L3259]              Balance[this] := 0;
[L3260]              totalSupply_ERC20Basic[this] := 0;
[L3274]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3275]  COND FALSE  !(revert)
[L3697]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3698]  COND FALSE  !(revert)
[L3701]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3641]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3258]              assume msgsender_MSG != null;
[L3259]              Balance[this] := 0;
[L3260]              totalSupply_ERC20Basic[this] := 0;
[L3274]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3275]  COND FALSE  !(revert)
[L3641]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3642]  COND FALSE  !(revert)
[L3645]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3622]              assume msgsender_MSG != null;
[L3623]              Balance[this] := 0;
[L3645]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3646]  COND FALSE  !(revert)
[L3701]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3702]  COND FALSE  !(revert)
[L3705]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3197]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3180]              assume msgsender_MSG != null;
[L3181]              Balance[this] := 0;
[L3182]              owner_Ownable[this] := null;
[L3184]              owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3197]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3198]  COND FALSE  !(revert)
[L3705]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3706]  COND FALSE  !(revert)
[L3709]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3258]              assume msgsender_MSG != null;
[L3259]              Balance[this] := 0;
[L3260]              totalSupply_ERC20Basic[this] := 0;
[L3274]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3275]  COND FALSE  !(revert)
[L3336]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3337]  COND FALSE  !(revert)
[L3340]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3197]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3180]              assume msgsender_MSG != null;
[L3181]              Balance[this] := 0;
[L3182]              owner_Ownable[this] := null;
[L3184]              owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3197]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3198]  COND FALSE  !(revert)
[L3340]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3341]  COND FALSE  !(revert)
[L3344]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3308]              assume msgsender_MSG != null;
[L3309]              Balance[this] := 0;
[L3310]              balances_BasicToken[this] := zeroRefintArr();
[L3311]              sum_balances0[this] := 0;
[L3312]              allowedAddresses_BasicToken[this] := zeroRefboolArr();
[L3313]              lockedAddresses_BasicToken[this] := zeroRefboolArr();
[L3314]              locked_BasicToken[this] := true;
[L3344]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]  COND FALSE  !(revert)
[L3709]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3710]  COND FALSE  !(revert)
[L3713]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3664]              assume msgsender_MSG != null;
[L3665]              Balance[this] := 0;
[L3666]              allowed_StandardToken[this] := zeroRefRefintArr();
[L3667]              sum_allowed3[this] := 0;
[L3713]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  COND FALSE  !(revert)
[L4168]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4169]  COND FALSE  !(revert)
[L4172]  CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3993]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3258]              assume msgsender_MSG != null;
[L3259]              Balance[this] := 0;
[L3260]              totalSupply_ERC20Basic[this] := 0;
[L3274]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3275]  COND FALSE  !(revert)
[L3993]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3994]  COND FALSE  !(revert)
[L3997]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3641]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3258]              assume msgsender_MSG != null;
[L3259]              Balance[this] := 0;
[L3260]              totalSupply_ERC20Basic[this] := 0;
[L3274]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3275]  COND FALSE  !(revert)
[L3641]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3642]  COND FALSE  !(revert)
[L3645]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3622]              assume msgsender_MSG != null;
[L3623]              Balance[this] := 0;
[L3645]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3646]  COND FALSE  !(revert)
[L3997]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3998]  COND FALSE  !(revert)
[L4001]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3197]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3180]              assume msgsender_MSG != null;
[L3181]              Balance[this] := 0;
[L3182]              owner_Ownable[this] := null;
[L3184]              owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3197]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3198]  COND FALSE  !(revert)
[L4001]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4002]  COND FALSE  !(revert)
[L4005]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3258]              assume msgsender_MSG != null;
[L3259]              Balance[this] := 0;
[L3260]              totalSupply_ERC20Basic[this] := 0;
[L3274]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3275]  COND FALSE  !(revert)
[L3336]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3337]  COND FALSE  !(revert)
[L3340]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3197]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3180]              assume msgsender_MSG != null;
[L3181]              Balance[this] := 0;
[L3182]              owner_Ownable[this] := null;
[L3184]              owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3197]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3198]  COND FALSE  !(revert)
[L3340]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3341]  COND FALSE  !(revert)
[L3344]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3308]              assume msgsender_MSG != null;
[L3309]              Balance[this] := 0;
[L3310]              balances_BasicToken[this] := zeroRefintArr();
[L3311]              sum_balances0[this] := 0;
[L3312]              allowedAddresses_BasicToken[this] := zeroRefboolArr();
[L3313]              lockedAddresses_BasicToken[this] := zeroRefboolArr();
[L3314]              locked_BasicToken[this] := true;
[L3344]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]  COND FALSE  !(revert)
[L4005]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4009]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3697]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3258]              assume msgsender_MSG != null;
[L3259]              Balance[this] := 0;
[L3260]              totalSupply_ERC20Basic[this] := 0;
[L3274]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3275]  COND FALSE  !(revert)
[L3697]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3698]  COND FALSE  !(revert)
[L3701]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3641]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3258]              assume msgsender_MSG != null;
[L3259]              Balance[this] := 0;
[L3260]              totalSupply_ERC20Basic[this] := 0;
[L3274]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3275]  COND FALSE  !(revert)
[L3641]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3642]  COND FALSE  !(revert)
[L3645]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3622]              assume msgsender_MSG != null;
[L3623]              Balance[this] := 0;
[L3645]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3646]  COND FALSE  !(revert)
[L3701]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3702]  COND FALSE  !(revert)
[L3705]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3197]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3180]              assume msgsender_MSG != null;
[L3181]              Balance[this] := 0;
[L3182]              owner_Ownable[this] := null;
[L3184]              owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3197]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3198]  COND FALSE  !(revert)
[L3705]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3706]  COND FALSE  !(revert)
[L3709]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3258]              assume msgsender_MSG != null;
[L3259]              Balance[this] := 0;
[L3260]              totalSupply_ERC20Basic[this] := 0;
[L3274]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3275]  COND FALSE  !(revert)
[L3336]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3337]  COND FALSE  !(revert)
[L3340]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3197]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3180]              assume msgsender_MSG != null;
[L3181]              Balance[this] := 0;
[L3182]              owner_Ownable[this] := null;
[L3184]              owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3197]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3198]  COND FALSE  !(revert)
[L3340]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3341]  COND FALSE  !(revert)
[L3344]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3308]              assume msgsender_MSG != null;
[L3309]              Balance[this] := 0;
[L3310]              balances_BasicToken[this] := zeroRefintArr();
[L3311]              sum_balances0[this] := 0;
[L3312]              allowedAddresses_BasicToken[this] := zeroRefboolArr();
[L3313]              lockedAddresses_BasicToken[this] := zeroRefboolArr();
[L3314]              locked_BasicToken[this] := true;
[L3344]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]  COND FALSE  !(revert)
[L3709]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3710]  COND FALSE  !(revert)
[L3713]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3664]              assume msgsender_MSG != null;
[L3665]              Balance[this] := 0;
[L3666]              allowed_StandardToken[this] := zeroRefRefintArr();
[L3667]              sum_allowed3[this] := 0;
[L3713]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  COND FALSE  !(revert)
[L4009]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4010]  COND FALSE  !(revert)
[L4013]  CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3958]              assume msgsender_MSG != null;
[L3959]              Balance[this] := 0;
[L4013]  RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4014]  COND FALSE  !(revert)
[L4172]  RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4173]  COND FALSE  !(revert)
[L4176]  CALL        call ECU_ECU_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4100]              assume msgsender_MSG != null;
[L4101]              Balance[this] := 0;
[L4102]              name_ECU[this] := -2027621617;
[L4103]              symbol_ECU[this] := 1342424742;
[L4104]              decimals_ECU[this] := 18;
[L4105]              __var_15 := decimals_ECU[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4106]              initialSupply_ECU[this] := 1000000000 * (nonlinearPow(10, decimals_ECU[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4108]              totalSupply_ERC20Basic[this] := initialSupply_ECU[this];
[L4109]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][19781008330533595146085782002824322930726574509];
[L4110]              balances_BasicToken[this][19781008330533595146085782002824322930726574509] := initialSupply_ECU[this];
[L4111]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][19781008330533595146085782002824322930726574509];
[L4112]              assert { :EventEmitted "Transfer_ECU" } true;
[L4113]              allowedAddresses_BasicToken[this][owner_Ownable[this]] := true;
[L4176]  RET         call ECU_ECU_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4177]  COND FALSE  !(revert)
[L1881]  RET         call ECU_ECU__success(this, msgsender_MSG, msgvalue_MSG);
[L1882]              assume !revert && gas >= 0;
[L7241]  RET         call ECU_ECU(this, msgsender_MSG, msgvalue_MSG);
[L7242]              assume !revert && gas >= 0;
[L7245]  CALL        call CorralChoice_ECU(this);
[L7029]              havoc msgsender_MSG;
[L7030]              havoc msgvalue_MSG;
[L7031]              havoc choice;
[L7032]              havoc __ret_0_owner;
[L7033]              havoc newOwner_s146;
[L7034]              havoc __ret_0_totalSupply;
[L7035]              havoc _owner_s352;
[L7036]              havoc balance_s352;
[L7037]              havoc _to_s340;
[L7038]              havoc _value_s340;
[L7039]              havoc __ret_0_transfer;
[L7040]              havoc arg745_s0;
[L7041]              havoc __ret_0_allowedAddresses;
[L7042]              havoc arg746_s0;
[L7043]              havoc __ret_0_lockedAddresses;
[L7044]              havoc __ret_0_locked;
[L7045]              havoc _addr_s218;
[L7046]              havoc _allowed_s218;
[L7047]              havoc _addr_s240;
[L7048]              havoc _locked_s240;
[L7049]              havoc _locked_s252;
[L7050]              havoc _addr_s282;
[L7051]              havoc __ret_0_canTransfer;
[L7052]              havoc _owner_s525;
[L7053]              havoc _spender_s525;
[L7054]              havoc remaining_s525;
[L7055]              havoc _from_s481;
[L7056]              havoc _to_s481;
[L7057]              havoc _value_s481;
[L7058]              havoc __ret_0_transferFrom;
[L7059]              havoc _spender_s509;
[L7060]              havoc _value_s509;
[L7061]              havoc __ret_0_approve;
[L7062]              havoc _spender_s566;
[L7063]              havoc _addedValue_s566;
[L7064]              havoc success_s566;
[L7065]              havoc _spender_s626;
[L7066]              havoc _subtractedValue_s626;
[L7067]              havoc success_s626;
[L7068]              havoc _value_s692;
[L7069]              havoc __ret_0_name;
[L7070]              havoc __ret_0_symbol;
[L7071]              havoc __ret_0_decimals;
[L7072]              havoc __ret_0_initialSupply;
[L7073]              havoc tmpNow;
[L7074]              havoc gas;
[L7075]              assume gas > 4000000 && gas <= 8000000;
[L7076]              tmpNow := now;
[L7077]              havoc now;
[L7078]              assume now > tmpNow;
[L7079]              assume msgsender_MSG != null;
[L7080]              assume DType[msgsender_MSG] != SafeMath;
[L7081]              assume DType[msgsender_MSG] != Ownable;
[L7082]              assume DType[msgsender_MSG] != ERC20Basic;
[L7083]              assume DType[msgsender_MSG] != BasicToken;
[L7084]              assume DType[msgsender_MSG] != ERC20;
[L7085]              assume DType[msgsender_MSG] != StandardToken;
[L7086]              assume DType[msgsender_MSG] != BurnableToken;
[L7087]              assume DType[msgsender_MSG] != ECU;
[L7088]              Alloc[msgsender_MSG] := true;
[L7089]  COND FALSE  !(choice == 22)
[L7095]  COND FALSE  !(choice == 21)
[L7101]  COND FALSE  !(choice == 20)
[L7107]  COND FALSE  !(choice == 19)
[L7113]  COND FALSE  !(choice == 18)
[L7120]  COND FALSE  !(choice == 17)
[L7126]  COND FALSE  !(choice == 16)
[L7132]  COND FALSE  !(choice == 15)
[L7138]  COND FALSE  !(choice == 14)
[L7144]  COND FALSE  !(choice == 13)
[L7150]  COND FALSE  !(choice == 12)
[L7156]  COND FALSE  !(choice == 11)
[L7162]  COND FALSE  !(choice == 10)
[L7168]  COND FALSE  !(choice == 9)
[L7175]  COND FALSE  !(choice == 8)
[L7182]  COND FALSE  !(choice == 7)
[L7189]  COND TRUE   choice == 6
[L7190]              gas := gas - 21000;
[L7191]  COND TRUE   gas >= 0
[L7192]              assume _subtractedValue_s626 >= 0 && _subtractedValue_s626 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7193]              assume msgvalue_MSG == 0;
[L7194]  CALL        call success_s626 := decreaseApproval~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s626, _subtractedValue_s626);
[L1609]              havoc __exception;
[L1610]              revert := false;
[L1611]  COND FALSE  !(__exception)
[L1640]  CALL        call success_s626 := decreaseApproval~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s626, _subtractedValue_s626);
[L3928]              oldValue_s626 := allowed_StandardToken[this][msgsender_MSG][_spender_s626];
[L3929]  COND TRUE   _subtractedValue_s626 > oldValue_s626
[L3930]              sum_allowed3[msgsender_MSG] := sum_allowed3[msgsender_MSG] - allowed_StandardToken[this][msgsender_MSG][_spender_s626];
[L3931]              allowed_StandardToken[this][msgsender_MSG][_spender_s626] := 0;
[L3932]              sum_allowed3[msgsender_MSG] := sum_allowed3[msgsender_MSG] + allowed_StandardToken[this][msgsender_MSG][_spender_s626];
[L3942]              assert { :EventEmitted "Approval_StandardToken" } true;
[L3943]              success_s626 := true;
[L1640]  RET         call success_s626 := decreaseApproval~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s626, _subtractedValue_s626);
[L1641]              assume !revert && gas >= 0;
[L7194]  RET         call success_s626 := decreaseApproval~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s626, _subtractedValue_s626);
[L7245]  RET         call CorralChoice_ECU(this);
[L7245]  CALL        call CorralChoice_ECU(this);
[L7029]              havoc msgsender_MSG;
[L7030]              havoc msgvalue_MSG;
[L7031]              havoc choice;
[L7032]              havoc __ret_0_owner;
[L7033]              havoc newOwner_s146;
[L7034]              havoc __ret_0_totalSupply;
[L7035]              havoc _owner_s352;
[L7036]              havoc balance_s352;
[L7037]              havoc _to_s340;
[L7038]              havoc _value_s340;
[L7039]              havoc __ret_0_transfer;
[L7040]              havoc arg745_s0;
[L7041]              havoc __ret_0_allowedAddresses;
[L7042]              havoc arg746_s0;
[L7043]              havoc __ret_0_lockedAddresses;
[L7044]              havoc __ret_0_locked;
[L7045]              havoc _addr_s218;
[L7046]              havoc _allowed_s218;
[L7047]              havoc _addr_s240;
[L7048]              havoc _locked_s240;
[L7049]              havoc _locked_s252;
[L7050]              havoc _addr_s282;
[L7051]              havoc __ret_0_canTransfer;
[L7052]              havoc _owner_s525;
[L7053]              havoc _spender_s525;
[L7054]              havoc remaining_s525;
[L7055]              havoc _from_s481;
[L7056]              havoc _to_s481;
[L7057]              havoc _value_s481;
[L7058]              havoc __ret_0_transferFrom;
[L7059]              havoc _spender_s509;
[L7060]              havoc _value_s509;
[L7061]              havoc __ret_0_approve;
[L7062]              havoc _spender_s566;
[L7063]              havoc _addedValue_s566;
[L7064]              havoc success_s566;
[L7065]              havoc _spender_s626;
[L7066]              havoc _subtractedValue_s626;
[L7067]              havoc success_s626;
[L7068]              havoc _value_s692;
[L7069]              havoc __ret_0_name;
[L7070]              havoc __ret_0_symbol;
[L7071]              havoc __ret_0_decimals;
[L7072]              havoc __ret_0_initialSupply;
[L7073]              havoc tmpNow;
[L7074]              havoc gas;
[L7075]              assume gas > 4000000 && gas <= 8000000;
[L7076]              tmpNow := now;
[L7077]              havoc now;
[L7078]              assume now > tmpNow;
[L7079]              assume msgsender_MSG != null;
[L7080]              assume DType[msgsender_MSG] != SafeMath;
[L7081]              assume DType[msgsender_MSG] != Ownable;
[L7082]              assume DType[msgsender_MSG] != ERC20Basic;
[L7083]              assume DType[msgsender_MSG] != BasicToken;
[L7084]              assume DType[msgsender_MSG] != ERC20;
[L7085]              assume DType[msgsender_MSG] != StandardToken;
[L7086]              assume DType[msgsender_MSG] != BurnableToken;
[L7087]              assume DType[msgsender_MSG] != ECU;
[L7088]              Alloc[msgsender_MSG] := true;
[L7089]  COND FALSE  !(choice == 22)
[L7095]  COND FALSE  !(choice == 21)
[L7101]  COND FALSE  !(choice == 20)
[L7107]  COND FALSE  !(choice == 19)
[L7113]  COND FALSE  !(choice == 18)
[L7120]  COND FALSE  !(choice == 17)
[L7126]  COND FALSE  !(choice == 16)
[L7132]  COND FALSE  !(choice == 15)
[L7138]  COND FALSE  !(choice == 14)
[L7144]  COND FALSE  !(choice == 13)
[L7150]  COND FALSE  !(choice == 12)
[L7156]  COND FALSE  !(choice == 11)
[L7162]  COND FALSE  !(choice == 10)
[L7168]  COND FALSE  !(choice == 9)
[L7175]  COND TRUE   choice == 8
[L7176]              gas := gas - 21000;
[L7177]  COND TRUE   gas >= 0
[L7178]              assume _value_s509 >= 0 && _value_s509 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7179]              assume msgvalue_MSG == 0;
[L7180]  CALL        call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s509, _value_s509);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != _spender_s509;
[L3]                 call_approve_StandardToken0 := true;
[L3]                 call_approve_StandardToken0 := false;
[L3]                 revert := revert_hold;
[L1407]              havoc __exception;
[L1408]              revert := false;
[L1409]  COND FALSE  !(__exception)
[L1438]  CALL        call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s509, _value_s509);
[L3853]              sum_allowed3[msgsender_MSG] := sum_allowed3[msgsender_MSG] - allowed_StandardToken[this][msgsender_MSG][_spender_s509];
[L3854]              allowed_StandardToken[this][msgsender_MSG][_spender_s509] := _value_s509;
[L3855]              sum_allowed3[msgsender_MSG] := sum_allowed3[msgsender_MSG] + allowed_StandardToken[this][msgsender_MSG][_spender_s509];
[L3856]              assert { :EventEmitted "Approval_StandardToken" } true;
[L3857]              __ret_0_ := true;
[L1438]  RET         call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s509, _value_s509);
[L1439]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((__ret_0_ == true && allowed_StandardToken[this][msgsender_MSG][_spender_s509] == _value_s509) && totalSupply_ERC20Basic[this] == old(totalSupply_ERC20Basic[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2])) && allowedAddresses_BasicToken[this] == old(allowedAddresses_BasicToken[this])) && lockedAddresses_BasicToken[this] == old(lockedAddresses_BasicToken[this])) && locked_BasicToken[this] == old(locked_BasicToken[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L3]                 revert := revert_hold;
[L7180]  RET         call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s509, _value_s509);
[L7245]  RET         call CorralChoice_ECU(this);

Loop:
[L7245]  CALL        call CorralChoice_ECU(this);
[L7029]              havoc msgsender_MSG;
[L7030]              havoc msgvalue_MSG;
[L7031]              havoc choice;
[L7032]              havoc __ret_0_owner;
[L7033]              havoc newOwner_s146;
[L7034]              havoc __ret_0_totalSupply;
[L7035]              havoc _owner_s352;
[L7036]              havoc balance_s352;
[L7037]              havoc _to_s340;
[L7038]              havoc _value_s340;
[L7039]              havoc __ret_0_transfer;
[L7040]              havoc arg745_s0;
[L7041]              havoc __ret_0_allowedAddresses;
[L7042]              havoc arg746_s0;
[L7043]              havoc __ret_0_lockedAddresses;
[L7044]              havoc __ret_0_locked;
[L7045]              havoc _addr_s218;
[L7046]              havoc _allowed_s218;
[L7047]              havoc _addr_s240;
[L7048]              havoc _locked_s240;
[L7049]              havoc _locked_s252;
[L7050]              havoc _addr_s282;
[L7051]              havoc __ret_0_canTransfer;
[L7052]              havoc _owner_s525;
[L7053]              havoc _spender_s525;
[L7054]              havoc remaining_s525;
[L7055]              havoc _from_s481;
[L7056]              havoc _to_s481;
[L7057]              havoc _value_s481;
[L7058]              havoc __ret_0_transferFrom;
[L7059]              havoc _spender_s509;
[L7060]              havoc _value_s509;
[L7061]              havoc __ret_0_approve;
[L7062]              havoc _spender_s566;
[L7063]              havoc _addedValue_s566;
[L7064]              havoc success_s566;
[L7065]              havoc _spender_s626;
[L7066]              havoc _subtractedValue_s626;
[L7067]              havoc success_s626;
[L7068]              havoc _value_s692;
[L7069]              havoc __ret_0_name;
[L7070]              havoc __ret_0_symbol;
[L7071]              havoc __ret_0_decimals;
[L7072]              havoc __ret_0_initialSupply;
[L7073]              havoc tmpNow;
[L7074]              havoc gas;
[L7075]              assume gas > 4000000 && gas <= 8000000;
[L7076]              tmpNow := now;
[L7077]              havoc now;
[L7078]              assume now > tmpNow;
[L7079]              assume msgsender_MSG != null;
[L7080]              assume DType[msgsender_MSG] != SafeMath;
[L7081]              assume DType[msgsender_MSG] != Ownable;
[L7082]              assume DType[msgsender_MSG] != ERC20Basic;
[L7083]              assume DType[msgsender_MSG] != BasicToken;
[L7084]              assume DType[msgsender_MSG] != ERC20;
[L7085]              assume DType[msgsender_MSG] != StandardToken;
[L7086]              assume DType[msgsender_MSG] != BurnableToken;
[L7087]              assume DType[msgsender_MSG] != ECU;
[L7088]              Alloc[msgsender_MSG] := true;
[L7089]  COND FALSE  !(choice == 22)
[L7095]  COND FALSE  !(choice == 21)
[L7101]  COND FALSE  !(choice == 20)
[L7107]  COND FALSE  !(choice == 19)
[L7113]  COND FALSE  !(choice == 18)
[L7120]  COND FALSE  !(choice == 17)
[L7126]  COND FALSE  !(choice == 16)
[L7132]  COND FALSE  !(choice == 15)
[L7138]  COND FALSE  !(choice == 14)
[L7144]  COND FALSE  !(choice == 13)
[L7150]  COND FALSE  !(choice == 12)
[L7156]  COND FALSE  !(choice == 11)
[L7162]  COND FALSE  !(choice == 10)
[L7168]  COND FALSE  !(choice == 9)
[L7175]  COND TRUE   choice == 8
[L7176]              gas := gas - 21000;
[L7177]  COND TRUE   gas >= 0
[L7178]              assume _value_s509 >= 0 && _value_s509 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7179]              assume msgvalue_MSG == 0;
[L7180]  CALL        call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s509, _value_s509);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != _spender_s509;
[L3]                 call_approve_StandardToken0 := true;
[L3]                 call_approve_StandardToken0 := false;
[L3]                 revert := revert_hold;
[L1407]              havoc __exception;
[L1408]              revert := false;
[L1409]  COND FALSE  !(__exception)
[L1438]  CALL        call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s509, _value_s509);
[L3853]              sum_allowed3[msgsender_MSG] := sum_allowed3[msgsender_MSG] - allowed_StandardToken[this][msgsender_MSG][_spender_s509];
[L3854]              allowed_StandardToken[this][msgsender_MSG][_spender_s509] := _value_s509;
[L3855]              sum_allowed3[msgsender_MSG] := sum_allowed3[msgsender_MSG] + allowed_StandardToken[this][msgsender_MSG][_spender_s509];
[L3856]              assert { :EventEmitted "Approval_StandardToken" } true;
[L3857]              __ret_0_ := true;
[L1438]  RET         call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s509, _value_s509);
[L1439]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((__ret_0_ == true && allowed_StandardToken[this][msgsender_MSG][_spender_s509] == _value_s509) && totalSupply_ERC20Basic[this] == old(totalSupply_ERC20Basic[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2])) && allowedAddresses_BasicToken[this] == old(allowedAddresses_BasicToken[this])) && lockedAddresses_BasicToken[this] == old(lockedAddresses_BasicToken[this])) && locked_BasicToken[this] == old(locked_BasicToken[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L3]                 revert := revert_hold;
[L7180]  RET         call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s509, _value_s509);
[L7245]  RET         call CorralChoice_ECU(this);

[2020-11-25 15:00:49,736 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 15:00:49,736 INFO  L82        PathProgramCache]: Analyzing trace with hash 1486101840, now seen corresponding path program 1 times
[2020-11-25 15:00:49,737 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 15:00:49,781 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 15:00:50,033 INFO  L134       CoverageAnalysis]: Checked inductivity of 1389 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1389 trivial. 0 not checked.
[2020-11-25 15:00:50,033 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 15:00:50,033 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 15:00:50,033 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 15:00:50,034 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 15:00:50,034 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=29, Unknown=0, NotChecked=0, Total=42
[2020-11-25 15:00:50,034 INFO  L87              Difference]: Start difference. First operand 2192 states and 2418 transitions. cyclomatic complexity: 229 Second operand 7 states.
[2020-11-25 15:00:50,273 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 15:00:50,274 INFO  L93              Difference]: Finished difference Result 1226 states and 1346 transitions.
[2020-11-25 15:00:50,274 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 15:00:50,274 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1226 states and 1346 transitions.
[2020-11-25 15:00:50,276 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 15:00:50,276 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1226 states to 0 states and 0 transitions.
[2020-11-25 15:00:50,276 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-25 15:00:50,276 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-25 15:00:50,276 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-25 15:00:50,276 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 15:00:50,276 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 15:00:50,276 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 15:00:50,276 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 15:00:50,276 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 15:00:50,276 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-25 15:00:50,276 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 15:00:50,276 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-25 15:00:50,279 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 03:00:50 BasicIcfg
[2020-11-25 15:00:50,279 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 15:00:50,280 INFO  L168              Benchmark]: Toolchain (without parser) took 9803.77 ms. Allocated memory was 1.0 GB in the beginning and 2.2 GB in the end (delta: 1.1 GB). Free memory was 935.2 MB in the beginning and 1.8 GB in the end (delta: -862.2 MB). Peak memory consumption was 275.5 MB. Max. memory is 15.3 GB.
[2020-11-25 15:00:50,281 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.16 ms. Allocated memory is still 1.0 GB. Free memory is still 956.7 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 15:00:50,281 INFO  L168              Benchmark]: Boogie Preprocessor took 115.71 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 913.7 MB in the end (delta: 21.5 MB). Peak memory consumption was 21.5 MB. Max. memory is 15.3 GB.
[2020-11-25 15:00:50,281 INFO  L168              Benchmark]: UtopiaSpecLang took 65.70 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 908.4 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 15:00:50,282 INFO  L168              Benchmark]: Boogie Printer took 21.35 ms. Allocated memory is still 1.0 GB. Free memory was 908.4 MB in the beginning and 903.0 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 15:00:50,282 INFO  L168              Benchmark]: RCFGBuilder took 1051.70 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 58.7 MB). Free memory was 903.0 MB in the beginning and 976.6 MB in the end (delta: -73.6 MB). Peak memory consumption was 192.3 MB. Max. memory is 15.3 GB.
[2020-11-25 15:00:50,282 INFO  L168              Benchmark]: UtopiaLTL2Aut took 39.22 ms. Allocated memory is still 1.1 GB. Free memory was 976.6 MB in the beginning and 969.8 MB in the end (delta: 6.8 MB). Peak memory consumption was 6.8 MB. Max. memory is 15.3 GB.
[2020-11-25 15:00:50,283 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1883.14 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 165.7 MB). Free memory was 969.8 MB in the beginning and 774.7 MB in the end (delta: 195.1 MB). Peak memory consumption was 467.4 MB. Max. memory is 15.3 GB.
[2020-11-25 15:00:50,283 INFO  L168              Benchmark]: BlockEncodingV2 took 202.69 ms. Allocated memory is still 1.3 GB. Free memory was 774.7 MB in the beginning and 679.9 MB in the end (delta: 94.8 MB). Peak memory consumption was 94.8 MB. Max. memory is 15.3 GB.
[2020-11-25 15:00:50,283 INFO  L168              Benchmark]: BuchiAutomizer took 6421.26 ms. Allocated memory was 1.3 GB in the beginning and 2.2 GB in the end (delta: 913.3 MB). Free memory was 679.9 MB in the beginning and 1.8 GB in the end (delta: -1.1 GB). There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 15:00:50,286 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    6264 locations, 11468 edges
  - StatisticsResult: Encoded RCFG
    6202 locations, 11311 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.16 ms. Allocated memory is still 1.0 GB. Free memory is still 956.7 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 115.71 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 913.7 MB in the end (delta: 21.5 MB). Peak memory consumption was 21.5 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 65.70 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 908.4 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 21.35 ms. Allocated memory is still 1.0 GB. Free memory was 908.4 MB in the beginning and 903.0 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 1051.70 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 58.7 MB). Free memory was 903.0 MB in the beginning and 976.6 MB in the end (delta: -73.6 MB). Peak memory consumption was 192.3 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 39.22 ms. Allocated memory is still 1.1 GB. Free memory was 976.6 MB in the beginning and 969.8 MB in the end (delta: 6.8 MB). Peak memory consumption was 6.8 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1883.14 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 165.7 MB). Free memory was 969.8 MB in the beginning and 774.7 MB in the end (delta: 195.1 MB). Peak memory consumption was 467.4 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 202.69 ms. Allocated memory is still 1.3 GB. Free memory was 774.7 MB in the beginning and 679.9 MB in the end (delta: 94.8 MB). Peak memory consumption was 94.8 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 6421.26 ms. Allocated memory was 1.3 GB in the beginning and 2.2 GB in the end (delta: 913.3 MB). Free memory was 679.9 MB in the beginning and 1.8 GB in the end (delta: -1.1 GB). There was no memory consumed. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    2507 locations, 3478 edges
  - StatisticsResult: BuchiProgram size
    6264 locations, 11468 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 6 terminating modules (6 trivial, 0 deterministic, 0 nondeterministic). 6 modules have a trivial ranking function, the largest among these consists of 15 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 6.3s and 7 iterations.  TraceHistogramMax:12. Analysis of lassos took 1.6s. Construction of modules took 3.0s. BÃ¼chi inclusion checks took 1.0s. Highest rank in rank-based complementation 0. Minimization of det autom 6. Minimization of nondet autom 0. Automata minimization 0.1s AutomataMinimizationTime, 5 MinimizatonAttempts, 2456 StatesRemovedByMinimization, 4 NontrivialMinimizations. Non-live state removal took 0.1s Buchi closure took 0.0s. Biggest automaton had 3750 states and ocurred in iteration 3.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 20867 SDtfs, 22675 SDslu, 27441 SDs, 0 SdLazy, 38801 SolverSat, 3771 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 3.0s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU6 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_approve_StandardToken0) ==> ( <>(success_approve_StandardToken0) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
