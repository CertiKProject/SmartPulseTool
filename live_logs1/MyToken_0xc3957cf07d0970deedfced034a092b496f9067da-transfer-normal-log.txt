This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 01:53:14,088 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 01:53:14,089 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 01:53:14,101 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 01:53:14,101 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 01:53:14,102 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 01:53:14,103 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 01:53:14,105 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 01:53:14,107 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 01:53:14,107 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 01:53:14,108 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 01:53:14,108 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 01:53:14,109 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 01:53:14,110 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 01:53:14,111 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 01:53:14,111 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 01:53:14,112 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 01:53:14,113 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 01:53:14,114 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 01:53:14,116 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 01:53:14,117 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 01:53:14,117 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 01:53:14,119 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 01:53:14,120 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 01:53:14,120 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 01:53:14,120 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 01:53:14,121 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 01:53:14,121 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 01:53:14,121 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 01:53:14,122 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 01:53:14,122 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 01:53:14,123 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 01:53:14,123 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 01:53:14,124 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 01:53:14,124 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 01:53:14,125 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 01:53:14,125 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 01:53:14,125 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 01:53:14,125 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 01:53:14,126 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 01:53:14,127 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 01:53:14,127 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 01:53:14,135 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 01:53:14,135 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 01:53:14,136 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 01:53:14,136 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 01:53:14,136 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 01:53:14,136 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 01:53:14,136 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 01:53:14,137 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 01:53:14,137 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 01:53:14,137 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 01:53:14,137 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 01:53:14,137 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 01:53:14,137 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 01:53:14,137 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 01:53:14,137 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 01:53:14,137 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 01:53:14,137 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 01:53:14,138 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 01:53:14,138 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 01:53:14,138 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 01:53:14,138 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 01:53:14,138 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 01:53:14,138 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 01:53:14,139 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 01:53:14,139 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 01:53:14,139 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 01:53:14,161 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 01:53:14,174 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 01:53:14,177 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 01:53:14,178 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 01:53:14,178 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 01:53:14,179 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_transfer-normal.bpl
[2020-11-25 01:53:14,179 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_transfer-normal.bpl'
[2020-11-25 01:53:14,270 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 01:53:14,271 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 01:53:14,271 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 01:53:14,271 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 01:53:14,271 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 01:53:14,288 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:53:14" (1/1) ...
[2020-11-25 01:53:14,290 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:53:14" (1/1) ...
[2020-11-25 01:53:14,326 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:53:14" (1/1) ...
[2020-11-25 01:53:14,327 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:53:14" (1/1) ...
[2020-11-25 01:53:14,349 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:53:14" (1/1) ...
[2020-11-25 01:53:14,360 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:53:14" (1/1) ...
[2020-11-25 01:53:14,367 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:53:14" (1/1) ...
[2020-11-25 01:53:14,376 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 01:53:14,377 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 01:53:14,377 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 01:53:14,379 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 01:53:14,383 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:53:14" (1/1) ...
[2020-11-25 01:53:14,404 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(MyToken.transfer(to, value), p1 != msg.sender && p1 != to && msg.sender != to && value <= balances_MyToken[this][msg.sender] && balances_MyToken[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_MyToken[this][to] >= 0 && balances_MyToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_MyToken[this][msg.sender] >= 0 &&  balances_MyToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(MyToken.transfer(to, value), return == true && balances_MyToken[this][msg.sender] == old(balances_MyToken[this][msg.sender]) - value && balances_MyToken[this][to] == old(balances_MyToken[this][to]) + value && _totalSupply_MyToken[this] == old(_totalSupply_MyToken[this]) && allowed_MyToken[this] == old(allowed_MyToken[this]) && balances_MyToken[this][p1] == old(balances_MyToken[this][p1]) && symbol_MyToken[this] == old(symbol_MyToken[this]) && name_MyToken[this] == old(name_MyToken[this]) && decimals_MyToken[this] == old(decimals_MyToken[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-25 01:53:14,410 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(MyToken.transfer(to, value), p1 != msg.sender && p1 != to && msg.sender != to && value <= balances_MyToken[this][msg.sender] && balances_MyToken[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_MyToken[this][to] >= 0 && balances_MyToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_MyToken[this][msg.sender] >= 0 &&  balances_MyToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(MyToken.transfer(to, value), return == true && balances_MyToken[this][msg.sender] == old(balances_MyToken[this][msg.sender]) - value && balances_MyToken[this][to] == old(balances_MyToken[this][to]) + value && _totalSupply_MyToken[this] == old(_totalSupply_MyToken[this]) && allowed_MyToken[this] == old(allowed_MyToken[this]) && balances_MyToken[this][p1] == old(balances_MyToken[this][p1]) && symbol_MyToken[this] == old(symbol_MyToken[this]) && name_MyToken[this] == old(name_MyToken[this]) && decimals_MyToken[this] == old(decimals_MyToken[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-25 01:53:14,419 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(MyToken.transfer(to, value), p1 != msg.sender && p1 != to && msg.sender != to && value <= balances_MyToken[this][msg.sender] && balances_MyToken[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_MyToken[this][to] >= 0 && balances_MyToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_MyToken[this][msg.sender] >= 0 &&  balances_MyToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(MyToken.transfer(to, value), return == true && balances_MyToken[this][msg.sender] == old(balances_MyToken[this][msg.sender]) - value && balances_MyToken[this][to] == old(balances_MyToken[this][to]) + value && _totalSupply_MyToken[this] == old(_totalSupply_MyToken[this]) && allowed_MyToken[this] == old(allowed_MyToken[this]) && balances_MyToken[this][p1] == old(balances_MyToken[this][p1]) && symbol_MyToken[this] == old(symbol_MyToken[this]) && name_MyToken[this] == old(name_MyToken[this]) && decimals_MyToken[this] == old(decimals_MyToken[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-25 01:53:14,433 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( p1!=msg.sender && p1!=to_s387 ) && msg.sender!=to_s387 ) && tokens_s387<=balances_MyToken[this][msg.sender] ) && ( balances_MyToken[this][to_s387] + tokens_s387 )<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && tokens_s387>=0 ) && tokens_s387<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_MyToken[this][to_s387]>=0 ) && balances_MyToken[this][to_s387]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_MyToken[this][msg.sender]>=0 ) && balances_MyToken[this][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MyToken>]],BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[to_s387,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MyToken>]]],BinaryExpression[COMPNEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MyToken>],IdentifierExpression[to_s387,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MyToken>]]],BinaryExpression[COMPLEQ,IdentifierExpression[tokens_s387,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MyToken>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_MyToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MyToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MyToken>]]]]],BinaryExpression[COMPLT,BinaryExpression[ARITHPLUS,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_MyToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MyToken>]]],[IdentifierExpression[to_s387,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MyToken>]]],IdentifierExpression[tokens_s387,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MyToken>]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,IdentifierExpression[tokens_s387,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MyToken>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[tokens_s387,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MyToken>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_MyToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MyToken>]]],[IdentifierExpression[to_s387,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MyToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_MyToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MyToken>]]],[IdentifierExpression[to_s387,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MyToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_MyToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MyToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MyToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_MyToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MyToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MyToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 01:53:14,436 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( success_s387==true && balances_MyToken[this][msg.sender]==( ( old(balances_MyToken[this][msg.sender]) ) - tokens_s387 ) ) && balances_MyToken[this][to_s387]==( ( old(balances_MyToken[this][to_s387]) ) + tokens_s387 ) ) && _totalSupply_MyToken[this]==( old(_totalSupply_MyToken[this]) ) ) && allowed_MyToken[this]==( old(allowed_MyToken[this]) ) ) && balances_MyToken[this][p1]==( old(balances_MyToken[this][p1]) ) ) && symbol_MyToken[this]==( old(symbol_MyToken[this]) ) ) && name_MyToken[this]==( old(name_MyToken[this]) ) ) && decimals_MyToken[this]==( old(decimals_MyToken[this]) ) ) && owner_Owned[this]==( old(owner_Owned[this]) ) ) && newOwner_Owned[this]==( old(newOwner_Owned[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[success_s387,<IMPLEMENTATION_OUTPARAM,transfer~address~uint256_MyToken>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_MyToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MyToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MyToken>]]],BinaryExpression[ARITHMINUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_MyToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MyToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MyToken>]]]],IdentifierExpression[tokens_s387,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MyToken>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_MyToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MyToken>]]],[IdentifierExpression[to_s387,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MyToken>]]],BinaryExpression[ARITHPLUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_MyToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MyToken>]]],[IdentifierExpression[to_s387,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MyToken>]]]],IdentifierExpression[tokens_s387,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MyToken>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_totalSupply_MyToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MyToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_totalSupply_MyToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MyToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[allowed_MyToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MyToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[allowed_MyToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MyToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_MyToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MyToken>]]],[IdentifierExpression[p1,GLOBAL]]],UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_MyToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MyToken>]]],[IdentifierExpression[p1,GLOBAL]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[symbol_MyToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MyToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[symbol_MyToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MyToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[name_MyToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MyToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[name_MyToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MyToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[decimals_MyToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MyToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[decimals_MyToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MyToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[owner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MyToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[owner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MyToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[newOwner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MyToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[newOwner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MyToken>]]]]]]
[2020-11-25 01:53:14,441 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(MyToken.transfer(to, value), p1 != msg.sender && p1 != to && msg.sender != to && value <= balances_MyToken[this][msg.sender] && balances_MyToken[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_MyToken[this][to] >= 0 && balances_MyToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_MyToken[this][msg.sender] >= 0 &&  balances_MyToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(MyToken.transfer(to, value), return == true && balances_MyToken[this][msg.sender] == old(balances_MyToken[this][msg.sender]) - value && balances_MyToken[this][to] == old(balances_MyToken[this][to]) + value && _totalSupply_MyToken[this] == old(_totalSupply_MyToken[this]) && allowed_MyToken[this] == old(allowed_MyToken[this]) && balances_MyToken[this][p1] == old(balances_MyToken[this][p1]) && symbol_MyToken[this] == old(symbol_MyToken[this]) && name_MyToken[this] == old(name_MyToken[this]) && decimals_MyToken[this] == old(decimals_MyToken[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-25 01:53:14,441 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transfer_MyToken0) ==> ( <>AP(success_transfer_MyToken0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 01:53:14,450 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:53:14 PropertyContainer
[2020-11-25 01:53:14,450 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 01:53:14,450 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 01:53:14,450 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 01:53:14,450 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 01:53:14,451 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:53:14" (1/2) ...
[2020-11-25 01:53:14,452 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 01:53:14,452 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 01:53:14,465 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:53:14" (2/2) ...
[2020-11-25 01:53:14,465 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 01:53:14,466 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 01:53:14,466 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 01:53:14,466 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 01:53:14,467 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:53:14" (1/2) ...
[2020-11-25 01:53:14,518 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 01:53:14,518 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 01:53:14,518 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 01:53:14,518 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 01:53:14,518 INFO  L130     BoogieDeclarations]: Found specification of procedure safeAdd~uint256~uint256_SafeMath
[2020-11-25 01:53:14,519 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeAdd~uint256~uint256_SafeMath
[2020-11-25 01:53:14,519 INFO  L130     BoogieDeclarations]: Found specification of procedure safeSub~uint256~uint256_SafeMath
[2020-11-25 01:53:14,519 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeSub~uint256~uint256_SafeMath
[2020-11-25 01:53:14,519 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMul~uint256~uint256_SafeMath
[2020-11-25 01:53:14,519 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMul~uint256~uint256_SafeMath
[2020-11-25 01:53:14,519 INFO  L130     BoogieDeclarations]: Found specification of procedure safeDiv~uint256~uint256_SafeMath
[2020-11-25 01:53:14,519 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeDiv~uint256~uint256_SafeMath
[2020-11-25 01:53:14,519 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface_NoBaseCtor__success
[2020-11-25 01:53:14,519 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface
[2020-11-25 01:53:14,519 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface
[2020-11-25 01:53:14,519 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20Interface
[2020-11-25 01:53:14,520 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20Interface
[2020-11-25 01:53:14,520 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20Interface
[2020-11-25 01:53:14,520 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Interface
[2020-11-25 01:53:14,520 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Interface
[2020-11-25 01:53:14,520 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Interface
[2020-11-25 01:53:14,520 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__success
[2020-11-25 01:53:14,520 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack
[2020-11-25 01:53:14,520 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack
[2020-11-25 01:53:14,521 INFO  L130     BoogieDeclarations]: Found specification of procedure receiveApproval~address~uint256~address~bytes_ApproveAndCallFallBack
[2020-11-25 01:53:14,521 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned_NoBaseCtor__success
[2020-11-25 01:53:14,521 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned
[2020-11-25 01:53:14,521 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned
[2020-11-25 01:53:14,521 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned
[2020-11-25 01:53:14,521 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned
[2020-11-25 01:53:14,521 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Owned
[2020-11-25 01:53:14,521 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Owned
[2020-11-25 01:53:14,521 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned
[2020-11-25 01:53:14,521 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned
[2020-11-25 01:53:14,521 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Owned
[2020-11-25 01:53:14,521 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Owned
[2020-11-25 01:53:14,521 INFO  L130     BoogieDeclarations]: Found specification of procedure MyToken_MyToken_NoBaseCtor__success
[2020-11-25 01:53:14,521 INFO  L130     BoogieDeclarations]: Found specification of procedure MyToken_MyToken
[2020-11-25 01:53:14,522 INFO  L138     BoogieDeclarations]: Found implementation of procedure MyToken_MyToken
[2020-11-25 01:53:14,522 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_MyToken
[2020-11-25 01:53:14,522 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_MyToken
[2020-11-25 01:53:14,522 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_MyToken
[2020-11-25 01:53:14,522 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_MyToken
[2020-11-25 01:53:14,522 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_MyToken
[2020-11-25 01:53:14,522 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_MyToken
[2020-11-25 01:53:14,522 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_MyToken
[2020-11-25 01:53:14,522 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_MyToken
[2020-11-25 01:53:14,522 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_MyToken
[2020-11-25 01:53:14,522 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_MyToken
[2020-11-25 01:53:14,522 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_MyToken
[2020-11-25 01:53:14,522 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_MyToken
[2020-11-25 01:53:14,523 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_MyToken
[2020-11-25 01:53:14,523 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_MyToken
[2020-11-25 01:53:14,523 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_MyToken__success
[2020-11-25 01:53:14,523 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_MyToken
[2020-11-25 01:53:14,523 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_MyToken
[2020-11-25 01:53:14,523 INFO  L130     BoogieDeclarations]: Found specification of procedure name_MyToken
[2020-11-25 01:53:14,523 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_MyToken
[2020-11-25 01:53:14,523 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_MyToken
[2020-11-25 01:53:14,523 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_MyToken
[2020-11-25 01:53:14,523 INFO  L130     BoogieDeclarations]: Found specification of procedure _totalSupply_MyToken
[2020-11-25 01:53:14,523 INFO  L138     BoogieDeclarations]: Found implementation of procedure _totalSupply_MyToken
[2020-11-25 01:53:14,523 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 01:53:14,524 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 01:53:14,524 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 01:53:14,524 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 01:53:14,524 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 01:53:14,524 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 01:53:14,524 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Interface
[2020-11-25 01:53:14,524 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Interface
[2020-11-25 01:53:14,524 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ApproveAndCallFallBack
[2020-11-25 01:53:14,524 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ApproveAndCallFallBack
[2020-11-25 01:53:14,524 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Owned
[2020-11-25 01:53:14,525 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Owned
[2020-11-25 01:53:14,525 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_MyToken
[2020-11-25 01:53:14,525 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 01:53:14,525 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 01:53:14,525 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 01:53:14,525 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 01:53:14,525 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 01:53:14,525 INFO  L130     BoogieDeclarations]: Found specification of procedure safeAdd~uint256~uint256_SafeMath__success
[2020-11-25 01:53:14,525 INFO  L130     BoogieDeclarations]: Found specification of procedure safeAdd~uint256~uint256_SafeMath__fail
[2020-11-25 01:53:14,526 INFO  L130     BoogieDeclarations]: Found specification of procedure safeSub~uint256~uint256_SafeMath__success
[2020-11-25 01:53:14,526 INFO  L130     BoogieDeclarations]: Found specification of procedure safeSub~uint256~uint256_SafeMath__fail
[2020-11-25 01:53:14,526 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMul~uint256~uint256_SafeMath__success
[2020-11-25 01:53:14,526 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMul~uint256~uint256_SafeMath__fail
[2020-11-25 01:53:14,526 INFO  L130     BoogieDeclarations]: Found specification of procedure safeDiv~uint256~uint256_SafeMath__success
[2020-11-25 01:53:14,526 INFO  L130     BoogieDeclarations]: Found specification of procedure safeDiv~uint256~uint256_SafeMath__fail
[2020-11-25 01:53:14,526 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface_NoBaseCtor__fail
[2020-11-25 01:53:14,526 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface__success
[2020-11-25 01:53:14,526 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface__fail
[2020-11-25 01:53:14,526 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__fail
[2020-11-25 01:53:14,527 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__success
[2020-11-25 01:53:14,527 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__fail
[2020-11-25 01:53:14,527 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned_NoBaseCtor__fail
[2020-11-25 01:53:14,527 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned__success
[2020-11-25 01:53:14,527 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned__fail
[2020-11-25 01:53:14,527 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned__success
[2020-11-25 01:53:14,527 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned__fail
[2020-11-25 01:53:14,527 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Owned__success
[2020-11-25 01:53:14,527 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Owned__fail
[2020-11-25 01:53:14,527 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned__success
[2020-11-25 01:53:14,528 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned__fail
[2020-11-25 01:53:14,528 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Owned__success
[2020-11-25 01:53:14,528 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Owned__fail
[2020-11-25 01:53:14,528 INFO  L130     BoogieDeclarations]: Found specification of procedure MyToken_MyToken_NoBaseCtor__fail
[2020-11-25 01:53:14,528 INFO  L130     BoogieDeclarations]: Found specification of procedure MyToken_MyToken__success
[2020-11-25 01:53:14,528 INFO  L130     BoogieDeclarations]: Found specification of procedure MyToken_MyToken__fail
[2020-11-25 01:53:14,528 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_MyToken__success
[2020-11-25 01:53:14,528 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_MyToken__fail
[2020-11-25 01:53:14,528 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_MyToken__success
[2020-11-25 01:53:14,529 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_MyToken__fail
[2020-11-25 01:53:14,529 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_MyToken__success
[2020-11-25 01:53:14,529 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_MyToken__fail
[2020-11-25 01:53:14,529 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_MyToken__success
[2020-11-25 01:53:14,529 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_MyToken__fail
[2020-11-25 01:53:14,529 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_MyToken__success
[2020-11-25 01:53:14,529 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_MyToken__fail
[2020-11-25 01:53:14,529 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_MyToken__success
[2020-11-25 01:53:14,529 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_MyToken__fail
[2020-11-25 01:53:14,529 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_MyToken__success
[2020-11-25 01:53:14,530 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_MyToken__fail
[2020-11-25 01:53:14,530 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_MyToken__fail
[2020-11-25 01:53:14,530 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_MyToken__success
[2020-11-25 01:53:14,530 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_MyToken__fail
[2020-11-25 01:53:14,530 INFO  L130     BoogieDeclarations]: Found specification of procedure name_MyToken__success
[2020-11-25 01:53:14,530 INFO  L130     BoogieDeclarations]: Found specification of procedure name_MyToken__fail
[2020-11-25 01:53:14,530 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_MyToken__success
[2020-11-25 01:53:14,530 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_MyToken__fail
[2020-11-25 01:53:14,530 INFO  L130     BoogieDeclarations]: Found specification of procedure _totalSupply_MyToken__success
[2020-11-25 01:53:14,530 INFO  L130     BoogieDeclarations]: Found specification of procedure _totalSupply_MyToken__fail
[2020-11-25 01:53:14,530 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 01:53:14,531 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 01:53:14,531 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 01:53:14,531 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 01:53:14,531 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 01:53:14,531 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 01:53:14,531 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 01:53:14,531 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 01:53:14,531 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 01:53:14,531 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 01:53:14,532 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeAdd~uint256~uint256_SafeMath__fail
[2020-11-25 01:53:14,532 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeAdd~uint256~uint256_SafeMath__success
[2020-11-25 01:53:14,532 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeSub~uint256~uint256_SafeMath__fail
[2020-11-25 01:53:14,532 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeSub~uint256~uint256_SafeMath__success
[2020-11-25 01:53:14,532 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMul~uint256~uint256_SafeMath__fail
[2020-11-25 01:53:14,532 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMul~uint256~uint256_SafeMath__success
[2020-11-25 01:53:14,532 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeDiv~uint256~uint256_SafeMath__fail
[2020-11-25 01:53:14,532 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeDiv~uint256~uint256_SafeMath__success
[2020-11-25 01:53:14,532 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface_NoBaseCtor__fail
[2020-11-25 01:53:14,533 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface_NoBaseCtor__success
[2020-11-25 01:53:14,533 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface__fail
[2020-11-25 01:53:14,533 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface__success
[2020-11-25 01:53:14,533 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__fail
[2020-11-25 01:53:14,533 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__success
[2020-11-25 01:53:14,533 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__fail
[2020-11-25 01:53:14,533 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__success
[2020-11-25 01:53:14,533 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned_NoBaseCtor__fail
[2020-11-25 01:53:14,533 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned_NoBaseCtor__success
[2020-11-25 01:53:14,533 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned__fail
[2020-11-25 01:53:14,533 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned__success
[2020-11-25 01:53:14,534 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned__fail
[2020-11-25 01:53:14,534 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned__success
[2020-11-25 01:53:14,534 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Owned__fail
[2020-11-25 01:53:14,534 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Owned__success
[2020-11-25 01:53:14,534 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned__fail
[2020-11-25 01:53:14,534 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned__success
[2020-11-25 01:53:14,534 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Owned__fail
[2020-11-25 01:53:14,534 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Owned__success
[2020-11-25 01:53:14,534 INFO  L138     BoogieDeclarations]: Found implementation of procedure MyToken_MyToken_NoBaseCtor__fail
[2020-11-25 01:53:14,534 INFO  L138     BoogieDeclarations]: Found implementation of procedure MyToken_MyToken_NoBaseCtor__success
[2020-11-25 01:53:14,534 INFO  L138     BoogieDeclarations]: Found implementation of procedure MyToken_MyToken__fail
[2020-11-25 01:53:14,535 INFO  L138     BoogieDeclarations]: Found implementation of procedure MyToken_MyToken__success
[2020-11-25 01:53:14,535 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_MyToken__fail
[2020-11-25 01:53:14,535 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_MyToken__success
[2020-11-25 01:53:14,535 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_MyToken__fail
[2020-11-25 01:53:14,535 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_MyToken__success
[2020-11-25 01:53:14,535 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_MyToken__fail
[2020-11-25 01:53:14,535 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_MyToken__success
[2020-11-25 01:53:14,535 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_MyToken__fail
[2020-11-25 01:53:14,535 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_MyToken__success
[2020-11-25 01:53:14,535 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_MyToken__fail
[2020-11-25 01:53:14,535 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_MyToken__success
[2020-11-25 01:53:14,536 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_MyToken__fail
[2020-11-25 01:53:14,536 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_MyToken__success
[2020-11-25 01:53:14,536 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_MyToken__fail
[2020-11-25 01:53:14,536 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_MyToken__success
[2020-11-25 01:53:14,536 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_MyToken__fail
[2020-11-25 01:53:14,536 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_MyToken__success
[2020-11-25 01:53:14,536 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_MyToken__fail
[2020-11-25 01:53:14,536 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_MyToken__success
[2020-11-25 01:53:14,536 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_MyToken__fail
[2020-11-25 01:53:14,536 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_MyToken__success
[2020-11-25 01:53:14,536 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_MyToken__fail
[2020-11-25 01:53:14,536 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_MyToken__success
[2020-11-25 01:53:14,537 INFO  L138     BoogieDeclarations]: Found implementation of procedure _totalSupply_MyToken__fail
[2020-11-25 01:53:14,537 INFO  L138     BoogieDeclarations]: Found implementation of procedure _totalSupply_MyToken__success
[2020-11-25 01:53:14,537 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 01:53:14,537 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 01:53:14,537 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 01:53:14,537 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 01:53:14,537 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 01:53:14,537 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 01:53:14,537 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 01:53:14,537 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 01:53:14,537 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 01:53:14,538 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 01:53:14,538 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Interface
[2020-11-25 01:53:14,538 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Interface
[2020-11-25 01:53:14,538 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ApproveAndCallFallBack
[2020-11-25 01:53:14,538 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ApproveAndCallFallBack
[2020-11-25 01:53:14,538 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Owned
[2020-11-25 01:53:14,538 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Owned
[2020-11-25 01:53:14,538 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_MyToken
[2020-11-25 01:53:14,538 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 01:53:14,538 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 01:53:14,538 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 01:53:14,924 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 01:53:14,998 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 01:53:14,998 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 01:53:14,999 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 01:53:15,183 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 01:53:15,183 INFO  L286             CfgBuilder]: Removed 5 assue(true) statements.
[2020-11-25 01:53:15,186 INFO  L202        PluginConnector]: Adding new model MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 01:53:15 BoogieIcfgContainer
[2020-11-25 01:53:15,187 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:53:14" (2/2) ...
[2020-11-25 01:53:15,187 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 01:53:15,187 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@3167256b and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 01:53:15, skipping insertion in model container
[2020-11-25 01:53:15,188 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 01:53:15,188 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 01:53:15,188 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 01:53:15,190 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 01:53:15,191 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:53:14" (1/3) ...
[2020-11-25 01:53:15,192 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@7b837a35 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 01:53:15, skipping insertion in model container
[2020-11-25 01:53:15,192 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:53:14" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 01:53:15,228 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 01:53:15 NWAContainer
[2020-11-25 01:53:15,228 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 01:53:15,228 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 01:53:15,228 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 01:53:15,229 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 01:53:15,230 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 01:53:15" (3/4) ...
[2020-11-25 01:53:15,231 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@2ddb83f0 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 01:53:15, skipping insertion in model container
[2020-11-25 01:53:15,231 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 01:53:15" (4/4) ...
[2020-11-25 01:53:15,234 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 01:53:15,237 INFO  L110   BuchiProductObserver]: Initial RCFG 1505 locations, 1891 edges
[2020-11-25 01:53:15,237 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 01:53:15,247 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 01:53:16,532 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 01:53:16,536 INFO  L110   BuchiProductObserver]: BuchiProgram size 3570 locations, 6127 edges
[2020-11-25 01:53:16,536 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 01:53:16 BoogieIcfgContainer
[2020-11-25 01:53:16,536 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 01:53:16,537 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 01:53:16,537 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 01:53:16,538 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 01:53:16,538 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 01:53:16" (1/1) ...
[2020-11-25 01:53:16,613 INFO  L313           BlockEncoder]: Initial Icfg 3570 locations, 6127 edges
[2020-11-25 01:53:16,613 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 01:53:16,614 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 01:53:16,614 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 01:53:16,614 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 01:53:16,625 INFO  L70    emoveInfeasibleEdges]: Removed 84 edges and 13 locations because of local infeasibility
[2020-11-25 01:53:16,633 INFO  L70        RemoveSinkStates]: Removed 32 edges and 21 locations by removing sink states
[2020-11-25 01:53:16,645 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 01:53:16,650 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 01:53:16,653 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 01:53:16,654 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 01:53:16,660 INFO  L313           BlockEncoder]: Encoded RCFG 3514 locations, 5979 edges
[2020-11-25 01:53:16,660 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 01:53:16 BasicIcfg
[2020-11-25 01:53:16,660 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 01:53:16,661 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 01:53:16,661 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 01:53:16,663 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 01:53:16,663 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 01:53:16,663 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:53:14" (1/6) ...
[2020-11-25 01:53:16,666 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@1553c0db and model type MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 01:53:16, skipping insertion in model container
[2020-11-25 01:53:16,666 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 01:53:16,666 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:53:14" (2/6) ...
[2020-11-25 01:53:16,666 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@1553c0db and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 01:53:16, skipping insertion in model container
[2020-11-25 01:53:16,666 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 01:53:16,666 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 01:53:15" (3/6) ...
[2020-11-25 01:53:16,667 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@1553c0db and model type MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 01:53:16, skipping insertion in model container
[2020-11-25 01:53:16,667 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 01:53:16,667 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 01:53:15" (4/6) ...
[2020-11-25 01:53:16,667 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@1553c0db and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 01:53:16, skipping insertion in model container
[2020-11-25 01:53:16,667 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 01:53:16,667 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 01:53:16" (5/6) ...
[2020-11-25 01:53:16,667 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@1553c0db and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 01:53:16, skipping insertion in model container
[2020-11-25 01:53:16,668 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 01:53:16,668 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 01:53:16" (6/6) ...
[2020-11-25 01:53:16,669 INFO  L404   chiAutomizerObserver]: Analyzing ICFG MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_transfer-normal.bpl_BEv2
[2020-11-25 01:53:16,702 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 01:53:16,702 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 01:53:16,703 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 01:53:16,703 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 01:53:16,703 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 01:53:16,703 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 01:53:16,703 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 01:53:16,703 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 01:53:16,703 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 01:53:16,734 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3514 states.
[2020-11-25 01:53:16,781 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:53:16,782 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:53:16,782 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:53:16,790 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:53:16,791 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:53:16,791 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 01:53:16,791 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3514 states.
[2020-11-25 01:53:16,807 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:53:16,807 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:53:16,807 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:53:16,809 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:53:16,809 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_MyToken0 := false;
[L3]                 call_transfer_MyToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L4124]              assume null == 0;
[L4125]  CALL        call this := FreshRefGenerator__success();
[L1864]              havoc newRef;
[L1865]              assume Alloc[newRef] == false;
[L1866]              Alloc[newRef] := true;
[L1867]              assume newRef != null;
[L4125]  RET         call this := FreshRefGenerator__success();
[L4126]              assume now >= 0;
[L4127]              assume DType[this] == MyToken;
[L4128]              assume msgvalue_MSG == 0;
[L4129]              gas := gas - 53000;
[L4130]  CALL        call MyToken_MyToken(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L769]               havoc __exception;
[L770]               revert := false;
[L771]   COND FALSE  !(__exception)
[L794]   CALL        call MyToken_MyToken__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2218]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2000]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1985]              assume msgsender_MSG != null;
[L1986]              Balance[this] := 0;
[L2000]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2001]  COND FALSE  !(revert)
[L2218]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2219]  COND TRUE   revert
[L794]   RET         call MyToken_MyToken__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L795]               assume !revert && gas >= 0;
[L4130]  RET         call MyToken_MyToken(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L4131]              assume !revert && gas >= 0;

Loop:
[L4134]  CALL        call CorralChoice_MyToken(this);
[L3927]              havoc msgsender_MSG;
[L3928]              havoc msgvalue_MSG;
[L3929]              havoc choice;
[L3930]              havoc a_s23;
[L3931]              havoc b_s23;
[L3932]              havoc c_s23;
[L3933]              havoc a_s45;
[L3934]              havoc b_s45;
[L3935]              havoc c_s45;
[L3936]              havoc a_s73;
[L3937]              havoc b_s73;
[L3938]              havoc c_s73;
[L3939]              havoc a_s95;
[L3940]              havoc b_s95;
[L3941]              havoc c_s95;
[L3942]              havoc __ret_0_totalSupply;
[L3943]              havoc tokenOwner_s344;
[L3944]              havoc balance_s344;
[L3945]              havoc tokenOwner_s490;
[L3946]              havoc spender_s490;
[L3947]              havoc remaining_s490;
[L3948]              havoc to_s387;
[L3949]              havoc tokens_s387;
[L3950]              havoc success_s387;
[L3951]              havoc spender_s415;
[L3952]              havoc tokens_s415;
[L3953]              havoc success_s415;
[L3954]              havoc from_s474;
[L3955]              havoc to_s474;
[L3956]              havoc tokens_s474;
[L3957]              havoc success_s474;
[L3958]              havoc __ret_0_owner;
[L3959]              havoc __ret_0_newOwner;
[L3960]              havoc _newOwner_s217;
[L3961]              havoc __ret_0_symbol;
[L3962]              havoc __ret_0_name;
[L3963]              havoc __ret_0_decimals;
[L3964]              havoc __ret_0__totalSupply;
[L3965]              havoc tokenName_s318;
[L3966]              havoc tokenSymbol_s318;
[L3967]              havoc tokenDecimals_s318;
[L3968]              havoc initialSupply_s318;
[L3969]              havoc spender_s533;
[L3970]              havoc tokens_s533;
[L3971]              havoc data_s533;
[L3972]              havoc success_s533;
[L3973]              havoc tmpNow;
[L3974]              havoc gas;
[L3975]              assume gas > 4000000 && gas <= 8000000;
[L3976]              tmpNow := now;
[L3977]              havoc now;
[L3978]              assume now > tmpNow;
[L3979]              assume msgsender_MSG != null;
[L3980]              assume DType[msgsender_MSG] != SafeMath;
[L3981]              assume DType[msgsender_MSG] != ERC20Interface;
[L3982]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3983]              assume DType[msgsender_MSG] != Owned;
[L3984]              assume DType[msgsender_MSG] != MyToken;
[L3985]              Alloc[msgsender_MSG] := true;
[L3986]  COND TRUE   choice == 19
[L3987]              gas := gas - 21000;
[L3988]  COND FALSE  !(gas >= 0)
[L4134]  RET         call CorralChoice_MyToken(this);

[2020-11-25 01:53:16,823 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:53:16,823 INFO  L82        PathProgramCache]: Analyzing trace with hash -1035056455, now seen corresponding path program 1 times
[2020-11-25 01:53:16,828 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:53:16,859 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:53:16,895 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 01:53:16,897 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:53:16,897 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 01:53:17,082 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:53:17,094 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 01:53:17,094 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 01:53:17,096 INFO  L87              Difference]: Start difference. First operand 3514 states. Second operand 4 states.
[2020-11-25 01:53:17,902 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:53:17,903 INFO  L93              Difference]: Finished difference Result 3718 states and 5984 transitions.
[2020-11-25 01:53:17,903 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 01:53:17,904 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3718 states and 5984 transitions.
[2020-11-25 01:53:17,927 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-25 01:53:17,955 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3718 states to 3614 states and 5833 transitions.
[2020-11-25 01:53:17,956 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 14
[2020-11-25 01:53:17,961 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1433
[2020-11-25 01:53:17,961 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3614 states and 5833 transitions.
[2020-11-25 01:53:17,974 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:53:17,974 INFO  L728         BuchiCegarLoop]: Abstraction has 3614 states and 5833 transitions.
[2020-11-25 01:53:17,988 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3614 states and 5833 transitions.
[2020-11-25 01:53:18,036 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3614 to 2592.
[2020-11-25 01:53:18,037 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2592 states.
[2020-11-25 01:53:18,042 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2592 states to 2592 states and 3945 transitions.
[2020-11-25 01:53:18,042 INFO  L751         BuchiCegarLoop]: Abstraction has 2592 states and 3945 transitions.
[2020-11-25 01:53:18,043 INFO  L631         BuchiCegarLoop]: Abstraction has 2592 states and 3945 transitions.
[2020-11-25 01:53:18,043 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 01:53:18,043 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2592 states and 3945 transitions.
[2020-11-25 01:53:18,050 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:53:18,050 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:53:18,050 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:53:18,051 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:53:18,052 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_MyToken0 := false;
[L3]                 call_transfer_MyToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L4124]              assume null == 0;
[L4125]  CALL        call this := FreshRefGenerator__success();
[L1864]              havoc newRef;
[L1865]              assume Alloc[newRef] == false;
[L1866]              Alloc[newRef] := true;
[L1867]              assume newRef != null;
[L4125]  RET         call this := FreshRefGenerator__success();
[L4126]              assume now >= 0;
[L4127]              assume DType[this] == MyToken;
[L4128]              assume msgvalue_MSG == 0;
[L4129]              gas := gas - 53000;
[L4130]  CALL        call MyToken_MyToken(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L769]               havoc __exception;
[L770]               revert := false;
[L771]   COND FALSE  !(__exception)
[L794]   CALL        call MyToken_MyToken__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2218]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2000]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1985]              assume msgsender_MSG != null;
[L1986]              Balance[this] := 0;
[L2000]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2001]  COND FALSE  !(revert)
[L2218]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2219]  COND FALSE  !(revert)
[L2222]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2070]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2052]              assume msgsender_MSG != null;
[L2053]              Balance[this] := 0;
[L2054]              owner_Owned[this] := null;
[L2055]              newOwner_Owned[this] := null;
[L2057]              owner_Owned[this] := msgsender_MSG;
[L2070]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2071]  COND FALSE  !(revert)
[L2222]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2223]  COND FALSE  !(revert)
[L2226]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1896]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]              assume msgsender_MSG != null;
[L1882]              Balance[this] := 0;
[L1896]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1897]  COND FALSE  !(revert)
[L2226]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2227]  COND FALSE  !(revert)
[L2230]  CALL        call MyToken_MyToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2172]              assume msgsender_MSG != null;
[L2173]              Balance[this] := 0;
[L2174]              symbol_MyToken[this] := -1251229519;
[L2175]              name_MyToken[this] := -1251229519;
[L2176]              decimals_MyToken[this] := 0;
[L2177]              _totalSupply_MyToken[this] := 0;
[L2178]              balances_MyToken[this] := zeroRefintArr();
[L2179]              sum_balances0[this] := 0;
[L2180]              allowed_MyToken[this] := zeroRefRefintArr();
[L2181]              sum_allowed1[this] := 0;
[L2183]              name_MyToken[this] := tokenName_s318;
[L2184]              symbol_MyToken[this] := tokenSymbol_s318;
[L2185]              decimals_MyToken[this] := tokenDecimals_s318;
[L2186]              __var_2 := tokenDecimals_s318 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2187]              _totalSupply_MyToken[this] := nonlinearMul(initialSupply_s318, nonlinearPow(10, tokenDecimals_s318 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2188]              sum_balances0[this] := sum_balances0[this] - balances_MyToken[this][msgsender_MSG];
[L2189]              balances_MyToken[this][msgsender_MSG] := _totalSupply_MyToken[this];
[L2190]              sum_balances0[this] := sum_balances0[this] + balances_MyToken[this][msgsender_MSG];
[L2191]              assert { :EventEmitted "Transfer_MyToken" } true;
[L2230]  RET         call MyToken_MyToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2231]  COND FALSE  !(revert)
[L794]   RET         call MyToken_MyToken__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L795]               assume !revert && gas >= 0;
[L4130]  RET         call MyToken_MyToken(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L4131]              assume !revert && gas >= 0;

Loop:
[L4134]  CALL        call CorralChoice_MyToken(this);
[L3927]              havoc msgsender_MSG;
[L3928]              havoc msgvalue_MSG;
[L3929]              havoc choice;
[L3930]              havoc a_s23;
[L3931]              havoc b_s23;
[L3932]              havoc c_s23;
[L3933]              havoc a_s45;
[L3934]              havoc b_s45;
[L3935]              havoc c_s45;
[L3936]              havoc a_s73;
[L3937]              havoc b_s73;
[L3938]              havoc c_s73;
[L3939]              havoc a_s95;
[L3940]              havoc b_s95;
[L3941]              havoc c_s95;
[L3942]              havoc __ret_0_totalSupply;
[L3943]              havoc tokenOwner_s344;
[L3944]              havoc balance_s344;
[L3945]              havoc tokenOwner_s490;
[L3946]              havoc spender_s490;
[L3947]              havoc remaining_s490;
[L3948]              havoc to_s387;
[L3949]              havoc tokens_s387;
[L3950]              havoc success_s387;
[L3951]              havoc spender_s415;
[L3952]              havoc tokens_s415;
[L3953]              havoc success_s415;
[L3954]              havoc from_s474;
[L3955]              havoc to_s474;
[L3956]              havoc tokens_s474;
[L3957]              havoc success_s474;
[L3958]              havoc __ret_0_owner;
[L3959]              havoc __ret_0_newOwner;
[L3960]              havoc _newOwner_s217;
[L3961]              havoc __ret_0_symbol;
[L3962]              havoc __ret_0_name;
[L3963]              havoc __ret_0_decimals;
[L3964]              havoc __ret_0__totalSupply;
[L3965]              havoc tokenName_s318;
[L3966]              havoc tokenSymbol_s318;
[L3967]              havoc tokenDecimals_s318;
[L3968]              havoc initialSupply_s318;
[L3969]              havoc spender_s533;
[L3970]              havoc tokens_s533;
[L3971]              havoc data_s533;
[L3972]              havoc success_s533;
[L3973]              havoc tmpNow;
[L3974]              havoc gas;
[L3975]              assume gas > 4000000 && gas <= 8000000;
[L3976]              tmpNow := now;
[L3977]              havoc now;
[L3978]              assume now > tmpNow;
[L3979]              assume msgsender_MSG != null;
[L3980]              assume DType[msgsender_MSG] != SafeMath;
[L3981]              assume DType[msgsender_MSG] != ERC20Interface;
[L3982]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3983]              assume DType[msgsender_MSG] != Owned;
[L3984]              assume DType[msgsender_MSG] != MyToken;
[L3985]              Alloc[msgsender_MSG] := true;
[L3986]  COND TRUE   choice == 19
[L3987]              gas := gas - 21000;
[L3988]  COND FALSE  !(gas >= 0)
[L4134]  RET         call CorralChoice_MyToken(this);

[2020-11-25 01:53:18,055 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:53:18,055 INFO  L82        PathProgramCache]: Analyzing trace with hash -80195777, now seen corresponding path program 1 times
[2020-11-25 01:53:18,056 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:53:18,063 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:53:18,089 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 01:53:18,089 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:53:18,090 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 01:53:18,091 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:53:18,091 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 01:53:18,091 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 01:53:18,091 INFO  L87              Difference]: Start difference. First operand 2592 states and 3945 transitions. cyclomatic complexity: 1355 Second operand 4 states.
[2020-11-25 01:53:18,598 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:53:18,598 INFO  L93              Difference]: Finished difference Result 2399 states and 2562 transitions.
[2020-11-25 01:53:18,598 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 01:53:18,599 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2399 states and 2562 transitions.
[2020-11-25 01:53:18,606 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:53:18,612 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2399 states to 2399 states and 2562 transitions.
[2020-11-25 01:53:18,612 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 903
[2020-11-25 01:53:18,613 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 903
[2020-11-25 01:53:18,613 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2399 states and 2562 transitions.
[2020-11-25 01:53:18,615 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:53:18,615 INFO  L728         BuchiCegarLoop]: Abstraction has 2399 states and 2562 transitions.
[2020-11-25 01:53:18,617 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2399 states and 2562 transitions.
[2020-11-25 01:53:18,636 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2399 to 2399.
[2020-11-25 01:53:18,636 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2399 states.
[2020-11-25 01:53:18,639 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2399 states to 2399 states and 2562 transitions.
[2020-11-25 01:53:18,639 INFO  L751         BuchiCegarLoop]: Abstraction has 2399 states and 2562 transitions.
[2020-11-25 01:53:18,639 INFO  L631         BuchiCegarLoop]: Abstraction has 2399 states and 2562 transitions.
[2020-11-25 01:53:18,639 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 01:53:18,639 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2399 states and 2562 transitions.
[2020-11-25 01:53:18,644 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:53:18,644 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:53:18,644 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:53:18,646 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:53:18,646 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_MyToken0 := false;
[L3]                 call_transfer_MyToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L4124]              assume null == 0;
[L4125]  CALL        call this := FreshRefGenerator__success();
[L1864]              havoc newRef;
[L1865]              assume Alloc[newRef] == false;
[L1866]              Alloc[newRef] := true;
[L1867]              assume newRef != null;
[L4125]  RET         call this := FreshRefGenerator__success();
[L4126]              assume now >= 0;
[L4127]              assume DType[this] == MyToken;
[L4128]              assume msgvalue_MSG == 0;
[L4129]              gas := gas - 53000;
[L4130]  CALL        call MyToken_MyToken(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L769]               havoc __exception;
[L770]               revert := false;
[L771]   COND FALSE  !(__exception)
[L794]   CALL        call MyToken_MyToken__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2218]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2000]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1985]              assume msgsender_MSG != null;
[L1986]              Balance[this] := 0;
[L2000]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2001]  COND FALSE  !(revert)
[L2218]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2219]  COND FALSE  !(revert)
[L2222]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2070]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2052]              assume msgsender_MSG != null;
[L2053]              Balance[this] := 0;
[L2054]              owner_Owned[this] := null;
[L2055]              newOwner_Owned[this] := null;
[L2057]              owner_Owned[this] := msgsender_MSG;
[L2070]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2071]  COND FALSE  !(revert)
[L2222]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2223]  COND FALSE  !(revert)
[L2226]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1896]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]              assume msgsender_MSG != null;
[L1882]              Balance[this] := 0;
[L1896]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1897]  COND FALSE  !(revert)
[L2226]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2227]  COND FALSE  !(revert)
[L2230]  CALL        call MyToken_MyToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2172]              assume msgsender_MSG != null;
[L2173]              Balance[this] := 0;
[L2174]              symbol_MyToken[this] := -1251229519;
[L2175]              name_MyToken[this] := -1251229519;
[L2176]              decimals_MyToken[this] := 0;
[L2177]              _totalSupply_MyToken[this] := 0;
[L2178]              balances_MyToken[this] := zeroRefintArr();
[L2179]              sum_balances0[this] := 0;
[L2180]              allowed_MyToken[this] := zeroRefRefintArr();
[L2181]              sum_allowed1[this] := 0;
[L2183]              name_MyToken[this] := tokenName_s318;
[L2184]              symbol_MyToken[this] := tokenSymbol_s318;
[L2185]              decimals_MyToken[this] := tokenDecimals_s318;
[L2186]              __var_2 := tokenDecimals_s318 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2187]              _totalSupply_MyToken[this] := nonlinearMul(initialSupply_s318, nonlinearPow(10, tokenDecimals_s318 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2188]              sum_balances0[this] := sum_balances0[this] - balances_MyToken[this][msgsender_MSG];
[L2189]              balances_MyToken[this][msgsender_MSG] := _totalSupply_MyToken[this];
[L2190]              sum_balances0[this] := sum_balances0[this] + balances_MyToken[this][msgsender_MSG];
[L2191]              assert { :EventEmitted "Transfer_MyToken" } true;
[L2230]  RET         call MyToken_MyToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2231]  COND FALSE  !(revert)
[L794]   RET         call MyToken_MyToken__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L795]               assume !revert && gas >= 0;
[L4130]  RET         call MyToken_MyToken(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L4131]              assume !revert && gas >= 0;
[L4134]  CALL        call CorralChoice_MyToken(this);
[L3927]              havoc msgsender_MSG;
[L3928]              havoc msgvalue_MSG;
[L3929]              havoc choice;
[L3930]              havoc a_s23;
[L3931]              havoc b_s23;
[L3932]              havoc c_s23;
[L3933]              havoc a_s45;
[L3934]              havoc b_s45;
[L3935]              havoc c_s45;
[L3936]              havoc a_s73;
[L3937]              havoc b_s73;
[L3938]              havoc c_s73;
[L3939]              havoc a_s95;
[L3940]              havoc b_s95;
[L3941]              havoc c_s95;
[L3942]              havoc __ret_0_totalSupply;
[L3943]              havoc tokenOwner_s344;
[L3944]              havoc balance_s344;
[L3945]              havoc tokenOwner_s490;
[L3946]              havoc spender_s490;
[L3947]              havoc remaining_s490;
[L3948]              havoc to_s387;
[L3949]              havoc tokens_s387;
[L3950]              havoc success_s387;
[L3951]              havoc spender_s415;
[L3952]              havoc tokens_s415;
[L3953]              havoc success_s415;
[L3954]              havoc from_s474;
[L3955]              havoc to_s474;
[L3956]              havoc tokens_s474;
[L3957]              havoc success_s474;
[L3958]              havoc __ret_0_owner;
[L3959]              havoc __ret_0_newOwner;
[L3960]              havoc _newOwner_s217;
[L3961]              havoc __ret_0_symbol;
[L3962]              havoc __ret_0_name;
[L3963]              havoc __ret_0_decimals;
[L3964]              havoc __ret_0__totalSupply;
[L3965]              havoc tokenName_s318;
[L3966]              havoc tokenSymbol_s318;
[L3967]              havoc tokenDecimals_s318;
[L3968]              havoc initialSupply_s318;
[L3969]              havoc spender_s533;
[L3970]              havoc tokens_s533;
[L3971]              havoc data_s533;
[L3972]              havoc success_s533;
[L3973]              havoc tmpNow;
[L3974]              havoc gas;
[L3975]              assume gas > 4000000 && gas <= 8000000;
[L3976]              tmpNow := now;
[L3977]              havoc now;
[L3978]              assume now > tmpNow;
[L3979]              assume msgsender_MSG != null;
[L3980]              assume DType[msgsender_MSG] != SafeMath;
[L3981]              assume DType[msgsender_MSG] != ERC20Interface;
[L3982]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3983]              assume DType[msgsender_MSG] != Owned;
[L3984]              assume DType[msgsender_MSG] != MyToken;
[L3985]              Alloc[msgsender_MSG] := true;
[L3986]  COND FALSE  !(choice == 19)
[L3994]  COND FALSE  !(choice == 18)
[L4002]  COND FALSE  !(choice == 17)
[L4010]  COND FALSE  !(choice == 16)
[L4018]  COND FALSE  !(choice == 15)
[L4024]  COND FALSE  !(choice == 14)
[L4030]  COND FALSE  !(choice == 13)
[L4036]  COND TRUE   choice == 12
[L4037]              gas := gas - 21000;
[L4038]  COND TRUE   gas >= 0
[L4039]              assume tokens_s387 >= 0 && tokens_s387 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4040]              assume msgvalue_MSG == 0;
[L4041]  CALL        call success_s387 := transfer~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, to_s387, tokens_s387);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s387) && msgsender_MSG != to_s387) && tokens_s387 <= balances_MyToken[this][msgsender_MSG]) && balances_MyToken[this][to_s387] + tokens_s387 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s387 >= 0) && tokens_s387 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][to_s387] >= 0) && balances_MyToken[this][to_s387] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][msgsender_MSG] >= 0) && balances_MyToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_MyToken0 := true;
[L3]                 call_transfer_MyToken0 := false;
[L3]                 revert := revert_hold;
[L933]               havoc __exception;
[L934]               revert := false;
[L935]   COND TRUE   __exception
[L936]               __tmp__Balance := Balance;
[L937]               __tmp__DType := DType;
[L938]               __tmp__Alloc := Alloc;
[L939]               __tmp__balance_ADDR := balance_ADDR;
[L940]               __tmp__M_Ref_int := M_Ref_int;
[L941]               __tmp__sum_balances0 := sum_balances0;
[L942]               __tmp__alloc_allowed_MyToken_lvl0 := alloc_allowed_MyToken_lvl0;
[L943]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L944]               __tmp__sum_allowed1 := sum_allowed1;
[L945]               __tmp__Length := Length;
[L946]               __tmp__now := now;
[L947]               __tmp__owner_Owned := owner_Owned;
[L948]               __tmp__newOwner_Owned := newOwner_Owned;
[L949]               __tmp__symbol_MyToken := symbol_MyToken;
[L950]               __tmp__name_MyToken := name_MyToken;
[L951]               __tmp__decimals_MyToken := decimals_MyToken;
[L952]               __tmp___totalSupply_MyToken := _totalSupply_MyToken;
[L953]               __tmp__balances_MyToken := balances_MyToken;
[L954]               __tmp__allowed_MyToken := allowed_MyToken;
[L955]   CALL        call success_s387 := transfer~address~uint256_MyToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s387, tokens_s387);
[L2268]  COND TRUE   __tmp__DType[this] == MyToken
[L2269]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_MyToken[this][msgsender_MSG], tokens_s387);
[L1922]  COND TRUE   !(b_s45 <= a_s45)
[L1923]              revert := true;
[L2269]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_MyToken[this][msgsender_MSG], tokens_s387);
[L2270]  COND TRUE   revert
[L955]   RET         call success_s387 := transfer~address~uint256_MyToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s387, tokens_s387);
[L956]               assume revert || gas < 0;
[L4041]  RET         call success_s387 := transfer~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, to_s387, tokens_s387);
[L4134]  RET         call CorralChoice_MyToken(this);

Loop:
[L4134]  CALL        call CorralChoice_MyToken(this);
[L3927]              havoc msgsender_MSG;
[L3928]              havoc msgvalue_MSG;
[L3929]              havoc choice;
[L3930]              havoc a_s23;
[L3931]              havoc b_s23;
[L3932]              havoc c_s23;
[L3933]              havoc a_s45;
[L3934]              havoc b_s45;
[L3935]              havoc c_s45;
[L3936]              havoc a_s73;
[L3937]              havoc b_s73;
[L3938]              havoc c_s73;
[L3939]              havoc a_s95;
[L3940]              havoc b_s95;
[L3941]              havoc c_s95;
[L3942]              havoc __ret_0_totalSupply;
[L3943]              havoc tokenOwner_s344;
[L3944]              havoc balance_s344;
[L3945]              havoc tokenOwner_s490;
[L3946]              havoc spender_s490;
[L3947]              havoc remaining_s490;
[L3948]              havoc to_s387;
[L3949]              havoc tokens_s387;
[L3950]              havoc success_s387;
[L3951]              havoc spender_s415;
[L3952]              havoc tokens_s415;
[L3953]              havoc success_s415;
[L3954]              havoc from_s474;
[L3955]              havoc to_s474;
[L3956]              havoc tokens_s474;
[L3957]              havoc success_s474;
[L3958]              havoc __ret_0_owner;
[L3959]              havoc __ret_0_newOwner;
[L3960]              havoc _newOwner_s217;
[L3961]              havoc __ret_0_symbol;
[L3962]              havoc __ret_0_name;
[L3963]              havoc __ret_0_decimals;
[L3964]              havoc __ret_0__totalSupply;
[L3965]              havoc tokenName_s318;
[L3966]              havoc tokenSymbol_s318;
[L3967]              havoc tokenDecimals_s318;
[L3968]              havoc initialSupply_s318;
[L3969]              havoc spender_s533;
[L3970]              havoc tokens_s533;
[L3971]              havoc data_s533;
[L3972]              havoc success_s533;
[L3973]              havoc tmpNow;
[L3974]              havoc gas;
[L3975]              assume gas > 4000000 && gas <= 8000000;
[L3976]              tmpNow := now;
[L3977]              havoc now;
[L3978]              assume now > tmpNow;
[L3979]              assume msgsender_MSG != null;
[L3980]              assume DType[msgsender_MSG] != SafeMath;
[L3981]              assume DType[msgsender_MSG] != ERC20Interface;
[L3982]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3983]              assume DType[msgsender_MSG] != Owned;
[L3984]              assume DType[msgsender_MSG] != MyToken;
[L3985]              Alloc[msgsender_MSG] := true;
[L3986]  COND FALSE  !(choice == 19)
[L3994]  COND FALSE  !(choice == 18)
[L4002]  COND FALSE  !(choice == 17)
[L4010]  COND FALSE  !(choice == 16)
[L4018]  COND FALSE  !(choice == 15)
[L4024]  COND FALSE  !(choice == 14)
[L4030]  COND FALSE  !(choice == 13)
[L4036]  COND TRUE   choice == 12
[L4037]              gas := gas - 21000;
[L4038]  COND TRUE   gas >= 0
[L4039]              assume tokens_s387 >= 0 && tokens_s387 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4040]              assume msgvalue_MSG == 0;
[L4041]  CALL        call success_s387 := transfer~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, to_s387, tokens_s387);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s387) && msgsender_MSG != to_s387) && tokens_s387 <= balances_MyToken[this][msgsender_MSG]) && balances_MyToken[this][to_s387] + tokens_s387 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s387 >= 0) && tokens_s387 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][to_s387] >= 0) && balances_MyToken[this][to_s387] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][msgsender_MSG] >= 0) && balances_MyToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_MyToken0 := true;
[L3]                 call_transfer_MyToken0 := false;
[L3]                 revert := revert_hold;
[L933]               havoc __exception;
[L934]               revert := false;
[L935]   COND TRUE   __exception
[L936]               __tmp__Balance := Balance;
[L937]               __tmp__DType := DType;
[L938]               __tmp__Alloc := Alloc;
[L939]               __tmp__balance_ADDR := balance_ADDR;
[L940]               __tmp__M_Ref_int := M_Ref_int;
[L941]               __tmp__sum_balances0 := sum_balances0;
[L942]               __tmp__alloc_allowed_MyToken_lvl0 := alloc_allowed_MyToken_lvl0;
[L943]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L944]               __tmp__sum_allowed1 := sum_allowed1;
[L945]               __tmp__Length := Length;
[L946]               __tmp__now := now;
[L947]               __tmp__owner_Owned := owner_Owned;
[L948]               __tmp__newOwner_Owned := newOwner_Owned;
[L949]               __tmp__symbol_MyToken := symbol_MyToken;
[L950]               __tmp__name_MyToken := name_MyToken;
[L951]               __tmp__decimals_MyToken := decimals_MyToken;
[L952]               __tmp___totalSupply_MyToken := _totalSupply_MyToken;
[L953]               __tmp__balances_MyToken := balances_MyToken;
[L954]               __tmp__allowed_MyToken := allowed_MyToken;
[L955]   CALL        call success_s387 := transfer~address~uint256_MyToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s387, tokens_s387);
[L2268]  COND TRUE   __tmp__DType[this] == MyToken
[L2269]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_MyToken[this][msgsender_MSG], tokens_s387);
[L1922]  COND TRUE   !(b_s45 <= a_s45)
[L1923]              revert := true;
[L2269]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_MyToken[this][msgsender_MSG], tokens_s387);
[L2270]  COND TRUE   revert
[L955]   RET         call success_s387 := transfer~address~uint256_MyToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s387, tokens_s387);
[L956]               assume revert || gas < 0;
[L4041]  RET         call success_s387 := transfer~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, to_s387, tokens_s387);
[L4134]  RET         call CorralChoice_MyToken(this);

[2020-11-25 01:53:18,651 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:53:18,651 INFO  L82        PathProgramCache]: Analyzing trace with hash -99267287, now seen corresponding path program 1 times
[2020-11-25 01:53:18,652 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:53:18,666 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:53:18,740 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 01:53:18,740 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:53:18,740 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 01:53:18,740 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:53:18,741 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 01:53:18,741 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 01:53:18,741 INFO  L87              Difference]: Start difference. First operand 2399 states and 2562 transitions. cyclomatic complexity: 165 Second operand 7 states.
[2020-11-25 01:53:19,459 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:53:19,460 INFO  L93              Difference]: Finished difference Result 2591 states and 2768 transitions.
[2020-11-25 01:53:19,460 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 01:53:19,460 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2591 states and 2768 transitions.
[2020-11-25 01:53:19,467 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 01:53:19,474 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2591 states to 2591 states and 2768 transitions.
[2020-11-25 01:53:19,474 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 973
[2020-11-25 01:53:19,475 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 973
[2020-11-25 01:53:19,475 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2591 states and 2768 transitions.
[2020-11-25 01:53:19,477 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:53:19,477 INFO  L728         BuchiCegarLoop]: Abstraction has 2591 states and 2768 transitions.
[2020-11-25 01:53:19,479 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2591 states and 2768 transitions.
[2020-11-25 01:53:19,497 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2591 to 2455.
[2020-11-25 01:53:19,497 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2455 states.
[2020-11-25 01:53:19,499 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2455 states to 2455 states and 2622 transitions.
[2020-11-25 01:53:19,499 INFO  L751         BuchiCegarLoop]: Abstraction has 2455 states and 2622 transitions.
[2020-11-25 01:53:19,500 INFO  L631         BuchiCegarLoop]: Abstraction has 2455 states and 2622 transitions.
[2020-11-25 01:53:19,500 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 01:53:19,500 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2455 states and 2622 transitions.
[2020-11-25 01:53:19,504 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:53:19,504 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:53:19,504 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:53:19,506 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:53:19,506 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_MyToken0 := false;
[L3]                 call_transfer_MyToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L4124]              assume null == 0;
[L4125]  CALL        call this := FreshRefGenerator__success();
[L1864]              havoc newRef;
[L1865]              assume Alloc[newRef] == false;
[L1866]              Alloc[newRef] := true;
[L1867]              assume newRef != null;
[L4125]  RET         call this := FreshRefGenerator__success();
[L4126]              assume now >= 0;
[L4127]              assume DType[this] == MyToken;
[L4128]              assume msgvalue_MSG == 0;
[L4129]              gas := gas - 53000;
[L4130]  CALL        call MyToken_MyToken(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L769]               havoc __exception;
[L770]               revert := false;
[L771]   COND FALSE  !(__exception)
[L794]   CALL        call MyToken_MyToken__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2218]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2000]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1985]              assume msgsender_MSG != null;
[L1986]              Balance[this] := 0;
[L2000]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2001]  COND FALSE  !(revert)
[L2218]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2219]  COND FALSE  !(revert)
[L2222]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2070]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2052]              assume msgsender_MSG != null;
[L2053]              Balance[this] := 0;
[L2054]              owner_Owned[this] := null;
[L2055]              newOwner_Owned[this] := null;
[L2057]              owner_Owned[this] := msgsender_MSG;
[L2070]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2071]  COND FALSE  !(revert)
[L2222]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2223]  COND FALSE  !(revert)
[L2226]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1896]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]              assume msgsender_MSG != null;
[L1882]              Balance[this] := 0;
[L1896]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1897]  COND FALSE  !(revert)
[L2226]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2227]  COND FALSE  !(revert)
[L2230]  CALL        call MyToken_MyToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2172]              assume msgsender_MSG != null;
[L2173]              Balance[this] := 0;
[L2174]              symbol_MyToken[this] := -1251229519;
[L2175]              name_MyToken[this] := -1251229519;
[L2176]              decimals_MyToken[this] := 0;
[L2177]              _totalSupply_MyToken[this] := 0;
[L2178]              balances_MyToken[this] := zeroRefintArr();
[L2179]              sum_balances0[this] := 0;
[L2180]              allowed_MyToken[this] := zeroRefRefintArr();
[L2181]              sum_allowed1[this] := 0;
[L2183]              name_MyToken[this] := tokenName_s318;
[L2184]              symbol_MyToken[this] := tokenSymbol_s318;
[L2185]              decimals_MyToken[this] := tokenDecimals_s318;
[L2186]              __var_2 := tokenDecimals_s318 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2187]              _totalSupply_MyToken[this] := nonlinearMul(initialSupply_s318, nonlinearPow(10, tokenDecimals_s318 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2188]              sum_balances0[this] := sum_balances0[this] - balances_MyToken[this][msgsender_MSG];
[L2189]              balances_MyToken[this][msgsender_MSG] := _totalSupply_MyToken[this];
[L2190]              sum_balances0[this] := sum_balances0[this] + balances_MyToken[this][msgsender_MSG];
[L2191]              assert { :EventEmitted "Transfer_MyToken" } true;
[L2230]  RET         call MyToken_MyToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2231]  COND FALSE  !(revert)
[L794]   RET         call MyToken_MyToken__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L795]               assume !revert && gas >= 0;
[L4130]  RET         call MyToken_MyToken(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L4131]              assume !revert && gas >= 0;
[L4134]  CALL        call CorralChoice_MyToken(this);
[L3927]              havoc msgsender_MSG;
[L3928]              havoc msgvalue_MSG;
[L3929]              havoc choice;
[L3930]              havoc a_s23;
[L3931]              havoc b_s23;
[L3932]              havoc c_s23;
[L3933]              havoc a_s45;
[L3934]              havoc b_s45;
[L3935]              havoc c_s45;
[L3936]              havoc a_s73;
[L3937]              havoc b_s73;
[L3938]              havoc c_s73;
[L3939]              havoc a_s95;
[L3940]              havoc b_s95;
[L3941]              havoc c_s95;
[L3942]              havoc __ret_0_totalSupply;
[L3943]              havoc tokenOwner_s344;
[L3944]              havoc balance_s344;
[L3945]              havoc tokenOwner_s490;
[L3946]              havoc spender_s490;
[L3947]              havoc remaining_s490;
[L3948]              havoc to_s387;
[L3949]              havoc tokens_s387;
[L3950]              havoc success_s387;
[L3951]              havoc spender_s415;
[L3952]              havoc tokens_s415;
[L3953]              havoc success_s415;
[L3954]              havoc from_s474;
[L3955]              havoc to_s474;
[L3956]              havoc tokens_s474;
[L3957]              havoc success_s474;
[L3958]              havoc __ret_0_owner;
[L3959]              havoc __ret_0_newOwner;
[L3960]              havoc _newOwner_s217;
[L3961]              havoc __ret_0_symbol;
[L3962]              havoc __ret_0_name;
[L3963]              havoc __ret_0_decimals;
[L3964]              havoc __ret_0__totalSupply;
[L3965]              havoc tokenName_s318;
[L3966]              havoc tokenSymbol_s318;
[L3967]              havoc tokenDecimals_s318;
[L3968]              havoc initialSupply_s318;
[L3969]              havoc spender_s533;
[L3970]              havoc tokens_s533;
[L3971]              havoc data_s533;
[L3972]              havoc success_s533;
[L3973]              havoc tmpNow;
[L3974]              havoc gas;
[L3975]              assume gas > 4000000 && gas <= 8000000;
[L3976]              tmpNow := now;
[L3977]              havoc now;
[L3978]              assume now > tmpNow;
[L3979]              assume msgsender_MSG != null;
[L3980]              assume DType[msgsender_MSG] != SafeMath;
[L3981]              assume DType[msgsender_MSG] != ERC20Interface;
[L3982]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3983]              assume DType[msgsender_MSG] != Owned;
[L3984]              assume DType[msgsender_MSG] != MyToken;
[L3985]              Alloc[msgsender_MSG] := true;
[L3986]  COND FALSE  !(choice == 19)
[L3994]  COND FALSE  !(choice == 18)
[L4002]  COND FALSE  !(choice == 17)
[L4010]  COND FALSE  !(choice == 16)
[L4018]  COND FALSE  !(choice == 15)
[L4024]  COND FALSE  !(choice == 14)
[L4030]  COND FALSE  !(choice == 13)
[L4036]  COND TRUE   choice == 12
[L4037]              gas := gas - 21000;
[L4038]  COND TRUE   gas >= 0
[L4039]              assume tokens_s387 >= 0 && tokens_s387 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4040]              assume msgvalue_MSG == 0;
[L4041]  CALL        call success_s387 := transfer~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, to_s387, tokens_s387);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s387) && msgsender_MSG != to_s387) && tokens_s387 <= balances_MyToken[this][msgsender_MSG]) && balances_MyToken[this][to_s387] + tokens_s387 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s387 >= 0) && tokens_s387 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][to_s387] >= 0) && balances_MyToken[this][to_s387] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][msgsender_MSG] >= 0) && balances_MyToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_MyToken0 := true;
[L3]                 call_transfer_MyToken0 := false;
[L3]                 revert := revert_hold;
[L933]               havoc __exception;
[L934]               revert := false;
[L935]   COND FALSE  !(__exception)
[L958]   CALL        call success_s387 := transfer~address~uint256_MyToken__success(this, msgsender_MSG, msgvalue_MSG, to_s387, tokens_s387);
[L2298]  COND TRUE   DType[this] == MyToken
[L2299]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][msgsender_MSG], tokens_s387);
[L1931]  COND FALSE  !(!(b_s45 <= a_s45))
[L1935]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2299]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][msgsender_MSG], tokens_s387);
[L2300]  COND FALSE  !(revert)
[L2306]              sum_balances0[this] := sum_balances0[this] - balances_MyToken[this][msgsender_MSG];
[L2307]              balances_MyToken[this][msgsender_MSG] := __var_4;
[L2308]              sum_balances0[this] := sum_balances0[this] + balances_MyToken[this][msgsender_MSG];
[L2309]  COND TRUE   DType[this] == MyToken
[L2310]  CALL        call __var_5 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][to_s387], tokens_s387);
[L1913]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1914]  COND FALSE  !(!(c_s23 >= a_s23))
[L2310]  RET         call __var_5 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][to_s387], tokens_s387);
[L2311]  COND FALSE  !(revert)
[L2317]              sum_balances0[this] := sum_balances0[this] - balances_MyToken[this][to_s387];
[L2318]              balances_MyToken[this][to_s387] := __var_5;
[L2319]              sum_balances0[this] := sum_balances0[this] + balances_MyToken[this][to_s387];
[L2320]              assert { :EventEmitted "Transfer_MyToken" } true;
[L2321]              success_s387 := true;
[L958]   RET         call success_s387 := transfer~address~uint256_MyToken__success(this, msgsender_MSG, msgvalue_MSG, to_s387, tokens_s387);
[L959]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((success_s387 == true && balances_MyToken[this][msgsender_MSG] == old(balances_MyToken[this][msgsender_MSG]) - tokens_s387) && balances_MyToken[this][to_s387] == old(balances_MyToken[this][to_s387]) + tokens_s387) && _totalSupply_MyToken[this] == old(_totalSupply_MyToken[this])) && allowed_MyToken[this] == old(allowed_MyToken[this])) && balances_MyToken[this][p1] == old(balances_MyToken[this][p1])) && symbol_MyToken[this] == old(symbol_MyToken[this])) && name_MyToken[this] == old(name_MyToken[this])) && decimals_MyToken[this] == old(decimals_MyToken[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4041]  RET         call success_s387 := transfer~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, to_s387, tokens_s387);
[L4134]  RET         call CorralChoice_MyToken(this);

Loop:
[L4134]  CALL        call CorralChoice_MyToken(this);
[L3927]              havoc msgsender_MSG;
[L3928]              havoc msgvalue_MSG;
[L3929]              havoc choice;
[L3930]              havoc a_s23;
[L3931]              havoc b_s23;
[L3932]              havoc c_s23;
[L3933]              havoc a_s45;
[L3934]              havoc b_s45;
[L3935]              havoc c_s45;
[L3936]              havoc a_s73;
[L3937]              havoc b_s73;
[L3938]              havoc c_s73;
[L3939]              havoc a_s95;
[L3940]              havoc b_s95;
[L3941]              havoc c_s95;
[L3942]              havoc __ret_0_totalSupply;
[L3943]              havoc tokenOwner_s344;
[L3944]              havoc balance_s344;
[L3945]              havoc tokenOwner_s490;
[L3946]              havoc spender_s490;
[L3947]              havoc remaining_s490;
[L3948]              havoc to_s387;
[L3949]              havoc tokens_s387;
[L3950]              havoc success_s387;
[L3951]              havoc spender_s415;
[L3952]              havoc tokens_s415;
[L3953]              havoc success_s415;
[L3954]              havoc from_s474;
[L3955]              havoc to_s474;
[L3956]              havoc tokens_s474;
[L3957]              havoc success_s474;
[L3958]              havoc __ret_0_owner;
[L3959]              havoc __ret_0_newOwner;
[L3960]              havoc _newOwner_s217;
[L3961]              havoc __ret_0_symbol;
[L3962]              havoc __ret_0_name;
[L3963]              havoc __ret_0_decimals;
[L3964]              havoc __ret_0__totalSupply;
[L3965]              havoc tokenName_s318;
[L3966]              havoc tokenSymbol_s318;
[L3967]              havoc tokenDecimals_s318;
[L3968]              havoc initialSupply_s318;
[L3969]              havoc spender_s533;
[L3970]              havoc tokens_s533;
[L3971]              havoc data_s533;
[L3972]              havoc success_s533;
[L3973]              havoc tmpNow;
[L3974]              havoc gas;
[L3975]              assume gas > 4000000 && gas <= 8000000;
[L3976]              tmpNow := now;
[L3977]              havoc now;
[L3978]              assume now > tmpNow;
[L3979]              assume msgsender_MSG != null;
[L3980]              assume DType[msgsender_MSG] != SafeMath;
[L3981]              assume DType[msgsender_MSG] != ERC20Interface;
[L3982]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3983]              assume DType[msgsender_MSG] != Owned;
[L3984]              assume DType[msgsender_MSG] != MyToken;
[L3985]              Alloc[msgsender_MSG] := true;
[L3986]  COND FALSE  !(choice == 19)
[L3994]  COND FALSE  !(choice == 18)
[L4002]  COND FALSE  !(choice == 17)
[L4010]  COND FALSE  !(choice == 16)
[L4018]  COND FALSE  !(choice == 15)
[L4024]  COND FALSE  !(choice == 14)
[L4030]  COND FALSE  !(choice == 13)
[L4036]  COND TRUE   choice == 12
[L4037]              gas := gas - 21000;
[L4038]  COND TRUE   gas >= 0
[L4039]              assume tokens_s387 >= 0 && tokens_s387 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4040]              assume msgvalue_MSG == 0;
[L4041]  CALL        call success_s387 := transfer~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, to_s387, tokens_s387);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s387) && msgsender_MSG != to_s387) && tokens_s387 <= balances_MyToken[this][msgsender_MSG]) && balances_MyToken[this][to_s387] + tokens_s387 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s387 >= 0) && tokens_s387 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][to_s387] >= 0) && balances_MyToken[this][to_s387] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][msgsender_MSG] >= 0) && balances_MyToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_MyToken0 := true;
[L3]                 call_transfer_MyToken0 := false;
[L3]                 revert := revert_hold;
[L933]               havoc __exception;
[L934]               revert := false;
[L935]   COND FALSE  !(__exception)
[L958]   CALL        call success_s387 := transfer~address~uint256_MyToken__success(this, msgsender_MSG, msgvalue_MSG, to_s387, tokens_s387);
[L2298]  COND TRUE   DType[this] == MyToken
[L2299]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][msgsender_MSG], tokens_s387);
[L1931]  COND FALSE  !(!(b_s45 <= a_s45))
[L1935]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2299]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][msgsender_MSG], tokens_s387);
[L2300]  COND FALSE  !(revert)
[L2306]              sum_balances0[this] := sum_balances0[this] - balances_MyToken[this][msgsender_MSG];
[L2307]              balances_MyToken[this][msgsender_MSG] := __var_4;
[L2308]              sum_balances0[this] := sum_balances0[this] + balances_MyToken[this][msgsender_MSG];
[L2309]  COND TRUE   DType[this] == MyToken
[L2310]  CALL        call __var_5 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][to_s387], tokens_s387);
[L1913]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1914]  COND FALSE  !(!(c_s23 >= a_s23))
[L2310]  RET         call __var_5 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][to_s387], tokens_s387);
[L2311]  COND FALSE  !(revert)
[L2317]              sum_balances0[this] := sum_balances0[this] - balances_MyToken[this][to_s387];
[L2318]              balances_MyToken[this][to_s387] := __var_5;
[L2319]              sum_balances0[this] := sum_balances0[this] + balances_MyToken[this][to_s387];
[L2320]              assert { :EventEmitted "Transfer_MyToken" } true;
[L2321]              success_s387 := true;
[L958]   RET         call success_s387 := transfer~address~uint256_MyToken__success(this, msgsender_MSG, msgvalue_MSG, to_s387, tokens_s387);
[L959]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((success_s387 == true && balances_MyToken[this][msgsender_MSG] == old(balances_MyToken[this][msgsender_MSG]) - tokens_s387) && balances_MyToken[this][to_s387] == old(balances_MyToken[this][to_s387]) + tokens_s387) && _totalSupply_MyToken[this] == old(_totalSupply_MyToken[this])) && allowed_MyToken[this] == old(allowed_MyToken[this])) && balances_MyToken[this][p1] == old(balances_MyToken[this][p1])) && symbol_MyToken[this] == old(symbol_MyToken[this])) && name_MyToken[this] == old(name_MyToken[this])) && decimals_MyToken[this] == old(decimals_MyToken[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4041]  RET         call success_s387 := transfer~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, to_s387, tokens_s387);
[L4134]  RET         call CorralChoice_MyToken(this);

[2020-11-25 01:53:19,509 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:53:19,509 INFO  L82        PathProgramCache]: Analyzing trace with hash -376477285, now seen corresponding path program 1 times
[2020-11-25 01:53:19,509 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:53:19,549 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:53:19,790 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 01:53:19,790 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:53:19,790 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [13] imperfect sequences [] total 13
[2020-11-25 01:53:19,791 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:53:19,791 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 13 interpolants.
[2020-11-25 01:53:19,791 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=27, Invalid=129, Unknown=0, NotChecked=0, Total=156
[2020-11-25 01:53:19,791 INFO  L87              Difference]: Start difference. First operand 2455 states and 2622 transitions. cyclomatic complexity: 169 Second operand 13 states.
[2020-11-25 01:53:22,385 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:53:22,385 INFO  L93              Difference]: Finished difference Result 2498 states and 2671 transitions.
[2020-11-25 01:53:22,385 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 13 states. 
[2020-11-25 01:53:22,386 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2498 states and 2671 transitions.
[2020-11-25 01:53:22,390 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 01:53:22,395 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2498 states to 2492 states and 2664 transitions.
[2020-11-25 01:53:22,395 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 920
[2020-11-25 01:53:22,396 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 920
[2020-11-25 01:53:22,396 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2492 states and 2664 transitions.
[2020-11-25 01:53:22,398 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:53:22,398 INFO  L728         BuchiCegarLoop]: Abstraction has 2492 states and 2664 transitions.
[2020-11-25 01:53:22,400 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2492 states and 2664 transitions.
[2020-11-25 01:53:22,414 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2492 to 2469.
[2020-11-25 01:53:22,414 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2469 states.
[2020-11-25 01:53:22,416 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2469 states to 2469 states and 2636 transitions.
[2020-11-25 01:53:22,416 INFO  L751         BuchiCegarLoop]: Abstraction has 2469 states and 2636 transitions.
[2020-11-25 01:53:22,416 INFO  L631         BuchiCegarLoop]: Abstraction has 2469 states and 2636 transitions.
[2020-11-25 01:53:22,416 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 01:53:22,416 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2469 states and 2636 transitions.
[2020-11-25 01:53:22,419 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:53:22,419 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:53:22,419 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:53:22,421 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:53:22,421 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_MyToken0 := false;
[L3]                 call_transfer_MyToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L4124]              assume null == 0;
[L4125]  CALL        call this := FreshRefGenerator__success();
[L1864]              havoc newRef;
[L1865]              assume Alloc[newRef] == false;
[L1866]              Alloc[newRef] := true;
[L1867]              assume newRef != null;
[L4125]  RET         call this := FreshRefGenerator__success();
[L4126]              assume now >= 0;
[L4127]              assume DType[this] == MyToken;
[L4128]              assume msgvalue_MSG == 0;
[L4129]              gas := gas - 53000;
[L4130]  CALL        call MyToken_MyToken(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L769]               havoc __exception;
[L770]               revert := false;
[L771]   COND FALSE  !(__exception)
[L794]   CALL        call MyToken_MyToken__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2218]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2000]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1985]              assume msgsender_MSG != null;
[L1986]              Balance[this] := 0;
[L2000]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2001]  COND FALSE  !(revert)
[L2218]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2219]  COND FALSE  !(revert)
[L2222]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2070]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2052]              assume msgsender_MSG != null;
[L2053]              Balance[this] := 0;
[L2054]              owner_Owned[this] := null;
[L2055]              newOwner_Owned[this] := null;
[L2057]              owner_Owned[this] := msgsender_MSG;
[L2070]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2071]  COND FALSE  !(revert)
[L2222]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2223]  COND FALSE  !(revert)
[L2226]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1896]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]              assume msgsender_MSG != null;
[L1882]              Balance[this] := 0;
[L1896]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1897]  COND FALSE  !(revert)
[L2226]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2227]  COND FALSE  !(revert)
[L2230]  CALL        call MyToken_MyToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2172]              assume msgsender_MSG != null;
[L2173]              Balance[this] := 0;
[L2174]              symbol_MyToken[this] := -1251229519;
[L2175]              name_MyToken[this] := -1251229519;
[L2176]              decimals_MyToken[this] := 0;
[L2177]              _totalSupply_MyToken[this] := 0;
[L2178]              balances_MyToken[this] := zeroRefintArr();
[L2179]              sum_balances0[this] := 0;
[L2180]              allowed_MyToken[this] := zeroRefRefintArr();
[L2181]              sum_allowed1[this] := 0;
[L2183]              name_MyToken[this] := tokenName_s318;
[L2184]              symbol_MyToken[this] := tokenSymbol_s318;
[L2185]              decimals_MyToken[this] := tokenDecimals_s318;
[L2186]              __var_2 := tokenDecimals_s318 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2187]              _totalSupply_MyToken[this] := nonlinearMul(initialSupply_s318, nonlinearPow(10, tokenDecimals_s318 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2188]              sum_balances0[this] := sum_balances0[this] - balances_MyToken[this][msgsender_MSG];
[L2189]              balances_MyToken[this][msgsender_MSG] := _totalSupply_MyToken[this];
[L2190]              sum_balances0[this] := sum_balances0[this] + balances_MyToken[this][msgsender_MSG];
[L2191]              assert { :EventEmitted "Transfer_MyToken" } true;
[L2230]  RET         call MyToken_MyToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2231]  COND FALSE  !(revert)
[L794]   RET         call MyToken_MyToken__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L795]               assume !revert && gas >= 0;
[L4130]  RET         call MyToken_MyToken(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L4131]              assume !revert && gas >= 0;
[L4134]  CALL        call CorralChoice_MyToken(this);
[L3927]              havoc msgsender_MSG;
[L3928]              havoc msgvalue_MSG;
[L3929]              havoc choice;
[L3930]              havoc a_s23;
[L3931]              havoc b_s23;
[L3932]              havoc c_s23;
[L3933]              havoc a_s45;
[L3934]              havoc b_s45;
[L3935]              havoc c_s45;
[L3936]              havoc a_s73;
[L3937]              havoc b_s73;
[L3938]              havoc c_s73;
[L3939]              havoc a_s95;
[L3940]              havoc b_s95;
[L3941]              havoc c_s95;
[L3942]              havoc __ret_0_totalSupply;
[L3943]              havoc tokenOwner_s344;
[L3944]              havoc balance_s344;
[L3945]              havoc tokenOwner_s490;
[L3946]              havoc spender_s490;
[L3947]              havoc remaining_s490;
[L3948]              havoc to_s387;
[L3949]              havoc tokens_s387;
[L3950]              havoc success_s387;
[L3951]              havoc spender_s415;
[L3952]              havoc tokens_s415;
[L3953]              havoc success_s415;
[L3954]              havoc from_s474;
[L3955]              havoc to_s474;
[L3956]              havoc tokens_s474;
[L3957]              havoc success_s474;
[L3958]              havoc __ret_0_owner;
[L3959]              havoc __ret_0_newOwner;
[L3960]              havoc _newOwner_s217;
[L3961]              havoc __ret_0_symbol;
[L3962]              havoc __ret_0_name;
[L3963]              havoc __ret_0_decimals;
[L3964]              havoc __ret_0__totalSupply;
[L3965]              havoc tokenName_s318;
[L3966]              havoc tokenSymbol_s318;
[L3967]              havoc tokenDecimals_s318;
[L3968]              havoc initialSupply_s318;
[L3969]              havoc spender_s533;
[L3970]              havoc tokens_s533;
[L3971]              havoc data_s533;
[L3972]              havoc success_s533;
[L3973]              havoc tmpNow;
[L3974]              havoc gas;
[L3975]              assume gas > 4000000 && gas <= 8000000;
[L3976]              tmpNow := now;
[L3977]              havoc now;
[L3978]              assume now > tmpNow;
[L3979]              assume msgsender_MSG != null;
[L3980]              assume DType[msgsender_MSG] != SafeMath;
[L3981]              assume DType[msgsender_MSG] != ERC20Interface;
[L3982]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3983]              assume DType[msgsender_MSG] != Owned;
[L3984]              assume DType[msgsender_MSG] != MyToken;
[L3985]              Alloc[msgsender_MSG] := true;
[L3986]  COND FALSE  !(choice == 19)
[L3994]  COND FALSE  !(choice == 18)
[L4002]  COND FALSE  !(choice == 17)
[L4010]  COND FALSE  !(choice == 16)
[L4018]  COND FALSE  !(choice == 15)
[L4024]  COND FALSE  !(choice == 14)
[L4030]  COND FALSE  !(choice == 13)
[L4036]  COND TRUE   choice == 12
[L4037]              gas := gas - 21000;
[L4038]  COND TRUE   gas >= 0
[L4039]              assume tokens_s387 >= 0 && tokens_s387 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4040]              assume msgvalue_MSG == 0;
[L4041]  CALL        call success_s387 := transfer~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, to_s387, tokens_s387);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s387) && msgsender_MSG != to_s387) && tokens_s387 <= balances_MyToken[this][msgsender_MSG]) && balances_MyToken[this][to_s387] + tokens_s387 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s387 >= 0) && tokens_s387 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][to_s387] >= 0) && balances_MyToken[this][to_s387] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][msgsender_MSG] >= 0) && balances_MyToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_MyToken0 := true;
[L3]                 call_transfer_MyToken0 := false;
[L3]                 revert := revert_hold;
[L933]               havoc __exception;
[L934]               revert := false;
[L935]   COND TRUE   __exception
[L936]               __tmp__Balance := Balance;
[L937]               __tmp__DType := DType;
[L938]               __tmp__Alloc := Alloc;
[L939]               __tmp__balance_ADDR := balance_ADDR;
[L940]               __tmp__M_Ref_int := M_Ref_int;
[L941]               __tmp__sum_balances0 := sum_balances0;
[L942]               __tmp__alloc_allowed_MyToken_lvl0 := alloc_allowed_MyToken_lvl0;
[L943]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L944]               __tmp__sum_allowed1 := sum_allowed1;
[L945]               __tmp__Length := Length;
[L946]               __tmp__now := now;
[L947]               __tmp__owner_Owned := owner_Owned;
[L948]               __tmp__newOwner_Owned := newOwner_Owned;
[L949]               __tmp__symbol_MyToken := symbol_MyToken;
[L950]               __tmp__name_MyToken := name_MyToken;
[L951]               __tmp__decimals_MyToken := decimals_MyToken;
[L952]               __tmp___totalSupply_MyToken := _totalSupply_MyToken;
[L953]               __tmp__balances_MyToken := balances_MyToken;
[L954]               __tmp__allowed_MyToken := allowed_MyToken;
[L955]   CALL        call success_s387 := transfer~address~uint256_MyToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s387, tokens_s387);
[L2268]  COND TRUE   __tmp__DType[this] == MyToken
[L2269]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_MyToken[this][msgsender_MSG], tokens_s387);
[L1922]  COND FALSE  !(!(b_s45 <= a_s45))
[L1926]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2269]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_MyToken[this][msgsender_MSG], tokens_s387);
[L2270]  COND FALSE  !(revert)
[L2276]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_MyToken[this][msgsender_MSG];
[L2277]              __tmp__balances_MyToken[this][msgsender_MSG] := __var_4;
[L2278]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_MyToken[this][msgsender_MSG];
[L2279]  COND TRUE   __tmp__DType[this] == MyToken
[L2280]  CALL        call __var_5 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_MyToken[this][to_s387], tokens_s387);
[L1904]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1905]  COND TRUE   !(c_s23 >= a_s23)
[L1906]              revert := true;
[L2280]  RET         call __var_5 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_MyToken[this][to_s387], tokens_s387);
[L2281]  COND TRUE   revert
[L955]   RET         call success_s387 := transfer~address~uint256_MyToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s387, tokens_s387);
[L956]               assume revert || gas < 0;
[L4041]  RET         call success_s387 := transfer~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, to_s387, tokens_s387);
[L4134]  RET         call CorralChoice_MyToken(this);

Loop:
[L4134]  CALL        call CorralChoice_MyToken(this);
[L3927]              havoc msgsender_MSG;
[L3928]              havoc msgvalue_MSG;
[L3929]              havoc choice;
[L3930]              havoc a_s23;
[L3931]              havoc b_s23;
[L3932]              havoc c_s23;
[L3933]              havoc a_s45;
[L3934]              havoc b_s45;
[L3935]              havoc c_s45;
[L3936]              havoc a_s73;
[L3937]              havoc b_s73;
[L3938]              havoc c_s73;
[L3939]              havoc a_s95;
[L3940]              havoc b_s95;
[L3941]              havoc c_s95;
[L3942]              havoc __ret_0_totalSupply;
[L3943]              havoc tokenOwner_s344;
[L3944]              havoc balance_s344;
[L3945]              havoc tokenOwner_s490;
[L3946]              havoc spender_s490;
[L3947]              havoc remaining_s490;
[L3948]              havoc to_s387;
[L3949]              havoc tokens_s387;
[L3950]              havoc success_s387;
[L3951]              havoc spender_s415;
[L3952]              havoc tokens_s415;
[L3953]              havoc success_s415;
[L3954]              havoc from_s474;
[L3955]              havoc to_s474;
[L3956]              havoc tokens_s474;
[L3957]              havoc success_s474;
[L3958]              havoc __ret_0_owner;
[L3959]              havoc __ret_0_newOwner;
[L3960]              havoc _newOwner_s217;
[L3961]              havoc __ret_0_symbol;
[L3962]              havoc __ret_0_name;
[L3963]              havoc __ret_0_decimals;
[L3964]              havoc __ret_0__totalSupply;
[L3965]              havoc tokenName_s318;
[L3966]              havoc tokenSymbol_s318;
[L3967]              havoc tokenDecimals_s318;
[L3968]              havoc initialSupply_s318;
[L3969]              havoc spender_s533;
[L3970]              havoc tokens_s533;
[L3971]              havoc data_s533;
[L3972]              havoc success_s533;
[L3973]              havoc tmpNow;
[L3974]              havoc gas;
[L3975]              assume gas > 4000000 && gas <= 8000000;
[L3976]              tmpNow := now;
[L3977]              havoc now;
[L3978]              assume now > tmpNow;
[L3979]              assume msgsender_MSG != null;
[L3980]              assume DType[msgsender_MSG] != SafeMath;
[L3981]              assume DType[msgsender_MSG] != ERC20Interface;
[L3982]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3983]              assume DType[msgsender_MSG] != Owned;
[L3984]              assume DType[msgsender_MSG] != MyToken;
[L3985]              Alloc[msgsender_MSG] := true;
[L3986]  COND FALSE  !(choice == 19)
[L3994]  COND FALSE  !(choice == 18)
[L4002]  COND FALSE  !(choice == 17)
[L4010]  COND FALSE  !(choice == 16)
[L4018]  COND FALSE  !(choice == 15)
[L4024]  COND FALSE  !(choice == 14)
[L4030]  COND FALSE  !(choice == 13)
[L4036]  COND TRUE   choice == 12
[L4037]              gas := gas - 21000;
[L4038]  COND TRUE   gas >= 0
[L4039]              assume tokens_s387 >= 0 && tokens_s387 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4040]              assume msgvalue_MSG == 0;
[L4041]  CALL        call success_s387 := transfer~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, to_s387, tokens_s387);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s387) && msgsender_MSG != to_s387) && tokens_s387 <= balances_MyToken[this][msgsender_MSG]) && balances_MyToken[this][to_s387] + tokens_s387 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s387 >= 0) && tokens_s387 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][to_s387] >= 0) && balances_MyToken[this][to_s387] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][msgsender_MSG] >= 0) && balances_MyToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_MyToken0 := true;
[L3]                 call_transfer_MyToken0 := false;
[L3]                 revert := revert_hold;
[L933]               havoc __exception;
[L934]               revert := false;
[L935]   COND TRUE   __exception
[L936]               __tmp__Balance := Balance;
[L937]               __tmp__DType := DType;
[L938]               __tmp__Alloc := Alloc;
[L939]               __tmp__balance_ADDR := balance_ADDR;
[L940]               __tmp__M_Ref_int := M_Ref_int;
[L941]               __tmp__sum_balances0 := sum_balances0;
[L942]               __tmp__alloc_allowed_MyToken_lvl0 := alloc_allowed_MyToken_lvl0;
[L943]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L944]               __tmp__sum_allowed1 := sum_allowed1;
[L945]               __tmp__Length := Length;
[L946]               __tmp__now := now;
[L947]               __tmp__owner_Owned := owner_Owned;
[L948]               __tmp__newOwner_Owned := newOwner_Owned;
[L949]               __tmp__symbol_MyToken := symbol_MyToken;
[L950]               __tmp__name_MyToken := name_MyToken;
[L951]               __tmp__decimals_MyToken := decimals_MyToken;
[L952]               __tmp___totalSupply_MyToken := _totalSupply_MyToken;
[L953]               __tmp__balances_MyToken := balances_MyToken;
[L954]               __tmp__allowed_MyToken := allowed_MyToken;
[L955]   CALL        call success_s387 := transfer~address~uint256_MyToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s387, tokens_s387);
[L2268]  COND TRUE   __tmp__DType[this] == MyToken
[L2269]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_MyToken[this][msgsender_MSG], tokens_s387);
[L1922]  COND FALSE  !(!(b_s45 <= a_s45))
[L1926]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2269]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_MyToken[this][msgsender_MSG], tokens_s387);
[L2270]  COND FALSE  !(revert)
[L2276]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_MyToken[this][msgsender_MSG];
[L2277]              __tmp__balances_MyToken[this][msgsender_MSG] := __var_4;
[L2278]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_MyToken[this][msgsender_MSG];
[L2279]  COND TRUE   __tmp__DType[this] == MyToken
[L2280]  CALL        call __var_5 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_MyToken[this][to_s387], tokens_s387);
[L1904]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1905]  COND TRUE   !(c_s23 >= a_s23)
[L1906]              revert := true;
[L2280]  RET         call __var_5 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_MyToken[this][to_s387], tokens_s387);
[L2281]  COND TRUE   revert
[L955]   RET         call success_s387 := transfer~address~uint256_MyToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s387, tokens_s387);
[L956]               assume revert || gas < 0;
[L4041]  RET         call success_s387 := transfer~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, to_s387, tokens_s387);
[L4134]  RET         call CorralChoice_MyToken(this);

[2020-11-25 01:53:22,424 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:53:22,425 INFO  L82        PathProgramCache]: Analyzing trace with hash -313281197, now seen corresponding path program 1 times
[2020-11-25 01:53:22,425 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:53:22,433 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:53:22,484 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 01:53:22,484 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:53:22,484 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [9] imperfect sequences [] total 9
[2020-11-25 01:53:22,485 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:53:22,485 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 01:53:22,485 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=16, Invalid=56, Unknown=0, NotChecked=0, Total=72
[2020-11-25 01:53:22,485 INFO  L87              Difference]: Start difference. First operand 2469 states and 2636 transitions. cyclomatic complexity: 169 Second operand 9 states.
[2020-11-25 01:53:23,062 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:53:23,062 INFO  L93              Difference]: Finished difference Result 2599 states and 2769 transitions.
[2020-11-25 01:53:23,062 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-11-25 01:53:23,062 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2599 states and 2769 transitions.
[2020-11-25 01:53:23,067 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:53:23,073 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2599 states to 2599 states and 2769 transitions.
[2020-11-25 01:53:23,073 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 975
[2020-11-25 01:53:23,073 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 975
[2020-11-25 01:53:23,073 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2599 states and 2769 transitions.
[2020-11-25 01:53:23,075 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:53:23,075 INFO  L728         BuchiCegarLoop]: Abstraction has 2599 states and 2769 transitions.
[2020-11-25 01:53:23,077 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2599 states and 2769 transitions.
[2020-11-25 01:53:23,091 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2599 to 2520.
[2020-11-25 01:53:23,091 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2520 states.
[2020-11-25 01:53:23,093 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2520 states to 2520 states and 2687 transitions.
[2020-11-25 01:53:23,093 INFO  L751         BuchiCegarLoop]: Abstraction has 2520 states and 2687 transitions.
[2020-11-25 01:53:23,093 INFO  L631         BuchiCegarLoop]: Abstraction has 2520 states and 2687 transitions.
[2020-11-25 01:53:23,093 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 01:53:23,093 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2520 states and 2687 transitions.
[2020-11-25 01:53:23,096 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:53:23,096 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:53:23,096 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:53:23,097 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:53:23,097 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_MyToken0 := false;
[L3]                 call_transfer_MyToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L4124]              assume null == 0;
[L4125]  CALL        call this := FreshRefGenerator__success();
[L1864]              havoc newRef;
[L1865]              assume Alloc[newRef] == false;
[L1866]              Alloc[newRef] := true;
[L1867]              assume newRef != null;
[L4125]  RET         call this := FreshRefGenerator__success();
[L4126]              assume now >= 0;
[L4127]              assume DType[this] == MyToken;
[L4128]              assume msgvalue_MSG == 0;
[L4129]              gas := gas - 53000;
[L4130]  CALL        call MyToken_MyToken(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L769]               havoc __exception;
[L770]               revert := false;
[L771]   COND FALSE  !(__exception)
[L794]   CALL        call MyToken_MyToken__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2218]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2000]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1985]              assume msgsender_MSG != null;
[L1986]              Balance[this] := 0;
[L2000]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2001]  COND FALSE  !(revert)
[L2218]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2219]  COND FALSE  !(revert)
[L2222]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2070]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2052]              assume msgsender_MSG != null;
[L2053]              Balance[this] := 0;
[L2054]              owner_Owned[this] := null;
[L2055]              newOwner_Owned[this] := null;
[L2057]              owner_Owned[this] := msgsender_MSG;
[L2070]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2071]  COND FALSE  !(revert)
[L2222]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2223]  COND FALSE  !(revert)
[L2226]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1896]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]              assume msgsender_MSG != null;
[L1882]              Balance[this] := 0;
[L1896]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1897]  COND FALSE  !(revert)
[L2226]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2227]  COND FALSE  !(revert)
[L2230]  CALL        call MyToken_MyToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2172]              assume msgsender_MSG != null;
[L2173]              Balance[this] := 0;
[L2174]              symbol_MyToken[this] := -1251229519;
[L2175]              name_MyToken[this] := -1251229519;
[L2176]              decimals_MyToken[this] := 0;
[L2177]              _totalSupply_MyToken[this] := 0;
[L2178]              balances_MyToken[this] := zeroRefintArr();
[L2179]              sum_balances0[this] := 0;
[L2180]              allowed_MyToken[this] := zeroRefRefintArr();
[L2181]              sum_allowed1[this] := 0;
[L2183]              name_MyToken[this] := tokenName_s318;
[L2184]              symbol_MyToken[this] := tokenSymbol_s318;
[L2185]              decimals_MyToken[this] := tokenDecimals_s318;
[L2186]              __var_2 := tokenDecimals_s318 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2187]              _totalSupply_MyToken[this] := nonlinearMul(initialSupply_s318, nonlinearPow(10, tokenDecimals_s318 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2188]              sum_balances0[this] := sum_balances0[this] - balances_MyToken[this][msgsender_MSG];
[L2189]              balances_MyToken[this][msgsender_MSG] := _totalSupply_MyToken[this];
[L2190]              sum_balances0[this] := sum_balances0[this] + balances_MyToken[this][msgsender_MSG];
[L2191]              assert { :EventEmitted "Transfer_MyToken" } true;
[L2230]  RET         call MyToken_MyToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2231]  COND FALSE  !(revert)
[L794]   RET         call MyToken_MyToken__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L795]               assume !revert && gas >= 0;
[L4130]  RET         call MyToken_MyToken(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L4131]              assume !revert && gas >= 0;
[L4134]  CALL        call CorralChoice_MyToken(this);
[L3927]              havoc msgsender_MSG;
[L3928]              havoc msgvalue_MSG;
[L3929]              havoc choice;
[L3930]              havoc a_s23;
[L3931]              havoc b_s23;
[L3932]              havoc c_s23;
[L3933]              havoc a_s45;
[L3934]              havoc b_s45;
[L3935]              havoc c_s45;
[L3936]              havoc a_s73;
[L3937]              havoc b_s73;
[L3938]              havoc c_s73;
[L3939]              havoc a_s95;
[L3940]              havoc b_s95;
[L3941]              havoc c_s95;
[L3942]              havoc __ret_0_totalSupply;
[L3943]              havoc tokenOwner_s344;
[L3944]              havoc balance_s344;
[L3945]              havoc tokenOwner_s490;
[L3946]              havoc spender_s490;
[L3947]              havoc remaining_s490;
[L3948]              havoc to_s387;
[L3949]              havoc tokens_s387;
[L3950]              havoc success_s387;
[L3951]              havoc spender_s415;
[L3952]              havoc tokens_s415;
[L3953]              havoc success_s415;
[L3954]              havoc from_s474;
[L3955]              havoc to_s474;
[L3956]              havoc tokens_s474;
[L3957]              havoc success_s474;
[L3958]              havoc __ret_0_owner;
[L3959]              havoc __ret_0_newOwner;
[L3960]              havoc _newOwner_s217;
[L3961]              havoc __ret_0_symbol;
[L3962]              havoc __ret_0_name;
[L3963]              havoc __ret_0_decimals;
[L3964]              havoc __ret_0__totalSupply;
[L3965]              havoc tokenName_s318;
[L3966]              havoc tokenSymbol_s318;
[L3967]              havoc tokenDecimals_s318;
[L3968]              havoc initialSupply_s318;
[L3969]              havoc spender_s533;
[L3970]              havoc tokens_s533;
[L3971]              havoc data_s533;
[L3972]              havoc success_s533;
[L3973]              havoc tmpNow;
[L3974]              havoc gas;
[L3975]              assume gas > 4000000 && gas <= 8000000;
[L3976]              tmpNow := now;
[L3977]              havoc now;
[L3978]              assume now > tmpNow;
[L3979]              assume msgsender_MSG != null;
[L3980]              assume DType[msgsender_MSG] != SafeMath;
[L3981]              assume DType[msgsender_MSG] != ERC20Interface;
[L3982]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3983]              assume DType[msgsender_MSG] != Owned;
[L3984]              assume DType[msgsender_MSG] != MyToken;
[L3985]              Alloc[msgsender_MSG] := true;
[L3986]  COND FALSE  !(choice == 19)
[L3994]  COND FALSE  !(choice == 18)
[L4002]  COND FALSE  !(choice == 17)
[L4010]  COND FALSE  !(choice == 16)
[L4018]  COND FALSE  !(choice == 15)
[L4024]  COND FALSE  !(choice == 14)
[L4030]  COND FALSE  !(choice == 13)
[L4036]  COND TRUE   choice == 12
[L4037]              gas := gas - 21000;
[L4038]  COND TRUE   gas >= 0
[L4039]              assume tokens_s387 >= 0 && tokens_s387 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4040]              assume msgvalue_MSG == 0;
[L4041]  CALL        call success_s387 := transfer~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, to_s387, tokens_s387);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s387) && msgsender_MSG != to_s387) && tokens_s387 <= balances_MyToken[this][msgsender_MSG]) && balances_MyToken[this][to_s387] + tokens_s387 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s387 >= 0) && tokens_s387 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][to_s387] >= 0) && balances_MyToken[this][to_s387] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][msgsender_MSG] >= 0) && balances_MyToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_MyToken0 := true;
[L3]                 call_transfer_MyToken0 := false;
[L3]                 revert := revert_hold;
[L933]               havoc __exception;
[L934]               revert := false;
[L935]   COND TRUE   __exception
[L936]               __tmp__Balance := Balance;
[L937]               __tmp__DType := DType;
[L938]               __tmp__Alloc := Alloc;
[L939]               __tmp__balance_ADDR := balance_ADDR;
[L940]               __tmp__M_Ref_int := M_Ref_int;
[L941]               __tmp__sum_balances0 := sum_balances0;
[L942]               __tmp__alloc_allowed_MyToken_lvl0 := alloc_allowed_MyToken_lvl0;
[L943]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L944]               __tmp__sum_allowed1 := sum_allowed1;
[L945]               __tmp__Length := Length;
[L946]               __tmp__now := now;
[L947]               __tmp__owner_Owned := owner_Owned;
[L948]               __tmp__newOwner_Owned := newOwner_Owned;
[L949]               __tmp__symbol_MyToken := symbol_MyToken;
[L950]               __tmp__name_MyToken := name_MyToken;
[L951]               __tmp__decimals_MyToken := decimals_MyToken;
[L952]               __tmp___totalSupply_MyToken := _totalSupply_MyToken;
[L953]               __tmp__balances_MyToken := balances_MyToken;
[L954]               __tmp__allowed_MyToken := allowed_MyToken;
[L955]   CALL        call success_s387 := transfer~address~uint256_MyToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s387, tokens_s387);
[L2268]  COND TRUE   __tmp__DType[this] == MyToken
[L2269]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_MyToken[this][msgsender_MSG], tokens_s387);
[L1922]  COND FALSE  !(!(b_s45 <= a_s45))
[L1926]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2269]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_MyToken[this][msgsender_MSG], tokens_s387);
[L2270]  COND FALSE  !(revert)
[L2276]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_MyToken[this][msgsender_MSG];
[L2277]              __tmp__balances_MyToken[this][msgsender_MSG] := __var_4;
[L2278]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_MyToken[this][msgsender_MSG];
[L2279]  COND TRUE   __tmp__DType[this] == MyToken
[L2280]  CALL        call __var_5 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_MyToken[this][to_s387], tokens_s387);
[L1904]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1905]  COND FALSE  !(!(c_s23 >= a_s23))
[L2280]  RET         call __var_5 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_MyToken[this][to_s387], tokens_s387);
[L2281]  COND FALSE  !(revert)
[L2287]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_MyToken[this][to_s387];
[L2288]              __tmp__balances_MyToken[this][to_s387] := __var_5;
[L2289]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_MyToken[this][to_s387];
[L2290]              success_s387 := true;
[L955]   RET         call success_s387 := transfer~address~uint256_MyToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s387, tokens_s387);
[L956]               assume revert || gas < 0;
[L4041]  RET         call success_s387 := transfer~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, to_s387, tokens_s387);
[L4134]  RET         call CorralChoice_MyToken(this);

Loop:
[L4134]  CALL        call CorralChoice_MyToken(this);
[L3927]              havoc msgsender_MSG;
[L3928]              havoc msgvalue_MSG;
[L3929]              havoc choice;
[L3930]              havoc a_s23;
[L3931]              havoc b_s23;
[L3932]              havoc c_s23;
[L3933]              havoc a_s45;
[L3934]              havoc b_s45;
[L3935]              havoc c_s45;
[L3936]              havoc a_s73;
[L3937]              havoc b_s73;
[L3938]              havoc c_s73;
[L3939]              havoc a_s95;
[L3940]              havoc b_s95;
[L3941]              havoc c_s95;
[L3942]              havoc __ret_0_totalSupply;
[L3943]              havoc tokenOwner_s344;
[L3944]              havoc balance_s344;
[L3945]              havoc tokenOwner_s490;
[L3946]              havoc spender_s490;
[L3947]              havoc remaining_s490;
[L3948]              havoc to_s387;
[L3949]              havoc tokens_s387;
[L3950]              havoc success_s387;
[L3951]              havoc spender_s415;
[L3952]              havoc tokens_s415;
[L3953]              havoc success_s415;
[L3954]              havoc from_s474;
[L3955]              havoc to_s474;
[L3956]              havoc tokens_s474;
[L3957]              havoc success_s474;
[L3958]              havoc __ret_0_owner;
[L3959]              havoc __ret_0_newOwner;
[L3960]              havoc _newOwner_s217;
[L3961]              havoc __ret_0_symbol;
[L3962]              havoc __ret_0_name;
[L3963]              havoc __ret_0_decimals;
[L3964]              havoc __ret_0__totalSupply;
[L3965]              havoc tokenName_s318;
[L3966]              havoc tokenSymbol_s318;
[L3967]              havoc tokenDecimals_s318;
[L3968]              havoc initialSupply_s318;
[L3969]              havoc spender_s533;
[L3970]              havoc tokens_s533;
[L3971]              havoc data_s533;
[L3972]              havoc success_s533;
[L3973]              havoc tmpNow;
[L3974]              havoc gas;
[L3975]              assume gas > 4000000 && gas <= 8000000;
[L3976]              tmpNow := now;
[L3977]              havoc now;
[L3978]              assume now > tmpNow;
[L3979]              assume msgsender_MSG != null;
[L3980]              assume DType[msgsender_MSG] != SafeMath;
[L3981]              assume DType[msgsender_MSG] != ERC20Interface;
[L3982]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3983]              assume DType[msgsender_MSG] != Owned;
[L3984]              assume DType[msgsender_MSG] != MyToken;
[L3985]              Alloc[msgsender_MSG] := true;
[L3986]  COND FALSE  !(choice == 19)
[L3994]  COND FALSE  !(choice == 18)
[L4002]  COND FALSE  !(choice == 17)
[L4010]  COND FALSE  !(choice == 16)
[L4018]  COND FALSE  !(choice == 15)
[L4024]  COND FALSE  !(choice == 14)
[L4030]  COND FALSE  !(choice == 13)
[L4036]  COND TRUE   choice == 12
[L4037]              gas := gas - 21000;
[L4038]  COND TRUE   gas >= 0
[L4039]              assume tokens_s387 >= 0 && tokens_s387 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4040]              assume msgvalue_MSG == 0;
[L4041]  CALL        call success_s387 := transfer~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, to_s387, tokens_s387);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s387) && msgsender_MSG != to_s387) && tokens_s387 <= balances_MyToken[this][msgsender_MSG]) && balances_MyToken[this][to_s387] + tokens_s387 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s387 >= 0) && tokens_s387 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][to_s387] >= 0) && balances_MyToken[this][to_s387] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][msgsender_MSG] >= 0) && balances_MyToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_MyToken0 := true;
[L3]                 call_transfer_MyToken0 := false;
[L3]                 revert := revert_hold;
[L933]               havoc __exception;
[L934]               revert := false;
[L935]   COND TRUE   __exception
[L936]               __tmp__Balance := Balance;
[L937]               __tmp__DType := DType;
[L938]               __tmp__Alloc := Alloc;
[L939]               __tmp__balance_ADDR := balance_ADDR;
[L940]               __tmp__M_Ref_int := M_Ref_int;
[L941]               __tmp__sum_balances0 := sum_balances0;
[L942]               __tmp__alloc_allowed_MyToken_lvl0 := alloc_allowed_MyToken_lvl0;
[L943]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L944]               __tmp__sum_allowed1 := sum_allowed1;
[L945]               __tmp__Length := Length;
[L946]               __tmp__now := now;
[L947]               __tmp__owner_Owned := owner_Owned;
[L948]               __tmp__newOwner_Owned := newOwner_Owned;
[L949]               __tmp__symbol_MyToken := symbol_MyToken;
[L950]               __tmp__name_MyToken := name_MyToken;
[L951]               __tmp__decimals_MyToken := decimals_MyToken;
[L952]               __tmp___totalSupply_MyToken := _totalSupply_MyToken;
[L953]               __tmp__balances_MyToken := balances_MyToken;
[L954]               __tmp__allowed_MyToken := allowed_MyToken;
[L955]   CALL        call success_s387 := transfer~address~uint256_MyToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s387, tokens_s387);
[L2268]  COND TRUE   __tmp__DType[this] == MyToken
[L2269]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_MyToken[this][msgsender_MSG], tokens_s387);
[L1922]  COND FALSE  !(!(b_s45 <= a_s45))
[L1926]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2269]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_MyToken[this][msgsender_MSG], tokens_s387);
[L2270]  COND FALSE  !(revert)
[L2276]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_MyToken[this][msgsender_MSG];
[L2277]              __tmp__balances_MyToken[this][msgsender_MSG] := __var_4;
[L2278]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_MyToken[this][msgsender_MSG];
[L2279]  COND TRUE   __tmp__DType[this] == MyToken
[L2280]  CALL        call __var_5 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_MyToken[this][to_s387], tokens_s387);
[L1904]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1905]  COND FALSE  !(!(c_s23 >= a_s23))
[L2280]  RET         call __var_5 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_MyToken[this][to_s387], tokens_s387);
[L2281]  COND FALSE  !(revert)
[L2287]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_MyToken[this][to_s387];
[L2288]              __tmp__balances_MyToken[this][to_s387] := __var_5;
[L2289]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_MyToken[this][to_s387];
[L2290]              success_s387 := true;
[L955]   RET         call success_s387 := transfer~address~uint256_MyToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s387, tokens_s387);
[L956]               assume revert || gas < 0;
[L4041]  RET         call success_s387 := transfer~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, to_s387, tokens_s387);
[L4134]  RET         call CorralChoice_MyToken(this);

[2020-11-25 01:53:23,100 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:53:23,100 INFO  L82        PathProgramCache]: Analyzing trace with hash -1253798106, now seen corresponding path program 1 times
[2020-11-25 01:53:23,101 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:53:23,109 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:53:23,139 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 01:53:23,139 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:53:23,139 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 01:53:23,140 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:53:23,140 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 01:53:23,140 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=10, Invalid=20, Unknown=0, NotChecked=0, Total=30
[2020-11-25 01:53:23,140 INFO  L87              Difference]: Start difference. First operand 2520 states and 2687 transitions. cyclomatic complexity: 169 Second operand 6 states.
[2020-11-25 01:53:23,330 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:53:23,331 INFO  L93              Difference]: Finished difference Result 1785 states and 1923 transitions.
[2020-11-25 01:53:23,331 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-11-25 01:53:23,331 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1785 states and 1923 transitions.
[2020-11-25 01:53:23,335 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 01:53:23,335 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1785 states to 0 states and 0 transitions.
[2020-11-25 01:53:23,335 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-25 01:53:23,335 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-25 01:53:23,335 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-25 01:53:23,335 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:53:23,335 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 01:53:23,335 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 01:53:23,335 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 01:53:23,335 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 01:53:23,335 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-25 01:53:23,335 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 01:53:23,335 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-25 01:53:23,338 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 01:53:23 BasicIcfg
[2020-11-25 01:53:23,338 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 01:53:23,339 INFO  L168              Benchmark]: Toolchain (without parser) took 9068.59 ms. Allocated memory was 1.0 GB in the beginning and 1.8 GB in the end (delta: 746.1 MB). Free memory was 935.2 MB in the beginning and 971.8 MB in the end (delta: -36.6 MB). Peak memory consumption was 709.5 MB. Max. memory is 15.3 GB.
[2020-11-25 01:53:23,339 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.18 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 01:53:23,340 INFO  L168              Benchmark]: Boogie Preprocessor took 105.62 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 924.5 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 01:53:23,340 INFO  L168              Benchmark]: UtopiaSpecLang took 72.85 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 919.1 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 01:53:23,340 INFO  L168              Benchmark]: Boogie Printer took 15.24 ms. Allocated memory is still 1.0 GB. Free memory is still 919.1 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 01:53:23,341 INFO  L168              Benchmark]: RCFGBuilder took 722.10 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 801.0 MB in the end (delta: 118.1 MB). Peak memory consumption was 118.1 MB. Max. memory is 15.3 GB.
[2020-11-25 01:53:23,341 INFO  L168              Benchmark]: UtopiaLTL2Aut took 39.99 ms. Allocated memory is still 1.0 GB. Free memory was 801.0 MB in the beginning and 792.0 MB in the end (delta: 8.9 MB). Peak memory consumption was 8.9 MB. Max. memory is 15.3 GB.
[2020-11-25 01:53:23,341 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1308.29 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 197.1 MB). Free memory was 792.0 MB in the beginning and 1.0 GB in the end (delta: -216.9 MB). Peak memory consumption was 168.8 MB. Max. memory is 15.3 GB.
[2020-11-25 01:53:23,341 INFO  L168              Benchmark]: BlockEncodingV2 took 123.52 ms. Allocated memory is still 1.2 GB. Free memory was 1.0 GB in the beginning and 947.9 MB in the end (delta: 61.0 MB). Peak memory consumption was 61.0 MB. Max. memory is 15.3 GB.
[2020-11-25 01:53:23,342 INFO  L168              Benchmark]: BuchiAutomizer took 6677.87 ms. Allocated memory was 1.2 GB in the beginning and 1.8 GB in the end (delta: 548.9 MB). Free memory was 947.9 MB in the beginning and 971.8 MB in the end (delta: -23.8 MB). Peak memory consumption was 525.1 MB. Max. memory is 15.3 GB.
[2020-11-25 01:53:23,344 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    3570 locations, 6127 edges
  - StatisticsResult: Encoded RCFG
    3514 locations, 5979 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.18 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 105.62 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 924.5 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 72.85 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 919.1 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 15.24 ms. Allocated memory is still 1.0 GB. Free memory is still 919.1 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * RCFGBuilder took 722.10 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 801.0 MB in the end (delta: 118.1 MB). Peak memory consumption was 118.1 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 39.99 ms. Allocated memory is still 1.0 GB. Free memory was 801.0 MB in the beginning and 792.0 MB in the end (delta: 8.9 MB). Peak memory consumption was 8.9 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1308.29 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 197.1 MB). Free memory was 792.0 MB in the beginning and 1.0 GB in the end (delta: -216.9 MB). Peak memory consumption was 168.8 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 123.52 ms. Allocated memory is still 1.2 GB. Free memory was 1.0 GB in the beginning and 947.9 MB in the end (delta: 61.0 MB). Peak memory consumption was 61.0 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 6677.87 ms. Allocated memory was 1.2 GB in the beginning and 1.8 GB in the end (delta: 548.9 MB). Free memory was 947.9 MB in the beginning and 971.8 MB in the end (delta: -23.8 MB). Peak memory consumption was 525.1 MB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    1505 locations, 1891 edges
  - StatisticsResult: BuchiProgram size
    3570 locations, 6127 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 6 terminating modules (6 trivial, 0 deterministic, 0 nondeterministic). 6 modules have a trivial ranking function, the largest among these consists of 13 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 6.6s and 7 iterations.  TraceHistogramMax:1. Analysis of lassos took 0.7s. Construction of modules took 4.3s. BÃ¼chi inclusion checks took 1.0s. Highest rank in rank-based complementation 0. Minimization of det autom 6. Minimization of nondet autom 0. Automata minimization 0.1s AutomataMinimizationTime, 5 MinimizatonAttempts, 1260 StatesRemovedByMinimization, 4 NontrivialMinimizations. Non-live state removal took 0.1s Buchi closure took 0.0s. Biggest automaton had 2592 states and ocurred in iteration 1.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 16109 SDtfs, 16658 SDslu, 30969 SDs, 0 SdLazy, 24878 SolverSat, 2617 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 4.3s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU6 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_transfer_MyToken0) ==> ( <>(success_transfer_MyToken0) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
