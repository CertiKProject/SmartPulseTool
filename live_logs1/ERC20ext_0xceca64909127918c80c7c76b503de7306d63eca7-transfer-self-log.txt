This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 15:06:41,938 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 15:06:41,940 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 15:06:41,950 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 15:06:41,951 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 15:06:41,951 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 15:06:41,952 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 15:06:41,954 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 15:06:41,955 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 15:06:41,956 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 15:06:41,957 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 15:06:41,957 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 15:06:41,957 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 15:06:41,958 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 15:06:41,959 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 15:06:41,959 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 15:06:41,960 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 15:06:41,961 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 15:06:41,962 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 15:06:41,964 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 15:06:41,965 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 15:06:41,965 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 15:06:41,967 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 15:06:41,967 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 15:06:41,967 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 15:06:41,968 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 15:06:41,968 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 15:06:41,969 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 15:06:41,969 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 15:06:41,969 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 15:06:41,969 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 15:06:41,970 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 15:06:41,970 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 15:06:41,971 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 15:06:41,971 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 15:06:41,972 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 15:06:41,972 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 15:06:41,972 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 15:06:41,972 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 15:06:41,973 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 15:06:41,973 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 15:06:41,974 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 15:06:41,981 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 15:06:41,981 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 15:06:41,982 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 15:06:41,982 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 15:06:41,982 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 15:06:41,982 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 15:06:41,983 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 15:06:41,983 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 15:06:41,983 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 15:06:41,983 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 15:06:41,983 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 15:06:41,983 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 15:06:41,983 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 15:06:41,983 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 15:06:41,983 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 15:06:41,984 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 15:06:41,984 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 15:06:41,984 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 15:06:41,984 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 15:06:41,984 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 15:06:41,984 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 15:06:41,984 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 15:06:41,984 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 15:06:41,984 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 15:06:41,984 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 15:06:41,985 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 15:06:42,007 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 15:06:42,020 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 15:06:42,022 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 15:06:42,023 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 15:06:42,024 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 15:06:42,024 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/ERC20ext_0xceca64909127918c80c7c76b503de7306d63eca7_transfer-self.bpl
[2020-11-25 15:06:42,024 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/ERC20ext_0xceca64909127918c80c7c76b503de7306d63eca7_transfer-self.bpl'
[2020-11-25 15:06:42,111 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 15:06:42,112 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 15:06:42,113 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 15:06:42,113 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 15:06:42,113 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 15:06:42,129 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "ERC20ext_0xceca64909127918c80c7c76b503de7306d63eca7_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:06:42" (1/1) ...
[2020-11-25 15:06:42,131 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "ERC20ext_0xceca64909127918c80c7c76b503de7306d63eca7_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:06:42" (1/1) ...
[2020-11-25 15:06:42,161 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "ERC20ext_0xceca64909127918c80c7c76b503de7306d63eca7_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:06:42" (1/1) ...
[2020-11-25 15:06:42,162 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "ERC20ext_0xceca64909127918c80c7c76b503de7306d63eca7_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:06:42" (1/1) ...
[2020-11-25 15:06:42,184 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "ERC20ext_0xceca64909127918c80c7c76b503de7306d63eca7_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:06:42" (1/1) ...
[2020-11-25 15:06:42,194 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "ERC20ext_0xceca64909127918c80c7c76b503de7306d63eca7_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:06:42" (1/1) ...
[2020-11-25 15:06:42,203 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "ERC20ext_0xceca64909127918c80c7c76b503de7306d63eca7_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:06:42" (1/1) ...
[2020-11-25 15:06:42,213 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 15:06:42,213 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 15:06:42,214 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 15:06:42,216 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 15:06:42,219 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "ERC20ext_0xceca64909127918c80c7c76b503de7306d63eca7_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:06:42" (1/1) ...
[2020-11-25 15:06:42,236 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(TokenERC20.transfer(to, value), msg.sender == to && value <= balanceOf_TokenERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_TokenERC20[this][to] >= 0 && balanceOf_TokenERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_TokenERC20[this][msg.sender] >= 0 &&  balanceOf_TokenERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(TokenERC20.transfer(to, value), return == true && totalSupply_TokenERC20[this] == old(totalSupply_TokenERC20[this]) && balanceOf_TokenERC20[this] == old(balanceOf_TokenERC20[this]) && allowance_TokenERC20[this] == old(allowance_TokenERC20[this]) && frozenAccount_ERC20ext[this] == old(frozenAccount_ERC20ext[this]) && lockedAccount_ERC20ext[this] == old(lockedAccount_ERC20ext[this]) && lockedAmount_ERC20ext[this] == old(lockedAmount_ERC20ext[this]) && name_TokenERC20[this] == old(name_TokenERC20[this]) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this]) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this]) && owner_owned[this] == old(owner_owned[this]))))
[2020-11-25 15:06:42,241 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(TokenERC20.transfer(to, value), msg.sender == to && value <= balanceOf_TokenERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_TokenERC20[this][to] >= 0 && balanceOf_TokenERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_TokenERC20[this][msg.sender] >= 0 &&  balanceOf_TokenERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(TokenERC20.transfer(to, value), return == true && totalSupply_TokenERC20[this] == old(totalSupply_TokenERC20[this]) && balanceOf_TokenERC20[this] == old(balanceOf_TokenERC20[this]) && allowance_TokenERC20[this] == old(allowance_TokenERC20[this]) && frozenAccount_ERC20ext[this] == old(frozenAccount_ERC20ext[this]) && lockedAccount_ERC20ext[this] == old(lockedAccount_ERC20ext[this]) && lockedAmount_ERC20ext[this] == old(lockedAmount_ERC20ext[this]) && name_TokenERC20[this] == old(name_TokenERC20[this]) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this]) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this]) && owner_owned[this] == old(owner_owned[this]))))
[2020-11-25 15:06:42,249 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(TokenERC20.transfer(to, value), msg.sender == to && value <= balanceOf_TokenERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_TokenERC20[this][to] >= 0 && balanceOf_TokenERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_TokenERC20[this][msg.sender] >= 0 &&  balanceOf_TokenERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(TokenERC20.transfer(to, value), return == true && totalSupply_TokenERC20[this] == old(totalSupply_TokenERC20[this]) && balanceOf_TokenERC20[this] == old(balanceOf_TokenERC20[this]) && allowance_TokenERC20[this] == old(allowance_TokenERC20[this]) && frozenAccount_ERC20ext[this] == old(frozenAccount_ERC20ext[this]) && lockedAccount_ERC20ext[this] == old(lockedAccount_ERC20ext[this]) && lockedAmount_ERC20ext[this] == old(lockedAmount_ERC20ext[this]) && name_TokenERC20[this] == old(name_TokenERC20[this]) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this]) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this]) && owner_owned[this] == old(owner_owned[this]))))
[2020-11-25 15:06:42,255 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( msg.sender==_to_s365 && _value_s365<=balanceOf_TokenERC20[this][msg.sender] ) && _value_s365>=0 ) && _value_s365<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balanceOf_TokenERC20[this][_to_s365]>=0 ) && balanceOf_TokenERC20[this][_to_s365]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balanceOf_TokenERC20[this][msg.sender]>=0 ) && balanceOf_TokenERC20[this][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>],IdentifierExpression[_to_s365,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]],BinaryExpression[COMPLEQ,IdentifierExpression[_value_s365,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]]],BinaryExpression[COMPGEQ,IdentifierExpression[_value_s365,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[_value_s365,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],[IdentifierExpression[_to_s365,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],[IdentifierExpression[_to_s365,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 15:06:42,258 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( success_s365==true && totalSupply_TokenERC20[this]==( old(totalSupply_TokenERC20[this]) ) ) && balanceOf_TokenERC20[this]==( old(balanceOf_TokenERC20[this]) ) ) && allowance_TokenERC20[this]==( old(allowance_TokenERC20[this]) ) ) && frozenAccount_ERC20ext[this]==( old(frozenAccount_ERC20ext[this]) ) ) && lockedAccount_ERC20ext[this]==( old(lockedAccount_ERC20ext[this]) ) ) && lockedAmount_ERC20ext[this]==( old(lockedAmount_ERC20ext[this]) ) ) && name_TokenERC20[this]==( old(name_TokenERC20[this]) ) ) && symbol_TokenERC20[this]==( old(symbol_TokenERC20[this]) ) ) && decimals_TokenERC20[this]==( old(decimals_TokenERC20[this]) ) ) && owner_owned[this]==( old(owner_owned[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[success_s365,<IMPLEMENTATION_OUTPARAM,transfer~address~uint256_TokenERC20>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[totalSupply_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[totalSupply_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[balanceOf_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[balanceOf_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[allowance_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[allowance_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[frozenAccount_ERC20ext,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[frozenAccount_ERC20ext,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[lockedAccount_ERC20ext,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[lockedAccount_ERC20ext,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[lockedAmount_ERC20ext,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[lockedAmount_ERC20ext,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[name_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[name_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[symbol_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[symbol_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[decimals_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[decimals_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[owner_owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[owner_owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]]]]
[2020-11-25 15:06:42,264 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(TokenERC20.transfer(to, value), msg.sender == to && value <= balanceOf_TokenERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_TokenERC20[this][to] >= 0 && balanceOf_TokenERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_TokenERC20[this][msg.sender] >= 0 &&  balanceOf_TokenERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(TokenERC20.transfer(to, value), return == true && totalSupply_TokenERC20[this] == old(totalSupply_TokenERC20[this]) && balanceOf_TokenERC20[this] == old(balanceOf_TokenERC20[this]) && allowance_TokenERC20[this] == old(allowance_TokenERC20[this]) && frozenAccount_ERC20ext[this] == old(frozenAccount_ERC20ext[this]) && lockedAccount_ERC20ext[this] == old(lockedAccount_ERC20ext[this]) && lockedAmount_ERC20ext[this] == old(lockedAmount_ERC20ext[this]) && name_TokenERC20[this] == old(name_TokenERC20[this]) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this]) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this]) && owner_owned[this] == old(owner_owned[this]))))
[2020-11-25 15:06:42,264 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transfer_TokenERC200) ==> ( <>AP(success_transfer_TokenERC200) ) ) )
Executed UtopiaSpecLang
[2020-11-25 15:06:42,274 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 03:06:42 PropertyContainer
[2020-11-25 15:06:42,274 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 15:06:42,274 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 15:06:42,274 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 15:06:42,275 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 15:06:42,275 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "ERC20ext_0xceca64909127918c80c7c76b503de7306d63eca7_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:06:42" (1/2) ...
[2020-11-25 15:06:42,276 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 15:06:42,276 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 15:06:42,290 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 03:06:42" (2/2) ...
[2020-11-25 15:06:42,291 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 15:06:42,291 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 15:06:42,291 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 15:06:42,291 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 15:06:42,292 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "ERC20ext_0xceca64909127918c80c7c76b503de7306d63eca7_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:06:42" (1/2) ...
[2020-11-25 15:06:42,343 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 15:06:42,343 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 15:06:42,343 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 15:06:42,344 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 15:06:42,344 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 15:06:42,344 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 15:06:42,344 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 15:06:42,344 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 15:06:42,344 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 15:06:42,344 INFO  L130     BoogieDeclarations]: Found specification of procedure owned_owned_NoBaseCtor__success
[2020-11-25 15:06:42,344 INFO  L130     BoogieDeclarations]: Found specification of procedure owned_owned
[2020-11-25 15:06:42,344 INFO  L138     BoogieDeclarations]: Found implementation of procedure owned_owned
[2020-11-25 15:06:42,344 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_owned
[2020-11-25 15:06:42,345 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_owned
[2020-11-25 15:06:42,345 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_owned
[2020-11-25 15:06:42,345 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_owned
[2020-11-25 15:06:42,345 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenRecipient_tokenRecipient_NoBaseCtor__success
[2020-11-25 15:06:42,345 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenRecipient_tokenRecipient
[2020-11-25 15:06:42,345 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenRecipient_tokenRecipient
[2020-11-25 15:06:42,346 INFO  L130     BoogieDeclarations]: Found specification of procedure receiveApproval~address~uint256~address~bytes_tokenRecipient
[2020-11-25 15:06:42,346 INFO  L130     BoogieDeclarations]: Found specification of procedure TokenERC20_TokenERC20_NoBaseCtor__success
[2020-11-25 15:06:42,346 INFO  L130     BoogieDeclarations]: Found specification of procedure TokenERC20_TokenERC20
[2020-11-25 15:06:42,346 INFO  L138     BoogieDeclarations]: Found implementation of procedure TokenERC20_TokenERC20
[2020-11-25 15:06:42,346 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_TokenERC20__success
[2020-11-25 15:06:42,346 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_TokenERC20
[2020-11-25 15:06:42,346 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_TokenERC20
[2020-11-25 15:06:42,346 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_TokenERC20
[2020-11-25 15:06:42,346 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_TokenERC20
[2020-11-25 15:06:42,346 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_TokenERC20
[2020-11-25 15:06:42,347 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_TokenERC20
[2020-11-25 15:06:42,347 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_TokenERC20
[2020-11-25 15:06:42,347 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_TokenERC20
[2020-11-25 15:06:42,347 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_TokenERC20
[2020-11-25 15:06:42,347 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_TokenERC20
[2020-11-25 15:06:42,347 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_TokenERC20
[2020-11-25 15:06:42,347 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_TokenERC20
[2020-11-25 15:06:42,347 INFO  L130     BoogieDeclarations]: Found specification of procedure name_TokenERC20
[2020-11-25 15:06:42,347 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_TokenERC20
[2020-11-25 15:06:42,347 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_TokenERC20
[2020-11-25 15:06:42,347 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_TokenERC20
[2020-11-25 15:06:42,348 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_TokenERC20
[2020-11-25 15:06:42,348 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_TokenERC20
[2020-11-25 15:06:42,348 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_TokenERC20
[2020-11-25 15:06:42,348 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_TokenERC20
[2020-11-25 15:06:42,348 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_TokenERC20
[2020-11-25 15:06:42,348 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_TokenERC20
[2020-11-25 15:06:42,348 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_TokenERC20
[2020-11-25 15:06:42,348 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_TokenERC20
[2020-11-25 15:06:42,348 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20ext_ERC20ext_NoBaseCtor__success
[2020-11-25 15:06:42,348 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20ext_ERC20ext
[2020-11-25 15:06:42,349 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20ext_ERC20ext
[2020-11-25 15:06:42,349 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20ext__success
[2020-11-25 15:06:42,349 INFO  L130     BoogieDeclarations]: Found specification of procedure mintToken~address~uint256_ERC20ext
[2020-11-25 15:06:42,349 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintToken~address~uint256_ERC20ext
[2020-11-25 15:06:42,349 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeAccount~address~bool_ERC20ext
[2020-11-25 15:06:42,349 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeAccount~address~bool_ERC20ext
[2020-11-25 15:06:42,349 INFO  L130     BoogieDeclarations]: Found specification of procedure lock~address~uint256~uint256_ERC20ext
[2020-11-25 15:06:42,349 INFO  L138     BoogieDeclarations]: Found implementation of procedure lock~address~uint256~uint256_ERC20ext
[2020-11-25 15:06:42,349 INFO  L130     BoogieDeclarations]: Found specification of procedure frozenAccount~address_ERC20ext
[2020-11-25 15:06:42,349 INFO  L138     BoogieDeclarations]: Found implementation of procedure frozenAccount~address_ERC20ext
[2020-11-25 15:06:42,350 INFO  L130     BoogieDeclarations]: Found specification of procedure lockedAccount~address_ERC20ext
[2020-11-25 15:06:42,350 INFO  L138     BoogieDeclarations]: Found implementation of procedure lockedAccount~address_ERC20ext
[2020-11-25 15:06:42,350 INFO  L130     BoogieDeclarations]: Found specification of procedure lockedAmount~address_ERC20ext
[2020-11-25 15:06:42,350 INFO  L138     BoogieDeclarations]: Found implementation of procedure lockedAmount~address_ERC20ext
[2020-11-25 15:06:42,350 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 15:06:42,350 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 15:06:42,350 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 15:06:42,350 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 15:06:42,350 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 15:06:42,350 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 15:06:42,350 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_owned
[2020-11-25 15:06:42,351 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_owned
[2020-11-25 15:06:42,351 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_tokenRecipient
[2020-11-25 15:06:42,351 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_tokenRecipient
[2020-11-25 15:06:42,351 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_TokenERC20
[2020-11-25 15:06:42,351 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_TokenERC20
[2020-11-25 15:06:42,351 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20ext
[2020-11-25 15:06:42,351 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 15:06:42,351 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 15:06:42,351 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 15:06:42,352 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 15:06:42,352 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 15:06:42,352 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 15:06:42,352 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 15:06:42,352 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 15:06:42,352 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 15:06:42,352 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 15:06:42,352 INFO  L130     BoogieDeclarations]: Found specification of procedure owned_owned_NoBaseCtor__fail
[2020-11-25 15:06:42,352 INFO  L130     BoogieDeclarations]: Found specification of procedure owned_owned__success
[2020-11-25 15:06:42,352 INFO  L130     BoogieDeclarations]: Found specification of procedure owned_owned__fail
[2020-11-25 15:06:42,352 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_owned__success
[2020-11-25 15:06:42,353 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_owned__fail
[2020-11-25 15:06:42,353 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_owned__success
[2020-11-25 15:06:42,353 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_owned__fail
[2020-11-25 15:06:42,353 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenRecipient_tokenRecipient_NoBaseCtor__fail
[2020-11-25 15:06:42,353 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenRecipient_tokenRecipient__success
[2020-11-25 15:06:42,353 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenRecipient_tokenRecipient__fail
[2020-11-25 15:06:42,353 INFO  L130     BoogieDeclarations]: Found specification of procedure TokenERC20_TokenERC20_NoBaseCtor__fail
[2020-11-25 15:06:42,353 INFO  L130     BoogieDeclarations]: Found specification of procedure TokenERC20_TokenERC20__success
[2020-11-25 15:06:42,353 INFO  L130     BoogieDeclarations]: Found specification of procedure TokenERC20_TokenERC20__fail
[2020-11-25 15:06:42,353 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_TokenERC20__fail
[2020-11-25 15:06:42,353 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_TokenERC20__success
[2020-11-25 15:06:42,354 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_TokenERC20__fail
[2020-11-25 15:06:42,354 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_TokenERC20__success
[2020-11-25 15:06:42,354 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_TokenERC20__fail
[2020-11-25 15:06:42,354 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_TokenERC20__success
[2020-11-25 15:06:42,354 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_TokenERC20__fail
[2020-11-25 15:06:42,354 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_TokenERC20__success
[2020-11-25 15:06:42,354 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_TokenERC20__fail
[2020-11-25 15:06:42,354 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_TokenERC20__success
[2020-11-25 15:06:42,354 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_TokenERC20__fail
[2020-11-25 15:06:42,354 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_TokenERC20__success
[2020-11-25 15:06:42,355 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_TokenERC20__fail
[2020-11-25 15:06:42,355 INFO  L130     BoogieDeclarations]: Found specification of procedure name_TokenERC20__success
[2020-11-25 15:06:42,355 INFO  L130     BoogieDeclarations]: Found specification of procedure name_TokenERC20__fail
[2020-11-25 15:06:42,355 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_TokenERC20__success
[2020-11-25 15:06:42,355 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_TokenERC20__fail
[2020-11-25 15:06:42,355 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_TokenERC20__success
[2020-11-25 15:06:42,355 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_TokenERC20__fail
[2020-11-25 15:06:42,355 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_TokenERC20__success
[2020-11-25 15:06:42,355 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_TokenERC20__fail
[2020-11-25 15:06:42,355 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_TokenERC20__success
[2020-11-25 15:06:42,356 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_TokenERC20__fail
[2020-11-25 15:06:42,356 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_TokenERC20__success
[2020-11-25 15:06:42,356 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_TokenERC20__fail
[2020-11-25 15:06:42,356 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20ext_ERC20ext_NoBaseCtor__fail
[2020-11-25 15:06:42,356 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20ext_ERC20ext__success
[2020-11-25 15:06:42,356 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20ext_ERC20ext__fail
[2020-11-25 15:06:42,356 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20ext__fail
[2020-11-25 15:06:42,356 INFO  L130     BoogieDeclarations]: Found specification of procedure mintToken~address~uint256_ERC20ext__success
[2020-11-25 15:06:42,356 INFO  L130     BoogieDeclarations]: Found specification of procedure mintToken~address~uint256_ERC20ext__fail
[2020-11-25 15:06:42,356 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeAccount~address~bool_ERC20ext__success
[2020-11-25 15:06:42,357 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeAccount~address~bool_ERC20ext__fail
[2020-11-25 15:06:42,357 INFO  L130     BoogieDeclarations]: Found specification of procedure lock~address~uint256~uint256_ERC20ext__success
[2020-11-25 15:06:42,357 INFO  L130     BoogieDeclarations]: Found specification of procedure lock~address~uint256~uint256_ERC20ext__fail
[2020-11-25 15:06:42,357 INFO  L130     BoogieDeclarations]: Found specification of procedure frozenAccount~address_ERC20ext__success
[2020-11-25 15:06:42,357 INFO  L130     BoogieDeclarations]: Found specification of procedure frozenAccount~address_ERC20ext__fail
[2020-11-25 15:06:42,357 INFO  L130     BoogieDeclarations]: Found specification of procedure lockedAccount~address_ERC20ext__success
[2020-11-25 15:06:42,357 INFO  L130     BoogieDeclarations]: Found specification of procedure lockedAccount~address_ERC20ext__fail
[2020-11-25 15:06:42,357 INFO  L130     BoogieDeclarations]: Found specification of procedure lockedAmount~address_ERC20ext__success
[2020-11-25 15:06:42,357 INFO  L130     BoogieDeclarations]: Found specification of procedure lockedAmount~address_ERC20ext__fail
[2020-11-25 15:06:42,358 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 15:06:42,358 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 15:06:42,358 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 15:06:42,358 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 15:06:42,358 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 15:06:42,358 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 15:06:42,358 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 15:06:42,358 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 15:06:42,358 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 15:06:42,358 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 15:06:42,359 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 15:06:42,359 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 15:06:42,359 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 15:06:42,359 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 15:06:42,359 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 15:06:42,359 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 15:06:42,359 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 15:06:42,359 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 15:06:42,359 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 15:06:42,359 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 15:06:42,360 INFO  L138     BoogieDeclarations]: Found implementation of procedure owned_owned_NoBaseCtor__fail
[2020-11-25 15:06:42,360 INFO  L138     BoogieDeclarations]: Found implementation of procedure owned_owned_NoBaseCtor__success
[2020-11-25 15:06:42,360 INFO  L138     BoogieDeclarations]: Found implementation of procedure owned_owned__fail
[2020-11-25 15:06:42,360 INFO  L138     BoogieDeclarations]: Found implementation of procedure owned_owned__success
[2020-11-25 15:06:42,360 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_owned__fail
[2020-11-25 15:06:42,360 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_owned__success
[2020-11-25 15:06:42,360 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_owned__fail
[2020-11-25 15:06:42,360 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_owned__success
[2020-11-25 15:06:42,360 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenRecipient_tokenRecipient_NoBaseCtor__fail
[2020-11-25 15:06:42,360 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenRecipient_tokenRecipient_NoBaseCtor__success
[2020-11-25 15:06:42,360 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenRecipient_tokenRecipient__fail
[2020-11-25 15:06:42,360 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenRecipient_tokenRecipient__success
[2020-11-25 15:06:42,360 INFO  L138     BoogieDeclarations]: Found implementation of procedure TokenERC20_TokenERC20_NoBaseCtor__fail
[2020-11-25 15:06:42,361 INFO  L138     BoogieDeclarations]: Found implementation of procedure TokenERC20_TokenERC20_NoBaseCtor__success
[2020-11-25 15:06:42,361 INFO  L138     BoogieDeclarations]: Found implementation of procedure TokenERC20_TokenERC20__fail
[2020-11-25 15:06:42,361 INFO  L138     BoogieDeclarations]: Found implementation of procedure TokenERC20_TokenERC20__success
[2020-11-25 15:06:42,361 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_TokenERC20__fail
[2020-11-25 15:06:42,361 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_TokenERC20__success
[2020-11-25 15:06:42,361 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_TokenERC20__fail
[2020-11-25 15:06:42,361 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_TokenERC20__success
[2020-11-25 15:06:42,361 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_TokenERC20__fail
[2020-11-25 15:06:42,361 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_TokenERC20__success
[2020-11-25 15:06:42,361 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_TokenERC20__fail
[2020-11-25 15:06:42,361 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_TokenERC20__success
[2020-11-25 15:06:42,361 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_TokenERC20__fail
[2020-11-25 15:06:42,361 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_TokenERC20__success
[2020-11-25 15:06:42,361 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_TokenERC20__fail
[2020-11-25 15:06:42,361 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_TokenERC20__success
[2020-11-25 15:06:42,362 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_TokenERC20__fail
[2020-11-25 15:06:42,362 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_TokenERC20__success
[2020-11-25 15:06:42,362 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_TokenERC20__fail
[2020-11-25 15:06:42,362 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_TokenERC20__success
[2020-11-25 15:06:42,362 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_TokenERC20__fail
[2020-11-25 15:06:42,362 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_TokenERC20__success
[2020-11-25 15:06:42,362 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_TokenERC20__fail
[2020-11-25 15:06:42,362 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_TokenERC20__success
[2020-11-25 15:06:42,362 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_TokenERC20__fail
[2020-11-25 15:06:42,362 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_TokenERC20__success
[2020-11-25 15:06:42,362 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_TokenERC20__fail
[2020-11-25 15:06:42,362 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_TokenERC20__success
[2020-11-25 15:06:42,362 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_TokenERC20__fail
[2020-11-25 15:06:42,362 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_TokenERC20__success
[2020-11-25 15:06:42,362 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20ext_ERC20ext_NoBaseCtor__fail
[2020-11-25 15:06:42,362 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20ext_ERC20ext_NoBaseCtor__success
[2020-11-25 15:06:42,363 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20ext_ERC20ext__fail
[2020-11-25 15:06:42,363 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20ext_ERC20ext__success
[2020-11-25 15:06:42,363 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20ext__fail
[2020-11-25 15:06:42,363 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20ext__success
[2020-11-25 15:06:42,363 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintToken~address~uint256_ERC20ext__fail
[2020-11-25 15:06:42,363 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintToken~address~uint256_ERC20ext__success
[2020-11-25 15:06:42,363 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeAccount~address~bool_ERC20ext__fail
[2020-11-25 15:06:42,363 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeAccount~address~bool_ERC20ext__success
[2020-11-25 15:06:42,363 INFO  L138     BoogieDeclarations]: Found implementation of procedure lock~address~uint256~uint256_ERC20ext__fail
[2020-11-25 15:06:42,363 INFO  L138     BoogieDeclarations]: Found implementation of procedure lock~address~uint256~uint256_ERC20ext__success
[2020-11-25 15:06:42,363 INFO  L138     BoogieDeclarations]: Found implementation of procedure frozenAccount~address_ERC20ext__fail
[2020-11-25 15:06:42,363 INFO  L138     BoogieDeclarations]: Found implementation of procedure frozenAccount~address_ERC20ext__success
[2020-11-25 15:06:42,363 INFO  L138     BoogieDeclarations]: Found implementation of procedure lockedAccount~address_ERC20ext__fail
[2020-11-25 15:06:42,363 INFO  L138     BoogieDeclarations]: Found implementation of procedure lockedAccount~address_ERC20ext__success
[2020-11-25 15:06:42,363 INFO  L138     BoogieDeclarations]: Found implementation of procedure lockedAmount~address_ERC20ext__fail
[2020-11-25 15:06:42,364 INFO  L138     BoogieDeclarations]: Found implementation of procedure lockedAmount~address_ERC20ext__success
[2020-11-25 15:06:42,364 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 15:06:42,364 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 15:06:42,364 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 15:06:42,364 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 15:06:42,364 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 15:06:42,364 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 15:06:42,364 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 15:06:42,364 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 15:06:42,364 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 15:06:42,364 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 15:06:42,364 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_owned
[2020-11-25 15:06:42,364 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_owned
[2020-11-25 15:06:42,364 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_tokenRecipient
[2020-11-25 15:06:42,365 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_tokenRecipient
[2020-11-25 15:06:42,365 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_TokenERC20
[2020-11-25 15:06:42,365 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_TokenERC20
[2020-11-25 15:06:42,365 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20ext
[2020-11-25 15:06:42,365 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 15:06:42,365 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 15:06:42,365 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 15:06:43,033 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 15:06:43,033 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 15:06:43,033 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 15:06:43,081 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 15:06:43,081 INFO  L286             CfgBuilder]: Removed 5 assue(true) statements.
[2020-11-25 15:06:43,084 INFO  L202        PluginConnector]: Adding new model ERC20ext_0xceca64909127918c80c7c76b503de7306d63eca7_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 03:06:43 BoogieIcfgContainer
[2020-11-25 15:06:43,084 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 03:06:42" (2/2) ...
[2020-11-25 15:06:43,084 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 15:06:43,085 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@2106cb2b and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 03:06:43, skipping insertion in model container
[2020-11-25 15:06:43,085 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 15:06:43,085 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 15:06:43,085 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 15:06:43,086 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 15:06:43,087 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "ERC20ext_0xceca64909127918c80c7c76b503de7306d63eca7_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:06:42" (1/3) ...
[2020-11-25 15:06:43,087 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@6bcd2672 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 03:06:43, skipping insertion in model container
[2020-11-25 15:06:43,087 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 03:06:42" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 15:06:43,123 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 03:06:43 NWAContainer
[2020-11-25 15:06:43,123 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 15:06:43,123 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 15:06:43,123 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 15:06:43,124 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 15:06:43,125 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "ERC20ext_0xceca64909127918c80c7c76b503de7306d63eca7_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 03:06:43" (3/4) ...
[2020-11-25 15:06:43,125 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@737500c1 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 03:06:43, skipping insertion in model container
[2020-11-25 15:06:43,126 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 03:06:43" (4/4) ...
[2020-11-25 15:06:43,128 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 15:06:43,132 INFO  L110   BuchiProductObserver]: Initial RCFG 1881 locations, 2418 edges
[2020-11-25 15:06:43,132 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 15:06:43,143 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 15:06:44,527 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 15:06:44,533 INFO  L110   BuchiProductObserver]: BuchiProgram size 4504 locations, 7824 edges
[2020-11-25 15:06:44,533 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 03:06:44 BoogieIcfgContainer
[2020-11-25 15:06:44,533 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 15:06:44,533 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 15:06:44,534 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 15:06:44,535 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 15:06:44,536 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 03:06:44" (1/1) ...
[2020-11-25 15:06:44,632 INFO  L313           BlockEncoder]: Initial Icfg 4504 locations, 7824 edges
[2020-11-25 15:06:44,632 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 15:06:44,633 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 15:06:44,633 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 15:06:44,634 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 15:06:44,646 INFO  L70    emoveInfeasibleEdges]: Removed 75 edges and 13 locations because of local infeasibility
[2020-11-25 15:06:44,656 INFO  L70        RemoveSinkStates]: Removed 20 edges and 13 locations by removing sink states
[2020-11-25 15:06:44,669 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 15:06:44,675 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 15:06:44,679 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 15:06:44,680 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 15:06:44,686 INFO  L313           BlockEncoder]: Encoded RCFG 4454 locations, 7694 edges
[2020-11-25 15:06:44,686 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 03:06:44 BasicIcfg
[2020-11-25 15:06:44,686 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 15:06:44,686 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 15:06:44,687 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 15:06:44,688 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 15:06:44,688 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 15:06:44,689 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "ERC20ext_0xceca64909127918c80c7c76b503de7306d63eca7_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:06:42" (1/6) ...
[2020-11-25 15:06:44,690 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@39432ef4 and model type ERC20ext_0xceca64909127918c80c7c76b503de7306d63eca7_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 03:06:44, skipping insertion in model container
[2020-11-25 15:06:44,690 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 15:06:44,690 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 03:06:42" (2/6) ...
[2020-11-25 15:06:44,690 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@39432ef4 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 03:06:44, skipping insertion in model container
[2020-11-25 15:06:44,690 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 15:06:44,691 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "ERC20ext_0xceca64909127918c80c7c76b503de7306d63eca7_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 03:06:43" (3/6) ...
[2020-11-25 15:06:44,691 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@39432ef4 and model type ERC20ext_0xceca64909127918c80c7c76b503de7306d63eca7_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 03:06:44, skipping insertion in model container
[2020-11-25 15:06:44,691 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 15:06:44,691 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 03:06:43" (4/6) ...
[2020-11-25 15:06:44,691 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@39432ef4 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 03:06:44, skipping insertion in model container
[2020-11-25 15:06:44,691 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 15:06:44,691 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 03:06:44" (5/6) ...
[2020-11-25 15:06:44,691 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@39432ef4 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 03:06:44, skipping insertion in model container
[2020-11-25 15:06:44,691 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 15:06:44,692 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 03:06:44" (6/6) ...
[2020-11-25 15:06:44,692 INFO  L404   chiAutomizerObserver]: Analyzing ICFG ERC20ext_0xceca64909127918c80c7c76b503de7306d63eca7_transfer-self.bpl_BEv2
[2020-11-25 15:06:44,720 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 15:06:44,721 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 15:06:44,721 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 15:06:44,721 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 15:06:44,721 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 15:06:44,721 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 15:06:44,721 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 15:06:44,721 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 15:06:44,721 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 15:06:44,763 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4454 states.
[2020-11-25 15:06:44,817 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 15:06:44,817 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 15:06:44,817 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 15:06:44,825 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 15:06:44,825 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 15:06:44,825 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 15:06:44,825 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4454 states.
[2020-11-25 15:06:44,860 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 15:06:44,860 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 15:06:44,860 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 15:06:44,862 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 15:06:44,863 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_TokenERC200 := false;
[L2]                 call_transfer_TokenERC200 := false;
[L2]     CALL        call main();
[L5089]              assume null == 0;
[L5090]  CALL        call this := FreshRefGenerator__success();
[L2432]              havoc newRef;
[L2433]              assume Alloc[newRef] == false;
[L2434]              Alloc[newRef] := true;
[L2435]              assume newRef != null;
[L5090]  RET         call this := FreshRefGenerator__success();
[L5091]              assume now >= 0;
[L5092]              assume DType[this] == ERC20ext;
[L5093]              assume msgvalue_MSG == 0;
[L5094]              gas := gas - 53000;
[L5095]  CALL        call ERC20ext_ERC20ext(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L1360]              havoc __exception;
[L1361]              revert := false;
[L1362]  COND FALSE  !(__exception)
[L1391]  CALL        call ERC20ext_ERC20ext__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L3247]  CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2624]  CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2607]              assume msgsender_MSG != null;
[L2608]              Balance[this] := 0;
[L2609]              owner_owned[this] := null;
[L2611]              owner_owned[this] := msgsender_MSG;
[L2624]  RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2625]  COND FALSE  !(revert)
[L3247]  RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L3248]  COND TRUE   revert
[L1391]  RET         call ERC20ext_ERC20ext__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L1392]              assume !revert && gas >= 0;
[L5095]  RET         call ERC20ext_ERC20ext(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L5096]              assume !revert && gas >= 0;

Loop:
[L5099]  CALL        call CorralChoice_ERC20ext(this);
[L4881]              havoc msgsender_MSG;
[L4882]              havoc msgvalue_MSG;
[L4883]              havoc choice;
[L4884]              havoc __ret_0_owner;
[L4885]              havoc newOwner_s166;
[L4886]              havoc __ret_0_name;
[L4887]              havoc __ret_0_symbol;
[L4888]              havoc __ret_0_decimals;
[L4889]              havoc __ret_0_totalSupply;
[L4890]              havoc arg835_s0;
[L4891]              havoc __ret_0_balanceOf;
[L4892]              havoc arg836_s0;
[L4893]              havoc arg837_s0;
[L4894]              havoc __ret_0_allowance;
[L4895]              havoc initialSupply_s258;
[L4896]              havoc tokenName_s258;
[L4897]              havoc tokenSymbol_s258;
[L4898]              havoc _to_s365;
[L4899]              havoc _value_s365;
[L4900]              havoc success_s365;
[L4901]              havoc _from_s413;
[L4902]              havoc _to_s413;
[L4903]              havoc _value_s413;
[L4904]              havoc success_s413;
[L4905]              havoc _spender_s441;
[L4906]              havoc _value_s441;
[L4907]              havoc success_s441;
[L4908]              havoc _spender_s479;
[L4909]              havoc _value_s479;
[L4910]              havoc _extraData_s479;
[L4911]              havoc success_s479;
[L4912]              havoc _value_s527;
[L4913]              havoc success_s527;
[L4914]              havoc _from_s598;
[L4915]              havoc _value_s598;
[L4916]              havoc success_s598;
[L4917]              havoc arg838_s0;
[L4918]              havoc __ret_0_frozenAccount;
[L4919]              havoc arg839_s0;
[L4920]              havoc __ret_0_lockedAccount;
[L4921]              havoc arg840_s0;
[L4922]              havoc __ret_0_lockedAmount;
[L4923]              havoc initialSupply_s639;
[L4924]              havoc tokenName_s639;
[L4925]              havoc tokenSymbol_s639;
[L4926]              havoc target_s779;
[L4927]              havoc mintedAmount_s779;
[L4928]              havoc success_s779;
[L4929]              havoc target_s804;
[L4930]              havoc freeze_s804;
[L4931]              havoc success_s804;
[L4932]              havoc target_s832;
[L4933]              havoc time_s832;
[L4934]              havoc amount_s832;
[L4935]              havoc success_s832;
[L4936]              havoc tmpNow;
[L4937]              havoc gas;
[L4938]              assume gas > 4000000 && gas <= 8000000;
[L4939]              tmpNow := now;
[L4940]              havoc now;
[L4941]              assume now > tmpNow;
[L4942]              assume msgsender_MSG != null;
[L4943]              assume DType[msgsender_MSG] != SafeMath;
[L4944]              assume DType[msgsender_MSG] != owned;
[L4945]              assume DType[msgsender_MSG] != tokenRecipient;
[L4946]              assume DType[msgsender_MSG] != TokenERC20;
[L4947]              assume DType[msgsender_MSG] != ERC20ext;
[L4948]              Alloc[msgsender_MSG] := true;
[L4949]  COND TRUE   choice == 20
[L4950]              gas := gas - 21000;
[L4951]  COND FALSE  !(gas >= 0)
[L5099]  RET         call CorralChoice_ERC20ext(this);

[2020-11-25 15:06:44,878 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 15:06:44,879 INFO  L82        PathProgramCache]: Analyzing trace with hash 1793331510, now seen corresponding path program 1 times
[2020-11-25 15:06:44,884 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 15:06:44,908 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 15:06:44,962 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 15:06:44,964 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 15:06:44,964 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 15:06:45,255 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 15:06:45,267 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 15:06:45,267 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 15:06:45,269 INFO  L87              Difference]: Start difference. First operand 4454 states. Second operand 4 states.
[2020-11-25 15:06:45,682 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 15:06:45,683 INFO  L93              Difference]: Finished difference Result 3175 states and 3550 transitions.
[2020-11-25 15:06:45,683 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 15:06:45,684 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3175 states and 3550 transitions.
[2020-11-25 15:06:45,702 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 15:06:45,725 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3175 states to 3173 states and 3546 transitions.
[2020-11-25 15:06:45,726 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-25 15:06:45,728 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 884
[2020-11-25 15:06:45,729 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3173 states and 3546 transitions.
[2020-11-25 15:06:45,736 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 15:06:45,736 INFO  L728         BuchiCegarLoop]: Abstraction has 3173 states and 3546 transitions.
[2020-11-25 15:06:45,752 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3173 states and 3546 transitions.
[2020-11-25 15:06:45,798 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3173 to 3173.
[2020-11-25 15:06:45,799 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3173 states.
[2020-11-25 15:06:45,804 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3173 states to 3173 states and 3546 transitions.
[2020-11-25 15:06:45,805 INFO  L751         BuchiCegarLoop]: Abstraction has 3173 states and 3546 transitions.
[2020-11-25 15:06:45,805 INFO  L631         BuchiCegarLoop]: Abstraction has 3173 states and 3546 transitions.
[2020-11-25 15:06:45,805 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 15:06:45,805 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3173 states and 3546 transitions.
[2020-11-25 15:06:45,813 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 15:06:45,813 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 15:06:45,813 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 15:06:45,815 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 15:06:45,815 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_TokenERC200 := false;
[L2]                 call_transfer_TokenERC200 := false;
[L2]     CALL        call main();
[L5089]              assume null == 0;
[L5090]  CALL        call this := FreshRefGenerator__success();
[L2432]              havoc newRef;
[L2433]              assume Alloc[newRef] == false;
[L2434]              Alloc[newRef] := true;
[L2435]              assume newRef != null;
[L5090]  RET         call this := FreshRefGenerator__success();
[L5091]              assume now >= 0;
[L5092]              assume DType[this] == ERC20ext;
[L5093]              assume msgvalue_MSG == 0;
[L5094]              gas := gas - 53000;
[L5095]  CALL        call ERC20ext_ERC20ext(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L1360]              havoc __exception;
[L1361]              revert := false;
[L1362]  COND FALSE  !(__exception)
[L1391]  CALL        call ERC20ext_ERC20ext__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L3247]  CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2624]  CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2607]              assume msgsender_MSG != null;
[L2608]              Balance[this] := 0;
[L2609]              owner_owned[this] := null;
[L2611]              owner_owned[this] := msgsender_MSG;
[L2624]  RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2625]  COND FALSE  !(revert)
[L3247]  RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L3248]  COND TRUE   revert
[L1391]  RET         call ERC20ext_ERC20ext__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L1392]              assume !revert && gas >= 0;
[L5095]  RET         call ERC20ext_ERC20ext(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L5096]              assume !revert && gas >= 0;
[L5099]  CALL        call CorralChoice_ERC20ext(this);
[L4881]              havoc msgsender_MSG;
[L4882]              havoc msgvalue_MSG;
[L4883]              havoc choice;
[L4884]              havoc __ret_0_owner;
[L4885]              havoc newOwner_s166;
[L4886]              havoc __ret_0_name;
[L4887]              havoc __ret_0_symbol;
[L4888]              havoc __ret_0_decimals;
[L4889]              havoc __ret_0_totalSupply;
[L4890]              havoc arg835_s0;
[L4891]              havoc __ret_0_balanceOf;
[L4892]              havoc arg836_s0;
[L4893]              havoc arg837_s0;
[L4894]              havoc __ret_0_allowance;
[L4895]              havoc initialSupply_s258;
[L4896]              havoc tokenName_s258;
[L4897]              havoc tokenSymbol_s258;
[L4898]              havoc _to_s365;
[L4899]              havoc _value_s365;
[L4900]              havoc success_s365;
[L4901]              havoc _from_s413;
[L4902]              havoc _to_s413;
[L4903]              havoc _value_s413;
[L4904]              havoc success_s413;
[L4905]              havoc _spender_s441;
[L4906]              havoc _value_s441;
[L4907]              havoc success_s441;
[L4908]              havoc _spender_s479;
[L4909]              havoc _value_s479;
[L4910]              havoc _extraData_s479;
[L4911]              havoc success_s479;
[L4912]              havoc _value_s527;
[L4913]              havoc success_s527;
[L4914]              havoc _from_s598;
[L4915]              havoc _value_s598;
[L4916]              havoc success_s598;
[L4917]              havoc arg838_s0;
[L4918]              havoc __ret_0_frozenAccount;
[L4919]              havoc arg839_s0;
[L4920]              havoc __ret_0_lockedAccount;
[L4921]              havoc arg840_s0;
[L4922]              havoc __ret_0_lockedAmount;
[L4923]              havoc initialSupply_s639;
[L4924]              havoc tokenName_s639;
[L4925]              havoc tokenSymbol_s639;
[L4926]              havoc target_s779;
[L4927]              havoc mintedAmount_s779;
[L4928]              havoc success_s779;
[L4929]              havoc target_s804;
[L4930]              havoc freeze_s804;
[L4931]              havoc success_s804;
[L4932]              havoc target_s832;
[L4933]              havoc time_s832;
[L4934]              havoc amount_s832;
[L4935]              havoc success_s832;
[L4936]              havoc tmpNow;
[L4937]              havoc gas;
[L4938]              assume gas > 4000000 && gas <= 8000000;
[L4939]              tmpNow := now;
[L4940]              havoc now;
[L4941]              assume now > tmpNow;
[L4942]              assume msgsender_MSG != null;
[L4943]              assume DType[msgsender_MSG] != SafeMath;
[L4944]              assume DType[msgsender_MSG] != owned;
[L4945]              assume DType[msgsender_MSG] != tokenRecipient;
[L4946]              assume DType[msgsender_MSG] != TokenERC20;
[L4947]              assume DType[msgsender_MSG] != ERC20ext;
[L4948]              Alloc[msgsender_MSG] := true;
[L4949]  COND FALSE  !(choice == 20)
[L4955]  COND FALSE  !(choice == 19)
[L4961]  COND FALSE  !(choice == 18)
[L4967]  COND FALSE  !(choice == 17)
[L4973]  COND FALSE  !(choice == 16)
[L4979]  COND FALSE  !(choice == 15)
[L4985]  COND FALSE  !(choice == 14)
[L4991]  COND FALSE  !(choice == 13)
[L4997]  COND TRUE   choice == 12
[L4998]              gas := gas - 21000;
[L4999]  COND TRUE   gas >= 0
[L5000]              assume _value_s365 >= 0 && _value_s365 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5001]              assume msgvalue_MSG == 0;
[L5002]  CALL        call success_s365 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s365, _value_s365);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s365 && _value_s365 <= balanceOf_TokenERC20[this][msgsender_MSG]) && _value_s365 >= 0) && _value_s365 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s365] >= 0) && balanceOf_TokenERC20[this][_to_s365] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][msgsender_MSG] >= 0) && balanceOf_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_TokenERC200 := true;
[L2]                 call_transfer_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L527]               havoc __exception;
[L528]               revert := false;
[L529]   COND FALSE  !(__exception)
[L558]   CALL        call success_s365 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _to_s365, _value_s365);
[L2853]  COND TRUE   DType[this] == ERC20ext
[L2854]  CALL        call _transfer~address~address~uint256_ERC20ext__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s365, _value_s365);
[L3312]  COND TRUE   !(now > lockedAccount_ERC20ext[this][_from_s739] || (lockedAmount_ERC20ext[this][_from_s739] + _value_s739) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 < balanceOf_TokenERC20[this][_from_s739])
[L3313]              revert := true;
[L2854]  RET         call _transfer~address~address~uint256_ERC20ext__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s365, _value_s365);
[L2855]  COND TRUE   revert
[L558]   RET         call success_s365 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _to_s365, _value_s365);
[L559]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((((success_s365 == true && totalSupply_TokenERC20[this] == old(totalSupply_TokenERC20[this])) && balanceOf_TokenERC20[this] == old(balanceOf_TokenERC20[this])) && allowance_TokenERC20[this] == old(allowance_TokenERC20[this])) && frozenAccount_ERC20ext[this] == old(frozenAccount_ERC20ext[this])) && lockedAccount_ERC20ext[this] == old(lockedAccount_ERC20ext[this])) && lockedAmount_ERC20ext[this] == old(lockedAmount_ERC20ext[this])) && name_TokenERC20[this] == old(name_TokenERC20[this])) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this])) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this])) && owner_owned[this] == old(owner_owned[this]));
[L2]                 revert := revert_hold;
[L5002]  RET         call success_s365 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s365, _value_s365);
[L5099]  RET         call CorralChoice_ERC20ext(this);

Loop:
[L5099]  CALL        call CorralChoice_ERC20ext(this);
[L4881]              havoc msgsender_MSG;
[L4882]              havoc msgvalue_MSG;
[L4883]              havoc choice;
[L4884]              havoc __ret_0_owner;
[L4885]              havoc newOwner_s166;
[L4886]              havoc __ret_0_name;
[L4887]              havoc __ret_0_symbol;
[L4888]              havoc __ret_0_decimals;
[L4889]              havoc __ret_0_totalSupply;
[L4890]              havoc arg835_s0;
[L4891]              havoc __ret_0_balanceOf;
[L4892]              havoc arg836_s0;
[L4893]              havoc arg837_s0;
[L4894]              havoc __ret_0_allowance;
[L4895]              havoc initialSupply_s258;
[L4896]              havoc tokenName_s258;
[L4897]              havoc tokenSymbol_s258;
[L4898]              havoc _to_s365;
[L4899]              havoc _value_s365;
[L4900]              havoc success_s365;
[L4901]              havoc _from_s413;
[L4902]              havoc _to_s413;
[L4903]              havoc _value_s413;
[L4904]              havoc success_s413;
[L4905]              havoc _spender_s441;
[L4906]              havoc _value_s441;
[L4907]              havoc success_s441;
[L4908]              havoc _spender_s479;
[L4909]              havoc _value_s479;
[L4910]              havoc _extraData_s479;
[L4911]              havoc success_s479;
[L4912]              havoc _value_s527;
[L4913]              havoc success_s527;
[L4914]              havoc _from_s598;
[L4915]              havoc _value_s598;
[L4916]              havoc success_s598;
[L4917]              havoc arg838_s0;
[L4918]              havoc __ret_0_frozenAccount;
[L4919]              havoc arg839_s0;
[L4920]              havoc __ret_0_lockedAccount;
[L4921]              havoc arg840_s0;
[L4922]              havoc __ret_0_lockedAmount;
[L4923]              havoc initialSupply_s639;
[L4924]              havoc tokenName_s639;
[L4925]              havoc tokenSymbol_s639;
[L4926]              havoc target_s779;
[L4927]              havoc mintedAmount_s779;
[L4928]              havoc success_s779;
[L4929]              havoc target_s804;
[L4930]              havoc freeze_s804;
[L4931]              havoc success_s804;
[L4932]              havoc target_s832;
[L4933]              havoc time_s832;
[L4934]              havoc amount_s832;
[L4935]              havoc success_s832;
[L4936]              havoc tmpNow;
[L4937]              havoc gas;
[L4938]              assume gas > 4000000 && gas <= 8000000;
[L4939]              tmpNow := now;
[L4940]              havoc now;
[L4941]              assume now > tmpNow;
[L4942]              assume msgsender_MSG != null;
[L4943]              assume DType[msgsender_MSG] != SafeMath;
[L4944]              assume DType[msgsender_MSG] != owned;
[L4945]              assume DType[msgsender_MSG] != tokenRecipient;
[L4946]              assume DType[msgsender_MSG] != TokenERC20;
[L4947]              assume DType[msgsender_MSG] != ERC20ext;
[L4948]              Alloc[msgsender_MSG] := true;
[L4949]  COND FALSE  !(choice == 20)
[L4955]  COND FALSE  !(choice == 19)
[L4961]  COND FALSE  !(choice == 18)
[L4967]  COND FALSE  !(choice == 17)
[L4973]  COND FALSE  !(choice == 16)
[L4979]  COND FALSE  !(choice == 15)
[L4985]  COND FALSE  !(choice == 14)
[L4991]  COND FALSE  !(choice == 13)
[L4997]  COND TRUE   choice == 12
[L4998]              gas := gas - 21000;
[L4999]  COND TRUE   gas >= 0
[L5000]              assume _value_s365 >= 0 && _value_s365 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5001]              assume msgvalue_MSG == 0;
[L5002]  CALL        call success_s365 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s365, _value_s365);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s365 && _value_s365 <= balanceOf_TokenERC20[this][msgsender_MSG]) && _value_s365 >= 0) && _value_s365 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s365] >= 0) && balanceOf_TokenERC20[this][_to_s365] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][msgsender_MSG] >= 0) && balanceOf_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_TokenERC200 := true;
[L2]                 call_transfer_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L527]               havoc __exception;
[L528]               revert := false;
[L529]   COND FALSE  !(__exception)
[L558]   CALL        call success_s365 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _to_s365, _value_s365);
[L2853]  COND TRUE   DType[this] == ERC20ext
[L2854]  CALL        call _transfer~address~address~uint256_ERC20ext__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s365, _value_s365);
[L3312]  COND TRUE   !(now > lockedAccount_ERC20ext[this][_from_s739] || (lockedAmount_ERC20ext[this][_from_s739] + _value_s739) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 < balanceOf_TokenERC20[this][_from_s739])
[L3313]              revert := true;
[L2854]  RET         call _transfer~address~address~uint256_ERC20ext__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s365, _value_s365);
[L2855]  COND TRUE   revert
[L558]   RET         call success_s365 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _to_s365, _value_s365);
[L559]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((((success_s365 == true && totalSupply_TokenERC20[this] == old(totalSupply_TokenERC20[this])) && balanceOf_TokenERC20[this] == old(balanceOf_TokenERC20[this])) && allowance_TokenERC20[this] == old(allowance_TokenERC20[this])) && frozenAccount_ERC20ext[this] == old(frozenAccount_ERC20ext[this])) && lockedAccount_ERC20ext[this] == old(lockedAccount_ERC20ext[this])) && lockedAmount_ERC20ext[this] == old(lockedAmount_ERC20ext[this])) && name_TokenERC20[this] == old(name_TokenERC20[this])) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this])) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this])) && owner_owned[this] == old(owner_owned[this]));
[L2]                 revert := revert_hold;
[L5002]  RET         call success_s365 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s365, _value_s365);
[L5099]  RET         call CorralChoice_ERC20ext(this);

[2020-11-25 15:06:45,820 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 15:06:45,820 INFO  L82        PathProgramCache]: Analyzing trace with hash 1424577800, now seen corresponding path program 1 times
[2020-11-25 15:06:45,821 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 15:06:45,830 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 15:06:45,853 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 15:06:45,854 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 15:06:45,854 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 15:06:45,855 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 15:06:45,855 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 15:06:45,855 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 15:06:45,855 INFO  L87              Difference]: Start difference. First operand 3173 states and 3546 transitions. cyclomatic complexity: 375 Second operand 4 states.
[2020-11-25 15:06:46,503 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 15:06:46,503 INFO  L93              Difference]: Finished difference Result 4523 states and 5146 transitions.
[2020-11-25 15:06:46,503 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 15:06:46,504 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4523 states and 5146 transitions.
[2020-11-25 15:06:46,521 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-25 15:06:46,539 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4523 states to 4327 states and 4904 transitions.
[2020-11-25 15:06:46,539 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1154
[2020-11-25 15:06:46,540 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1179
[2020-11-25 15:06:46,540 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4327 states and 4904 transitions.
[2020-11-25 15:06:46,547 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 15:06:46,547 INFO  L728         BuchiCegarLoop]: Abstraction has 4327 states and 4904 transitions.
[2020-11-25 15:06:46,551 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4327 states and 4904 transitions.
[2020-11-25 15:06:46,585 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4327 to 3241.
[2020-11-25 15:06:46,585 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3241 states.
[2020-11-25 15:06:46,590 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3241 states to 3241 states and 3514 transitions.
[2020-11-25 15:06:46,590 INFO  L751         BuchiCegarLoop]: Abstraction has 3241 states and 3514 transitions.
[2020-11-25 15:06:46,590 INFO  L631         BuchiCegarLoop]: Abstraction has 3241 states and 3514 transitions.
[2020-11-25 15:06:46,590 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 15:06:46,590 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3241 states and 3514 transitions.
[2020-11-25 15:06:46,598 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 15:06:46,598 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 15:06:46,598 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 15:06:46,600 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 15:06:46,600 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_TokenERC200 := false;
[L2]                 call_transfer_TokenERC200 := false;
[L2]     CALL        call main();
[L5089]              assume null == 0;
[L5090]  CALL        call this := FreshRefGenerator__success();
[L2432]              havoc newRef;
[L2433]              assume Alloc[newRef] == false;
[L2434]              Alloc[newRef] := true;
[L2435]              assume newRef != null;
[L5090]  RET         call this := FreshRefGenerator__success();
[L5091]              assume now >= 0;
[L5092]              assume DType[this] == ERC20ext;
[L5093]              assume msgvalue_MSG == 0;
[L5094]              gas := gas - 53000;
[L5095]  CALL        call ERC20ext_ERC20ext(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L1360]              havoc __exception;
[L1361]              revert := false;
[L1362]  COND FALSE  !(__exception)
[L1391]  CALL        call ERC20ext_ERC20ext__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L3247]  CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2624]  CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2607]              assume msgsender_MSG != null;
[L2608]              Balance[this] := 0;
[L2609]              owner_owned[this] := null;
[L2611]              owner_owned[this] := msgsender_MSG;
[L2624]  RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2625]  COND FALSE  !(revert)
[L3247]  RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L3248]  COND FALSE  !(revert)
[L3251]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L2752]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s258, tokenName_s258, tokenSymbol_s258);
[L2720]              assume msgsender_MSG != null;
[L2721]              Balance[this] := 0;
[L2722]              name_TokenERC20[this] := 1101944712;
[L2723]              symbol_TokenERC20[this] := 1101944712;
[L2724]              decimals_TokenERC20[this] := 18;
[L2725]              totalSupply_TokenERC20[this] := 0;
[L2726]              balanceOf_TokenERC20[this] := zeroRefintArr();
[L2727]              sum_balanceOf0[this] := 0;
[L2728]              allowance_TokenERC20[this] := zeroRefRefintArr();
[L2729]              sum_allowance1[this] := 0;
[L2731]              __var_1 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2732]              totalSupply_TokenERC20[this] := nonlinearMul(initialSupply_s258, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][msgsender_MSG];
[L2734]              balanceOf_TokenERC20[this][msgsender_MSG] := totalSupply_TokenERC20[this];
[L2735]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][msgsender_MSG];
[L2736]              name_TokenERC20[this] := tokenName_s258;
[L2737]              symbol_TokenERC20[this] := tokenSymbol_s258;
[L2752]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s258, tokenName_s258, tokenSymbol_s258);
[L2753]  COND FALSE  !(revert)
[L3251]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L3252]  COND FALSE  !(revert)
[L3255]  CALL        call ERC20ext_ERC20ext_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L3219]              assume msgsender_MSG != null;
[L3220]              Balance[this] := 0;
[L3221]              frozenAccount_ERC20ext[this] := zeroRefboolArr();
[L3222]              lockedAccount_ERC20ext[this] := zeroRefintArr();
[L3223]              sum_lockedAccount3[this] := 0;
[L3224]              lockedAmount_ERC20ext[this] := zeroRefintArr();
[L3225]              sum_lockedAmount4[this] := 0;
[L3255]  RET         call ERC20ext_ERC20ext_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L3256]  COND FALSE  !(revert)
[L1391]  RET         call ERC20ext_ERC20ext__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L1392]              assume !revert && gas >= 0;
[L5095]  RET         call ERC20ext_ERC20ext(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L5096]              assume !revert && gas >= 0;
[L5099]  CALL        call CorralChoice_ERC20ext(this);
[L4881]              havoc msgsender_MSG;
[L4882]              havoc msgvalue_MSG;
[L4883]              havoc choice;
[L4884]              havoc __ret_0_owner;
[L4885]              havoc newOwner_s166;
[L4886]              havoc __ret_0_name;
[L4887]              havoc __ret_0_symbol;
[L4888]              havoc __ret_0_decimals;
[L4889]              havoc __ret_0_totalSupply;
[L4890]              havoc arg835_s0;
[L4891]              havoc __ret_0_balanceOf;
[L4892]              havoc arg836_s0;
[L4893]              havoc arg837_s0;
[L4894]              havoc __ret_0_allowance;
[L4895]              havoc initialSupply_s258;
[L4896]              havoc tokenName_s258;
[L4897]              havoc tokenSymbol_s258;
[L4898]              havoc _to_s365;
[L4899]              havoc _value_s365;
[L4900]              havoc success_s365;
[L4901]              havoc _from_s413;
[L4902]              havoc _to_s413;
[L4903]              havoc _value_s413;
[L4904]              havoc success_s413;
[L4905]              havoc _spender_s441;
[L4906]              havoc _value_s441;
[L4907]              havoc success_s441;
[L4908]              havoc _spender_s479;
[L4909]              havoc _value_s479;
[L4910]              havoc _extraData_s479;
[L4911]              havoc success_s479;
[L4912]              havoc _value_s527;
[L4913]              havoc success_s527;
[L4914]              havoc _from_s598;
[L4915]              havoc _value_s598;
[L4916]              havoc success_s598;
[L4917]              havoc arg838_s0;
[L4918]              havoc __ret_0_frozenAccount;
[L4919]              havoc arg839_s0;
[L4920]              havoc __ret_0_lockedAccount;
[L4921]              havoc arg840_s0;
[L4922]              havoc __ret_0_lockedAmount;
[L4923]              havoc initialSupply_s639;
[L4924]              havoc tokenName_s639;
[L4925]              havoc tokenSymbol_s639;
[L4926]              havoc target_s779;
[L4927]              havoc mintedAmount_s779;
[L4928]              havoc success_s779;
[L4929]              havoc target_s804;
[L4930]              havoc freeze_s804;
[L4931]              havoc success_s804;
[L4932]              havoc target_s832;
[L4933]              havoc time_s832;
[L4934]              havoc amount_s832;
[L4935]              havoc success_s832;
[L4936]              havoc tmpNow;
[L4937]              havoc gas;
[L4938]              assume gas > 4000000 && gas <= 8000000;
[L4939]              tmpNow := now;
[L4940]              havoc now;
[L4941]              assume now > tmpNow;
[L4942]              assume msgsender_MSG != null;
[L4943]              assume DType[msgsender_MSG] != SafeMath;
[L4944]              assume DType[msgsender_MSG] != owned;
[L4945]              assume DType[msgsender_MSG] != tokenRecipient;
[L4946]              assume DType[msgsender_MSG] != TokenERC20;
[L4947]              assume DType[msgsender_MSG] != ERC20ext;
[L4948]              Alloc[msgsender_MSG] := true;
[L4949]  COND FALSE  !(choice == 20)
[L4955]  COND FALSE  !(choice == 19)
[L4961]  COND FALSE  !(choice == 18)
[L4967]  COND FALSE  !(choice == 17)
[L4973]  COND FALSE  !(choice == 16)
[L4979]  COND FALSE  !(choice == 15)
[L4985]  COND FALSE  !(choice == 14)
[L4991]  COND FALSE  !(choice == 13)
[L4997]  COND TRUE   choice == 12
[L4998]              gas := gas - 21000;
[L4999]  COND TRUE   gas >= 0
[L5000]              assume _value_s365 >= 0 && _value_s365 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5001]              assume msgvalue_MSG == 0;
[L5002]  CALL        call success_s365 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s365, _value_s365);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s365 && _value_s365 <= balanceOf_TokenERC20[this][msgsender_MSG]) && _value_s365 >= 0) && _value_s365 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s365] >= 0) && balanceOf_TokenERC20[this][_to_s365] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][msgsender_MSG] >= 0) && balanceOf_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_TokenERC200 := true;
[L2]                 call_transfer_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L527]               havoc __exception;
[L528]               revert := false;
[L529]   COND TRUE   __exception
[L530]               __tmp__Balance := Balance;
[L531]               __tmp__DType := DType;
[L532]               __tmp__Alloc := Alloc;
[L533]               __tmp__balance_ADDR := balance_ADDR;
[L534]               __tmp__M_Ref_int := M_Ref_int;
[L535]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L536]               __tmp__alloc_allowance_TokenERC20_lvl0 := alloc_allowance_TokenERC20_lvl0;
[L537]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L538]               __tmp__sum_allowance1 := sum_allowance1;
[L539]               __tmp__M_Ref_bool := M_Ref_bool;
[L540]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L541]               __tmp__sum_lockedAccount3 := sum_lockedAccount3;
[L542]               __tmp__sum_lockedAmount4 := sum_lockedAmount4;
[L543]               __tmp__Length := Length;
[L544]               __tmp__now := now;
[L545]               __tmp__owner_owned := owner_owned;
[L546]               __tmp__name_TokenERC20 := name_TokenERC20;
[L547]               __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L548]               __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L549]               __tmp__totalSupply_TokenERC20 := totalSupply_TokenERC20;
[L550]               __tmp__balanceOf_TokenERC20 := balanceOf_TokenERC20;
[L551]               __tmp__allowance_TokenERC20 := allowance_TokenERC20;
[L552]               __tmp__frozenAccount_ERC20ext := frozenAccount_ERC20ext;
[L553]               __tmp__lockedAccount_ERC20ext := lockedAccount_ERC20ext;
[L554]               __tmp__lockedAmount_ERC20ext := lockedAmount_ERC20ext;
[L555]   CALL        call success_s365 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _to_s365, _value_s365);
[L2834]  COND TRUE   __tmp__DType[this] == ERC20ext
[L2835]  CALL        call _transfer~address~address~uint256_ERC20ext__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s365, _value_s365);
[L3266]  COND TRUE   !(__tmp__now > __tmp__lockedAccount_ERC20ext[this][_from_s739] || (__tmp__lockedAmount_ERC20ext[this][_from_s739] + _value_s739) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 < __tmp__balanceOf_TokenERC20[this][_from_s739])
[L3267]              revert := true;
[L2835]  RET         call _transfer~address~address~uint256_ERC20ext__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s365, _value_s365);
[L2836]  COND TRUE   revert
[L555]   RET         call success_s365 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _to_s365, _value_s365);
[L556]               assume revert || gas < 0;
[L5002]  RET         call success_s365 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s365, _value_s365);
[L5099]  RET         call CorralChoice_ERC20ext(this);

Loop:
[L5099]  CALL        call CorralChoice_ERC20ext(this);
[L4881]              havoc msgsender_MSG;
[L4882]              havoc msgvalue_MSG;
[L4883]              havoc choice;
[L4884]              havoc __ret_0_owner;
[L4885]              havoc newOwner_s166;
[L4886]              havoc __ret_0_name;
[L4887]              havoc __ret_0_symbol;
[L4888]              havoc __ret_0_decimals;
[L4889]              havoc __ret_0_totalSupply;
[L4890]              havoc arg835_s0;
[L4891]              havoc __ret_0_balanceOf;
[L4892]              havoc arg836_s0;
[L4893]              havoc arg837_s0;
[L4894]              havoc __ret_0_allowance;
[L4895]              havoc initialSupply_s258;
[L4896]              havoc tokenName_s258;
[L4897]              havoc tokenSymbol_s258;
[L4898]              havoc _to_s365;
[L4899]              havoc _value_s365;
[L4900]              havoc success_s365;
[L4901]              havoc _from_s413;
[L4902]              havoc _to_s413;
[L4903]              havoc _value_s413;
[L4904]              havoc success_s413;
[L4905]              havoc _spender_s441;
[L4906]              havoc _value_s441;
[L4907]              havoc success_s441;
[L4908]              havoc _spender_s479;
[L4909]              havoc _value_s479;
[L4910]              havoc _extraData_s479;
[L4911]              havoc success_s479;
[L4912]              havoc _value_s527;
[L4913]              havoc success_s527;
[L4914]              havoc _from_s598;
[L4915]              havoc _value_s598;
[L4916]              havoc success_s598;
[L4917]              havoc arg838_s0;
[L4918]              havoc __ret_0_frozenAccount;
[L4919]              havoc arg839_s0;
[L4920]              havoc __ret_0_lockedAccount;
[L4921]              havoc arg840_s0;
[L4922]              havoc __ret_0_lockedAmount;
[L4923]              havoc initialSupply_s639;
[L4924]              havoc tokenName_s639;
[L4925]              havoc tokenSymbol_s639;
[L4926]              havoc target_s779;
[L4927]              havoc mintedAmount_s779;
[L4928]              havoc success_s779;
[L4929]              havoc target_s804;
[L4930]              havoc freeze_s804;
[L4931]              havoc success_s804;
[L4932]              havoc target_s832;
[L4933]              havoc time_s832;
[L4934]              havoc amount_s832;
[L4935]              havoc success_s832;
[L4936]              havoc tmpNow;
[L4937]              havoc gas;
[L4938]              assume gas > 4000000 && gas <= 8000000;
[L4939]              tmpNow := now;
[L4940]              havoc now;
[L4941]              assume now > tmpNow;
[L4942]              assume msgsender_MSG != null;
[L4943]              assume DType[msgsender_MSG] != SafeMath;
[L4944]              assume DType[msgsender_MSG] != owned;
[L4945]              assume DType[msgsender_MSG] != tokenRecipient;
[L4946]              assume DType[msgsender_MSG] != TokenERC20;
[L4947]              assume DType[msgsender_MSG] != ERC20ext;
[L4948]              Alloc[msgsender_MSG] := true;
[L4949]  COND FALSE  !(choice == 20)
[L4955]  COND FALSE  !(choice == 19)
[L4961]  COND FALSE  !(choice == 18)
[L4967]  COND FALSE  !(choice == 17)
[L4973]  COND FALSE  !(choice == 16)
[L4979]  COND FALSE  !(choice == 15)
[L4985]  COND FALSE  !(choice == 14)
[L4991]  COND FALSE  !(choice == 13)
[L4997]  COND TRUE   choice == 12
[L4998]              gas := gas - 21000;
[L4999]  COND TRUE   gas >= 0
[L5000]              assume _value_s365 >= 0 && _value_s365 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5001]              assume msgvalue_MSG == 0;
[L5002]  CALL        call success_s365 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s365, _value_s365);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s365 && _value_s365 <= balanceOf_TokenERC20[this][msgsender_MSG]) && _value_s365 >= 0) && _value_s365 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s365] >= 0) && balanceOf_TokenERC20[this][_to_s365] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][msgsender_MSG] >= 0) && balanceOf_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_TokenERC200 := true;
[L2]                 call_transfer_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L527]               havoc __exception;
[L528]               revert := false;
[L529]   COND TRUE   __exception
[L530]               __tmp__Balance := Balance;
[L531]               __tmp__DType := DType;
[L532]               __tmp__Alloc := Alloc;
[L533]               __tmp__balance_ADDR := balance_ADDR;
[L534]               __tmp__M_Ref_int := M_Ref_int;
[L535]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L536]               __tmp__alloc_allowance_TokenERC20_lvl0 := alloc_allowance_TokenERC20_lvl0;
[L537]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L538]               __tmp__sum_allowance1 := sum_allowance1;
[L539]               __tmp__M_Ref_bool := M_Ref_bool;
[L540]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L541]               __tmp__sum_lockedAccount3 := sum_lockedAccount3;
[L542]               __tmp__sum_lockedAmount4 := sum_lockedAmount4;
[L543]               __tmp__Length := Length;
[L544]               __tmp__now := now;
[L545]               __tmp__owner_owned := owner_owned;
[L546]               __tmp__name_TokenERC20 := name_TokenERC20;
[L547]               __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L548]               __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L549]               __tmp__totalSupply_TokenERC20 := totalSupply_TokenERC20;
[L550]               __tmp__balanceOf_TokenERC20 := balanceOf_TokenERC20;
[L551]               __tmp__allowance_TokenERC20 := allowance_TokenERC20;
[L552]               __tmp__frozenAccount_ERC20ext := frozenAccount_ERC20ext;
[L553]               __tmp__lockedAccount_ERC20ext := lockedAccount_ERC20ext;
[L554]               __tmp__lockedAmount_ERC20ext := lockedAmount_ERC20ext;
[L555]   CALL        call success_s365 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _to_s365, _value_s365);
[L2834]  COND TRUE   __tmp__DType[this] == ERC20ext
[L2835]  CALL        call _transfer~address~address~uint256_ERC20ext__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s365, _value_s365);
[L3266]  COND TRUE   !(__tmp__now > __tmp__lockedAccount_ERC20ext[this][_from_s739] || (__tmp__lockedAmount_ERC20ext[this][_from_s739] + _value_s739) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 < __tmp__balanceOf_TokenERC20[this][_from_s739])
[L3267]              revert := true;
[L2835]  RET         call _transfer~address~address~uint256_ERC20ext__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s365, _value_s365);
[L2836]  COND TRUE   revert
[L555]   RET         call success_s365 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _to_s365, _value_s365);
[L556]               assume revert || gas < 0;
[L5002]  RET         call success_s365 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s365, _value_s365);
[L5099]  RET         call CorralChoice_ERC20ext(this);

[2020-11-25 15:06:46,604 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 15:06:46,605 INFO  L82        PathProgramCache]: Analyzing trace with hash 1683625816, now seen corresponding path program 1 times
[2020-11-25 15:06:46,605 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 15:06:46,623 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 15:06:46,808 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 15:06:46,809 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 15:06:46,809 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [17] imperfect sequences [] total 17
[2020-11-25 15:06:46,809 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 15:06:46,809 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 18 interpolants.
[2020-11-25 15:06:46,809 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=38, Invalid=268, Unknown=0, NotChecked=0, Total=306
[2020-11-25 15:06:46,809 INFO  L87              Difference]: Start difference. First operand 3241 states and 3514 transitions. cyclomatic complexity: 275 Second operand 18 states.
[2020-11-25 15:06:49,595 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 15:06:49,595 INFO  L93              Difference]: Finished difference Result 4060 states and 4442 transitions.
[2020-11-25 15:06:49,595 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 36 states. 
[2020-11-25 15:06:49,595 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4060 states and 4442 transitions.
[2020-11-25 15:06:49,605 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 18
[2020-11-25 15:06:49,617 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4060 states to 4060 states and 4442 transitions.
[2020-11-25 15:06:49,617 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1026
[2020-11-25 15:06:49,618 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1026
[2020-11-25 15:06:49,618 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4060 states and 4442 transitions.
[2020-11-25 15:06:49,623 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 15:06:49,623 INFO  L728         BuchiCegarLoop]: Abstraction has 4060 states and 4442 transitions.
[2020-11-25 15:06:49,626 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4060 states and 4442 transitions.
[2020-11-25 15:06:49,655 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4060 to 3294.
[2020-11-25 15:06:49,655 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3294 states.
[2020-11-25 15:06:49,659 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3294 states to 3294 states and 3577 transitions.
[2020-11-25 15:06:49,659 INFO  L751         BuchiCegarLoop]: Abstraction has 3294 states and 3577 transitions.
[2020-11-25 15:06:49,659 INFO  L631         BuchiCegarLoop]: Abstraction has 3294 states and 3577 transitions.
[2020-11-25 15:06:49,659 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 15:06:49,659 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3294 states and 3577 transitions.
[2020-11-25 15:06:49,663 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 15:06:49,663 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 15:06:49,663 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 15:06:49,666 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 15:06:49,666 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_TokenERC200 := false;
[L2]                 call_transfer_TokenERC200 := false;
[L2]     CALL        call main();
[L5089]              assume null == 0;
[L5090]  CALL        call this := FreshRefGenerator__success();
[L2432]              havoc newRef;
[L2433]              assume Alloc[newRef] == false;
[L2434]              Alloc[newRef] := true;
[L2435]              assume newRef != null;
[L5090]  RET         call this := FreshRefGenerator__success();
[L5091]              assume now >= 0;
[L5092]              assume DType[this] == ERC20ext;
[L5093]              assume msgvalue_MSG == 0;
[L5094]              gas := gas - 53000;
[L5095]  CALL        call ERC20ext_ERC20ext(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L1360]              havoc __exception;
[L1361]              revert := false;
[L1362]  COND FALSE  !(__exception)
[L1391]  CALL        call ERC20ext_ERC20ext__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L3247]  CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2624]  CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2607]              assume msgsender_MSG != null;
[L2608]              Balance[this] := 0;
[L2609]              owner_owned[this] := null;
[L2611]              owner_owned[this] := msgsender_MSG;
[L2624]  RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2625]  COND FALSE  !(revert)
[L3247]  RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L3248]  COND FALSE  !(revert)
[L3251]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L2752]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s258, tokenName_s258, tokenSymbol_s258);
[L2720]              assume msgsender_MSG != null;
[L2721]              Balance[this] := 0;
[L2722]              name_TokenERC20[this] := 1101944712;
[L2723]              symbol_TokenERC20[this] := 1101944712;
[L2724]              decimals_TokenERC20[this] := 18;
[L2725]              totalSupply_TokenERC20[this] := 0;
[L2726]              balanceOf_TokenERC20[this] := zeroRefintArr();
[L2727]              sum_balanceOf0[this] := 0;
[L2728]              allowance_TokenERC20[this] := zeroRefRefintArr();
[L2729]              sum_allowance1[this] := 0;
[L2731]              __var_1 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2732]              totalSupply_TokenERC20[this] := nonlinearMul(initialSupply_s258, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][msgsender_MSG];
[L2734]              balanceOf_TokenERC20[this][msgsender_MSG] := totalSupply_TokenERC20[this];
[L2735]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][msgsender_MSG];
[L2736]              name_TokenERC20[this] := tokenName_s258;
[L2737]              symbol_TokenERC20[this] := tokenSymbol_s258;
[L2752]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s258, tokenName_s258, tokenSymbol_s258);
[L2753]  COND FALSE  !(revert)
[L3251]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L3252]  COND FALSE  !(revert)
[L3255]  CALL        call ERC20ext_ERC20ext_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L3219]              assume msgsender_MSG != null;
[L3220]              Balance[this] := 0;
[L3221]              frozenAccount_ERC20ext[this] := zeroRefboolArr();
[L3222]              lockedAccount_ERC20ext[this] := zeroRefintArr();
[L3223]              sum_lockedAccount3[this] := 0;
[L3224]              lockedAmount_ERC20ext[this] := zeroRefintArr();
[L3225]              sum_lockedAmount4[this] := 0;
[L3255]  RET         call ERC20ext_ERC20ext_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L3256]  COND FALSE  !(revert)
[L1391]  RET         call ERC20ext_ERC20ext__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L1392]              assume !revert && gas >= 0;
[L5095]  RET         call ERC20ext_ERC20ext(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L5096]              assume !revert && gas >= 0;
[L5099]  CALL        call CorralChoice_ERC20ext(this);
[L4881]              havoc msgsender_MSG;
[L4882]              havoc msgvalue_MSG;
[L4883]              havoc choice;
[L4884]              havoc __ret_0_owner;
[L4885]              havoc newOwner_s166;
[L4886]              havoc __ret_0_name;
[L4887]              havoc __ret_0_symbol;
[L4888]              havoc __ret_0_decimals;
[L4889]              havoc __ret_0_totalSupply;
[L4890]              havoc arg835_s0;
[L4891]              havoc __ret_0_balanceOf;
[L4892]              havoc arg836_s0;
[L4893]              havoc arg837_s0;
[L4894]              havoc __ret_0_allowance;
[L4895]              havoc initialSupply_s258;
[L4896]              havoc tokenName_s258;
[L4897]              havoc tokenSymbol_s258;
[L4898]              havoc _to_s365;
[L4899]              havoc _value_s365;
[L4900]              havoc success_s365;
[L4901]              havoc _from_s413;
[L4902]              havoc _to_s413;
[L4903]              havoc _value_s413;
[L4904]              havoc success_s413;
[L4905]              havoc _spender_s441;
[L4906]              havoc _value_s441;
[L4907]              havoc success_s441;
[L4908]              havoc _spender_s479;
[L4909]              havoc _value_s479;
[L4910]              havoc _extraData_s479;
[L4911]              havoc success_s479;
[L4912]              havoc _value_s527;
[L4913]              havoc success_s527;
[L4914]              havoc _from_s598;
[L4915]              havoc _value_s598;
[L4916]              havoc success_s598;
[L4917]              havoc arg838_s0;
[L4918]              havoc __ret_0_frozenAccount;
[L4919]              havoc arg839_s0;
[L4920]              havoc __ret_0_lockedAccount;
[L4921]              havoc arg840_s0;
[L4922]              havoc __ret_0_lockedAmount;
[L4923]              havoc initialSupply_s639;
[L4924]              havoc tokenName_s639;
[L4925]              havoc tokenSymbol_s639;
[L4926]              havoc target_s779;
[L4927]              havoc mintedAmount_s779;
[L4928]              havoc success_s779;
[L4929]              havoc target_s804;
[L4930]              havoc freeze_s804;
[L4931]              havoc success_s804;
[L4932]              havoc target_s832;
[L4933]              havoc time_s832;
[L4934]              havoc amount_s832;
[L4935]              havoc success_s832;
[L4936]              havoc tmpNow;
[L4937]              havoc gas;
[L4938]              assume gas > 4000000 && gas <= 8000000;
[L4939]              tmpNow := now;
[L4940]              havoc now;
[L4941]              assume now > tmpNow;
[L4942]              assume msgsender_MSG != null;
[L4943]              assume DType[msgsender_MSG] != SafeMath;
[L4944]              assume DType[msgsender_MSG] != owned;
[L4945]              assume DType[msgsender_MSG] != tokenRecipient;
[L4946]              assume DType[msgsender_MSG] != TokenERC20;
[L4947]              assume DType[msgsender_MSG] != ERC20ext;
[L4948]              Alloc[msgsender_MSG] := true;
[L4949]  COND FALSE  !(choice == 20)
[L4955]  COND FALSE  !(choice == 19)
[L4961]  COND FALSE  !(choice == 18)
[L4967]  COND FALSE  !(choice == 17)
[L4973]  COND FALSE  !(choice == 16)
[L4979]  COND FALSE  !(choice == 15)
[L4985]  COND FALSE  !(choice == 14)
[L4991]  COND FALSE  !(choice == 13)
[L4997]  COND TRUE   choice == 12
[L4998]              gas := gas - 21000;
[L4999]  COND TRUE   gas >= 0
[L5000]              assume _value_s365 >= 0 && _value_s365 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5001]              assume msgvalue_MSG == 0;
[L5002]  CALL        call success_s365 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s365, _value_s365);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s365 && _value_s365 <= balanceOf_TokenERC20[this][msgsender_MSG]) && _value_s365 >= 0) && _value_s365 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s365] >= 0) && balanceOf_TokenERC20[this][_to_s365] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][msgsender_MSG] >= 0) && balanceOf_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_TokenERC200 := true;
[L2]                 call_transfer_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L527]               havoc __exception;
[L528]               revert := false;
[L529]   COND TRUE   __exception
[L530]               __tmp__Balance := Balance;
[L531]               __tmp__DType := DType;
[L532]               __tmp__Alloc := Alloc;
[L533]               __tmp__balance_ADDR := balance_ADDR;
[L534]               __tmp__M_Ref_int := M_Ref_int;
[L535]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L536]               __tmp__alloc_allowance_TokenERC20_lvl0 := alloc_allowance_TokenERC20_lvl0;
[L537]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L538]               __tmp__sum_allowance1 := sum_allowance1;
[L539]               __tmp__M_Ref_bool := M_Ref_bool;
[L540]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L541]               __tmp__sum_lockedAccount3 := sum_lockedAccount3;
[L542]               __tmp__sum_lockedAmount4 := sum_lockedAmount4;
[L543]               __tmp__Length := Length;
[L544]               __tmp__now := now;
[L545]               __tmp__owner_owned := owner_owned;
[L546]               __tmp__name_TokenERC20 := name_TokenERC20;
[L547]               __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L548]               __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L549]               __tmp__totalSupply_TokenERC20 := totalSupply_TokenERC20;
[L550]               __tmp__balanceOf_TokenERC20 := balanceOf_TokenERC20;
[L551]               __tmp__allowance_TokenERC20 := allowance_TokenERC20;
[L552]               __tmp__frozenAccount_ERC20ext := frozenAccount_ERC20ext;
[L553]               __tmp__lockedAccount_ERC20ext := lockedAccount_ERC20ext;
[L554]               __tmp__lockedAmount_ERC20ext := lockedAmount_ERC20ext;
[L555]   CALL        call success_s365 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _to_s365, _value_s365);
[L2834]  COND TRUE   __tmp__DType[this] == ERC20ext
[L2835]  CALL        call _transfer~address~address~uint256_ERC20ext__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s365, _value_s365);
[L3266]  COND FALSE  !(!(__tmp__now > __tmp__lockedAccount_ERC20ext[this][_from_s739] || (__tmp__lockedAmount_ERC20ext[this][_from_s739] + _value_s739) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 < __tmp__balanceOf_TokenERC20[this][_from_s739]))
[L3270]              __var_14 := null;
[L3271]  COND TRUE   !(_to_s739 != null)
[L3272]              revert := true;
[L2835]  RET         call _transfer~address~address~uint256_ERC20ext__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s365, _value_s365);
[L2836]  COND TRUE   revert
[L555]   RET         call success_s365 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _to_s365, _value_s365);
[L556]               assume revert || gas < 0;
[L5002]  RET         call success_s365 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s365, _value_s365);
[L5099]  RET         call CorralChoice_ERC20ext(this);

Loop:
[L5099]  CALL        call CorralChoice_ERC20ext(this);
[L4881]              havoc msgsender_MSG;
[L4882]              havoc msgvalue_MSG;
[L4883]              havoc choice;
[L4884]              havoc __ret_0_owner;
[L4885]              havoc newOwner_s166;
[L4886]              havoc __ret_0_name;
[L4887]              havoc __ret_0_symbol;
[L4888]              havoc __ret_0_decimals;
[L4889]              havoc __ret_0_totalSupply;
[L4890]              havoc arg835_s0;
[L4891]              havoc __ret_0_balanceOf;
[L4892]              havoc arg836_s0;
[L4893]              havoc arg837_s0;
[L4894]              havoc __ret_0_allowance;
[L4895]              havoc initialSupply_s258;
[L4896]              havoc tokenName_s258;
[L4897]              havoc tokenSymbol_s258;
[L4898]              havoc _to_s365;
[L4899]              havoc _value_s365;
[L4900]              havoc success_s365;
[L4901]              havoc _from_s413;
[L4902]              havoc _to_s413;
[L4903]              havoc _value_s413;
[L4904]              havoc success_s413;
[L4905]              havoc _spender_s441;
[L4906]              havoc _value_s441;
[L4907]              havoc success_s441;
[L4908]              havoc _spender_s479;
[L4909]              havoc _value_s479;
[L4910]              havoc _extraData_s479;
[L4911]              havoc success_s479;
[L4912]              havoc _value_s527;
[L4913]              havoc success_s527;
[L4914]              havoc _from_s598;
[L4915]              havoc _value_s598;
[L4916]              havoc success_s598;
[L4917]              havoc arg838_s0;
[L4918]              havoc __ret_0_frozenAccount;
[L4919]              havoc arg839_s0;
[L4920]              havoc __ret_0_lockedAccount;
[L4921]              havoc arg840_s0;
[L4922]              havoc __ret_0_lockedAmount;
[L4923]              havoc initialSupply_s639;
[L4924]              havoc tokenName_s639;
[L4925]              havoc tokenSymbol_s639;
[L4926]              havoc target_s779;
[L4927]              havoc mintedAmount_s779;
[L4928]              havoc success_s779;
[L4929]              havoc target_s804;
[L4930]              havoc freeze_s804;
[L4931]              havoc success_s804;
[L4932]              havoc target_s832;
[L4933]              havoc time_s832;
[L4934]              havoc amount_s832;
[L4935]              havoc success_s832;
[L4936]              havoc tmpNow;
[L4937]              havoc gas;
[L4938]              assume gas > 4000000 && gas <= 8000000;
[L4939]              tmpNow := now;
[L4940]              havoc now;
[L4941]              assume now > tmpNow;
[L4942]              assume msgsender_MSG != null;
[L4943]              assume DType[msgsender_MSG] != SafeMath;
[L4944]              assume DType[msgsender_MSG] != owned;
[L4945]              assume DType[msgsender_MSG] != tokenRecipient;
[L4946]              assume DType[msgsender_MSG] != TokenERC20;
[L4947]              assume DType[msgsender_MSG] != ERC20ext;
[L4948]              Alloc[msgsender_MSG] := true;
[L4949]  COND FALSE  !(choice == 20)
[L4955]  COND FALSE  !(choice == 19)
[L4961]  COND FALSE  !(choice == 18)
[L4967]  COND FALSE  !(choice == 17)
[L4973]  COND FALSE  !(choice == 16)
[L4979]  COND FALSE  !(choice == 15)
[L4985]  COND FALSE  !(choice == 14)
[L4991]  COND FALSE  !(choice == 13)
[L4997]  COND TRUE   choice == 12
[L4998]              gas := gas - 21000;
[L4999]  COND TRUE   gas >= 0
[L5000]              assume _value_s365 >= 0 && _value_s365 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5001]              assume msgvalue_MSG == 0;
[L5002]  CALL        call success_s365 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s365, _value_s365);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s365 && _value_s365 <= balanceOf_TokenERC20[this][msgsender_MSG]) && _value_s365 >= 0) && _value_s365 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s365] >= 0) && balanceOf_TokenERC20[this][_to_s365] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][msgsender_MSG] >= 0) && balanceOf_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_TokenERC200 := true;
[L2]                 call_transfer_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L527]               havoc __exception;
[L528]               revert := false;
[L529]   COND TRUE   __exception
[L530]               __tmp__Balance := Balance;
[L531]               __tmp__DType := DType;
[L532]               __tmp__Alloc := Alloc;
[L533]               __tmp__balance_ADDR := balance_ADDR;
[L534]               __tmp__M_Ref_int := M_Ref_int;
[L535]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L536]               __tmp__alloc_allowance_TokenERC20_lvl0 := alloc_allowance_TokenERC20_lvl0;
[L537]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L538]               __tmp__sum_allowance1 := sum_allowance1;
[L539]               __tmp__M_Ref_bool := M_Ref_bool;
[L540]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L541]               __tmp__sum_lockedAccount3 := sum_lockedAccount3;
[L542]               __tmp__sum_lockedAmount4 := sum_lockedAmount4;
[L543]               __tmp__Length := Length;
[L544]               __tmp__now := now;
[L545]               __tmp__owner_owned := owner_owned;
[L546]               __tmp__name_TokenERC20 := name_TokenERC20;
[L547]               __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L548]               __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L549]               __tmp__totalSupply_TokenERC20 := totalSupply_TokenERC20;
[L550]               __tmp__balanceOf_TokenERC20 := balanceOf_TokenERC20;
[L551]               __tmp__allowance_TokenERC20 := allowance_TokenERC20;
[L552]               __tmp__frozenAccount_ERC20ext := frozenAccount_ERC20ext;
[L553]               __tmp__lockedAccount_ERC20ext := lockedAccount_ERC20ext;
[L554]               __tmp__lockedAmount_ERC20ext := lockedAmount_ERC20ext;
[L555]   CALL        call success_s365 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _to_s365, _value_s365);
[L2834]  COND TRUE   __tmp__DType[this] == ERC20ext
[L2835]  CALL        call _transfer~address~address~uint256_ERC20ext__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s365, _value_s365);
[L3266]  COND FALSE  !(!(__tmp__now > __tmp__lockedAccount_ERC20ext[this][_from_s739] || (__tmp__lockedAmount_ERC20ext[this][_from_s739] + _value_s739) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 < __tmp__balanceOf_TokenERC20[this][_from_s739]))
[L3270]              __var_14 := null;
[L3271]  COND TRUE   !(_to_s739 != null)
[L3272]              revert := true;
[L2835]  RET         call _transfer~address~address~uint256_ERC20ext__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s365, _value_s365);
[L2836]  COND TRUE   revert
[L555]   RET         call success_s365 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _to_s365, _value_s365);
[L556]               assume revert || gas < 0;
[L5002]  RET         call success_s365 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s365, _value_s365);
[L5099]  RET         call CorralChoice_ERC20ext(this);

[2020-11-25 15:06:49,669 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 15:06:49,669 INFO  L82        PathProgramCache]: Analyzing trace with hash -1245451171, now seen corresponding path program 1 times
[2020-11-25 15:06:49,670 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 15:06:49,678 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 15:06:49,709 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 15:06:49,709 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 15:06:49,709 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 15:06:49,710 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 15:06:49,710 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 15:06:49,710 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 15:06:49,710 INFO  L87              Difference]: Start difference. First operand 3294 states and 3577 transitions. cyclomatic complexity: 287 Second operand 7 states.
[2020-11-25 15:06:49,788 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 15:06:49,788 INFO  L93              Difference]: Finished difference Result 3406 states and 3700 transitions.
[2020-11-25 15:06:49,788 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 15:06:49,788 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3406 states and 3700 transitions.
[2020-11-25 15:06:49,795 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 15:06:49,804 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3406 states to 3398 states and 3692 transitions.
[2020-11-25 15:06:49,805 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 974
[2020-11-25 15:06:49,805 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 974
[2020-11-25 15:06:49,805 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3398 states and 3692 transitions.
[2020-11-25 15:06:49,808 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 15:06:49,808 INFO  L728         BuchiCegarLoop]: Abstraction has 3398 states and 3692 transitions.
[2020-11-25 15:06:49,810 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3398 states and 3692 transitions.
[2020-11-25 15:06:49,834 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3398 to 3381.
[2020-11-25 15:06:49,835 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3381 states.
[2020-11-25 15:06:49,844 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3381 states to 3381 states and 3673 transitions.
[2020-11-25 15:06:49,845 INFO  L751         BuchiCegarLoop]: Abstraction has 3381 states and 3673 transitions.
[2020-11-25 15:06:49,845 INFO  L631         BuchiCegarLoop]: Abstraction has 3381 states and 3673 transitions.
[2020-11-25 15:06:49,845 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 15:06:49,845 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3381 states and 3673 transitions.
[2020-11-25 15:06:49,852 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 15:06:49,853 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 15:06:49,853 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 15:06:49,854 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 15:06:49,854 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_TokenERC200 := false;
[L2]                 call_transfer_TokenERC200 := false;
[L2]     CALL        call main();
[L5089]              assume null == 0;
[L5090]  CALL        call this := FreshRefGenerator__success();
[L2432]              havoc newRef;
[L2433]              assume Alloc[newRef] == false;
[L2434]              Alloc[newRef] := true;
[L2435]              assume newRef != null;
[L5090]  RET         call this := FreshRefGenerator__success();
[L5091]              assume now >= 0;
[L5092]              assume DType[this] == ERC20ext;
[L5093]              assume msgvalue_MSG == 0;
[L5094]              gas := gas - 53000;
[L5095]  CALL        call ERC20ext_ERC20ext(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L1360]              havoc __exception;
[L1361]              revert := false;
[L1362]  COND FALSE  !(__exception)
[L1391]  CALL        call ERC20ext_ERC20ext__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L3247]  CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2624]  CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2607]              assume msgsender_MSG != null;
[L2608]              Balance[this] := 0;
[L2609]              owner_owned[this] := null;
[L2611]              owner_owned[this] := msgsender_MSG;
[L2624]  RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2625]  COND FALSE  !(revert)
[L3247]  RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L3248]  COND FALSE  !(revert)
[L3251]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L2752]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s258, tokenName_s258, tokenSymbol_s258);
[L2720]              assume msgsender_MSG != null;
[L2721]              Balance[this] := 0;
[L2722]              name_TokenERC20[this] := 1101944712;
[L2723]              symbol_TokenERC20[this] := 1101944712;
[L2724]              decimals_TokenERC20[this] := 18;
[L2725]              totalSupply_TokenERC20[this] := 0;
[L2726]              balanceOf_TokenERC20[this] := zeroRefintArr();
[L2727]              sum_balanceOf0[this] := 0;
[L2728]              allowance_TokenERC20[this] := zeroRefRefintArr();
[L2729]              sum_allowance1[this] := 0;
[L2731]              __var_1 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2732]              totalSupply_TokenERC20[this] := nonlinearMul(initialSupply_s258, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][msgsender_MSG];
[L2734]              balanceOf_TokenERC20[this][msgsender_MSG] := totalSupply_TokenERC20[this];
[L2735]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][msgsender_MSG];
[L2736]              name_TokenERC20[this] := tokenName_s258;
[L2737]              symbol_TokenERC20[this] := tokenSymbol_s258;
[L2752]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s258, tokenName_s258, tokenSymbol_s258);
[L2753]  COND FALSE  !(revert)
[L3251]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L3252]  COND FALSE  !(revert)
[L3255]  CALL        call ERC20ext_ERC20ext_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L3219]              assume msgsender_MSG != null;
[L3220]              Balance[this] := 0;
[L3221]              frozenAccount_ERC20ext[this] := zeroRefboolArr();
[L3222]              lockedAccount_ERC20ext[this] := zeroRefintArr();
[L3223]              sum_lockedAccount3[this] := 0;
[L3224]              lockedAmount_ERC20ext[this] := zeroRefintArr();
[L3225]              sum_lockedAmount4[this] := 0;
[L3255]  RET         call ERC20ext_ERC20ext_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L3256]  COND FALSE  !(revert)
[L1391]  RET         call ERC20ext_ERC20ext__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L1392]              assume !revert && gas >= 0;
[L5095]  RET         call ERC20ext_ERC20ext(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L5096]              assume !revert && gas >= 0;
[L5099]  CALL        call CorralChoice_ERC20ext(this);
[L4881]              havoc msgsender_MSG;
[L4882]              havoc msgvalue_MSG;
[L4883]              havoc choice;
[L4884]              havoc __ret_0_owner;
[L4885]              havoc newOwner_s166;
[L4886]              havoc __ret_0_name;
[L4887]              havoc __ret_0_symbol;
[L4888]              havoc __ret_0_decimals;
[L4889]              havoc __ret_0_totalSupply;
[L4890]              havoc arg835_s0;
[L4891]              havoc __ret_0_balanceOf;
[L4892]              havoc arg836_s0;
[L4893]              havoc arg837_s0;
[L4894]              havoc __ret_0_allowance;
[L4895]              havoc initialSupply_s258;
[L4896]              havoc tokenName_s258;
[L4897]              havoc tokenSymbol_s258;
[L4898]              havoc _to_s365;
[L4899]              havoc _value_s365;
[L4900]              havoc success_s365;
[L4901]              havoc _from_s413;
[L4902]              havoc _to_s413;
[L4903]              havoc _value_s413;
[L4904]              havoc success_s413;
[L4905]              havoc _spender_s441;
[L4906]              havoc _value_s441;
[L4907]              havoc success_s441;
[L4908]              havoc _spender_s479;
[L4909]              havoc _value_s479;
[L4910]              havoc _extraData_s479;
[L4911]              havoc success_s479;
[L4912]              havoc _value_s527;
[L4913]              havoc success_s527;
[L4914]              havoc _from_s598;
[L4915]              havoc _value_s598;
[L4916]              havoc success_s598;
[L4917]              havoc arg838_s0;
[L4918]              havoc __ret_0_frozenAccount;
[L4919]              havoc arg839_s0;
[L4920]              havoc __ret_0_lockedAccount;
[L4921]              havoc arg840_s0;
[L4922]              havoc __ret_0_lockedAmount;
[L4923]              havoc initialSupply_s639;
[L4924]              havoc tokenName_s639;
[L4925]              havoc tokenSymbol_s639;
[L4926]              havoc target_s779;
[L4927]              havoc mintedAmount_s779;
[L4928]              havoc success_s779;
[L4929]              havoc target_s804;
[L4930]              havoc freeze_s804;
[L4931]              havoc success_s804;
[L4932]              havoc target_s832;
[L4933]              havoc time_s832;
[L4934]              havoc amount_s832;
[L4935]              havoc success_s832;
[L4936]              havoc tmpNow;
[L4937]              havoc gas;
[L4938]              assume gas > 4000000 && gas <= 8000000;
[L4939]              tmpNow := now;
[L4940]              havoc now;
[L4941]              assume now > tmpNow;
[L4942]              assume msgsender_MSG != null;
[L4943]              assume DType[msgsender_MSG] != SafeMath;
[L4944]              assume DType[msgsender_MSG] != owned;
[L4945]              assume DType[msgsender_MSG] != tokenRecipient;
[L4946]              assume DType[msgsender_MSG] != TokenERC20;
[L4947]              assume DType[msgsender_MSG] != ERC20ext;
[L4948]              Alloc[msgsender_MSG] := true;
[L4949]  COND FALSE  !(choice == 20)
[L4955]  COND FALSE  !(choice == 19)
[L4961]  COND FALSE  !(choice == 18)
[L4967]  COND FALSE  !(choice == 17)
[L4973]  COND FALSE  !(choice == 16)
[L4979]  COND FALSE  !(choice == 15)
[L4985]  COND FALSE  !(choice == 14)
[L4991]  COND FALSE  !(choice == 13)
[L4997]  COND TRUE   choice == 12
[L4998]              gas := gas - 21000;
[L4999]  COND TRUE   gas >= 0
[L5000]              assume _value_s365 >= 0 && _value_s365 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5001]              assume msgvalue_MSG == 0;
[L5002]  CALL        call success_s365 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s365, _value_s365);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s365 && _value_s365 <= balanceOf_TokenERC20[this][msgsender_MSG]) && _value_s365 >= 0) && _value_s365 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s365] >= 0) && balanceOf_TokenERC20[this][_to_s365] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][msgsender_MSG] >= 0) && balanceOf_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_TokenERC200 := true;
[L2]                 call_transfer_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L527]               havoc __exception;
[L528]               revert := false;
[L529]   COND TRUE   __exception
[L530]               __tmp__Balance := Balance;
[L531]               __tmp__DType := DType;
[L532]               __tmp__Alloc := Alloc;
[L533]               __tmp__balance_ADDR := balance_ADDR;
[L534]               __tmp__M_Ref_int := M_Ref_int;
[L535]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L536]               __tmp__alloc_allowance_TokenERC20_lvl0 := alloc_allowance_TokenERC20_lvl0;
[L537]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L538]               __tmp__sum_allowance1 := sum_allowance1;
[L539]               __tmp__M_Ref_bool := M_Ref_bool;
[L540]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L541]               __tmp__sum_lockedAccount3 := sum_lockedAccount3;
[L542]               __tmp__sum_lockedAmount4 := sum_lockedAmount4;
[L543]               __tmp__Length := Length;
[L544]               __tmp__now := now;
[L545]               __tmp__owner_owned := owner_owned;
[L546]               __tmp__name_TokenERC20 := name_TokenERC20;
[L547]               __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L548]               __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L549]               __tmp__totalSupply_TokenERC20 := totalSupply_TokenERC20;
[L550]               __tmp__balanceOf_TokenERC20 := balanceOf_TokenERC20;
[L551]               __tmp__allowance_TokenERC20 := allowance_TokenERC20;
[L552]               __tmp__frozenAccount_ERC20ext := frozenAccount_ERC20ext;
[L553]               __tmp__lockedAccount_ERC20ext := lockedAccount_ERC20ext;
[L554]               __tmp__lockedAmount_ERC20ext := lockedAmount_ERC20ext;
[L555]   CALL        call success_s365 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _to_s365, _value_s365);
[L2834]  COND FALSE  !(__tmp__DType[this] == ERC20ext)
[L2839]  COND TRUE   __tmp__DType[this] == TokenERC20
[L2840]  CALL        call _transfer~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s365, _value_s365);
[L2764]              __var_2 := null;
[L2765]  COND TRUE   !(_to_s346 != null)
[L2766]              revert := true;
[L2840]  RET         call _transfer~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s365, _value_s365);
[L2841]  COND TRUE   revert
[L555]   RET         call success_s365 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _to_s365, _value_s365);
[L556]               assume revert || gas < 0;
[L5002]  RET         call success_s365 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s365, _value_s365);
[L5099]  RET         call CorralChoice_ERC20ext(this);

Loop:
[L5099]  CALL        call CorralChoice_ERC20ext(this);
[L4881]              havoc msgsender_MSG;
[L4882]              havoc msgvalue_MSG;
[L4883]              havoc choice;
[L4884]              havoc __ret_0_owner;
[L4885]              havoc newOwner_s166;
[L4886]              havoc __ret_0_name;
[L4887]              havoc __ret_0_symbol;
[L4888]              havoc __ret_0_decimals;
[L4889]              havoc __ret_0_totalSupply;
[L4890]              havoc arg835_s0;
[L4891]              havoc __ret_0_balanceOf;
[L4892]              havoc arg836_s0;
[L4893]              havoc arg837_s0;
[L4894]              havoc __ret_0_allowance;
[L4895]              havoc initialSupply_s258;
[L4896]              havoc tokenName_s258;
[L4897]              havoc tokenSymbol_s258;
[L4898]              havoc _to_s365;
[L4899]              havoc _value_s365;
[L4900]              havoc success_s365;
[L4901]              havoc _from_s413;
[L4902]              havoc _to_s413;
[L4903]              havoc _value_s413;
[L4904]              havoc success_s413;
[L4905]              havoc _spender_s441;
[L4906]              havoc _value_s441;
[L4907]              havoc success_s441;
[L4908]              havoc _spender_s479;
[L4909]              havoc _value_s479;
[L4910]              havoc _extraData_s479;
[L4911]              havoc success_s479;
[L4912]              havoc _value_s527;
[L4913]              havoc success_s527;
[L4914]              havoc _from_s598;
[L4915]              havoc _value_s598;
[L4916]              havoc success_s598;
[L4917]              havoc arg838_s0;
[L4918]              havoc __ret_0_frozenAccount;
[L4919]              havoc arg839_s0;
[L4920]              havoc __ret_0_lockedAccount;
[L4921]              havoc arg840_s0;
[L4922]              havoc __ret_0_lockedAmount;
[L4923]              havoc initialSupply_s639;
[L4924]              havoc tokenName_s639;
[L4925]              havoc tokenSymbol_s639;
[L4926]              havoc target_s779;
[L4927]              havoc mintedAmount_s779;
[L4928]              havoc success_s779;
[L4929]              havoc target_s804;
[L4930]              havoc freeze_s804;
[L4931]              havoc success_s804;
[L4932]              havoc target_s832;
[L4933]              havoc time_s832;
[L4934]              havoc amount_s832;
[L4935]              havoc success_s832;
[L4936]              havoc tmpNow;
[L4937]              havoc gas;
[L4938]              assume gas > 4000000 && gas <= 8000000;
[L4939]              tmpNow := now;
[L4940]              havoc now;
[L4941]              assume now > tmpNow;
[L4942]              assume msgsender_MSG != null;
[L4943]              assume DType[msgsender_MSG] != SafeMath;
[L4944]              assume DType[msgsender_MSG] != owned;
[L4945]              assume DType[msgsender_MSG] != tokenRecipient;
[L4946]              assume DType[msgsender_MSG] != TokenERC20;
[L4947]              assume DType[msgsender_MSG] != ERC20ext;
[L4948]              Alloc[msgsender_MSG] := true;
[L4949]  COND FALSE  !(choice == 20)
[L4955]  COND FALSE  !(choice == 19)
[L4961]  COND FALSE  !(choice == 18)
[L4967]  COND FALSE  !(choice == 17)
[L4973]  COND FALSE  !(choice == 16)
[L4979]  COND FALSE  !(choice == 15)
[L4985]  COND FALSE  !(choice == 14)
[L4991]  COND FALSE  !(choice == 13)
[L4997]  COND TRUE   choice == 12
[L4998]              gas := gas - 21000;
[L4999]  COND TRUE   gas >= 0
[L5000]              assume _value_s365 >= 0 && _value_s365 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5001]              assume msgvalue_MSG == 0;
[L5002]  CALL        call success_s365 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s365, _value_s365);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s365 && _value_s365 <= balanceOf_TokenERC20[this][msgsender_MSG]) && _value_s365 >= 0) && _value_s365 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s365] >= 0) && balanceOf_TokenERC20[this][_to_s365] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][msgsender_MSG] >= 0) && balanceOf_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_TokenERC200 := true;
[L2]                 call_transfer_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L527]               havoc __exception;
[L528]               revert := false;
[L529]   COND TRUE   __exception
[L530]               __tmp__Balance := Balance;
[L531]               __tmp__DType := DType;
[L532]               __tmp__Alloc := Alloc;
[L533]               __tmp__balance_ADDR := balance_ADDR;
[L534]               __tmp__M_Ref_int := M_Ref_int;
[L535]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L536]               __tmp__alloc_allowance_TokenERC20_lvl0 := alloc_allowance_TokenERC20_lvl0;
[L537]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L538]               __tmp__sum_allowance1 := sum_allowance1;
[L539]               __tmp__M_Ref_bool := M_Ref_bool;
[L540]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L541]               __tmp__sum_lockedAccount3 := sum_lockedAccount3;
[L542]               __tmp__sum_lockedAmount4 := sum_lockedAmount4;
[L543]               __tmp__Length := Length;
[L544]               __tmp__now := now;
[L545]               __tmp__owner_owned := owner_owned;
[L546]               __tmp__name_TokenERC20 := name_TokenERC20;
[L547]               __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L548]               __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L549]               __tmp__totalSupply_TokenERC20 := totalSupply_TokenERC20;
[L550]               __tmp__balanceOf_TokenERC20 := balanceOf_TokenERC20;
[L551]               __tmp__allowance_TokenERC20 := allowance_TokenERC20;
[L552]               __tmp__frozenAccount_ERC20ext := frozenAccount_ERC20ext;
[L553]               __tmp__lockedAccount_ERC20ext := lockedAccount_ERC20ext;
[L554]               __tmp__lockedAmount_ERC20ext := lockedAmount_ERC20ext;
[L555]   CALL        call success_s365 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _to_s365, _value_s365);
[L2834]  COND FALSE  !(__tmp__DType[this] == ERC20ext)
[L2839]  COND TRUE   __tmp__DType[this] == TokenERC20
[L2840]  CALL        call _transfer~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s365, _value_s365);
[L2764]              __var_2 := null;
[L2765]  COND TRUE   !(_to_s346 != null)
[L2766]              revert := true;
[L2840]  RET         call _transfer~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s365, _value_s365);
[L2841]  COND TRUE   revert
[L555]   RET         call success_s365 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _to_s365, _value_s365);
[L556]               assume revert || gas < 0;
[L5002]  RET         call success_s365 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s365, _value_s365);
[L5099]  RET         call CorralChoice_ERC20ext(this);

[2020-11-25 15:06:49,859 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 15:06:49,859 INFO  L82        PathProgramCache]: Analyzing trace with hash 1405335734, now seen corresponding path program 1 times
[2020-11-25 15:06:49,860 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 15:06:49,871 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 15:06:49,910 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 15:06:49,911 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 15:06:49,911 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 15:06:49,911 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 15:06:49,911 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 15:06:49,911 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 15:06:49,912 INFO  L87              Difference]: Start difference. First operand 3381 states and 3673 transitions. cyclomatic complexity: 296 Second operand 7 states.
[2020-11-25 15:06:49,965 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 15:06:49,966 INFO  L93              Difference]: Finished difference Result 3418 states and 3714 transitions.
[2020-11-25 15:06:49,966 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 15:06:49,966 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3418 states and 3714 transitions.
[2020-11-25 15:06:49,976 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 15:06:49,987 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3418 states to 3410 states and 3706 transitions.
[2020-11-25 15:06:49,988 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 980
[2020-11-25 15:06:49,988 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 980
[2020-11-25 15:06:49,989 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3410 states and 3706 transitions.
[2020-11-25 15:06:49,992 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 15:06:49,992 INFO  L728         BuchiCegarLoop]: Abstraction has 3410 states and 3706 transitions.
[2020-11-25 15:06:49,996 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3410 states and 3706 transitions.
[2020-11-25 15:06:50,028 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3410 to 3389.
[2020-11-25 15:06:50,028 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3389 states.
[2020-11-25 15:06:50,032 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3389 states to 3389 states and 3683 transitions.
[2020-11-25 15:06:50,033 INFO  L751         BuchiCegarLoop]: Abstraction has 3389 states and 3683 transitions.
[2020-11-25 15:06:50,033 INFO  L631         BuchiCegarLoop]: Abstraction has 3389 states and 3683 transitions.
[2020-11-25 15:06:50,033 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 15:06:50,033 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3389 states and 3683 transitions.
[2020-11-25 15:06:50,039 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 15:06:50,039 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 15:06:50,039 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 15:06:50,041 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 15:06:50,041 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_TokenERC200 := false;
[L2]                 call_transfer_TokenERC200 := false;
[L2]     CALL        call main();
[L5089]              assume null == 0;
[L5090]  CALL        call this := FreshRefGenerator__success();
[L2432]              havoc newRef;
[L2433]              assume Alloc[newRef] == false;
[L2434]              Alloc[newRef] := true;
[L2435]              assume newRef != null;
[L5090]  RET         call this := FreshRefGenerator__success();
[L5091]              assume now >= 0;
[L5092]              assume DType[this] == ERC20ext;
[L5093]              assume msgvalue_MSG == 0;
[L5094]              gas := gas - 53000;
[L5095]  CALL        call ERC20ext_ERC20ext(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L1360]              havoc __exception;
[L1361]              revert := false;
[L1362]  COND FALSE  !(__exception)
[L1391]  CALL        call ERC20ext_ERC20ext__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L3247]  CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2624]  CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2607]              assume msgsender_MSG != null;
[L2608]              Balance[this] := 0;
[L2609]              owner_owned[this] := null;
[L2611]              owner_owned[this] := msgsender_MSG;
[L2624]  RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2625]  COND FALSE  !(revert)
[L3247]  RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L3248]  COND FALSE  !(revert)
[L3251]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L2752]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s258, tokenName_s258, tokenSymbol_s258);
[L2720]              assume msgsender_MSG != null;
[L2721]              Balance[this] := 0;
[L2722]              name_TokenERC20[this] := 1101944712;
[L2723]              symbol_TokenERC20[this] := 1101944712;
[L2724]              decimals_TokenERC20[this] := 18;
[L2725]              totalSupply_TokenERC20[this] := 0;
[L2726]              balanceOf_TokenERC20[this] := zeroRefintArr();
[L2727]              sum_balanceOf0[this] := 0;
[L2728]              allowance_TokenERC20[this] := zeroRefRefintArr();
[L2729]              sum_allowance1[this] := 0;
[L2731]              __var_1 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2732]              totalSupply_TokenERC20[this] := nonlinearMul(initialSupply_s258, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][msgsender_MSG];
[L2734]              balanceOf_TokenERC20[this][msgsender_MSG] := totalSupply_TokenERC20[this];
[L2735]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][msgsender_MSG];
[L2736]              name_TokenERC20[this] := tokenName_s258;
[L2737]              symbol_TokenERC20[this] := tokenSymbol_s258;
[L2752]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s258, tokenName_s258, tokenSymbol_s258);
[L2753]  COND FALSE  !(revert)
[L3251]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L3252]  COND FALSE  !(revert)
[L3255]  CALL        call ERC20ext_ERC20ext_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L3219]              assume msgsender_MSG != null;
[L3220]              Balance[this] := 0;
[L3221]              frozenAccount_ERC20ext[this] := zeroRefboolArr();
[L3222]              lockedAccount_ERC20ext[this] := zeroRefintArr();
[L3223]              sum_lockedAccount3[this] := 0;
[L3224]              lockedAmount_ERC20ext[this] := zeroRefintArr();
[L3225]              sum_lockedAmount4[this] := 0;
[L3255]  RET         call ERC20ext_ERC20ext_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L3256]  COND FALSE  !(revert)
[L1391]  RET         call ERC20ext_ERC20ext__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L1392]              assume !revert && gas >= 0;
[L5095]  RET         call ERC20ext_ERC20ext(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L5096]              assume !revert && gas >= 0;
[L5099]  CALL        call CorralChoice_ERC20ext(this);
[L4881]              havoc msgsender_MSG;
[L4882]              havoc msgvalue_MSG;
[L4883]              havoc choice;
[L4884]              havoc __ret_0_owner;
[L4885]              havoc newOwner_s166;
[L4886]              havoc __ret_0_name;
[L4887]              havoc __ret_0_symbol;
[L4888]              havoc __ret_0_decimals;
[L4889]              havoc __ret_0_totalSupply;
[L4890]              havoc arg835_s0;
[L4891]              havoc __ret_0_balanceOf;
[L4892]              havoc arg836_s0;
[L4893]              havoc arg837_s0;
[L4894]              havoc __ret_0_allowance;
[L4895]              havoc initialSupply_s258;
[L4896]              havoc tokenName_s258;
[L4897]              havoc tokenSymbol_s258;
[L4898]              havoc _to_s365;
[L4899]              havoc _value_s365;
[L4900]              havoc success_s365;
[L4901]              havoc _from_s413;
[L4902]              havoc _to_s413;
[L4903]              havoc _value_s413;
[L4904]              havoc success_s413;
[L4905]              havoc _spender_s441;
[L4906]              havoc _value_s441;
[L4907]              havoc success_s441;
[L4908]              havoc _spender_s479;
[L4909]              havoc _value_s479;
[L4910]              havoc _extraData_s479;
[L4911]              havoc success_s479;
[L4912]              havoc _value_s527;
[L4913]              havoc success_s527;
[L4914]              havoc _from_s598;
[L4915]              havoc _value_s598;
[L4916]              havoc success_s598;
[L4917]              havoc arg838_s0;
[L4918]              havoc __ret_0_frozenAccount;
[L4919]              havoc arg839_s0;
[L4920]              havoc __ret_0_lockedAccount;
[L4921]              havoc arg840_s0;
[L4922]              havoc __ret_0_lockedAmount;
[L4923]              havoc initialSupply_s639;
[L4924]              havoc tokenName_s639;
[L4925]              havoc tokenSymbol_s639;
[L4926]              havoc target_s779;
[L4927]              havoc mintedAmount_s779;
[L4928]              havoc success_s779;
[L4929]              havoc target_s804;
[L4930]              havoc freeze_s804;
[L4931]              havoc success_s804;
[L4932]              havoc target_s832;
[L4933]              havoc time_s832;
[L4934]              havoc amount_s832;
[L4935]              havoc success_s832;
[L4936]              havoc tmpNow;
[L4937]              havoc gas;
[L4938]              assume gas > 4000000 && gas <= 8000000;
[L4939]              tmpNow := now;
[L4940]              havoc now;
[L4941]              assume now > tmpNow;
[L4942]              assume msgsender_MSG != null;
[L4943]              assume DType[msgsender_MSG] != SafeMath;
[L4944]              assume DType[msgsender_MSG] != owned;
[L4945]              assume DType[msgsender_MSG] != tokenRecipient;
[L4946]              assume DType[msgsender_MSG] != TokenERC20;
[L4947]              assume DType[msgsender_MSG] != ERC20ext;
[L4948]              Alloc[msgsender_MSG] := true;
[L4949]  COND FALSE  !(choice == 20)
[L4955]  COND FALSE  !(choice == 19)
[L4961]  COND FALSE  !(choice == 18)
[L4967]  COND FALSE  !(choice == 17)
[L4973]  COND FALSE  !(choice == 16)
[L4979]  COND FALSE  !(choice == 15)
[L4985]  COND FALSE  !(choice == 14)
[L4991]  COND FALSE  !(choice == 13)
[L4997]  COND TRUE   choice == 12
[L4998]              gas := gas - 21000;
[L4999]  COND TRUE   gas >= 0
[L5000]              assume _value_s365 >= 0 && _value_s365 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5001]              assume msgvalue_MSG == 0;
[L5002]  CALL        call success_s365 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s365, _value_s365);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s365 && _value_s365 <= balanceOf_TokenERC20[this][msgsender_MSG]) && _value_s365 >= 0) && _value_s365 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s365] >= 0) && balanceOf_TokenERC20[this][_to_s365] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][msgsender_MSG] >= 0) && balanceOf_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_TokenERC200 := true;
[L2]                 call_transfer_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L527]               havoc __exception;
[L528]               revert := false;
[L529]   COND TRUE   __exception
[L530]               __tmp__Balance := Balance;
[L531]               __tmp__DType := DType;
[L532]               __tmp__Alloc := Alloc;
[L533]               __tmp__balance_ADDR := balance_ADDR;
[L534]               __tmp__M_Ref_int := M_Ref_int;
[L535]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L536]               __tmp__alloc_allowance_TokenERC20_lvl0 := alloc_allowance_TokenERC20_lvl0;
[L537]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L538]               __tmp__sum_allowance1 := sum_allowance1;
[L539]               __tmp__M_Ref_bool := M_Ref_bool;
[L540]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L541]               __tmp__sum_lockedAccount3 := sum_lockedAccount3;
[L542]               __tmp__sum_lockedAmount4 := sum_lockedAmount4;
[L543]               __tmp__Length := Length;
[L544]               __tmp__now := now;
[L545]               __tmp__owner_owned := owner_owned;
[L546]               __tmp__name_TokenERC20 := name_TokenERC20;
[L547]               __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L548]               __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L549]               __tmp__totalSupply_TokenERC20 := totalSupply_TokenERC20;
[L550]               __tmp__balanceOf_TokenERC20 := balanceOf_TokenERC20;
[L551]               __tmp__allowance_TokenERC20 := allowance_TokenERC20;
[L552]               __tmp__frozenAccount_ERC20ext := frozenAccount_ERC20ext;
[L553]               __tmp__lockedAccount_ERC20ext := lockedAccount_ERC20ext;
[L554]               __tmp__lockedAmount_ERC20ext := lockedAmount_ERC20ext;
[L555]   CALL        call success_s365 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _to_s365, _value_s365);
[L2834]  COND TRUE   __tmp__DType[this] == ERC20ext
[L2835]  CALL        call _transfer~address~address~uint256_ERC20ext__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s365, _value_s365);
[L3266]  COND FALSE  !(!(__tmp__now > __tmp__lockedAccount_ERC20ext[this][_from_s739] || (__tmp__lockedAmount_ERC20ext[this][_from_s739] + _value_s739) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 < __tmp__balanceOf_TokenERC20[this][_from_s739]))
[L3270]              __var_14 := null;
[L3271]  COND FALSE  !(!(_to_s739 != null))
[L3275]  COND TRUE   !(__tmp__balanceOf_TokenERC20[this][_from_s739] >= _value_s739)
[L3276]              revert := true;
[L2835]  RET         call _transfer~address~address~uint256_ERC20ext__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s365, _value_s365);
[L2836]  COND TRUE   revert
[L555]   RET         call success_s365 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _to_s365, _value_s365);
[L556]               assume revert || gas < 0;
[L5002]  RET         call success_s365 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s365, _value_s365);
[L5099]  RET         call CorralChoice_ERC20ext(this);

Loop:
[L5099]  CALL        call CorralChoice_ERC20ext(this);
[L4881]              havoc msgsender_MSG;
[L4882]              havoc msgvalue_MSG;
[L4883]              havoc choice;
[L4884]              havoc __ret_0_owner;
[L4885]              havoc newOwner_s166;
[L4886]              havoc __ret_0_name;
[L4887]              havoc __ret_0_symbol;
[L4888]              havoc __ret_0_decimals;
[L4889]              havoc __ret_0_totalSupply;
[L4890]              havoc arg835_s0;
[L4891]              havoc __ret_0_balanceOf;
[L4892]              havoc arg836_s0;
[L4893]              havoc arg837_s0;
[L4894]              havoc __ret_0_allowance;
[L4895]              havoc initialSupply_s258;
[L4896]              havoc tokenName_s258;
[L4897]              havoc tokenSymbol_s258;
[L4898]              havoc _to_s365;
[L4899]              havoc _value_s365;
[L4900]              havoc success_s365;
[L4901]              havoc _from_s413;
[L4902]              havoc _to_s413;
[L4903]              havoc _value_s413;
[L4904]              havoc success_s413;
[L4905]              havoc _spender_s441;
[L4906]              havoc _value_s441;
[L4907]              havoc success_s441;
[L4908]              havoc _spender_s479;
[L4909]              havoc _value_s479;
[L4910]              havoc _extraData_s479;
[L4911]              havoc success_s479;
[L4912]              havoc _value_s527;
[L4913]              havoc success_s527;
[L4914]              havoc _from_s598;
[L4915]              havoc _value_s598;
[L4916]              havoc success_s598;
[L4917]              havoc arg838_s0;
[L4918]              havoc __ret_0_frozenAccount;
[L4919]              havoc arg839_s0;
[L4920]              havoc __ret_0_lockedAccount;
[L4921]              havoc arg840_s0;
[L4922]              havoc __ret_0_lockedAmount;
[L4923]              havoc initialSupply_s639;
[L4924]              havoc tokenName_s639;
[L4925]              havoc tokenSymbol_s639;
[L4926]              havoc target_s779;
[L4927]              havoc mintedAmount_s779;
[L4928]              havoc success_s779;
[L4929]              havoc target_s804;
[L4930]              havoc freeze_s804;
[L4931]              havoc success_s804;
[L4932]              havoc target_s832;
[L4933]              havoc time_s832;
[L4934]              havoc amount_s832;
[L4935]              havoc success_s832;
[L4936]              havoc tmpNow;
[L4937]              havoc gas;
[L4938]              assume gas > 4000000 && gas <= 8000000;
[L4939]              tmpNow := now;
[L4940]              havoc now;
[L4941]              assume now > tmpNow;
[L4942]              assume msgsender_MSG != null;
[L4943]              assume DType[msgsender_MSG] != SafeMath;
[L4944]              assume DType[msgsender_MSG] != owned;
[L4945]              assume DType[msgsender_MSG] != tokenRecipient;
[L4946]              assume DType[msgsender_MSG] != TokenERC20;
[L4947]              assume DType[msgsender_MSG] != ERC20ext;
[L4948]              Alloc[msgsender_MSG] := true;
[L4949]  COND FALSE  !(choice == 20)
[L4955]  COND FALSE  !(choice == 19)
[L4961]  COND FALSE  !(choice == 18)
[L4967]  COND FALSE  !(choice == 17)
[L4973]  COND FALSE  !(choice == 16)
[L4979]  COND FALSE  !(choice == 15)
[L4985]  COND FALSE  !(choice == 14)
[L4991]  COND FALSE  !(choice == 13)
[L4997]  COND TRUE   choice == 12
[L4998]              gas := gas - 21000;
[L4999]  COND TRUE   gas >= 0
[L5000]              assume _value_s365 >= 0 && _value_s365 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5001]              assume msgvalue_MSG == 0;
[L5002]  CALL        call success_s365 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s365, _value_s365);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s365 && _value_s365 <= balanceOf_TokenERC20[this][msgsender_MSG]) && _value_s365 >= 0) && _value_s365 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s365] >= 0) && balanceOf_TokenERC20[this][_to_s365] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][msgsender_MSG] >= 0) && balanceOf_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_TokenERC200 := true;
[L2]                 call_transfer_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L527]               havoc __exception;
[L528]               revert := false;
[L529]   COND TRUE   __exception
[L530]               __tmp__Balance := Balance;
[L531]               __tmp__DType := DType;
[L532]               __tmp__Alloc := Alloc;
[L533]               __tmp__balance_ADDR := balance_ADDR;
[L534]               __tmp__M_Ref_int := M_Ref_int;
[L535]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L536]               __tmp__alloc_allowance_TokenERC20_lvl0 := alloc_allowance_TokenERC20_lvl0;
[L537]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L538]               __tmp__sum_allowance1 := sum_allowance1;
[L539]               __tmp__M_Ref_bool := M_Ref_bool;
[L540]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L541]               __tmp__sum_lockedAccount3 := sum_lockedAccount3;
[L542]               __tmp__sum_lockedAmount4 := sum_lockedAmount4;
[L543]               __tmp__Length := Length;
[L544]               __tmp__now := now;
[L545]               __tmp__owner_owned := owner_owned;
[L546]               __tmp__name_TokenERC20 := name_TokenERC20;
[L547]               __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L548]               __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L549]               __tmp__totalSupply_TokenERC20 := totalSupply_TokenERC20;
[L550]               __tmp__balanceOf_TokenERC20 := balanceOf_TokenERC20;
[L551]               __tmp__allowance_TokenERC20 := allowance_TokenERC20;
[L552]               __tmp__frozenAccount_ERC20ext := frozenAccount_ERC20ext;
[L553]               __tmp__lockedAccount_ERC20ext := lockedAccount_ERC20ext;
[L554]               __tmp__lockedAmount_ERC20ext := lockedAmount_ERC20ext;
[L555]   CALL        call success_s365 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _to_s365, _value_s365);
[L2834]  COND TRUE   __tmp__DType[this] == ERC20ext
[L2835]  CALL        call _transfer~address~address~uint256_ERC20ext__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s365, _value_s365);
[L3266]  COND FALSE  !(!(__tmp__now > __tmp__lockedAccount_ERC20ext[this][_from_s739] || (__tmp__lockedAmount_ERC20ext[this][_from_s739] + _value_s739) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 < __tmp__balanceOf_TokenERC20[this][_from_s739]))
[L3270]              __var_14 := null;
[L3271]  COND FALSE  !(!(_to_s739 != null))
[L3275]  COND TRUE   !(__tmp__balanceOf_TokenERC20[this][_from_s739] >= _value_s739)
[L3276]              revert := true;
[L2835]  RET         call _transfer~address~address~uint256_ERC20ext__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s365, _value_s365);
[L2836]  COND TRUE   revert
[L555]   RET         call success_s365 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _to_s365, _value_s365);
[L556]               assume revert || gas < 0;
[L5002]  RET         call success_s365 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s365, _value_s365);
[L5099]  RET         call CorralChoice_ERC20ext(this);

[2020-11-25 15:06:50,045 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 15:06:50,046 INFO  L82        PathProgramCache]: Analyzing trace with hash 2012465405, now seen corresponding path program 1 times
[2020-11-25 15:06:50,046 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 15:06:50,058 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 15:06:50,109 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 15:06:50,109 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 15:06:50,109 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 15:06:50,110 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 15:06:50,110 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 15:06:50,110 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 15:06:50,110 INFO  L87              Difference]: Start difference. First operand 3389 states and 3683 transitions. cyclomatic complexity: 298 Second operand 7 states.
[2020-11-25 15:06:50,666 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 15:06:50,666 INFO  L93              Difference]: Finished difference Result 3590 states and 3920 transitions.
[2020-11-25 15:06:50,666 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 15:06:50,666 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3590 states and 3920 transitions.
[2020-11-25 15:06:50,673 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 15:06:50,681 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3590 states to 3590 states and 3920 transitions.
[2020-11-25 15:06:50,681 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1075
[2020-11-25 15:06:50,681 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1075
[2020-11-25 15:06:50,681 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3590 states and 3920 transitions.
[2020-11-25 15:06:50,683 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 15:06:50,683 INFO  L728         BuchiCegarLoop]: Abstraction has 3590 states and 3920 transitions.
[2020-11-25 15:06:50,686 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3590 states and 3920 transitions.
[2020-11-25 15:06:50,707 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3590 to 3389.
[2020-11-25 15:06:50,707 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3389 states.
[2020-11-25 15:06:50,710 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3389 states to 3389 states and 3683 transitions.
[2020-11-25 15:06:50,710 INFO  L751         BuchiCegarLoop]: Abstraction has 3389 states and 3683 transitions.
[2020-11-25 15:06:50,710 INFO  L631         BuchiCegarLoop]: Abstraction has 3389 states and 3683 transitions.
[2020-11-25 15:06:50,710 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 15:06:50,710 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3389 states and 3683 transitions.
[2020-11-25 15:06:50,714 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 15:06:50,714 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 15:06:50,714 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 15:06:50,716 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 15:06:50,716 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_TokenERC200 := false;
[L2]                 call_transfer_TokenERC200 := false;
[L2]     CALL        call main();
[L5089]              assume null == 0;
[L5090]  CALL        call this := FreshRefGenerator__success();
[L2432]              havoc newRef;
[L2433]              assume Alloc[newRef] == false;
[L2434]              Alloc[newRef] := true;
[L2435]              assume newRef != null;
[L5090]  RET         call this := FreshRefGenerator__success();
[L5091]              assume now >= 0;
[L5092]              assume DType[this] == ERC20ext;
[L5093]              assume msgvalue_MSG == 0;
[L5094]              gas := gas - 53000;
[L5095]  CALL        call ERC20ext_ERC20ext(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L1360]              havoc __exception;
[L1361]              revert := false;
[L1362]  COND FALSE  !(__exception)
[L1391]  CALL        call ERC20ext_ERC20ext__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L3247]  CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2624]  CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2607]              assume msgsender_MSG != null;
[L2608]              Balance[this] := 0;
[L2609]              owner_owned[this] := null;
[L2611]              owner_owned[this] := msgsender_MSG;
[L2624]  RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2625]  COND FALSE  !(revert)
[L3247]  RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L3248]  COND FALSE  !(revert)
[L3251]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L2752]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s258, tokenName_s258, tokenSymbol_s258);
[L2720]              assume msgsender_MSG != null;
[L2721]              Balance[this] := 0;
[L2722]              name_TokenERC20[this] := 1101944712;
[L2723]              symbol_TokenERC20[this] := 1101944712;
[L2724]              decimals_TokenERC20[this] := 18;
[L2725]              totalSupply_TokenERC20[this] := 0;
[L2726]              balanceOf_TokenERC20[this] := zeroRefintArr();
[L2727]              sum_balanceOf0[this] := 0;
[L2728]              allowance_TokenERC20[this] := zeroRefRefintArr();
[L2729]              sum_allowance1[this] := 0;
[L2731]              __var_1 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2732]              totalSupply_TokenERC20[this] := nonlinearMul(initialSupply_s258, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][msgsender_MSG];
[L2734]              balanceOf_TokenERC20[this][msgsender_MSG] := totalSupply_TokenERC20[this];
[L2735]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][msgsender_MSG];
[L2736]              name_TokenERC20[this] := tokenName_s258;
[L2737]              symbol_TokenERC20[this] := tokenSymbol_s258;
[L2752]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s258, tokenName_s258, tokenSymbol_s258);
[L2753]  COND FALSE  !(revert)
[L3251]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L3252]  COND FALSE  !(revert)
[L3255]  CALL        call ERC20ext_ERC20ext_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L3219]              assume msgsender_MSG != null;
[L3220]              Balance[this] := 0;
[L3221]              frozenAccount_ERC20ext[this] := zeroRefboolArr();
[L3222]              lockedAccount_ERC20ext[this] := zeroRefintArr();
[L3223]              sum_lockedAccount3[this] := 0;
[L3224]              lockedAmount_ERC20ext[this] := zeroRefintArr();
[L3225]              sum_lockedAmount4[this] := 0;
[L3255]  RET         call ERC20ext_ERC20ext_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L3256]  COND FALSE  !(revert)
[L1391]  RET         call ERC20ext_ERC20ext__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L1392]              assume !revert && gas >= 0;
[L5095]  RET         call ERC20ext_ERC20ext(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L5096]              assume !revert && gas >= 0;
[L5099]  CALL        call CorralChoice_ERC20ext(this);
[L4881]              havoc msgsender_MSG;
[L4882]              havoc msgvalue_MSG;
[L4883]              havoc choice;
[L4884]              havoc __ret_0_owner;
[L4885]              havoc newOwner_s166;
[L4886]              havoc __ret_0_name;
[L4887]              havoc __ret_0_symbol;
[L4888]              havoc __ret_0_decimals;
[L4889]              havoc __ret_0_totalSupply;
[L4890]              havoc arg835_s0;
[L4891]              havoc __ret_0_balanceOf;
[L4892]              havoc arg836_s0;
[L4893]              havoc arg837_s0;
[L4894]              havoc __ret_0_allowance;
[L4895]              havoc initialSupply_s258;
[L4896]              havoc tokenName_s258;
[L4897]              havoc tokenSymbol_s258;
[L4898]              havoc _to_s365;
[L4899]              havoc _value_s365;
[L4900]              havoc success_s365;
[L4901]              havoc _from_s413;
[L4902]              havoc _to_s413;
[L4903]              havoc _value_s413;
[L4904]              havoc success_s413;
[L4905]              havoc _spender_s441;
[L4906]              havoc _value_s441;
[L4907]              havoc success_s441;
[L4908]              havoc _spender_s479;
[L4909]              havoc _value_s479;
[L4910]              havoc _extraData_s479;
[L4911]              havoc success_s479;
[L4912]              havoc _value_s527;
[L4913]              havoc success_s527;
[L4914]              havoc _from_s598;
[L4915]              havoc _value_s598;
[L4916]              havoc success_s598;
[L4917]              havoc arg838_s0;
[L4918]              havoc __ret_0_frozenAccount;
[L4919]              havoc arg839_s0;
[L4920]              havoc __ret_0_lockedAccount;
[L4921]              havoc arg840_s0;
[L4922]              havoc __ret_0_lockedAmount;
[L4923]              havoc initialSupply_s639;
[L4924]              havoc tokenName_s639;
[L4925]              havoc tokenSymbol_s639;
[L4926]              havoc target_s779;
[L4927]              havoc mintedAmount_s779;
[L4928]              havoc success_s779;
[L4929]              havoc target_s804;
[L4930]              havoc freeze_s804;
[L4931]              havoc success_s804;
[L4932]              havoc target_s832;
[L4933]              havoc time_s832;
[L4934]              havoc amount_s832;
[L4935]              havoc success_s832;
[L4936]              havoc tmpNow;
[L4937]              havoc gas;
[L4938]              assume gas > 4000000 && gas <= 8000000;
[L4939]              tmpNow := now;
[L4940]              havoc now;
[L4941]              assume now > tmpNow;
[L4942]              assume msgsender_MSG != null;
[L4943]              assume DType[msgsender_MSG] != SafeMath;
[L4944]              assume DType[msgsender_MSG] != owned;
[L4945]              assume DType[msgsender_MSG] != tokenRecipient;
[L4946]              assume DType[msgsender_MSG] != TokenERC20;
[L4947]              assume DType[msgsender_MSG] != ERC20ext;
[L4948]              Alloc[msgsender_MSG] := true;
[L4949]  COND FALSE  !(choice == 20)
[L4955]  COND FALSE  !(choice == 19)
[L4961]  COND FALSE  !(choice == 18)
[L4967]  COND FALSE  !(choice == 17)
[L4973]  COND FALSE  !(choice == 16)
[L4979]  COND FALSE  !(choice == 15)
[L4985]  COND FALSE  !(choice == 14)
[L4991]  COND FALSE  !(choice == 13)
[L4997]  COND TRUE   choice == 12
[L4998]              gas := gas - 21000;
[L4999]  COND TRUE   gas >= 0
[L5000]              assume _value_s365 >= 0 && _value_s365 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5001]              assume msgvalue_MSG == 0;
[L5002]  CALL        call success_s365 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s365, _value_s365);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s365 && _value_s365 <= balanceOf_TokenERC20[this][msgsender_MSG]) && _value_s365 >= 0) && _value_s365 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s365] >= 0) && balanceOf_TokenERC20[this][_to_s365] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][msgsender_MSG] >= 0) && balanceOf_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_TokenERC200 := true;
[L2]                 call_transfer_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L527]               havoc __exception;
[L528]               revert := false;
[L529]   COND TRUE   __exception
[L530]               __tmp__Balance := Balance;
[L531]               __tmp__DType := DType;
[L532]               __tmp__Alloc := Alloc;
[L533]               __tmp__balance_ADDR := balance_ADDR;
[L534]               __tmp__M_Ref_int := M_Ref_int;
[L535]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L536]               __tmp__alloc_allowance_TokenERC20_lvl0 := alloc_allowance_TokenERC20_lvl0;
[L537]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L538]               __tmp__sum_allowance1 := sum_allowance1;
[L539]               __tmp__M_Ref_bool := M_Ref_bool;
[L540]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L541]               __tmp__sum_lockedAccount3 := sum_lockedAccount3;
[L542]               __tmp__sum_lockedAmount4 := sum_lockedAmount4;
[L543]               __tmp__Length := Length;
[L544]               __tmp__now := now;
[L545]               __tmp__owner_owned := owner_owned;
[L546]               __tmp__name_TokenERC20 := name_TokenERC20;
[L547]               __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L548]               __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L549]               __tmp__totalSupply_TokenERC20 := totalSupply_TokenERC20;
[L550]               __tmp__balanceOf_TokenERC20 := balanceOf_TokenERC20;
[L551]               __tmp__allowance_TokenERC20 := allowance_TokenERC20;
[L552]               __tmp__frozenAccount_ERC20ext := frozenAccount_ERC20ext;
[L553]               __tmp__lockedAccount_ERC20ext := lockedAccount_ERC20ext;
[L554]               __tmp__lockedAmount_ERC20ext := lockedAmount_ERC20ext;
[L555]   CALL        call success_s365 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _to_s365, _value_s365);
[L2834]  COND FALSE  !(__tmp__DType[this] == ERC20ext)
[L2839]  COND TRUE   __tmp__DType[this] == TokenERC20
[L2840]  CALL        call _transfer~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s365, _value_s365);
[L2764]              __var_2 := null;
[L2765]  COND FALSE  !(!(_to_s346 != null))
[L2769]  COND TRUE   !(__tmp__balanceOf_TokenERC20[this][_from_s346] >= _value_s346)
[L2770]              revert := true;
[L2840]  RET         call _transfer~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s365, _value_s365);
[L2841]  COND TRUE   revert
[L555]   RET         call success_s365 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _to_s365, _value_s365);
[L556]               assume revert || gas < 0;
[L5002]  RET         call success_s365 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s365, _value_s365);
[L5099]  RET         call CorralChoice_ERC20ext(this);

Loop:
[L5099]  CALL        call CorralChoice_ERC20ext(this);
[L4881]              havoc msgsender_MSG;
[L4882]              havoc msgvalue_MSG;
[L4883]              havoc choice;
[L4884]              havoc __ret_0_owner;
[L4885]              havoc newOwner_s166;
[L4886]              havoc __ret_0_name;
[L4887]              havoc __ret_0_symbol;
[L4888]              havoc __ret_0_decimals;
[L4889]              havoc __ret_0_totalSupply;
[L4890]              havoc arg835_s0;
[L4891]              havoc __ret_0_balanceOf;
[L4892]              havoc arg836_s0;
[L4893]              havoc arg837_s0;
[L4894]              havoc __ret_0_allowance;
[L4895]              havoc initialSupply_s258;
[L4896]              havoc tokenName_s258;
[L4897]              havoc tokenSymbol_s258;
[L4898]              havoc _to_s365;
[L4899]              havoc _value_s365;
[L4900]              havoc success_s365;
[L4901]              havoc _from_s413;
[L4902]              havoc _to_s413;
[L4903]              havoc _value_s413;
[L4904]              havoc success_s413;
[L4905]              havoc _spender_s441;
[L4906]              havoc _value_s441;
[L4907]              havoc success_s441;
[L4908]              havoc _spender_s479;
[L4909]              havoc _value_s479;
[L4910]              havoc _extraData_s479;
[L4911]              havoc success_s479;
[L4912]              havoc _value_s527;
[L4913]              havoc success_s527;
[L4914]              havoc _from_s598;
[L4915]              havoc _value_s598;
[L4916]              havoc success_s598;
[L4917]              havoc arg838_s0;
[L4918]              havoc __ret_0_frozenAccount;
[L4919]              havoc arg839_s0;
[L4920]              havoc __ret_0_lockedAccount;
[L4921]              havoc arg840_s0;
[L4922]              havoc __ret_0_lockedAmount;
[L4923]              havoc initialSupply_s639;
[L4924]              havoc tokenName_s639;
[L4925]              havoc tokenSymbol_s639;
[L4926]              havoc target_s779;
[L4927]              havoc mintedAmount_s779;
[L4928]              havoc success_s779;
[L4929]              havoc target_s804;
[L4930]              havoc freeze_s804;
[L4931]              havoc success_s804;
[L4932]              havoc target_s832;
[L4933]              havoc time_s832;
[L4934]              havoc amount_s832;
[L4935]              havoc success_s832;
[L4936]              havoc tmpNow;
[L4937]              havoc gas;
[L4938]              assume gas > 4000000 && gas <= 8000000;
[L4939]              tmpNow := now;
[L4940]              havoc now;
[L4941]              assume now > tmpNow;
[L4942]              assume msgsender_MSG != null;
[L4943]              assume DType[msgsender_MSG] != SafeMath;
[L4944]              assume DType[msgsender_MSG] != owned;
[L4945]              assume DType[msgsender_MSG] != tokenRecipient;
[L4946]              assume DType[msgsender_MSG] != TokenERC20;
[L4947]              assume DType[msgsender_MSG] != ERC20ext;
[L4948]              Alloc[msgsender_MSG] := true;
[L4949]  COND FALSE  !(choice == 20)
[L4955]  COND FALSE  !(choice == 19)
[L4961]  COND FALSE  !(choice == 18)
[L4967]  COND FALSE  !(choice == 17)
[L4973]  COND FALSE  !(choice == 16)
[L4979]  COND FALSE  !(choice == 15)
[L4985]  COND FALSE  !(choice == 14)
[L4991]  COND FALSE  !(choice == 13)
[L4997]  COND TRUE   choice == 12
[L4998]              gas := gas - 21000;
[L4999]  COND TRUE   gas >= 0
[L5000]              assume _value_s365 >= 0 && _value_s365 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5001]              assume msgvalue_MSG == 0;
[L5002]  CALL        call success_s365 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s365, _value_s365);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s365 && _value_s365 <= balanceOf_TokenERC20[this][msgsender_MSG]) && _value_s365 >= 0) && _value_s365 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s365] >= 0) && balanceOf_TokenERC20[this][_to_s365] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][msgsender_MSG] >= 0) && balanceOf_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_TokenERC200 := true;
[L2]                 call_transfer_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L527]               havoc __exception;
[L528]               revert := false;
[L529]   COND TRUE   __exception
[L530]               __tmp__Balance := Balance;
[L531]               __tmp__DType := DType;
[L532]               __tmp__Alloc := Alloc;
[L533]               __tmp__balance_ADDR := balance_ADDR;
[L534]               __tmp__M_Ref_int := M_Ref_int;
[L535]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L536]               __tmp__alloc_allowance_TokenERC20_lvl0 := alloc_allowance_TokenERC20_lvl0;
[L537]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L538]               __tmp__sum_allowance1 := sum_allowance1;
[L539]               __tmp__M_Ref_bool := M_Ref_bool;
[L540]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L541]               __tmp__sum_lockedAccount3 := sum_lockedAccount3;
[L542]               __tmp__sum_lockedAmount4 := sum_lockedAmount4;
[L543]               __tmp__Length := Length;
[L544]               __tmp__now := now;
[L545]               __tmp__owner_owned := owner_owned;
[L546]               __tmp__name_TokenERC20 := name_TokenERC20;
[L547]               __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L548]               __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L549]               __tmp__totalSupply_TokenERC20 := totalSupply_TokenERC20;
[L550]               __tmp__balanceOf_TokenERC20 := balanceOf_TokenERC20;
[L551]               __tmp__allowance_TokenERC20 := allowance_TokenERC20;
[L552]               __tmp__frozenAccount_ERC20ext := frozenAccount_ERC20ext;
[L553]               __tmp__lockedAccount_ERC20ext := lockedAccount_ERC20ext;
[L554]               __tmp__lockedAmount_ERC20ext := lockedAmount_ERC20ext;
[L555]   CALL        call success_s365 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _to_s365, _value_s365);
[L2834]  COND FALSE  !(__tmp__DType[this] == ERC20ext)
[L2839]  COND TRUE   __tmp__DType[this] == TokenERC20
[L2840]  CALL        call _transfer~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s365, _value_s365);
[L2764]              __var_2 := null;
[L2765]  COND FALSE  !(!(_to_s346 != null))
[L2769]  COND TRUE   !(__tmp__balanceOf_TokenERC20[this][_from_s346] >= _value_s346)
[L2770]              revert := true;
[L2840]  RET         call _transfer~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s365, _value_s365);
[L2841]  COND TRUE   revert
[L555]   RET         call success_s365 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _to_s365, _value_s365);
[L556]               assume revert || gas < 0;
[L5002]  RET         call success_s365 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s365, _value_s365);
[L5099]  RET         call CorralChoice_ERC20ext(this);

[2020-11-25 15:06:50,719 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 15:06:50,719 INFO  L82        PathProgramCache]: Analyzing trace with hash -406662510, now seen corresponding path program 1 times
[2020-11-25 15:06:50,720 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 15:06:50,732 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 15:06:50,773 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 15:06:50,773 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 15:06:50,773 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 15:06:50,774 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 15:06:50,774 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 15:06:50,774 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 15:06:50,774 INFO  L87              Difference]: Start difference. First operand 3389 states and 3683 transitions. cyclomatic complexity: 298 Second operand 7 states.
[2020-11-25 15:06:51,152 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 15:06:51,153 INFO  L93              Difference]: Finished difference Result 4832 states and 5365 transitions.
[2020-11-25 15:06:51,153 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 15:06:51,153 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4832 states and 5365 transitions.
[2020-11-25 15:06:51,162 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 15:06:51,173 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4832 states to 4786 states and 5306 transitions.
[2020-11-25 15:06:51,173 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1381
[2020-11-25 15:06:51,174 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1381
[2020-11-25 15:06:51,174 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4786 states and 5306 transitions.
[2020-11-25 15:06:51,177 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 15:06:51,177 INFO  L728         BuchiCegarLoop]: Abstraction has 4786 states and 5306 transitions.
[2020-11-25 15:06:51,180 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4786 states and 5306 transitions.
[2020-11-25 15:06:51,200 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4786 to 3367.
[2020-11-25 15:06:51,200 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3367 states.
[2020-11-25 15:06:51,203 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3367 states to 3367 states and 3653 transitions.
[2020-11-25 15:06:51,203 INFO  L751         BuchiCegarLoop]: Abstraction has 3367 states and 3653 transitions.
[2020-11-25 15:06:51,203 INFO  L631         BuchiCegarLoop]: Abstraction has 3367 states and 3653 transitions.
[2020-11-25 15:06:51,203 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 15:06:51,203 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3367 states and 3653 transitions.
[2020-11-25 15:06:51,207 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 15:06:51,207 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 15:06:51,207 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 15:06:51,208 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 15:06:51,209 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_TokenERC200 := false;
[L2]                 call_transfer_TokenERC200 := false;
[L2]     CALL        call main();
[L5089]              assume null == 0;
[L5090]  CALL        call this := FreshRefGenerator__success();
[L2432]              havoc newRef;
[L2433]              assume Alloc[newRef] == false;
[L2434]              Alloc[newRef] := true;
[L2435]              assume newRef != null;
[L5090]  RET         call this := FreshRefGenerator__success();
[L5091]              assume now >= 0;
[L5092]              assume DType[this] == ERC20ext;
[L5093]              assume msgvalue_MSG == 0;
[L5094]              gas := gas - 53000;
[L5095]  CALL        call ERC20ext_ERC20ext(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L1360]              havoc __exception;
[L1361]              revert := false;
[L1362]  COND FALSE  !(__exception)
[L1391]  CALL        call ERC20ext_ERC20ext__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L3247]  CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2624]  CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2607]              assume msgsender_MSG != null;
[L2608]              Balance[this] := 0;
[L2609]              owner_owned[this] := null;
[L2611]              owner_owned[this] := msgsender_MSG;
[L2624]  RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2625]  COND FALSE  !(revert)
[L3247]  RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L3248]  COND FALSE  !(revert)
[L3251]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L2752]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s258, tokenName_s258, tokenSymbol_s258);
[L2720]              assume msgsender_MSG != null;
[L2721]              Balance[this] := 0;
[L2722]              name_TokenERC20[this] := 1101944712;
[L2723]              symbol_TokenERC20[this] := 1101944712;
[L2724]              decimals_TokenERC20[this] := 18;
[L2725]              totalSupply_TokenERC20[this] := 0;
[L2726]              balanceOf_TokenERC20[this] := zeroRefintArr();
[L2727]              sum_balanceOf0[this] := 0;
[L2728]              allowance_TokenERC20[this] := zeroRefRefintArr();
[L2729]              sum_allowance1[this] := 0;
[L2731]              __var_1 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2732]              totalSupply_TokenERC20[this] := nonlinearMul(initialSupply_s258, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][msgsender_MSG];
[L2734]              balanceOf_TokenERC20[this][msgsender_MSG] := totalSupply_TokenERC20[this];
[L2735]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][msgsender_MSG];
[L2736]              name_TokenERC20[this] := tokenName_s258;
[L2737]              symbol_TokenERC20[this] := tokenSymbol_s258;
[L2752]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s258, tokenName_s258, tokenSymbol_s258);
[L2753]  COND FALSE  !(revert)
[L3251]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L3252]  COND FALSE  !(revert)
[L3255]  CALL        call ERC20ext_ERC20ext_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L3219]              assume msgsender_MSG != null;
[L3220]              Balance[this] := 0;
[L3221]              frozenAccount_ERC20ext[this] := zeroRefboolArr();
[L3222]              lockedAccount_ERC20ext[this] := zeroRefintArr();
[L3223]              sum_lockedAccount3[this] := 0;
[L3224]              lockedAmount_ERC20ext[this] := zeroRefintArr();
[L3225]              sum_lockedAmount4[this] := 0;
[L3255]  RET         call ERC20ext_ERC20ext_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L3256]  COND FALSE  !(revert)
[L1391]  RET         call ERC20ext_ERC20ext__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L1392]              assume !revert && gas >= 0;
[L5095]  RET         call ERC20ext_ERC20ext(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L5096]              assume !revert && gas >= 0;
[L5099]  CALL        call CorralChoice_ERC20ext(this);
[L4881]              havoc msgsender_MSG;
[L4882]              havoc msgvalue_MSG;
[L4883]              havoc choice;
[L4884]              havoc __ret_0_owner;
[L4885]              havoc newOwner_s166;
[L4886]              havoc __ret_0_name;
[L4887]              havoc __ret_0_symbol;
[L4888]              havoc __ret_0_decimals;
[L4889]              havoc __ret_0_totalSupply;
[L4890]              havoc arg835_s0;
[L4891]              havoc __ret_0_balanceOf;
[L4892]              havoc arg836_s0;
[L4893]              havoc arg837_s0;
[L4894]              havoc __ret_0_allowance;
[L4895]              havoc initialSupply_s258;
[L4896]              havoc tokenName_s258;
[L4897]              havoc tokenSymbol_s258;
[L4898]              havoc _to_s365;
[L4899]              havoc _value_s365;
[L4900]              havoc success_s365;
[L4901]              havoc _from_s413;
[L4902]              havoc _to_s413;
[L4903]              havoc _value_s413;
[L4904]              havoc success_s413;
[L4905]              havoc _spender_s441;
[L4906]              havoc _value_s441;
[L4907]              havoc success_s441;
[L4908]              havoc _spender_s479;
[L4909]              havoc _value_s479;
[L4910]              havoc _extraData_s479;
[L4911]              havoc success_s479;
[L4912]              havoc _value_s527;
[L4913]              havoc success_s527;
[L4914]              havoc _from_s598;
[L4915]              havoc _value_s598;
[L4916]              havoc success_s598;
[L4917]              havoc arg838_s0;
[L4918]              havoc __ret_0_frozenAccount;
[L4919]              havoc arg839_s0;
[L4920]              havoc __ret_0_lockedAccount;
[L4921]              havoc arg840_s0;
[L4922]              havoc __ret_0_lockedAmount;
[L4923]              havoc initialSupply_s639;
[L4924]              havoc tokenName_s639;
[L4925]              havoc tokenSymbol_s639;
[L4926]              havoc target_s779;
[L4927]              havoc mintedAmount_s779;
[L4928]              havoc success_s779;
[L4929]              havoc target_s804;
[L4930]              havoc freeze_s804;
[L4931]              havoc success_s804;
[L4932]              havoc target_s832;
[L4933]              havoc time_s832;
[L4934]              havoc amount_s832;
[L4935]              havoc success_s832;
[L4936]              havoc tmpNow;
[L4937]              havoc gas;
[L4938]              assume gas > 4000000 && gas <= 8000000;
[L4939]              tmpNow := now;
[L4940]              havoc now;
[L4941]              assume now > tmpNow;
[L4942]              assume msgsender_MSG != null;
[L4943]              assume DType[msgsender_MSG] != SafeMath;
[L4944]              assume DType[msgsender_MSG] != owned;
[L4945]              assume DType[msgsender_MSG] != tokenRecipient;
[L4946]              assume DType[msgsender_MSG] != TokenERC20;
[L4947]              assume DType[msgsender_MSG] != ERC20ext;
[L4948]              Alloc[msgsender_MSG] := true;
[L4949]  COND FALSE  !(choice == 20)
[L4955]  COND FALSE  !(choice == 19)
[L4961]  COND FALSE  !(choice == 18)
[L4967]  COND FALSE  !(choice == 17)
[L4973]  COND FALSE  !(choice == 16)
[L4979]  COND FALSE  !(choice == 15)
[L4985]  COND FALSE  !(choice == 14)
[L4991]  COND FALSE  !(choice == 13)
[L4997]  COND TRUE   choice == 12
[L4998]              gas := gas - 21000;
[L4999]  COND TRUE   gas >= 0
[L5000]              assume _value_s365 >= 0 && _value_s365 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5001]              assume msgvalue_MSG == 0;
[L5002]  CALL        call success_s365 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s365, _value_s365);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s365 && _value_s365 <= balanceOf_TokenERC20[this][msgsender_MSG]) && _value_s365 >= 0) && _value_s365 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s365] >= 0) && balanceOf_TokenERC20[this][_to_s365] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][msgsender_MSG] >= 0) && balanceOf_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_TokenERC200 := true;
[L2]                 call_transfer_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L527]               havoc __exception;
[L528]               revert := false;
[L529]   COND TRUE   __exception
[L530]               __tmp__Balance := Balance;
[L531]               __tmp__DType := DType;
[L532]               __tmp__Alloc := Alloc;
[L533]               __tmp__balance_ADDR := balance_ADDR;
[L534]               __tmp__M_Ref_int := M_Ref_int;
[L535]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L536]               __tmp__alloc_allowance_TokenERC20_lvl0 := alloc_allowance_TokenERC20_lvl0;
[L537]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L538]               __tmp__sum_allowance1 := sum_allowance1;
[L539]               __tmp__M_Ref_bool := M_Ref_bool;
[L540]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L541]               __tmp__sum_lockedAccount3 := sum_lockedAccount3;
[L542]               __tmp__sum_lockedAmount4 := sum_lockedAmount4;
[L543]               __tmp__Length := Length;
[L544]               __tmp__now := now;
[L545]               __tmp__owner_owned := owner_owned;
[L546]               __tmp__name_TokenERC20 := name_TokenERC20;
[L547]               __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L548]               __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L549]               __tmp__totalSupply_TokenERC20 := totalSupply_TokenERC20;
[L550]               __tmp__balanceOf_TokenERC20 := balanceOf_TokenERC20;
[L551]               __tmp__allowance_TokenERC20 := allowance_TokenERC20;
[L552]               __tmp__frozenAccount_ERC20ext := frozenAccount_ERC20ext;
[L553]               __tmp__lockedAccount_ERC20ext := lockedAccount_ERC20ext;
[L554]               __tmp__lockedAmount_ERC20ext := lockedAmount_ERC20ext;
[L555]   CALL        call success_s365 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _to_s365, _value_s365);
[L2834]  COND TRUE   __tmp__DType[this] == ERC20ext
[L2835]  CALL        call _transfer~address~address~uint256_ERC20ext__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s365, _value_s365);
[L3266]  COND FALSE  !(!(__tmp__now > __tmp__lockedAccount_ERC20ext[this][_from_s739] || (__tmp__lockedAmount_ERC20ext[this][_from_s739] + _value_s739) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 < __tmp__balanceOf_TokenERC20[this][_from_s739]))
[L3270]              __var_14 := null;
[L3271]  COND FALSE  !(!(_to_s739 != null))
[L3275]  COND FALSE  !(!(__tmp__balanceOf_TokenERC20[this][_from_s739] >= _value_s739))
[L3279]  COND TRUE   !((__tmp__balanceOf_TokenERC20[this][_to_s739] + _value_s739) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= __tmp__balanceOf_TokenERC20[this][_to_s739])
[L3280]              revert := true;
[L2835]  RET         call _transfer~address~address~uint256_ERC20ext__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s365, _value_s365);
[L2836]  COND TRUE   revert
[L555]   RET         call success_s365 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _to_s365, _value_s365);
[L556]               assume revert || gas < 0;
[L5002]  RET         call success_s365 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s365, _value_s365);
[L5099]  RET         call CorralChoice_ERC20ext(this);

Loop:
[L5099]  CALL        call CorralChoice_ERC20ext(this);
[L4881]              havoc msgsender_MSG;
[L4882]              havoc msgvalue_MSG;
[L4883]              havoc choice;
[L4884]              havoc __ret_0_owner;
[L4885]              havoc newOwner_s166;
[L4886]              havoc __ret_0_name;
[L4887]              havoc __ret_0_symbol;
[L4888]              havoc __ret_0_decimals;
[L4889]              havoc __ret_0_totalSupply;
[L4890]              havoc arg835_s0;
[L4891]              havoc __ret_0_balanceOf;
[L4892]              havoc arg836_s0;
[L4893]              havoc arg837_s0;
[L4894]              havoc __ret_0_allowance;
[L4895]              havoc initialSupply_s258;
[L4896]              havoc tokenName_s258;
[L4897]              havoc tokenSymbol_s258;
[L4898]              havoc _to_s365;
[L4899]              havoc _value_s365;
[L4900]              havoc success_s365;
[L4901]              havoc _from_s413;
[L4902]              havoc _to_s413;
[L4903]              havoc _value_s413;
[L4904]              havoc success_s413;
[L4905]              havoc _spender_s441;
[L4906]              havoc _value_s441;
[L4907]              havoc success_s441;
[L4908]              havoc _spender_s479;
[L4909]              havoc _value_s479;
[L4910]              havoc _extraData_s479;
[L4911]              havoc success_s479;
[L4912]              havoc _value_s527;
[L4913]              havoc success_s527;
[L4914]              havoc _from_s598;
[L4915]              havoc _value_s598;
[L4916]              havoc success_s598;
[L4917]              havoc arg838_s0;
[L4918]              havoc __ret_0_frozenAccount;
[L4919]              havoc arg839_s0;
[L4920]              havoc __ret_0_lockedAccount;
[L4921]              havoc arg840_s0;
[L4922]              havoc __ret_0_lockedAmount;
[L4923]              havoc initialSupply_s639;
[L4924]              havoc tokenName_s639;
[L4925]              havoc tokenSymbol_s639;
[L4926]              havoc target_s779;
[L4927]              havoc mintedAmount_s779;
[L4928]              havoc success_s779;
[L4929]              havoc target_s804;
[L4930]              havoc freeze_s804;
[L4931]              havoc success_s804;
[L4932]              havoc target_s832;
[L4933]              havoc time_s832;
[L4934]              havoc amount_s832;
[L4935]              havoc success_s832;
[L4936]              havoc tmpNow;
[L4937]              havoc gas;
[L4938]              assume gas > 4000000 && gas <= 8000000;
[L4939]              tmpNow := now;
[L4940]              havoc now;
[L4941]              assume now > tmpNow;
[L4942]              assume msgsender_MSG != null;
[L4943]              assume DType[msgsender_MSG] != SafeMath;
[L4944]              assume DType[msgsender_MSG] != owned;
[L4945]              assume DType[msgsender_MSG] != tokenRecipient;
[L4946]              assume DType[msgsender_MSG] != TokenERC20;
[L4947]              assume DType[msgsender_MSG] != ERC20ext;
[L4948]              Alloc[msgsender_MSG] := true;
[L4949]  COND FALSE  !(choice == 20)
[L4955]  COND FALSE  !(choice == 19)
[L4961]  COND FALSE  !(choice == 18)
[L4967]  COND FALSE  !(choice == 17)
[L4973]  COND FALSE  !(choice == 16)
[L4979]  COND FALSE  !(choice == 15)
[L4985]  COND FALSE  !(choice == 14)
[L4991]  COND FALSE  !(choice == 13)
[L4997]  COND TRUE   choice == 12
[L4998]              gas := gas - 21000;
[L4999]  COND TRUE   gas >= 0
[L5000]              assume _value_s365 >= 0 && _value_s365 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5001]              assume msgvalue_MSG == 0;
[L5002]  CALL        call success_s365 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s365, _value_s365);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s365 && _value_s365 <= balanceOf_TokenERC20[this][msgsender_MSG]) && _value_s365 >= 0) && _value_s365 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s365] >= 0) && balanceOf_TokenERC20[this][_to_s365] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][msgsender_MSG] >= 0) && balanceOf_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_TokenERC200 := true;
[L2]                 call_transfer_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L527]               havoc __exception;
[L528]               revert := false;
[L529]   COND TRUE   __exception
[L530]               __tmp__Balance := Balance;
[L531]               __tmp__DType := DType;
[L532]               __tmp__Alloc := Alloc;
[L533]               __tmp__balance_ADDR := balance_ADDR;
[L534]               __tmp__M_Ref_int := M_Ref_int;
[L535]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L536]               __tmp__alloc_allowance_TokenERC20_lvl0 := alloc_allowance_TokenERC20_lvl0;
[L537]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L538]               __tmp__sum_allowance1 := sum_allowance1;
[L539]               __tmp__M_Ref_bool := M_Ref_bool;
[L540]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L541]               __tmp__sum_lockedAccount3 := sum_lockedAccount3;
[L542]               __tmp__sum_lockedAmount4 := sum_lockedAmount4;
[L543]               __tmp__Length := Length;
[L544]               __tmp__now := now;
[L545]               __tmp__owner_owned := owner_owned;
[L546]               __tmp__name_TokenERC20 := name_TokenERC20;
[L547]               __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L548]               __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L549]               __tmp__totalSupply_TokenERC20 := totalSupply_TokenERC20;
[L550]               __tmp__balanceOf_TokenERC20 := balanceOf_TokenERC20;
[L551]               __tmp__allowance_TokenERC20 := allowance_TokenERC20;
[L552]               __tmp__frozenAccount_ERC20ext := frozenAccount_ERC20ext;
[L553]               __tmp__lockedAccount_ERC20ext := lockedAccount_ERC20ext;
[L554]               __tmp__lockedAmount_ERC20ext := lockedAmount_ERC20ext;
[L555]   CALL        call success_s365 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _to_s365, _value_s365);
[L2834]  COND TRUE   __tmp__DType[this] == ERC20ext
[L2835]  CALL        call _transfer~address~address~uint256_ERC20ext__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s365, _value_s365);
[L3266]  COND FALSE  !(!(__tmp__now > __tmp__lockedAccount_ERC20ext[this][_from_s739] || (__tmp__lockedAmount_ERC20ext[this][_from_s739] + _value_s739) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 < __tmp__balanceOf_TokenERC20[this][_from_s739]))
[L3270]              __var_14 := null;
[L3271]  COND FALSE  !(!(_to_s739 != null))
[L3275]  COND FALSE  !(!(__tmp__balanceOf_TokenERC20[this][_from_s739] >= _value_s739))
[L3279]  COND TRUE   !((__tmp__balanceOf_TokenERC20[this][_to_s739] + _value_s739) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= __tmp__balanceOf_TokenERC20[this][_to_s739])
[L3280]              revert := true;
[L2835]  RET         call _transfer~address~address~uint256_ERC20ext__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s365, _value_s365);
[L2836]  COND TRUE   revert
[L555]   RET         call success_s365 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _to_s365, _value_s365);
[L556]               assume revert || gas < 0;
[L5002]  RET         call success_s365 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s365, _value_s365);
[L5099]  RET         call CorralChoice_ERC20ext(this);

[2020-11-25 15:06:51,212 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 15:06:51,212 INFO  L82        PathProgramCache]: Analyzing trace with hash -462430124, now seen corresponding path program 1 times
[2020-11-25 15:06:51,212 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 15:06:51,233 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 15:06:51,249 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 15:06:51,297 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 15:06:51,297 INFO  L82        PathProgramCache]: Analyzing trace with hash 771262113, now seen corresponding path program 1 times
[2020-11-25 15:06:51,298 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 15:06:51,304 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 15:06:51,309 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 15:06:51,321 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 15:06:51,321 INFO  L82        PathProgramCache]: Analyzing trace with hash 1828925684, now seen corresponding path program 1 times
[2020-11-25 15:06:51,322 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 15:06:51,338 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 15:06:51,358 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 163 to 317
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #5: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
[2020-11-25 15:06:51,790 WARN  L188               SmtUtils]: Spent 192.00 ms on a formula simplification. DAG size of input: 170 DAG size of output: 161
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 883 to 1759
Garbage collection #6: 1759 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 1759 to 3517
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 787 to 1571
Garbage collection #6: 1571 nodes / 0 free / 0.001s / 0.003s total
Resizing node table from 1571 to 3137
Garbage collection #7: 3137 nodes / 0 free / 0.002s / 0.005s total
Resizing node table from 3137 to 6271
Garbage collection #8: 6271 nodes / 0 free / 0.002s / 0.007s total
Resizing node table from 6271 to 12541
[2020-11-25 15:06:52,063 WARN  L188               SmtUtils]: Spent 228.00 ms on a formula simplification. DAG size of input: 135 DAG size of output: 123
[2020-11-25 15:06:52,286 WARN  L188               SmtUtils]: Spent 221.00 ms on a formula simplification that was a NOOP. DAG size: 293
Garbage collection #1: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #2: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #3: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #4: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #5: 1759 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 1759 to 3517
Garbage collection #6: 3517 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 3517 to 7027
Garbage collection #7: 7027 nodes / 0 free / 0.002s / 0.004s total
Resizing node table from 7027 to 14051
[2020-11-25 15:06:53,135 WARN  L188               SmtUtils]: Spent 827.00 ms on a formula simplification. DAG size of input: 237 DAG size of output: 237
[2020-11-25 15:06:54,041 WARN  L188               SmtUtils]: Spent 902.00 ms on a formula simplification. DAG size of input: 304 DAG size of output: 274
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #7: 6037 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6037 to 12073
Garbage collection #8: 12073 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 12073 to 24137
Garbage collection #1: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #2: 113 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 883 to 1759
Garbage collection #6: 1759 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1759 to 3517
Garbage collection #7: 3517 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 3517 to 7027
Garbage collection #8: 7027 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 7027 to 14051
[2020-11-25 15:06:54,304 WARN  L188               SmtUtils]: Spent 237.00 ms on a formula simplification. DAG size of input: 167 DAG size of output: 159
[2020-11-25 15:06:54,596 WARN  L188               SmtUtils]: Spent 289.00 ms on a formula simplification that was a NOOP. DAG size: 362
Garbage collection #1: 149 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 149 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4591 to 9181
Garbage collection #7: 9181 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9181 to 18353
[2020-11-25 15:06:55,316 WARN  L188               SmtUtils]: Spent 708.00 ms on a formula simplification. DAG size of input: 294 DAG size of output: 293
[2020-11-25 15:06:55,682 WARN  L188               SmtUtils]: Spent 364.00 ms on a formula simplification that was a NOOP. DAG size: 293
Garbage collection #1: 109 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 109 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
Garbage collection #7: 6661 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6661 to 13313
Garbage collection #8: 13313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13313 to 26597
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #7: 4027 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4027 to 8053
[2020-11-25 15:06:56,007 WARN  L188               SmtUtils]: Spent 305.00 ms on a formula simplification. DAG size of input: 170 DAG size of output: 169
[2020-11-25 15:06:56,020 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #5: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #1: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #2: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #3: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #4: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #5: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
[2020-11-25 15:06:56,556 WARN  L188               SmtUtils]: Spent 109.00 ms on a formula simplification that was a NOOP. DAG size: 300
Garbage collection #1: 109 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 109 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #5: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
[2020-11-25 15:06:56,957 WARN  L188               SmtUtils]: Spent 182.00 ms on a formula simplification. DAG size of input: 170 DAG size of output: 162
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #6: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #6: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #7: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
Garbage collection #8: 6271 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6271 to 12541
[2020-11-25 15:06:57,115 WARN  L188               SmtUtils]: Spent 149.00 ms on a formula simplification. DAG size of input: 136 DAG size of output: 123
[2020-11-25 15:06:57,300 WARN  L188               SmtUtils]: Spent 184.00 ms on a formula simplification that was a NOOP. DAG size: 293
Garbage collection #1: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #2: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #3: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #4: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #5: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #6: 3517 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3517 to 7027
[2020-11-25 15:06:58,090 WARN  L188               SmtUtils]: Spent 780.00 ms on a formula simplification. DAG size of input: 238 DAG size of output: 237
[2020-11-25 15:06:59,080 WARN  L188               SmtUtils]: Spent 987.00 ms on a formula simplification. DAG size of input: 303 DAG size of output: 274
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #7: 6037 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6037 to 12073
Garbage collection #8: 12073 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 12073 to 24137
Garbage collection #9: 24137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 24137 to 48271
Garbage collection #1: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #6: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #7: 3517 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3517 to 7027
Garbage collection #8: 7027 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7027 to 14051
[2020-11-25 15:06:59,328 WARN  L188               SmtUtils]: Spent 229.00 ms on a formula simplification. DAG size of input: 172 DAG size of output: 159
[2020-11-25 15:06:59,631 WARN  L188               SmtUtils]: Spent 302.00 ms on a formula simplification that was a NOOP. DAG size: 362
Garbage collection #1: 149 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 149 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 4591 to 9181
Garbage collection #7: 9181 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 9181 to 18353
[2020-11-25 15:07:00,399 WARN  L188               SmtUtils]: Spent 759.00 ms on a formula simplification. DAG size of input: 294 DAG size of output: 294
[2020-11-25 15:07:01,320 WARN  L188               SmtUtils]: Spent 918.00 ms on a formula simplification. DAG size of input: 536 DAG size of output: 517
Garbage collection #1: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #2: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #3: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #4: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #5: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
Garbage collection #6: 6661 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6661 to 13313
Garbage collection #7: 13313 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 13313 to 26597
Garbage collection #1: 71 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 71 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
[2020-11-25 15:07:01,605 WARN  L188               SmtUtils]: Spent 166.00 ms on a formula simplification that was a NOOP. DAG size: 333
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
[2020-11-25 15:07:02,037 WARN  L188               SmtUtils]: Spent 352.00 ms on a formula simplification. DAG size of input: 335 DAG size of output: 334
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #1: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #2: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #3: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #4: 883 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 883 to 1759
Garbage collection #5: 1759 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1759 to 3517
Garbage collection #6: 3517 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 3517 to 7027
[2020-11-25 15:07:02,213 WARN  L188               SmtUtils]: Spent 172.00 ms on a formula simplification that was a NOOP. DAG size: 330
[2020-11-25 15:07:02,225 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 15:07:02,234 INFO  L216          LassoAnalysis]: Preferences:
[2020-11-25 15:07:02,234 INFO  L124   ssoRankerPreferences]: Compute integeral hull: false
[2020-11-25 15:07:02,234 INFO  L125   ssoRankerPreferences]: Enable LassoPartitioneer: true
[2020-11-25 15:07:02,234 INFO  L126   ssoRankerPreferences]: Term annotations enabled: false
[2020-11-25 15:07:02,234 INFO  L127   ssoRankerPreferences]: Use exernal solver: true
[2020-11-25 15:07:02,234 INFO  L128   ssoRankerPreferences]: SMT solver command: z3 SMTLIB2_COMPLIANT=true -memory:1024 -smt2 -in -t:12000
[2020-11-25 15:07:02,234 INFO  L129   ssoRankerPreferences]: Dump SMT script to file: false
[2020-11-25 15:07:02,235 INFO  L130   ssoRankerPreferences]: Path of dumped script: 
[2020-11-25 15:07:02,235 INFO  L131   ssoRankerPreferences]: Filename of dumped script: ERC20ext_0xceca64909127918c80c7c76b503de7306d63eca7_transfer-self.bpl_BEv2_Iteration8_Lasso
[2020-11-25 15:07:02,235 INFO  L132   ssoRankerPreferences]: MapElimAlgo: Frank
[2020-11-25 15:07:02,235 INFO  L282          LassoAnalysis]: Starting lasso preprocessing...
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #1: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
Garbage collection #7: 4357 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4357 to 8713
[2020-11-25 15:07:02,450 FATAL L292        ToolchainWalker]: The Plugin de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer has thrown an exception:
java.lang.UnsupportedOperationException: function symbols not yet supported
	at de.uni_freiburg.informatik.ultimate.lassoranker.variables.LassoPartitioneer.addInOuAuxVar(LassoPartitioneer.java:238)
	at de.uni_freiburg.informatik.ultimate.lassoranker.variables.LassoPartitioneer.constructTransFormulaLR(LassoPartitioneer.java:210)
	at de.uni_freiburg.informatik.ultimate.lassoranker.variables.LassoPartitioneer.doPartition(LassoPartitioneer.java:165)
	at de.uni_freiburg.informatik.ultimate.lassoranker.variables.LassoPartitioneer.<init>(LassoPartitioneer.java:95)
	at de.uni_freiburg.informatik.ultimate.lassoranker.preprocessors.LassoPartitioneerPreprocessor.process(LassoPartitioneerPreprocessor.java:65)
	at de.uni_freiburg.informatik.ultimate.lassoranker.variables.LassoBuilder.applyPreprocessor(LassoBuilder.java:154)
	at de.uni_freiburg.informatik.ultimate.lassoranker.variables.LassoBuilder.preprocess(LassoBuilder.java:262)
	at de.uni_freiburg.informatik.ultimate.lassoranker.LassoAnalysis.preprocess(LassoAnalysis.java:286)
	at de.uni_freiburg.informatik.ultimate.lassoranker.LassoAnalysis.<init>(LassoAnalysis.java:235)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck.synthesize(LassoCheck.java:788)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck.access$18(LassoCheck.java:715)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck$LassoCheckResult.checkLassoTermination(LassoCheck.java:1163)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck$LassoCheckResult.<init>(LassoCheck.java:1062)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck.<init>(LassoCheck.java:276)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiCegarLoop.iterate(BuchiCegarLoop.java:479)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver.doTerminationAnalysis(BuchiAutomizerObserver.java:153)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver.finish(BuchiAutomizerObserver.java:413)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.PluginConnector.runObserver(PluginConnector.java:168)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.PluginConnector.runTool(PluginConnector.java:151)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.PluginConnector.run(PluginConnector.java:128)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.executePluginConnector(ToolchainWalker.java:232)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.processPlugin(ToolchainWalker.java:226)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.walkUnprotected(ToolchainWalker.java:142)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.walk(ToolchainWalker.java:104)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainManager$Toolchain.processToolchain(ToolchainManager.java:317)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.toolchain.DefaultToolchainJob.run(DefaultToolchainJob.java:145)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)
[2020-11-25 15:07:02,451 INFO  L168              Benchmark]: Toolchain (without parser) took 20339.10 ms. Allocated memory was 1.0 GB in the beginning and 2.3 GB in the end (delta: 1.3 GB). Free memory was 935.2 MB in the beginning and 1.0 GB in the end (delta: -65.0 MB). Peak memory consumption was 1.3 GB. Max. memory is 15.3 GB.
[2020-11-25 15:07:02,451 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 15:07:02,451 INFO  L168              Benchmark]: Boogie Preprocessor took 100.32 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 924.4 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 15:07:02,452 INFO  L168              Benchmark]: UtopiaSpecLang took 60.74 ms. Allocated memory is still 1.0 GB. Free memory was 924.4 MB in the beginning and 913.7 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 15:07:02,452 INFO  L168              Benchmark]: Boogie Printer took 16.38 ms. Allocated memory is still 1.0 GB. Free memory is still 913.7 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 15:07:02,452 INFO  L168              Benchmark]: RCFGBuilder took 793.75 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 779.3 MB in the end (delta: 134.4 MB). Peak memory consumption was 134.4 MB. Max. memory is 15.3 GB.
[2020-11-25 15:07:02,453 INFO  L168              Benchmark]: UtopiaLTL2Aut took 37.93 ms. Allocated memory is still 1.0 GB. Free memory was 779.3 MB in the beginning and 775.7 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
[2020-11-25 15:07:02,453 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1410.26 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 170.9 MB). Free memory was 775.7 MB in the beginning and 855.2 MB in the end (delta: -79.5 MB). Peak memory consumption was 149.1 MB. Max. memory is 15.3 GB.
[2020-11-25 15:07:02,453 INFO  L168              Benchmark]: BlockEncodingV2 took 152.72 ms. Allocated memory is still 1.2 GB. Free memory was 850.8 MB in the beginning and 782.4 MB in the end (delta: 68.5 MB). Peak memory consumption was 68.5 MB. Max. memory is 15.3 GB.
[2020-11-25 15:07:02,454 INFO  L168              Benchmark]: BuchiAutomizer took 17764.10 ms. Allocated memory was 1.2 GB in the beginning and 2.3 GB in the end (delta: 1.1 GB). Free memory was 782.4 MB in the beginning and 1.0 GB in the end (delta: -217.8 MB). Peak memory consumption was 952.6 MB. Max. memory is 15.3 GB.
[2020-11-25 15:07:02,456 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    4504 locations, 7824 edges
  - StatisticsResult: Encoded RCFG
    4454 locations, 7694 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 100.32 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 924.4 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 60.74 ms. Allocated memory is still 1.0 GB. Free memory was 924.4 MB in the beginning and 913.7 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 16.38 ms. Allocated memory is still 1.0 GB. Free memory is still 913.7 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * RCFGBuilder took 793.75 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 779.3 MB in the end (delta: 134.4 MB). Peak memory consumption was 134.4 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 37.93 ms. Allocated memory is still 1.0 GB. Free memory was 779.3 MB in the beginning and 775.7 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1410.26 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 170.9 MB). Free memory was 775.7 MB in the beginning and 855.2 MB in the end (delta: -79.5 MB). Peak memory consumption was 149.1 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 152.72 ms. Allocated memory is still 1.2 GB. Free memory was 850.8 MB in the beginning and 782.4 MB in the end (delta: 68.5 MB). Peak memory consumption was 68.5 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 17764.10 ms. Allocated memory was 1.2 GB in the beginning and 2.3 GB in the end (delta: 1.1 GB). Free memory was 782.4 MB in the beginning and 1.0 GB in the end (delta: -217.8 MB). Peak memory consumption was 952.6 MB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    1881 locations, 2418 edges
  - StatisticsResult: BuchiProgram size
    4504 locations, 7824 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer:
  - ExceptionOrErrorResult: UnsupportedOperationException: function symbols not yet supported
    de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer: UnsupportedOperationException: function symbols not yet supported: de.uni_freiburg.informatik.ultimate.lassoranker.variables.LassoPartitioneer.addInOuAuxVar(LassoPartitioneer.java:238)
RESULT: Ultimate could not prove your program: Toolchain returned no result.
Received shutdown request...
