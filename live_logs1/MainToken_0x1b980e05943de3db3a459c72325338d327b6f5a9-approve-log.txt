This is Ultimate 0.1.24-f1553f5-m
[2020-11-24 21:17:31,006 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-24 21:17:31,008 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-24 21:17:31,017 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-24 21:17:31,018 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-24 21:17:31,018 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-24 21:17:31,019 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-24 21:17:31,021 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-24 21:17:31,022 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-24 21:17:31,023 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-24 21:17:31,023 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-24 21:17:31,023 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-24 21:17:31,024 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-24 21:17:31,025 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-24 21:17:31,025 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-24 21:17:31,026 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-24 21:17:31,026 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-24 21:17:31,027 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-24 21:17:31,029 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-24 21:17:31,030 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-24 21:17:31,031 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-24 21:17:31,031 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-24 21:17:31,033 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-24 21:17:31,033 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-24 21:17:31,033 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-24 21:17:31,034 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-24 21:17:31,034 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-24 21:17:31,035 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-24 21:17:31,035 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-24 21:17:31,035 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-24 21:17:31,035 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-24 21:17:31,036 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-24 21:17:31,036 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-24 21:17:31,037 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-24 21:17:31,037 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-24 21:17:31,038 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-24 21:17:31,038 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-24 21:17:31,038 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-24 21:17:31,038 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-24 21:17:31,039 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-24 21:17:31,039 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-24 21:17:31,040 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-24 21:17:31,047 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-24 21:17:31,047 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-24 21:17:31,048 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-24 21:17:31,048 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-24 21:17:31,048 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-24 21:17:31,048 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-24 21:17:31,048 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-24 21:17:31,048 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-24 21:17:31,048 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-24 21:17:31,049 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-24 21:17:31,049 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-24 21:17:31,049 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-24 21:17:31,049 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-24 21:17:31,049 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-24 21:17:31,049 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-24 21:17:31,049 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-24 21:17:31,049 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-24 21:17:31,049 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-24 21:17:31,049 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-24 21:17:31,050 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-24 21:17:31,050 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-24 21:17:31,050 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-24 21:17:31,050 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-24 21:17:31,050 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-24 21:17:31,050 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-24 21:17:31,050 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-24 21:17:31,072 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-24 21:17:31,084 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-24 21:17:31,087 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-24 21:17:31,088 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-24 21:17:31,088 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-24 21:17:31,089 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/MainToken_0x1b980e05943de3db3a459c72325338d327b6f5a9_approve.bpl
[2020-11-24 21:17:31,089 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/MainToken_0x1b980e05943de3db3a459c72325338d327b6f5a9_approve.bpl'
[2020-11-24 21:17:31,225 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-24 21:17:31,226 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-24 21:17:31,227 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-24 21:17:31,227 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-24 21:17:31,227 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-24 21:17:31,243 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "MainToken_0x1b980e05943de3db3a459c72325338d327b6f5a9_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:17:31" (1/1) ...
[2020-11-24 21:17:31,244 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "MainToken_0x1b980e05943de3db3a459c72325338d327b6f5a9_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:17:31" (1/1) ...
[2020-11-24 21:17:31,293 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "MainToken_0x1b980e05943de3db3a459c72325338d327b6f5a9_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:17:31" (1/1) ...
[2020-11-24 21:17:31,295 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "MainToken_0x1b980e05943de3db3a459c72325338d327b6f5a9_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:17:31" (1/1) ...
[2020-11-24 21:17:31,342 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "MainToken_0x1b980e05943de3db3a459c72325338d327b6f5a9_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:17:31" (1/1) ...
[2020-11-24 21:17:31,373 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "MainToken_0x1b980e05943de3db3a459c72325338d327b6f5a9_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:17:31" (1/1) ...
[2020-11-24 21:17:31,395 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "MainToken_0x1b980e05943de3db3a459c72325338d327b6f5a9_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:17:31" (1/1) ...
[2020-11-24 21:17:31,420 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-24 21:17:31,421 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-24 21:17:31,421 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-24 21:17:31,423 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-24 21:17:31,427 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "MainToken_0x1b980e05943de3db3a459c72325338d327b6f5a9_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:17:31" (1/1) ...
[2020-11-24 21:17:31,458 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(StandardToken.approve(spender, value), p1 != msg.sender || p2 != spender) ==> <>(finished(StandardToken.approve(spender, value), return == true && allowed_StandardToken[this][msg.sender][spender] == value &&  totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && balances_BasicToken[this] == old(balances_BasicToken[this]) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2]) && initialized_MainToken[this] == old(initialized_MainToken[this]) && paused_Pausable[this] == old(paused_Pausable[this]) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]) && chains_FreezableToken[this] == old(chains_FreezableToken[this]) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this]) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]))))
[2020-11-24 21:17:31,464 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(StandardToken.approve(spender, value), p1 != msg.sender || p2 != spender) ==> <>(finished(StandardToken.approve(spender, value), return == true && allowed_StandardToken[this][msg.sender][spender] == value &&  totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && balances_BasicToken[this] == old(balances_BasicToken[this]) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2]) && initialized_MainToken[this] == old(initialized_MainToken[this]) && paused_Pausable[this] == old(paused_Pausable[this]) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]) && chains_FreezableToken[this] == old(chains_FreezableToken[this]) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this]) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]))))
[2020-11-24 21:17:31,471 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(StandardToken.approve(spender, value), p1 != msg.sender || p2 != spender) ==> <>(finished(StandardToken.approve(spender, value), return == true && allowed_StandardToken[this][msg.sender][spender] == value &&  totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && balances_BasicToken[this] == old(balances_BasicToken[this]) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2]) && initialized_MainToken[this] == old(initialized_MainToken[this]) && paused_Pausable[this] == old(paused_Pausable[this]) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]) && chains_FreezableToken[this] == old(chains_FreezableToken[this]) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this]) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]))))
[2020-11-24 21:17:31,477 INFO  L636   opiaSpecLangObserver]: Parsed ( p1!=msg.sender || p2!=_spender_s379 ) to BinaryExpression[LOGICOR,BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]],BinaryExpression[COMPNEQ,IdentifierExpression[p2,GLOBAL],IdentifierExpression[_spender_s379,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]]
[2020-11-24 21:17:31,480 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( ( __ret_0_==true && allowed_StandardToken[this][msg.sender][_spender_s379]==_value_s379 ) && totalSupply__BasicToken[this]==( old(totalSupply__BasicToken[this]) ) ) && balances_BasicToken[this]==( old(balances_BasicToken[this]) ) ) && allowed_StandardToken[this][p1][p2]==( old(allowed_StandardToken[this][p1][p2]) ) ) && initialized_MainToken[this]==( old(initialized_MainToken[this]) ) ) && paused_Pausable[this]==( old(paused_Pausable[this]) ) ) && mintingFinished_MintableToken[this]==( old(mintingFinished_MintableToken[this]) ) ) && owner_Ownable[this]==( old(owner_Ownable[this]) ) ) && chains_FreezableToken[this]==( old(chains_FreezableToken[this]) ) ) && freezings_FreezableToken[this]==( old(freezings_FreezableToken[this]) ) ) && freezingBalance_FreezableToken[this]==( old(freezingBalance_FreezableToken[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[__ret_0_,<IMPLEMENTATION_OUTPARAM,approve~address~uint256_StandardToken>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]],[IdentifierExpression[_spender_s379,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]],IdentifierExpression[_value_s379,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[totalSupply__BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[totalSupply__BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]],[IdentifierExpression[p1,GLOBAL]]],[IdentifierExpression[p2,GLOBAL]]],UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]],[IdentifierExpression[p1,GLOBAL]]],[IdentifierExpression[p2,GLOBAL]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[initialized_MainToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[initialized_MainToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[paused_Pausable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[paused_Pausable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[mintingFinished_MintableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[mintingFinished_MintableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[owner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[owner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[chains_FreezableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[chains_FreezableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[freezings_FreezableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[freezings_FreezableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[freezingBalance_FreezableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[freezingBalance_FreezableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]]]]]
[2020-11-24 21:17:31,490 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(StandardToken.approve(spender, value), p1 != msg.sender || p2 != spender) ==> <>(finished(StandardToken.approve(spender, value), return == true && allowed_StandardToken[this][msg.sender][spender] == value &&  totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && balances_BasicToken[this] == old(balances_BasicToken[this]) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2]) && initialized_MainToken[this] == old(initialized_MainToken[this]) && paused_Pausable[this] == old(paused_Pausable[this]) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]) && chains_FreezableToken[this] == old(chains_FreezableToken[this]) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this]) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]))))
[2020-11-24 21:17:31,490 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_approve_StandardToken0) ==> ( <>AP(success_approve_StandardToken0) ) ) )
Executed UtopiaSpecLang
[2020-11-24 21:17:31,518 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 09:17:31 PropertyContainer
[2020-11-24 21:17:31,519 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-24 21:17:31,519 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-24 21:17:31,519 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-24 21:17:31,519 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-24 21:17:31,520 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "MainToken_0x1b980e05943de3db3a459c72325338d327b6f5a9_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:17:31" (1/2) ...
[2020-11-24 21:17:31,520 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-24 21:17:31,521 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-24 21:17:31,553 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 09:17:31" (2/2) ...
[2020-11-24 21:17:31,553 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-24 21:17:31,553 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-24 21:17:31,553 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-24 21:17:31,553 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-24 21:17:31,554 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "MainToken_0x1b980e05943de3db3a459c72325338d327b6f5a9_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:17:31" (1/2) ...
[2020-11-24 21:17:31,612 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-24 21:17:31,612 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic_NoBaseCtor__success
[2020-11-24 21:17:31,612 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic
[2020-11-24 21:17:31,612 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic
[2020-11-24 21:17:31,613 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20Basic
[2020-11-24 21:17:31,613 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20Basic
[2020-11-24 21:17:31,613 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Basic
[2020-11-24 21:17:31,613 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-24 21:17:31,613 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-24 21:17:31,613 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-24 21:17:31,613 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-24 21:17:31,613 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-24 21:17:31,613 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-24 21:17:31,614 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-24 21:17:31,614 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken_NoBaseCtor__success
[2020-11-24 21:17:31,614 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken
[2020-11-24 21:17:31,614 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken
[2020-11-24 21:17:31,614 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken
[2020-11-24 21:17:31,614 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken
[2020-11-24 21:17:31,615 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken
[2020-11-24 21:17:31,615 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken
[2020-11-24 21:17:31,615 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken
[2020-11-24 21:17:31,615 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken
[2020-11-24 21:17:31,615 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-24 21:17:31,615 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-24 21:17:31,615 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-24 21:17:31,615 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-24 21:17:31,615 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-24 21:17:31,615 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-24 21:17:31,616 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken_NoBaseCtor__success
[2020-11-24 21:17:31,616 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken
[2020-11-24 21:17:31,616 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken
[2020-11-24 21:17:31,616 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken
[2020-11-24 21:17:31,616 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken
[2020-11-24 21:17:31,616 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken
[2020-11-24 21:17:31,616 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken
[2020-11-24 21:17:31,616 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken
[2020-11-24 21:17:31,616 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken
[2020-11-24 21:17:31,616 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken
[2020-11-24 21:17:31,617 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken
[2020-11-24 21:17:31,617 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken
[2020-11-24 21:17:31,617 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken
[2020-11-24 21:17:31,617 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-24 21:17:31,617 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable
[2020-11-24 21:17:31,617 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable
[2020-11-24 21:17:31,617 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable
[2020-11-24 21:17:31,617 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable
[2020-11-24 21:17:31,617 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable
[2020-11-24 21:17:31,617 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable
[2020-11-24 21:17:31,618 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferOwnership~address_Ownable__success
[2020-11-24 21:17:31,618 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable
[2020-11-24 21:17:31,618 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable
[2020-11-24 21:17:31,618 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken_NoBaseCtor__success
[2020-11-24 21:17:31,618 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken
[2020-11-24 21:17:31,618 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken
[2020-11-24 21:17:31,618 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_MintableToken
[2020-11-24 21:17:31,618 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_MintableToken
[2020-11-24 21:17:31,618 INFO  L130     BoogieDeclarations]: Found specification of procedure finishMinting_MintableToken
[2020-11-24 21:17:31,618 INFO  L138     BoogieDeclarations]: Found implementation of procedure finishMinting_MintableToken
[2020-11-24 21:17:31,618 INFO  L130     BoogieDeclarations]: Found specification of procedure mintingFinished_MintableToken
[2020-11-24 21:17:31,619 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintingFinished_MintableToken
[2020-11-24 21:17:31,619 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableToken_FreezableToken_NoBaseCtor__success
[2020-11-24 21:17:31,619 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableToken_FreezableToken
[2020-11-24 21:17:31,619 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableToken_FreezableToken
[2020-11-24 21:17:31,619 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_FreezableToken
[2020-11-24 21:17:31,619 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_FreezableToken
[2020-11-24 21:17:31,619 INFO  L130     BoogieDeclarations]: Found specification of procedure actualBalanceOf~address_FreezableToken
[2020-11-24 21:17:31,619 INFO  L138     BoogieDeclarations]: Found implementation of procedure actualBalanceOf~address_FreezableToken
[2020-11-24 21:17:31,619 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingBalanceOf~address_FreezableToken
[2020-11-24 21:17:31,619 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingBalanceOf~address_FreezableToken
[2020-11-24 21:17:31,620 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingCount~address_FreezableToken
[2020-11-24 21:17:31,620 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingCount~address_FreezableToken
[2020-11-24 21:17:31,620 INFO  L130     BoogieDeclarations]: Found specification of procedure getFreezing~address~uint256_FreezableToken
[2020-11-24 21:17:31,620 INFO  L138     BoogieDeclarations]: Found implementation of procedure getFreezing~address~uint256_FreezableToken
[2020-11-24 21:17:31,620 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeTo~address~uint256~uint64_FreezableToken
[2020-11-24 21:17:31,620 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeTo~address~uint256~uint64_FreezableToken
[2020-11-24 21:17:31,620 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseOnce_FreezableToken
[2020-11-24 21:17:31,620 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseOnce_FreezableToken
[2020-11-24 21:17:31,620 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseAll_FreezableToken
[2020-11-24 21:17:31,620 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseAll_FreezableToken
[2020-11-24 21:17:31,621 INFO  L130     BoogieDeclarations]: Found specification of procedure toKey~address~uint256_FreezableToken__success
[2020-11-24 21:17:31,621 INFO  L130     BoogieDeclarations]: Found specification of procedure freeze~address~uint64_FreezableToken__success
[2020-11-24 21:17:31,621 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken_NoBaseCtor__success
[2020-11-24 21:17:31,621 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken
[2020-11-24 21:17:31,621 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken
[2020-11-24 21:17:31,621 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_BurnableToken
[2020-11-24 21:17:31,621 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_BurnableToken
[2020-11-24 21:17:31,621 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_BurnableToken__success
[2020-11-24 21:17:31,621 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-24 21:17:31,622 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable
[2020-11-24 21:17:31,622 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable
[2020-11-24 21:17:31,622 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable
[2020-11-24 21:17:31,622 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable
[2020-11-24 21:17:31,622 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable
[2020-11-24 21:17:31,622 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable
[2020-11-24 21:17:31,622 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable
[2020-11-24 21:17:31,622 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable
[2020-11-24 21:17:31,622 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success
[2020-11-24 21:17:31,622 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableMintableToken_FreezableMintableToken
[2020-11-24 21:17:31,622 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableMintableToken_FreezableMintableToken
[2020-11-24 21:17:31,623 INFO  L130     BoogieDeclarations]: Found specification of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken
[2020-11-24 21:17:31,623 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken
[2020-11-24 21:17:31,623 INFO  L130     BoogieDeclarations]: Found specification of procedure Consts_Consts_NoBaseCtor__success
[2020-11-24 21:17:31,623 INFO  L130     BoogieDeclarations]: Found specification of procedure Consts_Consts
[2020-11-24 21:17:31,623 INFO  L138     BoogieDeclarations]: Found implementation of procedure Consts_Consts
[2020-11-24 21:17:31,623 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_Consts
[2020-11-24 21:17:31,623 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_Consts
[2020-11-24 21:17:31,623 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_UINT8_Consts
[2020-11-24 21:17:31,623 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_UINT8_Consts
[2020-11-24 21:17:31,624 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMAL_MULTIPLIER_Consts
[2020-11-24 21:17:31,624 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMAL_MULTIPLIER_Consts
[2020-11-24 21:17:31,624 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_NAME_Consts
[2020-11-24 21:17:31,624 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_NAME_Consts
[2020-11-24 21:17:31,624 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_SYMBOL_Consts
[2020-11-24 21:17:31,624 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_SYMBOL_Consts
[2020-11-24 21:17:31,624 INFO  L130     BoogieDeclarations]: Found specification of procedure PAUSED_Consts
[2020-11-24 21:17:31,624 INFO  L138     BoogieDeclarations]: Found implementation of procedure PAUSED_Consts
[2020-11-24 21:17:31,624 INFO  L130     BoogieDeclarations]: Found specification of procedure TARGET_USER_Consts
[2020-11-24 21:17:31,624 INFO  L138     BoogieDeclarations]: Found implementation of procedure TARGET_USER_Consts
[2020-11-24 21:17:31,625 INFO  L130     BoogieDeclarations]: Found specification of procedure CONTINUE_MINTING_Consts
[2020-11-24 21:17:31,625 INFO  L138     BoogieDeclarations]: Found implementation of procedure CONTINUE_MINTING_Consts
[2020-11-24 21:17:31,625 INFO  L130     BoogieDeclarations]: Found specification of procedure MainToken_MainToken_NoBaseCtor__success
[2020-11-24 21:17:31,625 INFO  L130     BoogieDeclarations]: Found specification of procedure MainToken_MainToken
[2020-11-24 21:17:31,625 INFO  L138     BoogieDeclarations]: Found implementation of procedure MainToken_MainToken
[2020-11-24 21:17:31,625 INFO  L130     BoogieDeclarations]: Found specification of procedure name_MainToken
[2020-11-24 21:17:31,625 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_MainToken
[2020-11-24 21:17:31,625 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_MainToken
[2020-11-24 21:17:31,625 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_MainToken
[2020-11-24 21:17:31,625 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_MainToken
[2020-11-24 21:17:31,626 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_MainToken
[2020-11-24 21:17:31,626 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_MainToken
[2020-11-24 21:17:31,626 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_MainToken
[2020-11-24 21:17:31,626 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_MainToken
[2020-11-24 21:17:31,626 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_MainToken
[2020-11-24 21:17:31,626 INFO  L130     BoogieDeclarations]: Found specification of procedure init_MainToken__success
[2020-11-24 21:17:31,626 INFO  L130     BoogieDeclarations]: Found specification of procedure initialized_MainToken
[2020-11-24 21:17:31,626 INFO  L138     BoogieDeclarations]: Found implementation of procedure initialized_MainToken
[2020-11-24 21:17:31,626 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-24 21:17:31,627 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-24 21:17:31,627 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-24 21:17:31,627 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-24 21:17:31,627 INFO  L130     BoogieDeclarations]: Found specification of procedure canMint_pre__success
[2020-11-24 21:17:31,627 INFO  L130     BoogieDeclarations]: Found specification of procedure hasMintPermission_pre__success
[2020-11-24 21:17:31,627 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__success
[2020-11-24 21:17:31,627 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__success
[2020-11-24 21:17:31,627 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Basic
[2020-11-24 21:17:31,627 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Basic
[2020-11-24 21:17:31,627 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-24 21:17:31,628 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-24 21:17:31,628 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_BasicToken
[2020-11-24 21:17:31,628 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_BasicToken
[2020-11-24 21:17:31,628 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-24 21:17:31,628 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-24 21:17:31,628 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_StandardToken
[2020-11-24 21:17:31,628 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_StandardToken
[2020-11-24 21:17:31,628 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Ownable
[2020-11-24 21:17:31,628 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Ownable
[2020-11-24 21:17:31,628 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_MintableToken
[2020-11-24 21:17:31,629 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_MintableToken
[2020-11-24 21:17:31,629 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_FreezableToken
[2020-11-24 21:17:31,629 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_FreezableToken
[2020-11-24 21:17:31,629 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_BurnableToken
[2020-11-24 21:17:31,629 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_BurnableToken
[2020-11-24 21:17:31,629 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Pausable
[2020-11-24 21:17:31,629 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Pausable
[2020-11-24 21:17:31,629 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_FreezableMintableToken
[2020-11-24 21:17:31,629 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_FreezableMintableToken
[2020-11-24 21:17:31,629 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Consts
[2020-11-24 21:17:31,629 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Consts
[2020-11-24 21:17:31,630 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_MainToken
[2020-11-24 21:17:31,630 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-24 21:17:31,630 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-24 21:17:31,630 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic_NoBaseCtor__fail
[2020-11-24 21:17:31,630 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic__success
[2020-11-24 21:17:31,630 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic__fail
[2020-11-24 21:17:31,630 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-24 21:17:31,630 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-24 21:17:31,630 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-24 21:17:31,630 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-24 21:17:31,630 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-24 21:17:31,631 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-24 21:17:31,631 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-24 21:17:31,631 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken_NoBaseCtor__fail
[2020-11-24 21:17:31,631 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken__success
[2020-11-24 21:17:31,631 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken__fail
[2020-11-24 21:17:31,631 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken__success
[2020-11-24 21:17:31,631 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken__fail
[2020-11-24 21:17:31,631 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken__success
[2020-11-24 21:17:31,631 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken__fail
[2020-11-24 21:17:31,631 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken__success
[2020-11-24 21:17:31,631 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken__fail
[2020-11-24 21:17:31,632 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-24 21:17:31,632 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-24 21:17:31,632 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-24 21:17:31,632 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken_NoBaseCtor__fail
[2020-11-24 21:17:31,632 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken__success
[2020-11-24 21:17:31,632 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken__fail
[2020-11-24 21:17:31,632 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken__success
[2020-11-24 21:17:31,632 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken__fail
[2020-11-24 21:17:31,632 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken__success
[2020-11-24 21:17:31,632 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken__fail
[2020-11-24 21:17:31,632 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken__success
[2020-11-24 21:17:31,632 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken__fail
[2020-11-24 21:17:31,633 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken__success
[2020-11-24 21:17:31,633 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken__fail
[2020-11-24 21:17:31,633 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken__success
[2020-11-24 21:17:31,633 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken__fail
[2020-11-24 21:17:31,633 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-24 21:17:31,633 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__success
[2020-11-24 21:17:31,633 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__fail
[2020-11-24 21:17:31,633 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable__success
[2020-11-24 21:17:31,633 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable__fail
[2020-11-24 21:17:31,633 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__success
[2020-11-24 21:17:31,633 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__fail
[2020-11-24 21:17:31,634 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferOwnership~address_Ownable__fail
[2020-11-24 21:17:31,634 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__success
[2020-11-24 21:17:31,634 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__fail
[2020-11-24 21:17:31,634 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken_NoBaseCtor__fail
[2020-11-24 21:17:31,634 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken__success
[2020-11-24 21:17:31,634 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken__fail
[2020-11-24 21:17:31,634 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_MintableToken__success
[2020-11-24 21:17:31,634 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_MintableToken__fail
[2020-11-24 21:17:31,634 INFO  L130     BoogieDeclarations]: Found specification of procedure finishMinting_MintableToken__success
[2020-11-24 21:17:31,634 INFO  L130     BoogieDeclarations]: Found specification of procedure finishMinting_MintableToken__fail
[2020-11-24 21:17:31,634 INFO  L130     BoogieDeclarations]: Found specification of procedure mintingFinished_MintableToken__success
[2020-11-24 21:17:31,634 INFO  L130     BoogieDeclarations]: Found specification of procedure mintingFinished_MintableToken__fail
[2020-11-24 21:17:31,635 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableToken_FreezableToken_NoBaseCtor__fail
[2020-11-24 21:17:31,635 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableToken_FreezableToken__success
[2020-11-24 21:17:31,635 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableToken_FreezableToken__fail
[2020-11-24 21:17:31,635 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_FreezableToken__success
[2020-11-24 21:17:31,635 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_FreezableToken__fail
[2020-11-24 21:17:31,635 INFO  L130     BoogieDeclarations]: Found specification of procedure actualBalanceOf~address_FreezableToken__success
[2020-11-24 21:17:31,635 INFO  L130     BoogieDeclarations]: Found specification of procedure actualBalanceOf~address_FreezableToken__fail
[2020-11-24 21:17:31,635 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingBalanceOf~address_FreezableToken__success
[2020-11-24 21:17:31,635 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingBalanceOf~address_FreezableToken__fail
[2020-11-24 21:17:31,635 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingCount~address_FreezableToken__success
[2020-11-24 21:17:31,635 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingCount~address_FreezableToken__fail
[2020-11-24 21:17:31,635 INFO  L130     BoogieDeclarations]: Found specification of procedure getFreezing~address~uint256_FreezableToken__success
[2020-11-24 21:17:31,636 INFO  L130     BoogieDeclarations]: Found specification of procedure getFreezing~address~uint256_FreezableToken__fail
[2020-11-24 21:17:31,636 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeTo~address~uint256~uint64_FreezableToken__success
[2020-11-24 21:17:31,636 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeTo~address~uint256~uint64_FreezableToken__fail
[2020-11-24 21:17:31,636 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseOnce_FreezableToken__success
[2020-11-24 21:17:31,636 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseOnce_FreezableToken__fail
[2020-11-24 21:17:31,636 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseAll_FreezableToken__success
[2020-11-24 21:17:31,636 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseAll_FreezableToken__fail
[2020-11-24 21:17:31,636 INFO  L130     BoogieDeclarations]: Found specification of procedure toKey~address~uint256_FreezableToken__fail
[2020-11-24 21:17:31,636 INFO  L130     BoogieDeclarations]: Found specification of procedure freeze~address~uint64_FreezableToken__fail
[2020-11-24 21:17:31,636 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken_NoBaseCtor__fail
[2020-11-24 21:17:31,636 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken__success
[2020-11-24 21:17:31,637 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken__fail
[2020-11-24 21:17:31,637 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_BurnableToken__success
[2020-11-24 21:17:31,637 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_BurnableToken__fail
[2020-11-24 21:17:31,637 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_BurnableToken__fail
[2020-11-24 21:17:31,637 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-24 21:17:31,637 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__success
[2020-11-24 21:17:31,637 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__fail
[2020-11-24 21:17:31,637 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__success
[2020-11-24 21:17:31,637 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__fail
[2020-11-24 21:17:31,637 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__success
[2020-11-24 21:17:31,637 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__fail
[2020-11-24 21:17:31,637 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__success
[2020-11-24 21:17:31,638 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__fail
[2020-11-24 21:17:31,638 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableMintableToken_FreezableMintableToken_NoBaseCtor__fail
[2020-11-24 21:17:31,638 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableMintableToken_FreezableMintableToken__success
[2020-11-24 21:17:31,638 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableMintableToken_FreezableMintableToken__fail
[2020-11-24 21:17:31,638 INFO  L130     BoogieDeclarations]: Found specification of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken__success
[2020-11-24 21:17:31,638 INFO  L130     BoogieDeclarations]: Found specification of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken__fail
[2020-11-24 21:17:31,638 INFO  L130     BoogieDeclarations]: Found specification of procedure Consts_Consts_NoBaseCtor__fail
[2020-11-24 21:17:31,638 INFO  L130     BoogieDeclarations]: Found specification of procedure Consts_Consts__success
[2020-11-24 21:17:31,638 INFO  L130     BoogieDeclarations]: Found specification of procedure Consts_Consts__fail
[2020-11-24 21:17:31,638 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_Consts__success
[2020-11-24 21:17:31,638 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_Consts__fail
[2020-11-24 21:17:31,639 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_UINT8_Consts__success
[2020-11-24 21:17:31,639 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_UINT8_Consts__fail
[2020-11-24 21:17:31,639 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMAL_MULTIPLIER_Consts__success
[2020-11-24 21:17:31,639 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMAL_MULTIPLIER_Consts__fail
[2020-11-24 21:17:31,639 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_NAME_Consts__success
[2020-11-24 21:17:31,639 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_NAME_Consts__fail
[2020-11-24 21:17:31,639 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_SYMBOL_Consts__success
[2020-11-24 21:17:31,639 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_SYMBOL_Consts__fail
[2020-11-24 21:17:31,640 INFO  L130     BoogieDeclarations]: Found specification of procedure PAUSED_Consts__success
[2020-11-24 21:17:31,640 INFO  L130     BoogieDeclarations]: Found specification of procedure PAUSED_Consts__fail
[2020-11-24 21:17:31,640 INFO  L130     BoogieDeclarations]: Found specification of procedure TARGET_USER_Consts__success
[2020-11-24 21:17:31,640 INFO  L130     BoogieDeclarations]: Found specification of procedure TARGET_USER_Consts__fail
[2020-11-24 21:17:31,640 INFO  L130     BoogieDeclarations]: Found specification of procedure CONTINUE_MINTING_Consts__success
[2020-11-24 21:17:31,640 INFO  L130     BoogieDeclarations]: Found specification of procedure CONTINUE_MINTING_Consts__fail
[2020-11-24 21:17:31,640 INFO  L130     BoogieDeclarations]: Found specification of procedure MainToken_MainToken_NoBaseCtor__fail
[2020-11-24 21:17:31,640 INFO  L130     BoogieDeclarations]: Found specification of procedure MainToken_MainToken__success
[2020-11-24 21:17:31,640 INFO  L130     BoogieDeclarations]: Found specification of procedure MainToken_MainToken__fail
[2020-11-24 21:17:31,640 INFO  L130     BoogieDeclarations]: Found specification of procedure name_MainToken__success
[2020-11-24 21:17:31,640 INFO  L130     BoogieDeclarations]: Found specification of procedure name_MainToken__fail
[2020-11-24 21:17:31,641 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_MainToken__success
[2020-11-24 21:17:31,641 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_MainToken__fail
[2020-11-24 21:17:31,641 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_MainToken__success
[2020-11-24 21:17:31,641 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_MainToken__fail
[2020-11-24 21:17:31,641 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_MainToken__success
[2020-11-24 21:17:31,641 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_MainToken__fail
[2020-11-24 21:17:31,641 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_MainToken__success
[2020-11-24 21:17:31,641 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_MainToken__fail
[2020-11-24 21:17:31,641 INFO  L130     BoogieDeclarations]: Found specification of procedure init_MainToken__fail
[2020-11-24 21:17:31,641 INFO  L130     BoogieDeclarations]: Found specification of procedure initialized_MainToken__success
[2020-11-24 21:17:31,641 INFO  L130     BoogieDeclarations]: Found specification of procedure initialized_MainToken__fail
[2020-11-24 21:17:31,641 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-24 21:17:31,642 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-24 21:17:31,642 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-24 21:17:31,642 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-24 21:17:31,642 INFO  L130     BoogieDeclarations]: Found specification of procedure canMint_pre__fail
[2020-11-24 21:17:31,642 INFO  L130     BoogieDeclarations]: Found specification of procedure hasMintPermission_pre__fail
[2020-11-24 21:17:31,642 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__fail
[2020-11-24 21:17:31,642 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__fail
[2020-11-24 21:17:31,642 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-24 21:17:31,642 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-24 21:17:31,642 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic_NoBaseCtor__fail
[2020-11-24 21:17:31,642 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic_NoBaseCtor__success
[2020-11-24 21:17:31,642 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic__fail
[2020-11-24 21:17:31,643 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic__success
[2020-11-24 21:17:31,643 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-24 21:17:31,643 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-24 21:17:31,643 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-24 21:17:31,643 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-24 21:17:31,643 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-24 21:17:31,643 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-24 21:17:31,643 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-24 21:17:31,643 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-24 21:17:31,643 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-24 21:17:31,643 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-24 21:17:31,643 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-24 21:17:31,644 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-24 21:17:31,644 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken_NoBaseCtor__fail
[2020-11-24 21:17:31,644 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken_NoBaseCtor__success
[2020-11-24 21:17:31,644 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken__fail
[2020-11-24 21:17:31,644 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken__success
[2020-11-24 21:17:31,644 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken__fail
[2020-11-24 21:17:31,644 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken__success
[2020-11-24 21:17:31,644 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken__fail
[2020-11-24 21:17:31,644 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken__success
[2020-11-24 21:17:31,644 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken__fail
[2020-11-24 21:17:31,644 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken__success
[2020-11-24 21:17:31,644 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-24 21:17:31,644 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-24 21:17:31,645 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-24 21:17:31,645 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-24 21:17:31,645 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken_NoBaseCtor__fail
[2020-11-24 21:17:31,645 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken_NoBaseCtor__success
[2020-11-24 21:17:31,645 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken__fail
[2020-11-24 21:17:31,645 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken__success
[2020-11-24 21:17:31,645 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken__fail
[2020-11-24 21:17:31,645 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken__success
[2020-11-24 21:17:31,645 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken__fail
[2020-11-24 21:17:31,645 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken__success
[2020-11-24 21:17:31,645 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken__fail
[2020-11-24 21:17:31,645 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken__success
[2020-11-24 21:17:31,646 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken__fail
[2020-11-24 21:17:31,646 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken__success
[2020-11-24 21:17:31,646 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken__fail
[2020-11-24 21:17:31,646 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken__success
[2020-11-24 21:17:31,646 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-24 21:17:31,646 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-24 21:17:31,646 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__fail
[2020-11-24 21:17:31,646 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__success
[2020-11-24 21:17:31,646 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable__fail
[2020-11-24 21:17:31,646 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable__success
[2020-11-24 21:17:31,646 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__fail
[2020-11-24 21:17:31,646 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__success
[2020-11-24 21:17:31,647 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferOwnership~address_Ownable__fail
[2020-11-24 21:17:31,647 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferOwnership~address_Ownable__success
[2020-11-24 21:17:31,647 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__fail
[2020-11-24 21:17:31,647 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__success
[2020-11-24 21:17:31,647 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken_NoBaseCtor__fail
[2020-11-24 21:17:31,647 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken_NoBaseCtor__success
[2020-11-24 21:17:31,647 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken__fail
[2020-11-24 21:17:31,647 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken__success
[2020-11-24 21:17:31,647 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_MintableToken__fail
[2020-11-24 21:17:31,647 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_MintableToken__success
[2020-11-24 21:17:31,647 INFO  L138     BoogieDeclarations]: Found implementation of procedure finishMinting_MintableToken__fail
[2020-11-24 21:17:31,647 INFO  L138     BoogieDeclarations]: Found implementation of procedure finishMinting_MintableToken__success
[2020-11-24 21:17:31,647 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintingFinished_MintableToken__fail
[2020-11-24 21:17:31,648 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintingFinished_MintableToken__success
[2020-11-24 21:17:31,648 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableToken_FreezableToken_NoBaseCtor__fail
[2020-11-24 21:17:31,648 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableToken_FreezableToken_NoBaseCtor__success
[2020-11-24 21:17:31,648 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableToken_FreezableToken__fail
[2020-11-24 21:17:31,648 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableToken_FreezableToken__success
[2020-11-24 21:17:31,648 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_FreezableToken__fail
[2020-11-24 21:17:31,648 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_FreezableToken__success
[2020-11-24 21:17:31,648 INFO  L138     BoogieDeclarations]: Found implementation of procedure actualBalanceOf~address_FreezableToken__fail
[2020-11-24 21:17:31,648 INFO  L138     BoogieDeclarations]: Found implementation of procedure actualBalanceOf~address_FreezableToken__success
[2020-11-24 21:17:31,648 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingBalanceOf~address_FreezableToken__fail
[2020-11-24 21:17:31,648 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingBalanceOf~address_FreezableToken__success
[2020-11-24 21:17:31,648 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingCount~address_FreezableToken__fail
[2020-11-24 21:17:31,649 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingCount~address_FreezableToken__success
[2020-11-24 21:17:31,649 INFO  L138     BoogieDeclarations]: Found implementation of procedure getFreezing~address~uint256_FreezableToken__fail
[2020-11-24 21:17:31,649 INFO  L138     BoogieDeclarations]: Found implementation of procedure getFreezing~address~uint256_FreezableToken__success
[2020-11-24 21:17:31,649 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeTo~address~uint256~uint64_FreezableToken__fail
[2020-11-24 21:17:31,649 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeTo~address~uint256~uint64_FreezableToken__success
[2020-11-24 21:17:31,649 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseOnce_FreezableToken__fail
[2020-11-24 21:17:31,649 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseOnce_FreezableToken__success
[2020-11-24 21:17:31,649 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseAll_FreezableToken__fail
[2020-11-24 21:17:31,649 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseAll_FreezableToken__success
[2020-11-24 21:17:31,649 INFO  L138     BoogieDeclarations]: Found implementation of procedure toKey~address~uint256_FreezableToken__fail
[2020-11-24 21:17:31,649 INFO  L138     BoogieDeclarations]: Found implementation of procedure toKey~address~uint256_FreezableToken__success
[2020-11-24 21:17:31,649 INFO  L138     BoogieDeclarations]: Found implementation of procedure freeze~address~uint64_FreezableToken__fail
[2020-11-24 21:17:31,649 INFO  L138     BoogieDeclarations]: Found implementation of procedure freeze~address~uint64_FreezableToken__success
[2020-11-24 21:17:31,650 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken_NoBaseCtor__fail
[2020-11-24 21:17:31,650 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken_NoBaseCtor__success
[2020-11-24 21:17:31,650 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken__fail
[2020-11-24 21:17:31,650 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken__success
[2020-11-24 21:17:31,650 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_BurnableToken__fail
[2020-11-24 21:17:31,650 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_BurnableToken__success
[2020-11-24 21:17:31,650 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_BurnableToken__fail
[2020-11-24 21:17:31,650 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_BurnableToken__success
[2020-11-24 21:17:31,650 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-24 21:17:31,650 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-24 21:17:31,650 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__fail
[2020-11-24 21:17:31,650 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__success
[2020-11-24 21:17:31,650 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__fail
[2020-11-24 21:17:31,651 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__success
[2020-11-24 21:17:31,651 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__fail
[2020-11-24 21:17:31,651 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__success
[2020-11-24 21:17:31,651 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__fail
[2020-11-24 21:17:31,651 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__success
[2020-11-24 21:17:31,651 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableMintableToken_FreezableMintableToken_NoBaseCtor__fail
[2020-11-24 21:17:31,651 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success
[2020-11-24 21:17:31,651 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableMintableToken_FreezableMintableToken__fail
[2020-11-24 21:17:31,651 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableMintableToken_FreezableMintableToken__success
[2020-11-24 21:17:31,651 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken__fail
[2020-11-24 21:17:31,651 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken__success
[2020-11-24 21:17:31,651 INFO  L138     BoogieDeclarations]: Found implementation of procedure Consts_Consts_NoBaseCtor__fail
[2020-11-24 21:17:31,652 INFO  L138     BoogieDeclarations]: Found implementation of procedure Consts_Consts_NoBaseCtor__success
[2020-11-24 21:17:31,652 INFO  L138     BoogieDeclarations]: Found implementation of procedure Consts_Consts__fail
[2020-11-24 21:17:31,652 INFO  L138     BoogieDeclarations]: Found implementation of procedure Consts_Consts__success
[2020-11-24 21:17:31,652 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_Consts__fail
[2020-11-24 21:17:31,652 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_Consts__success
[2020-11-24 21:17:31,652 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_UINT8_Consts__fail
[2020-11-24 21:17:31,652 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_UINT8_Consts__success
[2020-11-24 21:17:31,652 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMAL_MULTIPLIER_Consts__fail
[2020-11-24 21:17:31,652 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMAL_MULTIPLIER_Consts__success
[2020-11-24 21:17:31,652 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_NAME_Consts__fail
[2020-11-24 21:17:31,652 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_NAME_Consts__success
[2020-11-24 21:17:31,652 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_SYMBOL_Consts__fail
[2020-11-24 21:17:31,652 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_SYMBOL_Consts__success
[2020-11-24 21:17:31,653 INFO  L138     BoogieDeclarations]: Found implementation of procedure PAUSED_Consts__fail
[2020-11-24 21:17:31,653 INFO  L138     BoogieDeclarations]: Found implementation of procedure PAUSED_Consts__success
[2020-11-24 21:17:31,653 INFO  L138     BoogieDeclarations]: Found implementation of procedure TARGET_USER_Consts__fail
[2020-11-24 21:17:31,653 INFO  L138     BoogieDeclarations]: Found implementation of procedure TARGET_USER_Consts__success
[2020-11-24 21:17:31,653 INFO  L138     BoogieDeclarations]: Found implementation of procedure CONTINUE_MINTING_Consts__fail
[2020-11-24 21:17:31,653 INFO  L138     BoogieDeclarations]: Found implementation of procedure CONTINUE_MINTING_Consts__success
[2020-11-24 21:17:31,653 INFO  L138     BoogieDeclarations]: Found implementation of procedure MainToken_MainToken_NoBaseCtor__fail
[2020-11-24 21:17:31,653 INFO  L138     BoogieDeclarations]: Found implementation of procedure MainToken_MainToken_NoBaseCtor__success
[2020-11-24 21:17:31,653 INFO  L138     BoogieDeclarations]: Found implementation of procedure MainToken_MainToken__fail
[2020-11-24 21:17:31,653 INFO  L138     BoogieDeclarations]: Found implementation of procedure MainToken_MainToken__success
[2020-11-24 21:17:31,653 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_MainToken__fail
[2020-11-24 21:17:31,654 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_MainToken__success
[2020-11-24 21:17:31,654 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_MainToken__fail
[2020-11-24 21:17:31,654 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_MainToken__success
[2020-11-24 21:17:31,654 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_MainToken__fail
[2020-11-24 21:17:31,654 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_MainToken__success
[2020-11-24 21:17:31,654 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_MainToken__fail
[2020-11-24 21:17:31,654 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_MainToken__success
[2020-11-24 21:17:31,654 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_MainToken__fail
[2020-11-24 21:17:31,654 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_MainToken__success
[2020-11-24 21:17:31,654 INFO  L138     BoogieDeclarations]: Found implementation of procedure init_MainToken__fail
[2020-11-24 21:17:31,654 INFO  L138     BoogieDeclarations]: Found implementation of procedure init_MainToken__success
[2020-11-24 21:17:31,654 INFO  L138     BoogieDeclarations]: Found implementation of procedure initialized_MainToken__fail
[2020-11-24 21:17:31,654 INFO  L138     BoogieDeclarations]: Found implementation of procedure initialized_MainToken__success
[2020-11-24 21:17:31,655 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-24 21:17:31,655 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-24 21:17:31,655 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-24 21:17:31,655 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-24 21:17:31,655 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-24 21:17:31,655 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-24 21:17:31,655 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-24 21:17:31,655 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-24 21:17:31,655 INFO  L138     BoogieDeclarations]: Found implementation of procedure canMint_pre__fail
[2020-11-24 21:17:31,655 INFO  L138     BoogieDeclarations]: Found implementation of procedure canMint_pre__success
[2020-11-24 21:17:31,655 INFO  L138     BoogieDeclarations]: Found implementation of procedure hasMintPermission_pre__fail
[2020-11-24 21:17:31,655 INFO  L138     BoogieDeclarations]: Found implementation of procedure hasMintPermission_pre__success
[2020-11-24 21:17:31,656 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__fail
[2020-11-24 21:17:31,656 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__success
[2020-11-24 21:17:31,656 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__fail
[2020-11-24 21:17:31,656 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__success
[2020-11-24 21:17:31,656 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Basic
[2020-11-24 21:17:31,656 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Basic
[2020-11-24 21:17:31,656 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-24 21:17:31,656 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-24 21:17:31,656 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_BasicToken
[2020-11-24 21:17:31,656 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_BasicToken
[2020-11-24 21:17:31,656 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-24 21:17:31,656 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-24 21:17:31,656 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_StandardToken
[2020-11-24 21:17:31,657 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_StandardToken
[2020-11-24 21:17:31,657 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Ownable
[2020-11-24 21:17:31,657 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Ownable
[2020-11-24 21:17:31,657 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_MintableToken
[2020-11-24 21:17:31,657 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_MintableToken
[2020-11-24 21:17:31,657 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_FreezableToken
[2020-11-24 21:17:31,657 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_FreezableToken
[2020-11-24 21:17:31,657 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_BurnableToken
[2020-11-24 21:17:31,657 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_BurnableToken
[2020-11-24 21:17:31,657 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Pausable
[2020-11-24 21:17:31,657 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Pausable
[2020-11-24 21:17:31,657 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_FreezableMintableToken
[2020-11-24 21:17:31,658 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_FreezableMintableToken
[2020-11-24 21:17:31,658 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Consts
[2020-11-24 21:17:31,658 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Consts
[2020-11-24 21:17:31,658 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_MainToken
[2020-11-24 21:17:31,658 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-24 21:17:31,658 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-24 21:17:31,658 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-24 21:17:32,436 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 21:17:32,437 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 21:17:32,437 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 21:17:32,907 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 21:17:33,287 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-24 21:17:33,287 INFO  L286             CfgBuilder]: Removed 13 assue(true) statements.
[2020-11-24 21:17:33,291 INFO  L202        PluginConnector]: Adding new model MainToken_0x1b980e05943de3db3a459c72325338d327b6f5a9_approve.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 09:17:33 BoogieIcfgContainer
[2020-11-24 21:17:33,291 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 09:17:31" (2/2) ...
[2020-11-24 21:17:33,291 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-24 21:17:33,291 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@51bb83db and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 09:17:33, skipping insertion in model container
[2020-11-24 21:17:33,291 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-24 21:17:33,292 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-24 21:17:33,292 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-24 21:17:33,293 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-24 21:17:33,293 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "MainToken_0x1b980e05943de3db3a459c72325338d327b6f5a9_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:17:31" (1/3) ...
[2020-11-24 21:17:33,294 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@75bec902 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 09:17:33, skipping insertion in model container
[2020-11-24 21:17:33,294 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 09:17:31" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-24 21:17:33,329 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 09:17:33 NWAContainer
[2020-11-24 21:17:33,329 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-24 21:17:33,329 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-24 21:17:33,329 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-24 21:17:33,330 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-24 21:17:33,331 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "MainToken_0x1b980e05943de3db3a459c72325338d327b6f5a9_approve.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 09:17:33" (3/4) ...
[2020-11-24 21:17:33,331 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@77dce9ed and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 09:17:33, skipping insertion in model container
[2020-11-24 21:17:33,331 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 09:17:33" (4/4) ...
[2020-11-24 21:17:33,334 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-24 21:17:33,343 INFO  L110   BuchiProductObserver]: Initial RCFG 5420 locations, 7596 edges
[2020-11-24 21:17:33,343 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-24 21:17:33,358 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-24 21:17:37,556 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-24 21:17:37,572 INFO  L110   BuchiProductObserver]: BuchiProgram size 13520 locations, 24825 edges
[2020-11-24 21:17:37,573 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 09:17:37 BoogieIcfgContainer
[2020-11-24 21:17:37,573 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-24 21:17:37,573 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-24 21:17:37,573 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-24 21:17:37,574 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-24 21:17:37,575 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 09:17:37" (1/1) ...
[2020-11-24 21:17:37,862 INFO  L313           BlockEncoder]: Initial Icfg 13520 locations, 24825 edges
[2020-11-24 21:17:37,862 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-24 21:17:37,863 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-24 21:17:37,863 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-24 21:17:37,863 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-24 21:17:37,887 INFO  L70    emoveInfeasibleEdges]: Removed 315 edges and 29 locations because of local infeasibility
[2020-11-24 21:17:37,907 INFO  L70        RemoveSinkStates]: Removed 170 edges and 113 locations by removing sink states
[2020-11-24 21:17:37,930 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-24 21:17:37,937 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-24 21:17:37,945 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-24 21:17:37,945 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-24 21:17:37,951 INFO  L313           BlockEncoder]: Encoded RCFG 13310 locations, 24239 edges
[2020-11-24 21:17:37,951 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 24.11 09:17:37 BasicIcfg
[2020-11-24 21:17:37,951 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-24 21:17:37,952 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-24 21:17:37,952 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-24 21:17:37,953 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-24 21:17:37,953 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 21:17:37,953 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "MainToken_0x1b980e05943de3db3a459c72325338d327b6f5a9_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:17:31" (1/6) ...
[2020-11-24 21:17:37,955 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4a518108 and model type MainToken_0x1b980e05943de3db3a459c72325338d327b6f5a9_approve.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 09:17:37, skipping insertion in model container
[2020-11-24 21:17:37,955 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 21:17:37,955 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 09:17:31" (2/6) ...
[2020-11-24 21:17:37,955 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4a518108 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 09:17:37, skipping insertion in model container
[2020-11-24 21:17:37,955 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 21:17:37,955 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "MainToken_0x1b980e05943de3db3a459c72325338d327b6f5a9_approve.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 09:17:33" (3/6) ...
[2020-11-24 21:17:37,955 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4a518108 and model type MainToken_0x1b980e05943de3db3a459c72325338d327b6f5a9_approve.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 24.11 09:17:37, skipping insertion in model container
[2020-11-24 21:17:37,955 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 21:17:37,955 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 09:17:33" (4/6) ...
[2020-11-24 21:17:37,955 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4a518108 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 09:17:37, skipping insertion in model container
[2020-11-24 21:17:37,956 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 21:17:37,956 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 09:17:37" (5/6) ...
[2020-11-24 21:17:37,956 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4a518108 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 24.11 09:17:37, skipping insertion in model container
[2020-11-24 21:17:37,956 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 21:17:37,956 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 24.11 09:17:37" (6/6) ...
[2020-11-24 21:17:37,957 INFO  L404   chiAutomizerObserver]: Analyzing ICFG MainToken_0x1b980e05943de3db3a459c72325338d327b6f5a9_approve.bpl_BEv2
[2020-11-24 21:17:37,982 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-24 21:17:37,982 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-24 21:17:37,982 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-24 21:17:37,982 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-24 21:17:37,982 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-24 21:17:37,982 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-24 21:17:37,982 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-24 21:17:37,983 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-24 21:17:37,983 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-24 21:17:38,055 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 13310 states.
[2020-11-24 21:17:38,139 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:17:38,139 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:17:38,139 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:17:38,147 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:17:38,147 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:17:38,147 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-24 21:17:38,148 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 13310 states.
[2020-11-24 21:17:38,193 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:17:38,193 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:17:38,193 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:17:38,195 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:17:38,195 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_approve_StandardToken0 := false;
[L3]                  call_approve_StandardToken0 := false;
[L3]      CALL        call main();
[L3]                  havoc p2;
[L3]                  havoc p1;
[L14832]              assume null == 0;
[L14833]  CALL        call this := FreshRefGenerator__success();
[L6722]               havoc newRef;
[L6723]               assume Alloc[newRef] == false;
[L6724]               Alloc[newRef] := true;
[L6725]               assume newRef != null;
[L14833]  RET         call this := FreshRefGenerator__success();
[L14834]              assume now >= 0;
[L14835]              assume DType[this] == MainToken;
[L14836]              assume msgvalue_MSG == 0;
[L14837]              gas := gas - 53000;
[L14838]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4392]               havoc __exception;
[L4393]               revert := false;
[L4394]   COND FALSE  !(__exception)
[L4433]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9531]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9333]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9309]               assume msgsender_MSG != null;
[L9310]               Balance[this] := 0;
[L9311]               TOKEN_DECIMALS_Consts[this] := 18;
[L9312]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9313]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9314]               TOKEN_NAME_Consts[this] := -1142012261;
[L9315]               TOKEN_SYMBOL_Consts[this] := 360831912;
[L9316]               PAUSED_Consts[this] := false;
[L9317]               __var_52 := ConstantToRef(687691456480424918299425112376782193233251990427);
[L9318]               TARGET_USER_Consts[this] := ConstantToRef(687691456480424918299425112376782193233251990427);
[L9319]               CONTINUE_MINTING_Consts[this] := true;
[L9333]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9334]   COND TRUE   revert
[L9531]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9532]   COND TRUE   revert
[L4433]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4434]               assume !revert && gas >= 0;
[L14838]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14839]              assume !revert && gas >= 0;

Loop:
[L14842]  CALL        call CorralChoice_MainToken(this);
[L14499]              havoc msgsender_MSG;
[L14500]              havoc msgvalue_MSG;
[L14501]              havoc choice;
[L14502]              havoc __ret_0_totalSupply;
[L14503]              havoc _owner_s729;
[L14504]              havoc balance_s729;
[L14505]              havoc _to_s1572;
[L14506]              havoc _value_s1572;
[L14507]              havoc _success_s1572;
[L14508]              havoc _owner_s395;
[L14509]              havoc _spender_s395;
[L14510]              havoc __ret_0_allowance;
[L14511]              havoc _from_s1551;
[L14512]              havoc _to_s1551;
[L14513]              havoc _value_s1551;
[L14514]              havoc _success_s1551;
[L14515]              havoc _spender_s379;
[L14516]              havoc _value_s379;
[L14517]              havoc __ret_0_approve;
[L14518]              havoc _spender_s437;
[L14519]              havoc _addedValue_s437;
[L14520]              havoc __ret_0_increaseApproval;
[L14521]              havoc _spender_s497;
[L14522]              havoc _subtractedValue_s497;
[L14523]              havoc __ret_0_decreaseApproval;
[L14524]              havoc __ret_0_owner;
[L14525]              havoc _newOwner_s558;
[L14526]              havoc __ret_0_mintingFinished;
[L14527]              havoc _to_s664;
[L14528]              havoc _amount_s664;
[L14529]              havoc __ret_0_mint;
[L14530]              havoc __ret_0_finishMinting;
[L14531]              havoc _owner_s742;
[L14532]              havoc balance_s742;
[L14533]              havoc _owner_s754;
[L14534]              havoc balance_s754;
[L14535]              havoc _addr_s792;
[L14536]              havoc count_s792;
[L14537]              havoc _addr_s849;
[L14538]              havoc _index_s849;
[L14539]              havoc _release_s849;
[L14540]              havoc _balance_s849;
[L14541]              havoc _to_s938;
[L14542]              havoc _amount_s938;
[L14543]              havoc _until_s938;
[L14544]              havoc tokens_s1107;
[L14545]              havoc _value_s1261;
[L14546]              havoc __ret_0_paused;
[L14547]              havoc _to_s1449;
[L14548]              havoc _amount_s1449;
[L14549]              havoc _until_s1449;
[L14550]              havoc __ret_0_mintAndFreeze;
[L14551]              havoc __ret_0_TOKEN_DECIMALS;
[L14552]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14553]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14554]              havoc __ret_0_TOKEN_NAME;
[L14555]              havoc __ret_0_TOKEN_SYMBOL;
[L14556]              havoc __ret_0_PAUSED;
[L14557]              havoc __ret_0_TARGET_USER;
[L14558]              havoc __ret_0_CONTINUE_MINTING;
[L14559]              havoc __ret_0_initialized;
[L14560]              havoc _name_s1511;
[L14561]              havoc _symbol_s1519;
[L14562]              havoc _decimals_s1527;
[L14563]              havoc tmpNow;
[L14564]              havoc gas;
[L14565]              assume gas > 4000000 && gas <= 8000000;
[L14566]              tmpNow := now;
[L14567]              havoc now;
[L14568]              assume now > tmpNow;
[L14569]              assume msgsender_MSG != null;
[L14570]              assume DType[msgsender_MSG] != ERC20Basic;
[L14571]              assume DType[msgsender_MSG] != SafeMath;
[L14572]              assume DType[msgsender_MSG] != BasicToken;
[L14573]              assume DType[msgsender_MSG] != ERC20;
[L14574]              assume DType[msgsender_MSG] != StandardToken;
[L14575]              assume DType[msgsender_MSG] != Ownable;
[L14576]              assume DType[msgsender_MSG] != MintableToken;
[L14577]              assume DType[msgsender_MSG] != FreezableToken;
[L14578]              assume DType[msgsender_MSG] != BurnableToken;
[L14579]              assume DType[msgsender_MSG] != Pausable;
[L14580]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14581]              assume DType[msgsender_MSG] != Consts;
[L14582]              assume DType[msgsender_MSG] != MainToken;
[L14583]              Alloc[msgsender_MSG] := true;
[L14584]  COND TRUE   choice == 38
[L14585]              gas := gas - 21000;
[L14586]  COND FALSE  !(gas >= 0)
[L14842]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:17:38,209 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:17:38,209 INFO  L82        PathProgramCache]: Analyzing trace with hash -1426726190, now seen corresponding path program 1 times
[2020-11-24 21:17:38,213 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:17:38,232 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:17:38,268 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 21:17:38,270 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:17:38,270 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-24 21:17:38,713 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:17:38,721 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-24 21:17:38,722 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-24 21:17:38,723 INFO  L87              Difference]: Start difference. First operand 13310 states. Second operand 3 states.
[2020-11-24 21:17:39,272 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:17:39,272 INFO  L93              Difference]: Finished difference Result 8312 states and 9727 transitions.
[2020-11-24 21:17:39,272 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-24 21:17:39,273 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8312 states and 9727 transitions.
[2020-11-24 21:17:39,307 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:17:39,354 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8312 states to 8308 states and 9719 transitions.
[2020-11-24 21:17:39,355 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-24 21:17:39,359 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1857
[2020-11-24 21:17:39,359 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8308 states and 9719 transitions.
[2020-11-24 21:17:39,376 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:17:39,377 INFO  L728         BuchiCegarLoop]: Abstraction has 8308 states and 9719 transitions.
[2020-11-24 21:17:39,399 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8308 states and 9719 transitions.
[2020-11-24 21:17:39,493 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8308 to 8308.
[2020-11-24 21:17:39,493 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8308 states.
[2020-11-24 21:17:39,506 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8308 states to 8308 states and 9719 transitions.
[2020-11-24 21:17:39,507 INFO  L751         BuchiCegarLoop]: Abstraction has 8308 states and 9719 transitions.
[2020-11-24 21:17:39,507 INFO  L631         BuchiCegarLoop]: Abstraction has 8308 states and 9719 transitions.
[2020-11-24 21:17:39,507 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-24 21:17:39,507 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8308 states and 9719 transitions.
[2020-11-24 21:17:39,520 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:17:39,520 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:17:39,520 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:17:39,522 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:17:39,522 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_approve_StandardToken0 := false;
[L3]                  call_approve_StandardToken0 := false;
[L3]      CALL        call main();
[L3]                  havoc p2;
[L3]                  havoc p1;
[L14832]              assume null == 0;
[L14833]  CALL        call this := FreshRefGenerator__success();
[L6722]               havoc newRef;
[L6723]               assume Alloc[newRef] == false;
[L6724]               Alloc[newRef] := true;
[L6725]               assume newRef != null;
[L14833]  RET         call this := FreshRefGenerator__success();
[L14834]              assume now >= 0;
[L14835]              assume DType[this] == MainToken;
[L14836]              assume msgvalue_MSG == 0;
[L14837]              gas := gas - 53000;
[L14838]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4392]               havoc __exception;
[L4393]               revert := false;
[L4394]   COND FALSE  !(__exception)
[L4433]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9531]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9333]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9309]               assume msgsender_MSG != null;
[L9310]               Balance[this] := 0;
[L9311]               TOKEN_DECIMALS_Consts[this] := 18;
[L9312]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9313]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9314]               TOKEN_NAME_Consts[this] := -1142012261;
[L9315]               TOKEN_SYMBOL_Consts[this] := 360831912;
[L9316]               PAUSED_Consts[this] := false;
[L9317]               __var_52 := ConstantToRef(687691456480424918299425112376782193233251990427);
[L9318]               TARGET_USER_Consts[this] := ConstantToRef(687691456480424918299425112376782193233251990427);
[L9319]               CONTINUE_MINTING_Consts[this] := true;
[L9333]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9334]   COND FALSE  !(revert)
[L9531]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9532]   COND TRUE   revert
[L4433]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4434]               assume !revert && gas >= 0;
[L14838]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14839]              assume !revert && gas >= 0;
[L14842]  CALL        call CorralChoice_MainToken(this);
[L14499]              havoc msgsender_MSG;
[L14500]              havoc msgvalue_MSG;
[L14501]              havoc choice;
[L14502]              havoc __ret_0_totalSupply;
[L14503]              havoc _owner_s729;
[L14504]              havoc balance_s729;
[L14505]              havoc _to_s1572;
[L14506]              havoc _value_s1572;
[L14507]              havoc _success_s1572;
[L14508]              havoc _owner_s395;
[L14509]              havoc _spender_s395;
[L14510]              havoc __ret_0_allowance;
[L14511]              havoc _from_s1551;
[L14512]              havoc _to_s1551;
[L14513]              havoc _value_s1551;
[L14514]              havoc _success_s1551;
[L14515]              havoc _spender_s379;
[L14516]              havoc _value_s379;
[L14517]              havoc __ret_0_approve;
[L14518]              havoc _spender_s437;
[L14519]              havoc _addedValue_s437;
[L14520]              havoc __ret_0_increaseApproval;
[L14521]              havoc _spender_s497;
[L14522]              havoc _subtractedValue_s497;
[L14523]              havoc __ret_0_decreaseApproval;
[L14524]              havoc __ret_0_owner;
[L14525]              havoc _newOwner_s558;
[L14526]              havoc __ret_0_mintingFinished;
[L14527]              havoc _to_s664;
[L14528]              havoc _amount_s664;
[L14529]              havoc __ret_0_mint;
[L14530]              havoc __ret_0_finishMinting;
[L14531]              havoc _owner_s742;
[L14532]              havoc balance_s742;
[L14533]              havoc _owner_s754;
[L14534]              havoc balance_s754;
[L14535]              havoc _addr_s792;
[L14536]              havoc count_s792;
[L14537]              havoc _addr_s849;
[L14538]              havoc _index_s849;
[L14539]              havoc _release_s849;
[L14540]              havoc _balance_s849;
[L14541]              havoc _to_s938;
[L14542]              havoc _amount_s938;
[L14543]              havoc _until_s938;
[L14544]              havoc tokens_s1107;
[L14545]              havoc _value_s1261;
[L14546]              havoc __ret_0_paused;
[L14547]              havoc _to_s1449;
[L14548]              havoc _amount_s1449;
[L14549]              havoc _until_s1449;
[L14550]              havoc __ret_0_mintAndFreeze;
[L14551]              havoc __ret_0_TOKEN_DECIMALS;
[L14552]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14553]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14554]              havoc __ret_0_TOKEN_NAME;
[L14555]              havoc __ret_0_TOKEN_SYMBOL;
[L14556]              havoc __ret_0_PAUSED;
[L14557]              havoc __ret_0_TARGET_USER;
[L14558]              havoc __ret_0_CONTINUE_MINTING;
[L14559]              havoc __ret_0_initialized;
[L14560]              havoc _name_s1511;
[L14561]              havoc _symbol_s1519;
[L14562]              havoc _decimals_s1527;
[L14563]              havoc tmpNow;
[L14564]              havoc gas;
[L14565]              assume gas > 4000000 && gas <= 8000000;
[L14566]              tmpNow := now;
[L14567]              havoc now;
[L14568]              assume now > tmpNow;
[L14569]              assume msgsender_MSG != null;
[L14570]              assume DType[msgsender_MSG] != ERC20Basic;
[L14571]              assume DType[msgsender_MSG] != SafeMath;
[L14572]              assume DType[msgsender_MSG] != BasicToken;
[L14573]              assume DType[msgsender_MSG] != ERC20;
[L14574]              assume DType[msgsender_MSG] != StandardToken;
[L14575]              assume DType[msgsender_MSG] != Ownable;
[L14576]              assume DType[msgsender_MSG] != MintableToken;
[L14577]              assume DType[msgsender_MSG] != FreezableToken;
[L14578]              assume DType[msgsender_MSG] != BurnableToken;
[L14579]              assume DType[msgsender_MSG] != Pausable;
[L14580]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14581]              assume DType[msgsender_MSG] != Consts;
[L14582]              assume DType[msgsender_MSG] != MainToken;
[L14583]              Alloc[msgsender_MSG] := true;
[L14584]  COND FALSE  !(choice == 38)
[L14590]  COND FALSE  !(choice == 37)
[L14596]  COND FALSE  !(choice == 36)
[L14603]  COND FALSE  !(choice == 35)
[L14609]  COND FALSE  !(choice == 34)
[L14616]  COND TRUE   choice == 33
[L14617]              gas := gas - 21000;
[L14618]  COND TRUE   gas >= 0
[L14619]              assume _value_s379 >= 0 && _value_s379 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14620]              assume msgvalue_MSG == 0;
[L14621]  CALL        call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != _spender_s379;
[L3]                  call_approve_StandardToken0 := true;
[L3]                  call_approve_StandardToken0 := false;
[L3]                  revert := revert_hold;
[L921]                havoc __exception;
[L922]                revert := false;
[L923]    COND FALSE  !(__exception)
[L962]    CALL        call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L7190]               sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_StandardToken[this][msgsender_MSG][_spender_s379];
[L7191]               allowed_StandardToken[this][msgsender_MSG][_spender_s379] := _value_s379;
[L7192]               sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_StandardToken[this][msgsender_MSG][_spender_s379];
[L7193]               assert { :EventEmitted "Approval_StandardToken" } true;
[L7194]               __ret_0_ := true;
[L962]    RET         call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L963]                assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !(((((((((((__ret_0_ == true && allowed_StandardToken[this][msgsender_MSG][_spender_s379] == _value_s379) && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L3]                  revert := revert_hold;
[L14621]  RET         call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L14842]  RET         call CorralChoice_MainToken(this);

Loop:
[L14842]  CALL        call CorralChoice_MainToken(this);
[L14499]              havoc msgsender_MSG;
[L14500]              havoc msgvalue_MSG;
[L14501]              havoc choice;
[L14502]              havoc __ret_0_totalSupply;
[L14503]              havoc _owner_s729;
[L14504]              havoc balance_s729;
[L14505]              havoc _to_s1572;
[L14506]              havoc _value_s1572;
[L14507]              havoc _success_s1572;
[L14508]              havoc _owner_s395;
[L14509]              havoc _spender_s395;
[L14510]              havoc __ret_0_allowance;
[L14511]              havoc _from_s1551;
[L14512]              havoc _to_s1551;
[L14513]              havoc _value_s1551;
[L14514]              havoc _success_s1551;
[L14515]              havoc _spender_s379;
[L14516]              havoc _value_s379;
[L14517]              havoc __ret_0_approve;
[L14518]              havoc _spender_s437;
[L14519]              havoc _addedValue_s437;
[L14520]              havoc __ret_0_increaseApproval;
[L14521]              havoc _spender_s497;
[L14522]              havoc _subtractedValue_s497;
[L14523]              havoc __ret_0_decreaseApproval;
[L14524]              havoc __ret_0_owner;
[L14525]              havoc _newOwner_s558;
[L14526]              havoc __ret_0_mintingFinished;
[L14527]              havoc _to_s664;
[L14528]              havoc _amount_s664;
[L14529]              havoc __ret_0_mint;
[L14530]              havoc __ret_0_finishMinting;
[L14531]              havoc _owner_s742;
[L14532]              havoc balance_s742;
[L14533]              havoc _owner_s754;
[L14534]              havoc balance_s754;
[L14535]              havoc _addr_s792;
[L14536]              havoc count_s792;
[L14537]              havoc _addr_s849;
[L14538]              havoc _index_s849;
[L14539]              havoc _release_s849;
[L14540]              havoc _balance_s849;
[L14541]              havoc _to_s938;
[L14542]              havoc _amount_s938;
[L14543]              havoc _until_s938;
[L14544]              havoc tokens_s1107;
[L14545]              havoc _value_s1261;
[L14546]              havoc __ret_0_paused;
[L14547]              havoc _to_s1449;
[L14548]              havoc _amount_s1449;
[L14549]              havoc _until_s1449;
[L14550]              havoc __ret_0_mintAndFreeze;
[L14551]              havoc __ret_0_TOKEN_DECIMALS;
[L14552]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14553]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14554]              havoc __ret_0_TOKEN_NAME;
[L14555]              havoc __ret_0_TOKEN_SYMBOL;
[L14556]              havoc __ret_0_PAUSED;
[L14557]              havoc __ret_0_TARGET_USER;
[L14558]              havoc __ret_0_CONTINUE_MINTING;
[L14559]              havoc __ret_0_initialized;
[L14560]              havoc _name_s1511;
[L14561]              havoc _symbol_s1519;
[L14562]              havoc _decimals_s1527;
[L14563]              havoc tmpNow;
[L14564]              havoc gas;
[L14565]              assume gas > 4000000 && gas <= 8000000;
[L14566]              tmpNow := now;
[L14567]              havoc now;
[L14568]              assume now > tmpNow;
[L14569]              assume msgsender_MSG != null;
[L14570]              assume DType[msgsender_MSG] != ERC20Basic;
[L14571]              assume DType[msgsender_MSG] != SafeMath;
[L14572]              assume DType[msgsender_MSG] != BasicToken;
[L14573]              assume DType[msgsender_MSG] != ERC20;
[L14574]              assume DType[msgsender_MSG] != StandardToken;
[L14575]              assume DType[msgsender_MSG] != Ownable;
[L14576]              assume DType[msgsender_MSG] != MintableToken;
[L14577]              assume DType[msgsender_MSG] != FreezableToken;
[L14578]              assume DType[msgsender_MSG] != BurnableToken;
[L14579]              assume DType[msgsender_MSG] != Pausable;
[L14580]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14581]              assume DType[msgsender_MSG] != Consts;
[L14582]              assume DType[msgsender_MSG] != MainToken;
[L14583]              Alloc[msgsender_MSG] := true;
[L14584]  COND FALSE  !(choice == 38)
[L14590]  COND FALSE  !(choice == 37)
[L14596]  COND FALSE  !(choice == 36)
[L14603]  COND FALSE  !(choice == 35)
[L14609]  COND FALSE  !(choice == 34)
[L14616]  COND TRUE   choice == 33
[L14617]              gas := gas - 21000;
[L14618]  COND TRUE   gas >= 0
[L14619]              assume _value_s379 >= 0 && _value_s379 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14620]              assume msgvalue_MSG == 0;
[L14621]  CALL        call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != _spender_s379;
[L3]                  call_approve_StandardToken0 := true;
[L3]                  call_approve_StandardToken0 := false;
[L3]                  revert := revert_hold;
[L921]                havoc __exception;
[L922]                revert := false;
[L923]    COND FALSE  !(__exception)
[L962]    CALL        call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L7190]               sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_StandardToken[this][msgsender_MSG][_spender_s379];
[L7191]               allowed_StandardToken[this][msgsender_MSG][_spender_s379] := _value_s379;
[L7192]               sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_StandardToken[this][msgsender_MSG][_spender_s379];
[L7193]               assert { :EventEmitted "Approval_StandardToken" } true;
[L7194]               __ret_0_ := true;
[L962]    RET         call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L963]                assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !(((((((((((__ret_0_ == true && allowed_StandardToken[this][msgsender_MSG][_spender_s379] == _value_s379) && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L3]                  revert := revert_hold;
[L14621]  RET         call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L14842]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:17:39,526 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:17:39,526 INFO  L82        PathProgramCache]: Analyzing trace with hash 2124257961, now seen corresponding path program 1 times
[2020-11-24 21:17:39,527 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:17:39,539 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:17:39,567 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 21:17:39,568 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:17:39,568 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-24 21:17:39,569 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:17:39,569 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-24 21:17:39,569 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-24 21:17:39,569 INFO  L87              Difference]: Start difference. First operand 8308 states and 9719 transitions. cyclomatic complexity: 1431 Second operand 3 states.
[2020-11-24 21:17:39,782 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:17:39,782 INFO  L93              Difference]: Finished difference Result 9772 states and 11179 transitions.
[2020-11-24 21:17:39,783 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-24 21:17:39,783 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9772 states and 11179 transitions.
[2020-11-24 21:17:39,814 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 21:17:39,859 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9772 states to 9772 states and 11179 transitions.
[2020-11-24 21:17:39,860 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2275
[2020-11-24 21:17:39,861 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2275
[2020-11-24 21:17:39,861 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9772 states and 11179 transitions.
[2020-11-24 21:17:39,872 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:17:39,872 INFO  L728         BuchiCegarLoop]: Abstraction has 9772 states and 11179 transitions.
[2020-11-24 21:17:39,883 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9772 states and 11179 transitions.
[2020-11-24 21:17:39,969 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9772 to 8684.
[2020-11-24 21:17:39,969 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8684 states.
[2020-11-24 21:17:39,981 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8684 states to 8684 states and 9825 transitions.
[2020-11-24 21:17:39,981 INFO  L751         BuchiCegarLoop]: Abstraction has 8684 states and 9825 transitions.
[2020-11-24 21:17:39,981 INFO  L631         BuchiCegarLoop]: Abstraction has 8684 states and 9825 transitions.
[2020-11-24 21:17:39,981 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-24 21:17:39,981 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8684 states and 9825 transitions.
[2020-11-24 21:17:39,993 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:17:39,993 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:17:39,993 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:17:39,999 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:17:40,000 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_approve_StandardToken0 := false;
[L3]                  call_approve_StandardToken0 := false;
[L3]      CALL        call main();
[L3]                  havoc p2;
[L3]                  havoc p1;
[L14832]              assume null == 0;
[L14833]  CALL        call this := FreshRefGenerator__success();
[L6722]               havoc newRef;
[L6723]               assume Alloc[newRef] == false;
[L6724]               Alloc[newRef] := true;
[L6725]               assume newRef != null;
[L14833]  RET         call this := FreshRefGenerator__success();
[L14834]              assume now >= 0;
[L14835]              assume DType[this] == MainToken;
[L14836]              assume msgvalue_MSG == 0;
[L14837]              gas := gas - 53000;
[L14838]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4392]               havoc __exception;
[L4393]               revert := false;
[L4394]   COND FALSE  !(__exception)
[L4433]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9531]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9333]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9309]               assume msgsender_MSG != null;
[L9310]               Balance[this] := 0;
[L9311]               TOKEN_DECIMALS_Consts[this] := 18;
[L9312]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9313]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9314]               TOKEN_NAME_Consts[this] := -1142012261;
[L9315]               TOKEN_SYMBOL_Consts[this] := 360831912;
[L9316]               PAUSED_Consts[this] := false;
[L9317]               __var_52 := ConstantToRef(687691456480424918299425112376782193233251990427);
[L9318]               TARGET_USER_Consts[this] := ConstantToRef(687691456480424918299425112376782193233251990427);
[L9319]               CONTINUE_MINTING_Consts[this] := true;
[L9333]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9334]   COND FALSE  !(revert)
[L9531]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9532]   COND FALSE  !(revert)
[L9535]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L9535]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9536]   COND FALSE  !(revert)
[L9539]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7020]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]               assume msgsender_MSG != null;
[L7002]               Balance[this] := 0;
[L7024]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L9539]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9540]   COND FALSE  !(revert)
[L9543]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6891]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6892]   COND FALSE  !(revert)
[L6895]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6869]               assume msgsender_MSG != null;
[L6870]               Balance[this] := 0;
[L6871]               balances_BasicToken[this] := zeroRefintArr();
[L6872]               sum_balances0[this] := 0;
[L6873]               totalSupply__BasicToken[this] := 0;
[L6895]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6896]   COND FALSE  !(revert)
[L9543]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9544]   COND FALSE  !(revert)
[L9547]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7072]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7073]   COND FALSE  !(revert)
[L7076]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7020]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]               assume msgsender_MSG != null;
[L7002]               Balance[this] := 0;
[L7024]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7076]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7077]   COND FALSE  !(revert)
[L7080]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6891]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6892]   COND FALSE  !(revert)
[L6895]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6869]               assume msgsender_MSG != null;
[L6870]               Balance[this] := 0;
[L6871]               balances_BasicToken[this] := zeroRefintArr();
[L6872]               sum_balances0[this] := 0;
[L6873]               totalSupply__BasicToken[this] := 0;
[L6895]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6896]   COND FALSE  !(revert)
[L7080]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7081]   COND FALSE  !(revert)
[L7084]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7043]               assume msgsender_MSG != null;
[L7044]               Balance[this] := 0;
[L7045]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7046]               sum_allowed1[this] := 0;
[L7084]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7085]   COND FALSE  !(revert)
[L9547]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9548]   COND FALSE  !(revert)
[L9551]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7679]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7680]   COND FALSE  !(revert)
[L7683]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7020]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]               assume msgsender_MSG != null;
[L7002]               Balance[this] := 0;
[L7024]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7683]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7684]   COND FALSE  !(revert)
[L7687]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6891]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6892]   COND FALSE  !(revert)
[L6895]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6869]               assume msgsender_MSG != null;
[L6870]               Balance[this] := 0;
[L6871]               balances_BasicToken[this] := zeroRefintArr();
[L6872]               sum_balances0[this] := 0;
[L6873]               totalSupply__BasicToken[this] := 0;
[L6895]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6896]   COND FALSE  !(revert)
[L7687]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7688]   COND FALSE  !(revert)
[L7691]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7072]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7073]   COND FALSE  !(revert)
[L7076]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7020]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]               assume msgsender_MSG != null;
[L7002]               Balance[this] := 0;
[L7024]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7076]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7077]   COND FALSE  !(revert)
[L7080]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6891]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6892]   COND FALSE  !(revert)
[L6895]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6869]               assume msgsender_MSG != null;
[L6870]               Balance[this] := 0;
[L6871]               balances_BasicToken[this] := zeroRefintArr();
[L6872]               sum_balances0[this] := 0;
[L6873]               totalSupply__BasicToken[this] := 0;
[L6895]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6896]   COND FALSE  !(revert)
[L7080]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7081]   COND FALSE  !(revert)
[L7084]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7043]               assume msgsender_MSG != null;
[L7044]               Balance[this] := 0;
[L7045]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7046]               sum_allowed1[this] := 0;
[L7084]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7085]   COND FALSE  !(revert)
[L7691]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7692]   COND FALSE  !(revert)
[L7695]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7642]               assume msgsender_MSG != null;
[L7643]               Balance[this] := 0;
[L7644]               chains_FreezableToken[this] := zerointintArr();
[L7645]               sum_chains2[this] := 0;
[L7646]               freezings_FreezableToken[this] := zerointintArr();
[L7647]               sum_freezings3[this] := 0;
[L7648]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7649]               sum_freezingBalance4[this] := 0;
[L7695]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7696]   COND FALSE  !(revert)
[L9551]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9552]   COND FALSE  !(revert)
[L9555]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7297]               assume msgsender_MSG != null;
[L7298]               Balance[this] := 0;
[L7299]               owner_Ownable[this] := null;
[L7301]               owner_Ownable[this] := msgsender_MSG;
[L7314]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7315]   COND FALSE  !(revert)
[L9555]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9556]   COND FALSE  !(revert)
[L9559]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7498]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7499]   COND FALSE  !(revert)
[L7502]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7020]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]               assume msgsender_MSG != null;
[L7002]               Balance[this] := 0;
[L7024]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7502]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7503]   COND FALSE  !(revert)
[L7506]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6891]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6892]   COND FALSE  !(revert)
[L6895]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6869]               assume msgsender_MSG != null;
[L6870]               Balance[this] := 0;
[L6871]               balances_BasicToken[this] := zeroRefintArr();
[L6872]               sum_balances0[this] := 0;
[L6873]               totalSupply__BasicToken[this] := 0;
[L6895]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6896]   COND FALSE  !(revert)
[L7506]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7507]   COND FALSE  !(revert)
[L7510]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7072]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7073]   COND FALSE  !(revert)
[L7076]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7020]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]               assume msgsender_MSG != null;
[L7002]               Balance[this] := 0;
[L7024]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7076]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7077]   COND FALSE  !(revert)
[L7080]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6891]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6892]   COND FALSE  !(revert)
[L6895]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6869]               assume msgsender_MSG != null;
[L6870]               Balance[this] := 0;
[L6871]               balances_BasicToken[this] := zeroRefintArr();
[L6872]               sum_balances0[this] := 0;
[L6873]               totalSupply__BasicToken[this] := 0;
[L6895]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6896]   COND FALSE  !(revert)
[L7080]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7081]   COND FALSE  !(revert)
[L7084]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7043]               assume msgsender_MSG != null;
[L7044]               Balance[this] := 0;
[L7045]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7046]               sum_allowed1[this] := 0;
[L7084]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7085]   COND FALSE  !(revert)
[L7510]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7511]   COND FALSE  !(revert)
[L7514]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7297]               assume msgsender_MSG != null;
[L7298]               Balance[this] := 0;
[L7299]               owner_Ownable[this] := null;
[L7301]               owner_Ownable[this] := msgsender_MSG;
[L7314]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7315]   COND FALSE  !(revert)
[L7514]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7515]   COND FALSE  !(revert)
[L7518]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]               assume msgsender_MSG != null;
[L7463]               Balance[this] := 0;
[L7464]               mintingFinished_MintableToken[this] := false;
[L7518]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7519]   COND FALSE  !(revert)
[L9559]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9560]   COND FALSE  !(revert)
[L9563]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9118]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L9118]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9119]   COND FALSE  !(revert)
[L9122]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7020]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]               assume msgsender_MSG != null;
[L7002]               Balance[this] := 0;
[L7024]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L9122]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9123]   COND FALSE  !(revert)
[L9126]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6891]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6892]   COND FALSE  !(revert)
[L6895]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6869]               assume msgsender_MSG != null;
[L6870]               Balance[this] := 0;
[L6871]               balances_BasicToken[this] := zeroRefintArr();
[L6872]               sum_balances0[this] := 0;
[L6873]               totalSupply__BasicToken[this] := 0;
[L6895]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6896]   COND FALSE  !(revert)
[L9126]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9127]   COND FALSE  !(revert)
[L9130]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7072]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7073]   COND FALSE  !(revert)
[L7076]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7020]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]               assume msgsender_MSG != null;
[L7002]               Balance[this] := 0;
[L7024]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7076]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7077]   COND FALSE  !(revert)
[L7080]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6891]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6892]   COND FALSE  !(revert)
[L6895]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6869]               assume msgsender_MSG != null;
[L6870]               Balance[this] := 0;
[L6871]               balances_BasicToken[this] := zeroRefintArr();
[L6872]               sum_balances0[this] := 0;
[L6873]               totalSupply__BasicToken[this] := 0;
[L6895]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6896]   COND FALSE  !(revert)
[L7080]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7081]   COND FALSE  !(revert)
[L7084]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7043]               assume msgsender_MSG != null;
[L7044]               Balance[this] := 0;
[L7045]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7046]               sum_allowed1[this] := 0;
[L7084]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7085]   COND FALSE  !(revert)
[L9130]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9131]   COND FALSE  !(revert)
[L9134]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7679]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7680]   COND FALSE  !(revert)
[L7683]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7020]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]               assume msgsender_MSG != null;
[L7002]               Balance[this] := 0;
[L7024]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7683]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7684]   COND FALSE  !(revert)
[L7687]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6891]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6892]   COND FALSE  !(revert)
[L6895]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6869]               assume msgsender_MSG != null;
[L6870]               Balance[this] := 0;
[L6871]               balances_BasicToken[this] := zeroRefintArr();
[L6872]               sum_balances0[this] := 0;
[L6873]               totalSupply__BasicToken[this] := 0;
[L6895]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6896]   COND FALSE  !(revert)
[L7687]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7688]   COND FALSE  !(revert)
[L7691]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7072]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7073]   COND FALSE  !(revert)
[L7076]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7020]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]               assume msgsender_MSG != null;
[L7002]               Balance[this] := 0;
[L7024]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7076]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7077]   COND FALSE  !(revert)
[L7080]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6891]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6892]   COND FALSE  !(revert)
[L6895]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6869]               assume msgsender_MSG != null;
[L6870]               Balance[this] := 0;
[L6871]               balances_BasicToken[this] := zeroRefintArr();
[L6872]               sum_balances0[this] := 0;
[L6873]               totalSupply__BasicToken[this] := 0;
[L6895]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6896]   COND FALSE  !(revert)
[L7080]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7081]   COND FALSE  !(revert)
[L7084]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7043]               assume msgsender_MSG != null;
[L7044]               Balance[this] := 0;
[L7045]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7046]               sum_allowed1[this] := 0;
[L7084]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7085]   COND FALSE  !(revert)
[L7691]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7692]   COND FALSE  !(revert)
[L7695]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7642]               assume msgsender_MSG != null;
[L7643]               Balance[this] := 0;
[L7644]               chains_FreezableToken[this] := zerointintArr();
[L7645]               sum_chains2[this] := 0;
[L7646]               freezings_FreezableToken[this] := zerointintArr();
[L7647]               sum_freezings3[this] := 0;
[L7648]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7649]               sum_freezingBalance4[this] := 0;
[L7695]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7696]   COND FALSE  !(revert)
[L9134]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9135]   COND FALSE  !(revert)
[L9138]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7297]               assume msgsender_MSG != null;
[L7298]               Balance[this] := 0;
[L7299]               owner_Ownable[this] := null;
[L7301]               owner_Ownable[this] := msgsender_MSG;
[L7314]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7315]   COND FALSE  !(revert)
[L9138]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9139]   COND FALSE  !(revert)
[L9142]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7498]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7499]   COND FALSE  !(revert)
[L7502]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7020]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]               assume msgsender_MSG != null;
[L7002]               Balance[this] := 0;
[L7024]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7502]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7503]   COND FALSE  !(revert)
[L7506]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6891]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6892]   COND FALSE  !(revert)
[L6895]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6869]               assume msgsender_MSG != null;
[L6870]               Balance[this] := 0;
[L6871]               balances_BasicToken[this] := zeroRefintArr();
[L6872]               sum_balances0[this] := 0;
[L6873]               totalSupply__BasicToken[this] := 0;
[L6895]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6896]   COND FALSE  !(revert)
[L7506]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7507]   COND FALSE  !(revert)
[L7510]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7072]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7073]   COND FALSE  !(revert)
[L7076]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7020]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]               assume msgsender_MSG != null;
[L7002]               Balance[this] := 0;
[L7024]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7076]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7077]   COND FALSE  !(revert)
[L7080]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6891]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6892]   COND FALSE  !(revert)
[L6895]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6869]               assume msgsender_MSG != null;
[L6870]               Balance[this] := 0;
[L6871]               balances_BasicToken[this] := zeroRefintArr();
[L6872]               sum_balances0[this] := 0;
[L6873]               totalSupply__BasicToken[this] := 0;
[L6895]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6896]   COND FALSE  !(revert)
[L7080]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7081]   COND FALSE  !(revert)
[L7084]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7043]               assume msgsender_MSG != null;
[L7044]               Balance[this] := 0;
[L7045]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7046]               sum_allowed1[this] := 0;
[L7084]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7085]   COND FALSE  !(revert)
[L7510]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7511]   COND FALSE  !(revert)
[L7514]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7297]               assume msgsender_MSG != null;
[L7298]               Balance[this] := 0;
[L7299]               owner_Ownable[this] := null;
[L7301]               owner_Ownable[this] := msgsender_MSG;
[L7314]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7315]   COND FALSE  !(revert)
[L7514]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7515]   COND FALSE  !(revert)
[L7518]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]               assume msgsender_MSG != null;
[L7463]               Balance[this] := 0;
[L7464]               mintingFinished_MintableToken[this] := false;
[L7518]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7519]   COND FALSE  !(revert)
[L9142]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9143]   COND FALSE  !(revert)
[L9146]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9075]               assume msgsender_MSG != null;
[L9076]               Balance[this] := 0;
[L9146]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9147]   COND FALSE  !(revert)
[L9563]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9564]   COND FALSE  !(revert)
[L9567]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8862]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L8862]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8863]   COND FALSE  !(revert)
[L8866]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6891]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6892]   COND FALSE  !(revert)
[L6895]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6869]               assume msgsender_MSG != null;
[L6870]               Balance[this] := 0;
[L6871]               balances_BasicToken[this] := zeroRefintArr();
[L6872]               sum_balances0[this] := 0;
[L6873]               totalSupply__BasicToken[this] := 0;
[L6895]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6896]   COND FALSE  !(revert)
[L8866]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8867]   COND FALSE  !(revert)
[L8870]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8839]               assume msgsender_MSG != null;
[L8840]               Balance[this] := 0;
[L8870]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8871]   COND FALSE  !(revert)
[L9567]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9568]   COND FALSE  !(revert)
[L9571]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8988]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7297]               assume msgsender_MSG != null;
[L7298]               Balance[this] := 0;
[L7299]               owner_Ownable[this] := null;
[L7301]               owner_Ownable[this] := msgsender_MSG;
[L7314]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7315]   COND FALSE  !(revert)
[L8988]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8989]   COND FALSE  !(revert)
[L8992]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8968]               assume msgsender_MSG != null;
[L8969]               Balance[this] := 0;
[L8970]               paused_Pausable[this] := false;
[L8992]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8993]   COND FALSE  !(revert)
[L9571]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9572]   COND FALSE  !(revert)
[L9575]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9459]               assume msgsender_MSG != null;
[L9460]               Balance[this] := 0;
[L9461]               initialized_MainToken[this] := false;
[L9463]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9802]   COND TRUE   !!initialized_MainToken[this]
[L9803]               revert := true;
[L9463]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9464]   COND TRUE   revert
[L9575]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9576]   COND TRUE   revert
[L4433]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4434]               assume !revert && gas >= 0;
[L14838]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14839]              assume !revert && gas >= 0;
[L14842]  CALL        call CorralChoice_MainToken(this);
[L14499]              havoc msgsender_MSG;
[L14500]              havoc msgvalue_MSG;
[L14501]              havoc choice;
[L14502]              havoc __ret_0_totalSupply;
[L14503]              havoc _owner_s729;
[L14504]              havoc balance_s729;
[L14505]              havoc _to_s1572;
[L14506]              havoc _value_s1572;
[L14507]              havoc _success_s1572;
[L14508]              havoc _owner_s395;
[L14509]              havoc _spender_s395;
[L14510]              havoc __ret_0_allowance;
[L14511]              havoc _from_s1551;
[L14512]              havoc _to_s1551;
[L14513]              havoc _value_s1551;
[L14514]              havoc _success_s1551;
[L14515]              havoc _spender_s379;
[L14516]              havoc _value_s379;
[L14517]              havoc __ret_0_approve;
[L14518]              havoc _spender_s437;
[L14519]              havoc _addedValue_s437;
[L14520]              havoc __ret_0_increaseApproval;
[L14521]              havoc _spender_s497;
[L14522]              havoc _subtractedValue_s497;
[L14523]              havoc __ret_0_decreaseApproval;
[L14524]              havoc __ret_0_owner;
[L14525]              havoc _newOwner_s558;
[L14526]              havoc __ret_0_mintingFinished;
[L14527]              havoc _to_s664;
[L14528]              havoc _amount_s664;
[L14529]              havoc __ret_0_mint;
[L14530]              havoc __ret_0_finishMinting;
[L14531]              havoc _owner_s742;
[L14532]              havoc balance_s742;
[L14533]              havoc _owner_s754;
[L14534]              havoc balance_s754;
[L14535]              havoc _addr_s792;
[L14536]              havoc count_s792;
[L14537]              havoc _addr_s849;
[L14538]              havoc _index_s849;
[L14539]              havoc _release_s849;
[L14540]              havoc _balance_s849;
[L14541]              havoc _to_s938;
[L14542]              havoc _amount_s938;
[L14543]              havoc _until_s938;
[L14544]              havoc tokens_s1107;
[L14545]              havoc _value_s1261;
[L14546]              havoc __ret_0_paused;
[L14547]              havoc _to_s1449;
[L14548]              havoc _amount_s1449;
[L14549]              havoc _until_s1449;
[L14550]              havoc __ret_0_mintAndFreeze;
[L14551]              havoc __ret_0_TOKEN_DECIMALS;
[L14552]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14553]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14554]              havoc __ret_0_TOKEN_NAME;
[L14555]              havoc __ret_0_TOKEN_SYMBOL;
[L14556]              havoc __ret_0_PAUSED;
[L14557]              havoc __ret_0_TARGET_USER;
[L14558]              havoc __ret_0_CONTINUE_MINTING;
[L14559]              havoc __ret_0_initialized;
[L14560]              havoc _name_s1511;
[L14561]              havoc _symbol_s1519;
[L14562]              havoc _decimals_s1527;
[L14563]              havoc tmpNow;
[L14564]              havoc gas;
[L14565]              assume gas > 4000000 && gas <= 8000000;
[L14566]              tmpNow := now;
[L14567]              havoc now;
[L14568]              assume now > tmpNow;
[L14569]              assume msgsender_MSG != null;
[L14570]              assume DType[msgsender_MSG] != ERC20Basic;
[L14571]              assume DType[msgsender_MSG] != SafeMath;
[L14572]              assume DType[msgsender_MSG] != BasicToken;
[L14573]              assume DType[msgsender_MSG] != ERC20;
[L14574]              assume DType[msgsender_MSG] != StandardToken;
[L14575]              assume DType[msgsender_MSG] != Ownable;
[L14576]              assume DType[msgsender_MSG] != MintableToken;
[L14577]              assume DType[msgsender_MSG] != FreezableToken;
[L14578]              assume DType[msgsender_MSG] != BurnableToken;
[L14579]              assume DType[msgsender_MSG] != Pausable;
[L14580]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14581]              assume DType[msgsender_MSG] != Consts;
[L14582]              assume DType[msgsender_MSG] != MainToken;
[L14583]              Alloc[msgsender_MSG] := true;
[L14584]  COND FALSE  !(choice == 38)
[L14590]  COND FALSE  !(choice == 37)
[L14596]  COND FALSE  !(choice == 36)
[L14603]  COND FALSE  !(choice == 35)
[L14609]  COND FALSE  !(choice == 34)
[L14616]  COND TRUE   choice == 33
[L14617]              gas := gas - 21000;
[L14618]  COND TRUE   gas >= 0
[L14619]              assume _value_s379 >= 0 && _value_s379 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14620]              assume msgvalue_MSG == 0;
[L14621]  CALL        call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != _spender_s379;
[L3]                  call_approve_StandardToken0 := true;
[L3]                  call_approve_StandardToken0 := false;
[L3]                  revert := revert_hold;
[L921]                havoc __exception;
[L922]                revert := false;
[L923]    COND FALSE  !(__exception)
[L962]    CALL        call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L7190]               sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_StandardToken[this][msgsender_MSG][_spender_s379];
[L7191]               allowed_StandardToken[this][msgsender_MSG][_spender_s379] := _value_s379;
[L7192]               sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_StandardToken[this][msgsender_MSG][_spender_s379];
[L7193]               assert { :EventEmitted "Approval_StandardToken" } true;
[L7194]               __ret_0_ := true;
[L962]    RET         call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L963]                assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !(((((((((((__ret_0_ == true && allowed_StandardToken[this][msgsender_MSG][_spender_s379] == _value_s379) && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L3]                  revert := revert_hold;
[L14621]  RET         call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L14842]  RET         call CorralChoice_MainToken(this);

Loop:
[L14842]  CALL        call CorralChoice_MainToken(this);
[L14499]              havoc msgsender_MSG;
[L14500]              havoc msgvalue_MSG;
[L14501]              havoc choice;
[L14502]              havoc __ret_0_totalSupply;
[L14503]              havoc _owner_s729;
[L14504]              havoc balance_s729;
[L14505]              havoc _to_s1572;
[L14506]              havoc _value_s1572;
[L14507]              havoc _success_s1572;
[L14508]              havoc _owner_s395;
[L14509]              havoc _spender_s395;
[L14510]              havoc __ret_0_allowance;
[L14511]              havoc _from_s1551;
[L14512]              havoc _to_s1551;
[L14513]              havoc _value_s1551;
[L14514]              havoc _success_s1551;
[L14515]              havoc _spender_s379;
[L14516]              havoc _value_s379;
[L14517]              havoc __ret_0_approve;
[L14518]              havoc _spender_s437;
[L14519]              havoc _addedValue_s437;
[L14520]              havoc __ret_0_increaseApproval;
[L14521]              havoc _spender_s497;
[L14522]              havoc _subtractedValue_s497;
[L14523]              havoc __ret_0_decreaseApproval;
[L14524]              havoc __ret_0_owner;
[L14525]              havoc _newOwner_s558;
[L14526]              havoc __ret_0_mintingFinished;
[L14527]              havoc _to_s664;
[L14528]              havoc _amount_s664;
[L14529]              havoc __ret_0_mint;
[L14530]              havoc __ret_0_finishMinting;
[L14531]              havoc _owner_s742;
[L14532]              havoc balance_s742;
[L14533]              havoc _owner_s754;
[L14534]              havoc balance_s754;
[L14535]              havoc _addr_s792;
[L14536]              havoc count_s792;
[L14537]              havoc _addr_s849;
[L14538]              havoc _index_s849;
[L14539]              havoc _release_s849;
[L14540]              havoc _balance_s849;
[L14541]              havoc _to_s938;
[L14542]              havoc _amount_s938;
[L14543]              havoc _until_s938;
[L14544]              havoc tokens_s1107;
[L14545]              havoc _value_s1261;
[L14546]              havoc __ret_0_paused;
[L14547]              havoc _to_s1449;
[L14548]              havoc _amount_s1449;
[L14549]              havoc _until_s1449;
[L14550]              havoc __ret_0_mintAndFreeze;
[L14551]              havoc __ret_0_TOKEN_DECIMALS;
[L14552]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14553]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14554]              havoc __ret_0_TOKEN_NAME;
[L14555]              havoc __ret_0_TOKEN_SYMBOL;
[L14556]              havoc __ret_0_PAUSED;
[L14557]              havoc __ret_0_TARGET_USER;
[L14558]              havoc __ret_0_CONTINUE_MINTING;
[L14559]              havoc __ret_0_initialized;
[L14560]              havoc _name_s1511;
[L14561]              havoc _symbol_s1519;
[L14562]              havoc _decimals_s1527;
[L14563]              havoc tmpNow;
[L14564]              havoc gas;
[L14565]              assume gas > 4000000 && gas <= 8000000;
[L14566]              tmpNow := now;
[L14567]              havoc now;
[L14568]              assume now > tmpNow;
[L14569]              assume msgsender_MSG != null;
[L14570]              assume DType[msgsender_MSG] != ERC20Basic;
[L14571]              assume DType[msgsender_MSG] != SafeMath;
[L14572]              assume DType[msgsender_MSG] != BasicToken;
[L14573]              assume DType[msgsender_MSG] != ERC20;
[L14574]              assume DType[msgsender_MSG] != StandardToken;
[L14575]              assume DType[msgsender_MSG] != Ownable;
[L14576]              assume DType[msgsender_MSG] != MintableToken;
[L14577]              assume DType[msgsender_MSG] != FreezableToken;
[L14578]              assume DType[msgsender_MSG] != BurnableToken;
[L14579]              assume DType[msgsender_MSG] != Pausable;
[L14580]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14581]              assume DType[msgsender_MSG] != Consts;
[L14582]              assume DType[msgsender_MSG] != MainToken;
[L14583]              Alloc[msgsender_MSG] := true;
[L14584]  COND FALSE  !(choice == 38)
[L14590]  COND FALSE  !(choice == 37)
[L14596]  COND FALSE  !(choice == 36)
[L14603]  COND FALSE  !(choice == 35)
[L14609]  COND FALSE  !(choice == 34)
[L14616]  COND TRUE   choice == 33
[L14617]              gas := gas - 21000;
[L14618]  COND TRUE   gas >= 0
[L14619]              assume _value_s379 >= 0 && _value_s379 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14620]              assume msgvalue_MSG == 0;
[L14621]  CALL        call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != _spender_s379;
[L3]                  call_approve_StandardToken0 := true;
[L3]                  call_approve_StandardToken0 := false;
[L3]                  revert := revert_hold;
[L921]                havoc __exception;
[L922]                revert := false;
[L923]    COND FALSE  !(__exception)
[L962]    CALL        call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L7190]               sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_StandardToken[this][msgsender_MSG][_spender_s379];
[L7191]               allowed_StandardToken[this][msgsender_MSG][_spender_s379] := _value_s379;
[L7192]               sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_StandardToken[this][msgsender_MSG][_spender_s379];
[L7193]               assert { :EventEmitted "Approval_StandardToken" } true;
[L7194]               __ret_0_ := true;
[L962]    RET         call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L963]                assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !(((((((((((__ret_0_ == true && allowed_StandardToken[this][msgsender_MSG][_spender_s379] == _value_s379) && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L3]                  revert := revert_hold;
[L14621]  RET         call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L14842]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:17:40,009 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:17:40,010 INFO  L82        PathProgramCache]: Analyzing trace with hash -1950619372, now seen corresponding path program 1 times
[2020-11-24 21:17:40,011 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:17:40,049 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:17:40,645 INFO  L134       CoverageAnalysis]: Checked inductivity of 9823 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 9823 trivial. 0 not checked.
[2020-11-24 21:17:40,645 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:17:40,645 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-24 21:17:40,646 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:17:40,647 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-24 21:17:40,647 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-24 21:17:40,647 INFO  L87              Difference]: Start difference. First operand 8684 states and 9825 transitions. cyclomatic complexity: 1161 Second operand 3 states.
[2020-11-24 21:17:40,779 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:17:40,780 INFO  L93              Difference]: Finished difference Result 9766 states and 11009 transitions.
[2020-11-24 21:17:40,780 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-24 21:17:40,780 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9766 states and 11009 transitions.
[2020-11-24 21:17:40,803 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 21:17:40,836 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9766 states to 9418 states and 10601 transitions.
[2020-11-24 21:17:40,837 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2152
[2020-11-24 21:17:40,838 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2181
[2020-11-24 21:17:40,838 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9418 states and 10601 transitions.
[2020-11-24 21:17:40,847 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:17:40,847 INFO  L728         BuchiCegarLoop]: Abstraction has 9418 states and 10601 transitions.
[2020-11-24 21:17:40,855 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9418 states and 10601 transitions.
[2020-11-24 21:17:40,927 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9418 to 8731.
[2020-11-24 21:17:40,927 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8731 states.
[2020-11-24 21:17:40,938 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8731 states to 8731 states and 9732 transitions.
[2020-11-24 21:17:40,938 INFO  L751         BuchiCegarLoop]: Abstraction has 8731 states and 9732 transitions.
[2020-11-24 21:17:40,938 INFO  L631         BuchiCegarLoop]: Abstraction has 8731 states and 9732 transitions.
[2020-11-24 21:17:40,938 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-24 21:17:40,938 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8731 states and 9732 transitions.
[2020-11-24 21:17:40,948 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 21:17:40,949 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:17:40,949 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:17:40,955 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:17:40,955 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_approve_StandardToken0 := false;
[L3]                  call_approve_StandardToken0 := false;
[L3]      CALL        call main();
[L3]                  havoc p2;
[L3]                  havoc p1;
[L14832]              assume null == 0;
[L14833]  CALL        call this := FreshRefGenerator__success();
[L6722]               havoc newRef;
[L6723]               assume Alloc[newRef] == false;
[L6724]               Alloc[newRef] := true;
[L6725]               assume newRef != null;
[L14833]  RET         call this := FreshRefGenerator__success();
[L14834]              assume now >= 0;
[L14835]              assume DType[this] == MainToken;
[L14836]              assume msgvalue_MSG == 0;
[L14837]              gas := gas - 53000;
[L14838]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4392]               havoc __exception;
[L4393]               revert := false;
[L4394]   COND FALSE  !(__exception)
[L4433]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9531]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9333]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9309]               assume msgsender_MSG != null;
[L9310]               Balance[this] := 0;
[L9311]               TOKEN_DECIMALS_Consts[this] := 18;
[L9312]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9313]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9314]               TOKEN_NAME_Consts[this] := -1142012261;
[L9315]               TOKEN_SYMBOL_Consts[this] := 360831912;
[L9316]               PAUSED_Consts[this] := false;
[L9317]               __var_52 := ConstantToRef(687691456480424918299425112376782193233251990427);
[L9318]               TARGET_USER_Consts[this] := ConstantToRef(687691456480424918299425112376782193233251990427);
[L9319]               CONTINUE_MINTING_Consts[this] := true;
[L9333]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9334]   COND FALSE  !(revert)
[L9531]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9532]   COND FALSE  !(revert)
[L9535]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L9535]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9536]   COND FALSE  !(revert)
[L9539]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7020]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]               assume msgsender_MSG != null;
[L7002]               Balance[this] := 0;
[L7024]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L9539]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9540]   COND FALSE  !(revert)
[L9543]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6891]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6892]   COND FALSE  !(revert)
[L6895]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6869]               assume msgsender_MSG != null;
[L6870]               Balance[this] := 0;
[L6871]               balances_BasicToken[this] := zeroRefintArr();
[L6872]               sum_balances0[this] := 0;
[L6873]               totalSupply__BasicToken[this] := 0;
[L6895]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6896]   COND FALSE  !(revert)
[L9543]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9544]   COND FALSE  !(revert)
[L9547]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7072]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7073]   COND FALSE  !(revert)
[L7076]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7020]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]               assume msgsender_MSG != null;
[L7002]               Balance[this] := 0;
[L7024]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7076]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7077]   COND FALSE  !(revert)
[L7080]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6891]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6892]   COND FALSE  !(revert)
[L6895]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6869]               assume msgsender_MSG != null;
[L6870]               Balance[this] := 0;
[L6871]               balances_BasicToken[this] := zeroRefintArr();
[L6872]               sum_balances0[this] := 0;
[L6873]               totalSupply__BasicToken[this] := 0;
[L6895]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6896]   COND FALSE  !(revert)
[L7080]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7081]   COND FALSE  !(revert)
[L7084]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7043]               assume msgsender_MSG != null;
[L7044]               Balance[this] := 0;
[L7045]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7046]               sum_allowed1[this] := 0;
[L7084]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7085]   COND FALSE  !(revert)
[L9547]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9548]   COND FALSE  !(revert)
[L9551]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7679]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7680]   COND FALSE  !(revert)
[L7683]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7020]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]               assume msgsender_MSG != null;
[L7002]               Balance[this] := 0;
[L7024]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7683]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7684]   COND FALSE  !(revert)
[L7687]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6891]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6892]   COND FALSE  !(revert)
[L6895]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6869]               assume msgsender_MSG != null;
[L6870]               Balance[this] := 0;
[L6871]               balances_BasicToken[this] := zeroRefintArr();
[L6872]               sum_balances0[this] := 0;
[L6873]               totalSupply__BasicToken[this] := 0;
[L6895]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6896]   COND FALSE  !(revert)
[L7687]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7688]   COND FALSE  !(revert)
[L7691]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7072]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7073]   COND FALSE  !(revert)
[L7076]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7020]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]               assume msgsender_MSG != null;
[L7002]               Balance[this] := 0;
[L7024]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7076]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7077]   COND FALSE  !(revert)
[L7080]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6891]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6892]   COND FALSE  !(revert)
[L6895]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6869]               assume msgsender_MSG != null;
[L6870]               Balance[this] := 0;
[L6871]               balances_BasicToken[this] := zeroRefintArr();
[L6872]               sum_balances0[this] := 0;
[L6873]               totalSupply__BasicToken[this] := 0;
[L6895]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6896]   COND FALSE  !(revert)
[L7080]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7081]   COND FALSE  !(revert)
[L7084]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7043]               assume msgsender_MSG != null;
[L7044]               Balance[this] := 0;
[L7045]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7046]               sum_allowed1[this] := 0;
[L7084]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7085]   COND FALSE  !(revert)
[L7691]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7692]   COND FALSE  !(revert)
[L7695]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7642]               assume msgsender_MSG != null;
[L7643]               Balance[this] := 0;
[L7644]               chains_FreezableToken[this] := zerointintArr();
[L7645]               sum_chains2[this] := 0;
[L7646]               freezings_FreezableToken[this] := zerointintArr();
[L7647]               sum_freezings3[this] := 0;
[L7648]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7649]               sum_freezingBalance4[this] := 0;
[L7695]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7696]   COND FALSE  !(revert)
[L9551]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9552]   COND FALSE  !(revert)
[L9555]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7297]               assume msgsender_MSG != null;
[L7298]               Balance[this] := 0;
[L7299]               owner_Ownable[this] := null;
[L7301]               owner_Ownable[this] := msgsender_MSG;
[L7314]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7315]   COND FALSE  !(revert)
[L9555]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9556]   COND FALSE  !(revert)
[L9559]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7498]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7499]   COND FALSE  !(revert)
[L7502]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7020]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]               assume msgsender_MSG != null;
[L7002]               Balance[this] := 0;
[L7024]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7502]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7503]   COND FALSE  !(revert)
[L7506]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6891]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6892]   COND FALSE  !(revert)
[L6895]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6869]               assume msgsender_MSG != null;
[L6870]               Balance[this] := 0;
[L6871]               balances_BasicToken[this] := zeroRefintArr();
[L6872]               sum_balances0[this] := 0;
[L6873]               totalSupply__BasicToken[this] := 0;
[L6895]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6896]   COND FALSE  !(revert)
[L7506]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7507]   COND FALSE  !(revert)
[L7510]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7072]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7073]   COND FALSE  !(revert)
[L7076]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7020]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]               assume msgsender_MSG != null;
[L7002]               Balance[this] := 0;
[L7024]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7076]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7077]   COND FALSE  !(revert)
[L7080]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6891]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6892]   COND FALSE  !(revert)
[L6895]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6869]               assume msgsender_MSG != null;
[L6870]               Balance[this] := 0;
[L6871]               balances_BasicToken[this] := zeroRefintArr();
[L6872]               sum_balances0[this] := 0;
[L6873]               totalSupply__BasicToken[this] := 0;
[L6895]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6896]   COND FALSE  !(revert)
[L7080]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7081]   COND FALSE  !(revert)
[L7084]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7043]               assume msgsender_MSG != null;
[L7044]               Balance[this] := 0;
[L7045]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7046]               sum_allowed1[this] := 0;
[L7084]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7085]   COND FALSE  !(revert)
[L7510]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7511]   COND FALSE  !(revert)
[L7514]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7297]               assume msgsender_MSG != null;
[L7298]               Balance[this] := 0;
[L7299]               owner_Ownable[this] := null;
[L7301]               owner_Ownable[this] := msgsender_MSG;
[L7314]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7315]   COND FALSE  !(revert)
[L7514]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7515]   COND FALSE  !(revert)
[L7518]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]               assume msgsender_MSG != null;
[L7463]               Balance[this] := 0;
[L7464]               mintingFinished_MintableToken[this] := false;
[L7518]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7519]   COND FALSE  !(revert)
[L9559]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9560]   COND FALSE  !(revert)
[L9563]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9118]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L9118]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9119]   COND FALSE  !(revert)
[L9122]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7020]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]               assume msgsender_MSG != null;
[L7002]               Balance[this] := 0;
[L7024]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L9122]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9123]   COND FALSE  !(revert)
[L9126]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6891]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6892]   COND FALSE  !(revert)
[L6895]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6869]               assume msgsender_MSG != null;
[L6870]               Balance[this] := 0;
[L6871]               balances_BasicToken[this] := zeroRefintArr();
[L6872]               sum_balances0[this] := 0;
[L6873]               totalSupply__BasicToken[this] := 0;
[L6895]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6896]   COND FALSE  !(revert)
[L9126]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9127]   COND FALSE  !(revert)
[L9130]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7072]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7073]   COND FALSE  !(revert)
[L7076]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7020]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]               assume msgsender_MSG != null;
[L7002]               Balance[this] := 0;
[L7024]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7076]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7077]   COND FALSE  !(revert)
[L7080]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6891]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6892]   COND FALSE  !(revert)
[L6895]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6869]               assume msgsender_MSG != null;
[L6870]               Balance[this] := 0;
[L6871]               balances_BasicToken[this] := zeroRefintArr();
[L6872]               sum_balances0[this] := 0;
[L6873]               totalSupply__BasicToken[this] := 0;
[L6895]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6896]   COND FALSE  !(revert)
[L7080]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7081]   COND FALSE  !(revert)
[L7084]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7043]               assume msgsender_MSG != null;
[L7044]               Balance[this] := 0;
[L7045]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7046]               sum_allowed1[this] := 0;
[L7084]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7085]   COND FALSE  !(revert)
[L9130]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9131]   COND FALSE  !(revert)
[L9134]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7679]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7680]   COND FALSE  !(revert)
[L7683]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7020]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]               assume msgsender_MSG != null;
[L7002]               Balance[this] := 0;
[L7024]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7683]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7684]   COND FALSE  !(revert)
[L7687]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6891]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6892]   COND FALSE  !(revert)
[L6895]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6869]               assume msgsender_MSG != null;
[L6870]               Balance[this] := 0;
[L6871]               balances_BasicToken[this] := zeroRefintArr();
[L6872]               sum_balances0[this] := 0;
[L6873]               totalSupply__BasicToken[this] := 0;
[L6895]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6896]   COND FALSE  !(revert)
[L7687]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7688]   COND FALSE  !(revert)
[L7691]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7072]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7073]   COND FALSE  !(revert)
[L7076]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7020]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]               assume msgsender_MSG != null;
[L7002]               Balance[this] := 0;
[L7024]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7076]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7077]   COND FALSE  !(revert)
[L7080]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6891]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6892]   COND FALSE  !(revert)
[L6895]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6869]               assume msgsender_MSG != null;
[L6870]               Balance[this] := 0;
[L6871]               balances_BasicToken[this] := zeroRefintArr();
[L6872]               sum_balances0[this] := 0;
[L6873]               totalSupply__BasicToken[this] := 0;
[L6895]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6896]   COND FALSE  !(revert)
[L7080]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7081]   COND FALSE  !(revert)
[L7084]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7043]               assume msgsender_MSG != null;
[L7044]               Balance[this] := 0;
[L7045]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7046]               sum_allowed1[this] := 0;
[L7084]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7085]   COND FALSE  !(revert)
[L7691]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7692]   COND FALSE  !(revert)
[L7695]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7642]               assume msgsender_MSG != null;
[L7643]               Balance[this] := 0;
[L7644]               chains_FreezableToken[this] := zerointintArr();
[L7645]               sum_chains2[this] := 0;
[L7646]               freezings_FreezableToken[this] := zerointintArr();
[L7647]               sum_freezings3[this] := 0;
[L7648]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7649]               sum_freezingBalance4[this] := 0;
[L7695]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7696]   COND FALSE  !(revert)
[L9134]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9135]   COND FALSE  !(revert)
[L9138]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7297]               assume msgsender_MSG != null;
[L7298]               Balance[this] := 0;
[L7299]               owner_Ownable[this] := null;
[L7301]               owner_Ownable[this] := msgsender_MSG;
[L7314]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7315]   COND FALSE  !(revert)
[L9138]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9139]   COND FALSE  !(revert)
[L9142]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7498]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7499]   COND FALSE  !(revert)
[L7502]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7020]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]               assume msgsender_MSG != null;
[L7002]               Balance[this] := 0;
[L7024]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7502]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7503]   COND FALSE  !(revert)
[L7506]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6891]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6892]   COND FALSE  !(revert)
[L6895]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6869]               assume msgsender_MSG != null;
[L6870]               Balance[this] := 0;
[L6871]               balances_BasicToken[this] := zeroRefintArr();
[L6872]               sum_balances0[this] := 0;
[L6873]               totalSupply__BasicToken[this] := 0;
[L6895]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6896]   COND FALSE  !(revert)
[L7506]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7507]   COND FALSE  !(revert)
[L7510]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7072]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7073]   COND FALSE  !(revert)
[L7076]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7020]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]               assume msgsender_MSG != null;
[L7002]               Balance[this] := 0;
[L7024]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7076]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7077]   COND FALSE  !(revert)
[L7080]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6891]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6892]   COND FALSE  !(revert)
[L6895]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6869]               assume msgsender_MSG != null;
[L6870]               Balance[this] := 0;
[L6871]               balances_BasicToken[this] := zeroRefintArr();
[L6872]               sum_balances0[this] := 0;
[L6873]               totalSupply__BasicToken[this] := 0;
[L6895]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6896]   COND FALSE  !(revert)
[L7080]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7081]   COND FALSE  !(revert)
[L7084]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7043]               assume msgsender_MSG != null;
[L7044]               Balance[this] := 0;
[L7045]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7046]               sum_allowed1[this] := 0;
[L7084]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7085]   COND FALSE  !(revert)
[L7510]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7511]   COND FALSE  !(revert)
[L7514]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7297]               assume msgsender_MSG != null;
[L7298]               Balance[this] := 0;
[L7299]               owner_Ownable[this] := null;
[L7301]               owner_Ownable[this] := msgsender_MSG;
[L7314]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7315]   COND FALSE  !(revert)
[L7514]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7515]   COND FALSE  !(revert)
[L7518]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]               assume msgsender_MSG != null;
[L7463]               Balance[this] := 0;
[L7464]               mintingFinished_MintableToken[this] := false;
[L7518]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7519]   COND FALSE  !(revert)
[L9142]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9143]   COND FALSE  !(revert)
[L9146]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9075]               assume msgsender_MSG != null;
[L9076]               Balance[this] := 0;
[L9146]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9147]   COND FALSE  !(revert)
[L9563]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9564]   COND FALSE  !(revert)
[L9567]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8862]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L8862]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8863]   COND FALSE  !(revert)
[L8866]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6891]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6892]   COND FALSE  !(revert)
[L6895]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6869]               assume msgsender_MSG != null;
[L6870]               Balance[this] := 0;
[L6871]               balances_BasicToken[this] := zeroRefintArr();
[L6872]               sum_balances0[this] := 0;
[L6873]               totalSupply__BasicToken[this] := 0;
[L6895]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6896]   COND FALSE  !(revert)
[L8866]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8867]   COND FALSE  !(revert)
[L8870]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8839]               assume msgsender_MSG != null;
[L8840]               Balance[this] := 0;
[L8870]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8871]   COND FALSE  !(revert)
[L9567]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9568]   COND FALSE  !(revert)
[L9571]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8988]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7297]               assume msgsender_MSG != null;
[L7298]               Balance[this] := 0;
[L7299]               owner_Ownable[this] := null;
[L7301]               owner_Ownable[this] := msgsender_MSG;
[L7314]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7315]   COND FALSE  !(revert)
[L8988]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8989]   COND FALSE  !(revert)
[L8992]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8968]               assume msgsender_MSG != null;
[L8969]               Balance[this] := 0;
[L8970]               paused_Pausable[this] := false;
[L8992]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8993]   COND FALSE  !(revert)
[L9571]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9572]   COND FALSE  !(revert)
[L9575]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9459]               assume msgsender_MSG != null;
[L9460]               Balance[this] := 0;
[L9461]               initialized_MainToken[this] := false;
[L9463]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9802]   COND FALSE  !(!!initialized_MainToken[this])
[L9806]               initialized_MainToken[this] := true;
[L9807]   COND FALSE  !(PAUSED_Consts[this])
[L9817]               havoc addresses_s1709;
[L9818]               __var_57 := ConstantToRef(389942227696498629531603431436390714308169371997);
[L9819]               M_int_Ref[addresses_s1709][0] := __var_57;
[L9820]               __var_58 := ConstantToRef(389942227696498629531603431436390714308169371997);
[L9821]               M_int_Ref[addresses_s1709][1] := __var_58;
[L9822]               havoc amounts_s1709;
[L9823]               __var_59 := 48000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9824]               sum[amounts_s1709] := sum[amounts_s1709] - M_int_int[amounts_s1709][0];
[L9825]               M_int_int[amounts_s1709][0] := __var_59;
[L9826]               sum[amounts_s1709] := sum[amounts_s1709] + M_int_int[amounts_s1709][0];
[L9827]               __var_60 := 6000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9828]               sum[amounts_s1709] := sum[amounts_s1709] - M_int_int[amounts_s1709][1];
[L9829]               M_int_int[amounts_s1709][1] := __var_60;
[L9830]               sum[amounts_s1709] := sum[amounts_s1709] + M_int_int[amounts_s1709][1];
[L9831]               havoc freezes_s1709;
[L9832]               __var_61 := 0 % 18446744073709551616;
[L9833]               sum[freezes_s1709] := sum[freezes_s1709] - M_int_int[freezes_s1709][0];
[L9834]               M_int_int[freezes_s1709][0] := __var_61;
[L9835]               sum[freezes_s1709] := sum[freezes_s1709] + M_int_int[freezes_s1709][0];
[L9836]               __var_62 := 0 % 18446744073709551616;
[L9837]               sum[freezes_s1709] := sum[freezes_s1709] - M_int_int[freezes_s1709][1];
[L9838]               M_int_int[freezes_s1709][1] := __var_62;
[L9839]               sum[freezes_s1709] := sum[freezes_s1709] + M_int_int[freezes_s1709][1];
[L9840]               i_s1709 := 0;
[L9841]   COND FALSE  !(i_s1709 < Length[addresses_s1709])
[L9865]   COND FALSE  !(!CONTINUE_MINTING_Consts[this])
[L9875]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9463]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9464]   COND FALSE  !(revert)
[L9467]   COND TRUE   DType[this] == MainToken
[L9468]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7381]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12786]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7381]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7382]   COND FALSE  !(revert)
[L7385]   COND TRUE   DType[this] == MainToken
[L7386]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7429]               __var_11 := null;
[L7430]   COND FALSE  !(!(_newOwner_s581 != null))
[L7434]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7435]               owner_Ownable[this] := _newOwner_s581;
[L7386]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7387]   COND FALSE  !(revert)
[L9468]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9469]   COND FALSE  !(revert)
[L9575]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9576]   COND FALSE  !(revert)
[L4433]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4434]               assume !revert && gas >= 0;
[L14838]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14839]              assume !revert && gas >= 0;
[L14842]  CALL        call CorralChoice_MainToken(this);
[L14499]              havoc msgsender_MSG;
[L14500]              havoc msgvalue_MSG;
[L14501]              havoc choice;
[L14502]              havoc __ret_0_totalSupply;
[L14503]              havoc _owner_s729;
[L14504]              havoc balance_s729;
[L14505]              havoc _to_s1572;
[L14506]              havoc _value_s1572;
[L14507]              havoc _success_s1572;
[L14508]              havoc _owner_s395;
[L14509]              havoc _spender_s395;
[L14510]              havoc __ret_0_allowance;
[L14511]              havoc _from_s1551;
[L14512]              havoc _to_s1551;
[L14513]              havoc _value_s1551;
[L14514]              havoc _success_s1551;
[L14515]              havoc _spender_s379;
[L14516]              havoc _value_s379;
[L14517]              havoc __ret_0_approve;
[L14518]              havoc _spender_s437;
[L14519]              havoc _addedValue_s437;
[L14520]              havoc __ret_0_increaseApproval;
[L14521]              havoc _spender_s497;
[L14522]              havoc _subtractedValue_s497;
[L14523]              havoc __ret_0_decreaseApproval;
[L14524]              havoc __ret_0_owner;
[L14525]              havoc _newOwner_s558;
[L14526]              havoc __ret_0_mintingFinished;
[L14527]              havoc _to_s664;
[L14528]              havoc _amount_s664;
[L14529]              havoc __ret_0_mint;
[L14530]              havoc __ret_0_finishMinting;
[L14531]              havoc _owner_s742;
[L14532]              havoc balance_s742;
[L14533]              havoc _owner_s754;
[L14534]              havoc balance_s754;
[L14535]              havoc _addr_s792;
[L14536]              havoc count_s792;
[L14537]              havoc _addr_s849;
[L14538]              havoc _index_s849;
[L14539]              havoc _release_s849;
[L14540]              havoc _balance_s849;
[L14541]              havoc _to_s938;
[L14542]              havoc _amount_s938;
[L14543]              havoc _until_s938;
[L14544]              havoc tokens_s1107;
[L14545]              havoc _value_s1261;
[L14546]              havoc __ret_0_paused;
[L14547]              havoc _to_s1449;
[L14548]              havoc _amount_s1449;
[L14549]              havoc _until_s1449;
[L14550]              havoc __ret_0_mintAndFreeze;
[L14551]              havoc __ret_0_TOKEN_DECIMALS;
[L14552]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14553]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14554]              havoc __ret_0_TOKEN_NAME;
[L14555]              havoc __ret_0_TOKEN_SYMBOL;
[L14556]              havoc __ret_0_PAUSED;
[L14557]              havoc __ret_0_TARGET_USER;
[L14558]              havoc __ret_0_CONTINUE_MINTING;
[L14559]              havoc __ret_0_initialized;
[L14560]              havoc _name_s1511;
[L14561]              havoc _symbol_s1519;
[L14562]              havoc _decimals_s1527;
[L14563]              havoc tmpNow;
[L14564]              havoc gas;
[L14565]              assume gas > 4000000 && gas <= 8000000;
[L14566]              tmpNow := now;
[L14567]              havoc now;
[L14568]              assume now > tmpNow;
[L14569]              assume msgsender_MSG != null;
[L14570]              assume DType[msgsender_MSG] != ERC20Basic;
[L14571]              assume DType[msgsender_MSG] != SafeMath;
[L14572]              assume DType[msgsender_MSG] != BasicToken;
[L14573]              assume DType[msgsender_MSG] != ERC20;
[L14574]              assume DType[msgsender_MSG] != StandardToken;
[L14575]              assume DType[msgsender_MSG] != Ownable;
[L14576]              assume DType[msgsender_MSG] != MintableToken;
[L14577]              assume DType[msgsender_MSG] != FreezableToken;
[L14578]              assume DType[msgsender_MSG] != BurnableToken;
[L14579]              assume DType[msgsender_MSG] != Pausable;
[L14580]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14581]              assume DType[msgsender_MSG] != Consts;
[L14582]              assume DType[msgsender_MSG] != MainToken;
[L14583]              Alloc[msgsender_MSG] := true;
[L14584]  COND FALSE  !(choice == 38)
[L14590]  COND FALSE  !(choice == 37)
[L14596]  COND FALSE  !(choice == 36)
[L14603]  COND FALSE  !(choice == 35)
[L14609]  COND FALSE  !(choice == 34)
[L14616]  COND TRUE   choice == 33
[L14617]              gas := gas - 21000;
[L14618]  COND TRUE   gas >= 0
[L14619]              assume _value_s379 >= 0 && _value_s379 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14620]              assume msgvalue_MSG == 0;
[L14621]  CALL        call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != _spender_s379;
[L3]                  call_approve_StandardToken0 := true;
[L3]                  call_approve_StandardToken0 := false;
[L3]                  revert := revert_hold;
[L921]                havoc __exception;
[L922]                revert := false;
[L923]    COND FALSE  !(__exception)
[L962]    CALL        call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L7190]               sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_StandardToken[this][msgsender_MSG][_spender_s379];
[L7191]               allowed_StandardToken[this][msgsender_MSG][_spender_s379] := _value_s379;
[L7192]               sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_StandardToken[this][msgsender_MSG][_spender_s379];
[L7193]               assert { :EventEmitted "Approval_StandardToken" } true;
[L7194]               __ret_0_ := true;
[L962]    RET         call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L963]                assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !(((((((((((__ret_0_ == true && allowed_StandardToken[this][msgsender_MSG][_spender_s379] == _value_s379) && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L3]                  revert := revert_hold;
[L14621]  RET         call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L14842]  RET         call CorralChoice_MainToken(this);

Loop:
[L14842]  CALL        call CorralChoice_MainToken(this);
[L14499]              havoc msgsender_MSG;
[L14500]              havoc msgvalue_MSG;
[L14501]              havoc choice;
[L14502]              havoc __ret_0_totalSupply;
[L14503]              havoc _owner_s729;
[L14504]              havoc balance_s729;
[L14505]              havoc _to_s1572;
[L14506]              havoc _value_s1572;
[L14507]              havoc _success_s1572;
[L14508]              havoc _owner_s395;
[L14509]              havoc _spender_s395;
[L14510]              havoc __ret_0_allowance;
[L14511]              havoc _from_s1551;
[L14512]              havoc _to_s1551;
[L14513]              havoc _value_s1551;
[L14514]              havoc _success_s1551;
[L14515]              havoc _spender_s379;
[L14516]              havoc _value_s379;
[L14517]              havoc __ret_0_approve;
[L14518]              havoc _spender_s437;
[L14519]              havoc _addedValue_s437;
[L14520]              havoc __ret_0_increaseApproval;
[L14521]              havoc _spender_s497;
[L14522]              havoc _subtractedValue_s497;
[L14523]              havoc __ret_0_decreaseApproval;
[L14524]              havoc __ret_0_owner;
[L14525]              havoc _newOwner_s558;
[L14526]              havoc __ret_0_mintingFinished;
[L14527]              havoc _to_s664;
[L14528]              havoc _amount_s664;
[L14529]              havoc __ret_0_mint;
[L14530]              havoc __ret_0_finishMinting;
[L14531]              havoc _owner_s742;
[L14532]              havoc balance_s742;
[L14533]              havoc _owner_s754;
[L14534]              havoc balance_s754;
[L14535]              havoc _addr_s792;
[L14536]              havoc count_s792;
[L14537]              havoc _addr_s849;
[L14538]              havoc _index_s849;
[L14539]              havoc _release_s849;
[L14540]              havoc _balance_s849;
[L14541]              havoc _to_s938;
[L14542]              havoc _amount_s938;
[L14543]              havoc _until_s938;
[L14544]              havoc tokens_s1107;
[L14545]              havoc _value_s1261;
[L14546]              havoc __ret_0_paused;
[L14547]              havoc _to_s1449;
[L14548]              havoc _amount_s1449;
[L14549]              havoc _until_s1449;
[L14550]              havoc __ret_0_mintAndFreeze;
[L14551]              havoc __ret_0_TOKEN_DECIMALS;
[L14552]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14553]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14554]              havoc __ret_0_TOKEN_NAME;
[L14555]              havoc __ret_0_TOKEN_SYMBOL;
[L14556]              havoc __ret_0_PAUSED;
[L14557]              havoc __ret_0_TARGET_USER;
[L14558]              havoc __ret_0_CONTINUE_MINTING;
[L14559]              havoc __ret_0_initialized;
[L14560]              havoc _name_s1511;
[L14561]              havoc _symbol_s1519;
[L14562]              havoc _decimals_s1527;
[L14563]              havoc tmpNow;
[L14564]              havoc gas;
[L14565]              assume gas > 4000000 && gas <= 8000000;
[L14566]              tmpNow := now;
[L14567]              havoc now;
[L14568]              assume now > tmpNow;
[L14569]              assume msgsender_MSG != null;
[L14570]              assume DType[msgsender_MSG] != ERC20Basic;
[L14571]              assume DType[msgsender_MSG] != SafeMath;
[L14572]              assume DType[msgsender_MSG] != BasicToken;
[L14573]              assume DType[msgsender_MSG] != ERC20;
[L14574]              assume DType[msgsender_MSG] != StandardToken;
[L14575]              assume DType[msgsender_MSG] != Ownable;
[L14576]              assume DType[msgsender_MSG] != MintableToken;
[L14577]              assume DType[msgsender_MSG] != FreezableToken;
[L14578]              assume DType[msgsender_MSG] != BurnableToken;
[L14579]              assume DType[msgsender_MSG] != Pausable;
[L14580]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14581]              assume DType[msgsender_MSG] != Consts;
[L14582]              assume DType[msgsender_MSG] != MainToken;
[L14583]              Alloc[msgsender_MSG] := true;
[L14584]  COND FALSE  !(choice == 38)
[L14590]  COND FALSE  !(choice == 37)
[L14596]  COND FALSE  !(choice == 36)
[L14603]  COND FALSE  !(choice == 35)
[L14609]  COND FALSE  !(choice == 34)
[L14616]  COND TRUE   choice == 33
[L14617]              gas := gas - 21000;
[L14618]  COND TRUE   gas >= 0
[L14619]              assume _value_s379 >= 0 && _value_s379 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14620]              assume msgvalue_MSG == 0;
[L14621]  CALL        call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != _spender_s379;
[L3]                  call_approve_StandardToken0 := true;
[L3]                  call_approve_StandardToken0 := false;
[L3]                  revert := revert_hold;
[L921]                havoc __exception;
[L922]                revert := false;
[L923]    COND FALSE  !(__exception)
[L962]    CALL        call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L7190]               sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_StandardToken[this][msgsender_MSG][_spender_s379];
[L7191]               allowed_StandardToken[this][msgsender_MSG][_spender_s379] := _value_s379;
[L7192]               sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_StandardToken[this][msgsender_MSG][_spender_s379];
[L7193]               assert { :EventEmitted "Approval_StandardToken" } true;
[L7194]               __ret_0_ := true;
[L962]    RET         call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L963]                assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !(((((((((((__ret_0_ == true && allowed_StandardToken[this][msgsender_MSG][_spender_s379] == _value_s379) && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L3]                  revert := revert_hold;
[L14621]  RET         call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L14842]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:17:40,965 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:17:40,965 INFO  L82        PathProgramCache]: Analyzing trace with hash 1960966149, now seen corresponding path program 1 times
[2020-11-24 21:17:40,967 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:17:41,095 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:17:41,903 INFO  L134       CoverageAnalysis]: Checked inductivity of 9823 backedges. 45 proven. 0 refuted. 0 times theorem prover too weak. 9778 trivial. 0 not checked.
[2020-11-24 21:17:41,903 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:17:41,903 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [15] imperfect sequences [] total 15
[2020-11-24 21:17:41,904 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:17:41,904 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 16 interpolants.
[2020-11-24 21:17:41,905 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=31, Invalid=209, Unknown=0, NotChecked=0, Total=240
[2020-11-24 21:17:41,905 INFO  L87              Difference]: Start difference. First operand 8731 states and 9732 transitions. cyclomatic complexity: 1021 Second operand 16 states.
[2020-11-24 21:17:50,911 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:17:50,911 INFO  L93              Difference]: Finished difference Result 8911 states and 9947 transitions.
[2020-11-24 21:17:50,912 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 19 states. 
[2020-11-24 21:17:50,912 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8911 states and 9947 transitions.
[2020-11-24 21:17:50,927 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 12
[2020-11-24 21:17:50,951 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8911 states to 8911 states and 9947 transitions.
[2020-11-24 21:17:50,951 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2153
[2020-11-24 21:17:50,954 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2153
[2020-11-24 21:17:50,954 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8911 states and 9947 transitions.
[2020-11-24 21:17:50,960 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:17:50,960 INFO  L728         BuchiCegarLoop]: Abstraction has 8911 states and 9947 transitions.
[2020-11-24 21:17:50,967 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8911 states and 9947 transitions.
[2020-11-24 21:17:51,022 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8911 to 8862.
[2020-11-24 21:17:51,023 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8862 states.
[2020-11-24 21:17:51,032 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8862 states to 8862 states and 9884 transitions.
[2020-11-24 21:17:51,032 INFO  L751         BuchiCegarLoop]: Abstraction has 8862 states and 9884 transitions.
[2020-11-24 21:17:51,032 INFO  L631         BuchiCegarLoop]: Abstraction has 8862 states and 9884 transitions.
[2020-11-24 21:17:51,033 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-24 21:17:51,033 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8862 states and 9884 transitions.
[2020-11-24 21:17:51,041 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-24 21:17:51,042 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:17:51,042 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:17:51,045 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:17:51,045 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_approve_StandardToken0 := false;
[L3]                  call_approve_StandardToken0 := false;
[L3]      CALL        call main();
[L3]                  havoc p2;
[L3]                  havoc p1;
[L14832]              assume null == 0;
[L14833]  CALL        call this := FreshRefGenerator__success();
[L6722]               havoc newRef;
[L6723]               assume Alloc[newRef] == false;
[L6724]               Alloc[newRef] := true;
[L6725]               assume newRef != null;
[L14833]  RET         call this := FreshRefGenerator__success();
[L14834]              assume now >= 0;
[L14835]              assume DType[this] == MainToken;
[L14836]              assume msgvalue_MSG == 0;
[L14837]              gas := gas - 53000;
[L14838]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4392]               havoc __exception;
[L4393]               revert := false;
[L4394]   COND TRUE   __exception
[L4395]               __tmp__Balance := Balance;
[L4396]               __tmp__DType := DType;
[L4397]               __tmp__Alloc := Alloc;
[L4398]               __tmp__balance_ADDR := balance_ADDR;
[L4399]               __tmp__M_Ref_int := M_Ref_int;
[L4400]               __tmp__sum_balances0 := sum_balances0;
[L4401]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L4402]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L4403]               __tmp__sum_allowed1 := sum_allowed1;
[L4404]               __tmp__M_int_int := M_int_int;
[L4405]               __tmp__sum_chains2 := sum_chains2;
[L4406]               __tmp__sum_freezings3 := sum_freezings3;
[L4407]               __tmp__sum_freezingBalance4 := sum_freezingBalance4;
[L4408]               __tmp__M_int_Ref := M_int_Ref;
[L4409]               __tmp__sum := sum;
[L4410]               __tmp__Length := Length;
[L4411]               __tmp__now := now;
[L4412]               __tmp__balances_BasicToken := balances_BasicToken;
[L4413]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L4414]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L4415]               __tmp__owner_Ownable := owner_Ownable;
[L4416]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L4417]               __tmp__chains_FreezableToken := chains_FreezableToken;
[L4418]               __tmp__freezings_FreezableToken := freezings_FreezableToken;
[L4419]               __tmp__freezingBalance_FreezableToken := freezingBalance_FreezableToken;
[L4420]               __tmp__paused_Pausable := paused_Pausable;
[L4421]               __tmp__TOKEN_DECIMALS_Consts := TOKEN_DECIMALS_Consts;
[L4422]               __tmp__TOKEN_DECIMALS_UINT8_Consts := TOKEN_DECIMALS_UINT8_Consts;
[L4423]               __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts := TOKEN_DECIMAL_MULTIPLIER_Consts;
[L4424]               __tmp__TOKEN_NAME_Consts := TOKEN_NAME_Consts;
[L4425]               __tmp__TOKEN_SYMBOL_Consts := TOKEN_SYMBOL_Consts;
[L4426]               __tmp__PAUSED_Consts := PAUSED_Consts;
[L4427]               __tmp__TARGET_USER_Consts := TARGET_USER_Consts;
[L4428]               __tmp__CONTINUE_MINTING_Consts := CONTINUE_MINTING_Consts;
[L4429]               __tmp__initialized_MainToken := initialized_MainToken;
[L4430]   CALL        call MainToken_MainToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9479]   CALL        call Consts_Consts__fail(this, msgsender_MSG, msgvalue_MSG);
[L9325]   CALL        call Consts_Consts_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L9291]               assume msgsender_MSG != null;
[L9292]               __tmp__Balance[this] := 0;
[L9293]               __tmp__TOKEN_DECIMALS_Consts[this] := 18;
[L9294]               __tmp__TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9295]               __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, __tmp__TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9296]               __tmp__TOKEN_NAME_Consts[this] := -1142012261;
[L9297]               __tmp__TOKEN_SYMBOL_Consts[this] := 360831912;
[L9298]               __tmp__PAUSED_Consts[this] := false;
[L9299]               __var_52 := ConstantToRef(687691456480424918299425112376782193233251990427);
[L9300]               __tmp__TARGET_USER_Consts[this] := ConstantToRef(687691456480424918299425112376782193233251990427);
[L9301]               __tmp__CONTINUE_MINTING_Consts[this] := true;
[L9325]   RET         call Consts_Consts_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L9326]   COND FALSE  !(revert)
[L9479]   RET         call Consts_Consts__fail(this, msgsender_MSG, msgvalue_MSG);
[L9480]   COND FALSE  !(revert)
[L9483]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6731]               assume msgsender_MSG != null;
[L6732]               __tmp__Balance[this] := 0;
[L6746]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L9483]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L9484]   COND FALSE  !(revert)
[L9487]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7008]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6731]               assume msgsender_MSG != null;
[L6732]               __tmp__Balance[this] := 0;
[L6746]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L7008]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7009]   COND FALSE  !(revert)
[L7012]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6993]               assume msgsender_MSG != null;
[L6994]               __tmp__Balance[this] := 0;
[L7012]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7013]   COND FALSE  !(revert)
[L9487]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L9488]   COND FALSE  !(revert)
[L9491]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6879]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6731]               assume msgsender_MSG != null;
[L6732]               __tmp__Balance[this] := 0;
[L6746]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6879]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6880]   COND FALSE  !(revert)
[L6883]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6858]               assume msgsender_MSG != null;
[L6859]               __tmp__Balance[this] := 0;
[L6860]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6861]               __tmp__sum_balances0[this] := 0;
[L6862]               __tmp__totalSupply__BasicToken[this] := 0;
[L6883]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6884]   COND FALSE  !(revert)
[L9491]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9492]   COND FALSE  !(revert)
[L9495]   CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7052]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6731]               assume msgsender_MSG != null;
[L6732]               __tmp__Balance[this] := 0;
[L6746]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L7052]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7053]   COND FALSE  !(revert)
[L7056]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7008]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6731]               assume msgsender_MSG != null;
[L6732]               __tmp__Balance[this] := 0;
[L6746]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L7008]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7009]   COND FALSE  !(revert)
[L7012]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6993]               assume msgsender_MSG != null;
[L6994]               __tmp__Balance[this] := 0;
[L7012]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7013]   COND FALSE  !(revert)
[L7056]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6879]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6731]               assume msgsender_MSG != null;
[L6732]               __tmp__Balance[this] := 0;
[L6746]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6879]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6880]   COND FALSE  !(revert)
[L6883]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6858]               assume msgsender_MSG != null;
[L6859]               __tmp__Balance[this] := 0;
[L6860]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6861]               __tmp__sum_balances0[this] := 0;
[L6862]               __tmp__totalSupply__BasicToken[this] := 0;
[L6883]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6884]   COND FALSE  !(revert)
[L7060]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7061]   COND FALSE  !(revert)
[L7064]   CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7033]               assume msgsender_MSG != null;
[L7034]               __tmp__Balance[this] := 0;
[L7035]               __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L7036]               __tmp__sum_allowed1[this] := 0;
[L7064]   RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7065]   COND FALSE  !(revert)
[L9495]   RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9496]   COND FALSE  !(revert)
[L9499]   CALL        call FreezableToken_FreezableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7655]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6731]               assume msgsender_MSG != null;
[L6732]               __tmp__Balance[this] := 0;
[L6746]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L7655]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7656]   COND FALSE  !(revert)
[L7659]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7008]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6731]               assume msgsender_MSG != null;
[L6732]               __tmp__Balance[this] := 0;
[L6746]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L7008]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7009]   COND FALSE  !(revert)
[L7012]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6993]               assume msgsender_MSG != null;
[L6994]               __tmp__Balance[this] := 0;
[L7012]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7013]   COND FALSE  !(revert)
[L7659]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7660]   COND FALSE  !(revert)
[L7663]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6879]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6731]               assume msgsender_MSG != null;
[L6732]               __tmp__Balance[this] := 0;
[L6746]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6879]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6880]   COND FALSE  !(revert)
[L6883]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6858]               assume msgsender_MSG != null;
[L6859]               __tmp__Balance[this] := 0;
[L6860]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6861]               __tmp__sum_balances0[this] := 0;
[L6862]               __tmp__totalSupply__BasicToken[this] := 0;
[L6883]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6884]   COND FALSE  !(revert)
[L7663]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7664]   COND FALSE  !(revert)
[L7667]   CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7052]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6731]               assume msgsender_MSG != null;
[L6732]               __tmp__Balance[this] := 0;
[L6746]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L7052]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7053]   COND FALSE  !(revert)
[L7056]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7008]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6731]               assume msgsender_MSG != null;
[L6732]               __tmp__Balance[this] := 0;
[L6746]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L7008]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7009]   COND FALSE  !(revert)
[L7012]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6993]               assume msgsender_MSG != null;
[L6994]               __tmp__Balance[this] := 0;
[L7012]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7013]   COND FALSE  !(revert)
[L7056]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6879]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6731]               assume msgsender_MSG != null;
[L6732]               __tmp__Balance[this] := 0;
[L6746]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6879]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6880]   COND FALSE  !(revert)
[L6883]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6858]               assume msgsender_MSG != null;
[L6859]               __tmp__Balance[this] := 0;
[L6860]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6861]               __tmp__sum_balances0[this] := 0;
[L6862]               __tmp__totalSupply__BasicToken[this] := 0;
[L6883]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6884]   COND FALSE  !(revert)
[L7060]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7061]   COND FALSE  !(revert)
[L7064]   CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7033]               assume msgsender_MSG != null;
[L7034]               __tmp__Balance[this] := 0;
[L7035]               __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L7036]               __tmp__sum_allowed1[this] := 0;
[L7064]   RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7065]   COND FALSE  !(revert)
[L7667]   RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7668]   COND FALSE  !(revert)
[L7671]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7628]               assume msgsender_MSG != null;
[L7629]               __tmp__Balance[this] := 0;
[L7630]               __tmp__chains_FreezableToken[this] := zerointintArr();
[L7631]               __tmp__sum_chains2[this] := 0;
[L7632]               __tmp__freezings_FreezableToken[this] := zerointintArr();
[L7633]               __tmp__sum_freezings3[this] := 0;
[L7634]               __tmp__freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7635]               __tmp__sum_freezingBalance4[this] := 0;
[L7671]   RET         call FreezableToken_FreezableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7672]   COND FALSE  !(revert)
[L9499]   RET         call FreezableToken_FreezableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9500]   COND FALSE  !(revert)
[L9503]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7306]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7287]               assume msgsender_MSG != null;
[L7288]               __tmp__Balance[this] := 0;
[L7289]               __tmp__owner_Ownable[this] := null;
[L7291]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L7306]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7307]   COND FALSE  !(revert)
[L9503]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L9504]   COND FALSE  !(revert)
[L9507]   CALL        call MintableToken_MintableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7470]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6731]               assume msgsender_MSG != null;
[L6732]               __tmp__Balance[this] := 0;
[L6746]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L7470]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7471]   COND FALSE  !(revert)
[L7474]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7008]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6731]               assume msgsender_MSG != null;
[L6732]               __tmp__Balance[this] := 0;
[L6746]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L7008]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7009]   COND FALSE  !(revert)
[L7012]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6993]               assume msgsender_MSG != null;
[L6994]               __tmp__Balance[this] := 0;
[L7012]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7013]   COND FALSE  !(revert)
[L7474]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7475]   COND FALSE  !(revert)
[L7478]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6879]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6731]               assume msgsender_MSG != null;
[L6732]               __tmp__Balance[this] := 0;
[L6746]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6879]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6880]   COND FALSE  !(revert)
[L6883]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6858]               assume msgsender_MSG != null;
[L6859]               __tmp__Balance[this] := 0;
[L6860]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6861]               __tmp__sum_balances0[this] := 0;
[L6862]               __tmp__totalSupply__BasicToken[this] := 0;
[L6883]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6884]   COND FALSE  !(revert)
[L7478]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7479]   COND FALSE  !(revert)
[L7482]   CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7052]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6731]               assume msgsender_MSG != null;
[L6732]               __tmp__Balance[this] := 0;
[L6746]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L7052]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7053]   COND FALSE  !(revert)
[L7056]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7008]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6731]               assume msgsender_MSG != null;
[L6732]               __tmp__Balance[this] := 0;
[L6746]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L7008]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7009]   COND FALSE  !(revert)
[L7012]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6993]               assume msgsender_MSG != null;
[L6994]               __tmp__Balance[this] := 0;
[L7012]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7013]   COND FALSE  !(revert)
[L7056]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6879]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6731]               assume msgsender_MSG != null;
[L6732]               __tmp__Balance[this] := 0;
[L6746]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6879]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6880]   COND FALSE  !(revert)
[L6883]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6858]               assume msgsender_MSG != null;
[L6859]               __tmp__Balance[this] := 0;
[L6860]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6861]               __tmp__sum_balances0[this] := 0;
[L6862]               __tmp__totalSupply__BasicToken[this] := 0;
[L6883]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6884]   COND FALSE  !(revert)
[L7060]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7061]   COND FALSE  !(revert)
[L7064]   CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7033]               assume msgsender_MSG != null;
[L7034]               __tmp__Balance[this] := 0;
[L7035]               __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L7036]               __tmp__sum_allowed1[this] := 0;
[L7064]   RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7065]   COND FALSE  !(revert)
[L7482]   RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7483]   COND FALSE  !(revert)
[L7486]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7306]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7287]               assume msgsender_MSG != null;
[L7288]               __tmp__Balance[this] := 0;
[L7289]               __tmp__owner_Ownable[this] := null;
[L7291]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L7306]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7307]   COND FALSE  !(revert)
[L7486]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7487]   COND FALSE  !(revert)
[L7490]   CALL        call MintableToken_MintableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7453]               assume msgsender_MSG != null;
[L7454]               __tmp__Balance[this] := 0;
[L7455]               __tmp__mintingFinished_MintableToken[this] := false;
[L7490]   RET         call MintableToken_MintableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7491]   COND FALSE  !(revert)
[L9507]   RET         call MintableToken_MintableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9508]   COND FALSE  !(revert)
[L9511]   CALL        call FreezableMintableToken_FreezableMintableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9082]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6731]               assume msgsender_MSG != null;
[L6732]               __tmp__Balance[this] := 0;
[L6746]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L9082]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L9083]   COND FALSE  !(revert)
[L9086]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7008]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6731]               assume msgsender_MSG != null;
[L6732]               __tmp__Balance[this] := 0;
[L6746]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L7008]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7009]   COND FALSE  !(revert)
[L7012]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6993]               assume msgsender_MSG != null;
[L6994]               __tmp__Balance[this] := 0;
[L7012]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7013]   COND FALSE  !(revert)
[L9086]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L9087]   COND FALSE  !(revert)
[L9090]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6879]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6731]               assume msgsender_MSG != null;
[L6732]               __tmp__Balance[this] := 0;
[L6746]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6879]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6880]   COND FALSE  !(revert)
[L6883]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6858]               assume msgsender_MSG != null;
[L6859]               __tmp__Balance[this] := 0;
[L6860]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6861]               __tmp__sum_balances0[this] := 0;
[L6862]               __tmp__totalSupply__BasicToken[this] := 0;
[L6883]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6884]   COND FALSE  !(revert)
[L9090]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9091]   COND FALSE  !(revert)
[L9094]   CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7052]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6731]               assume msgsender_MSG != null;
[L6732]               __tmp__Balance[this] := 0;
[L6746]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L7052]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7053]   COND FALSE  !(revert)
[L7056]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7008]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6731]               assume msgsender_MSG != null;
[L6732]               __tmp__Balance[this] := 0;
[L6746]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L7008]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7009]   COND FALSE  !(revert)
[L7012]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6993]               assume msgsender_MSG != null;
[L6994]               __tmp__Balance[this] := 0;
[L7012]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7013]   COND FALSE  !(revert)
[L7056]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6879]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6731]               assume msgsender_MSG != null;
[L6732]               __tmp__Balance[this] := 0;
[L6746]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6879]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6880]   COND FALSE  !(revert)
[L6883]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6858]               assume msgsender_MSG != null;
[L6859]               __tmp__Balance[this] := 0;
[L6860]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6861]               __tmp__sum_balances0[this] := 0;
[L6862]               __tmp__totalSupply__BasicToken[this] := 0;
[L6883]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6884]   COND FALSE  !(revert)
[L7060]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7061]   COND FALSE  !(revert)
[L7064]   CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7033]               assume msgsender_MSG != null;
[L7034]               __tmp__Balance[this] := 0;
[L7035]               __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L7036]               __tmp__sum_allowed1[this] := 0;
[L7064]   RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7065]   COND FALSE  !(revert)
[L9094]   RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9095]   COND FALSE  !(revert)
[L9098]   CALL        call FreezableToken_FreezableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7655]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6731]               assume msgsender_MSG != null;
[L6732]               __tmp__Balance[this] := 0;
[L6746]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L7655]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7656]   COND FALSE  !(revert)
[L7659]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7008]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6731]               assume msgsender_MSG != null;
[L6732]               __tmp__Balance[this] := 0;
[L6746]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L7008]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7009]   COND FALSE  !(revert)
[L7012]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6993]               assume msgsender_MSG != null;
[L6994]               __tmp__Balance[this] := 0;
[L7012]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7013]   COND FALSE  !(revert)
[L7659]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7660]   COND FALSE  !(revert)
[L7663]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6879]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6731]               assume msgsender_MSG != null;
[L6732]               __tmp__Balance[this] := 0;
[L6746]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6879]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6880]   COND FALSE  !(revert)
[L6883]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6858]               assume msgsender_MSG != null;
[L6859]               __tmp__Balance[this] := 0;
[L6860]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6861]               __tmp__sum_balances0[this] := 0;
[L6862]               __tmp__totalSupply__BasicToken[this] := 0;
[L6883]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6884]   COND FALSE  !(revert)
[L7663]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7664]   COND FALSE  !(revert)
[L7667]   CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7052]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6731]               assume msgsender_MSG != null;
[L6732]               __tmp__Balance[this] := 0;
[L6746]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L7052]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7053]   COND FALSE  !(revert)
[L7056]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7008]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6731]               assume msgsender_MSG != null;
[L6732]               __tmp__Balance[this] := 0;
[L6746]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L7008]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7009]   COND FALSE  !(revert)
[L7012]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6993]               assume msgsender_MSG != null;
[L6994]               __tmp__Balance[this] := 0;
[L7012]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7013]   COND FALSE  !(revert)
[L7056]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6879]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6731]               assume msgsender_MSG != null;
[L6732]               __tmp__Balance[this] := 0;
[L6746]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6879]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6880]   COND FALSE  !(revert)
[L6883]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6858]               assume msgsender_MSG != null;
[L6859]               __tmp__Balance[this] := 0;
[L6860]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6861]               __tmp__sum_balances0[this] := 0;
[L6862]               __tmp__totalSupply__BasicToken[this] := 0;
[L6883]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6884]   COND FALSE  !(revert)
[L7060]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7061]   COND FALSE  !(revert)
[L7064]   CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7033]               assume msgsender_MSG != null;
[L7034]               __tmp__Balance[this] := 0;
[L7035]               __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L7036]               __tmp__sum_allowed1[this] := 0;
[L7064]   RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7065]   COND FALSE  !(revert)
[L7667]   RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7668]   COND FALSE  !(revert)
[L7671]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7628]               assume msgsender_MSG != null;
[L7629]               __tmp__Balance[this] := 0;
[L7630]               __tmp__chains_FreezableToken[this] := zerointintArr();
[L7631]               __tmp__sum_chains2[this] := 0;
[L7632]               __tmp__freezings_FreezableToken[this] := zerointintArr();
[L7633]               __tmp__sum_freezings3[this] := 0;
[L7634]               __tmp__freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7635]               __tmp__sum_freezingBalance4[this] := 0;
[L7671]   RET         call FreezableToken_FreezableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7672]   COND FALSE  !(revert)
[L9098]   RET         call FreezableToken_FreezableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9099]   COND FALSE  !(revert)
[L9102]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7306]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7287]               assume msgsender_MSG != null;
[L7288]               __tmp__Balance[this] := 0;
[L7289]               __tmp__owner_Ownable[this] := null;
[L7291]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L7306]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7307]   COND FALSE  !(revert)
[L9102]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L9103]   COND FALSE  !(revert)
[L9106]   CALL        call MintableToken_MintableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7470]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6731]               assume msgsender_MSG != null;
[L6732]               __tmp__Balance[this] := 0;
[L6746]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L7470]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7471]   COND FALSE  !(revert)
[L7474]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7008]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6731]               assume msgsender_MSG != null;
[L6732]               __tmp__Balance[this] := 0;
[L6746]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L7008]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7009]   COND FALSE  !(revert)
[L7012]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6993]               assume msgsender_MSG != null;
[L6994]               __tmp__Balance[this] := 0;
[L7012]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7013]   COND FALSE  !(revert)
[L7474]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7475]   COND FALSE  !(revert)
[L7478]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6879]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6731]               assume msgsender_MSG != null;
[L6732]               __tmp__Balance[this] := 0;
[L6746]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6879]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6880]   COND FALSE  !(revert)
[L6883]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6858]               assume msgsender_MSG != null;
[L6859]               __tmp__Balance[this] := 0;
[L6860]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6861]               __tmp__sum_balances0[this] := 0;
[L6862]               __tmp__totalSupply__BasicToken[this] := 0;
[L6883]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6884]   COND FALSE  !(revert)
[L7478]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7479]   COND FALSE  !(revert)
[L7482]   CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7052]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6731]               assume msgsender_MSG != null;
[L6732]               __tmp__Balance[this] := 0;
[L6746]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L7052]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7053]   COND FALSE  !(revert)
[L7056]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7008]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6731]               assume msgsender_MSG != null;
[L6732]               __tmp__Balance[this] := 0;
[L6746]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L7008]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7009]   COND FALSE  !(revert)
[L7012]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6993]               assume msgsender_MSG != null;
[L6994]               __tmp__Balance[this] := 0;
[L7012]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7013]   COND FALSE  !(revert)
[L7056]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6879]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6731]               assume msgsender_MSG != null;
[L6732]               __tmp__Balance[this] := 0;
[L6746]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6879]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6880]   COND FALSE  !(revert)
[L6883]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6858]               assume msgsender_MSG != null;
[L6859]               __tmp__Balance[this] := 0;
[L6860]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6861]               __tmp__sum_balances0[this] := 0;
[L6862]               __tmp__totalSupply__BasicToken[this] := 0;
[L6883]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6884]   COND FALSE  !(revert)
[L7060]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7061]   COND FALSE  !(revert)
[L7064]   CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7033]               assume msgsender_MSG != null;
[L7034]               __tmp__Balance[this] := 0;
[L7035]               __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L7036]               __tmp__sum_allowed1[this] := 0;
[L7064]   RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7065]   COND FALSE  !(revert)
[L7482]   RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7483]   COND FALSE  !(revert)
[L7486]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7306]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7287]               assume msgsender_MSG != null;
[L7288]               __tmp__Balance[this] := 0;
[L7289]               __tmp__owner_Ownable[this] := null;
[L7291]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L7306]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7307]   COND FALSE  !(revert)
[L7486]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7487]   COND FALSE  !(revert)
[L7490]   CALL        call MintableToken_MintableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7453]               assume msgsender_MSG != null;
[L7454]               __tmp__Balance[this] := 0;
[L7455]               __tmp__mintingFinished_MintableToken[this] := false;
[L7490]   RET         call MintableToken_MintableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7491]   COND FALSE  !(revert)
[L9106]   RET         call MintableToken_MintableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9107]   COND FALSE  !(revert)
[L9110]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L9067]               assume msgsender_MSG != null;
[L9068]               __tmp__Balance[this] := 0;
[L9110]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L9111]   COND FALSE  !(revert)
[L9511]   RET         call FreezableMintableToken_FreezableMintableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9512]   COND FALSE  !(revert)
[L9515]   CALL        call BurnableToken_BurnableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L8846]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6731]               assume msgsender_MSG != null;
[L6732]               __tmp__Balance[this] := 0;
[L6746]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L8846]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L8847]   COND FALSE  !(revert)
[L8850]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6879]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6731]               assume msgsender_MSG != null;
[L6732]               __tmp__Balance[this] := 0;
[L6746]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6879]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6880]   COND FALSE  !(revert)
[L6883]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6858]               assume msgsender_MSG != null;
[L6859]               __tmp__Balance[this] := 0;
[L6860]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6861]               __tmp__sum_balances0[this] := 0;
[L6862]               __tmp__totalSupply__BasicToken[this] := 0;
[L6883]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6884]   COND FALSE  !(revert)
[L8850]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L8851]   COND FALSE  !(revert)
[L8854]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L8831]               assume msgsender_MSG != null;
[L8832]               __tmp__Balance[this] := 0;
[L8854]   RET         call BurnableToken_BurnableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L8855]   COND FALSE  !(revert)
[L9515]   RET         call BurnableToken_BurnableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9516]   COND FALSE  !(revert)
[L9519]   CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L8976]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7306]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7287]               assume msgsender_MSG != null;
[L7288]               __tmp__Balance[this] := 0;
[L7289]               __tmp__owner_Ownable[this] := null;
[L7291]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L7306]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7307]   COND FALSE  !(revert)
[L8976]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L8977]   COND FALSE  !(revert)
[L8980]   CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L8959]               assume msgsender_MSG != null;
[L8960]               __tmp__Balance[this] := 0;
[L8961]               __tmp__paused_Pausable[this] := false;
[L8980]   RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L8981]   COND FALSE  !(revert)
[L9519]   RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L9520]   COND FALSE  !(revert)
[L9523]   CALL        call MainToken_MainToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L9438]               assume msgsender_MSG != null;
[L9439]               __tmp__Balance[this] := 0;
[L9440]               __tmp__initialized_MainToken[this] := false;
[L9442]   CALL        call init_MainToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9712]   COND FALSE  !(!!__tmp__initialized_MainToken[this])
[L9716]               __tmp__initialized_MainToken[this] := true;
[L9717]   COND FALSE  !(__tmp__PAUSED_Consts[this])
[L9727]               havoc addresses_s1709;
[L9728]               __var_57 := ConstantToRef(389942227696498629531603431436390714308169371997);
[L9729]               __tmp__M_int_Ref[addresses_s1709][0] := __var_57;
[L9730]               __var_58 := ConstantToRef(389942227696498629531603431436390714308169371997);
[L9731]               __tmp__M_int_Ref[addresses_s1709][1] := __var_58;
[L9732]               havoc amounts_s1709;
[L9733]               __var_59 := 48000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9734]               __tmp__sum[amounts_s1709] := __tmp__sum[amounts_s1709] - __tmp__M_int_int[amounts_s1709][0];
[L9735]               __tmp__M_int_int[amounts_s1709][0] := __var_59;
[L9736]               __tmp__sum[amounts_s1709] := __tmp__sum[amounts_s1709] + __tmp__M_int_int[amounts_s1709][0];
[L9737]               __var_60 := 6000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9738]               __tmp__sum[amounts_s1709] := __tmp__sum[amounts_s1709] - __tmp__M_int_int[amounts_s1709][1];
[L9739]               __tmp__M_int_int[amounts_s1709][1] := __var_60;
[L9740]               __tmp__sum[amounts_s1709] := __tmp__sum[amounts_s1709] + __tmp__M_int_int[amounts_s1709][1];
[L9741]               havoc freezes_s1709;
[L9742]               __var_61 := 0 % 18446744073709551616;
[L9743]               __tmp__sum[freezes_s1709] := __tmp__sum[freezes_s1709] - __tmp__M_int_int[freezes_s1709][0];
[L9744]               __tmp__M_int_int[freezes_s1709][0] := __var_61;
[L9745]               __tmp__sum[freezes_s1709] := __tmp__sum[freezes_s1709] + __tmp__M_int_int[freezes_s1709][0];
[L9746]               __var_62 := 0 % 18446744073709551616;
[L9747]               __tmp__sum[freezes_s1709] := __tmp__sum[freezes_s1709] - __tmp__M_int_int[freezes_s1709][1];
[L9748]               __tmp__M_int_int[freezes_s1709][1] := __var_62;
[L9749]               __tmp__sum[freezes_s1709] := __tmp__sum[freezes_s1709] + __tmp__M_int_int[freezes_s1709][1];
[L9750]               i_s1709 := 0;
[L9751]   COND FALSE  !(i_s1709 < __tmp__Length[addresses_s1709])
[L9775]   COND FALSE  !(!__tmp__CONTINUE_MINTING_Consts[this])
[L9442]   RET         call init_MainToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9443]   COND FALSE  !(revert)
[L9446]   COND TRUE   __tmp__DType[this] == MainToken
[L9447]   CALL        call transferOwnership~address_Ownable__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__TARGET_USER_Consts[this]);
[L7345]   CALL        call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L12778]  COND FALSE  !(!(msgsender_MSG == __tmp__owner_Ownable[this]))
[L7345]   RET         call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7346]   COND FALSE  !(revert)
[L7349]   COND FALSE  !(__tmp__DType[this] == MainToken)
[L7354]   COND TRUE   __tmp__DType[this] == FreezableMintableToken
[L7355]   CALL        call _transferOwnership~address_Ownable__fail(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7418]               __var_11 := null;
[L7419]   COND FALSE  !(!(_newOwner_s581 != null))
[L7423]               __tmp__owner_Ownable[this] := _newOwner_s581;
[L7355]   RET         call _transferOwnership~address_Ownable__fail(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7356]   COND FALSE  !(revert)
[L9447]   RET         call transferOwnership~address_Ownable__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__TARGET_USER_Consts[this]);
[L9448]   COND FALSE  !(revert)
[L9523]   RET         call MainToken_MainToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L9524]   COND FALSE  !(revert)
[L4430]   RET         call MainToken_MainToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L4431]               assume revert || gas < 0;
[L14838]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14839]              assume !revert && gas >= 0;
[L14842]  CALL        call CorralChoice_MainToken(this);
[L14499]              havoc msgsender_MSG;
[L14500]              havoc msgvalue_MSG;
[L14501]              havoc choice;
[L14502]              havoc __ret_0_totalSupply;
[L14503]              havoc _owner_s729;
[L14504]              havoc balance_s729;
[L14505]              havoc _to_s1572;
[L14506]              havoc _value_s1572;
[L14507]              havoc _success_s1572;
[L14508]              havoc _owner_s395;
[L14509]              havoc _spender_s395;
[L14510]              havoc __ret_0_allowance;
[L14511]              havoc _from_s1551;
[L14512]              havoc _to_s1551;
[L14513]              havoc _value_s1551;
[L14514]              havoc _success_s1551;
[L14515]              havoc _spender_s379;
[L14516]              havoc _value_s379;
[L14517]              havoc __ret_0_approve;
[L14518]              havoc _spender_s437;
[L14519]              havoc _addedValue_s437;
[L14520]              havoc __ret_0_increaseApproval;
[L14521]              havoc _spender_s497;
[L14522]              havoc _subtractedValue_s497;
[L14523]              havoc __ret_0_decreaseApproval;
[L14524]              havoc __ret_0_owner;
[L14525]              havoc _newOwner_s558;
[L14526]              havoc __ret_0_mintingFinished;
[L14527]              havoc _to_s664;
[L14528]              havoc _amount_s664;
[L14529]              havoc __ret_0_mint;
[L14530]              havoc __ret_0_finishMinting;
[L14531]              havoc _owner_s742;
[L14532]              havoc balance_s742;
[L14533]              havoc _owner_s754;
[L14534]              havoc balance_s754;
[L14535]              havoc _addr_s792;
[L14536]              havoc count_s792;
[L14537]              havoc _addr_s849;
[L14538]              havoc _index_s849;
[L14539]              havoc _release_s849;
[L14540]              havoc _balance_s849;
[L14541]              havoc _to_s938;
[L14542]              havoc _amount_s938;
[L14543]              havoc _until_s938;
[L14544]              havoc tokens_s1107;
[L14545]              havoc _value_s1261;
[L14546]              havoc __ret_0_paused;
[L14547]              havoc _to_s1449;
[L14548]              havoc _amount_s1449;
[L14549]              havoc _until_s1449;
[L14550]              havoc __ret_0_mintAndFreeze;
[L14551]              havoc __ret_0_TOKEN_DECIMALS;
[L14552]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14553]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14554]              havoc __ret_0_TOKEN_NAME;
[L14555]              havoc __ret_0_TOKEN_SYMBOL;
[L14556]              havoc __ret_0_PAUSED;
[L14557]              havoc __ret_0_TARGET_USER;
[L14558]              havoc __ret_0_CONTINUE_MINTING;
[L14559]              havoc __ret_0_initialized;
[L14560]              havoc _name_s1511;
[L14561]              havoc _symbol_s1519;
[L14562]              havoc _decimals_s1527;
[L14563]              havoc tmpNow;
[L14564]              havoc gas;
[L14565]              assume gas > 4000000 && gas <= 8000000;
[L14566]              tmpNow := now;
[L14567]              havoc now;
[L14568]              assume now > tmpNow;
[L14569]              assume msgsender_MSG != null;
[L14570]              assume DType[msgsender_MSG] != ERC20Basic;
[L14571]              assume DType[msgsender_MSG] != SafeMath;
[L14572]              assume DType[msgsender_MSG] != BasicToken;
[L14573]              assume DType[msgsender_MSG] != ERC20;
[L14574]              assume DType[msgsender_MSG] != StandardToken;
[L14575]              assume DType[msgsender_MSG] != Ownable;
[L14576]              assume DType[msgsender_MSG] != MintableToken;
[L14577]              assume DType[msgsender_MSG] != FreezableToken;
[L14578]              assume DType[msgsender_MSG] != BurnableToken;
[L14579]              assume DType[msgsender_MSG] != Pausable;
[L14580]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14581]              assume DType[msgsender_MSG] != Consts;
[L14582]              assume DType[msgsender_MSG] != MainToken;
[L14583]              Alloc[msgsender_MSG] := true;
[L14584]  COND FALSE  !(choice == 38)
[L14590]  COND FALSE  !(choice == 37)
[L14596]  COND FALSE  !(choice == 36)
[L14603]  COND FALSE  !(choice == 35)
[L14609]  COND FALSE  !(choice == 34)
[L14616]  COND TRUE   choice == 33
[L14617]              gas := gas - 21000;
[L14618]  COND TRUE   gas >= 0
[L14619]              assume _value_s379 >= 0 && _value_s379 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14620]              assume msgvalue_MSG == 0;
[L14621]  CALL        call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != _spender_s379;
[L3]                  call_approve_StandardToken0 := true;
[L3]                  call_approve_StandardToken0 := false;
[L3]                  revert := revert_hold;
[L921]                havoc __exception;
[L922]                revert := false;
[L923]    COND FALSE  !(__exception)
[L962]    CALL        call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L7190]               sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_StandardToken[this][msgsender_MSG][_spender_s379];
[L7191]               allowed_StandardToken[this][msgsender_MSG][_spender_s379] := _value_s379;
[L7192]               sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_StandardToken[this][msgsender_MSG][_spender_s379];
[L7193]               assert { :EventEmitted "Approval_StandardToken" } true;
[L7194]               __ret_0_ := true;
[L962]    RET         call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L963]                assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !(((((((((((__ret_0_ == true && allowed_StandardToken[this][msgsender_MSG][_spender_s379] == _value_s379) && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L3]                  revert := revert_hold;
[L14621]  RET         call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L14842]  RET         call CorralChoice_MainToken(this);

Loop:
[L14842]  CALL        call CorralChoice_MainToken(this);
[L14499]              havoc msgsender_MSG;
[L14500]              havoc msgvalue_MSG;
[L14501]              havoc choice;
[L14502]              havoc __ret_0_totalSupply;
[L14503]              havoc _owner_s729;
[L14504]              havoc balance_s729;
[L14505]              havoc _to_s1572;
[L14506]              havoc _value_s1572;
[L14507]              havoc _success_s1572;
[L14508]              havoc _owner_s395;
[L14509]              havoc _spender_s395;
[L14510]              havoc __ret_0_allowance;
[L14511]              havoc _from_s1551;
[L14512]              havoc _to_s1551;
[L14513]              havoc _value_s1551;
[L14514]              havoc _success_s1551;
[L14515]              havoc _spender_s379;
[L14516]              havoc _value_s379;
[L14517]              havoc __ret_0_approve;
[L14518]              havoc _spender_s437;
[L14519]              havoc _addedValue_s437;
[L14520]              havoc __ret_0_increaseApproval;
[L14521]              havoc _spender_s497;
[L14522]              havoc _subtractedValue_s497;
[L14523]              havoc __ret_0_decreaseApproval;
[L14524]              havoc __ret_0_owner;
[L14525]              havoc _newOwner_s558;
[L14526]              havoc __ret_0_mintingFinished;
[L14527]              havoc _to_s664;
[L14528]              havoc _amount_s664;
[L14529]              havoc __ret_0_mint;
[L14530]              havoc __ret_0_finishMinting;
[L14531]              havoc _owner_s742;
[L14532]              havoc balance_s742;
[L14533]              havoc _owner_s754;
[L14534]              havoc balance_s754;
[L14535]              havoc _addr_s792;
[L14536]              havoc count_s792;
[L14537]              havoc _addr_s849;
[L14538]              havoc _index_s849;
[L14539]              havoc _release_s849;
[L14540]              havoc _balance_s849;
[L14541]              havoc _to_s938;
[L14542]              havoc _amount_s938;
[L14543]              havoc _until_s938;
[L14544]              havoc tokens_s1107;
[L14545]              havoc _value_s1261;
[L14546]              havoc __ret_0_paused;
[L14547]              havoc _to_s1449;
[L14548]              havoc _amount_s1449;
[L14549]              havoc _until_s1449;
[L14550]              havoc __ret_0_mintAndFreeze;
[L14551]              havoc __ret_0_TOKEN_DECIMALS;
[L14552]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14553]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14554]              havoc __ret_0_TOKEN_NAME;
[L14555]              havoc __ret_0_TOKEN_SYMBOL;
[L14556]              havoc __ret_0_PAUSED;
[L14557]              havoc __ret_0_TARGET_USER;
[L14558]              havoc __ret_0_CONTINUE_MINTING;
[L14559]              havoc __ret_0_initialized;
[L14560]              havoc _name_s1511;
[L14561]              havoc _symbol_s1519;
[L14562]              havoc _decimals_s1527;
[L14563]              havoc tmpNow;
[L14564]              havoc gas;
[L14565]              assume gas > 4000000 && gas <= 8000000;
[L14566]              tmpNow := now;
[L14567]              havoc now;
[L14568]              assume now > tmpNow;
[L14569]              assume msgsender_MSG != null;
[L14570]              assume DType[msgsender_MSG] != ERC20Basic;
[L14571]              assume DType[msgsender_MSG] != SafeMath;
[L14572]              assume DType[msgsender_MSG] != BasicToken;
[L14573]              assume DType[msgsender_MSG] != ERC20;
[L14574]              assume DType[msgsender_MSG] != StandardToken;
[L14575]              assume DType[msgsender_MSG] != Ownable;
[L14576]              assume DType[msgsender_MSG] != MintableToken;
[L14577]              assume DType[msgsender_MSG] != FreezableToken;
[L14578]              assume DType[msgsender_MSG] != BurnableToken;
[L14579]              assume DType[msgsender_MSG] != Pausable;
[L14580]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14581]              assume DType[msgsender_MSG] != Consts;
[L14582]              assume DType[msgsender_MSG] != MainToken;
[L14583]              Alloc[msgsender_MSG] := true;
[L14584]  COND FALSE  !(choice == 38)
[L14590]  COND FALSE  !(choice == 37)
[L14596]  COND FALSE  !(choice == 36)
[L14603]  COND FALSE  !(choice == 35)
[L14609]  COND FALSE  !(choice == 34)
[L14616]  COND FALSE  !(choice == 33)
[L14623]  COND FALSE  !(choice == 32)
[L14630]  COND TRUE   choice == 31
[L14631]              gas := gas - 21000;
[L14632]  COND TRUE   gas >= 0
[L14633]              assume _subtractedValue_s497 >= 0 && _subtractedValue_s497 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14634]              assume msgvalue_MSG == 0;
[L14635]  CALL        call __ret_0_decreaseApproval := decreaseApproval~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s497, _subtractedValue_s497);
[L1183]               havoc __exception;
[L1184]               revert := false;
[L1185]   COND FALSE  !(__exception)
[L1224]   CALL        call __ret_0_ := decreaseApproval~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s497, _subtractedValue_s497);
[L7265]               oldValue_s497 := allowed_StandardToken[this][msgsender_MSG][_spender_s497];
[L7266]   COND TRUE   _subtractedValue_s497 > oldValue_s497
[L7267]               sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_StandardToken[this][msgsender_MSG][_spender_s497];
[L7268]               allowed_StandardToken[this][msgsender_MSG][_spender_s497] := 0;
[L7269]               sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_StandardToken[this][msgsender_MSG][_spender_s497];
[L7279]               assert { :EventEmitted "Approval_StandardToken" } true;
[L7280]               __ret_0_ := true;
[L1224]   RET         call __ret_0_ := decreaseApproval~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s497, _subtractedValue_s497);
[L1225]               assume !revert && gas >= 0;
[L14635]  RET         call __ret_0_decreaseApproval := decreaseApproval~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s497, _subtractedValue_s497);
[L14842]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:17:51,053 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:17:51,053 INFO  L82        PathProgramCache]: Analyzing trace with hash -1543737136, now seen corresponding path program 1 times
[2020-11-24 21:17:51,054 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:17:51,089 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:17:51,621 INFO  L134       CoverageAnalysis]: Checked inductivity of 9823 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 9823 trivial. 0 not checked.
[2020-11-24 21:17:51,621 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:17:51,621 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-24 21:17:51,622 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:17:51,622 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-24 21:17:51,622 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-24 21:17:51,622 INFO  L87              Difference]: Start difference. First operand 8862 states and 9884 transitions. cyclomatic complexity: 1044 Second operand 4 states.
[2020-11-24 21:17:52,112 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:17:52,112 INFO  L93              Difference]: Finished difference Result 11309 states and 12958 transitions.
[2020-11-24 21:17:52,112 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-11-24 21:17:52,112 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11309 states and 12958 transitions.
[2020-11-24 21:17:52,137 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 20
[2020-11-24 21:17:52,161 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11309 states to 10365 states and 11875 transitions.
[2020-11-24 21:17:52,161 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2481
[2020-11-24 21:17:52,163 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2490
[2020-11-24 21:17:52,163 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 10365 states and 11875 transitions.
[2020-11-24 21:17:52,169 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:17:52,169 INFO  L728         BuchiCegarLoop]: Abstraction has 10365 states and 11875 transitions.
[2020-11-24 21:17:52,176 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 10365 states and 11875 transitions.
[2020-11-24 21:17:52,235 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 10365 to 9113.
[2020-11-24 21:17:52,235 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9113 states.
[2020-11-24 21:17:52,245 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9113 states to 9113 states and 10263 transitions.
[2020-11-24 21:17:52,246 INFO  L751         BuchiCegarLoop]: Abstraction has 9113 states and 10263 transitions.
[2020-11-24 21:17:52,246 INFO  L631         BuchiCegarLoop]: Abstraction has 9113 states and 10263 transitions.
[2020-11-24 21:17:52,246 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-24 21:17:52,246 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9113 states and 10263 transitions.
[2020-11-24 21:17:52,256 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 10
[2020-11-24 21:17:52,256 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:17:52,256 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:17:52,259 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:17:52,259 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_approve_StandardToken0 := false;
[L3]                  call_approve_StandardToken0 := false;
[L3]      CALL        call main();
[L3]                  havoc p2;
[L3]                  havoc p1;
[L14832]              assume null == 0;
[L14833]  CALL        call this := FreshRefGenerator__success();
[L6722]               havoc newRef;
[L6723]               assume Alloc[newRef] == false;
[L6724]               Alloc[newRef] := true;
[L6725]               assume newRef != null;
[L14833]  RET         call this := FreshRefGenerator__success();
[L14834]              assume now >= 0;
[L14835]              assume DType[this] == MainToken;
[L14836]              assume msgvalue_MSG == 0;
[L14837]              gas := gas - 53000;
[L14838]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4392]               havoc __exception;
[L4393]               revert := false;
[L4394]   COND FALSE  !(__exception)
[L4433]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9531]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9333]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9309]               assume msgsender_MSG != null;
[L9310]               Balance[this] := 0;
[L9311]               TOKEN_DECIMALS_Consts[this] := 18;
[L9312]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9313]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9314]               TOKEN_NAME_Consts[this] := -1142012261;
[L9315]               TOKEN_SYMBOL_Consts[this] := 360831912;
[L9316]               PAUSED_Consts[this] := false;
[L9317]               __var_52 := ConstantToRef(687691456480424918299425112376782193233251990427);
[L9318]               TARGET_USER_Consts[this] := ConstantToRef(687691456480424918299425112376782193233251990427);
[L9319]               CONTINUE_MINTING_Consts[this] := true;
[L9333]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9334]   COND FALSE  !(revert)
[L9531]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9532]   COND FALSE  !(revert)
[L9535]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L9535]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9536]   COND FALSE  !(revert)
[L9539]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7020]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]               assume msgsender_MSG != null;
[L7002]               Balance[this] := 0;
[L7024]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L9539]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9540]   COND FALSE  !(revert)
[L9543]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6891]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6892]   COND FALSE  !(revert)
[L6895]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6869]               assume msgsender_MSG != null;
[L6870]               Balance[this] := 0;
[L6871]               balances_BasicToken[this] := zeroRefintArr();
[L6872]               sum_balances0[this] := 0;
[L6873]               totalSupply__BasicToken[this] := 0;
[L6895]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6896]   COND FALSE  !(revert)
[L9543]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9544]   COND FALSE  !(revert)
[L9547]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7072]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7073]   COND FALSE  !(revert)
[L7076]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7020]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]               assume msgsender_MSG != null;
[L7002]               Balance[this] := 0;
[L7024]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7076]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7077]   COND FALSE  !(revert)
[L7080]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6891]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6892]   COND FALSE  !(revert)
[L6895]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6869]               assume msgsender_MSG != null;
[L6870]               Balance[this] := 0;
[L6871]               balances_BasicToken[this] := zeroRefintArr();
[L6872]               sum_balances0[this] := 0;
[L6873]               totalSupply__BasicToken[this] := 0;
[L6895]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6896]   COND FALSE  !(revert)
[L7080]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7081]   COND FALSE  !(revert)
[L7084]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7043]               assume msgsender_MSG != null;
[L7044]               Balance[this] := 0;
[L7045]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7046]               sum_allowed1[this] := 0;
[L7084]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7085]   COND FALSE  !(revert)
[L9547]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9548]   COND FALSE  !(revert)
[L9551]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7679]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7680]   COND FALSE  !(revert)
[L7683]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7020]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]               assume msgsender_MSG != null;
[L7002]               Balance[this] := 0;
[L7024]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7683]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7684]   COND FALSE  !(revert)
[L7687]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6891]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6892]   COND FALSE  !(revert)
[L6895]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6869]               assume msgsender_MSG != null;
[L6870]               Balance[this] := 0;
[L6871]               balances_BasicToken[this] := zeroRefintArr();
[L6872]               sum_balances0[this] := 0;
[L6873]               totalSupply__BasicToken[this] := 0;
[L6895]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6896]   COND FALSE  !(revert)
[L7687]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7688]   COND FALSE  !(revert)
[L7691]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7072]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7073]   COND FALSE  !(revert)
[L7076]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7020]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]               assume msgsender_MSG != null;
[L7002]               Balance[this] := 0;
[L7024]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7076]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7077]   COND FALSE  !(revert)
[L7080]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6891]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6892]   COND FALSE  !(revert)
[L6895]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6869]               assume msgsender_MSG != null;
[L6870]               Balance[this] := 0;
[L6871]               balances_BasicToken[this] := zeroRefintArr();
[L6872]               sum_balances0[this] := 0;
[L6873]               totalSupply__BasicToken[this] := 0;
[L6895]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6896]   COND FALSE  !(revert)
[L7080]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7081]   COND FALSE  !(revert)
[L7084]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7043]               assume msgsender_MSG != null;
[L7044]               Balance[this] := 0;
[L7045]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7046]               sum_allowed1[this] := 0;
[L7084]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7085]   COND FALSE  !(revert)
[L7691]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7692]   COND FALSE  !(revert)
[L7695]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7642]               assume msgsender_MSG != null;
[L7643]               Balance[this] := 0;
[L7644]               chains_FreezableToken[this] := zerointintArr();
[L7645]               sum_chains2[this] := 0;
[L7646]               freezings_FreezableToken[this] := zerointintArr();
[L7647]               sum_freezings3[this] := 0;
[L7648]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7649]               sum_freezingBalance4[this] := 0;
[L7695]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7696]   COND FALSE  !(revert)
[L9551]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9552]   COND FALSE  !(revert)
[L9555]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7297]               assume msgsender_MSG != null;
[L7298]               Balance[this] := 0;
[L7299]               owner_Ownable[this] := null;
[L7301]               owner_Ownable[this] := msgsender_MSG;
[L7314]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7315]   COND FALSE  !(revert)
[L9555]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9556]   COND FALSE  !(revert)
[L9559]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7498]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7499]   COND FALSE  !(revert)
[L7502]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7020]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]               assume msgsender_MSG != null;
[L7002]               Balance[this] := 0;
[L7024]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7502]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7503]   COND FALSE  !(revert)
[L7506]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6891]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6892]   COND FALSE  !(revert)
[L6895]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6869]               assume msgsender_MSG != null;
[L6870]               Balance[this] := 0;
[L6871]               balances_BasicToken[this] := zeroRefintArr();
[L6872]               sum_balances0[this] := 0;
[L6873]               totalSupply__BasicToken[this] := 0;
[L6895]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6896]   COND FALSE  !(revert)
[L7506]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7507]   COND FALSE  !(revert)
[L7510]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7072]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7073]   COND FALSE  !(revert)
[L7076]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7020]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]               assume msgsender_MSG != null;
[L7002]               Balance[this] := 0;
[L7024]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7076]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7077]   COND FALSE  !(revert)
[L7080]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6891]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6892]   COND FALSE  !(revert)
[L6895]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6869]               assume msgsender_MSG != null;
[L6870]               Balance[this] := 0;
[L6871]               balances_BasicToken[this] := zeroRefintArr();
[L6872]               sum_balances0[this] := 0;
[L6873]               totalSupply__BasicToken[this] := 0;
[L6895]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6896]   COND FALSE  !(revert)
[L7080]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7081]   COND FALSE  !(revert)
[L7084]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7043]               assume msgsender_MSG != null;
[L7044]               Balance[this] := 0;
[L7045]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7046]               sum_allowed1[this] := 0;
[L7084]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7085]   COND FALSE  !(revert)
[L7510]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7511]   COND FALSE  !(revert)
[L7514]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7297]               assume msgsender_MSG != null;
[L7298]               Balance[this] := 0;
[L7299]               owner_Ownable[this] := null;
[L7301]               owner_Ownable[this] := msgsender_MSG;
[L7314]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7315]   COND FALSE  !(revert)
[L7514]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7515]   COND FALSE  !(revert)
[L7518]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]               assume msgsender_MSG != null;
[L7463]               Balance[this] := 0;
[L7464]               mintingFinished_MintableToken[this] := false;
[L7518]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7519]   COND FALSE  !(revert)
[L9559]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9560]   COND FALSE  !(revert)
[L9563]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9118]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L9118]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9119]   COND FALSE  !(revert)
[L9122]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7020]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]               assume msgsender_MSG != null;
[L7002]               Balance[this] := 0;
[L7024]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L9122]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9123]   COND FALSE  !(revert)
[L9126]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6891]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6892]   COND FALSE  !(revert)
[L6895]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6869]               assume msgsender_MSG != null;
[L6870]               Balance[this] := 0;
[L6871]               balances_BasicToken[this] := zeroRefintArr();
[L6872]               sum_balances0[this] := 0;
[L6873]               totalSupply__BasicToken[this] := 0;
[L6895]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6896]   COND FALSE  !(revert)
[L9126]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9127]   COND FALSE  !(revert)
[L9130]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7072]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7073]   COND FALSE  !(revert)
[L7076]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7020]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]               assume msgsender_MSG != null;
[L7002]               Balance[this] := 0;
[L7024]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7076]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7077]   COND FALSE  !(revert)
[L7080]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6891]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6892]   COND FALSE  !(revert)
[L6895]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6869]               assume msgsender_MSG != null;
[L6870]               Balance[this] := 0;
[L6871]               balances_BasicToken[this] := zeroRefintArr();
[L6872]               sum_balances0[this] := 0;
[L6873]               totalSupply__BasicToken[this] := 0;
[L6895]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6896]   COND FALSE  !(revert)
[L7080]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7081]   COND FALSE  !(revert)
[L7084]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7043]               assume msgsender_MSG != null;
[L7044]               Balance[this] := 0;
[L7045]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7046]               sum_allowed1[this] := 0;
[L7084]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7085]   COND FALSE  !(revert)
[L9130]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9131]   COND FALSE  !(revert)
[L9134]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7679]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7680]   COND FALSE  !(revert)
[L7683]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7020]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]               assume msgsender_MSG != null;
[L7002]               Balance[this] := 0;
[L7024]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7683]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7684]   COND FALSE  !(revert)
[L7687]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6891]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6892]   COND FALSE  !(revert)
[L6895]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6869]               assume msgsender_MSG != null;
[L6870]               Balance[this] := 0;
[L6871]               balances_BasicToken[this] := zeroRefintArr();
[L6872]               sum_balances0[this] := 0;
[L6873]               totalSupply__BasicToken[this] := 0;
[L6895]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6896]   COND FALSE  !(revert)
[L7687]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7688]   COND FALSE  !(revert)
[L7691]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7072]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7073]   COND FALSE  !(revert)
[L7076]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7020]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]               assume msgsender_MSG != null;
[L7002]               Balance[this] := 0;
[L7024]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7076]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7077]   COND FALSE  !(revert)
[L7080]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6891]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6892]   COND FALSE  !(revert)
[L6895]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6869]               assume msgsender_MSG != null;
[L6870]               Balance[this] := 0;
[L6871]               balances_BasicToken[this] := zeroRefintArr();
[L6872]               sum_balances0[this] := 0;
[L6873]               totalSupply__BasicToken[this] := 0;
[L6895]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6896]   COND FALSE  !(revert)
[L7080]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7081]   COND FALSE  !(revert)
[L7084]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7043]               assume msgsender_MSG != null;
[L7044]               Balance[this] := 0;
[L7045]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7046]               sum_allowed1[this] := 0;
[L7084]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7085]   COND FALSE  !(revert)
[L7691]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7692]   COND FALSE  !(revert)
[L7695]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7642]               assume msgsender_MSG != null;
[L7643]               Balance[this] := 0;
[L7644]               chains_FreezableToken[this] := zerointintArr();
[L7645]               sum_chains2[this] := 0;
[L7646]               freezings_FreezableToken[this] := zerointintArr();
[L7647]               sum_freezings3[this] := 0;
[L7648]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7649]               sum_freezingBalance4[this] := 0;
[L7695]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7696]   COND FALSE  !(revert)
[L9134]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9135]   COND FALSE  !(revert)
[L9138]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7297]               assume msgsender_MSG != null;
[L7298]               Balance[this] := 0;
[L7299]               owner_Ownable[this] := null;
[L7301]               owner_Ownable[this] := msgsender_MSG;
[L7314]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7315]   COND FALSE  !(revert)
[L9138]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9139]   COND FALSE  !(revert)
[L9142]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7498]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7499]   COND FALSE  !(revert)
[L7502]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7020]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]               assume msgsender_MSG != null;
[L7002]               Balance[this] := 0;
[L7024]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7502]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7503]   COND FALSE  !(revert)
[L7506]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6891]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6892]   COND FALSE  !(revert)
[L6895]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6869]               assume msgsender_MSG != null;
[L6870]               Balance[this] := 0;
[L6871]               balances_BasicToken[this] := zeroRefintArr();
[L6872]               sum_balances0[this] := 0;
[L6873]               totalSupply__BasicToken[this] := 0;
[L6895]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6896]   COND FALSE  !(revert)
[L7506]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7507]   COND FALSE  !(revert)
[L7510]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7072]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7073]   COND FALSE  !(revert)
[L7076]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7020]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]               assume msgsender_MSG != null;
[L7002]               Balance[this] := 0;
[L7024]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7076]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7077]   COND FALSE  !(revert)
[L7080]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6891]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6892]   COND FALSE  !(revert)
[L6895]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6869]               assume msgsender_MSG != null;
[L6870]               Balance[this] := 0;
[L6871]               balances_BasicToken[this] := zeroRefintArr();
[L6872]               sum_balances0[this] := 0;
[L6873]               totalSupply__BasicToken[this] := 0;
[L6895]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6896]   COND FALSE  !(revert)
[L7080]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7081]   COND FALSE  !(revert)
[L7084]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7043]               assume msgsender_MSG != null;
[L7044]               Balance[this] := 0;
[L7045]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7046]               sum_allowed1[this] := 0;
[L7084]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7085]   COND FALSE  !(revert)
[L7510]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7511]   COND FALSE  !(revert)
[L7514]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7297]               assume msgsender_MSG != null;
[L7298]               Balance[this] := 0;
[L7299]               owner_Ownable[this] := null;
[L7301]               owner_Ownable[this] := msgsender_MSG;
[L7314]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7315]   COND FALSE  !(revert)
[L7514]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7515]   COND FALSE  !(revert)
[L7518]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]               assume msgsender_MSG != null;
[L7463]               Balance[this] := 0;
[L7464]               mintingFinished_MintableToken[this] := false;
[L7518]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7519]   COND FALSE  !(revert)
[L9142]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9143]   COND FALSE  !(revert)
[L9146]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9075]               assume msgsender_MSG != null;
[L9076]               Balance[this] := 0;
[L9146]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9147]   COND FALSE  !(revert)
[L9563]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9564]   COND FALSE  !(revert)
[L9567]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8862]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L8862]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8863]   COND FALSE  !(revert)
[L8866]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6891]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6892]   COND FALSE  !(revert)
[L6895]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6869]               assume msgsender_MSG != null;
[L6870]               Balance[this] := 0;
[L6871]               balances_BasicToken[this] := zeroRefintArr();
[L6872]               sum_balances0[this] := 0;
[L6873]               totalSupply__BasicToken[this] := 0;
[L6895]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6896]   COND FALSE  !(revert)
[L8866]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8867]   COND FALSE  !(revert)
[L8870]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8839]               assume msgsender_MSG != null;
[L8840]               Balance[this] := 0;
[L8870]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8871]   COND FALSE  !(revert)
[L9567]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9568]   COND FALSE  !(revert)
[L9571]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8988]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7297]               assume msgsender_MSG != null;
[L7298]               Balance[this] := 0;
[L7299]               owner_Ownable[this] := null;
[L7301]               owner_Ownable[this] := msgsender_MSG;
[L7314]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7315]   COND FALSE  !(revert)
[L8988]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8989]   COND FALSE  !(revert)
[L8992]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8968]               assume msgsender_MSG != null;
[L8969]               Balance[this] := 0;
[L8970]               paused_Pausable[this] := false;
[L8992]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8993]   COND FALSE  !(revert)
[L9571]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9572]   COND FALSE  !(revert)
[L9575]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9459]               assume msgsender_MSG != null;
[L9460]               Balance[this] := 0;
[L9461]               initialized_MainToken[this] := false;
[L9463]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9802]   COND FALSE  !(!!initialized_MainToken[this])
[L9806]               initialized_MainToken[this] := true;
[L9807]   COND FALSE  !(PAUSED_Consts[this])
[L9817]               havoc addresses_s1709;
[L9818]               __var_57 := ConstantToRef(389942227696498629531603431436390714308169371997);
[L9819]               M_int_Ref[addresses_s1709][0] := __var_57;
[L9820]               __var_58 := ConstantToRef(389942227696498629531603431436390714308169371997);
[L9821]               M_int_Ref[addresses_s1709][1] := __var_58;
[L9822]               havoc amounts_s1709;
[L9823]               __var_59 := 48000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9824]               sum[amounts_s1709] := sum[amounts_s1709] - M_int_int[amounts_s1709][0];
[L9825]               M_int_int[amounts_s1709][0] := __var_59;
[L9826]               sum[amounts_s1709] := sum[amounts_s1709] + M_int_int[amounts_s1709][0];
[L9827]               __var_60 := 6000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9828]               sum[amounts_s1709] := sum[amounts_s1709] - M_int_int[amounts_s1709][1];
[L9829]               M_int_int[amounts_s1709][1] := __var_60;
[L9830]               sum[amounts_s1709] := sum[amounts_s1709] + M_int_int[amounts_s1709][1];
[L9831]               havoc freezes_s1709;
[L9832]               __var_61 := 0 % 18446744073709551616;
[L9833]               sum[freezes_s1709] := sum[freezes_s1709] - M_int_int[freezes_s1709][0];
[L9834]               M_int_int[freezes_s1709][0] := __var_61;
[L9835]               sum[freezes_s1709] := sum[freezes_s1709] + M_int_int[freezes_s1709][0];
[L9836]               __var_62 := 0 % 18446744073709551616;
[L9837]               sum[freezes_s1709] := sum[freezes_s1709] - M_int_int[freezes_s1709][1];
[L9838]               M_int_int[freezes_s1709][1] := __var_62;
[L9839]               sum[freezes_s1709] := sum[freezes_s1709] + M_int_int[freezes_s1709][1];
[L9840]               i_s1709 := 0;
[L9841]   COND FALSE  !(i_s1709 < Length[addresses_s1709])
[L9865]   COND FALSE  !(!CONTINUE_MINTING_Consts[this])
[L9875]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9463]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9464]   COND FALSE  !(revert)
[L9467]   COND TRUE   DType[this] == MainToken
[L9468]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7381]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12786]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7381]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7382]   COND FALSE  !(revert)
[L7385]   COND TRUE   DType[this] == MainToken
[L7386]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7429]               __var_11 := null;
[L7430]   COND FALSE  !(!(_newOwner_s581 != null))
[L7434]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7435]               owner_Ownable[this] := _newOwner_s581;
[L7386]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7387]   COND FALSE  !(revert)
[L9468]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9469]   COND FALSE  !(revert)
[L9575]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9576]   COND FALSE  !(revert)
[L4433]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4434]               assume !revert && gas >= 0;
[L14838]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14839]              assume !revert && gas >= 0;
[L14842]  CALL        call CorralChoice_MainToken(this);
[L14499]              havoc msgsender_MSG;
[L14500]              havoc msgvalue_MSG;
[L14501]              havoc choice;
[L14502]              havoc __ret_0_totalSupply;
[L14503]              havoc _owner_s729;
[L14504]              havoc balance_s729;
[L14505]              havoc _to_s1572;
[L14506]              havoc _value_s1572;
[L14507]              havoc _success_s1572;
[L14508]              havoc _owner_s395;
[L14509]              havoc _spender_s395;
[L14510]              havoc __ret_0_allowance;
[L14511]              havoc _from_s1551;
[L14512]              havoc _to_s1551;
[L14513]              havoc _value_s1551;
[L14514]              havoc _success_s1551;
[L14515]              havoc _spender_s379;
[L14516]              havoc _value_s379;
[L14517]              havoc __ret_0_approve;
[L14518]              havoc _spender_s437;
[L14519]              havoc _addedValue_s437;
[L14520]              havoc __ret_0_increaseApproval;
[L14521]              havoc _spender_s497;
[L14522]              havoc _subtractedValue_s497;
[L14523]              havoc __ret_0_decreaseApproval;
[L14524]              havoc __ret_0_owner;
[L14525]              havoc _newOwner_s558;
[L14526]              havoc __ret_0_mintingFinished;
[L14527]              havoc _to_s664;
[L14528]              havoc _amount_s664;
[L14529]              havoc __ret_0_mint;
[L14530]              havoc __ret_0_finishMinting;
[L14531]              havoc _owner_s742;
[L14532]              havoc balance_s742;
[L14533]              havoc _owner_s754;
[L14534]              havoc balance_s754;
[L14535]              havoc _addr_s792;
[L14536]              havoc count_s792;
[L14537]              havoc _addr_s849;
[L14538]              havoc _index_s849;
[L14539]              havoc _release_s849;
[L14540]              havoc _balance_s849;
[L14541]              havoc _to_s938;
[L14542]              havoc _amount_s938;
[L14543]              havoc _until_s938;
[L14544]              havoc tokens_s1107;
[L14545]              havoc _value_s1261;
[L14546]              havoc __ret_0_paused;
[L14547]              havoc _to_s1449;
[L14548]              havoc _amount_s1449;
[L14549]              havoc _until_s1449;
[L14550]              havoc __ret_0_mintAndFreeze;
[L14551]              havoc __ret_0_TOKEN_DECIMALS;
[L14552]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14553]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14554]              havoc __ret_0_TOKEN_NAME;
[L14555]              havoc __ret_0_TOKEN_SYMBOL;
[L14556]              havoc __ret_0_PAUSED;
[L14557]              havoc __ret_0_TARGET_USER;
[L14558]              havoc __ret_0_CONTINUE_MINTING;
[L14559]              havoc __ret_0_initialized;
[L14560]              havoc _name_s1511;
[L14561]              havoc _symbol_s1519;
[L14562]              havoc _decimals_s1527;
[L14563]              havoc tmpNow;
[L14564]              havoc gas;
[L14565]              assume gas > 4000000 && gas <= 8000000;
[L14566]              tmpNow := now;
[L14567]              havoc now;
[L14568]              assume now > tmpNow;
[L14569]              assume msgsender_MSG != null;
[L14570]              assume DType[msgsender_MSG] != ERC20Basic;
[L14571]              assume DType[msgsender_MSG] != SafeMath;
[L14572]              assume DType[msgsender_MSG] != BasicToken;
[L14573]              assume DType[msgsender_MSG] != ERC20;
[L14574]              assume DType[msgsender_MSG] != StandardToken;
[L14575]              assume DType[msgsender_MSG] != Ownable;
[L14576]              assume DType[msgsender_MSG] != MintableToken;
[L14577]              assume DType[msgsender_MSG] != FreezableToken;
[L14578]              assume DType[msgsender_MSG] != BurnableToken;
[L14579]              assume DType[msgsender_MSG] != Pausable;
[L14580]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14581]              assume DType[msgsender_MSG] != Consts;
[L14582]              assume DType[msgsender_MSG] != MainToken;
[L14583]              Alloc[msgsender_MSG] := true;
[L14584]  COND FALSE  !(choice == 38)
[L14590]  COND FALSE  !(choice == 37)
[L14596]  COND FALSE  !(choice == 36)
[L14603]  COND FALSE  !(choice == 35)
[L14609]  COND FALSE  !(choice == 34)
[L14616]  COND TRUE   choice == 33
[L14617]              gas := gas - 21000;
[L14618]  COND TRUE   gas >= 0
[L14619]              assume _value_s379 >= 0 && _value_s379 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14620]              assume msgvalue_MSG == 0;
[L14621]  CALL        call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != _spender_s379;
[L3]                  call_approve_StandardToken0 := true;
[L3]                  call_approve_StandardToken0 := false;
[L3]                  revert := revert_hold;
[L921]                havoc __exception;
[L922]                revert := false;
[L923]    COND TRUE   __exception
[L924]                __tmp__Balance := Balance;
[L925]                __tmp__DType := DType;
[L926]                __tmp__Alloc := Alloc;
[L927]                __tmp__balance_ADDR := balance_ADDR;
[L928]                __tmp__M_Ref_int := M_Ref_int;
[L929]                __tmp__sum_balances0 := sum_balances0;
[L930]                __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L931]                __tmp__M_Ref_Ref := M_Ref_Ref;
[L932]                __tmp__sum_allowed1 := sum_allowed1;
[L933]                __tmp__M_int_int := M_int_int;
[L934]                __tmp__sum_chains2 := sum_chains2;
[L935]                __tmp__sum_freezings3 := sum_freezings3;
[L936]                __tmp__sum_freezingBalance4 := sum_freezingBalance4;
[L937]                __tmp__M_int_Ref := M_int_Ref;
[L938]                __tmp__sum := sum;
[L939]                __tmp__Length := Length;
[L940]                __tmp__now := now;
[L941]                __tmp__balances_BasicToken := balances_BasicToken;
[L942]                __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L943]                __tmp__allowed_StandardToken := allowed_StandardToken;
[L944]                __tmp__owner_Ownable := owner_Ownable;
[L945]                __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L946]                __tmp__chains_FreezableToken := chains_FreezableToken;
[L947]                __tmp__freezings_FreezableToken := freezings_FreezableToken;
[L948]                __tmp__freezingBalance_FreezableToken := freezingBalance_FreezableToken;
[L949]                __tmp__paused_Pausable := paused_Pausable;
[L950]                __tmp__TOKEN_DECIMALS_Consts := TOKEN_DECIMALS_Consts;
[L951]                __tmp__TOKEN_DECIMALS_UINT8_Consts := TOKEN_DECIMALS_UINT8_Consts;
[L952]                __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts := TOKEN_DECIMAL_MULTIPLIER_Consts;
[L953]                __tmp__TOKEN_NAME_Consts := TOKEN_NAME_Consts;
[L954]                __tmp__TOKEN_SYMBOL_Consts := TOKEN_SYMBOL_Consts;
[L955]                __tmp__PAUSED_Consts := PAUSED_Consts;
[L956]                __tmp__TARGET_USER_Consts := TARGET_USER_Consts;
[L957]                __tmp__CONTINUE_MINTING_Consts := CONTINUE_MINTING_Consts;
[L958]                __tmp__initialized_MainToken := initialized_MainToken;
[L959]    CALL        call __ret_0_ := approve~address~uint256_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L7181]               __tmp__sum_allowed1[msgsender_MSG] := __tmp__sum_allowed1[msgsender_MSG] - __tmp__allowed_StandardToken[this][msgsender_MSG][_spender_s379];
[L7182]               __tmp__allowed_StandardToken[this][msgsender_MSG][_spender_s379] := _value_s379;
[L7183]               __tmp__sum_allowed1[msgsender_MSG] := __tmp__sum_allowed1[msgsender_MSG] + __tmp__allowed_StandardToken[this][msgsender_MSG][_spender_s379];
[L7184]               __ret_0_ := true;
[L959]    RET         call __ret_0_ := approve~address~uint256_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L960]                assume revert || gas < 0;
[L14621]  RET         call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L14842]  RET         call CorralChoice_MainToken(this);

Loop:
[L14842]  CALL        call CorralChoice_MainToken(this);
[L14499]              havoc msgsender_MSG;
[L14500]              havoc msgvalue_MSG;
[L14501]              havoc choice;
[L14502]              havoc __ret_0_totalSupply;
[L14503]              havoc _owner_s729;
[L14504]              havoc balance_s729;
[L14505]              havoc _to_s1572;
[L14506]              havoc _value_s1572;
[L14507]              havoc _success_s1572;
[L14508]              havoc _owner_s395;
[L14509]              havoc _spender_s395;
[L14510]              havoc __ret_0_allowance;
[L14511]              havoc _from_s1551;
[L14512]              havoc _to_s1551;
[L14513]              havoc _value_s1551;
[L14514]              havoc _success_s1551;
[L14515]              havoc _spender_s379;
[L14516]              havoc _value_s379;
[L14517]              havoc __ret_0_approve;
[L14518]              havoc _spender_s437;
[L14519]              havoc _addedValue_s437;
[L14520]              havoc __ret_0_increaseApproval;
[L14521]              havoc _spender_s497;
[L14522]              havoc _subtractedValue_s497;
[L14523]              havoc __ret_0_decreaseApproval;
[L14524]              havoc __ret_0_owner;
[L14525]              havoc _newOwner_s558;
[L14526]              havoc __ret_0_mintingFinished;
[L14527]              havoc _to_s664;
[L14528]              havoc _amount_s664;
[L14529]              havoc __ret_0_mint;
[L14530]              havoc __ret_0_finishMinting;
[L14531]              havoc _owner_s742;
[L14532]              havoc balance_s742;
[L14533]              havoc _owner_s754;
[L14534]              havoc balance_s754;
[L14535]              havoc _addr_s792;
[L14536]              havoc count_s792;
[L14537]              havoc _addr_s849;
[L14538]              havoc _index_s849;
[L14539]              havoc _release_s849;
[L14540]              havoc _balance_s849;
[L14541]              havoc _to_s938;
[L14542]              havoc _amount_s938;
[L14543]              havoc _until_s938;
[L14544]              havoc tokens_s1107;
[L14545]              havoc _value_s1261;
[L14546]              havoc __ret_0_paused;
[L14547]              havoc _to_s1449;
[L14548]              havoc _amount_s1449;
[L14549]              havoc _until_s1449;
[L14550]              havoc __ret_0_mintAndFreeze;
[L14551]              havoc __ret_0_TOKEN_DECIMALS;
[L14552]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14553]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14554]              havoc __ret_0_TOKEN_NAME;
[L14555]              havoc __ret_0_TOKEN_SYMBOL;
[L14556]              havoc __ret_0_PAUSED;
[L14557]              havoc __ret_0_TARGET_USER;
[L14558]              havoc __ret_0_CONTINUE_MINTING;
[L14559]              havoc __ret_0_initialized;
[L14560]              havoc _name_s1511;
[L14561]              havoc _symbol_s1519;
[L14562]              havoc _decimals_s1527;
[L14563]              havoc tmpNow;
[L14564]              havoc gas;
[L14565]              assume gas > 4000000 && gas <= 8000000;
[L14566]              tmpNow := now;
[L14567]              havoc now;
[L14568]              assume now > tmpNow;
[L14569]              assume msgsender_MSG != null;
[L14570]              assume DType[msgsender_MSG] != ERC20Basic;
[L14571]              assume DType[msgsender_MSG] != SafeMath;
[L14572]              assume DType[msgsender_MSG] != BasicToken;
[L14573]              assume DType[msgsender_MSG] != ERC20;
[L14574]              assume DType[msgsender_MSG] != StandardToken;
[L14575]              assume DType[msgsender_MSG] != Ownable;
[L14576]              assume DType[msgsender_MSG] != MintableToken;
[L14577]              assume DType[msgsender_MSG] != FreezableToken;
[L14578]              assume DType[msgsender_MSG] != BurnableToken;
[L14579]              assume DType[msgsender_MSG] != Pausable;
[L14580]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14581]              assume DType[msgsender_MSG] != Consts;
[L14582]              assume DType[msgsender_MSG] != MainToken;
[L14583]              Alloc[msgsender_MSG] := true;
[L14584]  COND FALSE  !(choice == 38)
[L14590]  COND FALSE  !(choice == 37)
[L14596]  COND FALSE  !(choice == 36)
[L14603]  COND FALSE  !(choice == 35)
[L14609]  COND FALSE  !(choice == 34)
[L14616]  COND TRUE   choice == 33
[L14617]              gas := gas - 21000;
[L14618]  COND TRUE   gas >= 0
[L14619]              assume _value_s379 >= 0 && _value_s379 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14620]              assume msgvalue_MSG == 0;
[L14621]  CALL        call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != _spender_s379;
[L3]                  call_approve_StandardToken0 := true;
[L3]                  call_approve_StandardToken0 := false;
[L3]                  revert := revert_hold;
[L921]                havoc __exception;
[L922]                revert := false;
[L923]    COND TRUE   __exception
[L924]                __tmp__Balance := Balance;
[L925]                __tmp__DType := DType;
[L926]                __tmp__Alloc := Alloc;
[L927]                __tmp__balance_ADDR := balance_ADDR;
[L928]                __tmp__M_Ref_int := M_Ref_int;
[L929]                __tmp__sum_balances0 := sum_balances0;
[L930]                __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L931]                __tmp__M_Ref_Ref := M_Ref_Ref;
[L932]                __tmp__sum_allowed1 := sum_allowed1;
[L933]                __tmp__M_int_int := M_int_int;
[L934]                __tmp__sum_chains2 := sum_chains2;
[L935]                __tmp__sum_freezings3 := sum_freezings3;
[L936]                __tmp__sum_freezingBalance4 := sum_freezingBalance4;
[L937]                __tmp__M_int_Ref := M_int_Ref;
[L938]                __tmp__sum := sum;
[L939]                __tmp__Length := Length;
[L940]                __tmp__now := now;
[L941]                __tmp__balances_BasicToken := balances_BasicToken;
[L942]                __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L943]                __tmp__allowed_StandardToken := allowed_StandardToken;
[L944]                __tmp__owner_Ownable := owner_Ownable;
[L945]                __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L946]                __tmp__chains_FreezableToken := chains_FreezableToken;
[L947]                __tmp__freezings_FreezableToken := freezings_FreezableToken;
[L948]                __tmp__freezingBalance_FreezableToken := freezingBalance_FreezableToken;
[L949]                __tmp__paused_Pausable := paused_Pausable;
[L950]                __tmp__TOKEN_DECIMALS_Consts := TOKEN_DECIMALS_Consts;
[L951]                __tmp__TOKEN_DECIMALS_UINT8_Consts := TOKEN_DECIMALS_UINT8_Consts;
[L952]                __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts := TOKEN_DECIMAL_MULTIPLIER_Consts;
[L953]                __tmp__TOKEN_NAME_Consts := TOKEN_NAME_Consts;
[L954]                __tmp__TOKEN_SYMBOL_Consts := TOKEN_SYMBOL_Consts;
[L955]                __tmp__PAUSED_Consts := PAUSED_Consts;
[L956]                __tmp__TARGET_USER_Consts := TARGET_USER_Consts;
[L957]                __tmp__CONTINUE_MINTING_Consts := CONTINUE_MINTING_Consts;
[L958]                __tmp__initialized_MainToken := initialized_MainToken;
[L959]    CALL        call __ret_0_ := approve~address~uint256_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L7181]               __tmp__sum_allowed1[msgsender_MSG] := __tmp__sum_allowed1[msgsender_MSG] - __tmp__allowed_StandardToken[this][msgsender_MSG][_spender_s379];
[L7182]               __tmp__allowed_StandardToken[this][msgsender_MSG][_spender_s379] := _value_s379;
[L7183]               __tmp__sum_allowed1[msgsender_MSG] := __tmp__sum_allowed1[msgsender_MSG] + __tmp__allowed_StandardToken[this][msgsender_MSG][_spender_s379];
[L7184]               __ret_0_ := true;
[L959]    RET         call __ret_0_ := approve~address~uint256_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L960]                assume revert || gas < 0;
[L14621]  RET         call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L14842]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:17:52,267 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:17:52,267 INFO  L82        PathProgramCache]: Analyzing trace with hash -2144345296, now seen corresponding path program 1 times
[2020-11-24 21:17:52,268 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:17:52,299 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:17:52,802 INFO  L134       CoverageAnalysis]: Checked inductivity of 9823 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 9823 trivial. 0 not checked.
[2020-11-24 21:17:52,802 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:17:52,802 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-24 21:17:52,803 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:17:52,803 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-24 21:17:52,803 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-11-24 21:17:52,803 INFO  L87              Difference]: Start difference. First operand 9113 states and 10263 transitions. cyclomatic complexity: 1171 Second operand 5 states.
[2020-11-24 21:17:54,040 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:17:54,040 INFO  L93              Difference]: Finished difference Result 9991 states and 11245 transitions.
[2020-11-24 21:17:54,041 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-24 21:17:54,041 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9991 states and 11245 transitions.
[2020-11-24 21:17:54,062 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 12
[2020-11-24 21:17:54,081 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9991 states to 7155 states and 8277 transitions.
[2020-11-24 21:17:54,081 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1182
[2020-11-24 21:17:54,082 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1341
[2020-11-24 21:17:54,082 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7155 states and 8277 transitions.
[2020-11-24 21:17:54,086 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:17:54,086 INFO  L728         BuchiCegarLoop]: Abstraction has 7155 states and 8277 transitions.
[2020-11-24 21:17:54,090 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7155 states and 8277 transitions.
[2020-11-24 21:17:54,118 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7155 to 5673.
[2020-11-24 21:17:54,118 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5673 states.
[2020-11-24 21:17:54,124 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5673 states to 5673 states and 6395 transitions.
[2020-11-24 21:17:54,124 INFO  L751         BuchiCegarLoop]: Abstraction has 5673 states and 6395 transitions.
[2020-11-24 21:17:54,124 INFO  L631         BuchiCegarLoop]: Abstraction has 5673 states and 6395 transitions.
[2020-11-24 21:17:54,124 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-24 21:17:54,124 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5673 states and 6395 transitions.
[2020-11-24 21:17:54,129 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:17:54,129 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:17:54,130 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:17:54,132 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:17:54,132 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_approve_StandardToken0 := false;
[L3]                  call_approve_StandardToken0 := false;
[L3]      CALL        call main();
[L3]                  havoc p2;
[L3]                  havoc p1;
[L14832]              assume null == 0;
[L14833]  CALL        call this := FreshRefGenerator__success();
[L6722]               havoc newRef;
[L6723]               assume Alloc[newRef] == false;
[L6724]               Alloc[newRef] := true;
[L6725]               assume newRef != null;
[L14833]  RET         call this := FreshRefGenerator__success();
[L14834]              assume now >= 0;
[L14835]              assume DType[this] == MainToken;
[L14836]              assume msgvalue_MSG == 0;
[L14837]              gas := gas - 53000;
[L14838]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4392]               havoc __exception;
[L4393]               revert := false;
[L4394]   COND FALSE  !(__exception)
[L4433]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9531]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9333]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9309]               assume msgsender_MSG != null;
[L9310]               Balance[this] := 0;
[L9311]               TOKEN_DECIMALS_Consts[this] := 18;
[L9312]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9313]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9314]               TOKEN_NAME_Consts[this] := -1142012261;
[L9315]               TOKEN_SYMBOL_Consts[this] := 360831912;
[L9316]               PAUSED_Consts[this] := false;
[L9317]               __var_52 := ConstantToRef(687691456480424918299425112376782193233251990427);
[L9318]               TARGET_USER_Consts[this] := ConstantToRef(687691456480424918299425112376782193233251990427);
[L9319]               CONTINUE_MINTING_Consts[this] := true;
[L9333]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9334]   COND FALSE  !(revert)
[L9531]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9532]   COND FALSE  !(revert)
[L9535]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L9535]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9536]   COND FALSE  !(revert)
[L9539]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7020]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]               assume msgsender_MSG != null;
[L7002]               Balance[this] := 0;
[L7024]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L9539]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9540]   COND FALSE  !(revert)
[L9543]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6891]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6892]   COND FALSE  !(revert)
[L6895]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6869]               assume msgsender_MSG != null;
[L6870]               Balance[this] := 0;
[L6871]               balances_BasicToken[this] := zeroRefintArr();
[L6872]               sum_balances0[this] := 0;
[L6873]               totalSupply__BasicToken[this] := 0;
[L6895]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6896]   COND FALSE  !(revert)
[L9543]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9544]   COND FALSE  !(revert)
[L9547]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7072]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7073]   COND FALSE  !(revert)
[L7076]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7020]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]               assume msgsender_MSG != null;
[L7002]               Balance[this] := 0;
[L7024]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7076]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7077]   COND FALSE  !(revert)
[L7080]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6891]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6892]   COND FALSE  !(revert)
[L6895]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6869]               assume msgsender_MSG != null;
[L6870]               Balance[this] := 0;
[L6871]               balances_BasicToken[this] := zeroRefintArr();
[L6872]               sum_balances0[this] := 0;
[L6873]               totalSupply__BasicToken[this] := 0;
[L6895]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6896]   COND FALSE  !(revert)
[L7080]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7081]   COND FALSE  !(revert)
[L7084]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7043]               assume msgsender_MSG != null;
[L7044]               Balance[this] := 0;
[L7045]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7046]               sum_allowed1[this] := 0;
[L7084]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7085]   COND FALSE  !(revert)
[L9547]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9548]   COND FALSE  !(revert)
[L9551]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7679]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7680]   COND FALSE  !(revert)
[L7683]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7020]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]               assume msgsender_MSG != null;
[L7002]               Balance[this] := 0;
[L7024]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7683]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7684]   COND FALSE  !(revert)
[L7687]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6891]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6892]   COND FALSE  !(revert)
[L6895]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6869]               assume msgsender_MSG != null;
[L6870]               Balance[this] := 0;
[L6871]               balances_BasicToken[this] := zeroRefintArr();
[L6872]               sum_balances0[this] := 0;
[L6873]               totalSupply__BasicToken[this] := 0;
[L6895]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6896]   COND FALSE  !(revert)
[L7687]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7688]   COND FALSE  !(revert)
[L7691]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7072]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7073]   COND FALSE  !(revert)
[L7076]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7020]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]               assume msgsender_MSG != null;
[L7002]               Balance[this] := 0;
[L7024]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7076]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7077]   COND FALSE  !(revert)
[L7080]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6891]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6892]   COND FALSE  !(revert)
[L6895]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6869]               assume msgsender_MSG != null;
[L6870]               Balance[this] := 0;
[L6871]               balances_BasicToken[this] := zeroRefintArr();
[L6872]               sum_balances0[this] := 0;
[L6873]               totalSupply__BasicToken[this] := 0;
[L6895]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6896]   COND FALSE  !(revert)
[L7080]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7081]   COND FALSE  !(revert)
[L7084]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7043]               assume msgsender_MSG != null;
[L7044]               Balance[this] := 0;
[L7045]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7046]               sum_allowed1[this] := 0;
[L7084]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7085]   COND FALSE  !(revert)
[L7691]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7692]   COND FALSE  !(revert)
[L7695]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7642]               assume msgsender_MSG != null;
[L7643]               Balance[this] := 0;
[L7644]               chains_FreezableToken[this] := zerointintArr();
[L7645]               sum_chains2[this] := 0;
[L7646]               freezings_FreezableToken[this] := zerointintArr();
[L7647]               sum_freezings3[this] := 0;
[L7648]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7649]               sum_freezingBalance4[this] := 0;
[L7695]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7696]   COND FALSE  !(revert)
[L9551]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9552]   COND FALSE  !(revert)
[L9555]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7297]               assume msgsender_MSG != null;
[L7298]               Balance[this] := 0;
[L7299]               owner_Ownable[this] := null;
[L7301]               owner_Ownable[this] := msgsender_MSG;
[L7314]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7315]   COND FALSE  !(revert)
[L9555]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9556]   COND FALSE  !(revert)
[L9559]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7498]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7499]   COND FALSE  !(revert)
[L7502]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7020]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]               assume msgsender_MSG != null;
[L7002]               Balance[this] := 0;
[L7024]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7502]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7503]   COND FALSE  !(revert)
[L7506]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6891]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6892]   COND FALSE  !(revert)
[L6895]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6869]               assume msgsender_MSG != null;
[L6870]               Balance[this] := 0;
[L6871]               balances_BasicToken[this] := zeroRefintArr();
[L6872]               sum_balances0[this] := 0;
[L6873]               totalSupply__BasicToken[this] := 0;
[L6895]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6896]   COND FALSE  !(revert)
[L7506]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7507]   COND FALSE  !(revert)
[L7510]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7072]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7073]   COND FALSE  !(revert)
[L7076]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7020]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]               assume msgsender_MSG != null;
[L7002]               Balance[this] := 0;
[L7024]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7076]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7077]   COND FALSE  !(revert)
[L7080]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6891]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6892]   COND FALSE  !(revert)
[L6895]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6869]               assume msgsender_MSG != null;
[L6870]               Balance[this] := 0;
[L6871]               balances_BasicToken[this] := zeroRefintArr();
[L6872]               sum_balances0[this] := 0;
[L6873]               totalSupply__BasicToken[this] := 0;
[L6895]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6896]   COND FALSE  !(revert)
[L7080]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7081]   COND FALSE  !(revert)
[L7084]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7043]               assume msgsender_MSG != null;
[L7044]               Balance[this] := 0;
[L7045]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7046]               sum_allowed1[this] := 0;
[L7084]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7085]   COND FALSE  !(revert)
[L7510]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7511]   COND FALSE  !(revert)
[L7514]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7297]               assume msgsender_MSG != null;
[L7298]               Balance[this] := 0;
[L7299]               owner_Ownable[this] := null;
[L7301]               owner_Ownable[this] := msgsender_MSG;
[L7314]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7315]   COND FALSE  !(revert)
[L7514]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7515]   COND FALSE  !(revert)
[L7518]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]               assume msgsender_MSG != null;
[L7463]               Balance[this] := 0;
[L7464]               mintingFinished_MintableToken[this] := false;
[L7518]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7519]   COND FALSE  !(revert)
[L9559]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9560]   COND FALSE  !(revert)
[L9563]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9118]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L9118]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9119]   COND FALSE  !(revert)
[L9122]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7020]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]               assume msgsender_MSG != null;
[L7002]               Balance[this] := 0;
[L7024]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L9122]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9123]   COND FALSE  !(revert)
[L9126]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6891]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6892]   COND FALSE  !(revert)
[L6895]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6869]               assume msgsender_MSG != null;
[L6870]               Balance[this] := 0;
[L6871]               balances_BasicToken[this] := zeroRefintArr();
[L6872]               sum_balances0[this] := 0;
[L6873]               totalSupply__BasicToken[this] := 0;
[L6895]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6896]   COND FALSE  !(revert)
[L9126]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9127]   COND FALSE  !(revert)
[L9130]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7072]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7073]   COND FALSE  !(revert)
[L7076]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7020]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]               assume msgsender_MSG != null;
[L7002]               Balance[this] := 0;
[L7024]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7076]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7077]   COND FALSE  !(revert)
[L7080]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6891]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6892]   COND FALSE  !(revert)
[L6895]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6869]               assume msgsender_MSG != null;
[L6870]               Balance[this] := 0;
[L6871]               balances_BasicToken[this] := zeroRefintArr();
[L6872]               sum_balances0[this] := 0;
[L6873]               totalSupply__BasicToken[this] := 0;
[L6895]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6896]   COND FALSE  !(revert)
[L7080]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7081]   COND FALSE  !(revert)
[L7084]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7043]               assume msgsender_MSG != null;
[L7044]               Balance[this] := 0;
[L7045]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7046]               sum_allowed1[this] := 0;
[L7084]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7085]   COND FALSE  !(revert)
[L9130]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9131]   COND FALSE  !(revert)
[L9134]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7679]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7680]   COND FALSE  !(revert)
[L7683]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7020]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]               assume msgsender_MSG != null;
[L7002]               Balance[this] := 0;
[L7024]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7683]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7684]   COND FALSE  !(revert)
[L7687]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6891]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6892]   COND FALSE  !(revert)
[L6895]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6869]               assume msgsender_MSG != null;
[L6870]               Balance[this] := 0;
[L6871]               balances_BasicToken[this] := zeroRefintArr();
[L6872]               sum_balances0[this] := 0;
[L6873]               totalSupply__BasicToken[this] := 0;
[L6895]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6896]   COND FALSE  !(revert)
[L7687]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7688]   COND FALSE  !(revert)
[L7691]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7072]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7073]   COND FALSE  !(revert)
[L7076]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7020]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]               assume msgsender_MSG != null;
[L7002]               Balance[this] := 0;
[L7024]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7076]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7077]   COND FALSE  !(revert)
[L7080]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6891]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6892]   COND FALSE  !(revert)
[L6895]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6869]               assume msgsender_MSG != null;
[L6870]               Balance[this] := 0;
[L6871]               balances_BasicToken[this] := zeroRefintArr();
[L6872]               sum_balances0[this] := 0;
[L6873]               totalSupply__BasicToken[this] := 0;
[L6895]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6896]   COND FALSE  !(revert)
[L7080]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7081]   COND FALSE  !(revert)
[L7084]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7043]               assume msgsender_MSG != null;
[L7044]               Balance[this] := 0;
[L7045]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7046]               sum_allowed1[this] := 0;
[L7084]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7085]   COND FALSE  !(revert)
[L7691]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7692]   COND FALSE  !(revert)
[L7695]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7642]               assume msgsender_MSG != null;
[L7643]               Balance[this] := 0;
[L7644]               chains_FreezableToken[this] := zerointintArr();
[L7645]               sum_chains2[this] := 0;
[L7646]               freezings_FreezableToken[this] := zerointintArr();
[L7647]               sum_freezings3[this] := 0;
[L7648]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7649]               sum_freezingBalance4[this] := 0;
[L7695]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7696]   COND FALSE  !(revert)
[L9134]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9135]   COND FALSE  !(revert)
[L9138]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7297]               assume msgsender_MSG != null;
[L7298]               Balance[this] := 0;
[L7299]               owner_Ownable[this] := null;
[L7301]               owner_Ownable[this] := msgsender_MSG;
[L7314]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7315]   COND FALSE  !(revert)
[L9138]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9139]   COND FALSE  !(revert)
[L9142]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7498]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7499]   COND FALSE  !(revert)
[L7502]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7020]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]               assume msgsender_MSG != null;
[L7002]               Balance[this] := 0;
[L7024]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7502]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7503]   COND FALSE  !(revert)
[L7506]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6891]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6892]   COND FALSE  !(revert)
[L6895]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6869]               assume msgsender_MSG != null;
[L6870]               Balance[this] := 0;
[L6871]               balances_BasicToken[this] := zeroRefintArr();
[L6872]               sum_balances0[this] := 0;
[L6873]               totalSupply__BasicToken[this] := 0;
[L6895]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6896]   COND FALSE  !(revert)
[L7506]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7507]   COND FALSE  !(revert)
[L7510]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7072]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7073]   COND FALSE  !(revert)
[L7076]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7020]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]               assume msgsender_MSG != null;
[L7002]               Balance[this] := 0;
[L7024]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7076]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7077]   COND FALSE  !(revert)
[L7080]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6891]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6892]   COND FALSE  !(revert)
[L6895]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6869]               assume msgsender_MSG != null;
[L6870]               Balance[this] := 0;
[L6871]               balances_BasicToken[this] := zeroRefintArr();
[L6872]               sum_balances0[this] := 0;
[L6873]               totalSupply__BasicToken[this] := 0;
[L6895]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6896]   COND FALSE  !(revert)
[L7080]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7081]   COND FALSE  !(revert)
[L7084]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7043]               assume msgsender_MSG != null;
[L7044]               Balance[this] := 0;
[L7045]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7046]               sum_allowed1[this] := 0;
[L7084]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7085]   COND FALSE  !(revert)
[L7510]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7511]   COND FALSE  !(revert)
[L7514]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7297]               assume msgsender_MSG != null;
[L7298]               Balance[this] := 0;
[L7299]               owner_Ownable[this] := null;
[L7301]               owner_Ownable[this] := msgsender_MSG;
[L7314]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7315]   COND FALSE  !(revert)
[L7514]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7515]   COND FALSE  !(revert)
[L7518]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]               assume msgsender_MSG != null;
[L7463]               Balance[this] := 0;
[L7464]               mintingFinished_MintableToken[this] := false;
[L7518]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7519]   COND FALSE  !(revert)
[L9142]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9143]   COND FALSE  !(revert)
[L9146]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9075]               assume msgsender_MSG != null;
[L9076]               Balance[this] := 0;
[L9146]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9147]   COND FALSE  !(revert)
[L9563]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9564]   COND FALSE  !(revert)
[L9567]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8862]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L8862]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8863]   COND FALSE  !(revert)
[L8866]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6891]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6892]   COND FALSE  !(revert)
[L6895]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6869]               assume msgsender_MSG != null;
[L6870]               Balance[this] := 0;
[L6871]               balances_BasicToken[this] := zeroRefintArr();
[L6872]               sum_balances0[this] := 0;
[L6873]               totalSupply__BasicToken[this] := 0;
[L6895]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6896]   COND FALSE  !(revert)
[L8866]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8867]   COND FALSE  !(revert)
[L8870]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8839]               assume msgsender_MSG != null;
[L8840]               Balance[this] := 0;
[L8870]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8871]   COND FALSE  !(revert)
[L9567]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9568]   COND FALSE  !(revert)
[L9571]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8988]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7297]               assume msgsender_MSG != null;
[L7298]               Balance[this] := 0;
[L7299]               owner_Ownable[this] := null;
[L7301]               owner_Ownable[this] := msgsender_MSG;
[L7314]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7315]   COND FALSE  !(revert)
[L8988]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8989]   COND FALSE  !(revert)
[L8992]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8968]               assume msgsender_MSG != null;
[L8969]               Balance[this] := 0;
[L8970]               paused_Pausable[this] := false;
[L8992]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8993]   COND FALSE  !(revert)
[L9571]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9572]   COND FALSE  !(revert)
[L9575]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9459]               assume msgsender_MSG != null;
[L9460]               Balance[this] := 0;
[L9461]               initialized_MainToken[this] := false;
[L9463]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9802]   COND FALSE  !(!!initialized_MainToken[this])
[L9806]               initialized_MainToken[this] := true;
[L9807]   COND FALSE  !(PAUSED_Consts[this])
[L9817]               havoc addresses_s1709;
[L9818]               __var_57 := ConstantToRef(389942227696498629531603431436390714308169371997);
[L9819]               M_int_Ref[addresses_s1709][0] := __var_57;
[L9820]               __var_58 := ConstantToRef(389942227696498629531603431436390714308169371997);
[L9821]               M_int_Ref[addresses_s1709][1] := __var_58;
[L9822]               havoc amounts_s1709;
[L9823]               __var_59 := 48000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9824]               sum[amounts_s1709] := sum[amounts_s1709] - M_int_int[amounts_s1709][0];
[L9825]               M_int_int[amounts_s1709][0] := __var_59;
[L9826]               sum[amounts_s1709] := sum[amounts_s1709] + M_int_int[amounts_s1709][0];
[L9827]               __var_60 := 6000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9828]               sum[amounts_s1709] := sum[amounts_s1709] - M_int_int[amounts_s1709][1];
[L9829]               M_int_int[amounts_s1709][1] := __var_60;
[L9830]               sum[amounts_s1709] := sum[amounts_s1709] + M_int_int[amounts_s1709][1];
[L9831]               havoc freezes_s1709;
[L9832]               __var_61 := 0 % 18446744073709551616;
[L9833]               sum[freezes_s1709] := sum[freezes_s1709] - M_int_int[freezes_s1709][0];
[L9834]               M_int_int[freezes_s1709][0] := __var_61;
[L9835]               sum[freezes_s1709] := sum[freezes_s1709] + M_int_int[freezes_s1709][0];
[L9836]               __var_62 := 0 % 18446744073709551616;
[L9837]               sum[freezes_s1709] := sum[freezes_s1709] - M_int_int[freezes_s1709][1];
[L9838]               M_int_int[freezes_s1709][1] := __var_62;
[L9839]               sum[freezes_s1709] := sum[freezes_s1709] + M_int_int[freezes_s1709][1];
[L9840]               i_s1709 := 0;
[L9841]   COND FALSE  !(i_s1709 < Length[addresses_s1709])
[L9865]   COND FALSE  !(!CONTINUE_MINTING_Consts[this])
[L9875]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9463]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9464]   COND FALSE  !(revert)
[L9467]   COND TRUE   DType[this] == MainToken
[L9468]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7381]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12786]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7381]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7382]   COND FALSE  !(revert)
[L7385]   COND TRUE   DType[this] == MainToken
[L7386]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7429]               __var_11 := null;
[L7430]   COND FALSE  !(!(_newOwner_s581 != null))
[L7434]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7435]               owner_Ownable[this] := _newOwner_s581;
[L7386]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7387]   COND FALSE  !(revert)
[L9468]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9469]   COND FALSE  !(revert)
[L9575]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9576]   COND FALSE  !(revert)
[L4433]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4434]               assume !revert && gas >= 0;
[L14838]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14839]              assume !revert && gas >= 0;
[L14842]  CALL        call CorralChoice_MainToken(this);
[L14499]              havoc msgsender_MSG;
[L14500]              havoc msgvalue_MSG;
[L14501]              havoc choice;
[L14502]              havoc __ret_0_totalSupply;
[L14503]              havoc _owner_s729;
[L14504]              havoc balance_s729;
[L14505]              havoc _to_s1572;
[L14506]              havoc _value_s1572;
[L14507]              havoc _success_s1572;
[L14508]              havoc _owner_s395;
[L14509]              havoc _spender_s395;
[L14510]              havoc __ret_0_allowance;
[L14511]              havoc _from_s1551;
[L14512]              havoc _to_s1551;
[L14513]              havoc _value_s1551;
[L14514]              havoc _success_s1551;
[L14515]              havoc _spender_s379;
[L14516]              havoc _value_s379;
[L14517]              havoc __ret_0_approve;
[L14518]              havoc _spender_s437;
[L14519]              havoc _addedValue_s437;
[L14520]              havoc __ret_0_increaseApproval;
[L14521]              havoc _spender_s497;
[L14522]              havoc _subtractedValue_s497;
[L14523]              havoc __ret_0_decreaseApproval;
[L14524]              havoc __ret_0_owner;
[L14525]              havoc _newOwner_s558;
[L14526]              havoc __ret_0_mintingFinished;
[L14527]              havoc _to_s664;
[L14528]              havoc _amount_s664;
[L14529]              havoc __ret_0_mint;
[L14530]              havoc __ret_0_finishMinting;
[L14531]              havoc _owner_s742;
[L14532]              havoc balance_s742;
[L14533]              havoc _owner_s754;
[L14534]              havoc balance_s754;
[L14535]              havoc _addr_s792;
[L14536]              havoc count_s792;
[L14537]              havoc _addr_s849;
[L14538]              havoc _index_s849;
[L14539]              havoc _release_s849;
[L14540]              havoc _balance_s849;
[L14541]              havoc _to_s938;
[L14542]              havoc _amount_s938;
[L14543]              havoc _until_s938;
[L14544]              havoc tokens_s1107;
[L14545]              havoc _value_s1261;
[L14546]              havoc __ret_0_paused;
[L14547]              havoc _to_s1449;
[L14548]              havoc _amount_s1449;
[L14549]              havoc _until_s1449;
[L14550]              havoc __ret_0_mintAndFreeze;
[L14551]              havoc __ret_0_TOKEN_DECIMALS;
[L14552]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14553]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14554]              havoc __ret_0_TOKEN_NAME;
[L14555]              havoc __ret_0_TOKEN_SYMBOL;
[L14556]              havoc __ret_0_PAUSED;
[L14557]              havoc __ret_0_TARGET_USER;
[L14558]              havoc __ret_0_CONTINUE_MINTING;
[L14559]              havoc __ret_0_initialized;
[L14560]              havoc _name_s1511;
[L14561]              havoc _symbol_s1519;
[L14562]              havoc _decimals_s1527;
[L14563]              havoc tmpNow;
[L14564]              havoc gas;
[L14565]              assume gas > 4000000 && gas <= 8000000;
[L14566]              tmpNow := now;
[L14567]              havoc now;
[L14568]              assume now > tmpNow;
[L14569]              assume msgsender_MSG != null;
[L14570]              assume DType[msgsender_MSG] != ERC20Basic;
[L14571]              assume DType[msgsender_MSG] != SafeMath;
[L14572]              assume DType[msgsender_MSG] != BasicToken;
[L14573]              assume DType[msgsender_MSG] != ERC20;
[L14574]              assume DType[msgsender_MSG] != StandardToken;
[L14575]              assume DType[msgsender_MSG] != Ownable;
[L14576]              assume DType[msgsender_MSG] != MintableToken;
[L14577]              assume DType[msgsender_MSG] != FreezableToken;
[L14578]              assume DType[msgsender_MSG] != BurnableToken;
[L14579]              assume DType[msgsender_MSG] != Pausable;
[L14580]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14581]              assume DType[msgsender_MSG] != Consts;
[L14582]              assume DType[msgsender_MSG] != MainToken;
[L14583]              Alloc[msgsender_MSG] := true;
[L14584]  COND FALSE  !(choice == 38)
[L14590]  COND FALSE  !(choice == 37)
[L14596]  COND FALSE  !(choice == 36)
[L14603]  COND FALSE  !(choice == 35)
[L14609]  COND FALSE  !(choice == 34)
[L14616]  COND FALSE  !(choice == 33)
[L14623]  COND FALSE  !(choice == 32)
[L14630]  COND TRUE   choice == 31
[L14631]              gas := gas - 21000;
[L14632]  COND TRUE   gas >= 0
[L14633]              assume _subtractedValue_s497 >= 0 && _subtractedValue_s497 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14634]              assume msgvalue_MSG == 0;
[L14635]  CALL        call __ret_0_decreaseApproval := decreaseApproval~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s497, _subtractedValue_s497);
[L1183]               havoc __exception;
[L1184]               revert := false;
[L1185]   COND FALSE  !(__exception)
[L1224]   CALL        call __ret_0_ := decreaseApproval~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s497, _subtractedValue_s497);
[L7265]               oldValue_s497 := allowed_StandardToken[this][msgsender_MSG][_spender_s497];
[L7266]   COND TRUE   _subtractedValue_s497 > oldValue_s497
[L7267]               sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_StandardToken[this][msgsender_MSG][_spender_s497];
[L7268]               allowed_StandardToken[this][msgsender_MSG][_spender_s497] := 0;
[L7269]               sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_StandardToken[this][msgsender_MSG][_spender_s497];
[L7279]               assert { :EventEmitted "Approval_StandardToken" } true;
[L7280]               __ret_0_ := true;
[L1224]   RET         call __ret_0_ := decreaseApproval~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s497, _subtractedValue_s497);
[L1225]               assume !revert && gas >= 0;
[L14635]  RET         call __ret_0_decreaseApproval := decreaseApproval~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s497, _subtractedValue_s497);
[L14842]  RET         call CorralChoice_MainToken(this);
[L14842]  CALL        call CorralChoice_MainToken(this);
[L14499]              havoc msgsender_MSG;
[L14500]              havoc msgvalue_MSG;
[L14501]              havoc choice;
[L14502]              havoc __ret_0_totalSupply;
[L14503]              havoc _owner_s729;
[L14504]              havoc balance_s729;
[L14505]              havoc _to_s1572;
[L14506]              havoc _value_s1572;
[L14507]              havoc _success_s1572;
[L14508]              havoc _owner_s395;
[L14509]              havoc _spender_s395;
[L14510]              havoc __ret_0_allowance;
[L14511]              havoc _from_s1551;
[L14512]              havoc _to_s1551;
[L14513]              havoc _value_s1551;
[L14514]              havoc _success_s1551;
[L14515]              havoc _spender_s379;
[L14516]              havoc _value_s379;
[L14517]              havoc __ret_0_approve;
[L14518]              havoc _spender_s437;
[L14519]              havoc _addedValue_s437;
[L14520]              havoc __ret_0_increaseApproval;
[L14521]              havoc _spender_s497;
[L14522]              havoc _subtractedValue_s497;
[L14523]              havoc __ret_0_decreaseApproval;
[L14524]              havoc __ret_0_owner;
[L14525]              havoc _newOwner_s558;
[L14526]              havoc __ret_0_mintingFinished;
[L14527]              havoc _to_s664;
[L14528]              havoc _amount_s664;
[L14529]              havoc __ret_0_mint;
[L14530]              havoc __ret_0_finishMinting;
[L14531]              havoc _owner_s742;
[L14532]              havoc balance_s742;
[L14533]              havoc _owner_s754;
[L14534]              havoc balance_s754;
[L14535]              havoc _addr_s792;
[L14536]              havoc count_s792;
[L14537]              havoc _addr_s849;
[L14538]              havoc _index_s849;
[L14539]              havoc _release_s849;
[L14540]              havoc _balance_s849;
[L14541]              havoc _to_s938;
[L14542]              havoc _amount_s938;
[L14543]              havoc _until_s938;
[L14544]              havoc tokens_s1107;
[L14545]              havoc _value_s1261;
[L14546]              havoc __ret_0_paused;
[L14547]              havoc _to_s1449;
[L14548]              havoc _amount_s1449;
[L14549]              havoc _until_s1449;
[L14550]              havoc __ret_0_mintAndFreeze;
[L14551]              havoc __ret_0_TOKEN_DECIMALS;
[L14552]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14553]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14554]              havoc __ret_0_TOKEN_NAME;
[L14555]              havoc __ret_0_TOKEN_SYMBOL;
[L14556]              havoc __ret_0_PAUSED;
[L14557]              havoc __ret_0_TARGET_USER;
[L14558]              havoc __ret_0_CONTINUE_MINTING;
[L14559]              havoc __ret_0_initialized;
[L14560]              havoc _name_s1511;
[L14561]              havoc _symbol_s1519;
[L14562]              havoc _decimals_s1527;
[L14563]              havoc tmpNow;
[L14564]              havoc gas;
[L14565]              assume gas > 4000000 && gas <= 8000000;
[L14566]              tmpNow := now;
[L14567]              havoc now;
[L14568]              assume now > tmpNow;
[L14569]              assume msgsender_MSG != null;
[L14570]              assume DType[msgsender_MSG] != ERC20Basic;
[L14571]              assume DType[msgsender_MSG] != SafeMath;
[L14572]              assume DType[msgsender_MSG] != BasicToken;
[L14573]              assume DType[msgsender_MSG] != ERC20;
[L14574]              assume DType[msgsender_MSG] != StandardToken;
[L14575]              assume DType[msgsender_MSG] != Ownable;
[L14576]              assume DType[msgsender_MSG] != MintableToken;
[L14577]              assume DType[msgsender_MSG] != FreezableToken;
[L14578]              assume DType[msgsender_MSG] != BurnableToken;
[L14579]              assume DType[msgsender_MSG] != Pausable;
[L14580]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14581]              assume DType[msgsender_MSG] != Consts;
[L14582]              assume DType[msgsender_MSG] != MainToken;
[L14583]              Alloc[msgsender_MSG] := true;
[L14584]  COND FALSE  !(choice == 38)
[L14590]  COND FALSE  !(choice == 37)
[L14596]  COND FALSE  !(choice == 36)
[L14603]  COND FALSE  !(choice == 35)
[L14609]  COND FALSE  !(choice == 34)
[L14616]  COND TRUE   choice == 33
[L14617]              gas := gas - 21000;
[L14618]  COND TRUE   gas >= 0
[L14619]              assume _value_s379 >= 0 && _value_s379 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14620]              assume msgvalue_MSG == 0;
[L14621]  CALL        call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != _spender_s379;
[L3]                  call_approve_StandardToken0 := true;
[L3]                  call_approve_StandardToken0 := false;
[L3]                  revert := revert_hold;
[L921]                havoc __exception;
[L922]                revert := false;
[L923]    COND FALSE  !(__exception)
[L962]    CALL        call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L7190]               sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_StandardToken[this][msgsender_MSG][_spender_s379];
[L7191]               allowed_StandardToken[this][msgsender_MSG][_spender_s379] := _value_s379;
[L7192]               sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_StandardToken[this][msgsender_MSG][_spender_s379];
[L7193]               assert { :EventEmitted "Approval_StandardToken" } true;
[L7194]               __ret_0_ := true;
[L962]    RET         call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L963]                assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !(((((((((((__ret_0_ == true && allowed_StandardToken[this][msgsender_MSG][_spender_s379] == _value_s379) && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L3]                  revert := revert_hold;
[L14621]  RET         call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L14842]  RET         call CorralChoice_MainToken(this);

Loop:
[L14842]  CALL        call CorralChoice_MainToken(this);
[L14499]              havoc msgsender_MSG;
[L14500]              havoc msgvalue_MSG;
[L14501]              havoc choice;
[L14502]              havoc __ret_0_totalSupply;
[L14503]              havoc _owner_s729;
[L14504]              havoc balance_s729;
[L14505]              havoc _to_s1572;
[L14506]              havoc _value_s1572;
[L14507]              havoc _success_s1572;
[L14508]              havoc _owner_s395;
[L14509]              havoc _spender_s395;
[L14510]              havoc __ret_0_allowance;
[L14511]              havoc _from_s1551;
[L14512]              havoc _to_s1551;
[L14513]              havoc _value_s1551;
[L14514]              havoc _success_s1551;
[L14515]              havoc _spender_s379;
[L14516]              havoc _value_s379;
[L14517]              havoc __ret_0_approve;
[L14518]              havoc _spender_s437;
[L14519]              havoc _addedValue_s437;
[L14520]              havoc __ret_0_increaseApproval;
[L14521]              havoc _spender_s497;
[L14522]              havoc _subtractedValue_s497;
[L14523]              havoc __ret_0_decreaseApproval;
[L14524]              havoc __ret_0_owner;
[L14525]              havoc _newOwner_s558;
[L14526]              havoc __ret_0_mintingFinished;
[L14527]              havoc _to_s664;
[L14528]              havoc _amount_s664;
[L14529]              havoc __ret_0_mint;
[L14530]              havoc __ret_0_finishMinting;
[L14531]              havoc _owner_s742;
[L14532]              havoc balance_s742;
[L14533]              havoc _owner_s754;
[L14534]              havoc balance_s754;
[L14535]              havoc _addr_s792;
[L14536]              havoc count_s792;
[L14537]              havoc _addr_s849;
[L14538]              havoc _index_s849;
[L14539]              havoc _release_s849;
[L14540]              havoc _balance_s849;
[L14541]              havoc _to_s938;
[L14542]              havoc _amount_s938;
[L14543]              havoc _until_s938;
[L14544]              havoc tokens_s1107;
[L14545]              havoc _value_s1261;
[L14546]              havoc __ret_0_paused;
[L14547]              havoc _to_s1449;
[L14548]              havoc _amount_s1449;
[L14549]              havoc _until_s1449;
[L14550]              havoc __ret_0_mintAndFreeze;
[L14551]              havoc __ret_0_TOKEN_DECIMALS;
[L14552]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14553]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14554]              havoc __ret_0_TOKEN_NAME;
[L14555]              havoc __ret_0_TOKEN_SYMBOL;
[L14556]              havoc __ret_0_PAUSED;
[L14557]              havoc __ret_0_TARGET_USER;
[L14558]              havoc __ret_0_CONTINUE_MINTING;
[L14559]              havoc __ret_0_initialized;
[L14560]              havoc _name_s1511;
[L14561]              havoc _symbol_s1519;
[L14562]              havoc _decimals_s1527;
[L14563]              havoc tmpNow;
[L14564]              havoc gas;
[L14565]              assume gas > 4000000 && gas <= 8000000;
[L14566]              tmpNow := now;
[L14567]              havoc now;
[L14568]              assume now > tmpNow;
[L14569]              assume msgsender_MSG != null;
[L14570]              assume DType[msgsender_MSG] != ERC20Basic;
[L14571]              assume DType[msgsender_MSG] != SafeMath;
[L14572]              assume DType[msgsender_MSG] != BasicToken;
[L14573]              assume DType[msgsender_MSG] != ERC20;
[L14574]              assume DType[msgsender_MSG] != StandardToken;
[L14575]              assume DType[msgsender_MSG] != Ownable;
[L14576]              assume DType[msgsender_MSG] != MintableToken;
[L14577]              assume DType[msgsender_MSG] != FreezableToken;
[L14578]              assume DType[msgsender_MSG] != BurnableToken;
[L14579]              assume DType[msgsender_MSG] != Pausable;
[L14580]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14581]              assume DType[msgsender_MSG] != Consts;
[L14582]              assume DType[msgsender_MSG] != MainToken;
[L14583]              Alloc[msgsender_MSG] := true;
[L14584]  COND FALSE  !(choice == 38)
[L14590]  COND FALSE  !(choice == 37)
[L14596]  COND FALSE  !(choice == 36)
[L14603]  COND FALSE  !(choice == 35)
[L14609]  COND FALSE  !(choice == 34)
[L14616]  COND TRUE   choice == 33
[L14617]              gas := gas - 21000;
[L14618]  COND TRUE   gas >= 0
[L14619]              assume _value_s379 >= 0 && _value_s379 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14620]              assume msgvalue_MSG == 0;
[L14621]  CALL        call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != _spender_s379;
[L3]                  call_approve_StandardToken0 := true;
[L3]                  call_approve_StandardToken0 := false;
[L3]                  revert := revert_hold;
[L921]                havoc __exception;
[L922]                revert := false;
[L923]    COND FALSE  !(__exception)
[L962]    CALL        call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L7190]               sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_StandardToken[this][msgsender_MSG][_spender_s379];
[L7191]               allowed_StandardToken[this][msgsender_MSG][_spender_s379] := _value_s379;
[L7192]               sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_StandardToken[this][msgsender_MSG][_spender_s379];
[L7193]               assert { :EventEmitted "Approval_StandardToken" } true;
[L7194]               __ret_0_ := true;
[L962]    RET         call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L963]                assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !(((((((((((__ret_0_ == true && allowed_StandardToken[this][msgsender_MSG][_spender_s379] == _value_s379) && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L3]                  revert := revert_hold;
[L14621]  RET         call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L14842]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:17:54,140 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:17:54,141 INFO  L82        PathProgramCache]: Analyzing trace with hash 1429638762, now seen corresponding path program 1 times
[2020-11-24 21:17:54,141 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:17:54,271 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:17:54,913 INFO  L134       CoverageAnalysis]: Checked inductivity of 9916 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 9916 trivial. 0 not checked.
[2020-11-24 21:17:54,913 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:17:54,913 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-24 21:17:54,914 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:17:54,914 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-24 21:17:54,914 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=29, Unknown=0, NotChecked=0, Total=42
[2020-11-24 21:17:54,915 INFO  L87              Difference]: Start difference. First operand 5673 states and 6395 transitions. cyclomatic complexity: 738 Second operand 7 states.
[2020-11-24 21:17:55,780 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:17:55,780 INFO  L93              Difference]: Finished difference Result 3193 states and 3596 transitions.
[2020-11-24 21:17:55,780 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-24 21:17:55,781 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3193 states and 3596 transitions.
[2020-11-24 21:17:55,785 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-24 21:17:55,785 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3193 states to 0 states and 0 transitions.
[2020-11-24 21:17:55,785 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-24 21:17:55,785 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-24 21:17:55,785 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-24 21:17:55,785 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:17:55,785 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-24 21:17:55,785 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-24 21:17:55,785 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-24 21:17:55,785 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-24 21:17:55,785 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-24 21:17:55,785 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-24 21:17:55,785 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-24 21:17:55,788 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 24.11 09:17:55 BasicIcfg
[2020-11-24 21:17:55,789 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-24 21:17:55,789 INFO  L168              Benchmark]: Toolchain (without parser) took 24563.33 ms. Allocated memory was 1.0 GB in the beginning and 4.0 GB in the end (delta: 3.0 GB). Free memory was 913.7 MB in the beginning and 3.6 GB in the end (delta: -2.6 GB). Peak memory consumption was 311.8 MB. Max. memory is 15.3 GB.
[2020-11-24 21:17:55,790 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-24 21:17:55,790 INFO  L168              Benchmark]: Boogie Preprocessor took 193.80 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 886.9 MB in the end (delta: 26.8 MB). Peak memory consumption was 26.8 MB. Max. memory is 15.3 GB.
[2020-11-24 21:17:55,790 INFO  L168              Benchmark]: UtopiaSpecLang took 97.92 ms. Allocated memory is still 1.0 GB. Free memory was 886.9 MB in the beginning and 870.8 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
[2020-11-24 21:17:55,791 INFO  L168              Benchmark]: Boogie Printer took 34.07 ms. Allocated memory is still 1.0 GB. Free memory was 870.8 MB in the beginning and 859.3 MB in the end (delta: 11.5 MB). Peak memory consumption was 11.5 MB. Max. memory is 15.3 GB.
[2020-11-24 21:17:55,791 INFO  L168              Benchmark]: RCFGBuilder took 1738.16 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 152.6 MB). Free memory was 859.3 MB in the beginning and 1.0 GB in the end (delta: -174.4 MB). Peak memory consumption was 235.8 MB. Max. memory is 15.3 GB.
[2020-11-24 21:17:55,791 INFO  L168              Benchmark]: UtopiaLTL2Aut took 37.61 ms. Allocated memory is still 1.2 GB. Free memory was 1.0 GB in the beginning and 1.0 GB in the end (delta: 7.5 MB). Peak memory consumption was 7.5 MB. Max. memory is 15.3 GB.
[2020-11-24 21:17:55,792 INFO  L168              Benchmark]: BÃ¼chi Program Product took 4243.54 ms. Allocated memory was 1.2 GB in the beginning and 1.5 GB in the end (delta: 344.5 MB). Free memory was 1.0 GB in the beginning and 677.9 MB in the end (delta: 348.2 MB). Peak memory consumption was 748.0 MB. Max. memory is 15.3 GB.
[2020-11-24 21:17:55,792 INFO  L168              Benchmark]: BlockEncodingV2 took 378.37 ms. Allocated memory was 1.5 GB in the beginning and 1.9 GB in the end (delta: 371.2 MB). Free memory was 677.9 MB in the beginning and 1.5 GB in the end (delta: -854.5 MB). Peak memory consumption was 102.1 MB. Max. memory is 15.3 GB.
[2020-11-24 21:17:55,792 INFO  L168              Benchmark]: BuchiAutomizer took 17836.94 ms. Allocated memory was 1.9 GB in the beginning and 4.0 GB in the end (delta: 2.1 GB). Free memory was 1.5 GB in the beginning and 3.6 GB in the end (delta: -2.0 GB). Peak memory consumption was 62.3 MB. Max. memory is 15.3 GB.
[2020-11-24 21:17:55,795 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    13520 locations, 24825 edges
  - StatisticsResult: Encoded RCFG
    13310 locations, 24239 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 193.80 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 886.9 MB in the end (delta: 26.8 MB). Peak memory consumption was 26.8 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 97.92 ms. Allocated memory is still 1.0 GB. Free memory was 886.9 MB in the beginning and 870.8 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 34.07 ms. Allocated memory is still 1.0 GB. Free memory was 870.8 MB in the beginning and 859.3 MB in the end (delta: 11.5 MB). Peak memory consumption was 11.5 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 1738.16 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 152.6 MB). Free memory was 859.3 MB in the beginning and 1.0 GB in the end (delta: -174.4 MB). Peak memory consumption was 235.8 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 37.61 ms. Allocated memory is still 1.2 GB. Free memory was 1.0 GB in the beginning and 1.0 GB in the end (delta: 7.5 MB). Peak memory consumption was 7.5 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 4243.54 ms. Allocated memory was 1.2 GB in the beginning and 1.5 GB in the end (delta: 344.5 MB). Free memory was 1.0 GB in the beginning and 677.9 MB in the end (delta: 348.2 MB). Peak memory consumption was 748.0 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 378.37 ms. Allocated memory was 1.5 GB in the beginning and 1.9 GB in the end (delta: 371.2 MB). Free memory was 677.9 MB in the beginning and 1.5 GB in the end (delta: -854.5 MB). Peak memory consumption was 102.1 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 17836.94 ms. Allocated memory was 1.9 GB in the beginning and 4.0 GB in the end (delta: 2.1 GB). Free memory was 1.5 GB in the beginning and 3.6 GB in the end (delta: -2.0 GB). Peak memory consumption was 62.3 MB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    5420 locations, 7596 edges
  - StatisticsResult: BuchiProgram size
    13520 locations, 24825 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 7 terminating modules (7 trivial, 0 deterministic, 0 nondeterministic). 7 modules have a trivial ranking function, the largest among these consists of 16 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 17.8s and 8 iterations.  TraceHistogramMax:38. Analysis of lassos took 4.0s. Construction of modules took 9.3s. BÃ¼chi inclusion checks took 3.1s. Highest rank in rank-based complementation 0. Minimization of det autom 7. Minimization of nondet autom 0. Automata minimization 0.5s AutomataMinimizationTime, 6 MinimizatonAttempts, 4558 StatesRemovedByMinimization, 5 NontrivialMinimizations. Non-live state removal took 0.3s Buchi closure took 0.0s. Biggest automaton had 9113 states and ocurred in iteration 5.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 60595 SDtfs, 56279 SDslu, 49967 SDs, 0 SdLazy, 119008 SolverSat, 10062 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 9.3s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU7 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_approve_StandardToken0) ==> ( <>(success_approve_StandardToken0) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
