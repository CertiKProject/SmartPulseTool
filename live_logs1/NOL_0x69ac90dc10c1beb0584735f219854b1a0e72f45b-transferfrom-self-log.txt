This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 02:13:35,592 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 02:13:35,594 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 02:13:35,605 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 02:13:35,605 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 02:13:35,607 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 02:13:35,608 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 02:13:35,609 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 02:13:35,611 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 02:13:35,612 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 02:13:35,612 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 02:13:35,613 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 02:13:35,613 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 02:13:35,614 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 02:13:35,615 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 02:13:35,616 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 02:13:35,616 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 02:13:35,617 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 02:13:35,619 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 02:13:35,620 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 02:13:35,621 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 02:13:35,622 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 02:13:35,624 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 02:13:35,624 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 02:13:35,624 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 02:13:35,625 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 02:13:35,625 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 02:13:35,626 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 02:13:35,626 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 02:13:35,626 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 02:13:35,627 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 02:13:35,628 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 02:13:35,628 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 02:13:35,629 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 02:13:35,630 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 02:13:35,630 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 02:13:35,630 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 02:13:35,630 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 02:13:35,631 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 02:13:35,631 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 02:13:35,632 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 02:13:35,632 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 02:13:35,640 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 02:13:35,641 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 02:13:35,641 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 02:13:35,642 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 02:13:35,642 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 02:13:35,642 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 02:13:35,642 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 02:13:35,642 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 02:13:35,642 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 02:13:35,642 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 02:13:35,642 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 02:13:35,642 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 02:13:35,642 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 02:13:35,643 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 02:13:35,643 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 02:13:35,643 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 02:13:35,643 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 02:13:35,643 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 02:13:35,643 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 02:13:35,643 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 02:13:35,643 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 02:13:35,643 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 02:13:35,643 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 02:13:35,644 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 02:13:35,644 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 02:13:35,644 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 02:13:35,668 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 02:13:35,681 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 02:13:35,684 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 02:13:35,685 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 02:13:35,686 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 02:13:35,686 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/NOL_0x69ac90dc10c1beb0584735f219854b1a0e72f45b_transferfrom-self.bpl
[2020-11-25 02:13:35,686 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/NOL_0x69ac90dc10c1beb0584735f219854b1a0e72f45b_transferfrom-self.bpl'
[2020-11-25 02:13:35,772 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 02:13:35,773 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 02:13:35,774 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 02:13:35,774 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 02:13:35,774 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 02:13:35,791 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "NOL_0x69ac90dc10c1beb0584735f219854b1a0e72f45b_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:13:35" (1/1) ...
[2020-11-25 02:13:35,792 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "NOL_0x69ac90dc10c1beb0584735f219854b1a0e72f45b_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:13:35" (1/1) ...
[2020-11-25 02:13:35,828 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "NOL_0x69ac90dc10c1beb0584735f219854b1a0e72f45b_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:13:35" (1/1) ...
[2020-11-25 02:13:35,829 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "NOL_0x69ac90dc10c1beb0584735f219854b1a0e72f45b_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:13:35" (1/1) ...
[2020-11-25 02:13:35,852 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "NOL_0x69ac90dc10c1beb0584735f219854b1a0e72f45b_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:13:35" (1/1) ...
[2020-11-25 02:13:35,864 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "NOL_0x69ac90dc10c1beb0584735f219854b1a0e72f45b_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:13:35" (1/1) ...
[2020-11-25 02:13:35,874 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "NOL_0x69ac90dc10c1beb0584735f219854b1a0e72f45b_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:13:35" (1/1) ...
[2020-11-25 02:13:35,884 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 02:13:35,885 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 02:13:35,885 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 02:13:35,887 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 02:13:35,891 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "NOL_0x69ac90dc10c1beb0584735f219854b1a0e72f45b_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:13:35" (1/1) ...
[2020-11-25 02:13:35,913 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(TokenERC20.transferFrom(from, to, value), (p1 != from || p2 != msg.sender) && from == to && value <= balanceOf_TokenERC20[this][from] && value <= allowance_TokenERC20[this][from][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_TokenERC20[this][to] >= 0 && balanceOf_TokenERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_TokenERC20[this][from] >= 0 &&  balanceOf_TokenERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowance_TokenERC20[this][from][msg.sender] >= 0 && allowance_TokenERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(TokenERC20.transferFrom(from, to, value), return == true && allowance_TokenERC20[this][from][msg.sender] == old(allowance_TokenERC20[this][from][msg.sender]) - value && totalSupply_TokenERC20[this] == old(totalSupply_TokenERC20[this]) && balanceOf_TokenERC20[this] == old(balanceOf_TokenERC20[this]) && allowance_TokenERC20[this][p1][p2] == old(allowance_TokenERC20[this][p1][p2]) && sellPrice_NOL[this] == old(sellPrice_NOL[this]) && buyPrice_NOL[this] == old(buyPrice_NOL[this]) && frozenAccount_NOL[this] == old(frozenAccount_NOL[this]) && name_TokenERC20[this] == old(name_TokenERC20[this]) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this]) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this]) && owner_owned[this] == old(owner_owned[this]))))
[2020-11-25 02:13:35,918 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(TokenERC20.transferFrom(from, to, value), (p1 != from || p2 != msg.sender) && from == to && value <= balanceOf_TokenERC20[this][from] && value <= allowance_TokenERC20[this][from][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_TokenERC20[this][to] >= 0 && balanceOf_TokenERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_TokenERC20[this][from] >= 0 &&  balanceOf_TokenERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowance_TokenERC20[this][from][msg.sender] >= 0 && allowance_TokenERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(TokenERC20.transferFrom(from, to, value), return == true && allowance_TokenERC20[this][from][msg.sender] == old(allowance_TokenERC20[this][from][msg.sender]) - value && totalSupply_TokenERC20[this] == old(totalSupply_TokenERC20[this]) && balanceOf_TokenERC20[this] == old(balanceOf_TokenERC20[this]) && allowance_TokenERC20[this][p1][p2] == old(allowance_TokenERC20[this][p1][p2]) && sellPrice_NOL[this] == old(sellPrice_NOL[this]) && buyPrice_NOL[this] == old(buyPrice_NOL[this]) && frozenAccount_NOL[this] == old(frozenAccount_NOL[this]) && name_TokenERC20[this] == old(name_TokenERC20[this]) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this]) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this]) && owner_owned[this] == old(owner_owned[this]))))
[2020-11-25 02:13:35,927 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(TokenERC20.transferFrom(from, to, value), (p1 != from || p2 != msg.sender) && from == to && value <= balanceOf_TokenERC20[this][from] && value <= allowance_TokenERC20[this][from][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_TokenERC20[this][to] >= 0 && balanceOf_TokenERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_TokenERC20[this][from] >= 0 &&  balanceOf_TokenERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowance_TokenERC20[this][from][msg.sender] >= 0 && allowance_TokenERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(TokenERC20.transferFrom(from, to, value), return == true && allowance_TokenERC20[this][from][msg.sender] == old(allowance_TokenERC20[this][from][msg.sender]) - value && totalSupply_TokenERC20[this] == old(totalSupply_TokenERC20[this]) && balanceOf_TokenERC20[this] == old(balanceOf_TokenERC20[this]) && allowance_TokenERC20[this][p1][p2] == old(allowance_TokenERC20[this][p1][p2]) && sellPrice_NOL[this] == old(sellPrice_NOL[this]) && buyPrice_NOL[this] == old(buyPrice_NOL[this]) && frozenAccount_NOL[this] == old(frozenAccount_NOL[this]) && name_TokenERC20[this] == old(name_TokenERC20[this]) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this]) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this]) && owner_owned[this] == old(owner_owned[this]))))
[2020-11-25 02:13:35,934 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( ( ( p1!=_from_s261 || p2!=msg.sender ) && _from_s261==_to_s261 ) && _value_s261<=balanceOf_TokenERC20[this][_from_s261] ) && _value_s261<=allowance_TokenERC20[this][_from_s261][msg.sender] ) && _value_s261>=0 ) && _value_s261<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balanceOf_TokenERC20[this][_to_s261]>=0 ) && balanceOf_TokenERC20[this][_to_s261]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balanceOf_TokenERC20[this][_from_s261]>=0 ) && balanceOf_TokenERC20[this][_from_s261]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && allowance_TokenERC20[this][_from_s261][msg.sender]>=0 ) && allowance_TokenERC20[this][_from_s261][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICOR,BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[_from_s261,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]],BinaryExpression[COMPNEQ,IdentifierExpression[p2,GLOBAL],IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],BinaryExpression[COMPEQ,IdentifierExpression[_from_s261,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>],IdentifierExpression[_to_s261,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],BinaryExpression[COMPLEQ,IdentifierExpression[_value_s261,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[_from_s261,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]]],BinaryExpression[COMPLEQ,IdentifierExpression[_value_s261,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>],ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowance_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[_from_s261,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]]],BinaryExpression[COMPGEQ,IdentifierExpression[_value_s261,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[_value_s261,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[_to_s261,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[_to_s261,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[_from_s261,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[_from_s261,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowance_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[_from_s261,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowance_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[_from_s261,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 02:13:35,937 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( ( success_s261==true && allowance_TokenERC20[this][_from_s261][msg.sender]==( ( old(allowance_TokenERC20[this][_from_s261][msg.sender]) ) - _value_s261 ) ) && totalSupply_TokenERC20[this]==( old(totalSupply_TokenERC20[this]) ) ) && balanceOf_TokenERC20[this]==( old(balanceOf_TokenERC20[this]) ) ) && allowance_TokenERC20[this][p1][p2]==( old(allowance_TokenERC20[this][p1][p2]) ) ) && sellPrice_NOL[this]==( old(sellPrice_NOL[this]) ) ) && buyPrice_NOL[this]==( old(buyPrice_NOL[this]) ) ) && frozenAccount_NOL[this]==( old(frozenAccount_NOL[this]) ) ) && name_TokenERC20[this]==( old(name_TokenERC20[this]) ) ) && symbol_TokenERC20[this]==( old(symbol_TokenERC20[this]) ) ) && decimals_TokenERC20[this]==( old(decimals_TokenERC20[this]) ) ) && owner_owned[this]==( old(owner_owned[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[success_s261,<IMPLEMENTATION_OUTPARAM,transferFrom~address~address~uint256_TokenERC20>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowance_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[_from_s261,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],BinaryExpression[ARITHMINUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowance_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[_from_s261,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]],IdentifierExpression[_value_s261,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[totalSupply_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[totalSupply_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[balanceOf_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[balanceOf_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowance_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[p1,GLOBAL]]],[IdentifierExpression[p2,GLOBAL]]],UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowance_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[p1,GLOBAL]]],[IdentifierExpression[p2,GLOBAL]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[sellPrice_NOL,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[sellPrice_NOL,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[buyPrice_NOL,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[buyPrice_NOL,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[frozenAccount_NOL,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[frozenAccount_NOL,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[name_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[name_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[symbol_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[symbol_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[decimals_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[decimals_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[owner_owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[owner_owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]]]]
[2020-11-25 02:13:35,944 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(TokenERC20.transferFrom(from, to, value), (p1 != from || p2 != msg.sender) && from == to && value <= balanceOf_TokenERC20[this][from] && value <= allowance_TokenERC20[this][from][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_TokenERC20[this][to] >= 0 && balanceOf_TokenERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_TokenERC20[this][from] >= 0 &&  balanceOf_TokenERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowance_TokenERC20[this][from][msg.sender] >= 0 && allowance_TokenERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(TokenERC20.transferFrom(from, to, value), return == true && allowance_TokenERC20[this][from][msg.sender] == old(allowance_TokenERC20[this][from][msg.sender]) - value && totalSupply_TokenERC20[this] == old(totalSupply_TokenERC20[this]) && balanceOf_TokenERC20[this] == old(balanceOf_TokenERC20[this]) && allowance_TokenERC20[this][p1][p2] == old(allowance_TokenERC20[this][p1][p2]) && sellPrice_NOL[this] == old(sellPrice_NOL[this]) && buyPrice_NOL[this] == old(buyPrice_NOL[this]) && frozenAccount_NOL[this] == old(frozenAccount_NOL[this]) && name_TokenERC20[this] == old(name_TokenERC20[this]) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this]) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this]) && owner_owned[this] == old(owner_owned[this]))))
[2020-11-25 02:13:35,945 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transferFrom_TokenERC200) ==> ( <>AP(success_transferFrom_TokenERC200) ) ) )
Executed UtopiaSpecLang
[2020-11-25 02:13:35,955 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:13:35 PropertyContainer
[2020-11-25 02:13:35,955 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 02:13:35,956 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 02:13:35,956 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 02:13:35,956 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 02:13:35,957 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "NOL_0x69ac90dc10c1beb0584735f219854b1a0e72f45b_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:13:35" (1/2) ...
[2020-11-25 02:13:35,957 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 02:13:35,957 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 02:13:35,975 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:13:35" (2/2) ...
[2020-11-25 02:13:35,975 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 02:13:35,975 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 02:13:35,976 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 02:13:35,976 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 02:13:35,977 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "NOL_0x69ac90dc10c1beb0584735f219854b1a0e72f45b_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:13:35" (1/2) ...
[2020-11-25 02:13:36,037 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 02:13:36,037 INFO  L130     BoogieDeclarations]: Found specification of procedure owned_owned_NoBaseCtor__success
[2020-11-25 02:13:36,037 INFO  L130     BoogieDeclarations]: Found specification of procedure owned_owned
[2020-11-25 02:13:36,037 INFO  L138     BoogieDeclarations]: Found implementation of procedure owned_owned
[2020-11-25 02:13:36,037 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_owned
[2020-11-25 02:13:36,037 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_owned
[2020-11-25 02:13:36,037 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_owned
[2020-11-25 02:13:36,038 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_owned
[2020-11-25 02:13:36,038 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenRecipient_tokenRecipient_NoBaseCtor__success
[2020-11-25 02:13:36,038 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenRecipient_tokenRecipient
[2020-11-25 02:13:36,038 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenRecipient_tokenRecipient
[2020-11-25 02:13:36,038 INFO  L130     BoogieDeclarations]: Found specification of procedure receiveApproval~address~uint256~address~bytes_tokenRecipient
[2020-11-25 02:13:36,038 INFO  L130     BoogieDeclarations]: Found specification of procedure TokenERC20_TokenERC20_NoBaseCtor__success
[2020-11-25 02:13:36,038 INFO  L130     BoogieDeclarations]: Found specification of procedure TokenERC20_TokenERC20
[2020-11-25 02:13:36,038 INFO  L138     BoogieDeclarations]: Found implementation of procedure TokenERC20_TokenERC20
[2020-11-25 02:13:36,038 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_TokenERC20__success
[2020-11-25 02:13:36,039 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_TokenERC20
[2020-11-25 02:13:36,039 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_TokenERC20
[2020-11-25 02:13:36,039 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_TokenERC20
[2020-11-25 02:13:36,039 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_TokenERC20
[2020-11-25 02:13:36,039 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_TokenERC20
[2020-11-25 02:13:36,039 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_TokenERC20
[2020-11-25 02:13:36,039 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_TokenERC20
[2020-11-25 02:13:36,039 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_TokenERC20
[2020-11-25 02:13:36,040 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_TokenERC20
[2020-11-25 02:13:36,040 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_TokenERC20
[2020-11-25 02:13:36,040 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_TokenERC20
[2020-11-25 02:13:36,040 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_TokenERC20
[2020-11-25 02:13:36,040 INFO  L130     BoogieDeclarations]: Found specification of procedure name_TokenERC20
[2020-11-25 02:13:36,040 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_TokenERC20
[2020-11-25 02:13:36,040 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_TokenERC20
[2020-11-25 02:13:36,040 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_TokenERC20
[2020-11-25 02:13:36,040 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_TokenERC20
[2020-11-25 02:13:36,041 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_TokenERC20
[2020-11-25 02:13:36,041 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_TokenERC20
[2020-11-25 02:13:36,041 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_TokenERC20
[2020-11-25 02:13:36,041 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_TokenERC20
[2020-11-25 02:13:36,041 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_TokenERC20
[2020-11-25 02:13:36,041 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_TokenERC20
[2020-11-25 02:13:36,041 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_TokenERC20
[2020-11-25 02:13:36,041 INFO  L130     BoogieDeclarations]: Found specification of procedure NOL_NOL_NoBaseCtor__success
[2020-11-25 02:13:36,041 INFO  L130     BoogieDeclarations]: Found specification of procedure NOL_NOL
[2020-11-25 02:13:36,041 INFO  L138     BoogieDeclarations]: Found implementation of procedure NOL_NOL
[2020-11-25 02:13:36,042 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_NOL__success
[2020-11-25 02:13:36,042 INFO  L130     BoogieDeclarations]: Found specification of procedure mintToken~address~uint256_NOL
[2020-11-25 02:13:36,042 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintToken~address~uint256_NOL
[2020-11-25 02:13:36,042 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeAccount~address~bool_NOL
[2020-11-25 02:13:36,042 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeAccount~address~bool_NOL
[2020-11-25 02:13:36,042 INFO  L130     BoogieDeclarations]: Found specification of procedure setPrices~uint256~uint256_NOL
[2020-11-25 02:13:36,042 INFO  L138     BoogieDeclarations]: Found implementation of procedure setPrices~uint256~uint256_NOL
[2020-11-25 02:13:36,042 INFO  L130     BoogieDeclarations]: Found specification of procedure buy_NOL
[2020-11-25 02:13:36,042 INFO  L138     BoogieDeclarations]: Found implementation of procedure buy_NOL
[2020-11-25 02:13:36,042 INFO  L130     BoogieDeclarations]: Found specification of procedure sell~uint256_NOL
[2020-11-25 02:13:36,043 INFO  L138     BoogieDeclarations]: Found implementation of procedure sell~uint256_NOL
[2020-11-25 02:13:36,043 INFO  L130     BoogieDeclarations]: Found specification of procedure sellPrice_NOL
[2020-11-25 02:13:36,043 INFO  L138     BoogieDeclarations]: Found implementation of procedure sellPrice_NOL
[2020-11-25 02:13:36,043 INFO  L130     BoogieDeclarations]: Found specification of procedure buyPrice_NOL
[2020-11-25 02:13:36,043 INFO  L138     BoogieDeclarations]: Found implementation of procedure buyPrice_NOL
[2020-11-25 02:13:36,043 INFO  L130     BoogieDeclarations]: Found specification of procedure frozenAccount~address_NOL
[2020-11-25 02:13:36,043 INFO  L138     BoogieDeclarations]: Found implementation of procedure frozenAccount~address_NOL
[2020-11-25 02:13:36,043 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 02:13:36,043 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 02:13:36,043 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 02:13:36,044 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 02:13:36,044 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_owned
[2020-11-25 02:13:36,044 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_owned
[2020-11-25 02:13:36,044 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_tokenRecipient
[2020-11-25 02:13:36,044 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_tokenRecipient
[2020-11-25 02:13:36,044 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_TokenERC20
[2020-11-25 02:13:36,044 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_TokenERC20
[2020-11-25 02:13:36,044 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_NOL
[2020-11-25 02:13:36,044 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 02:13:36,044 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 02:13:36,044 INFO  L130     BoogieDeclarations]: Found specification of procedure owned_owned_NoBaseCtor__fail
[2020-11-25 02:13:36,045 INFO  L130     BoogieDeclarations]: Found specification of procedure owned_owned__success
[2020-11-25 02:13:36,045 INFO  L130     BoogieDeclarations]: Found specification of procedure owned_owned__fail
[2020-11-25 02:13:36,045 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_owned__success
[2020-11-25 02:13:36,045 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_owned__fail
[2020-11-25 02:13:36,045 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_owned__success
[2020-11-25 02:13:36,045 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_owned__fail
[2020-11-25 02:13:36,045 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenRecipient_tokenRecipient_NoBaseCtor__fail
[2020-11-25 02:13:36,045 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenRecipient_tokenRecipient__success
[2020-11-25 02:13:36,045 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenRecipient_tokenRecipient__fail
[2020-11-25 02:13:36,045 INFO  L130     BoogieDeclarations]: Found specification of procedure TokenERC20_TokenERC20_NoBaseCtor__fail
[2020-11-25 02:13:36,045 INFO  L130     BoogieDeclarations]: Found specification of procedure TokenERC20_TokenERC20__success
[2020-11-25 02:13:36,045 INFO  L130     BoogieDeclarations]: Found specification of procedure TokenERC20_TokenERC20__fail
[2020-11-25 02:13:36,046 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_TokenERC20__fail
[2020-11-25 02:13:36,046 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_TokenERC20__success
[2020-11-25 02:13:36,046 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_TokenERC20__fail
[2020-11-25 02:13:36,046 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_TokenERC20__success
[2020-11-25 02:13:36,046 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_TokenERC20__fail
[2020-11-25 02:13:36,046 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_TokenERC20__success
[2020-11-25 02:13:36,046 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_TokenERC20__fail
[2020-11-25 02:13:36,046 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_TokenERC20__success
[2020-11-25 02:13:36,046 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_TokenERC20__fail
[2020-11-25 02:13:36,046 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_TokenERC20__success
[2020-11-25 02:13:36,046 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_TokenERC20__fail
[2020-11-25 02:13:36,046 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_TokenERC20__success
[2020-11-25 02:13:36,046 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_TokenERC20__fail
[2020-11-25 02:13:36,047 INFO  L130     BoogieDeclarations]: Found specification of procedure name_TokenERC20__success
[2020-11-25 02:13:36,047 INFO  L130     BoogieDeclarations]: Found specification of procedure name_TokenERC20__fail
[2020-11-25 02:13:36,047 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_TokenERC20__success
[2020-11-25 02:13:36,047 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_TokenERC20__fail
[2020-11-25 02:13:36,047 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_TokenERC20__success
[2020-11-25 02:13:36,047 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_TokenERC20__fail
[2020-11-25 02:13:36,047 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_TokenERC20__success
[2020-11-25 02:13:36,047 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_TokenERC20__fail
[2020-11-25 02:13:36,047 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_TokenERC20__success
[2020-11-25 02:13:36,047 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_TokenERC20__fail
[2020-11-25 02:13:36,047 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_TokenERC20__success
[2020-11-25 02:13:36,048 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_TokenERC20__fail
[2020-11-25 02:13:36,048 INFO  L130     BoogieDeclarations]: Found specification of procedure NOL_NOL_NoBaseCtor__fail
[2020-11-25 02:13:36,048 INFO  L130     BoogieDeclarations]: Found specification of procedure NOL_NOL__success
[2020-11-25 02:13:36,048 INFO  L130     BoogieDeclarations]: Found specification of procedure NOL_NOL__fail
[2020-11-25 02:13:36,048 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_NOL__fail
[2020-11-25 02:13:36,048 INFO  L130     BoogieDeclarations]: Found specification of procedure mintToken~address~uint256_NOL__success
[2020-11-25 02:13:36,048 INFO  L130     BoogieDeclarations]: Found specification of procedure mintToken~address~uint256_NOL__fail
[2020-11-25 02:13:36,048 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeAccount~address~bool_NOL__success
[2020-11-25 02:13:36,048 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeAccount~address~bool_NOL__fail
[2020-11-25 02:13:36,048 INFO  L130     BoogieDeclarations]: Found specification of procedure setPrices~uint256~uint256_NOL__success
[2020-11-25 02:13:36,048 INFO  L130     BoogieDeclarations]: Found specification of procedure setPrices~uint256~uint256_NOL__fail
[2020-11-25 02:13:36,048 INFO  L130     BoogieDeclarations]: Found specification of procedure buy_NOL__success
[2020-11-25 02:13:36,048 INFO  L130     BoogieDeclarations]: Found specification of procedure buy_NOL__fail
[2020-11-25 02:13:36,048 INFO  L130     BoogieDeclarations]: Found specification of procedure sell~uint256_NOL__success
[2020-11-25 02:13:36,049 INFO  L130     BoogieDeclarations]: Found specification of procedure sell~uint256_NOL__fail
[2020-11-25 02:13:36,049 INFO  L130     BoogieDeclarations]: Found specification of procedure sellPrice_NOL__success
[2020-11-25 02:13:36,049 INFO  L130     BoogieDeclarations]: Found specification of procedure sellPrice_NOL__fail
[2020-11-25 02:13:36,049 INFO  L130     BoogieDeclarations]: Found specification of procedure buyPrice_NOL__success
[2020-11-25 02:13:36,049 INFO  L130     BoogieDeclarations]: Found specification of procedure buyPrice_NOL__fail
[2020-11-25 02:13:36,049 INFO  L130     BoogieDeclarations]: Found specification of procedure frozenAccount~address_NOL__success
[2020-11-25 02:13:36,049 INFO  L130     BoogieDeclarations]: Found specification of procedure frozenAccount~address_NOL__fail
[2020-11-25 02:13:36,049 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 02:13:36,049 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 02:13:36,049 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 02:13:36,050 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 02:13:36,050 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 02:13:36,050 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 02:13:36,050 INFO  L138     BoogieDeclarations]: Found implementation of procedure owned_owned_NoBaseCtor__fail
[2020-11-25 02:13:36,050 INFO  L138     BoogieDeclarations]: Found implementation of procedure owned_owned_NoBaseCtor__success
[2020-11-25 02:13:36,050 INFO  L138     BoogieDeclarations]: Found implementation of procedure owned_owned__fail
[2020-11-25 02:13:36,050 INFO  L138     BoogieDeclarations]: Found implementation of procedure owned_owned__success
[2020-11-25 02:13:36,050 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_owned__fail
[2020-11-25 02:13:36,050 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_owned__success
[2020-11-25 02:13:36,051 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_owned__fail
[2020-11-25 02:13:36,051 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_owned__success
[2020-11-25 02:13:36,051 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenRecipient_tokenRecipient_NoBaseCtor__fail
[2020-11-25 02:13:36,051 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenRecipient_tokenRecipient_NoBaseCtor__success
[2020-11-25 02:13:36,051 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenRecipient_tokenRecipient__fail
[2020-11-25 02:13:36,051 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenRecipient_tokenRecipient__success
[2020-11-25 02:13:36,051 INFO  L138     BoogieDeclarations]: Found implementation of procedure TokenERC20_TokenERC20_NoBaseCtor__fail
[2020-11-25 02:13:36,051 INFO  L138     BoogieDeclarations]: Found implementation of procedure TokenERC20_TokenERC20_NoBaseCtor__success
[2020-11-25 02:13:36,052 INFO  L138     BoogieDeclarations]: Found implementation of procedure TokenERC20_TokenERC20__fail
[2020-11-25 02:13:36,052 INFO  L138     BoogieDeclarations]: Found implementation of procedure TokenERC20_TokenERC20__success
[2020-11-25 02:13:36,052 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_TokenERC20__fail
[2020-11-25 02:13:36,052 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_TokenERC20__success
[2020-11-25 02:13:36,052 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_TokenERC20__fail
[2020-11-25 02:13:36,052 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_TokenERC20__success
[2020-11-25 02:13:36,052 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_TokenERC20__fail
[2020-11-25 02:13:36,052 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_TokenERC20__success
[2020-11-25 02:13:36,052 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_TokenERC20__fail
[2020-11-25 02:13:36,052 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_TokenERC20__success
[2020-11-25 02:13:36,053 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_TokenERC20__fail
[2020-11-25 02:13:36,053 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_TokenERC20__success
[2020-11-25 02:13:36,053 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_TokenERC20__fail
[2020-11-25 02:13:36,053 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_TokenERC20__success
[2020-11-25 02:13:36,053 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_TokenERC20__fail
[2020-11-25 02:13:36,053 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_TokenERC20__success
[2020-11-25 02:13:36,053 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_TokenERC20__fail
[2020-11-25 02:13:36,053 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_TokenERC20__success
[2020-11-25 02:13:36,053 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_TokenERC20__fail
[2020-11-25 02:13:36,053 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_TokenERC20__success
[2020-11-25 02:13:36,053 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_TokenERC20__fail
[2020-11-25 02:13:36,054 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_TokenERC20__success
[2020-11-25 02:13:36,054 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_TokenERC20__fail
[2020-11-25 02:13:36,054 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_TokenERC20__success
[2020-11-25 02:13:36,054 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_TokenERC20__fail
[2020-11-25 02:13:36,054 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_TokenERC20__success
[2020-11-25 02:13:36,054 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_TokenERC20__fail
[2020-11-25 02:13:36,054 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_TokenERC20__success
[2020-11-25 02:13:36,054 INFO  L138     BoogieDeclarations]: Found implementation of procedure NOL_NOL_NoBaseCtor__fail
[2020-11-25 02:13:36,054 INFO  L138     BoogieDeclarations]: Found implementation of procedure NOL_NOL_NoBaseCtor__success
[2020-11-25 02:13:36,054 INFO  L138     BoogieDeclarations]: Found implementation of procedure NOL_NOL__fail
[2020-11-25 02:13:36,054 INFO  L138     BoogieDeclarations]: Found implementation of procedure NOL_NOL__success
[2020-11-25 02:13:36,055 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_NOL__fail
[2020-11-25 02:13:36,055 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_NOL__success
[2020-11-25 02:13:36,055 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintToken~address~uint256_NOL__fail
[2020-11-25 02:13:36,055 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintToken~address~uint256_NOL__success
[2020-11-25 02:13:36,055 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeAccount~address~bool_NOL__fail
[2020-11-25 02:13:36,055 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeAccount~address~bool_NOL__success
[2020-11-25 02:13:36,055 INFO  L138     BoogieDeclarations]: Found implementation of procedure setPrices~uint256~uint256_NOL__fail
[2020-11-25 02:13:36,055 INFO  L138     BoogieDeclarations]: Found implementation of procedure setPrices~uint256~uint256_NOL__success
[2020-11-25 02:13:36,055 INFO  L138     BoogieDeclarations]: Found implementation of procedure buy_NOL__fail
[2020-11-25 02:13:36,055 INFO  L138     BoogieDeclarations]: Found implementation of procedure buy_NOL__success
[2020-11-25 02:13:36,055 INFO  L138     BoogieDeclarations]: Found implementation of procedure sell~uint256_NOL__fail
[2020-11-25 02:13:36,055 INFO  L138     BoogieDeclarations]: Found implementation of procedure sell~uint256_NOL__success
[2020-11-25 02:13:36,056 INFO  L138     BoogieDeclarations]: Found implementation of procedure sellPrice_NOL__fail
[2020-11-25 02:13:36,056 INFO  L138     BoogieDeclarations]: Found implementation of procedure sellPrice_NOL__success
[2020-11-25 02:13:36,056 INFO  L138     BoogieDeclarations]: Found implementation of procedure buyPrice_NOL__fail
[2020-11-25 02:13:36,056 INFO  L138     BoogieDeclarations]: Found implementation of procedure buyPrice_NOL__success
[2020-11-25 02:13:36,056 INFO  L138     BoogieDeclarations]: Found implementation of procedure frozenAccount~address_NOL__fail
[2020-11-25 02:13:36,056 INFO  L138     BoogieDeclarations]: Found implementation of procedure frozenAccount~address_NOL__success
[2020-11-25 02:13:36,056 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 02:13:36,056 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 02:13:36,056 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 02:13:36,056 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 02:13:36,056 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 02:13:36,057 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 02:13:36,057 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 02:13:36,057 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 02:13:36,057 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_owned
[2020-11-25 02:13:36,057 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_owned
[2020-11-25 02:13:36,057 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_tokenRecipient
[2020-11-25 02:13:36,057 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_tokenRecipient
[2020-11-25 02:13:36,057 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_TokenERC20
[2020-11-25 02:13:36,057 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_TokenERC20
[2020-11-25 02:13:36,057 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_NOL
[2020-11-25 02:13:36,057 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 02:13:36,057 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 02:13:36,058 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 02:13:36,395 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 02:13:36,395 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 02:13:36,396 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 02:13:36,471 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 02:13:36,808 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 02:13:36,808 INFO  L286             CfgBuilder]: Removed 4 assue(true) statements.
[2020-11-25 02:13:36,810 INFO  L202        PluginConnector]: Adding new model NOL_0x69ac90dc10c1beb0584735f219854b1a0e72f45b_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:13:36 BoogieIcfgContainer
[2020-11-25 02:13:36,810 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:13:35" (2/2) ...
[2020-11-25 02:13:36,810 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 02:13:36,811 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@735d6c4 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:13:36, skipping insertion in model container
[2020-11-25 02:13:36,811 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 02:13:36,811 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 02:13:36,811 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 02:13:36,813 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 02:13:36,813 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "NOL_0x69ac90dc10c1beb0584735f219854b1a0e72f45b_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:13:35" (1/3) ...
[2020-11-25 02:13:36,813 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@28dd60fe and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:13:36, skipping insertion in model container
[2020-11-25 02:13:36,813 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:13:35" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 02:13:36,853 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:13:36 NWAContainer
[2020-11-25 02:13:36,853 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 02:13:36,853 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 02:13:36,853 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 02:13:36,854 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 02:13:36,855 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "NOL_0x69ac90dc10c1beb0584735f219854b1a0e72f45b_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:13:36" (3/4) ...
[2020-11-25 02:13:36,856 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@7490ba2f and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:13:36, skipping insertion in model container
[2020-11-25 02:13:36,856 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:13:36" (4/4) ...
[2020-11-25 02:13:36,859 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 02:13:36,864 INFO  L110   BuchiProductObserver]: Initial RCFG 2321 locations, 3071 edges
[2020-11-25 02:13:36,864 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 02:13:36,876 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 02:13:38,164 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 02:13:38,171 INFO  L110   BuchiProductObserver]: BuchiProgram size 5484 locations, 9672 edges
[2020-11-25 02:13:38,171 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:13:38 BoogieIcfgContainer
[2020-11-25 02:13:38,171 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 02:13:38,171 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 02:13:38,171 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 02:13:38,173 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 02:13:38,173 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:13:38" (1/1) ...
[2020-11-25 02:13:38,260 INFO  L313           BlockEncoder]: Initial Icfg 5484 locations, 9672 edges
[2020-11-25 02:13:38,260 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 02:13:38,261 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 02:13:38,261 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 02:13:38,261 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 02:13:38,274 INFO  L70    emoveInfeasibleEdges]: Removed 84 edges and 11 locations because of local infeasibility
[2020-11-25 02:13:38,284 INFO  L70        RemoveSinkStates]: Removed 32 edges and 21 locations by removing sink states
[2020-11-25 02:13:38,298 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 02:13:38,302 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 02:13:38,307 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 02:13:38,308 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 02:13:38,311 INFO  L313           BlockEncoder]: Encoded RCFG 5428 locations, 9521 edges
[2020-11-25 02:13:38,312 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 02:13:38 BasicIcfg
[2020-11-25 02:13:38,312 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 02:13:38,312 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 02:13:38,312 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 02:13:38,314 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 02:13:38,315 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 02:13:38,315 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "NOL_0x69ac90dc10c1beb0584735f219854b1a0e72f45b_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:13:35" (1/6) ...
[2020-11-25 02:13:38,317 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@3e193ef5 and model type NOL_0x69ac90dc10c1beb0584735f219854b1a0e72f45b_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 02:13:38, skipping insertion in model container
[2020-11-25 02:13:38,317 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 02:13:38,317 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:13:35" (2/6) ...
[2020-11-25 02:13:38,317 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@3e193ef5 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 02:13:38, skipping insertion in model container
[2020-11-25 02:13:38,317 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 02:13:38,317 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "NOL_0x69ac90dc10c1beb0584735f219854b1a0e72f45b_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:13:36" (3/6) ...
[2020-11-25 02:13:38,317 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@3e193ef5 and model type NOL_0x69ac90dc10c1beb0584735f219854b1a0e72f45b_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 02:13:38, skipping insertion in model container
[2020-11-25 02:13:38,317 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 02:13:38,318 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:13:36" (4/6) ...
[2020-11-25 02:13:38,318 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@3e193ef5 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 02:13:38, skipping insertion in model container
[2020-11-25 02:13:38,318 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 02:13:38,318 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:13:38" (5/6) ...
[2020-11-25 02:13:38,318 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@3e193ef5 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 02:13:38, skipping insertion in model container
[2020-11-25 02:13:38,318 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 02:13:38,318 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 02:13:38" (6/6) ...
[2020-11-25 02:13:38,319 INFO  L404   chiAutomizerObserver]: Analyzing ICFG NOL_0x69ac90dc10c1beb0584735f219854b1a0e72f45b_transferfrom-self.bpl_BEv2
[2020-11-25 02:13:38,346 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 02:13:38,346 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 02:13:38,346 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 02:13:38,346 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 02:13:38,346 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 02:13:38,346 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 02:13:38,346 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 02:13:38,346 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 02:13:38,346 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 02:13:38,385 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5428 states.
[2020-11-25 02:13:38,442 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:13:38,442 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:13:38,442 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:13:38,449 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:13:38,450 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:13:38,450 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 02:13:38,450 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5428 states.
[2020-11-25 02:13:38,477 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:13:38,477 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:13:38,477 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:13:38,478 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:13:38,479 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_TokenERC200 := false;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4899]              assume null == 0;
[L4900]  CALL        call this := FreshRefGenerator__success();
[L2465]              havoc newRef;
[L2466]              assume Alloc[newRef] == false;
[L2467]              Alloc[newRef] := true;
[L2468]              assume newRef != null;
[L4900]  RET         call this := FreshRefGenerator__success();
[L4901]              assume now >= 0;
[L4902]              assume DType[this] == NOL;
[L4903]              assume msgvalue_MSG == 0;
[L4904]              gas := gas - 53000;
[L4905]  CALL        call NOL_NOL(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L1205]              havoc __exception;
[L1206]              revert := false;
[L1207]  COND FALSE  !(__exception)
[L1234]  CALL        call NOL_NOL__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L3040]  CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2501]  CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2484]              assume msgsender_MSG != null;
[L2485]              Balance[this] := 0;
[L2486]              owner_owned[this] := null;
[L2488]              owner_owned[this] := msgsender_MSG;
[L2501]  RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2502]  COND FALSE  !(revert)
[L3040]  RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L3041]  COND TRUE   revert
[L1234]  RET         call NOL_NOL__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L1235]              assume !revert && gas >= 0;
[L4905]  RET         call NOL_NOL(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L4906]              assume !revert && gas >= 0;

Loop:
[L4909]  CALL        call CorralChoice_NOL(this);
[L4684]              havoc msgsender_MSG;
[L4685]              havoc msgvalue_MSG;
[L4686]              havoc choice;
[L4687]              havoc __ret_0_owner;
[L4688]              havoc newOwner_s35;
[L4689]              havoc __ret_0_name;
[L4690]              havoc __ret_0_symbol;
[L4691]              havoc __ret_0_decimals;
[L4692]              havoc __ret_0_totalSupply;
[L4693]              havoc arg662_s0;
[L4694]              havoc __ret_0_balanceOf;
[L4695]              havoc arg663_s0;
[L4696]              havoc arg664_s0;
[L4697]              havoc __ret_0_allowance;
[L4698]              havoc initialSupply_s124;
[L4699]              havoc tokenName_s124;
[L4700]              havoc tokenSymbol_s124;
[L4701]              havoc _to_s221;
[L4702]              havoc _value_s221;
[L4703]              havoc success_s221;
[L4704]              havoc _from_s261;
[L4705]              havoc _to_s261;
[L4706]              havoc _value_s261;
[L4707]              havoc success_s261;
[L4708]              havoc _spender_s289;
[L4709]              havoc _value_s289;
[L4710]              havoc success_s289;
[L4711]              havoc _spender_s327;
[L4712]              havoc _value_s327;
[L4713]              havoc _extraData_s327;
[L4714]              havoc success_s327;
[L4715]              havoc _value_s363;
[L4716]              havoc success_s363;
[L4717]              havoc _from_s418;
[L4718]              havoc _value_s418;
[L4719]              havoc success_s418;
[L4720]              havoc __ret_0_sellPrice;
[L4721]              havoc __ret_0_buyPrice;
[L4722]              havoc arg665_s0;
[L4723]              havoc __ret_0_frozenAccount;
[L4724]              havoc initialSupply_s452;
[L4725]              havoc tokenName_s452;
[L4726]              havoc tokenSymbol_s452;
[L4727]              havoc target_s560;
[L4728]              havoc mintedAmount_s560;
[L4729]              havoc target_s581;
[L4730]              havoc freeze_s581;
[L4731]              havoc newSellPrice_s599;
[L4732]              havoc newBuyPrice_s599;
[L4733]              havoc amount_s659;
[L4734]              havoc tmpNow;
[L4735]              havoc gas;
[L4736]              assume gas > 4000000 && gas <= 8000000;
[L4737]              tmpNow := now;
[L4738]              havoc now;
[L4739]              assume now > tmpNow;
[L4740]              assume msgsender_MSG != null;
[L4741]              assume DType[msgsender_MSG] != owned;
[L4742]              assume DType[msgsender_MSG] != tokenRecipient;
[L4743]              assume DType[msgsender_MSG] != TokenERC20;
[L4744]              assume DType[msgsender_MSG] != NOL;
[L4745]              Alloc[msgsender_MSG] := true;
[L4746]  COND TRUE   choice == 22
[L4747]              gas := gas - 21000;
[L4748]  COND FALSE  !(gas >= 0)
[L4909]  RET         call CorralChoice_NOL(this);

[2020-11-25 02:13:38,491 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:13:38,492 INFO  L82        PathProgramCache]: Analyzing trace with hash -1370792136, now seen corresponding path program 1 times
[2020-11-25 02:13:38,495 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:13:38,513 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:13:38,543 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 02:13:38,545 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:13:38,545 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 02:13:38,825 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:13:38,834 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 02:13:38,834 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 02:13:38,836 INFO  L87              Difference]: Start difference. First operand 5428 states. Second operand 4 states.
[2020-11-25 02:13:39,422 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:13:39,422 INFO  L93              Difference]: Finished difference Result 4637 states and 5584 transitions.
[2020-11-25 02:13:39,422 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 02:13:39,424 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4637 states and 5584 transitions.
[2020-11-25 02:13:39,451 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:13:39,484 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4637 states to 4635 states and 5580 transitions.
[2020-11-25 02:13:39,485 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-25 02:13:39,486 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 174
[2020-11-25 02:13:39,486 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4635 states and 5580 transitions.
[2020-11-25 02:13:39,496 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:13:39,496 INFO  L728         BuchiCegarLoop]: Abstraction has 4635 states and 5580 transitions.
[2020-11-25 02:13:39,514 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4635 states and 5580 transitions.
[2020-11-25 02:13:39,580 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4635 to 4635.
[2020-11-25 02:13:39,580 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4635 states.
[2020-11-25 02:13:39,588 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4635 states to 4635 states and 5580 transitions.
[2020-11-25 02:13:39,588 INFO  L751         BuchiCegarLoop]: Abstraction has 4635 states and 5580 transitions.
[2020-11-25 02:13:39,589 INFO  L631         BuchiCegarLoop]: Abstraction has 4635 states and 5580 transitions.
[2020-11-25 02:13:39,589 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 02:13:39,589 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4635 states and 5580 transitions.
[2020-11-25 02:13:39,597 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:13:39,597 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:13:39,597 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:13:39,599 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:13:39,599 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_TokenERC200 := false;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4899]              assume null == 0;
[L4900]  CALL        call this := FreshRefGenerator__success();
[L2465]              havoc newRef;
[L2466]              assume Alloc[newRef] == false;
[L2467]              Alloc[newRef] := true;
[L2468]              assume newRef != null;
[L4900]  RET         call this := FreshRefGenerator__success();
[L4901]              assume now >= 0;
[L4902]              assume DType[this] == NOL;
[L4903]              assume msgvalue_MSG == 0;
[L4904]              gas := gas - 53000;
[L4905]  CALL        call NOL_NOL(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L1205]              havoc __exception;
[L1206]              revert := false;
[L1207]  COND FALSE  !(__exception)
[L1234]  CALL        call NOL_NOL__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L3040]  CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2501]  CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2484]              assume msgsender_MSG != null;
[L2485]              Balance[this] := 0;
[L2486]              owner_owned[this] := null;
[L2488]              owner_owned[this] := msgsender_MSG;
[L2501]  RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2502]  COND FALSE  !(revert)
[L3040]  RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L3041]  COND TRUE   revert
[L1234]  RET         call NOL_NOL__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L1235]              assume !revert && gas >= 0;
[L4905]  RET         call NOL_NOL(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L4906]              assume !revert && gas >= 0;
[L4909]  CALL        call CorralChoice_NOL(this);
[L4684]              havoc msgsender_MSG;
[L4685]              havoc msgvalue_MSG;
[L4686]              havoc choice;
[L4687]              havoc __ret_0_owner;
[L4688]              havoc newOwner_s35;
[L4689]              havoc __ret_0_name;
[L4690]              havoc __ret_0_symbol;
[L4691]              havoc __ret_0_decimals;
[L4692]              havoc __ret_0_totalSupply;
[L4693]              havoc arg662_s0;
[L4694]              havoc __ret_0_balanceOf;
[L4695]              havoc arg663_s0;
[L4696]              havoc arg664_s0;
[L4697]              havoc __ret_0_allowance;
[L4698]              havoc initialSupply_s124;
[L4699]              havoc tokenName_s124;
[L4700]              havoc tokenSymbol_s124;
[L4701]              havoc _to_s221;
[L4702]              havoc _value_s221;
[L4703]              havoc success_s221;
[L4704]              havoc _from_s261;
[L4705]              havoc _to_s261;
[L4706]              havoc _value_s261;
[L4707]              havoc success_s261;
[L4708]              havoc _spender_s289;
[L4709]              havoc _value_s289;
[L4710]              havoc success_s289;
[L4711]              havoc _spender_s327;
[L4712]              havoc _value_s327;
[L4713]              havoc _extraData_s327;
[L4714]              havoc success_s327;
[L4715]              havoc _value_s363;
[L4716]              havoc success_s363;
[L4717]              havoc _from_s418;
[L4718]              havoc _value_s418;
[L4719]              havoc success_s418;
[L4720]              havoc __ret_0_sellPrice;
[L4721]              havoc __ret_0_buyPrice;
[L4722]              havoc arg665_s0;
[L4723]              havoc __ret_0_frozenAccount;
[L4724]              havoc initialSupply_s452;
[L4725]              havoc tokenName_s452;
[L4726]              havoc tokenSymbol_s452;
[L4727]              havoc target_s560;
[L4728]              havoc mintedAmount_s560;
[L4729]              havoc target_s581;
[L4730]              havoc freeze_s581;
[L4731]              havoc newSellPrice_s599;
[L4732]              havoc newBuyPrice_s599;
[L4733]              havoc amount_s659;
[L4734]              havoc tmpNow;
[L4735]              havoc gas;
[L4736]              assume gas > 4000000 && gas <= 8000000;
[L4737]              tmpNow := now;
[L4738]              havoc now;
[L4739]              assume now > tmpNow;
[L4740]              assume msgsender_MSG != null;
[L4741]              assume DType[msgsender_MSG] != owned;
[L4742]              assume DType[msgsender_MSG] != tokenRecipient;
[L4743]              assume DType[msgsender_MSG] != TokenERC20;
[L4744]              assume DType[msgsender_MSG] != NOL;
[L4745]              Alloc[msgsender_MSG] := true;
[L4746]  COND FALSE  !(choice == 22)
[L4752]  COND FALSE  !(choice == 21)
[L4758]  COND FALSE  !(choice == 20)
[L4764]  COND FALSE  !(choice == 19)
[L4770]  COND FALSE  !(choice == 18)
[L4776]  COND FALSE  !(choice == 17)
[L4782]  COND FALSE  !(choice == 16)
[L4788]  COND FALSE  !(choice == 15)
[L4794]  COND FALSE  !(choice == 14)
[L4801]  COND TRUE   choice == 13
[L4802]              gas := gas - 21000;
[L4803]  COND TRUE   gas >= 0
[L4804]              assume _value_s261 >= 0 && _value_s261 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4805]              assume msgvalue_MSG == 0;
[L4806]  CALL        call success_s261 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s261, _to_s261, _value_s261);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != _from_s261 || p2 != msgsender_MSG) && _from_s261 == _to_s261) && _value_s261 <= balanceOf_TokenERC20[this][_from_s261]) && _value_s261 <= allowance_TokenERC20[this][_from_s261][msgsender_MSG]) && _value_s261 >= 0) && _value_s261 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s261] >= 0) && balanceOf_TokenERC20[this][_to_s261] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_from_s261] >= 0) && balanceOf_TokenERC20[this][_from_s261] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_TokenERC20[this][_from_s261][msgsender_MSG] >= 0) && allowance_TokenERC20[this][_from_s261][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_TokenERC200 := true;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L490]               havoc __exception;
[L491]               revert := false;
[L492]   COND FALSE  !(__exception)
[L519]   CALL        call success_s261 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s261, _to_s261, _value_s261);
[L2755]  COND TRUE   !(_value_s261 <= allowance_TokenERC20[this][_from_s261][msgsender_MSG])
[L2756]              revert := true;
[L519]   RET         call success_s261 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s261, _to_s261, _value_s261);
[L520]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((success_s261 == true && allowance_TokenERC20[this][_from_s261][msgsender_MSG] == old(allowance_TokenERC20[this][_from_s261][msgsender_MSG]) - _value_s261) && totalSupply_TokenERC20[this] == old(totalSupply_TokenERC20[this])) && balanceOf_TokenERC20[this] == old(balanceOf_TokenERC20[this])) && allowance_TokenERC20[this][p1][p2] == old(allowance_TokenERC20[this][p1][p2])) && sellPrice_NOL[this] == old(sellPrice_NOL[this])) && buyPrice_NOL[this] == old(buyPrice_NOL[this])) && frozenAccount_NOL[this] == old(frozenAccount_NOL[this])) && name_TokenERC20[this] == old(name_TokenERC20[this])) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this])) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this])) && owner_owned[this] == old(owner_owned[this]));
[L3]                 revert := revert_hold;
[L4806]  RET         call success_s261 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s261, _to_s261, _value_s261);
[L4909]  RET         call CorralChoice_NOL(this);

Loop:
[L4909]  CALL        call CorralChoice_NOL(this);
[L4684]              havoc msgsender_MSG;
[L4685]              havoc msgvalue_MSG;
[L4686]              havoc choice;
[L4687]              havoc __ret_0_owner;
[L4688]              havoc newOwner_s35;
[L4689]              havoc __ret_0_name;
[L4690]              havoc __ret_0_symbol;
[L4691]              havoc __ret_0_decimals;
[L4692]              havoc __ret_0_totalSupply;
[L4693]              havoc arg662_s0;
[L4694]              havoc __ret_0_balanceOf;
[L4695]              havoc arg663_s0;
[L4696]              havoc arg664_s0;
[L4697]              havoc __ret_0_allowance;
[L4698]              havoc initialSupply_s124;
[L4699]              havoc tokenName_s124;
[L4700]              havoc tokenSymbol_s124;
[L4701]              havoc _to_s221;
[L4702]              havoc _value_s221;
[L4703]              havoc success_s221;
[L4704]              havoc _from_s261;
[L4705]              havoc _to_s261;
[L4706]              havoc _value_s261;
[L4707]              havoc success_s261;
[L4708]              havoc _spender_s289;
[L4709]              havoc _value_s289;
[L4710]              havoc success_s289;
[L4711]              havoc _spender_s327;
[L4712]              havoc _value_s327;
[L4713]              havoc _extraData_s327;
[L4714]              havoc success_s327;
[L4715]              havoc _value_s363;
[L4716]              havoc success_s363;
[L4717]              havoc _from_s418;
[L4718]              havoc _value_s418;
[L4719]              havoc success_s418;
[L4720]              havoc __ret_0_sellPrice;
[L4721]              havoc __ret_0_buyPrice;
[L4722]              havoc arg665_s0;
[L4723]              havoc __ret_0_frozenAccount;
[L4724]              havoc initialSupply_s452;
[L4725]              havoc tokenName_s452;
[L4726]              havoc tokenSymbol_s452;
[L4727]              havoc target_s560;
[L4728]              havoc mintedAmount_s560;
[L4729]              havoc target_s581;
[L4730]              havoc freeze_s581;
[L4731]              havoc newSellPrice_s599;
[L4732]              havoc newBuyPrice_s599;
[L4733]              havoc amount_s659;
[L4734]              havoc tmpNow;
[L4735]              havoc gas;
[L4736]              assume gas > 4000000 && gas <= 8000000;
[L4737]              tmpNow := now;
[L4738]              havoc now;
[L4739]              assume now > tmpNow;
[L4740]              assume msgsender_MSG != null;
[L4741]              assume DType[msgsender_MSG] != owned;
[L4742]              assume DType[msgsender_MSG] != tokenRecipient;
[L4743]              assume DType[msgsender_MSG] != TokenERC20;
[L4744]              assume DType[msgsender_MSG] != NOL;
[L4745]              Alloc[msgsender_MSG] := true;
[L4746]  COND FALSE  !(choice == 22)
[L4752]  COND FALSE  !(choice == 21)
[L4758]  COND FALSE  !(choice == 20)
[L4764]  COND FALSE  !(choice == 19)
[L4770]  COND FALSE  !(choice == 18)
[L4776]  COND FALSE  !(choice == 17)
[L4782]  COND FALSE  !(choice == 16)
[L4788]  COND FALSE  !(choice == 15)
[L4794]  COND FALSE  !(choice == 14)
[L4801]  COND TRUE   choice == 13
[L4802]              gas := gas - 21000;
[L4803]  COND TRUE   gas >= 0
[L4804]              assume _value_s261 >= 0 && _value_s261 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4805]              assume msgvalue_MSG == 0;
[L4806]  CALL        call success_s261 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s261, _to_s261, _value_s261);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != _from_s261 || p2 != msgsender_MSG) && _from_s261 == _to_s261) && _value_s261 <= balanceOf_TokenERC20[this][_from_s261]) && _value_s261 <= allowance_TokenERC20[this][_from_s261][msgsender_MSG]) && _value_s261 >= 0) && _value_s261 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s261] >= 0) && balanceOf_TokenERC20[this][_to_s261] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_from_s261] >= 0) && balanceOf_TokenERC20[this][_from_s261] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_TokenERC20[this][_from_s261][msgsender_MSG] >= 0) && allowance_TokenERC20[this][_from_s261][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_TokenERC200 := true;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L490]               havoc __exception;
[L491]               revert := false;
[L492]   COND FALSE  !(__exception)
[L519]   CALL        call success_s261 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s261, _to_s261, _value_s261);
[L2755]  COND TRUE   !(_value_s261 <= allowance_TokenERC20[this][_from_s261][msgsender_MSG])
[L2756]              revert := true;
[L519]   RET         call success_s261 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s261, _to_s261, _value_s261);
[L520]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((success_s261 == true && allowance_TokenERC20[this][_from_s261][msgsender_MSG] == old(allowance_TokenERC20[this][_from_s261][msgsender_MSG]) - _value_s261) && totalSupply_TokenERC20[this] == old(totalSupply_TokenERC20[this])) && balanceOf_TokenERC20[this] == old(balanceOf_TokenERC20[this])) && allowance_TokenERC20[this][p1][p2] == old(allowance_TokenERC20[this][p1][p2])) && sellPrice_NOL[this] == old(sellPrice_NOL[this])) && buyPrice_NOL[this] == old(buyPrice_NOL[this])) && frozenAccount_NOL[this] == old(frozenAccount_NOL[this])) && name_TokenERC20[this] == old(name_TokenERC20[this])) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this])) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this])) && owner_owned[this] == old(owner_owned[this]));
[L3]                 revert := revert_hold;
[L4806]  RET         call success_s261 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s261, _to_s261, _value_s261);
[L4909]  RET         call CorralChoice_NOL(this);

[2020-11-25 02:13:39,604 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:13:39,604 INFO  L82        PathProgramCache]: Analyzing trace with hash -672838593, now seen corresponding path program 1 times
[2020-11-25 02:13:39,605 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:13:39,612 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:13:39,635 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 02:13:39,635 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:13:39,635 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 02:13:39,636 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:13:39,637 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 02:13:39,637 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 02:13:39,637 INFO  L87              Difference]: Start difference. First operand 4635 states and 5580 transitions. cyclomatic complexity: 951 Second operand 4 states.
[2020-11-25 02:13:40,839 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:13:40,839 INFO  L93              Difference]: Finished difference Result 6195 states and 7338 transitions.
[2020-11-25 02:13:40,839 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 02:13:40,839 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6195 states and 7338 transitions.
[2020-11-25 02:13:40,858 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-25 02:13:40,882 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6195 states to 5947 states and 7036 transitions.
[2020-11-25 02:13:40,883 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 251
[2020-11-25 02:13:40,883 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 251
[2020-11-25 02:13:40,883 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5947 states and 7036 transitions.
[2020-11-25 02:13:40,890 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:13:40,890 INFO  L728         BuchiCegarLoop]: Abstraction has 5947 states and 7036 transitions.
[2020-11-25 02:13:40,895 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5947 states and 7036 transitions.
[2020-11-25 02:13:40,959 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5947 to 4767.
[2020-11-25 02:13:40,959 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4767 states.
[2020-11-25 02:13:40,964 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4767 states to 4767 states and 5520 transitions.
[2020-11-25 02:13:40,964 INFO  L751         BuchiCegarLoop]: Abstraction has 4767 states and 5520 transitions.
[2020-11-25 02:13:40,964 INFO  L631         BuchiCegarLoop]: Abstraction has 4767 states and 5520 transitions.
[2020-11-25 02:13:40,964 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 02:13:40,964 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4767 states and 5520 transitions.
[2020-11-25 02:13:40,969 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:13:40,969 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:13:40,969 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:13:40,971 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:13:40,971 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_TokenERC200 := false;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4899]              assume null == 0;
[L4900]  CALL        call this := FreshRefGenerator__success();
[L2465]              havoc newRef;
[L2466]              assume Alloc[newRef] == false;
[L2467]              Alloc[newRef] := true;
[L2468]              assume newRef != null;
[L4900]  RET         call this := FreshRefGenerator__success();
[L4901]              assume now >= 0;
[L4902]              assume DType[this] == NOL;
[L4903]              assume msgvalue_MSG == 0;
[L4904]              gas := gas - 53000;
[L4905]  CALL        call NOL_NOL(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L1205]              havoc __exception;
[L1206]              revert := false;
[L1207]  COND FALSE  !(__exception)
[L1234]  CALL        call NOL_NOL__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L3040]  CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2501]  CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2484]              assume msgsender_MSG != null;
[L2485]              Balance[this] := 0;
[L2486]              owner_owned[this] := null;
[L2488]              owner_owned[this] := msgsender_MSG;
[L2501]  RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2502]  COND FALSE  !(revert)
[L3040]  RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L3041]  COND FALSE  !(revert)
[L3044]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L2629]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s124, tokenName_s124, tokenSymbol_s124);
[L2597]              assume msgsender_MSG != null;
[L2598]              Balance[this] := 0;
[L2599]              name_TokenERC20[this] := 1234253568;
[L2600]              symbol_TokenERC20[this] := 1234253568;
[L2601]              decimals_TokenERC20[this] := 18;
[L2602]              totalSupply_TokenERC20[this] := 0;
[L2603]              balanceOf_TokenERC20[this] := zeroRefintArr();
[L2604]              sum_balanceOf0[this] := 0;
[L2605]              allowance_TokenERC20[this] := zeroRefRefintArr();
[L2606]              sum_allowance1[this] := 0;
[L2608]              __var_1 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2609]              totalSupply_TokenERC20[this] := nonlinearMul(initialSupply_s124, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2610]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][msgsender_MSG];
[L2611]              balanceOf_TokenERC20[this][msgsender_MSG] := totalSupply_TokenERC20[this];
[L2612]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][msgsender_MSG];
[L2613]              name_TokenERC20[this] := tokenName_s124;
[L2614]              symbol_TokenERC20[this] := tokenSymbol_s124;
[L2629]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s124, tokenName_s124, tokenSymbol_s124);
[L2630]  COND FALSE  !(revert)
[L3044]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L3045]  COND FALSE  !(revert)
[L3048]  CALL        call NOL_NOL_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L3014]              assume msgsender_MSG != null;
[L3015]              Balance[this] := 0;
[L3016]              sellPrice_NOL[this] := 0;
[L3017]              buyPrice_NOL[this] := 0;
[L3018]              frozenAccount_NOL[this] := zeroRefboolArr();
[L3048]  RET         call NOL_NOL_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L3049]  COND FALSE  !(revert)
[L1234]  RET         call NOL_NOL__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L1235]              assume !revert && gas >= 0;
[L4905]  RET         call NOL_NOL(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L4906]              assume !revert && gas >= 0;
[L4909]  CALL        call CorralChoice_NOL(this);
[L4684]              havoc msgsender_MSG;
[L4685]              havoc msgvalue_MSG;
[L4686]              havoc choice;
[L4687]              havoc __ret_0_owner;
[L4688]              havoc newOwner_s35;
[L4689]              havoc __ret_0_name;
[L4690]              havoc __ret_0_symbol;
[L4691]              havoc __ret_0_decimals;
[L4692]              havoc __ret_0_totalSupply;
[L4693]              havoc arg662_s0;
[L4694]              havoc __ret_0_balanceOf;
[L4695]              havoc arg663_s0;
[L4696]              havoc arg664_s0;
[L4697]              havoc __ret_0_allowance;
[L4698]              havoc initialSupply_s124;
[L4699]              havoc tokenName_s124;
[L4700]              havoc tokenSymbol_s124;
[L4701]              havoc _to_s221;
[L4702]              havoc _value_s221;
[L4703]              havoc success_s221;
[L4704]              havoc _from_s261;
[L4705]              havoc _to_s261;
[L4706]              havoc _value_s261;
[L4707]              havoc success_s261;
[L4708]              havoc _spender_s289;
[L4709]              havoc _value_s289;
[L4710]              havoc success_s289;
[L4711]              havoc _spender_s327;
[L4712]              havoc _value_s327;
[L4713]              havoc _extraData_s327;
[L4714]              havoc success_s327;
[L4715]              havoc _value_s363;
[L4716]              havoc success_s363;
[L4717]              havoc _from_s418;
[L4718]              havoc _value_s418;
[L4719]              havoc success_s418;
[L4720]              havoc __ret_0_sellPrice;
[L4721]              havoc __ret_0_buyPrice;
[L4722]              havoc arg665_s0;
[L4723]              havoc __ret_0_frozenAccount;
[L4724]              havoc initialSupply_s452;
[L4725]              havoc tokenName_s452;
[L4726]              havoc tokenSymbol_s452;
[L4727]              havoc target_s560;
[L4728]              havoc mintedAmount_s560;
[L4729]              havoc target_s581;
[L4730]              havoc freeze_s581;
[L4731]              havoc newSellPrice_s599;
[L4732]              havoc newBuyPrice_s599;
[L4733]              havoc amount_s659;
[L4734]              havoc tmpNow;
[L4735]              havoc gas;
[L4736]              assume gas > 4000000 && gas <= 8000000;
[L4737]              tmpNow := now;
[L4738]              havoc now;
[L4739]              assume now > tmpNow;
[L4740]              assume msgsender_MSG != null;
[L4741]              assume DType[msgsender_MSG] != owned;
[L4742]              assume DType[msgsender_MSG] != tokenRecipient;
[L4743]              assume DType[msgsender_MSG] != TokenERC20;
[L4744]              assume DType[msgsender_MSG] != NOL;
[L4745]              Alloc[msgsender_MSG] := true;
[L4746]  COND FALSE  !(choice == 22)
[L4752]  COND FALSE  !(choice == 21)
[L4758]  COND FALSE  !(choice == 20)
[L4764]  COND FALSE  !(choice == 19)
[L4770]  COND FALSE  !(choice == 18)
[L4776]  COND FALSE  !(choice == 17)
[L4782]  COND FALSE  !(choice == 16)
[L4788]  COND FALSE  !(choice == 15)
[L4794]  COND FALSE  !(choice == 14)
[L4801]  COND TRUE   choice == 13
[L4802]              gas := gas - 21000;
[L4803]  COND TRUE   gas >= 0
[L4804]              assume _value_s261 >= 0 && _value_s261 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4805]              assume msgvalue_MSG == 0;
[L4806]  CALL        call success_s261 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s261, _to_s261, _value_s261);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != _from_s261 || p2 != msgsender_MSG) && _from_s261 == _to_s261) && _value_s261 <= balanceOf_TokenERC20[this][_from_s261]) && _value_s261 <= allowance_TokenERC20[this][_from_s261][msgsender_MSG]) && _value_s261 >= 0) && _value_s261 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s261] >= 0) && balanceOf_TokenERC20[this][_to_s261] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_from_s261] >= 0) && balanceOf_TokenERC20[this][_from_s261] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_TokenERC20[this][_from_s261][msgsender_MSG] >= 0) && allowance_TokenERC20[this][_from_s261][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_TokenERC200 := true;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L490]               havoc __exception;
[L491]               revert := false;
[L492]   COND TRUE   __exception
[L493]               __tmp__Balance := Balance;
[L494]               __tmp__DType := DType;
[L495]               __tmp__Alloc := Alloc;
[L496]               __tmp__balance_ADDR := balance_ADDR;
[L497]               __tmp__M_Ref_int := M_Ref_int;
[L498]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L499]               __tmp__alloc_allowance_TokenERC20_lvl0 := alloc_allowance_TokenERC20_lvl0;
[L500]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L501]               __tmp__sum_allowance1 := sum_allowance1;
[L502]               __tmp__M_Ref_bool := M_Ref_bool;
[L503]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L504]               __tmp__Length := Length;
[L505]               __tmp__now := now;
[L506]               __tmp__owner_owned := owner_owned;
[L507]               __tmp__name_TokenERC20 := name_TokenERC20;
[L508]               __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L509]               __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L510]               __tmp__totalSupply_TokenERC20 := totalSupply_TokenERC20;
[L511]               __tmp__balanceOf_TokenERC20 := balanceOf_TokenERC20;
[L512]               __tmp__allowance_TokenERC20 := allowance_TokenERC20;
[L513]               __tmp__sellPrice_NOL := sellPrice_NOL;
[L514]               __tmp__buyPrice_NOL := buyPrice_NOL;
[L515]               __tmp__frozenAccount_NOL := frozenAccount_NOL;
[L516]   CALL        call success_s261 := transferFrom~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _from_s261, _to_s261, _value_s261);
[L2729]  COND TRUE   !(_value_s261 <= __tmp__allowance_TokenERC20[this][_from_s261][msgsender_MSG])
[L2730]              revert := true;
[L516]   RET         call success_s261 := transferFrom~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _from_s261, _to_s261, _value_s261);
[L517]               assume revert || gas < 0;
[L4806]  RET         call success_s261 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s261, _to_s261, _value_s261);
[L4909]  RET         call CorralChoice_NOL(this);

Loop:
[L4909]  CALL        call CorralChoice_NOL(this);
[L4684]              havoc msgsender_MSG;
[L4685]              havoc msgvalue_MSG;
[L4686]              havoc choice;
[L4687]              havoc __ret_0_owner;
[L4688]              havoc newOwner_s35;
[L4689]              havoc __ret_0_name;
[L4690]              havoc __ret_0_symbol;
[L4691]              havoc __ret_0_decimals;
[L4692]              havoc __ret_0_totalSupply;
[L4693]              havoc arg662_s0;
[L4694]              havoc __ret_0_balanceOf;
[L4695]              havoc arg663_s0;
[L4696]              havoc arg664_s0;
[L4697]              havoc __ret_0_allowance;
[L4698]              havoc initialSupply_s124;
[L4699]              havoc tokenName_s124;
[L4700]              havoc tokenSymbol_s124;
[L4701]              havoc _to_s221;
[L4702]              havoc _value_s221;
[L4703]              havoc success_s221;
[L4704]              havoc _from_s261;
[L4705]              havoc _to_s261;
[L4706]              havoc _value_s261;
[L4707]              havoc success_s261;
[L4708]              havoc _spender_s289;
[L4709]              havoc _value_s289;
[L4710]              havoc success_s289;
[L4711]              havoc _spender_s327;
[L4712]              havoc _value_s327;
[L4713]              havoc _extraData_s327;
[L4714]              havoc success_s327;
[L4715]              havoc _value_s363;
[L4716]              havoc success_s363;
[L4717]              havoc _from_s418;
[L4718]              havoc _value_s418;
[L4719]              havoc success_s418;
[L4720]              havoc __ret_0_sellPrice;
[L4721]              havoc __ret_0_buyPrice;
[L4722]              havoc arg665_s0;
[L4723]              havoc __ret_0_frozenAccount;
[L4724]              havoc initialSupply_s452;
[L4725]              havoc tokenName_s452;
[L4726]              havoc tokenSymbol_s452;
[L4727]              havoc target_s560;
[L4728]              havoc mintedAmount_s560;
[L4729]              havoc target_s581;
[L4730]              havoc freeze_s581;
[L4731]              havoc newSellPrice_s599;
[L4732]              havoc newBuyPrice_s599;
[L4733]              havoc amount_s659;
[L4734]              havoc tmpNow;
[L4735]              havoc gas;
[L4736]              assume gas > 4000000 && gas <= 8000000;
[L4737]              tmpNow := now;
[L4738]              havoc now;
[L4739]              assume now > tmpNow;
[L4740]              assume msgsender_MSG != null;
[L4741]              assume DType[msgsender_MSG] != owned;
[L4742]              assume DType[msgsender_MSG] != tokenRecipient;
[L4743]              assume DType[msgsender_MSG] != TokenERC20;
[L4744]              assume DType[msgsender_MSG] != NOL;
[L4745]              Alloc[msgsender_MSG] := true;
[L4746]  COND FALSE  !(choice == 22)
[L4752]  COND FALSE  !(choice == 21)
[L4758]  COND FALSE  !(choice == 20)
[L4764]  COND FALSE  !(choice == 19)
[L4770]  COND FALSE  !(choice == 18)
[L4776]  COND FALSE  !(choice == 17)
[L4782]  COND FALSE  !(choice == 16)
[L4788]  COND FALSE  !(choice == 15)
[L4794]  COND FALSE  !(choice == 14)
[L4801]  COND TRUE   choice == 13
[L4802]              gas := gas - 21000;
[L4803]  COND TRUE   gas >= 0
[L4804]              assume _value_s261 >= 0 && _value_s261 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4805]              assume msgvalue_MSG == 0;
[L4806]  CALL        call success_s261 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s261, _to_s261, _value_s261);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != _from_s261 || p2 != msgsender_MSG) && _from_s261 == _to_s261) && _value_s261 <= balanceOf_TokenERC20[this][_from_s261]) && _value_s261 <= allowance_TokenERC20[this][_from_s261][msgsender_MSG]) && _value_s261 >= 0) && _value_s261 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s261] >= 0) && balanceOf_TokenERC20[this][_to_s261] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_from_s261] >= 0) && balanceOf_TokenERC20[this][_from_s261] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_TokenERC20[this][_from_s261][msgsender_MSG] >= 0) && allowance_TokenERC20[this][_from_s261][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_TokenERC200 := true;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L490]               havoc __exception;
[L491]               revert := false;
[L492]   COND TRUE   __exception
[L493]               __tmp__Balance := Balance;
[L494]               __tmp__DType := DType;
[L495]               __tmp__Alloc := Alloc;
[L496]               __tmp__balance_ADDR := balance_ADDR;
[L497]               __tmp__M_Ref_int := M_Ref_int;
[L498]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L499]               __tmp__alloc_allowance_TokenERC20_lvl0 := alloc_allowance_TokenERC20_lvl0;
[L500]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L501]               __tmp__sum_allowance1 := sum_allowance1;
[L502]               __tmp__M_Ref_bool := M_Ref_bool;
[L503]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L504]               __tmp__Length := Length;
[L505]               __tmp__now := now;
[L506]               __tmp__owner_owned := owner_owned;
[L507]               __tmp__name_TokenERC20 := name_TokenERC20;
[L508]               __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L509]               __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L510]               __tmp__totalSupply_TokenERC20 := totalSupply_TokenERC20;
[L511]               __tmp__balanceOf_TokenERC20 := balanceOf_TokenERC20;
[L512]               __tmp__allowance_TokenERC20 := allowance_TokenERC20;
[L513]               __tmp__sellPrice_NOL := sellPrice_NOL;
[L514]               __tmp__buyPrice_NOL := buyPrice_NOL;
[L515]               __tmp__frozenAccount_NOL := frozenAccount_NOL;
[L516]   CALL        call success_s261 := transferFrom~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _from_s261, _to_s261, _value_s261);
[L2729]  COND TRUE   !(_value_s261 <= __tmp__allowance_TokenERC20[this][_from_s261][msgsender_MSG])
[L2730]              revert := true;
[L516]   RET         call success_s261 := transferFrom~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _from_s261, _to_s261, _value_s261);
[L517]               assume revert || gas < 0;
[L4806]  RET         call success_s261 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s261, _to_s261, _value_s261);
[L4909]  RET         call CorralChoice_NOL(this);

[2020-11-25 02:13:40,994 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:13:40,994 INFO  L82        PathProgramCache]: Analyzing trace with hash 1277030838, now seen corresponding path program 1 times
[2020-11-25 02:13:40,995 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:13:41,010 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:13:41,067 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 02:13:41,067 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:13:41,067 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 02:13:41,069 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:13:41,069 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 02:13:41,069 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-25 02:13:41,069 INFO  L87              Difference]: Start difference. First operand 4767 states and 5520 transitions. cyclomatic complexity: 759 Second operand 6 states.
[2020-11-25 02:13:42,250 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:13:42,251 INFO  L93              Difference]: Finished difference Result 5133 states and 5920 transitions.
[2020-11-25 02:13:42,251 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 02:13:42,251 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5133 states and 5920 transitions.
[2020-11-25 02:13:42,261 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 02:13:42,276 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5133 states to 5133 states and 5920 transitions.
[2020-11-25 02:13:42,276 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 251
[2020-11-25 02:13:42,277 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 251
[2020-11-25 02:13:42,277 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5133 states and 5920 transitions.
[2020-11-25 02:13:42,280 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:13:42,280 INFO  L728         BuchiCegarLoop]: Abstraction has 5133 states and 5920 transitions.
[2020-11-25 02:13:42,284 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5133 states and 5920 transitions.
[2020-11-25 02:13:42,339 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5133 to 4831.
[2020-11-25 02:13:42,340 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4831 states.
[2020-11-25 02:13:42,346 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4831 states to 4831 states and 5594 transitions.
[2020-11-25 02:13:42,346 INFO  L751         BuchiCegarLoop]: Abstraction has 4831 states and 5594 transitions.
[2020-11-25 02:13:42,346 INFO  L631         BuchiCegarLoop]: Abstraction has 4831 states and 5594 transitions.
[2020-11-25 02:13:42,346 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 02:13:42,347 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4831 states and 5594 transitions.
[2020-11-25 02:13:42,351 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:13:42,351 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:13:42,351 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:13:42,353 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:13:42,353 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_TokenERC200 := false;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4899]              assume null == 0;
[L4900]  CALL        call this := FreshRefGenerator__success();
[L2465]              havoc newRef;
[L2466]              assume Alloc[newRef] == false;
[L2467]              Alloc[newRef] := true;
[L2468]              assume newRef != null;
[L4900]  RET         call this := FreshRefGenerator__success();
[L4901]              assume now >= 0;
[L4902]              assume DType[this] == NOL;
[L4903]              assume msgvalue_MSG == 0;
[L4904]              gas := gas - 53000;
[L4905]  CALL        call NOL_NOL(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L1205]              havoc __exception;
[L1206]              revert := false;
[L1207]  COND FALSE  !(__exception)
[L1234]  CALL        call NOL_NOL__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L3040]  CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2501]  CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2484]              assume msgsender_MSG != null;
[L2485]              Balance[this] := 0;
[L2486]              owner_owned[this] := null;
[L2488]              owner_owned[this] := msgsender_MSG;
[L2501]  RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2502]  COND FALSE  !(revert)
[L3040]  RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L3041]  COND FALSE  !(revert)
[L3044]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L2629]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s124, tokenName_s124, tokenSymbol_s124);
[L2597]              assume msgsender_MSG != null;
[L2598]              Balance[this] := 0;
[L2599]              name_TokenERC20[this] := 1234253568;
[L2600]              symbol_TokenERC20[this] := 1234253568;
[L2601]              decimals_TokenERC20[this] := 18;
[L2602]              totalSupply_TokenERC20[this] := 0;
[L2603]              balanceOf_TokenERC20[this] := zeroRefintArr();
[L2604]              sum_balanceOf0[this] := 0;
[L2605]              allowance_TokenERC20[this] := zeroRefRefintArr();
[L2606]              sum_allowance1[this] := 0;
[L2608]              __var_1 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2609]              totalSupply_TokenERC20[this] := nonlinearMul(initialSupply_s124, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2610]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][msgsender_MSG];
[L2611]              balanceOf_TokenERC20[this][msgsender_MSG] := totalSupply_TokenERC20[this];
[L2612]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][msgsender_MSG];
[L2613]              name_TokenERC20[this] := tokenName_s124;
[L2614]              symbol_TokenERC20[this] := tokenSymbol_s124;
[L2629]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s124, tokenName_s124, tokenSymbol_s124);
[L2630]  COND FALSE  !(revert)
[L3044]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L3045]  COND FALSE  !(revert)
[L3048]  CALL        call NOL_NOL_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L3014]              assume msgsender_MSG != null;
[L3015]              Balance[this] := 0;
[L3016]              sellPrice_NOL[this] := 0;
[L3017]              buyPrice_NOL[this] := 0;
[L3018]              frozenAccount_NOL[this] := zeroRefboolArr();
[L3048]  RET         call NOL_NOL_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L3049]  COND FALSE  !(revert)
[L1234]  RET         call NOL_NOL__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L1235]              assume !revert && gas >= 0;
[L4905]  RET         call NOL_NOL(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L4906]              assume !revert && gas >= 0;
[L4909]  CALL        call CorralChoice_NOL(this);
[L4684]              havoc msgsender_MSG;
[L4685]              havoc msgvalue_MSG;
[L4686]              havoc choice;
[L4687]              havoc __ret_0_owner;
[L4688]              havoc newOwner_s35;
[L4689]              havoc __ret_0_name;
[L4690]              havoc __ret_0_symbol;
[L4691]              havoc __ret_0_decimals;
[L4692]              havoc __ret_0_totalSupply;
[L4693]              havoc arg662_s0;
[L4694]              havoc __ret_0_balanceOf;
[L4695]              havoc arg663_s0;
[L4696]              havoc arg664_s0;
[L4697]              havoc __ret_0_allowance;
[L4698]              havoc initialSupply_s124;
[L4699]              havoc tokenName_s124;
[L4700]              havoc tokenSymbol_s124;
[L4701]              havoc _to_s221;
[L4702]              havoc _value_s221;
[L4703]              havoc success_s221;
[L4704]              havoc _from_s261;
[L4705]              havoc _to_s261;
[L4706]              havoc _value_s261;
[L4707]              havoc success_s261;
[L4708]              havoc _spender_s289;
[L4709]              havoc _value_s289;
[L4710]              havoc success_s289;
[L4711]              havoc _spender_s327;
[L4712]              havoc _value_s327;
[L4713]              havoc _extraData_s327;
[L4714]              havoc success_s327;
[L4715]              havoc _value_s363;
[L4716]              havoc success_s363;
[L4717]              havoc _from_s418;
[L4718]              havoc _value_s418;
[L4719]              havoc success_s418;
[L4720]              havoc __ret_0_sellPrice;
[L4721]              havoc __ret_0_buyPrice;
[L4722]              havoc arg665_s0;
[L4723]              havoc __ret_0_frozenAccount;
[L4724]              havoc initialSupply_s452;
[L4725]              havoc tokenName_s452;
[L4726]              havoc tokenSymbol_s452;
[L4727]              havoc target_s560;
[L4728]              havoc mintedAmount_s560;
[L4729]              havoc target_s581;
[L4730]              havoc freeze_s581;
[L4731]              havoc newSellPrice_s599;
[L4732]              havoc newBuyPrice_s599;
[L4733]              havoc amount_s659;
[L4734]              havoc tmpNow;
[L4735]              havoc gas;
[L4736]              assume gas > 4000000 && gas <= 8000000;
[L4737]              tmpNow := now;
[L4738]              havoc now;
[L4739]              assume now > tmpNow;
[L4740]              assume msgsender_MSG != null;
[L4741]              assume DType[msgsender_MSG] != owned;
[L4742]              assume DType[msgsender_MSG] != tokenRecipient;
[L4743]              assume DType[msgsender_MSG] != TokenERC20;
[L4744]              assume DType[msgsender_MSG] != NOL;
[L4745]              Alloc[msgsender_MSG] := true;
[L4746]  COND FALSE  !(choice == 22)
[L4752]  COND FALSE  !(choice == 21)
[L4758]  COND FALSE  !(choice == 20)
[L4764]  COND FALSE  !(choice == 19)
[L4770]  COND FALSE  !(choice == 18)
[L4776]  COND FALSE  !(choice == 17)
[L4782]  COND FALSE  !(choice == 16)
[L4788]  COND FALSE  !(choice == 15)
[L4794]  COND FALSE  !(choice == 14)
[L4801]  COND TRUE   choice == 13
[L4802]              gas := gas - 21000;
[L4803]  COND TRUE   gas >= 0
[L4804]              assume _value_s261 >= 0 && _value_s261 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4805]              assume msgvalue_MSG == 0;
[L4806]  CALL        call success_s261 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s261, _to_s261, _value_s261);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != _from_s261 || p2 != msgsender_MSG) && _from_s261 == _to_s261) && _value_s261 <= balanceOf_TokenERC20[this][_from_s261]) && _value_s261 <= allowance_TokenERC20[this][_from_s261][msgsender_MSG]) && _value_s261 >= 0) && _value_s261 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s261] >= 0) && balanceOf_TokenERC20[this][_to_s261] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_from_s261] >= 0) && balanceOf_TokenERC20[this][_from_s261] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_TokenERC20[this][_from_s261][msgsender_MSG] >= 0) && allowance_TokenERC20[this][_from_s261][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_TokenERC200 := true;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L490]               havoc __exception;
[L491]               revert := false;
[L492]   COND FALSE  !(__exception)
[L519]   CALL        call success_s261 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s261, _to_s261, _value_s261);
[L2755]  COND FALSE  !(!(_value_s261 <= allowance_TokenERC20[this][_from_s261][msgsender_MSG]))
[L2759]              sum_allowance1[_from_s261] := sum_allowance1[_from_s261] - allowance_TokenERC20[this][_from_s261][msgsender_MSG];
[L2760]              allowance_TokenERC20[this][_from_s261][msgsender_MSG] := (allowance_TokenERC20[this][_from_s261][msgsender_MSG] - _value_s261) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2761]              sum_allowance1[_from_s261] := sum_allowance1[_from_s261] + allowance_TokenERC20[this][_from_s261][msgsender_MSG];
[L2762]  COND TRUE   DType[this] == NOL
[L2763]  CALL        call _transfer~address~address~uint256_NOL__success(this, msgsender_MSG, msgvalue_MSG, _from_s261, _to_s261, _value_s261);
[L3089]              __var_6 := null;
[L3090]  COND FALSE  !(!(_to_s522 != null))
[L3094]  COND FALSE  !(!(balanceOf_TokenERC20[this][_from_s522] >= _value_s522))
[L3098]  COND FALSE  !(!((balanceOf_TokenERC20[this][_to_s522] + _value_s522) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= balanceOf_TokenERC20[this][_to_s522]))
[L3102]  COND FALSE  !(!!frozenAccount_NOL[this][_from_s522])
[L3106]  COND FALSE  !(!!frozenAccount_NOL[this][_to_s522])
[L3110]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][_from_s522];
[L3111]              balanceOf_TokenERC20[this][_from_s522] := (balanceOf_TokenERC20[this][_from_s522] - _value_s522) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3112]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][_from_s522];
[L3113]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][_to_s522];
[L3114]              balanceOf_TokenERC20[this][_to_s522] := (balanceOf_TokenERC20[this][_to_s522] + _value_s522) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3115]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][_to_s522];
[L3116]              assert { :EventEmitted "Transfer_NOL" } true;
[L2763]  RET         call _transfer~address~address~uint256_NOL__success(this, msgsender_MSG, msgvalue_MSG, _from_s261, _to_s261, _value_s261);
[L2764]  COND FALSE  !(revert)
[L2775]              success_s261 := true;
[L519]   RET         call success_s261 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s261, _to_s261, _value_s261);
[L520]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((success_s261 == true && allowance_TokenERC20[this][_from_s261][msgsender_MSG] == old(allowance_TokenERC20[this][_from_s261][msgsender_MSG]) - _value_s261) && totalSupply_TokenERC20[this] == old(totalSupply_TokenERC20[this])) && balanceOf_TokenERC20[this] == old(balanceOf_TokenERC20[this])) && allowance_TokenERC20[this][p1][p2] == old(allowance_TokenERC20[this][p1][p2])) && sellPrice_NOL[this] == old(sellPrice_NOL[this])) && buyPrice_NOL[this] == old(buyPrice_NOL[this])) && frozenAccount_NOL[this] == old(frozenAccount_NOL[this])) && name_TokenERC20[this] == old(name_TokenERC20[this])) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this])) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this])) && owner_owned[this] == old(owner_owned[this]));
[L3]                 revert := revert_hold;
[L4806]  RET         call success_s261 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s261, _to_s261, _value_s261);
[L4909]  RET         call CorralChoice_NOL(this);

Loop:
[L4909]  CALL        call CorralChoice_NOL(this);
[L4684]              havoc msgsender_MSG;
[L4685]              havoc msgvalue_MSG;
[L4686]              havoc choice;
[L4687]              havoc __ret_0_owner;
[L4688]              havoc newOwner_s35;
[L4689]              havoc __ret_0_name;
[L4690]              havoc __ret_0_symbol;
[L4691]              havoc __ret_0_decimals;
[L4692]              havoc __ret_0_totalSupply;
[L4693]              havoc arg662_s0;
[L4694]              havoc __ret_0_balanceOf;
[L4695]              havoc arg663_s0;
[L4696]              havoc arg664_s0;
[L4697]              havoc __ret_0_allowance;
[L4698]              havoc initialSupply_s124;
[L4699]              havoc tokenName_s124;
[L4700]              havoc tokenSymbol_s124;
[L4701]              havoc _to_s221;
[L4702]              havoc _value_s221;
[L4703]              havoc success_s221;
[L4704]              havoc _from_s261;
[L4705]              havoc _to_s261;
[L4706]              havoc _value_s261;
[L4707]              havoc success_s261;
[L4708]              havoc _spender_s289;
[L4709]              havoc _value_s289;
[L4710]              havoc success_s289;
[L4711]              havoc _spender_s327;
[L4712]              havoc _value_s327;
[L4713]              havoc _extraData_s327;
[L4714]              havoc success_s327;
[L4715]              havoc _value_s363;
[L4716]              havoc success_s363;
[L4717]              havoc _from_s418;
[L4718]              havoc _value_s418;
[L4719]              havoc success_s418;
[L4720]              havoc __ret_0_sellPrice;
[L4721]              havoc __ret_0_buyPrice;
[L4722]              havoc arg665_s0;
[L4723]              havoc __ret_0_frozenAccount;
[L4724]              havoc initialSupply_s452;
[L4725]              havoc tokenName_s452;
[L4726]              havoc tokenSymbol_s452;
[L4727]              havoc target_s560;
[L4728]              havoc mintedAmount_s560;
[L4729]              havoc target_s581;
[L4730]              havoc freeze_s581;
[L4731]              havoc newSellPrice_s599;
[L4732]              havoc newBuyPrice_s599;
[L4733]              havoc amount_s659;
[L4734]              havoc tmpNow;
[L4735]              havoc gas;
[L4736]              assume gas > 4000000 && gas <= 8000000;
[L4737]              tmpNow := now;
[L4738]              havoc now;
[L4739]              assume now > tmpNow;
[L4740]              assume msgsender_MSG != null;
[L4741]              assume DType[msgsender_MSG] != owned;
[L4742]              assume DType[msgsender_MSG] != tokenRecipient;
[L4743]              assume DType[msgsender_MSG] != TokenERC20;
[L4744]              assume DType[msgsender_MSG] != NOL;
[L4745]              Alloc[msgsender_MSG] := true;
[L4746]  COND FALSE  !(choice == 22)
[L4752]  COND FALSE  !(choice == 21)
[L4758]  COND FALSE  !(choice == 20)
[L4764]  COND FALSE  !(choice == 19)
[L4770]  COND FALSE  !(choice == 18)
[L4776]  COND FALSE  !(choice == 17)
[L4782]  COND FALSE  !(choice == 16)
[L4788]  COND FALSE  !(choice == 15)
[L4794]  COND FALSE  !(choice == 14)
[L4801]  COND TRUE   choice == 13
[L4802]              gas := gas - 21000;
[L4803]  COND TRUE   gas >= 0
[L4804]              assume _value_s261 >= 0 && _value_s261 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4805]              assume msgvalue_MSG == 0;
[L4806]  CALL        call success_s261 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s261, _to_s261, _value_s261);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != _from_s261 || p2 != msgsender_MSG) && _from_s261 == _to_s261) && _value_s261 <= balanceOf_TokenERC20[this][_from_s261]) && _value_s261 <= allowance_TokenERC20[this][_from_s261][msgsender_MSG]) && _value_s261 >= 0) && _value_s261 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s261] >= 0) && balanceOf_TokenERC20[this][_to_s261] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_from_s261] >= 0) && balanceOf_TokenERC20[this][_from_s261] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_TokenERC20[this][_from_s261][msgsender_MSG] >= 0) && allowance_TokenERC20[this][_from_s261][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_TokenERC200 := true;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L490]               havoc __exception;
[L491]               revert := false;
[L492]   COND FALSE  !(__exception)
[L519]   CALL        call success_s261 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s261, _to_s261, _value_s261);
[L2755]  COND FALSE  !(!(_value_s261 <= allowance_TokenERC20[this][_from_s261][msgsender_MSG]))
[L2759]              sum_allowance1[_from_s261] := sum_allowance1[_from_s261] - allowance_TokenERC20[this][_from_s261][msgsender_MSG];
[L2760]              allowance_TokenERC20[this][_from_s261][msgsender_MSG] := (allowance_TokenERC20[this][_from_s261][msgsender_MSG] - _value_s261) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2761]              sum_allowance1[_from_s261] := sum_allowance1[_from_s261] + allowance_TokenERC20[this][_from_s261][msgsender_MSG];
[L2762]  COND TRUE   DType[this] == NOL
[L2763]  CALL        call _transfer~address~address~uint256_NOL__success(this, msgsender_MSG, msgvalue_MSG, _from_s261, _to_s261, _value_s261);
[L3089]              __var_6 := null;
[L3090]  COND FALSE  !(!(_to_s522 != null))
[L3094]  COND FALSE  !(!(balanceOf_TokenERC20[this][_from_s522] >= _value_s522))
[L3098]  COND FALSE  !(!((balanceOf_TokenERC20[this][_to_s522] + _value_s522) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= balanceOf_TokenERC20[this][_to_s522]))
[L3102]  COND FALSE  !(!!frozenAccount_NOL[this][_from_s522])
[L3106]  COND FALSE  !(!!frozenAccount_NOL[this][_to_s522])
[L3110]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][_from_s522];
[L3111]              balanceOf_TokenERC20[this][_from_s522] := (balanceOf_TokenERC20[this][_from_s522] - _value_s522) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3112]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][_from_s522];
[L3113]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][_to_s522];
[L3114]              balanceOf_TokenERC20[this][_to_s522] := (balanceOf_TokenERC20[this][_to_s522] + _value_s522) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3115]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][_to_s522];
[L3116]              assert { :EventEmitted "Transfer_NOL" } true;
[L2763]  RET         call _transfer~address~address~uint256_NOL__success(this, msgsender_MSG, msgvalue_MSG, _from_s261, _to_s261, _value_s261);
[L2764]  COND FALSE  !(revert)
[L2775]              success_s261 := true;
[L519]   RET         call success_s261 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s261, _to_s261, _value_s261);
[L520]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((success_s261 == true && allowance_TokenERC20[this][_from_s261][msgsender_MSG] == old(allowance_TokenERC20[this][_from_s261][msgsender_MSG]) - _value_s261) && totalSupply_TokenERC20[this] == old(totalSupply_TokenERC20[this])) && balanceOf_TokenERC20[this] == old(balanceOf_TokenERC20[this])) && allowance_TokenERC20[this][p1][p2] == old(allowance_TokenERC20[this][p1][p2])) && sellPrice_NOL[this] == old(sellPrice_NOL[this])) && buyPrice_NOL[this] == old(buyPrice_NOL[this])) && frozenAccount_NOL[this] == old(frozenAccount_NOL[this])) && name_TokenERC20[this] == old(name_TokenERC20[this])) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this])) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this])) && owner_owned[this] == old(owner_owned[this]));
[L3]                 revert := revert_hold;
[L4806]  RET         call success_s261 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s261, _to_s261, _value_s261);
[L4909]  RET         call CorralChoice_NOL(this);

[2020-11-25 02:13:42,362 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:13:42,363 INFO  L82        PathProgramCache]: Analyzing trace with hash -342326082, now seen corresponding path program 1 times
[2020-11-25 02:13:42,364 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:13:42,432 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:13:43,216 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 02:13:43,216 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:13:43,216 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [23] imperfect sequences [] total 23
[2020-11-25 02:13:43,217 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:13:43,217 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 24 interpolants.
[2020-11-25 02:13:43,217 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=58, Invalid=494, Unknown=0, NotChecked=0, Total=552
[2020-11-25 02:13:43,217 INFO  L87              Difference]: Start difference. First operand 4831 states and 5594 transitions. cyclomatic complexity: 769 Second operand 24 states.
[2020-11-25 02:13:52,379 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:13:52,379 INFO  L93              Difference]: Finished difference Result 5004 states and 5829 transitions.
[2020-11-25 02:13:52,379 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 26 states. 
[2020-11-25 02:13:52,379 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5004 states and 5829 transitions.
[2020-11-25 02:13:52,388 INFO  L131   ngComponentsAnalysis]: Automaton has 5 accepting balls. 10
[2020-11-25 02:13:52,401 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5004 states to 5004 states and 5829 transitions.
[2020-11-25 02:13:52,401 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 231
[2020-11-25 02:13:52,401 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 231
[2020-11-25 02:13:52,401 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5004 states and 5829 transitions.
[2020-11-25 02:13:52,405 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:13:52,405 INFO  L728         BuchiCegarLoop]: Abstraction has 5004 states and 5829 transitions.
[2020-11-25 02:13:52,409 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5004 states and 5829 transitions.
[2020-11-25 02:13:52,438 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5004 to 4931.
[2020-11-25 02:13:52,438 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4931 states.
[2020-11-25 02:13:52,443 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4931 states to 4931 states and 5715 transitions.
[2020-11-25 02:13:52,443 INFO  L751         BuchiCegarLoop]: Abstraction has 4931 states and 5715 transitions.
[2020-11-25 02:13:52,443 INFO  L631         BuchiCegarLoop]: Abstraction has 4931 states and 5715 transitions.
[2020-11-25 02:13:52,443 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 02:13:52,443 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4931 states and 5715 transitions.
[2020-11-25 02:13:52,447 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 02:13:52,447 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:13:52,448 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:13:52,450 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:13:52,450 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_TokenERC200 := false;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4899]              assume null == 0;
[L4900]  CALL        call this := FreshRefGenerator__success();
[L2465]              havoc newRef;
[L2466]              assume Alloc[newRef] == false;
[L2467]              Alloc[newRef] := true;
[L2468]              assume newRef != null;
[L4900]  RET         call this := FreshRefGenerator__success();
[L4901]              assume now >= 0;
[L4902]              assume DType[this] == NOL;
[L4903]              assume msgvalue_MSG == 0;
[L4904]              gas := gas - 53000;
[L4905]  CALL        call NOL_NOL(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L1205]              havoc __exception;
[L1206]              revert := false;
[L1207]  COND FALSE  !(__exception)
[L1234]  CALL        call NOL_NOL__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L3040]  CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2501]  CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2484]              assume msgsender_MSG != null;
[L2485]              Balance[this] := 0;
[L2486]              owner_owned[this] := null;
[L2488]              owner_owned[this] := msgsender_MSG;
[L2501]  RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2502]  COND FALSE  !(revert)
[L3040]  RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L3041]  COND FALSE  !(revert)
[L3044]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L2629]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s124, tokenName_s124, tokenSymbol_s124);
[L2597]              assume msgsender_MSG != null;
[L2598]              Balance[this] := 0;
[L2599]              name_TokenERC20[this] := 1234253568;
[L2600]              symbol_TokenERC20[this] := 1234253568;
[L2601]              decimals_TokenERC20[this] := 18;
[L2602]              totalSupply_TokenERC20[this] := 0;
[L2603]              balanceOf_TokenERC20[this] := zeroRefintArr();
[L2604]              sum_balanceOf0[this] := 0;
[L2605]              allowance_TokenERC20[this] := zeroRefRefintArr();
[L2606]              sum_allowance1[this] := 0;
[L2608]              __var_1 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2609]              totalSupply_TokenERC20[this] := nonlinearMul(initialSupply_s124, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2610]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][msgsender_MSG];
[L2611]              balanceOf_TokenERC20[this][msgsender_MSG] := totalSupply_TokenERC20[this];
[L2612]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][msgsender_MSG];
[L2613]              name_TokenERC20[this] := tokenName_s124;
[L2614]              symbol_TokenERC20[this] := tokenSymbol_s124;
[L2629]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s124, tokenName_s124, tokenSymbol_s124);
[L2630]  COND FALSE  !(revert)
[L3044]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L3045]  COND FALSE  !(revert)
[L3048]  CALL        call NOL_NOL_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L3014]              assume msgsender_MSG != null;
[L3015]              Balance[this] := 0;
[L3016]              sellPrice_NOL[this] := 0;
[L3017]              buyPrice_NOL[this] := 0;
[L3018]              frozenAccount_NOL[this] := zeroRefboolArr();
[L3048]  RET         call NOL_NOL_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L3049]  COND FALSE  !(revert)
[L1234]  RET         call NOL_NOL__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L1235]              assume !revert && gas >= 0;
[L4905]  RET         call NOL_NOL(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L4906]              assume !revert && gas >= 0;
[L4909]  CALL        call CorralChoice_NOL(this);
[L4684]              havoc msgsender_MSG;
[L4685]              havoc msgvalue_MSG;
[L4686]              havoc choice;
[L4687]              havoc __ret_0_owner;
[L4688]              havoc newOwner_s35;
[L4689]              havoc __ret_0_name;
[L4690]              havoc __ret_0_symbol;
[L4691]              havoc __ret_0_decimals;
[L4692]              havoc __ret_0_totalSupply;
[L4693]              havoc arg662_s0;
[L4694]              havoc __ret_0_balanceOf;
[L4695]              havoc arg663_s0;
[L4696]              havoc arg664_s0;
[L4697]              havoc __ret_0_allowance;
[L4698]              havoc initialSupply_s124;
[L4699]              havoc tokenName_s124;
[L4700]              havoc tokenSymbol_s124;
[L4701]              havoc _to_s221;
[L4702]              havoc _value_s221;
[L4703]              havoc success_s221;
[L4704]              havoc _from_s261;
[L4705]              havoc _to_s261;
[L4706]              havoc _value_s261;
[L4707]              havoc success_s261;
[L4708]              havoc _spender_s289;
[L4709]              havoc _value_s289;
[L4710]              havoc success_s289;
[L4711]              havoc _spender_s327;
[L4712]              havoc _value_s327;
[L4713]              havoc _extraData_s327;
[L4714]              havoc success_s327;
[L4715]              havoc _value_s363;
[L4716]              havoc success_s363;
[L4717]              havoc _from_s418;
[L4718]              havoc _value_s418;
[L4719]              havoc success_s418;
[L4720]              havoc __ret_0_sellPrice;
[L4721]              havoc __ret_0_buyPrice;
[L4722]              havoc arg665_s0;
[L4723]              havoc __ret_0_frozenAccount;
[L4724]              havoc initialSupply_s452;
[L4725]              havoc tokenName_s452;
[L4726]              havoc tokenSymbol_s452;
[L4727]              havoc target_s560;
[L4728]              havoc mintedAmount_s560;
[L4729]              havoc target_s581;
[L4730]              havoc freeze_s581;
[L4731]              havoc newSellPrice_s599;
[L4732]              havoc newBuyPrice_s599;
[L4733]              havoc amount_s659;
[L4734]              havoc tmpNow;
[L4735]              havoc gas;
[L4736]              assume gas > 4000000 && gas <= 8000000;
[L4737]              tmpNow := now;
[L4738]              havoc now;
[L4739]              assume now > tmpNow;
[L4740]              assume msgsender_MSG != null;
[L4741]              assume DType[msgsender_MSG] != owned;
[L4742]              assume DType[msgsender_MSG] != tokenRecipient;
[L4743]              assume DType[msgsender_MSG] != TokenERC20;
[L4744]              assume DType[msgsender_MSG] != NOL;
[L4745]              Alloc[msgsender_MSG] := true;
[L4746]  COND FALSE  !(choice == 22)
[L4752]  COND FALSE  !(choice == 21)
[L4758]  COND FALSE  !(choice == 20)
[L4764]  COND FALSE  !(choice == 19)
[L4770]  COND FALSE  !(choice == 18)
[L4776]  COND FALSE  !(choice == 17)
[L4782]  COND FALSE  !(choice == 16)
[L4788]  COND FALSE  !(choice == 15)
[L4794]  COND FALSE  !(choice == 14)
[L4801]  COND TRUE   choice == 13
[L4802]              gas := gas - 21000;
[L4803]  COND TRUE   gas >= 0
[L4804]              assume _value_s261 >= 0 && _value_s261 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4805]              assume msgvalue_MSG == 0;
[L4806]  CALL        call success_s261 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s261, _to_s261, _value_s261);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != _from_s261 || p2 != msgsender_MSG) && _from_s261 == _to_s261) && _value_s261 <= balanceOf_TokenERC20[this][_from_s261]) && _value_s261 <= allowance_TokenERC20[this][_from_s261][msgsender_MSG]) && _value_s261 >= 0) && _value_s261 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s261] >= 0) && balanceOf_TokenERC20[this][_to_s261] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_from_s261] >= 0) && balanceOf_TokenERC20[this][_from_s261] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_TokenERC20[this][_from_s261][msgsender_MSG] >= 0) && allowance_TokenERC20[this][_from_s261][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_TokenERC200 := true;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L490]               havoc __exception;
[L491]               revert := false;
[L492]   COND FALSE  !(__exception)
[L519]   CALL        call success_s261 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s261, _to_s261, _value_s261);
[L2755]  COND FALSE  !(!(_value_s261 <= allowance_TokenERC20[this][_from_s261][msgsender_MSG]))
[L2759]              sum_allowance1[_from_s261] := sum_allowance1[_from_s261] - allowance_TokenERC20[this][_from_s261][msgsender_MSG];
[L2760]              allowance_TokenERC20[this][_from_s261][msgsender_MSG] := (allowance_TokenERC20[this][_from_s261][msgsender_MSG] - _value_s261) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2761]              sum_allowance1[_from_s261] := sum_allowance1[_from_s261] + allowance_TokenERC20[this][_from_s261][msgsender_MSG];
[L2762]  COND FALSE  !(DType[this] == NOL)
[L2767]  COND TRUE   DType[this] == TokenERC20
[L2768]  CALL        call _transfer~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s261, _to_s261, _value_s261);
[L2665]              __var_2 := null;
[L2666]  COND FALSE  !(!(_to_s202 != null))
[L2670]  COND FALSE  !(!(balanceOf_TokenERC20[this][_from_s202] >= _value_s202))
[L2674]  COND FALSE  !(!((balanceOf_TokenERC20[this][_to_s202] + _value_s202) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 > balanceOf_TokenERC20[this][_to_s202]))
[L2678]              previousBalances_s202 := (balanceOf_TokenERC20[this][_from_s202] + balanceOf_TokenERC20[this][_to_s202]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2679]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][_from_s202];
[L2680]              balanceOf_TokenERC20[this][_from_s202] := (balanceOf_TokenERC20[this][_from_s202] - _value_s202) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2681]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][_from_s202];
[L2682]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][_to_s202];
[L2683]              balanceOf_TokenERC20[this][_to_s202] := (balanceOf_TokenERC20[this][_to_s202] + _value_s202) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2684]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][_to_s202];
[L2685]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L2686]              assert (balanceOf_TokenERC20[this][_from_s202] + balanceOf_TokenERC20[this][_to_s202]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 == previousBalances_s202;
[L2768]  RET         call _transfer~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s261, _to_s261, _value_s261);
[L2769]  COND FALSE  !(revert)
[L2775]              success_s261 := true;
[L519]   RET         call success_s261 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s261, _to_s261, _value_s261);
[L520]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((success_s261 == true && allowance_TokenERC20[this][_from_s261][msgsender_MSG] == old(allowance_TokenERC20[this][_from_s261][msgsender_MSG]) - _value_s261) && totalSupply_TokenERC20[this] == old(totalSupply_TokenERC20[this])) && balanceOf_TokenERC20[this] == old(balanceOf_TokenERC20[this])) && allowance_TokenERC20[this][p1][p2] == old(allowance_TokenERC20[this][p1][p2])) && sellPrice_NOL[this] == old(sellPrice_NOL[this])) && buyPrice_NOL[this] == old(buyPrice_NOL[this])) && frozenAccount_NOL[this] == old(frozenAccount_NOL[this])) && name_TokenERC20[this] == old(name_TokenERC20[this])) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this])) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this])) && owner_owned[this] == old(owner_owned[this]));
[L3]                 revert := revert_hold;
[L4806]  RET         call success_s261 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s261, _to_s261, _value_s261);
[L4909]  RET         call CorralChoice_NOL(this);

Loop:
[L4909]  CALL        call CorralChoice_NOL(this);
[L4684]              havoc msgsender_MSG;
[L4685]              havoc msgvalue_MSG;
[L4686]              havoc choice;
[L4687]              havoc __ret_0_owner;
[L4688]              havoc newOwner_s35;
[L4689]              havoc __ret_0_name;
[L4690]              havoc __ret_0_symbol;
[L4691]              havoc __ret_0_decimals;
[L4692]              havoc __ret_0_totalSupply;
[L4693]              havoc arg662_s0;
[L4694]              havoc __ret_0_balanceOf;
[L4695]              havoc arg663_s0;
[L4696]              havoc arg664_s0;
[L4697]              havoc __ret_0_allowance;
[L4698]              havoc initialSupply_s124;
[L4699]              havoc tokenName_s124;
[L4700]              havoc tokenSymbol_s124;
[L4701]              havoc _to_s221;
[L4702]              havoc _value_s221;
[L4703]              havoc success_s221;
[L4704]              havoc _from_s261;
[L4705]              havoc _to_s261;
[L4706]              havoc _value_s261;
[L4707]              havoc success_s261;
[L4708]              havoc _spender_s289;
[L4709]              havoc _value_s289;
[L4710]              havoc success_s289;
[L4711]              havoc _spender_s327;
[L4712]              havoc _value_s327;
[L4713]              havoc _extraData_s327;
[L4714]              havoc success_s327;
[L4715]              havoc _value_s363;
[L4716]              havoc success_s363;
[L4717]              havoc _from_s418;
[L4718]              havoc _value_s418;
[L4719]              havoc success_s418;
[L4720]              havoc __ret_0_sellPrice;
[L4721]              havoc __ret_0_buyPrice;
[L4722]              havoc arg665_s0;
[L4723]              havoc __ret_0_frozenAccount;
[L4724]              havoc initialSupply_s452;
[L4725]              havoc tokenName_s452;
[L4726]              havoc tokenSymbol_s452;
[L4727]              havoc target_s560;
[L4728]              havoc mintedAmount_s560;
[L4729]              havoc target_s581;
[L4730]              havoc freeze_s581;
[L4731]              havoc newSellPrice_s599;
[L4732]              havoc newBuyPrice_s599;
[L4733]              havoc amount_s659;
[L4734]              havoc tmpNow;
[L4735]              havoc gas;
[L4736]              assume gas > 4000000 && gas <= 8000000;
[L4737]              tmpNow := now;
[L4738]              havoc now;
[L4739]              assume now > tmpNow;
[L4740]              assume msgsender_MSG != null;
[L4741]              assume DType[msgsender_MSG] != owned;
[L4742]              assume DType[msgsender_MSG] != tokenRecipient;
[L4743]              assume DType[msgsender_MSG] != TokenERC20;
[L4744]              assume DType[msgsender_MSG] != NOL;
[L4745]              Alloc[msgsender_MSG] := true;
[L4746]  COND FALSE  !(choice == 22)
[L4752]  COND FALSE  !(choice == 21)
[L4758]  COND FALSE  !(choice == 20)
[L4764]  COND FALSE  !(choice == 19)
[L4770]  COND FALSE  !(choice == 18)
[L4776]  COND FALSE  !(choice == 17)
[L4782]  COND FALSE  !(choice == 16)
[L4788]  COND FALSE  !(choice == 15)
[L4794]  COND FALSE  !(choice == 14)
[L4801]  COND FALSE  !(choice == 13)
[L4808]  COND TRUE   choice == 12
[L4809]              gas := gas - 21000;
[L4810]  COND TRUE   gas >= 0
[L4811]              assume _value_s289 >= 0 && _value_s289 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4812]              assume msgvalue_MSG == 0;
[L4813]  CALL        call success_s289 := approve~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _spender_s289, _value_s289);
[L554]               havoc __exception;
[L555]               revert := false;
[L556]   COND FALSE  !(__exception)
[L583]   CALL        call success_s289 := approve~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _spender_s289, _value_s289);
[L2790]              sum_allowance1[msgsender_MSG] := sum_allowance1[msgsender_MSG] - allowance_TokenERC20[this][msgsender_MSG][_spender_s289];
[L2791]              allowance_TokenERC20[this][msgsender_MSG][_spender_s289] := _value_s289;
[L2792]              sum_allowance1[msgsender_MSG] := sum_allowance1[msgsender_MSG] + allowance_TokenERC20[this][msgsender_MSG][_spender_s289];
[L2793]              assert { :EventEmitted "Approval_TokenERC20" } true;
[L2794]              success_s289 := true;
[L583]   RET         call success_s289 := approve~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _spender_s289, _value_s289);
[L584]               assume !revert && gas >= 0;
[L4813]  RET         call success_s289 := approve~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _spender_s289, _value_s289);
[L4909]  RET         call CorralChoice_NOL(this);

[2020-11-25 02:13:52,453 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:13:52,453 INFO  L82        PathProgramCache]: Analyzing trace with hash -528917530, now seen corresponding path program 1 times
[2020-11-25 02:13:52,453 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:13:52,461 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:13:52,488 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 02:13:52,488 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:13:52,488 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-25 02:13:52,488 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:13:52,488 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 02:13:52,488 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-25 02:13:52,489 INFO  L87              Difference]: Start difference. First operand 4931 states and 5715 transitions. cyclomatic complexity: 792 Second operand 6 states.
[2020-11-25 02:13:52,550 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:13:52,550 INFO  L93              Difference]: Finished difference Result 4955 states and 5736 transitions.
[2020-11-25 02:13:52,550 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-11-25 02:13:52,550 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4955 states and 5736 transitions.
[2020-11-25 02:13:52,559 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 02:13:52,570 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4955 states to 4931 states and 5708 transitions.
[2020-11-25 02:13:52,571 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 225
[2020-11-25 02:13:52,571 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 225
[2020-11-25 02:13:52,571 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4931 states and 5708 transitions.
[2020-11-25 02:13:52,575 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:13:52,575 INFO  L728         BuchiCegarLoop]: Abstraction has 4931 states and 5708 transitions.
[2020-11-25 02:13:52,579 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4931 states and 5708 transitions.
[2020-11-25 02:13:52,607 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4931 to 4929.
[2020-11-25 02:13:52,607 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4929 states.
[2020-11-25 02:13:52,612 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4929 states to 4929 states and 5705 transitions.
[2020-11-25 02:13:52,612 INFO  L751         BuchiCegarLoop]: Abstraction has 4929 states and 5705 transitions.
[2020-11-25 02:13:52,612 INFO  L631         BuchiCegarLoop]: Abstraction has 4929 states and 5705 transitions.
[2020-11-25 02:13:52,612 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 02:13:52,612 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4929 states and 5705 transitions.
[2020-11-25 02:13:52,616 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 02:13:52,616 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:13:52,616 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:13:52,617 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:13:52,617 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_TokenERC200 := false;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4899]              assume null == 0;
[L4900]  CALL        call this := FreshRefGenerator__success();
[L2465]              havoc newRef;
[L2466]              assume Alloc[newRef] == false;
[L2467]              Alloc[newRef] := true;
[L2468]              assume newRef != null;
[L4900]  RET         call this := FreshRefGenerator__success();
[L4901]              assume now >= 0;
[L4902]              assume DType[this] == NOL;
[L4903]              assume msgvalue_MSG == 0;
[L4904]              gas := gas - 53000;
[L4905]  CALL        call NOL_NOL(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L1205]              havoc __exception;
[L1206]              revert := false;
[L1207]  COND FALSE  !(__exception)
[L1234]  CALL        call NOL_NOL__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L3040]  CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2501]  CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2484]              assume msgsender_MSG != null;
[L2485]              Balance[this] := 0;
[L2486]              owner_owned[this] := null;
[L2488]              owner_owned[this] := msgsender_MSG;
[L2501]  RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2502]  COND FALSE  !(revert)
[L3040]  RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L3041]  COND FALSE  !(revert)
[L3044]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L2629]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s124, tokenName_s124, tokenSymbol_s124);
[L2597]              assume msgsender_MSG != null;
[L2598]              Balance[this] := 0;
[L2599]              name_TokenERC20[this] := 1234253568;
[L2600]              symbol_TokenERC20[this] := 1234253568;
[L2601]              decimals_TokenERC20[this] := 18;
[L2602]              totalSupply_TokenERC20[this] := 0;
[L2603]              balanceOf_TokenERC20[this] := zeroRefintArr();
[L2604]              sum_balanceOf0[this] := 0;
[L2605]              allowance_TokenERC20[this] := zeroRefRefintArr();
[L2606]              sum_allowance1[this] := 0;
[L2608]              __var_1 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2609]              totalSupply_TokenERC20[this] := nonlinearMul(initialSupply_s124, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2610]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][msgsender_MSG];
[L2611]              balanceOf_TokenERC20[this][msgsender_MSG] := totalSupply_TokenERC20[this];
[L2612]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][msgsender_MSG];
[L2613]              name_TokenERC20[this] := tokenName_s124;
[L2614]              symbol_TokenERC20[this] := tokenSymbol_s124;
[L2629]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s124, tokenName_s124, tokenSymbol_s124);
[L2630]  COND FALSE  !(revert)
[L3044]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L3045]  COND FALSE  !(revert)
[L3048]  CALL        call NOL_NOL_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L3014]              assume msgsender_MSG != null;
[L3015]              Balance[this] := 0;
[L3016]              sellPrice_NOL[this] := 0;
[L3017]              buyPrice_NOL[this] := 0;
[L3018]              frozenAccount_NOL[this] := zeroRefboolArr();
[L3048]  RET         call NOL_NOL_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L3049]  COND FALSE  !(revert)
[L1234]  RET         call NOL_NOL__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L1235]              assume !revert && gas >= 0;
[L4905]  RET         call NOL_NOL(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L4906]              assume !revert && gas >= 0;
[L4909]  CALL        call CorralChoice_NOL(this);
[L4684]              havoc msgsender_MSG;
[L4685]              havoc msgvalue_MSG;
[L4686]              havoc choice;
[L4687]              havoc __ret_0_owner;
[L4688]              havoc newOwner_s35;
[L4689]              havoc __ret_0_name;
[L4690]              havoc __ret_0_symbol;
[L4691]              havoc __ret_0_decimals;
[L4692]              havoc __ret_0_totalSupply;
[L4693]              havoc arg662_s0;
[L4694]              havoc __ret_0_balanceOf;
[L4695]              havoc arg663_s0;
[L4696]              havoc arg664_s0;
[L4697]              havoc __ret_0_allowance;
[L4698]              havoc initialSupply_s124;
[L4699]              havoc tokenName_s124;
[L4700]              havoc tokenSymbol_s124;
[L4701]              havoc _to_s221;
[L4702]              havoc _value_s221;
[L4703]              havoc success_s221;
[L4704]              havoc _from_s261;
[L4705]              havoc _to_s261;
[L4706]              havoc _value_s261;
[L4707]              havoc success_s261;
[L4708]              havoc _spender_s289;
[L4709]              havoc _value_s289;
[L4710]              havoc success_s289;
[L4711]              havoc _spender_s327;
[L4712]              havoc _value_s327;
[L4713]              havoc _extraData_s327;
[L4714]              havoc success_s327;
[L4715]              havoc _value_s363;
[L4716]              havoc success_s363;
[L4717]              havoc _from_s418;
[L4718]              havoc _value_s418;
[L4719]              havoc success_s418;
[L4720]              havoc __ret_0_sellPrice;
[L4721]              havoc __ret_0_buyPrice;
[L4722]              havoc arg665_s0;
[L4723]              havoc __ret_0_frozenAccount;
[L4724]              havoc initialSupply_s452;
[L4725]              havoc tokenName_s452;
[L4726]              havoc tokenSymbol_s452;
[L4727]              havoc target_s560;
[L4728]              havoc mintedAmount_s560;
[L4729]              havoc target_s581;
[L4730]              havoc freeze_s581;
[L4731]              havoc newSellPrice_s599;
[L4732]              havoc newBuyPrice_s599;
[L4733]              havoc amount_s659;
[L4734]              havoc tmpNow;
[L4735]              havoc gas;
[L4736]              assume gas > 4000000 && gas <= 8000000;
[L4737]              tmpNow := now;
[L4738]              havoc now;
[L4739]              assume now > tmpNow;
[L4740]              assume msgsender_MSG != null;
[L4741]              assume DType[msgsender_MSG] != owned;
[L4742]              assume DType[msgsender_MSG] != tokenRecipient;
[L4743]              assume DType[msgsender_MSG] != TokenERC20;
[L4744]              assume DType[msgsender_MSG] != NOL;
[L4745]              Alloc[msgsender_MSG] := true;
[L4746]  COND FALSE  !(choice == 22)
[L4752]  COND FALSE  !(choice == 21)
[L4758]  COND FALSE  !(choice == 20)
[L4764]  COND FALSE  !(choice == 19)
[L4770]  COND FALSE  !(choice == 18)
[L4776]  COND FALSE  !(choice == 17)
[L4782]  COND FALSE  !(choice == 16)
[L4788]  COND FALSE  !(choice == 15)
[L4794]  COND FALSE  !(choice == 14)
[L4801]  COND TRUE   choice == 13
[L4802]              gas := gas - 21000;
[L4803]  COND TRUE   gas >= 0
[L4804]              assume _value_s261 >= 0 && _value_s261 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4805]              assume msgvalue_MSG == 0;
[L4806]  CALL        call success_s261 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s261, _to_s261, _value_s261);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != _from_s261 || p2 != msgsender_MSG) && _from_s261 == _to_s261) && _value_s261 <= balanceOf_TokenERC20[this][_from_s261]) && _value_s261 <= allowance_TokenERC20[this][_from_s261][msgsender_MSG]) && _value_s261 >= 0) && _value_s261 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s261] >= 0) && balanceOf_TokenERC20[this][_to_s261] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_from_s261] >= 0) && balanceOf_TokenERC20[this][_from_s261] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_TokenERC20[this][_from_s261][msgsender_MSG] >= 0) && allowance_TokenERC20[this][_from_s261][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_TokenERC200 := true;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L490]               havoc __exception;
[L491]               revert := false;
[L492]   COND TRUE   __exception
[L493]               __tmp__Balance := Balance;
[L494]               __tmp__DType := DType;
[L495]               __tmp__Alloc := Alloc;
[L496]               __tmp__balance_ADDR := balance_ADDR;
[L497]               __tmp__M_Ref_int := M_Ref_int;
[L498]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L499]               __tmp__alloc_allowance_TokenERC20_lvl0 := alloc_allowance_TokenERC20_lvl0;
[L500]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L501]               __tmp__sum_allowance1 := sum_allowance1;
[L502]               __tmp__M_Ref_bool := M_Ref_bool;
[L503]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L504]               __tmp__Length := Length;
[L505]               __tmp__now := now;
[L506]               __tmp__owner_owned := owner_owned;
[L507]               __tmp__name_TokenERC20 := name_TokenERC20;
[L508]               __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L509]               __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L510]               __tmp__totalSupply_TokenERC20 := totalSupply_TokenERC20;
[L511]               __tmp__balanceOf_TokenERC20 := balanceOf_TokenERC20;
[L512]               __tmp__allowance_TokenERC20 := allowance_TokenERC20;
[L513]               __tmp__sellPrice_NOL := sellPrice_NOL;
[L514]               __tmp__buyPrice_NOL := buyPrice_NOL;
[L515]               __tmp__frozenAccount_NOL := frozenAccount_NOL;
[L516]   CALL        call success_s261 := transferFrom~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _from_s261, _to_s261, _value_s261);
[L2729]  COND FALSE  !(!(_value_s261 <= __tmp__allowance_TokenERC20[this][_from_s261][msgsender_MSG]))
[L2733]              __tmp__sum_allowance1[_from_s261] := __tmp__sum_allowance1[_from_s261] - __tmp__allowance_TokenERC20[this][_from_s261][msgsender_MSG];
[L2734]              __tmp__allowance_TokenERC20[this][_from_s261][msgsender_MSG] := (__tmp__allowance_TokenERC20[this][_from_s261][msgsender_MSG] - _value_s261) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2735]              __tmp__sum_allowance1[_from_s261] := __tmp__sum_allowance1[_from_s261] + __tmp__allowance_TokenERC20[this][_from_s261][msgsender_MSG];
[L2736]  COND TRUE   __tmp__DType[this] == NOL
[L2737]  CALL        call _transfer~address~address~uint256_NOL__fail(this, msgsender_MSG, msgvalue_MSG, _from_s261, _to_s261, _value_s261);
[L3057]              __var_6 := null;
[L3058]  COND TRUE   !(_to_s522 != null)
[L3059]              revert := true;
[L2737]  RET         call _transfer~address~address~uint256_NOL__fail(this, msgsender_MSG, msgvalue_MSG, _from_s261, _to_s261, _value_s261);
[L2738]  COND TRUE   revert
[L516]   RET         call success_s261 := transferFrom~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _from_s261, _to_s261, _value_s261);
[L517]               assume revert || gas < 0;
[L4806]  RET         call success_s261 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s261, _to_s261, _value_s261);
[L4909]  RET         call CorralChoice_NOL(this);

Loop:
[L4909]  CALL        call CorralChoice_NOL(this);
[L4684]              havoc msgsender_MSG;
[L4685]              havoc msgvalue_MSG;
[L4686]              havoc choice;
[L4687]              havoc __ret_0_owner;
[L4688]              havoc newOwner_s35;
[L4689]              havoc __ret_0_name;
[L4690]              havoc __ret_0_symbol;
[L4691]              havoc __ret_0_decimals;
[L4692]              havoc __ret_0_totalSupply;
[L4693]              havoc arg662_s0;
[L4694]              havoc __ret_0_balanceOf;
[L4695]              havoc arg663_s0;
[L4696]              havoc arg664_s0;
[L4697]              havoc __ret_0_allowance;
[L4698]              havoc initialSupply_s124;
[L4699]              havoc tokenName_s124;
[L4700]              havoc tokenSymbol_s124;
[L4701]              havoc _to_s221;
[L4702]              havoc _value_s221;
[L4703]              havoc success_s221;
[L4704]              havoc _from_s261;
[L4705]              havoc _to_s261;
[L4706]              havoc _value_s261;
[L4707]              havoc success_s261;
[L4708]              havoc _spender_s289;
[L4709]              havoc _value_s289;
[L4710]              havoc success_s289;
[L4711]              havoc _spender_s327;
[L4712]              havoc _value_s327;
[L4713]              havoc _extraData_s327;
[L4714]              havoc success_s327;
[L4715]              havoc _value_s363;
[L4716]              havoc success_s363;
[L4717]              havoc _from_s418;
[L4718]              havoc _value_s418;
[L4719]              havoc success_s418;
[L4720]              havoc __ret_0_sellPrice;
[L4721]              havoc __ret_0_buyPrice;
[L4722]              havoc arg665_s0;
[L4723]              havoc __ret_0_frozenAccount;
[L4724]              havoc initialSupply_s452;
[L4725]              havoc tokenName_s452;
[L4726]              havoc tokenSymbol_s452;
[L4727]              havoc target_s560;
[L4728]              havoc mintedAmount_s560;
[L4729]              havoc target_s581;
[L4730]              havoc freeze_s581;
[L4731]              havoc newSellPrice_s599;
[L4732]              havoc newBuyPrice_s599;
[L4733]              havoc amount_s659;
[L4734]              havoc tmpNow;
[L4735]              havoc gas;
[L4736]              assume gas > 4000000 && gas <= 8000000;
[L4737]              tmpNow := now;
[L4738]              havoc now;
[L4739]              assume now > tmpNow;
[L4740]              assume msgsender_MSG != null;
[L4741]              assume DType[msgsender_MSG] != owned;
[L4742]              assume DType[msgsender_MSG] != tokenRecipient;
[L4743]              assume DType[msgsender_MSG] != TokenERC20;
[L4744]              assume DType[msgsender_MSG] != NOL;
[L4745]              Alloc[msgsender_MSG] := true;
[L4746]  COND TRUE   choice == 22
[L4747]              gas := gas - 21000;
[L4748]  COND FALSE  !(gas >= 0)
[L4909]  RET         call CorralChoice_NOL(this);

[2020-11-25 02:13:52,620 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:13:52,620 INFO  L82        PathProgramCache]: Analyzing trace with hash -1040551875, now seen corresponding path program 1 times
[2020-11-25 02:13:52,621 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:13:52,630 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:13:52,640 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:13:52,689 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:13:52,689 INFO  L82        PathProgramCache]: Analyzing trace with hash -1315698204, now seen corresponding path program 1 times
[2020-11-25 02:13:52,690 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:13:52,691 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:13:52,696 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 02:13:52,696 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:13:52,696 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 02:13:52,696 INFO  L1008  eck$LassoCheckResult]: loop already infeasible
[2020-11-25 02:13:52,697 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 02:13:52,697 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-11-25 02:13:52,697 INFO  L87              Difference]: Start difference. First operand 4929 states and 5705 transitions. cyclomatic complexity: 784 Second operand 4 states.
[2020-11-25 02:13:52,922 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:13:52,922 INFO  L93              Difference]: Finished difference Result 6083 states and 6863 transitions.
[2020-11-25 02:13:52,922 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 02:13:52,922 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6083 states and 6863 transitions.
[2020-11-25 02:13:52,938 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 12
[2020-11-25 02:13:52,953 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6083 states to 6067 states and 6845 transitions.
[2020-11-25 02:13:52,953 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 242
[2020-11-25 02:13:52,954 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1236
[2020-11-25 02:13:52,954 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6067 states and 6845 transitions.
[2020-11-25 02:13:52,958 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:13:52,958 INFO  L728         BuchiCegarLoop]: Abstraction has 6067 states and 6845 transitions.
[2020-11-25 02:13:52,962 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6067 states and 6845 transitions.
[2020-11-25 02:13:52,997 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6067 to 5767.
[2020-11-25 02:13:52,998 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5767 states.
[2020-11-25 02:13:53,003 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5767 states to 5767 states and 6479 transitions.
[2020-11-25 02:13:53,003 INFO  L751         BuchiCegarLoop]: Abstraction has 5767 states and 6479 transitions.
[2020-11-25 02:13:53,003 INFO  L631         BuchiCegarLoop]: Abstraction has 5767 states and 6479 transitions.
[2020-11-25 02:13:53,003 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 02:13:53,003 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5767 states and 6479 transitions.
[2020-11-25 02:13:53,011 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 02:13:53,011 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:13:53,011 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:13:53,012 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:13:53,012 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_TokenERC200 := false;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4899]              assume null == 0;
[L4900]  CALL        call this := FreshRefGenerator__success();
[L2465]              havoc newRef;
[L2466]              assume Alloc[newRef] == false;
[L2467]              Alloc[newRef] := true;
[L2468]              assume newRef != null;
[L4900]  RET         call this := FreshRefGenerator__success();
[L4901]              assume now >= 0;
[L4902]              assume DType[this] == NOL;
[L4903]              assume msgvalue_MSG == 0;
[L4904]              gas := gas - 53000;
[L4905]  CALL        call NOL_NOL(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L1205]              havoc __exception;
[L1206]              revert := false;
[L1207]  COND FALSE  !(__exception)
[L1234]  CALL        call NOL_NOL__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L3040]  CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2501]  CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2484]              assume msgsender_MSG != null;
[L2485]              Balance[this] := 0;
[L2486]              owner_owned[this] := null;
[L2488]              owner_owned[this] := msgsender_MSG;
[L2501]  RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2502]  COND FALSE  !(revert)
[L3040]  RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L3041]  COND FALSE  !(revert)
[L3044]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L2629]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s124, tokenName_s124, tokenSymbol_s124);
[L2597]              assume msgsender_MSG != null;
[L2598]              Balance[this] := 0;
[L2599]              name_TokenERC20[this] := 1234253568;
[L2600]              symbol_TokenERC20[this] := 1234253568;
[L2601]              decimals_TokenERC20[this] := 18;
[L2602]              totalSupply_TokenERC20[this] := 0;
[L2603]              balanceOf_TokenERC20[this] := zeroRefintArr();
[L2604]              sum_balanceOf0[this] := 0;
[L2605]              allowance_TokenERC20[this] := zeroRefRefintArr();
[L2606]              sum_allowance1[this] := 0;
[L2608]              __var_1 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2609]              totalSupply_TokenERC20[this] := nonlinearMul(initialSupply_s124, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2610]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][msgsender_MSG];
[L2611]              balanceOf_TokenERC20[this][msgsender_MSG] := totalSupply_TokenERC20[this];
[L2612]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][msgsender_MSG];
[L2613]              name_TokenERC20[this] := tokenName_s124;
[L2614]              symbol_TokenERC20[this] := tokenSymbol_s124;
[L2629]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s124, tokenName_s124, tokenSymbol_s124);
[L2630]  COND FALSE  !(revert)
[L3044]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L3045]  COND FALSE  !(revert)
[L3048]  CALL        call NOL_NOL_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L3014]              assume msgsender_MSG != null;
[L3015]              Balance[this] := 0;
[L3016]              sellPrice_NOL[this] := 0;
[L3017]              buyPrice_NOL[this] := 0;
[L3018]              frozenAccount_NOL[this] := zeroRefboolArr();
[L3048]  RET         call NOL_NOL_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L3049]  COND FALSE  !(revert)
[L1234]  RET         call NOL_NOL__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L1235]              assume !revert && gas >= 0;
[L4905]  RET         call NOL_NOL(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L4906]              assume !revert && gas >= 0;
[L4909]  CALL        call CorralChoice_NOL(this);
[L4684]              havoc msgsender_MSG;
[L4685]              havoc msgvalue_MSG;
[L4686]              havoc choice;
[L4687]              havoc __ret_0_owner;
[L4688]              havoc newOwner_s35;
[L4689]              havoc __ret_0_name;
[L4690]              havoc __ret_0_symbol;
[L4691]              havoc __ret_0_decimals;
[L4692]              havoc __ret_0_totalSupply;
[L4693]              havoc arg662_s0;
[L4694]              havoc __ret_0_balanceOf;
[L4695]              havoc arg663_s0;
[L4696]              havoc arg664_s0;
[L4697]              havoc __ret_0_allowance;
[L4698]              havoc initialSupply_s124;
[L4699]              havoc tokenName_s124;
[L4700]              havoc tokenSymbol_s124;
[L4701]              havoc _to_s221;
[L4702]              havoc _value_s221;
[L4703]              havoc success_s221;
[L4704]              havoc _from_s261;
[L4705]              havoc _to_s261;
[L4706]              havoc _value_s261;
[L4707]              havoc success_s261;
[L4708]              havoc _spender_s289;
[L4709]              havoc _value_s289;
[L4710]              havoc success_s289;
[L4711]              havoc _spender_s327;
[L4712]              havoc _value_s327;
[L4713]              havoc _extraData_s327;
[L4714]              havoc success_s327;
[L4715]              havoc _value_s363;
[L4716]              havoc success_s363;
[L4717]              havoc _from_s418;
[L4718]              havoc _value_s418;
[L4719]              havoc success_s418;
[L4720]              havoc __ret_0_sellPrice;
[L4721]              havoc __ret_0_buyPrice;
[L4722]              havoc arg665_s0;
[L4723]              havoc __ret_0_frozenAccount;
[L4724]              havoc initialSupply_s452;
[L4725]              havoc tokenName_s452;
[L4726]              havoc tokenSymbol_s452;
[L4727]              havoc target_s560;
[L4728]              havoc mintedAmount_s560;
[L4729]              havoc target_s581;
[L4730]              havoc freeze_s581;
[L4731]              havoc newSellPrice_s599;
[L4732]              havoc newBuyPrice_s599;
[L4733]              havoc amount_s659;
[L4734]              havoc tmpNow;
[L4735]              havoc gas;
[L4736]              assume gas > 4000000 && gas <= 8000000;
[L4737]              tmpNow := now;
[L4738]              havoc now;
[L4739]              assume now > tmpNow;
[L4740]              assume msgsender_MSG != null;
[L4741]              assume DType[msgsender_MSG] != owned;
[L4742]              assume DType[msgsender_MSG] != tokenRecipient;
[L4743]              assume DType[msgsender_MSG] != TokenERC20;
[L4744]              assume DType[msgsender_MSG] != NOL;
[L4745]              Alloc[msgsender_MSG] := true;
[L4746]  COND FALSE  !(choice == 22)
[L4752]  COND FALSE  !(choice == 21)
[L4758]  COND FALSE  !(choice == 20)
[L4764]  COND FALSE  !(choice == 19)
[L4770]  COND FALSE  !(choice == 18)
[L4776]  COND FALSE  !(choice == 17)
[L4782]  COND FALSE  !(choice == 16)
[L4788]  COND FALSE  !(choice == 15)
[L4794]  COND FALSE  !(choice == 14)
[L4801]  COND TRUE   choice == 13
[L4802]              gas := gas - 21000;
[L4803]  COND TRUE   gas >= 0
[L4804]              assume _value_s261 >= 0 && _value_s261 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4805]              assume msgvalue_MSG == 0;
[L4806]  CALL        call success_s261 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s261, _to_s261, _value_s261);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != _from_s261 || p2 != msgsender_MSG) && _from_s261 == _to_s261) && _value_s261 <= balanceOf_TokenERC20[this][_from_s261]) && _value_s261 <= allowance_TokenERC20[this][_from_s261][msgsender_MSG]) && _value_s261 >= 0) && _value_s261 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s261] >= 0) && balanceOf_TokenERC20[this][_to_s261] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_from_s261] >= 0) && balanceOf_TokenERC20[this][_from_s261] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_TokenERC20[this][_from_s261][msgsender_MSG] >= 0) && allowance_TokenERC20[this][_from_s261][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_TokenERC200 := true;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L490]               havoc __exception;
[L491]               revert := false;
[L492]   COND TRUE   __exception
[L493]               __tmp__Balance := Balance;
[L494]               __tmp__DType := DType;
[L495]               __tmp__Alloc := Alloc;
[L496]               __tmp__balance_ADDR := balance_ADDR;
[L497]               __tmp__M_Ref_int := M_Ref_int;
[L498]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L499]               __tmp__alloc_allowance_TokenERC20_lvl0 := alloc_allowance_TokenERC20_lvl0;
[L500]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L501]               __tmp__sum_allowance1 := sum_allowance1;
[L502]               __tmp__M_Ref_bool := M_Ref_bool;
[L503]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L504]               __tmp__Length := Length;
[L505]               __tmp__now := now;
[L506]               __tmp__owner_owned := owner_owned;
[L507]               __tmp__name_TokenERC20 := name_TokenERC20;
[L508]               __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L509]               __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L510]               __tmp__totalSupply_TokenERC20 := totalSupply_TokenERC20;
[L511]               __tmp__balanceOf_TokenERC20 := balanceOf_TokenERC20;
[L512]               __tmp__allowance_TokenERC20 := allowance_TokenERC20;
[L513]               __tmp__sellPrice_NOL := sellPrice_NOL;
[L514]               __tmp__buyPrice_NOL := buyPrice_NOL;
[L515]               __tmp__frozenAccount_NOL := frozenAccount_NOL;
[L516]   CALL        call success_s261 := transferFrom~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _from_s261, _to_s261, _value_s261);
[L2729]  COND FALSE  !(!(_value_s261 <= __tmp__allowance_TokenERC20[this][_from_s261][msgsender_MSG]))
[L2733]              __tmp__sum_allowance1[_from_s261] := __tmp__sum_allowance1[_from_s261] - __tmp__allowance_TokenERC20[this][_from_s261][msgsender_MSG];
[L2734]              __tmp__allowance_TokenERC20[this][_from_s261][msgsender_MSG] := (__tmp__allowance_TokenERC20[this][_from_s261][msgsender_MSG] - _value_s261) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2735]              __tmp__sum_allowance1[_from_s261] := __tmp__sum_allowance1[_from_s261] + __tmp__allowance_TokenERC20[this][_from_s261][msgsender_MSG];
[L2736]  COND TRUE   __tmp__DType[this] == NOL
[L2737]  CALL        call _transfer~address~address~uint256_NOL__fail(this, msgsender_MSG, msgvalue_MSG, _from_s261, _to_s261, _value_s261);
[L3057]              __var_6 := null;
[L3058]  COND TRUE   !(_to_s522 != null)
[L3059]              revert := true;
[L2737]  RET         call _transfer~address~address~uint256_NOL__fail(this, msgsender_MSG, msgvalue_MSG, _from_s261, _to_s261, _value_s261);
[L2738]  COND TRUE   revert
[L516]   RET         call success_s261 := transferFrom~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _from_s261, _to_s261, _value_s261);
[L517]               assume revert || gas < 0;
[L4806]  RET         call success_s261 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s261, _to_s261, _value_s261);
[L4909]  RET         call CorralChoice_NOL(this);

Loop:
[L4909]  CALL        call CorralChoice_NOL(this);
[L4684]              havoc msgsender_MSG;
[L4685]              havoc msgvalue_MSG;
[L4686]              havoc choice;
[L4687]              havoc __ret_0_owner;
[L4688]              havoc newOwner_s35;
[L4689]              havoc __ret_0_name;
[L4690]              havoc __ret_0_symbol;
[L4691]              havoc __ret_0_decimals;
[L4692]              havoc __ret_0_totalSupply;
[L4693]              havoc arg662_s0;
[L4694]              havoc __ret_0_balanceOf;
[L4695]              havoc arg663_s0;
[L4696]              havoc arg664_s0;
[L4697]              havoc __ret_0_allowance;
[L4698]              havoc initialSupply_s124;
[L4699]              havoc tokenName_s124;
[L4700]              havoc tokenSymbol_s124;
[L4701]              havoc _to_s221;
[L4702]              havoc _value_s221;
[L4703]              havoc success_s221;
[L4704]              havoc _from_s261;
[L4705]              havoc _to_s261;
[L4706]              havoc _value_s261;
[L4707]              havoc success_s261;
[L4708]              havoc _spender_s289;
[L4709]              havoc _value_s289;
[L4710]              havoc success_s289;
[L4711]              havoc _spender_s327;
[L4712]              havoc _value_s327;
[L4713]              havoc _extraData_s327;
[L4714]              havoc success_s327;
[L4715]              havoc _value_s363;
[L4716]              havoc success_s363;
[L4717]              havoc _from_s418;
[L4718]              havoc _value_s418;
[L4719]              havoc success_s418;
[L4720]              havoc __ret_0_sellPrice;
[L4721]              havoc __ret_0_buyPrice;
[L4722]              havoc arg665_s0;
[L4723]              havoc __ret_0_frozenAccount;
[L4724]              havoc initialSupply_s452;
[L4725]              havoc tokenName_s452;
[L4726]              havoc tokenSymbol_s452;
[L4727]              havoc target_s560;
[L4728]              havoc mintedAmount_s560;
[L4729]              havoc target_s581;
[L4730]              havoc freeze_s581;
[L4731]              havoc newSellPrice_s599;
[L4732]              havoc newBuyPrice_s599;
[L4733]              havoc amount_s659;
[L4734]              havoc tmpNow;
[L4735]              havoc gas;
[L4736]              assume gas > 4000000 && gas <= 8000000;
[L4737]              tmpNow := now;
[L4738]              havoc now;
[L4739]              assume now > tmpNow;
[L4740]              assume msgsender_MSG != null;
[L4741]              assume DType[msgsender_MSG] != owned;
[L4742]              assume DType[msgsender_MSG] != tokenRecipient;
[L4743]              assume DType[msgsender_MSG] != TokenERC20;
[L4744]              assume DType[msgsender_MSG] != NOL;
[L4745]              Alloc[msgsender_MSG] := true;
[L4746]  COND TRUE   choice == 22
[L4747]              gas := gas - 21000;
[L4748]  COND TRUE   gas >= 0
[L4749]              assume msgvalue_MSG == 0;
[L4750]  CALL        call __ret_0_owner := owner_owned(this, msgsender_MSG, msgvalue_MSG);
[L203]               havoc __exception;
[L204]               revert := false;
[L205]   COND FALSE  !(__exception)
[L232]   CALL        call __ret_0_ := owner_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2533]              __ret_0_ := owner_owned[this];
[L232]   RET         call __ret_0_ := owner_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L233]               assume !revert && gas >= 0;
[L4750]  RET         call __ret_0_owner := owner_owned(this, msgsender_MSG, msgvalue_MSG);
[L4909]  RET         call CorralChoice_NOL(this);

[2020-11-25 02:13:53,014 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:13:53,015 INFO  L82        PathProgramCache]: Analyzing trace with hash -1040551875, now seen corresponding path program 2 times
[2020-11-25 02:13:53,015 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:13:53,024 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:13:53,034 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:13:53,053 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:13:53,053 INFO  L82        PathProgramCache]: Analyzing trace with hash -1363465638, now seen corresponding path program 1 times
[2020-11-25 02:13:53,054 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:13:53,058 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:13:53,062 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:13:53,071 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:13:53,072 INFO  L82        PathProgramCache]: Analyzing trace with hash -2006342250, now seen corresponding path program 1 times
[2020-11-25 02:13:53,072 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:13:53,083 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:13:53,096 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 11 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.002s total
Resizing node table from 37 to 73
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 883 to 1759
Garbage collection #1: 71 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 71 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.001s / 0.003s total
Resizing node table from 2179 to 4357
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 619 to 1237
[2020-11-25 02:13:53,444 WARN  L188               SmtUtils]: Spent 126.00 ms on a formula simplification that was a NOOP. DAG size: 293
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.001s / 0.003s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.001s / 0.004s total
Resizing node table from 3967 to 7933
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 3019 to 6037
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 787 to 1571
[2020-11-25 02:13:53,645 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
[2020-11-25 02:13:53,807 WARN  L188               SmtUtils]: Spent 117.00 ms on a formula simplification that was a NOOP. DAG size: 116
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #5: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 101 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 101 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #5: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
[2020-11-25 02:13:54,471 WARN  L188               SmtUtils]: Spent 154.00 ms on a formula simplification. DAG size of input: 189 DAG size of output: 180
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #6: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #7: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
[2020-11-25 02:13:54,638 WARN  L188               SmtUtils]: Spent 153.00 ms on a formula simplification. DAG size of input: 135 DAG size of output: 129
[2020-11-25 02:13:54,844 WARN  L188               SmtUtils]: Spent 204.00 ms on a formula simplification that was a NOOP. DAG size: 299
Garbage collection #1: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #2: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #3: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #4: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #5: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #6: 3517 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3517 to 7027
[2020-11-25 02:13:55,667 WARN  L188               SmtUtils]: Spent 812.00 ms on a formula simplification. DAG size of input: 247 DAG size of output: 247
[2020-11-25 02:13:56,725 WARN  L188               SmtUtils]: Spent 1.06 s on a formula simplification. DAG size of input: 313 DAG size of output: 283
Garbage collection #1: 101 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 101 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
Garbage collection #7: 6271 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6271 to 12541
Garbage collection #8: 12541 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 12541 to 25073
Garbage collection #1: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #6: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #7: 3517 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 3517 to 7027
Garbage collection #8: 7027 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 7027 to 14051
[2020-11-25 02:13:57,033 WARN  L188               SmtUtils]: Spent 286.00 ms on a formula simplification. DAG size of input: 176 DAG size of output: 170
[2020-11-25 02:13:57,368 WARN  L188               SmtUtils]: Spent 333.00 ms on a formula simplification that was a NOOP. DAG size: 359
Garbage collection #1: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #2: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #3: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #4: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #5: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
Garbage collection #6: 4357 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4357 to 8713
Garbage collection #7: 8713 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8713 to 17419
[2020-11-25 02:13:58,097 WARN  L188               SmtUtils]: Spent 721.00 ms on a formula simplification. DAG size of input: 290 DAG size of output: 290
[2020-11-25 02:13:59,494 WARN  L188               SmtUtils]: Spent 1.39 s on a formula simplification. DAG size of input: 513 DAG size of output: 504
Garbage collection #1: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #2: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #3: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #4: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #5: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #6: 6037 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6037 to 12073
Garbage collection #7: 12073 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 12073 to 24137
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #6: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
[2020-11-25 02:14:00,382 WARN  L188               SmtUtils]: Spent 866.00 ms on a formula simplification. DAG size of input: 253 DAG size of output: 230
[2020-11-25 02:14:00,753 WARN  L188               SmtUtils]: Spent 353.00 ms on a formula simplification that was a NOOP. DAG size: 349
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #7: 7933 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7933 to 15859
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #6: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
Garbage collection #7: 4943 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4943 to 9883
Garbage collection #8: 9883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9883 to 19763
[2020-11-25 02:14:02,850 WARN  L188               SmtUtils]: Spent 2.07 s on a formula simplification. DAG size of input: 281 DAG size of output: 242
[2020-11-25 02:14:04,149 WARN  L188               SmtUtils]: Spent 1.30 s on a formula simplification. DAG size of input: 363 DAG size of output: 362
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #7: 7933 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7933 to 15859
Garbage collection #8: 15859 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 15859 to 31699
Garbage collection #9: 31699 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31699 to 63397
[2020-11-25 02:14:05,602 WARN  L188               SmtUtils]: Spent 1.44 s on a formula simplification. DAG size of input: 374 DAG size of output: 346
[2020-11-25 02:14:05,613 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:14:05,627 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:14:05,635 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 02:14:05 BasicIcfg
[2020-11-25 02:14:05,635 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 02:14:05,636 INFO  L168              Benchmark]: Toolchain (without parser) took 29863.12 ms. Allocated memory was 1.0 GB in the beginning and 2.6 GB in the end (delta: 1.5 GB). Free memory was 935.2 MB in the beginning and 1.3 GB in the end (delta: -372.8 MB). Peak memory consumption was 1.6 GB. Max. memory is 15.3 GB.
[2020-11-25 02:14:05,636 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.17 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 02:14:05,636 INFO  L168              Benchmark]: Boogie Preprocessor took 110.66 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 919.1 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
[2020-11-25 02:14:05,637 INFO  L168              Benchmark]: UtopiaSpecLang took 70.79 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 908.4 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 02:14:05,637 INFO  L168              Benchmark]: Boogie Printer took 19.34 ms. Allocated memory is still 1.0 GB. Free memory is still 908.4 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 02:14:05,637 INFO  L168              Benchmark]: RCFGBuilder took 835.63 ms. Allocated memory is still 1.0 GB. Free memory was 908.4 MB in the beginning and 784.9 MB in the end (delta: 123.5 MB). Peak memory consumption was 123.5 MB. Max. memory is 15.3 GB.
[2020-11-25 02:14:05,638 INFO  L168              Benchmark]: UtopiaLTL2Aut took 41.89 ms. Allocated memory is still 1.0 GB. Free memory was 784.9 MB in the beginning and 781.3 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
[2020-11-25 02:14:05,639 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1317.76 ms. Allocated memory was 1.0 GB in the beginning and 1.3 GB in the end (delta: 235.4 MB). Free memory was 781.3 MB in the beginning and 986.2 MB in the end (delta: -204.9 MB). Peak memory consumption was 186.7 MB. Max. memory is 15.3 GB.
[2020-11-25 02:14:05,639 INFO  L168              Benchmark]: BlockEncodingV2 took 140.71 ms. Allocated memory is still 1.3 GB. Free memory was 986.2 MB in the beginning and 917.8 MB in the end (delta: 68.4 MB). Peak memory consumption was 68.4 MB. Max. memory is 15.3 GB.
[2020-11-25 02:14:05,640 INFO  L168              Benchmark]: BuchiAutomizer took 27323.23 ms. Allocated memory was 1.3 GB in the beginning and 2.6 GB in the end (delta: 1.3 GB). Free memory was 917.8 MB in the beginning and 1.3 GB in the end (delta: -390.2 MB). Peak memory consumption was 1.3 GB. Max. memory is 15.3 GB.
[2020-11-25 02:14:05,643 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    5484 locations, 9672 edges
  - StatisticsResult: Encoded RCFG
    5428 locations, 9521 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.17 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 110.66 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 919.1 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 70.79 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 908.4 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 19.34 ms. Allocated memory is still 1.0 GB. Free memory is still 908.4 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * RCFGBuilder took 835.63 ms. Allocated memory is still 1.0 GB. Free memory was 908.4 MB in the beginning and 784.9 MB in the end (delta: 123.5 MB). Peak memory consumption was 123.5 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 41.89 ms. Allocated memory is still 1.0 GB. Free memory was 784.9 MB in the beginning and 781.3 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1317.76 ms. Allocated memory was 1.0 GB in the beginning and 1.3 GB in the end (delta: 235.4 MB). Free memory was 781.3 MB in the beginning and 986.2 MB in the end (delta: -204.9 MB). Peak memory consumption was 186.7 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 140.71 ms. Allocated memory is still 1.3 GB. Free memory was 986.2 MB in the beginning and 917.8 MB in the end (delta: 68.4 MB). Peak memory consumption was 68.4 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 27323.23 ms. Allocated memory was 1.3 GB in the beginning and 2.6 GB in the end (delta: 1.3 GB). Free memory was 917.8 MB in the beginning and 1.3 GB in the end (delta: -390.2 MB). Peak memory consumption was 1.3 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    2321 locations, 3071 edges
  - StatisticsResult: BuchiProgram size
    5484 locations, 9672 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 6 terminating modules (6 trivial, 0 deterministic, 0 nondeterministic) and one nonterminating remainder module.6 modules have a trivial ranking function, the largest among these consists of 24 locations. The remainder module has 5767 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 27.2s and 7 iterations.  TraceHistogramMax:1. Analysis of lassos took 14.0s. Construction of modules took 10.2s. BÃ¼chi inclusion checks took 2.1s. Highest rank in rank-based complementation 0. Minimization of det autom 6. Minimization of nondet autom 0. Automata minimization 0.3s AutomataMinimizationTime, 6 MinimizatonAttempts, 1857 StatesRemovedByMinimization, 5 NontrivialMinimizations. Non-live state removal took 0.2s Buchi closure took 0.0s. Biggest automaton had 5767 states and ocurred in iteration 6.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 32693 SDtfs, 24186 SDslu, 77553 SDs, 0 SdLazy, 71552 SolverSat, 3873 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 10.2s Time	LassoAnalysisResults: nont1 unkn0 SFLI1 SFLT0 conc0 concLT0 SILN0 SILU5 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - TransactionCounterexample: Violation of LTL property LTL
    Found an infinite, lasso-shaped execution that violates the LTL property LTL.
Stem:
address(1234253583) = (new NOL)({from : 1234253577, initialSupply : 1234253579, tokenName : 1234253581, tokenSymbol : 1234253585});
[L1205]              havoc __exception;
[L1206]              revert := false;
[L1207]  COND FALSE  !(__exception)
[L1234]  CALL        call NOL_NOL__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L3040]  CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2501]  CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2484]              assume msgsender_MSG != null;
[L2485]              Balance[this] := 0;
[L2486]              owner_owned[this] := null;
[L2488]              owner_owned[this] := msgsender_MSG;
[L2501]  RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2502]  COND FALSE  !(revert)
[L3040]  RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L3041]  COND FALSE  !(revert)
[L3044]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L2629]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s124, tokenName_s124, tokenSymbol_s124);
[L2597]              assume msgsender_MSG != null;
[L2598]              Balance[this] := 0;
[L2599]              name_TokenERC20[this] := 1234253568;
[L2600]              symbol_TokenERC20[this] := 1234253568;
[L2601]              decimals_TokenERC20[this] := 18;
[L2602]              totalSupply_TokenERC20[this] := 0;
[L2603]              balanceOf_TokenERC20[this] := zeroRefintArr();
[L2604]              sum_balanceOf0[this] := 0;
[L2605]              allowance_TokenERC20[this] := zeroRefRefintArr();
[L2606]              sum_allowance1[this] := 0;
[L2608]              __var_1 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2609]              totalSupply_TokenERC20[this] := nonlinearMul(initialSupply_s124, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2610]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][msgsender_MSG];
[L2611]              balanceOf_TokenERC20[this][msgsender_MSG] := totalSupply_TokenERC20[this];
[L2612]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][msgsender_MSG];
[L2613]              name_TokenERC20[this] := tokenName_s124;
[L2614]              symbol_TokenERC20[this] := tokenSymbol_s124;
[L2629]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s124, tokenName_s124, tokenSymbol_s124);
[L2630]  COND FALSE  !(revert)
[L3044]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L3045]  COND FALSE  !(revert)
[L3048]  CALL        call NOL_NOL_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L3014]              assume msgsender_MSG != null;
[L3015]              Balance[this] := 0;
[L3016]              sellPrice_NOL[this] := 0;
[L3017]              buyPrice_NOL[this] := 0;
[L3018]              frozenAccount_NOL[this] := zeroRefboolArr();
[L3048]  RET         call NOL_NOL_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L3049]  COND FALSE  !(revert)
[L1234]  RET         call NOL_NOL__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L1235]              assume !revert && gas >= 0;
[L4905]  RET         call NOL_NOL(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
TokenERC20(1234253583).transferFrom~address~address~uint256.gas(3979002)({from : 1234253577, _from : 0, _to : 0, _value : 0});
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != _from_s261 || p2 != msgsender_MSG) && _from_s261 == _to_s261) && _value_s261 <= balanceOf_TokenERC20[this][_from_s261]) && _value_s261 <= allowance_TokenERC20[this][_from_s261][msgsender_MSG]) && _value_s261 >= 0) && _value_s261 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s261] >= 0) && balanceOf_TokenERC20[this][_to_s261] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_from_s261] >= 0) && balanceOf_TokenERC20[this][_from_s261] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_TokenERC20[this][_from_s261][msgsender_MSG] >= 0) && allowance_TokenERC20[this][_from_s261][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_TokenERC200 := true;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L490]               havoc __exception;
[L491]               revert := false;
[L492]   COND TRUE   __exception
[L493]               __tmp__Balance := Balance;
[L494]               __tmp__DType := DType;
[L495]               __tmp__Alloc := Alloc;
[L496]               __tmp__balance_ADDR := balance_ADDR;
[L497]               __tmp__M_Ref_int := M_Ref_int;
[L498]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L499]               __tmp__alloc_allowance_TokenERC20_lvl0 := alloc_allowance_TokenERC20_lvl0;
[L500]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L501]               __tmp__sum_allowance1 := sum_allowance1;
[L502]               __tmp__M_Ref_bool := M_Ref_bool;
[L503]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L504]               __tmp__Length := Length;
[L505]               __tmp__now := now;
[L506]               __tmp__owner_owned := owner_owned;
[L507]               __tmp__name_TokenERC20 := name_TokenERC20;
[L508]               __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L509]               __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L510]               __tmp__totalSupply_TokenERC20 := totalSupply_TokenERC20;
[L511]               __tmp__balanceOf_TokenERC20 := balanceOf_TokenERC20;
[L512]               __tmp__allowance_TokenERC20 := allowance_TokenERC20;
[L513]               __tmp__sellPrice_NOL := sellPrice_NOL;
[L514]               __tmp__buyPrice_NOL := buyPrice_NOL;
[L515]               __tmp__frozenAccount_NOL := frozenAccount_NOL;
[L516]   CALL        call success_s261 := transferFrom~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _from_s261, _to_s261, _value_s261);
[L2729]  COND FALSE  !(!(_value_s261 <= __tmp__allowance_TokenERC20[this][_from_s261][msgsender_MSG]))
[L2733]              __tmp__sum_allowance1[_from_s261] := __tmp__sum_allowance1[_from_s261] - __tmp__allowance_TokenERC20[this][_from_s261][msgsender_MSG];
[L2734]              __tmp__allowance_TokenERC20[this][_from_s261][msgsender_MSG] := (__tmp__allowance_TokenERC20[this][_from_s261][msgsender_MSG] - _value_s261) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2735]              __tmp__sum_allowance1[_from_s261] := __tmp__sum_allowance1[_from_s261] + __tmp__allowance_TokenERC20[this][_from_s261][msgsender_MSG];
[L2736]  COND TRUE   __tmp__DType[this] == NOL
[L2737]  CALL        call _transfer~address~address~uint256_NOL__fail(this, msgsender_MSG, msgvalue_MSG, _from_s261, _to_s261, _value_s261);
[L3057]              __var_6 := null;
[L3058]  COND TRUE   !(_to_s522 != null)
[L3059]              revert := true;
[L2737]  RET         call _transfer~address~address~uint256_NOL__fail(this, msgsender_MSG, msgvalue_MSG, _from_s261, _to_s261, _value_s261);
[L2738]  COND TRUE   revert
[L516]   RET         call success_s261 := transferFrom~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _from_s261, _to_s261, _value_s261);
[L517]               assume revert || gas < 0;
[L4806]  RET         call success_s261 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s261, _to_s261, _value_s261);

Loop:
owned(1234253583).owner.gas(3979001)({from : 1234253570});
[L203]               havoc __exception;
[L204]               revert := false;
[L205]   COND FALSE  !(__exception)
[L232]   CALL        call __ret_0_ := owner_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2533]              __ret_0_ := owner_owned[this];
[L232]   RET         call __ret_0_ := owner_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L233]               assume !revert && gas >= 0;
[L4750]  RET         call __ret_0_owner := owner_owned(this, msgsender_MSG, msgvalue_MSG);

End of lasso representation.
RESULT: Ultimate could not prove your program: Toolchain returned no result.
Received shutdown request...
