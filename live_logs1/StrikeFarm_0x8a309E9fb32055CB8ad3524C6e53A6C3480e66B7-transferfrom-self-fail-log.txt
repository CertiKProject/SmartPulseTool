This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 05:54:23,331 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 05:54:23,333 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 05:54:23,344 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 05:54:23,344 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 05:54:23,345 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 05:54:23,346 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 05:54:23,348 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 05:54:23,350 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 05:54:23,350 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 05:54:23,351 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 05:54:23,351 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 05:54:23,352 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 05:54:23,353 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 05:54:23,354 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 05:54:23,354 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 05:54:23,355 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 05:54:23,356 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 05:54:23,358 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 05:54:23,359 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 05:54:23,360 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 05:54:23,361 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 05:54:23,363 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 05:54:23,363 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 05:54:23,363 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 05:54:23,363 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 05:54:23,364 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 05:54:23,364 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 05:54:23,365 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 05:54:23,365 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 05:54:23,365 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 05:54:23,366 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 05:54:23,366 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 05:54:23,367 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 05:54:23,368 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 05:54:23,368 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 05:54:23,368 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 05:54:23,368 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 05:54:23,369 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 05:54:23,369 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 05:54:23,370 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 05:54:23,370 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 05:54:23,378 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 05:54:23,378 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 05:54:23,379 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 05:54:23,379 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 05:54:23,380 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 05:54:23,380 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 05:54:23,380 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 05:54:23,380 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 05:54:23,380 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 05:54:23,380 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 05:54:23,380 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 05:54:23,380 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 05:54:23,380 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 05:54:23,381 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 05:54:23,381 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 05:54:23,381 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 05:54:23,381 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 05:54:23,381 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 05:54:23,381 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 05:54:23,381 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 05:54:23,381 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 05:54:23,381 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 05:54:23,381 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 05:54:23,382 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 05:54:23,382 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 05:54:23,382 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 05:54:23,404 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 05:54:23,418 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 05:54:23,422 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 05:54:23,423 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 05:54:23,424 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 05:54:23,424 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/StrikeFarm_0x8a309E9fb32055CB8ad3524C6e53A6C3480e66B7_transferfrom-self-fail.bpl
[2020-11-25 05:54:23,425 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/StrikeFarm_0x8a309E9fb32055CB8ad3524C6e53A6C3480e66B7_transferfrom-self-fail.bpl'
[2020-11-25 05:54:23,504 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 05:54:23,506 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 05:54:23,506 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 05:54:23,506 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 05:54:23,506 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 05:54:23,523 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "StrikeFarm_0x8a309E9fb32055CB8ad3524C6e53A6C3480e66B7_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:54:23" (1/1) ...
[2020-11-25 05:54:23,525 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "StrikeFarm_0x8a309E9fb32055CB8ad3524C6e53A6C3480e66B7_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:54:23" (1/1) ...
[2020-11-25 05:54:23,556 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "StrikeFarm_0x8a309E9fb32055CB8ad3524C6e53A6C3480e66B7_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:54:23" (1/1) ...
[2020-11-25 05:54:23,557 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "StrikeFarm_0x8a309E9fb32055CB8ad3524C6e53A6C3480e66B7_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:54:23" (1/1) ...
[2020-11-25 05:54:23,582 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "StrikeFarm_0x8a309E9fb32055CB8ad3524C6e53A6C3480e66B7_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:54:23" (1/1) ...
[2020-11-25 05:54:23,593 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "StrikeFarm_0x8a309E9fb32055CB8ad3524C6e53A6C3480e66B7_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:54:23" (1/1) ...
[2020-11-25 05:54:23,600 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "StrikeFarm_0x8a309E9fb32055CB8ad3524C6e53A6C3480e66B7_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:54:23" (1/1) ...
[2020-11-25 05:54:23,609 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 05:54:23,610 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 05:54:23,610 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 05:54:23,612 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 05:54:23,616 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "StrikeFarm_0x8a309E9fb32055CB8ad3524C6e53A6C3480e66B7_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:54:23" (1/1) ...
[2020-11-25 05:54:23,634 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(ERC20.transferFrom(from, to, value), from == to && (value > _balances_ERC20[this][from] || value > _allowances_ERC20[this][from][msg.sender]) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowances_ERC20[this][from][msg.sender] >= 0 && _allowances_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20.transferFrom)))
[2020-11-25 05:54:23,640 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(ERC20.transferFrom(from, to, value), from == to && (value > _balances_ERC20[this][from] || value > _allowances_ERC20[this][from][msg.sender]) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowances_ERC20[this][from][msg.sender] >= 0 && _allowances_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20.transferFrom)))
[2020-11-25 05:54:23,647 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(ERC20.transferFrom(from, to, value), from == to && (value > _balances_ERC20[this][from] || value > _allowances_ERC20[this][from][msg.sender]) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowances_ERC20[this][from][msg.sender] >= 0 && _allowances_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20.transferFrom)))
[2020-11-25 05:54:23,654 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( sender_s211==recipient_s211 && ( amount_s211>_balances_ERC20[this][sender_s211] || amount_s211>_allowances_ERC20[this][sender_s211][msg.sender] ) ) && amount_s211>=0 ) && amount_s211<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][recipient_s211]>=0 ) && _balances_ERC20[this][recipient_s211]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][sender_s211]>=0 ) && _balances_ERC20[this][sender_s211]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _allowances_ERC20[this][sender_s211][msg.sender]>=0 ) && _allowances_ERC20[this][sender_s211][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[sender_s211,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>],IdentifierExpression[recipient_s211,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]],BinaryExpression[LOGICOR,BinaryExpression[COMPGT,IdentifierExpression[amount_s211,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[sender_s211,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]]],BinaryExpression[COMPGT,IdentifierExpression[amount_s211,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>],ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[sender_s211,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]]]]],BinaryExpression[COMPGEQ,IdentifierExpression[amount_s211,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[amount_s211,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[recipient_s211,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[recipient_s211,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[sender_s211,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[sender_s211,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[sender_s211,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[sender_s211,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 05:54:23,660 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(ERC20.transferFrom(from, to, value), from == to && (value > _balances_ERC20[this][from] || value > _allowances_ERC20[this][from][msg.sender]) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowances_ERC20[this][from][msg.sender] >= 0 && _allowances_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20.transferFrom)))
[2020-11-25 05:54:23,660 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transferFrom_ERC200) ==> ( <>AP(fail_transferFrom_ERC200) ) ) )
Executed UtopiaSpecLang
[2020-11-25 05:54:23,669 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 05:54:23 PropertyContainer
[2020-11-25 05:54:23,669 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 05:54:23,669 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 05:54:23,670 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 05:54:23,670 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 05:54:23,670 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "StrikeFarm_0x8a309E9fb32055CB8ad3524C6e53A6C3480e66B7_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:54:23" (1/2) ...
[2020-11-25 05:54:23,671 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 05:54:23,671 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 05:54:23,684 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 05:54:23" (2/2) ...
[2020-11-25 05:54:23,685 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 05:54:23,685 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 05:54:23,685 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 05:54:23,685 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 05:54:23,686 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "StrikeFarm_0x8a309E9fb32055CB8ad3524C6e53A6C3480e66B7_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:54:23" (1/2) ...
[2020-11-25 05:54:23,738 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 05:54:23,738 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 05:54:23,738 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-25 05:54:23,738 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-25 05:54:23,738 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-25 05:54:23,738 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-25 05:54:23,739 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-25 05:54:23,739 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-25 05:54:23,739 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-25 05:54:23,739 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-25 05:54:23,739 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context_NoBaseCtor__success
[2020-11-25 05:54:23,739 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context
[2020-11-25 05:54:23,739 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context
[2020-11-25 05:54:23,739 INFO  L130     BoogieDeclarations]: Found specification of procedure _msgSender_Context__success
[2020-11-25 05:54:23,739 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 05:54:23,739 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 05:54:23,739 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 05:54:23,740 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20
[2020-11-25 05:54:23,740 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20
[2020-11-25 05:54:23,740 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20
[2020-11-25 05:54:23,740 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20
[2020-11-25 05:54:23,740 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20
[2020-11-25 05:54:23,740 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20
[2020-11-25 05:54:23,740 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 05:54:23,740 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20
[2020-11-25 05:54:23,740 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 05:54:23,740 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20
[2020-11-25 05:54:23,740 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 05:54:23,741 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 05:54:23,741 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 05:54:23,741 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 05:54:23,741 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 05:54:23,741 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 05:54:23,741 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 05:54:23,741 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__success
[2020-11-25 05:54:23,741 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__success
[2020-11-25 05:54:23,741 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 05:54:23,741 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 05:54:23,741 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 05:54:23,741 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 05:54:23,741 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed
[2020-11-25 05:54:23,742 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed
[2020-11-25 05:54:23,742 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed
[2020-11-25 05:54:23,742 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed
[2020-11-25 05:54:23,742 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed
[2020-11-25 05:54:23,742 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed
[2020-11-25 05:54:23,742 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 05:54:23,742 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 05:54:23,742 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 05:54:23,742 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 05:54:23,742 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 05:54:23,742 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256~string_SafeMath__success
[2020-11-25 05:54:23,742 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 05:54:23,742 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 05:54:23,743 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256~string_SafeMath__success
[2020-11-25 05:54:23,743 INFO  L130     BoogieDeclarations]: Found specification of procedure StrikeFarm_StrikeFarm_NoBaseCtor__success
[2020-11-25 05:54:23,743 INFO  L130     BoogieDeclarations]: Found specification of procedure StrikeFarm_StrikeFarm
[2020-11-25 05:54:23,743 INFO  L138     BoogieDeclarations]: Found implementation of procedure StrikeFarm_StrikeFarm
[2020-11-25 05:54:23,743 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 05:54:23,743 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 05:54:23,743 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 05:54:23,743 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-25 05:54:23,743 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-25 05:54:23,743 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Context
[2020-11-25 05:54:23,743 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Context
[2020-11-25 05:54:23,743 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 05:54:23,743 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 05:54:23,744 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Detailed
[2020-11-25 05:54:23,744 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Detailed
[2020-11-25 05:54:23,744 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 05:54:23,744 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 05:54:23,744 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_StrikeFarm
[2020-11-25 05:54:23,744 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 05:54:23,744 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 05:54:23,744 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 05:54:23,744 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-25 05:54:23,744 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-25 05:54:23,744 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context_NoBaseCtor__fail
[2020-11-25 05:54:23,744 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context__success
[2020-11-25 05:54:23,745 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context__fail
[2020-11-25 05:54:23,745 INFO  L130     BoogieDeclarations]: Found specification of procedure _msgSender_Context__fail
[2020-11-25 05:54:23,745 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 05:54:23,745 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 05:54:23,745 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 05:54:23,745 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__success
[2020-11-25 05:54:23,745 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__fail
[2020-11-25 05:54:23,745 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__success
[2020-11-25 05:54:23,745 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__fail
[2020-11-25 05:54:23,745 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__success
[2020-11-25 05:54:23,746 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 05:54:23,746 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__success
[2020-11-25 05:54:23,746 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__fail
[2020-11-25 05:54:23,746 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__success
[2020-11-25 05:54:23,746 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__fail
[2020-11-25 05:54:23,746 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 05:54:23,746 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 05:54:23,746 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 05:54:23,746 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 05:54:23,746 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 05:54:23,747 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 05:54:23,747 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 05:54:23,747 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 05:54:23,747 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 05:54:23,747 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 05:54:23,747 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 05:54:23,747 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 05:54:23,747 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 05:54:23,747 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__success
[2020-11-25 05:54:23,747 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__fail
[2020-11-25 05:54:23,748 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__success
[2020-11-25 05:54:23,748 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__fail
[2020-11-25 05:54:23,748 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__success
[2020-11-25 05:54:23,748 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__fail
[2020-11-25 05:54:23,748 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 05:54:23,748 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 05:54:23,748 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 05:54:23,748 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 05:54:23,749 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 05:54:23,749 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256~string_SafeMath__fail
[2020-11-25 05:54:23,749 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 05:54:23,749 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 05:54:23,749 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256~string_SafeMath__fail
[2020-11-25 05:54:23,749 INFO  L130     BoogieDeclarations]: Found specification of procedure StrikeFarm_StrikeFarm_NoBaseCtor__fail
[2020-11-25 05:54:23,749 INFO  L130     BoogieDeclarations]: Found specification of procedure StrikeFarm_StrikeFarm__success
[2020-11-25 05:54:23,749 INFO  L130     BoogieDeclarations]: Found specification of procedure StrikeFarm_StrikeFarm__fail
[2020-11-25 05:54:23,749 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 05:54:23,749 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 05:54:23,750 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 05:54:23,750 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 05:54:23,750 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 05:54:23,750 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 05:54:23,750 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 05:54:23,750 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-25 05:54:23,750 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-25 05:54:23,750 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context_NoBaseCtor__fail
[2020-11-25 05:54:23,750 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context_NoBaseCtor__success
[2020-11-25 05:54:23,751 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context__fail
[2020-11-25 05:54:23,751 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context__success
[2020-11-25 05:54:23,751 INFO  L138     BoogieDeclarations]: Found implementation of procedure _msgSender_Context__fail
[2020-11-25 05:54:23,751 INFO  L138     BoogieDeclarations]: Found implementation of procedure _msgSender_Context__success
[2020-11-25 05:54:23,751 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 05:54:23,751 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 05:54:23,751 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 05:54:23,751 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 05:54:23,751 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__fail
[2020-11-25 05:54:23,752 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__success
[2020-11-25 05:54:23,752 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__fail
[2020-11-25 05:54:23,752 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__success
[2020-11-25 05:54:23,752 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 05:54:23,752 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__success
[2020-11-25 05:54:23,752 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__fail
[2020-11-25 05:54:23,752 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__success
[2020-11-25 05:54:23,752 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__fail
[2020-11-25 05:54:23,752 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__success
[2020-11-25 05:54:23,752 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 05:54:23,753 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 05:54:23,753 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 05:54:23,753 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 05:54:23,753 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 05:54:23,753 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 05:54:23,753 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 05:54:23,753 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 05:54:23,753 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 05:54:23,753 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__success
[2020-11-25 05:54:23,753 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 05:54:23,754 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__success
[2020-11-25 05:54:23,754 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 05:54:23,754 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 05:54:23,754 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 05:54:23,754 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 05:54:23,754 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 05:54:23,754 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 05:54:23,754 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__fail
[2020-11-25 05:54:23,754 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__success
[2020-11-25 05:54:23,755 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__fail
[2020-11-25 05:54:23,755 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__success
[2020-11-25 05:54:23,755 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__fail
[2020-11-25 05:54:23,755 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__success
[2020-11-25 05:54:23,755 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 05:54:23,755 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 05:54:23,755 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 05:54:23,755 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 05:54:23,755 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 05:54:23,755 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 05:54:23,755 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 05:54:23,755 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 05:54:23,756 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256~string_SafeMath__fail
[2020-11-25 05:54:23,756 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256~string_SafeMath__success
[2020-11-25 05:54:23,756 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 05:54:23,756 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 05:54:23,756 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 05:54:23,756 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 05:54:23,756 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256~string_SafeMath__fail
[2020-11-25 05:54:23,756 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256~string_SafeMath__success
[2020-11-25 05:54:23,756 INFO  L138     BoogieDeclarations]: Found implementation of procedure StrikeFarm_StrikeFarm_NoBaseCtor__fail
[2020-11-25 05:54:23,756 INFO  L138     BoogieDeclarations]: Found implementation of procedure StrikeFarm_StrikeFarm_NoBaseCtor__success
[2020-11-25 05:54:23,756 INFO  L138     BoogieDeclarations]: Found implementation of procedure StrikeFarm_StrikeFarm__fail
[2020-11-25 05:54:23,757 INFO  L138     BoogieDeclarations]: Found implementation of procedure StrikeFarm_StrikeFarm__success
[2020-11-25 05:54:23,757 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 05:54:23,757 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 05:54:23,757 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 05:54:23,757 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 05:54:23,757 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 05:54:23,757 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 05:54:23,757 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-25 05:54:23,757 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-25 05:54:23,757 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Context
[2020-11-25 05:54:23,757 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Context
[2020-11-25 05:54:23,758 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 05:54:23,758 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 05:54:23,758 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Detailed
[2020-11-25 05:54:23,758 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Detailed
[2020-11-25 05:54:23,758 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 05:54:23,758 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 05:54:23,758 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_StrikeFarm
[2020-11-25 05:54:23,758 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 05:54:23,758 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 05:54:23,758 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 05:54:24,129 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 05:54:24,129 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 05:54:24,450 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 05:54:24,450 INFO  L286             CfgBuilder]: Removed 6 assue(true) statements.
[2020-11-25 05:54:24,452 INFO  L202        PluginConnector]: Adding new model StrikeFarm_0x8a309E9fb32055CB8ad3524C6e53A6C3480e66B7_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 05:54:24 BoogieIcfgContainer
[2020-11-25 05:54:24,452 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 05:54:23" (2/2) ...
[2020-11-25 05:54:24,453 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 05:54:24,453 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@523a792d and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 05:54:24, skipping insertion in model container
[2020-11-25 05:54:24,453 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 05:54:24,453 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 05:54:24,453 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 05:54:24,455 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 05:54:24,455 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "StrikeFarm_0x8a309E9fb32055CB8ad3524C6e53A6C3480e66B7_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:54:23" (1/3) ...
[2020-11-25 05:54:24,455 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@11acbf5e and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 05:54:24, skipping insertion in model container
[2020-11-25 05:54:24,456 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 05:54:23" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 05:54:24,496 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 05:54:24 NWAContainer
[2020-11-25 05:54:24,496 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 05:54:24,496 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 05:54:24,496 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 05:54:24,497 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 05:54:24,498 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "StrikeFarm_0x8a309E9fb32055CB8ad3524C6e53A6C3480e66B7_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 05:54:24" (3/4) ...
[2020-11-25 05:54:24,498 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@7925384c and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 05:54:24, skipping insertion in model container
[2020-11-25 05:54:24,499 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 05:54:24" (4/4) ...
[2020-11-25 05:54:24,502 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 05:54:24,506 INFO  L110   BuchiProductObserver]: Initial RCFG 1474 locations, 2075 edges
[2020-11-25 05:54:24,506 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 05:54:24,517 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 05:54:25,766 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 05:54:25,771 INFO  L110   BuchiProductObserver]: BuchiProgram size 3730 locations, 6779 edges
[2020-11-25 05:54:25,772 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 05:54:25 BoogieIcfgContainer
[2020-11-25 05:54:25,772 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 05:54:25,772 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 05:54:25,772 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 05:54:25,774 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 05:54:25,774 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 05:54:25" (1/1) ...
[2020-11-25 05:54:25,843 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_25 := div~uint256~uint256~string_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s626, b_s626, -1445521449);
[2020-11-25 05:54:25,846 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_25 := div~uint256~uint256~string_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, a_s626, b_s626, -1445521449);
[2020-11-25 05:54:25,858 INFO  L313           BlockEncoder]: Initial Icfg 3730 locations, 6779 edges
[2020-11-25 05:54:25,858 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 05:54:25,858 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 05:54:25,858 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 05:54:25,859 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 05:54:25,870 INFO  L70    emoveInfeasibleEdges]: Removed 150 edges and 15 locations because of local infeasibility
[2020-11-25 05:54:25,879 INFO  L70        RemoveSinkStates]: Removed 138 edges and 85 locations by removing sink states
[2020-11-25 05:54:25,891 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 05:54:25,895 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 05:54:25,898 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 05:54:25,899 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 05:54:25,903 INFO  L313           BlockEncoder]: Encoded RCFG 3610 locations, 6462 edges
[2020-11-25 05:54:25,904 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 05:54:25 BasicIcfg
[2020-11-25 05:54:25,904 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 05:54:25,904 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 05:54:25,904 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 05:54:25,906 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 05:54:25,906 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 05:54:25,906 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "StrikeFarm_0x8a309E9fb32055CB8ad3524C6e53A6C3480e66B7_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:54:23" (1/6) ...
[2020-11-25 05:54:25,908 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@745d0169 and model type StrikeFarm_0x8a309E9fb32055CB8ad3524C6e53A6C3480e66B7_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 05:54:25, skipping insertion in model container
[2020-11-25 05:54:25,908 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 05:54:25,908 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 05:54:23" (2/6) ...
[2020-11-25 05:54:25,908 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@745d0169 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 05:54:25, skipping insertion in model container
[2020-11-25 05:54:25,908 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 05:54:25,908 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "StrikeFarm_0x8a309E9fb32055CB8ad3524C6e53A6C3480e66B7_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 05:54:24" (3/6) ...
[2020-11-25 05:54:25,909 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@745d0169 and model type StrikeFarm_0x8a309E9fb32055CB8ad3524C6e53A6C3480e66B7_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 05:54:25, skipping insertion in model container
[2020-11-25 05:54:25,909 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 05:54:25,909 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 05:54:24" (4/6) ...
[2020-11-25 05:54:25,909 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@745d0169 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 05:54:25, skipping insertion in model container
[2020-11-25 05:54:25,909 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 05:54:25,909 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 05:54:25" (5/6) ...
[2020-11-25 05:54:25,909 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@745d0169 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 05:54:25, skipping insertion in model container
[2020-11-25 05:54:25,909 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 05:54:25,909 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 05:54:25" (6/6) ...
[2020-11-25 05:54:25,911 INFO  L404   chiAutomizerObserver]: Analyzing ICFG StrikeFarm_0x8a309E9fb32055CB8ad3524C6e53A6C3480e66B7_transferfrom-self-fail.bpl_BEv2
[2020-11-25 05:54:25,944 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 05:54:25,944 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 05:54:25,944 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 05:54:25,944 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 05:54:25,944 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 05:54:25,945 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 05:54:25,945 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 05:54:25,945 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 05:54:25,945 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 05:54:25,978 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3610 states.
[2020-11-25 05:54:26,029 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 05:54:26,029 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 05:54:26,029 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 05:54:26,038 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 05:54:26,038 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 05:54:26,038 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 05:54:26,039 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3610 states.
[2020-11-25 05:54:26,058 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 05:54:26,058 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 05:54:26,058 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 05:54:26,061 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 05:54:26,061 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC200 := false;
[L2]                 call_transferFrom_ERC200 := false;
[L2]     CALL        call main();
[L4108]              assume null == 0;
[L4109]  CALL        call this := FreshRefGenerator__success();
[L1523]              havoc newRef;
[L1524]              assume Alloc[newRef] == false;
[L1525]              Alloc[newRef] := true;
[L1526]              assume newRef != null;
[L4109]  RET         call this := FreshRefGenerator__success();
[L4110]              assume now >= 0;
[L4111]              assume DType[this] == StrikeFarm;
[L4112]              assume msgvalue_MSG == 0;
[L4113]              gas := gas - 53000;
[L4114]  CALL        call StrikeFarm_StrikeFarm(this, msgsender_MSG, msgvalue_MSG);
[L1001]              havoc __exception;
[L1002]              revert := false;
[L1003]  COND FALSE  !(__exception)
[L1025]  CALL        call StrikeFarm_StrikeFarm__success(this, msgsender_MSG, msgvalue_MSG);
[L2725]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L1587]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1572]              assume msgsender_MSG != null;
[L1573]              Balance[this] := 0;
[L1587]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1588]  COND FALSE  !(revert)
[L2725]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2726]  COND TRUE   revert
[L1025]  RET         call StrikeFarm_StrikeFarm__success(this, msgsender_MSG, msgvalue_MSG);
[L1026]              assume !revert && gas >= 0;
[L4114]  RET         call StrikeFarm_StrikeFarm(this, msgsender_MSG, msgvalue_MSG);
[L4115]              assume !revert && gas >= 0;

Loop:
[L4118]  CALL        call CorralChoice_StrikeFarm(this);
[L3984]              havoc msgsender_MSG;
[L3985]              havoc msgvalue_MSG;
[L3986]              havoc choice;
[L3987]              havoc __ret_0_totalSupply;
[L3988]              havoc account_s121;
[L3989]              havoc __ret_0_balanceOf;
[L3990]              havoc recipient_s140;
[L3991]              havoc amount_s140;
[L3992]              havoc __ret_0_transfer;
[L3993]              havoc owner_s156;
[L3994]              havoc spender_s156;
[L3995]              havoc __ret_0_allowance;
[L3996]              havoc spender_s175;
[L3997]              havoc amount_s175;
[L3998]              havoc __ret_0_approve;
[L3999]              havoc sender_s211;
[L4000]              havoc recipient_s211;
[L4001]              havoc amount_s211;
[L4002]              havoc __ret_0_transferFrom;
[L4003]              havoc spender_s238;
[L4004]              havoc addedValue_s238;
[L4005]              havoc __ret_0_increaseAllowance;
[L4006]              havoc spender_s266;
[L4007]              havoc subtractedValue_s266;
[L4008]              havoc __ret_0_decreaseAllowance;
[L4009]              havoc name_s483;
[L4010]              havoc symbol_s483;
[L4011]              havoc decimals_s483;
[L4012]              havoc __ret_0_name;
[L4013]              havoc __ret_0_symbol;
[L4014]              havoc __ret_0_decimals;
[L4015]              havoc tmpNow;
[L4016]              havoc gas;
[L4017]              assume gas > 4000000 && gas <= 8000000;
[L4018]              tmpNow := now;
[L4019]              havoc now;
[L4020]              assume now > tmpNow;
[L4021]              assume msgsender_MSG != null;
[L4022]              assume DType[msgsender_MSG] != IERC20;
[L4023]              assume DType[msgsender_MSG] != Context;
[L4024]              assume DType[msgsender_MSG] != ERC20;
[L4025]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4026]              assume DType[msgsender_MSG] != SafeMath;
[L4027]              assume DType[msgsender_MSG] != StrikeFarm;
[L4028]              Alloc[msgsender_MSG] := true;
[L4029]  COND TRUE   choice == 11
[L4030]              gas := gas - 21000;
[L4031]  COND FALSE  !(gas >= 0)
[L4118]  RET         call CorralChoice_StrikeFarm(this);

[2020-11-25 05:54:26,079 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 05:54:26,079 INFO  L82        PathProgramCache]: Analyzing trace with hash -1964900740, now seen corresponding path program 1 times
[2020-11-25 05:54:26,083 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 05:54:26,105 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 05:54:26,138 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 05:54:26,139 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 05:54:26,139 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 05:54:26,142 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 05:54:26,315 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 05:54:26,315 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 05:54:26,316 INFO  L87              Difference]: Start difference. First operand 3610 states. Second operand 3 states.
[2020-11-25 05:54:26,472 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 05:54:26,472 INFO  L93              Difference]: Finished difference Result 3116 states and 5095 transitions.
[2020-11-25 05:54:26,472 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 05:54:26,473 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3116 states and 5095 transitions.
[2020-11-25 05:54:26,495 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 05:54:26,532 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3116 states to 3116 states and 5095 transitions.
[2020-11-25 05:54:26,532 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 13
[2020-11-25 05:54:26,535 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 680
[2020-11-25 05:54:26,536 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3116 states and 5095 transitions.
[2020-11-25 05:54:26,547 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 05:54:26,547 INFO  L728         BuchiCegarLoop]: Abstraction has 3116 states and 5095 transitions.
[2020-11-25 05:54:26,562 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3116 states and 5095 transitions.
[2020-11-25 05:54:26,622 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3116 to 2701.
[2020-11-25 05:54:26,623 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2701 states.
[2020-11-25 05:54:26,630 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2701 states to 2701 states and 4384 transitions.
[2020-11-25 05:54:26,631 INFO  L751         BuchiCegarLoop]: Abstraction has 2701 states and 4384 transitions.
[2020-11-25 05:54:26,631 INFO  L631         BuchiCegarLoop]: Abstraction has 2701 states and 4384 transitions.
[2020-11-25 05:54:26,632 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 05:54:26,632 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2701 states and 4384 transitions.
[2020-11-25 05:54:26,640 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 05:54:26,640 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 05:54:26,640 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 05:54:26,642 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 05:54:26,642 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC200 := false;
[L2]                 call_transferFrom_ERC200 := false;
[L2]     CALL        call main();
[L4108]              assume null == 0;
[L4109]  CALL        call this := FreshRefGenerator__success();
[L1523]              havoc newRef;
[L1524]              assume Alloc[newRef] == false;
[L1525]              Alloc[newRef] := true;
[L1526]              assume newRef != null;
[L4109]  RET         call this := FreshRefGenerator__success();
[L4110]              assume now >= 0;
[L4111]              assume DType[this] == StrikeFarm;
[L4112]              assume msgvalue_MSG == 0;
[L4113]              gas := gas - 53000;
[L4114]  CALL        call StrikeFarm_StrikeFarm(this, msgsender_MSG, msgvalue_MSG);
[L1001]              havoc __exception;
[L1002]              revert := false;
[L1003]  COND FALSE  !(__exception)
[L1025]  CALL        call StrikeFarm_StrikeFarm__success(this, msgsender_MSG, msgvalue_MSG);
[L2725]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L1587]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1572]              assume msgsender_MSG != null;
[L1573]              Balance[this] := 0;
[L1587]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1588]  COND FALSE  !(revert)
[L2725]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2726]  COND FALSE  !(revert)
[L2729]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1555]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1540]              assume msgsender_MSG != null;
[L1541]              Balance[this] := 0;
[L1555]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1556]  COND FALSE  !(revert)
[L2729]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2730]  COND FALSE  !(revert)
[L2733]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1649]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L1587]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1572]              assume msgsender_MSG != null;
[L1573]              Balance[this] := 0;
[L1587]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1588]  COND FALSE  !(revert)
[L1649]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L1650]  COND FALSE  !(revert)
[L1653]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1555]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1540]              assume msgsender_MSG != null;
[L1541]              Balance[this] := 0;
[L1555]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1556]  COND FALSE  !(revert)
[L1653]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1654]  COND FALSE  !(revert)
[L1657]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1621]              assume msgsender_MSG != null;
[L1622]              Balance[this] := 0;
[L1623]              _balances_ERC20[this] := zeroRefintArr();
[L1624]              sum__balances0[this] := 0;
[L1625]              _allowances_ERC20[this] := zeroRefRefintArr();
[L1626]              sum__allowances1[this] := 0;
[L1627]              _totalSupply_ERC20[this] := 0;
[L1657]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1658]  COND FALSE  !(revert)
[L2733]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]  COND FALSE  !(revert)
[L2737]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 879309088, -1713371657, 18);
[L2413]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1555]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1540]              assume msgsender_MSG != null;
[L1541]              Balance[this] := 0;
[L1555]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1556]  COND FALSE  !(revert)
[L2413]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2414]  COND FALSE  !(revert)
[L2417]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s483, symbol_s483, decimals_s483);
[L2388]              assume msgsender_MSG != null;
[L2389]              Balance[this] := 0;
[L2390]              _name_ERC20Detailed[this] := -1368110498;
[L2391]              _symbol_ERC20Detailed[this] := -1368110498;
[L2392]              _decimals_ERC20Detailed[this] := 0;
[L2394]              _name_ERC20Detailed[this] := name_s483;
[L2395]              _symbol_ERC20Detailed[this] := symbol_s483;
[L2396]              _decimals_ERC20Detailed[this] := decimals_s483;
[L2417]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s483, symbol_s483, decimals_s483);
[L2418]  COND FALSE  !(revert)
[L2737]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 879309088, -1713371657, 18);
[L2738]  COND FALSE  !(revert)
[L2741]  CALL        call StrikeFarm_StrikeFarm_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2672]              assume msgsender_MSG != null;
[L2673]              Balance[this] := 0;
[L2674]              _total_StrikeFarm[this] := 11000;
[L2676]  COND TRUE   DType[this] == StrikeFarm
[L2677]  CALL        call __var_27 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L2455]              __ret_0_ := _decimals_ERC20Detailed[this];
[L2677]  RET         call __var_27 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L2678]  COND FALSE  !(revert)
[L2684]              __var_26 := __var_27 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2685]  COND TRUE   DType[this] == StrikeFarm
[L2686]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, nonlinearMul(_total_StrikeFarm[this], nonlinearPow(10, __var_27 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2263]              __var_16 := null;
[L2264]  COND TRUE   !(account_s366 != null)
[L2265]              revert := true;
[L2686]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, nonlinearMul(_total_StrikeFarm[this], nonlinearPow(10, __var_27 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2687]  COND TRUE   revert
[L2741]  RET         call StrikeFarm_StrikeFarm_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2742]  COND FALSE  !(revert)
[L1025]  RET         call StrikeFarm_StrikeFarm__success(this, msgsender_MSG, msgvalue_MSG);
[L1026]              assume !revert && gas >= 0;
[L4114]  RET         call StrikeFarm_StrikeFarm(this, msgsender_MSG, msgvalue_MSG);
[L4115]              assume !revert && gas >= 0;

Loop:
[L4118]  CALL        call CorralChoice_StrikeFarm(this);
[L3984]              havoc msgsender_MSG;
[L3985]              havoc msgvalue_MSG;
[L3986]              havoc choice;
[L3987]              havoc __ret_0_totalSupply;
[L3988]              havoc account_s121;
[L3989]              havoc __ret_0_balanceOf;
[L3990]              havoc recipient_s140;
[L3991]              havoc amount_s140;
[L3992]              havoc __ret_0_transfer;
[L3993]              havoc owner_s156;
[L3994]              havoc spender_s156;
[L3995]              havoc __ret_0_allowance;
[L3996]              havoc spender_s175;
[L3997]              havoc amount_s175;
[L3998]              havoc __ret_0_approve;
[L3999]              havoc sender_s211;
[L4000]              havoc recipient_s211;
[L4001]              havoc amount_s211;
[L4002]              havoc __ret_0_transferFrom;
[L4003]              havoc spender_s238;
[L4004]              havoc addedValue_s238;
[L4005]              havoc __ret_0_increaseAllowance;
[L4006]              havoc spender_s266;
[L4007]              havoc subtractedValue_s266;
[L4008]              havoc __ret_0_decreaseAllowance;
[L4009]              havoc name_s483;
[L4010]              havoc symbol_s483;
[L4011]              havoc decimals_s483;
[L4012]              havoc __ret_0_name;
[L4013]              havoc __ret_0_symbol;
[L4014]              havoc __ret_0_decimals;
[L4015]              havoc tmpNow;
[L4016]              havoc gas;
[L4017]              assume gas > 4000000 && gas <= 8000000;
[L4018]              tmpNow := now;
[L4019]              havoc now;
[L4020]              assume now > tmpNow;
[L4021]              assume msgsender_MSG != null;
[L4022]              assume DType[msgsender_MSG] != IERC20;
[L4023]              assume DType[msgsender_MSG] != Context;
[L4024]              assume DType[msgsender_MSG] != ERC20;
[L4025]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4026]              assume DType[msgsender_MSG] != SafeMath;
[L4027]              assume DType[msgsender_MSG] != StrikeFarm;
[L4028]              Alloc[msgsender_MSG] := true;
[L4029]  COND TRUE   choice == 11
[L4030]              gas := gas - 21000;
[L4031]  COND FALSE  !(gas >= 0)
[L4118]  RET         call CorralChoice_StrikeFarm(this);

[2020-11-25 05:54:26,646 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 05:54:26,646 INFO  L82        PathProgramCache]: Analyzing trace with hash -1466351246, now seen corresponding path program 1 times
[2020-11-25 05:54:26,647 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 05:54:26,659 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 05:54:26,684 INFO  L134       CoverageAnalysis]: Checked inductivity of 20 backedges. 0 proven. 10 refuted. 0 times theorem prover too weak. 10 trivial. 0 not checked.
[2020-11-25 05:54:26,684 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 05:54:26,684 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [4] total 4
[2020-11-25 05:54:26,685 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 05:54:26,685 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 05:54:26,685 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 05:54:26,685 INFO  L87              Difference]: Start difference. First operand 2701 states and 4384 transitions. cyclomatic complexity: 1685 Second operand 4 states.
[2020-11-25 05:54:26,992 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 05:54:26,993 INFO  L93              Difference]: Finished difference Result 2315 states and 2705 transitions.
[2020-11-25 05:54:26,993 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 05:54:26,994 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2315 states and 2705 transitions.
[2020-11-25 05:54:27,006 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 05:54:27,019 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2315 states to 2315 states and 2705 transitions.
[2020-11-25 05:54:27,019 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 467
[2020-11-25 05:54:27,020 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 572
[2020-11-25 05:54:27,020 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2315 states and 2705 transitions.
[2020-11-25 05:54:27,023 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 05:54:27,023 INFO  L728         BuchiCegarLoop]: Abstraction has 2315 states and 2705 transitions.
[2020-11-25 05:54:27,025 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2315 states and 2705 transitions.
[2020-11-25 05:54:27,047 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2315 to 2310.
[2020-11-25 05:54:27,047 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2310 states.
[2020-11-25 05:54:27,051 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2310 states to 2310 states and 2700 transitions.
[2020-11-25 05:54:27,051 INFO  L751         BuchiCegarLoop]: Abstraction has 2310 states and 2700 transitions.
[2020-11-25 05:54:27,051 INFO  L631         BuchiCegarLoop]: Abstraction has 2310 states and 2700 transitions.
[2020-11-25 05:54:27,051 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 05:54:27,051 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2310 states and 2700 transitions.
[2020-11-25 05:54:27,058 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 05:54:27,058 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 05:54:27,058 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 05:54:27,061 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 05:54:27,061 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC200 := false;
[L2]                 call_transferFrom_ERC200 := false;
[L2]     CALL        call main();
[L4108]              assume null == 0;
[L4109]  CALL        call this := FreshRefGenerator__success();
[L1523]              havoc newRef;
[L1524]              assume Alloc[newRef] == false;
[L1525]              Alloc[newRef] := true;
[L1526]              assume newRef != null;
[L4109]  RET         call this := FreshRefGenerator__success();
[L4110]              assume now >= 0;
[L4111]              assume DType[this] == StrikeFarm;
[L4112]              assume msgvalue_MSG == 0;
[L4113]              gas := gas - 53000;
[L4114]  CALL        call StrikeFarm_StrikeFarm(this, msgsender_MSG, msgvalue_MSG);
[L1001]              havoc __exception;
[L1002]              revert := false;
[L1003]  COND FALSE  !(__exception)
[L1025]  CALL        call StrikeFarm_StrikeFarm__success(this, msgsender_MSG, msgvalue_MSG);
[L2725]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L1587]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1572]              assume msgsender_MSG != null;
[L1573]              Balance[this] := 0;
[L1587]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1588]  COND FALSE  !(revert)
[L2725]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2726]  COND FALSE  !(revert)
[L2729]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1555]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1540]              assume msgsender_MSG != null;
[L1541]              Balance[this] := 0;
[L1555]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1556]  COND FALSE  !(revert)
[L2729]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2730]  COND FALSE  !(revert)
[L2733]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1649]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L1587]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1572]              assume msgsender_MSG != null;
[L1573]              Balance[this] := 0;
[L1587]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1588]  COND FALSE  !(revert)
[L1649]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L1650]  COND FALSE  !(revert)
[L1653]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1555]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1540]              assume msgsender_MSG != null;
[L1541]              Balance[this] := 0;
[L1555]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1556]  COND FALSE  !(revert)
[L1653]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1654]  COND FALSE  !(revert)
[L1657]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1621]              assume msgsender_MSG != null;
[L1622]              Balance[this] := 0;
[L1623]              _balances_ERC20[this] := zeroRefintArr();
[L1624]              sum__balances0[this] := 0;
[L1625]              _allowances_ERC20[this] := zeroRefRefintArr();
[L1626]              sum__allowances1[this] := 0;
[L1627]              _totalSupply_ERC20[this] := 0;
[L1657]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1658]  COND FALSE  !(revert)
[L2733]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]  COND FALSE  !(revert)
[L2737]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 879309088, -1713371657, 18);
[L2413]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1555]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1540]              assume msgsender_MSG != null;
[L1541]              Balance[this] := 0;
[L1555]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1556]  COND FALSE  !(revert)
[L2413]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2414]  COND FALSE  !(revert)
[L2417]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s483, symbol_s483, decimals_s483);
[L2388]              assume msgsender_MSG != null;
[L2389]              Balance[this] := 0;
[L2390]              _name_ERC20Detailed[this] := -1368110498;
[L2391]              _symbol_ERC20Detailed[this] := -1368110498;
[L2392]              _decimals_ERC20Detailed[this] := 0;
[L2394]              _name_ERC20Detailed[this] := name_s483;
[L2395]              _symbol_ERC20Detailed[this] := symbol_s483;
[L2396]              _decimals_ERC20Detailed[this] := decimals_s483;
[L2417]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s483, symbol_s483, decimals_s483);
[L2418]  COND FALSE  !(revert)
[L2737]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 879309088, -1713371657, 18);
[L2738]  COND FALSE  !(revert)
[L2741]  CALL        call StrikeFarm_StrikeFarm_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2672]              assume msgsender_MSG != null;
[L2673]              Balance[this] := 0;
[L2674]              _total_StrikeFarm[this] := 11000;
[L2676]  COND TRUE   DType[this] == StrikeFarm
[L2677]  CALL        call __var_27 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L2455]              __ret_0_ := _decimals_ERC20Detailed[this];
[L2677]  RET         call __var_27 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L2678]  COND FALSE  !(revert)
[L2684]              __var_26 := __var_27 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2685]  COND TRUE   DType[this] == StrikeFarm
[L2686]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, nonlinearMul(_total_StrikeFarm[this], nonlinearPow(10, __var_27 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2263]              __var_16 := null;
[L2264]  COND TRUE   !(account_s366 != null)
[L2265]              revert := true;
[L2686]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, nonlinearMul(_total_StrikeFarm[this], nonlinearPow(10, __var_27 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2687]  COND TRUE   revert
[L2741]  RET         call StrikeFarm_StrikeFarm_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2742]  COND FALSE  !(revert)
[L1025]  RET         call StrikeFarm_StrikeFarm__success(this, msgsender_MSG, msgvalue_MSG);
[L1026]              assume !revert && gas >= 0;
[L4114]  RET         call StrikeFarm_StrikeFarm(this, msgsender_MSG, msgvalue_MSG);
[L4115]              assume !revert && gas >= 0;
[L4118]  CALL        call CorralChoice_StrikeFarm(this);
[L3984]              havoc msgsender_MSG;
[L3985]              havoc msgvalue_MSG;
[L3986]              havoc choice;
[L3987]              havoc __ret_0_totalSupply;
[L3988]              havoc account_s121;
[L3989]              havoc __ret_0_balanceOf;
[L3990]              havoc recipient_s140;
[L3991]              havoc amount_s140;
[L3992]              havoc __ret_0_transfer;
[L3993]              havoc owner_s156;
[L3994]              havoc spender_s156;
[L3995]              havoc __ret_0_allowance;
[L3996]              havoc spender_s175;
[L3997]              havoc amount_s175;
[L3998]              havoc __ret_0_approve;
[L3999]              havoc sender_s211;
[L4000]              havoc recipient_s211;
[L4001]              havoc amount_s211;
[L4002]              havoc __ret_0_transferFrom;
[L4003]              havoc spender_s238;
[L4004]              havoc addedValue_s238;
[L4005]              havoc __ret_0_increaseAllowance;
[L4006]              havoc spender_s266;
[L4007]              havoc subtractedValue_s266;
[L4008]              havoc __ret_0_decreaseAllowance;
[L4009]              havoc name_s483;
[L4010]              havoc symbol_s483;
[L4011]              havoc decimals_s483;
[L4012]              havoc __ret_0_name;
[L4013]              havoc __ret_0_symbol;
[L4014]              havoc __ret_0_decimals;
[L4015]              havoc tmpNow;
[L4016]              havoc gas;
[L4017]              assume gas > 4000000 && gas <= 8000000;
[L4018]              tmpNow := now;
[L4019]              havoc now;
[L4020]              assume now > tmpNow;
[L4021]              assume msgsender_MSG != null;
[L4022]              assume DType[msgsender_MSG] != IERC20;
[L4023]              assume DType[msgsender_MSG] != Context;
[L4024]              assume DType[msgsender_MSG] != ERC20;
[L4025]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4026]              assume DType[msgsender_MSG] != SafeMath;
[L4027]              assume DType[msgsender_MSG] != StrikeFarm;
[L4028]              Alloc[msgsender_MSG] := true;
[L4029]  COND FALSE  !(choice == 11)
[L4035]  COND FALSE  !(choice == 10)
[L4041]  COND FALSE  !(choice == 9)
[L4048]  COND FALSE  !(choice == 8)
[L4054]  COND FALSE  !(choice == 7)
[L4061]  COND TRUE   choice == 6
[L4062]              gas := gas - 21000;
[L4063]  COND TRUE   gas >= 0
[L4064]              assume amount_s211 >= 0 && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4065]              assume msgvalue_MSG == 0;
[L4066]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((sender_s211 == recipient_s211 && (amount_s211 > _balances_ERC20[this][sender_s211] || amount_s211 > _allowances_ERC20[this][sender_s211][msgsender_MSG])) && amount_s211 >= 0) && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s211] >= 0) && _balances_ERC20[this][recipient_s211] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s211] >= 0) && _balances_ERC20[this][sender_s211] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s211][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s211][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L518]               havoc __exception;
[L519]               revert := false;
[L520]   COND FALSE  !(__exception)
[L542]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L1901]  COND TRUE   DType[this] == StrikeFarm
[L1902]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2207]              __var_12 := null;
[L2208]  COND TRUE   !(sender_s323 != null)
[L2209]              revert := true;
[L1902]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L1903]  COND TRUE   revert
[L542]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L543]               assume !revert && gas >= 0;
[L4066]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L4118]  RET         call CorralChoice_StrikeFarm(this);

Loop:
[L4118]  CALL        call CorralChoice_StrikeFarm(this);
[L3984]              havoc msgsender_MSG;
[L3985]              havoc msgvalue_MSG;
[L3986]              havoc choice;
[L3987]              havoc __ret_0_totalSupply;
[L3988]              havoc account_s121;
[L3989]              havoc __ret_0_balanceOf;
[L3990]              havoc recipient_s140;
[L3991]              havoc amount_s140;
[L3992]              havoc __ret_0_transfer;
[L3993]              havoc owner_s156;
[L3994]              havoc spender_s156;
[L3995]              havoc __ret_0_allowance;
[L3996]              havoc spender_s175;
[L3997]              havoc amount_s175;
[L3998]              havoc __ret_0_approve;
[L3999]              havoc sender_s211;
[L4000]              havoc recipient_s211;
[L4001]              havoc amount_s211;
[L4002]              havoc __ret_0_transferFrom;
[L4003]              havoc spender_s238;
[L4004]              havoc addedValue_s238;
[L4005]              havoc __ret_0_increaseAllowance;
[L4006]              havoc spender_s266;
[L4007]              havoc subtractedValue_s266;
[L4008]              havoc __ret_0_decreaseAllowance;
[L4009]              havoc name_s483;
[L4010]              havoc symbol_s483;
[L4011]              havoc decimals_s483;
[L4012]              havoc __ret_0_name;
[L4013]              havoc __ret_0_symbol;
[L4014]              havoc __ret_0_decimals;
[L4015]              havoc tmpNow;
[L4016]              havoc gas;
[L4017]              assume gas > 4000000 && gas <= 8000000;
[L4018]              tmpNow := now;
[L4019]              havoc now;
[L4020]              assume now > tmpNow;
[L4021]              assume msgsender_MSG != null;
[L4022]              assume DType[msgsender_MSG] != IERC20;
[L4023]              assume DType[msgsender_MSG] != Context;
[L4024]              assume DType[msgsender_MSG] != ERC20;
[L4025]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4026]              assume DType[msgsender_MSG] != SafeMath;
[L4027]              assume DType[msgsender_MSG] != StrikeFarm;
[L4028]              Alloc[msgsender_MSG] := true;
[L4029]  COND FALSE  !(choice == 11)
[L4035]  COND FALSE  !(choice == 10)
[L4041]  COND FALSE  !(choice == 9)
[L4048]  COND FALSE  !(choice == 8)
[L4054]  COND FALSE  !(choice == 7)
[L4061]  COND TRUE   choice == 6
[L4062]              gas := gas - 21000;
[L4063]  COND TRUE   gas >= 0
[L4064]              assume amount_s211 >= 0 && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4065]              assume msgvalue_MSG == 0;
[L4066]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((sender_s211 == recipient_s211 && (amount_s211 > _balances_ERC20[this][sender_s211] || amount_s211 > _allowances_ERC20[this][sender_s211][msgsender_MSG])) && amount_s211 >= 0) && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s211] >= 0) && _balances_ERC20[this][recipient_s211] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s211] >= 0) && _balances_ERC20[this][sender_s211] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s211][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s211][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L518]               havoc __exception;
[L519]               revert := false;
[L520]   COND FALSE  !(__exception)
[L542]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L1901]  COND TRUE   DType[this] == StrikeFarm
[L1902]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2207]              __var_12 := null;
[L2208]  COND TRUE   !(sender_s323 != null)
[L2209]              revert := true;
[L1902]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L1903]  COND TRUE   revert
[L542]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L543]               assume !revert && gas >= 0;
[L4066]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L4118]  RET         call CorralChoice_StrikeFarm(this);

[2020-11-25 05:54:27,065 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 05:54:27,066 INFO  L82        PathProgramCache]: Analyzing trace with hash -65852006, now seen corresponding path program 1 times
[2020-11-25 05:54:27,066 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 05:54:27,079 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 05:54:27,131 INFO  L134       CoverageAnalysis]: Checked inductivity of 40 backedges. 0 proven. 7 refuted. 0 times theorem prover too weak. 33 trivial. 0 not checked.
[2020-11-25 05:54:27,131 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 05:54:27,131 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-11-25 05:54:27,132 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 05:54:27,132 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 05:54:27,132 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 05:54:27,132 INFO  L87              Difference]: Start difference. First operand 2310 states and 2700 transitions. cyclomatic complexity: 392 Second operand 7 states.
[2020-11-25 05:54:27,175 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 05:54:27,175 INFO  L93              Difference]: Finished difference Result 2318 states and 2707 transitions.
[2020-11-25 05:54:27,175 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 05:54:27,175 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2318 states and 2707 transitions.
[2020-11-25 05:54:27,184 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 05:54:27,191 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2318 states to 2309 states and 2698 transitions.
[2020-11-25 05:54:27,192 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 572
[2020-11-25 05:54:27,192 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 572
[2020-11-25 05:54:27,192 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2309 states and 2698 transitions.
[2020-11-25 05:54:27,194 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 05:54:27,194 INFO  L728         BuchiCegarLoop]: Abstraction has 2309 states and 2698 transitions.
[2020-11-25 05:54:27,196 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2309 states and 2698 transitions.
[2020-11-25 05:54:27,215 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2309 to 2309.
[2020-11-25 05:54:27,215 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2309 states.
[2020-11-25 05:54:27,219 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2309 states to 2309 states and 2698 transitions.
[2020-11-25 05:54:27,219 INFO  L751         BuchiCegarLoop]: Abstraction has 2309 states and 2698 transitions.
[2020-11-25 05:54:27,219 INFO  L631         BuchiCegarLoop]: Abstraction has 2309 states and 2698 transitions.
[2020-11-25 05:54:27,219 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 05:54:27,219 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2309 states and 2698 transitions.
[2020-11-25 05:54:27,224 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 05:54:27,224 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 05:54:27,225 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 05:54:27,226 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 05:54:27,227 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC200 := false;
[L2]                 call_transferFrom_ERC200 := false;
[L2]     CALL        call main();
[L4108]              assume null == 0;
[L4109]  CALL        call this := FreshRefGenerator__success();
[L1523]              havoc newRef;
[L1524]              assume Alloc[newRef] == false;
[L1525]              Alloc[newRef] := true;
[L1526]              assume newRef != null;
[L4109]  RET         call this := FreshRefGenerator__success();
[L4110]              assume now >= 0;
[L4111]              assume DType[this] == StrikeFarm;
[L4112]              assume msgvalue_MSG == 0;
[L4113]              gas := gas - 53000;
[L4114]  CALL        call StrikeFarm_StrikeFarm(this, msgsender_MSG, msgvalue_MSG);
[L1001]              havoc __exception;
[L1002]              revert := false;
[L1003]  COND FALSE  !(__exception)
[L1025]  CALL        call StrikeFarm_StrikeFarm__success(this, msgsender_MSG, msgvalue_MSG);
[L2725]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L1587]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1572]              assume msgsender_MSG != null;
[L1573]              Balance[this] := 0;
[L1587]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1588]  COND FALSE  !(revert)
[L2725]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2726]  COND FALSE  !(revert)
[L2729]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1555]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1540]              assume msgsender_MSG != null;
[L1541]              Balance[this] := 0;
[L1555]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1556]  COND FALSE  !(revert)
[L2729]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2730]  COND FALSE  !(revert)
[L2733]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1649]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L1587]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1572]              assume msgsender_MSG != null;
[L1573]              Balance[this] := 0;
[L1587]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1588]  COND FALSE  !(revert)
[L1649]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L1650]  COND FALSE  !(revert)
[L1653]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1555]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1540]              assume msgsender_MSG != null;
[L1541]              Balance[this] := 0;
[L1555]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1556]  COND FALSE  !(revert)
[L1653]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1654]  COND FALSE  !(revert)
[L1657]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1621]              assume msgsender_MSG != null;
[L1622]              Balance[this] := 0;
[L1623]              _balances_ERC20[this] := zeroRefintArr();
[L1624]              sum__balances0[this] := 0;
[L1625]              _allowances_ERC20[this] := zeroRefRefintArr();
[L1626]              sum__allowances1[this] := 0;
[L1627]              _totalSupply_ERC20[this] := 0;
[L1657]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1658]  COND FALSE  !(revert)
[L2733]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]  COND FALSE  !(revert)
[L2737]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 879309088, -1713371657, 18);
[L2413]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1555]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1540]              assume msgsender_MSG != null;
[L1541]              Balance[this] := 0;
[L1555]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1556]  COND FALSE  !(revert)
[L2413]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2414]  COND FALSE  !(revert)
[L2417]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s483, symbol_s483, decimals_s483);
[L2388]              assume msgsender_MSG != null;
[L2389]              Balance[this] := 0;
[L2390]              _name_ERC20Detailed[this] := -1368110498;
[L2391]              _symbol_ERC20Detailed[this] := -1368110498;
[L2392]              _decimals_ERC20Detailed[this] := 0;
[L2394]              _name_ERC20Detailed[this] := name_s483;
[L2395]              _symbol_ERC20Detailed[this] := symbol_s483;
[L2396]              _decimals_ERC20Detailed[this] := decimals_s483;
[L2417]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s483, symbol_s483, decimals_s483);
[L2418]  COND FALSE  !(revert)
[L2737]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 879309088, -1713371657, 18);
[L2738]  COND FALSE  !(revert)
[L2741]  CALL        call StrikeFarm_StrikeFarm_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2672]              assume msgsender_MSG != null;
[L2673]              Balance[this] := 0;
[L2674]              _total_StrikeFarm[this] := 11000;
[L2676]  COND TRUE   DType[this] == StrikeFarm
[L2677]  CALL        call __var_27 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L2455]              __ret_0_ := _decimals_ERC20Detailed[this];
[L2677]  RET         call __var_27 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L2678]  COND FALSE  !(revert)
[L2684]              __var_26 := __var_27 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2685]  COND TRUE   DType[this] == StrikeFarm
[L2686]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, nonlinearMul(_total_StrikeFarm[this], nonlinearPow(10, __var_27 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2263]              __var_16 := null;
[L2264]  COND FALSE  !(!(account_s366 != null))
[L2268]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s366);
[L2506]              c_s533 := (a_s533 + b_s533) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2507]  COND TRUE   !(c_s533 >= a_s533)
[L2508]              revert := true;
[L2268]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s366);
[L2269]  COND TRUE   revert
[L2686]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, nonlinearMul(_total_StrikeFarm[this], nonlinearPow(10, __var_27 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2687]  COND TRUE   revert
[L2741]  RET         call StrikeFarm_StrikeFarm_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2742]  COND FALSE  !(revert)
[L1025]  RET         call StrikeFarm_StrikeFarm__success(this, msgsender_MSG, msgvalue_MSG);
[L1026]              assume !revert && gas >= 0;
[L4114]  RET         call StrikeFarm_StrikeFarm(this, msgsender_MSG, msgvalue_MSG);
[L4115]              assume !revert && gas >= 0;
[L4118]  CALL        call CorralChoice_StrikeFarm(this);
[L3984]              havoc msgsender_MSG;
[L3985]              havoc msgvalue_MSG;
[L3986]              havoc choice;
[L3987]              havoc __ret_0_totalSupply;
[L3988]              havoc account_s121;
[L3989]              havoc __ret_0_balanceOf;
[L3990]              havoc recipient_s140;
[L3991]              havoc amount_s140;
[L3992]              havoc __ret_0_transfer;
[L3993]              havoc owner_s156;
[L3994]              havoc spender_s156;
[L3995]              havoc __ret_0_allowance;
[L3996]              havoc spender_s175;
[L3997]              havoc amount_s175;
[L3998]              havoc __ret_0_approve;
[L3999]              havoc sender_s211;
[L4000]              havoc recipient_s211;
[L4001]              havoc amount_s211;
[L4002]              havoc __ret_0_transferFrom;
[L4003]              havoc spender_s238;
[L4004]              havoc addedValue_s238;
[L4005]              havoc __ret_0_increaseAllowance;
[L4006]              havoc spender_s266;
[L4007]              havoc subtractedValue_s266;
[L4008]              havoc __ret_0_decreaseAllowance;
[L4009]              havoc name_s483;
[L4010]              havoc symbol_s483;
[L4011]              havoc decimals_s483;
[L4012]              havoc __ret_0_name;
[L4013]              havoc __ret_0_symbol;
[L4014]              havoc __ret_0_decimals;
[L4015]              havoc tmpNow;
[L4016]              havoc gas;
[L4017]              assume gas > 4000000 && gas <= 8000000;
[L4018]              tmpNow := now;
[L4019]              havoc now;
[L4020]              assume now > tmpNow;
[L4021]              assume msgsender_MSG != null;
[L4022]              assume DType[msgsender_MSG] != IERC20;
[L4023]              assume DType[msgsender_MSG] != Context;
[L4024]              assume DType[msgsender_MSG] != ERC20;
[L4025]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4026]              assume DType[msgsender_MSG] != SafeMath;
[L4027]              assume DType[msgsender_MSG] != StrikeFarm;
[L4028]              Alloc[msgsender_MSG] := true;
[L4029]  COND FALSE  !(choice == 11)
[L4035]  COND FALSE  !(choice == 10)
[L4041]  COND FALSE  !(choice == 9)
[L4048]  COND FALSE  !(choice == 8)
[L4054]  COND FALSE  !(choice == 7)
[L4061]  COND TRUE   choice == 6
[L4062]              gas := gas - 21000;
[L4063]  COND TRUE   gas >= 0
[L4064]              assume amount_s211 >= 0 && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4065]              assume msgvalue_MSG == 0;
[L4066]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((sender_s211 == recipient_s211 && (amount_s211 > _balances_ERC20[this][sender_s211] || amount_s211 > _allowances_ERC20[this][sender_s211][msgsender_MSG])) && amount_s211 >= 0) && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s211] >= 0) && _balances_ERC20[this][recipient_s211] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s211] >= 0) && _balances_ERC20[this][sender_s211] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s211][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s211][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L518]               havoc __exception;
[L519]               revert := false;
[L520]   COND FALSE  !(__exception)
[L542]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L1901]  COND TRUE   DType[this] == StrikeFarm
[L1902]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2207]              __var_12 := null;
[L2208]  COND TRUE   !(sender_s323 != null)
[L2209]              revert := true;
[L1902]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L1903]  COND TRUE   revert
[L542]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L543]               assume !revert && gas >= 0;
[L4066]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L4118]  RET         call CorralChoice_StrikeFarm(this);

Loop:
[L4118]  CALL        call CorralChoice_StrikeFarm(this);
[L3984]              havoc msgsender_MSG;
[L3985]              havoc msgvalue_MSG;
[L3986]              havoc choice;
[L3987]              havoc __ret_0_totalSupply;
[L3988]              havoc account_s121;
[L3989]              havoc __ret_0_balanceOf;
[L3990]              havoc recipient_s140;
[L3991]              havoc amount_s140;
[L3992]              havoc __ret_0_transfer;
[L3993]              havoc owner_s156;
[L3994]              havoc spender_s156;
[L3995]              havoc __ret_0_allowance;
[L3996]              havoc spender_s175;
[L3997]              havoc amount_s175;
[L3998]              havoc __ret_0_approve;
[L3999]              havoc sender_s211;
[L4000]              havoc recipient_s211;
[L4001]              havoc amount_s211;
[L4002]              havoc __ret_0_transferFrom;
[L4003]              havoc spender_s238;
[L4004]              havoc addedValue_s238;
[L4005]              havoc __ret_0_increaseAllowance;
[L4006]              havoc spender_s266;
[L4007]              havoc subtractedValue_s266;
[L4008]              havoc __ret_0_decreaseAllowance;
[L4009]              havoc name_s483;
[L4010]              havoc symbol_s483;
[L4011]              havoc decimals_s483;
[L4012]              havoc __ret_0_name;
[L4013]              havoc __ret_0_symbol;
[L4014]              havoc __ret_0_decimals;
[L4015]              havoc tmpNow;
[L4016]              havoc gas;
[L4017]              assume gas > 4000000 && gas <= 8000000;
[L4018]              tmpNow := now;
[L4019]              havoc now;
[L4020]              assume now > tmpNow;
[L4021]              assume msgsender_MSG != null;
[L4022]              assume DType[msgsender_MSG] != IERC20;
[L4023]              assume DType[msgsender_MSG] != Context;
[L4024]              assume DType[msgsender_MSG] != ERC20;
[L4025]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4026]              assume DType[msgsender_MSG] != SafeMath;
[L4027]              assume DType[msgsender_MSG] != StrikeFarm;
[L4028]              Alloc[msgsender_MSG] := true;
[L4029]  COND FALSE  !(choice == 11)
[L4035]  COND FALSE  !(choice == 10)
[L4041]  COND FALSE  !(choice == 9)
[L4048]  COND FALSE  !(choice == 8)
[L4054]  COND FALSE  !(choice == 7)
[L4061]  COND TRUE   choice == 6
[L4062]              gas := gas - 21000;
[L4063]  COND TRUE   gas >= 0
[L4064]              assume amount_s211 >= 0 && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4065]              assume msgvalue_MSG == 0;
[L4066]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((sender_s211 == recipient_s211 && (amount_s211 > _balances_ERC20[this][sender_s211] || amount_s211 > _allowances_ERC20[this][sender_s211][msgsender_MSG])) && amount_s211 >= 0) && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s211] >= 0) && _balances_ERC20[this][recipient_s211] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s211] >= 0) && _balances_ERC20[this][sender_s211] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s211][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s211][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L518]               havoc __exception;
[L519]               revert := false;
[L520]   COND FALSE  !(__exception)
[L542]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L1901]  COND TRUE   DType[this] == StrikeFarm
[L1902]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2207]              __var_12 := null;
[L2208]  COND TRUE   !(sender_s323 != null)
[L2209]              revert := true;
[L1902]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L1903]  COND TRUE   revert
[L542]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L543]               assume !revert && gas >= 0;
[L4066]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L4118]  RET         call CorralChoice_StrikeFarm(this);

[2020-11-25 05:54:27,230 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 05:54:27,231 INFO  L82        PathProgramCache]: Analyzing trace with hash -570423852, now seen corresponding path program 1 times
[2020-11-25 05:54:27,231 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 05:54:27,241 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 05:54:27,291 INFO  L134       CoverageAnalysis]: Checked inductivity of 40 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 40 trivial. 0 not checked.
[2020-11-25 05:54:27,292 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 05:54:27,292 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 05:54:27,292 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 05:54:27,292 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 05:54:27,293 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 05:54:27,293 INFO  L87              Difference]: Start difference. First operand 2309 states and 2698 transitions. cyclomatic complexity: 391 Second operand 3 states.
[2020-11-25 05:54:27,355 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 05:54:27,355 INFO  L93              Difference]: Finished difference Result 2714 states and 3102 transitions.
[2020-11-25 05:54:27,355 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 05:54:27,355 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2714 states and 3102 transitions.
[2020-11-25 05:54:27,362 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 05:54:27,371 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2714 states to 2541 states and 2898 transitions.
[2020-11-25 05:54:27,372 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 627
[2020-11-25 05:54:27,372 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 627
[2020-11-25 05:54:27,372 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2541 states and 2898 transitions.
[2020-11-25 05:54:27,374 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 05:54:27,375 INFO  L728         BuchiCegarLoop]: Abstraction has 2541 states and 2898 transitions.
[2020-11-25 05:54:27,377 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2541 states and 2898 transitions.
[2020-11-25 05:54:27,393 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2541 to 2303.
[2020-11-25 05:54:27,393 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2303 states.
[2020-11-25 05:54:27,396 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2303 states to 2303 states and 2603 transitions.
[2020-11-25 05:54:27,396 INFO  L751         BuchiCegarLoop]: Abstraction has 2303 states and 2603 transitions.
[2020-11-25 05:54:27,396 INFO  L631         BuchiCegarLoop]: Abstraction has 2303 states and 2603 transitions.
[2020-11-25 05:54:27,396 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 05:54:27,396 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2303 states and 2603 transitions.
[2020-11-25 05:54:27,399 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 05:54:27,399 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 05:54:27,399 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 05:54:27,401 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 05:54:27,401 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC200 := false;
[L2]                 call_transferFrom_ERC200 := false;
[L2]     CALL        call main();
[L4108]              assume null == 0;
[L4109]  CALL        call this := FreshRefGenerator__success();
[L1523]              havoc newRef;
[L1524]              assume Alloc[newRef] == false;
[L1525]              Alloc[newRef] := true;
[L1526]              assume newRef != null;
[L4109]  RET         call this := FreshRefGenerator__success();
[L4110]              assume now >= 0;
[L4111]              assume DType[this] == StrikeFarm;
[L4112]              assume msgvalue_MSG == 0;
[L4113]              gas := gas - 53000;
[L4114]  CALL        call StrikeFarm_StrikeFarm(this, msgsender_MSG, msgvalue_MSG);
[L1001]              havoc __exception;
[L1002]              revert := false;
[L1003]  COND FALSE  !(__exception)
[L1025]  CALL        call StrikeFarm_StrikeFarm__success(this, msgsender_MSG, msgvalue_MSG);
[L2725]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L1587]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1572]              assume msgsender_MSG != null;
[L1573]              Balance[this] := 0;
[L1587]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1588]  COND FALSE  !(revert)
[L2725]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2726]  COND FALSE  !(revert)
[L2729]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1555]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1540]              assume msgsender_MSG != null;
[L1541]              Balance[this] := 0;
[L1555]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1556]  COND FALSE  !(revert)
[L2729]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2730]  COND FALSE  !(revert)
[L2733]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1649]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L1587]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1572]              assume msgsender_MSG != null;
[L1573]              Balance[this] := 0;
[L1587]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1588]  COND FALSE  !(revert)
[L1649]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L1650]  COND FALSE  !(revert)
[L1653]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1555]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1540]              assume msgsender_MSG != null;
[L1541]              Balance[this] := 0;
[L1555]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1556]  COND FALSE  !(revert)
[L1653]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1654]  COND FALSE  !(revert)
[L1657]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1621]              assume msgsender_MSG != null;
[L1622]              Balance[this] := 0;
[L1623]              _balances_ERC20[this] := zeroRefintArr();
[L1624]              sum__balances0[this] := 0;
[L1625]              _allowances_ERC20[this] := zeroRefRefintArr();
[L1626]              sum__allowances1[this] := 0;
[L1627]              _totalSupply_ERC20[this] := 0;
[L1657]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1658]  COND FALSE  !(revert)
[L2733]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]  COND FALSE  !(revert)
[L2737]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 879309088, -1713371657, 18);
[L2413]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1555]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1540]              assume msgsender_MSG != null;
[L1541]              Balance[this] := 0;
[L1555]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1556]  COND FALSE  !(revert)
[L2413]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2414]  COND FALSE  !(revert)
[L2417]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s483, symbol_s483, decimals_s483);
[L2388]              assume msgsender_MSG != null;
[L2389]              Balance[this] := 0;
[L2390]              _name_ERC20Detailed[this] := -1368110498;
[L2391]              _symbol_ERC20Detailed[this] := -1368110498;
[L2392]              _decimals_ERC20Detailed[this] := 0;
[L2394]              _name_ERC20Detailed[this] := name_s483;
[L2395]              _symbol_ERC20Detailed[this] := symbol_s483;
[L2396]              _decimals_ERC20Detailed[this] := decimals_s483;
[L2417]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s483, symbol_s483, decimals_s483);
[L2418]  COND FALSE  !(revert)
[L2737]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 879309088, -1713371657, 18);
[L2738]  COND FALSE  !(revert)
[L2741]  CALL        call StrikeFarm_StrikeFarm_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2672]              assume msgsender_MSG != null;
[L2673]              Balance[this] := 0;
[L2674]              _total_StrikeFarm[this] := 11000;
[L2676]  COND TRUE   DType[this] == StrikeFarm
[L2677]  CALL        call __var_27 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L2455]              __ret_0_ := _decimals_ERC20Detailed[this];
[L2677]  RET         call __var_27 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L2678]  COND FALSE  !(revert)
[L2684]              __var_26 := __var_27 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2685]  COND TRUE   DType[this] == StrikeFarm
[L2686]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, nonlinearMul(_total_StrikeFarm[this], nonlinearPow(10, __var_27 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2263]              __var_16 := null;
[L2264]  COND FALSE  !(!(account_s366 != null))
[L2268]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s366);
[L2506]              c_s533 := (a_s533 + b_s533) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2507]  COND FALSE  !(!(c_s533 >= a_s533))
[L2511]              __ret_0_ := c_s533;
[L2268]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s366);
[L2269]  COND FALSE  !(revert)
[L2272]              _totalSupply_ERC20[this] := __var_17;
[L2273]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s366], amount_s366);
[L2506]              c_s533 := (a_s533 + b_s533) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2507]  COND FALSE  !(!(c_s533 >= a_s533))
[L2511]              __ret_0_ := c_s533;
[L2273]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s366], amount_s366);
[L2274]  COND FALSE  !(revert)
[L2277]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s366];
[L2278]              _balances_ERC20[this][account_s366] := __var_18;
[L2279]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s366];
[L2280]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2686]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, nonlinearMul(_total_StrikeFarm[this], nonlinearPow(10, __var_27 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2687]  COND FALSE  !(revert)
[L2741]  RET         call StrikeFarm_StrikeFarm_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2742]  COND FALSE  !(revert)
[L1025]  RET         call StrikeFarm_StrikeFarm__success(this, msgsender_MSG, msgvalue_MSG);
[L1026]              assume !revert && gas >= 0;
[L4114]  RET         call StrikeFarm_StrikeFarm(this, msgsender_MSG, msgvalue_MSG);
[L4115]              assume !revert && gas >= 0;
[L4118]  CALL        call CorralChoice_StrikeFarm(this);
[L3984]              havoc msgsender_MSG;
[L3985]              havoc msgvalue_MSG;
[L3986]              havoc choice;
[L3987]              havoc __ret_0_totalSupply;
[L3988]              havoc account_s121;
[L3989]              havoc __ret_0_balanceOf;
[L3990]              havoc recipient_s140;
[L3991]              havoc amount_s140;
[L3992]              havoc __ret_0_transfer;
[L3993]              havoc owner_s156;
[L3994]              havoc spender_s156;
[L3995]              havoc __ret_0_allowance;
[L3996]              havoc spender_s175;
[L3997]              havoc amount_s175;
[L3998]              havoc __ret_0_approve;
[L3999]              havoc sender_s211;
[L4000]              havoc recipient_s211;
[L4001]              havoc amount_s211;
[L4002]              havoc __ret_0_transferFrom;
[L4003]              havoc spender_s238;
[L4004]              havoc addedValue_s238;
[L4005]              havoc __ret_0_increaseAllowance;
[L4006]              havoc spender_s266;
[L4007]              havoc subtractedValue_s266;
[L4008]              havoc __ret_0_decreaseAllowance;
[L4009]              havoc name_s483;
[L4010]              havoc symbol_s483;
[L4011]              havoc decimals_s483;
[L4012]              havoc __ret_0_name;
[L4013]              havoc __ret_0_symbol;
[L4014]              havoc __ret_0_decimals;
[L4015]              havoc tmpNow;
[L4016]              havoc gas;
[L4017]              assume gas > 4000000 && gas <= 8000000;
[L4018]              tmpNow := now;
[L4019]              havoc now;
[L4020]              assume now > tmpNow;
[L4021]              assume msgsender_MSG != null;
[L4022]              assume DType[msgsender_MSG] != IERC20;
[L4023]              assume DType[msgsender_MSG] != Context;
[L4024]              assume DType[msgsender_MSG] != ERC20;
[L4025]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4026]              assume DType[msgsender_MSG] != SafeMath;
[L4027]              assume DType[msgsender_MSG] != StrikeFarm;
[L4028]              Alloc[msgsender_MSG] := true;
[L4029]  COND FALSE  !(choice == 11)
[L4035]  COND FALSE  !(choice == 10)
[L4041]  COND FALSE  !(choice == 9)
[L4048]  COND FALSE  !(choice == 8)
[L4054]  COND FALSE  !(choice == 7)
[L4061]  COND TRUE   choice == 6
[L4062]              gas := gas - 21000;
[L4063]  COND TRUE   gas >= 0
[L4064]              assume amount_s211 >= 0 && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4065]              assume msgvalue_MSG == 0;
[L4066]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((sender_s211 == recipient_s211 && (amount_s211 > _balances_ERC20[this][sender_s211] || amount_s211 > _allowances_ERC20[this][sender_s211][msgsender_MSG])) && amount_s211 >= 0) && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s211] >= 0) && _balances_ERC20[this][recipient_s211] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s211] >= 0) && _balances_ERC20[this][sender_s211] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s211][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s211][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L518]               havoc __exception;
[L519]               revert := false;
[L520]   COND FALSE  !(__exception)
[L542]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L1901]  COND TRUE   DType[this] == StrikeFarm
[L1902]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2207]              __var_12 := null;
[L2208]  COND FALSE  !(!(sender_s323 != null))
[L2212]              __var_13 := null;
[L2213]  COND FALSE  !(!(recipient_s323 != null))
[L2217]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, 861085777);
[L2552]  COND FALSE  !(!(b_s576 <= a_s576))
[L2556]              c_s576 := (a_s576 - b_s576) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2557]              __ret_0_ := c_s576;
[L2217]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, 861085777);
[L2218]  COND FALSE  !(revert)
[L2221]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2222]              _balances_ERC20[this][sender_s323] := __var_14;
[L2223]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2224]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2506]              c_s533 := (a_s533 + b_s533) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2507]  COND FALSE  !(!(c_s533 >= a_s533))
[L2511]              __ret_0_ := c_s533;
[L2224]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2225]  COND FALSE  !(revert)
[L2228]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2229]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2230]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2231]              assert { :EventEmitted "Transfer_ERC20" } true;
[L1902]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L1903]  COND FALSE  !(revert)
[L1914]  COND TRUE   DType[this] == StrikeFarm
[L1915]  CALL        call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L1601]              __ret_0_ := msgsender_MSG;
[L1915]  RET         call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L1916]  COND FALSE  !(revert)
[L1927]  COND TRUE   DType[this] == StrikeFarm
[L1928]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L1601]              __ret_0_ := msgsender_MSG;
[L1928]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L1929]  COND FALSE  !(revert)
[L1940]  CALL        call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, 872302118);
[L2552]  COND FALSE  !(!(b_s576 <= a_s576))
[L2556]              c_s576 := (a_s576 - b_s576) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2557]              __ret_0_ := c_s576;
[L1940]  RET         call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, 872302118);
[L1941]  COND FALSE  !(revert)
[L1944]  COND TRUE   DType[this] == StrikeFarm
[L1945]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L2355]              __var_22 := null;
[L2356]  COND FALSE  !(!(owner_s452 != null))
[L2360]              __var_23 := null;
[L2361]  COND FALSE  !(!(spender_s452 != null))
[L2365]              sum__allowances1[owner_s452] := sum__allowances1[owner_s452] - _allowances_ERC20[this][owner_s452][spender_s452];
[L2366]              _allowances_ERC20[this][owner_s452][spender_s452] := amount_s452;
[L2367]              sum__allowances1[owner_s452] := sum__allowances1[owner_s452] + _allowances_ERC20[this][owner_s452][spender_s452];
[L2368]              assert { :EventEmitted "Approval_ERC20" } true;
[L1945]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L1946]  COND FALSE  !(revert)
[L1957]              __ret_0_ := true;
[L542]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L543]               assume !revert && gas >= 0;
[L4066]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L4118]  RET         call CorralChoice_StrikeFarm(this);

Loop:
[L4118]  CALL        call CorralChoice_StrikeFarm(this);
[L3984]              havoc msgsender_MSG;
[L3985]              havoc msgvalue_MSG;
[L3986]              havoc choice;
[L3987]              havoc __ret_0_totalSupply;
[L3988]              havoc account_s121;
[L3989]              havoc __ret_0_balanceOf;
[L3990]              havoc recipient_s140;
[L3991]              havoc amount_s140;
[L3992]              havoc __ret_0_transfer;
[L3993]              havoc owner_s156;
[L3994]              havoc spender_s156;
[L3995]              havoc __ret_0_allowance;
[L3996]              havoc spender_s175;
[L3997]              havoc amount_s175;
[L3998]              havoc __ret_0_approve;
[L3999]              havoc sender_s211;
[L4000]              havoc recipient_s211;
[L4001]              havoc amount_s211;
[L4002]              havoc __ret_0_transferFrom;
[L4003]              havoc spender_s238;
[L4004]              havoc addedValue_s238;
[L4005]              havoc __ret_0_increaseAllowance;
[L4006]              havoc spender_s266;
[L4007]              havoc subtractedValue_s266;
[L4008]              havoc __ret_0_decreaseAllowance;
[L4009]              havoc name_s483;
[L4010]              havoc symbol_s483;
[L4011]              havoc decimals_s483;
[L4012]              havoc __ret_0_name;
[L4013]              havoc __ret_0_symbol;
[L4014]              havoc __ret_0_decimals;
[L4015]              havoc tmpNow;
[L4016]              havoc gas;
[L4017]              assume gas > 4000000 && gas <= 8000000;
[L4018]              tmpNow := now;
[L4019]              havoc now;
[L4020]              assume now > tmpNow;
[L4021]              assume msgsender_MSG != null;
[L4022]              assume DType[msgsender_MSG] != IERC20;
[L4023]              assume DType[msgsender_MSG] != Context;
[L4024]              assume DType[msgsender_MSG] != ERC20;
[L4025]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4026]              assume DType[msgsender_MSG] != SafeMath;
[L4027]              assume DType[msgsender_MSG] != StrikeFarm;
[L4028]              Alloc[msgsender_MSG] := true;
[L4029]  COND FALSE  !(choice == 11)
[L4035]  COND FALSE  !(choice == 10)
[L4041]  COND FALSE  !(choice == 9)
[L4048]  COND FALSE  !(choice == 8)
[L4054]  COND FALSE  !(choice == 7)
[L4061]  COND TRUE   choice == 6
[L4062]              gas := gas - 21000;
[L4063]  COND TRUE   gas >= 0
[L4064]              assume amount_s211 >= 0 && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4065]              assume msgvalue_MSG == 0;
[L4066]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((sender_s211 == recipient_s211 && (amount_s211 > _balances_ERC20[this][sender_s211] || amount_s211 > _allowances_ERC20[this][sender_s211][msgsender_MSG])) && amount_s211 >= 0) && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s211] >= 0) && _balances_ERC20[this][recipient_s211] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s211] >= 0) && _balances_ERC20[this][sender_s211] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s211][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s211][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L518]               havoc __exception;
[L519]               revert := false;
[L520]   COND FALSE  !(__exception)
[L542]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L1901]  COND TRUE   DType[this] == StrikeFarm
[L1902]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2207]              __var_12 := null;
[L2208]  COND FALSE  !(!(sender_s323 != null))
[L2212]              __var_13 := null;
[L2213]  COND FALSE  !(!(recipient_s323 != null))
[L2217]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, 861085777);
[L2552]  COND FALSE  !(!(b_s576 <= a_s576))
[L2556]              c_s576 := (a_s576 - b_s576) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2557]              __ret_0_ := c_s576;
[L2217]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, 861085777);
[L2218]  COND FALSE  !(revert)
[L2221]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2222]              _balances_ERC20[this][sender_s323] := __var_14;
[L2223]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2224]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2506]              c_s533 := (a_s533 + b_s533) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2507]  COND FALSE  !(!(c_s533 >= a_s533))
[L2511]              __ret_0_ := c_s533;
[L2224]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2225]  COND FALSE  !(revert)
[L2228]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2229]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2230]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2231]              assert { :EventEmitted "Transfer_ERC20" } true;
[L1902]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L1903]  COND FALSE  !(revert)
[L1914]  COND TRUE   DType[this] == StrikeFarm
[L1915]  CALL        call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L1601]              __ret_0_ := msgsender_MSG;
[L1915]  RET         call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L1916]  COND FALSE  !(revert)
[L1927]  COND TRUE   DType[this] == StrikeFarm
[L1928]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L1601]              __ret_0_ := msgsender_MSG;
[L1928]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L1929]  COND FALSE  !(revert)
[L1940]  CALL        call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, 872302118);
[L2552]  COND FALSE  !(!(b_s576 <= a_s576))
[L2556]              c_s576 := (a_s576 - b_s576) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2557]              __ret_0_ := c_s576;
[L1940]  RET         call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, 872302118);
[L1941]  COND FALSE  !(revert)
[L1944]  COND TRUE   DType[this] == StrikeFarm
[L1945]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L2355]              __var_22 := null;
[L2356]  COND FALSE  !(!(owner_s452 != null))
[L2360]              __var_23 := null;
[L2361]  COND FALSE  !(!(spender_s452 != null))
[L2365]              sum__allowances1[owner_s452] := sum__allowances1[owner_s452] - _allowances_ERC20[this][owner_s452][spender_s452];
[L2366]              _allowances_ERC20[this][owner_s452][spender_s452] := amount_s452;
[L2367]              sum__allowances1[owner_s452] := sum__allowances1[owner_s452] + _allowances_ERC20[this][owner_s452][spender_s452];
[L2368]              assert { :EventEmitted "Approval_ERC20" } true;
[L1945]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L1946]  COND FALSE  !(revert)
[L1957]              __ret_0_ := true;
[L542]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L543]               assume !revert && gas >= 0;
[L4066]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L4118]  RET         call CorralChoice_StrikeFarm(this);

[2020-11-25 05:54:27,404 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 05:54:27,405 INFO  L82        PathProgramCache]: Analyzing trace with hash -382973210, now seen corresponding path program 1 times
[2020-11-25 05:54:27,405 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 05:54:27,424 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 05:54:27,561 INFO  L134       CoverageAnalysis]: Checked inductivity of 53 backedges. 4 proven. 0 refuted. 0 times theorem prover too weak. 49 trivial. 0 not checked.
[2020-11-25 05:54:27,561 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 05:54:27,561 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [16] imperfect sequences [] total 16
[2020-11-25 05:54:27,562 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 05:54:27,562 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 17 interpolants.
[2020-11-25 05:54:27,562 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=35, Invalid=237, Unknown=0, NotChecked=0, Total=272
[2020-11-25 05:54:27,562 INFO  L87              Difference]: Start difference. First operand 2303 states and 2603 transitions. cyclomatic complexity: 302 Second operand 17 states.
[2020-11-25 05:54:29,048 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 05:54:29,048 INFO  L93              Difference]: Finished difference Result 2388 states and 2700 transitions.
[2020-11-25 05:54:29,048 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 17 states. 
[2020-11-25 05:54:29,049 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2388 states and 2700 transitions.
[2020-11-25 05:54:29,053 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 05:54:29,060 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2388 states to 2388 states and 2700 transitions.
[2020-11-25 05:54:29,061 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 610
[2020-11-25 05:54:29,061 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 610
[2020-11-25 05:54:29,061 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2388 states and 2700 transitions.
[2020-11-25 05:54:29,063 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 05:54:29,063 INFO  L728         BuchiCegarLoop]: Abstraction has 2388 states and 2700 transitions.
[2020-11-25 05:54:29,065 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2388 states and 2700 transitions.
[2020-11-25 05:54:29,078 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2388 to 2236.
[2020-11-25 05:54:29,079 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2236 states.
[2020-11-25 05:54:29,080 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2236 states to 2236 states and 2517 transitions.
[2020-11-25 05:54:29,081 INFO  L751         BuchiCegarLoop]: Abstraction has 2236 states and 2517 transitions.
[2020-11-25 05:54:29,081 INFO  L631         BuchiCegarLoop]: Abstraction has 2236 states and 2517 transitions.
[2020-11-25 05:54:29,081 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 05:54:29,081 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2236 states and 2517 transitions.
[2020-11-25 05:54:29,083 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 05:54:29,083 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 05:54:29,083 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 05:54:29,085 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 05:54:29,085 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC200 := false;
[L2]                 call_transferFrom_ERC200 := false;
[L2]     CALL        call main();
[L4108]              assume null == 0;
[L4109]  CALL        call this := FreshRefGenerator__success();
[L1523]              havoc newRef;
[L1524]              assume Alloc[newRef] == false;
[L1525]              Alloc[newRef] := true;
[L1526]              assume newRef != null;
[L4109]  RET         call this := FreshRefGenerator__success();
[L4110]              assume now >= 0;
[L4111]              assume DType[this] == StrikeFarm;
[L4112]              assume msgvalue_MSG == 0;
[L4113]              gas := gas - 53000;
[L4114]  CALL        call StrikeFarm_StrikeFarm(this, msgsender_MSG, msgvalue_MSG);
[L1001]              havoc __exception;
[L1002]              revert := false;
[L1003]  COND TRUE   __exception
[L1004]              __tmp__Balance := Balance;
[L1005]              __tmp__DType := DType;
[L1006]              __tmp__Alloc := Alloc;
[L1007]              __tmp__balance_ADDR := balance_ADDR;
[L1008]              __tmp__M_Ref_int := M_Ref_int;
[L1009]              __tmp__sum__balances0 := sum__balances0;
[L1010]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1011]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1012]              __tmp__sum__allowances1 := sum__allowances1;
[L1013]              __tmp__Length := Length;
[L1014]              __tmp__now := now;
[L1015]              __tmp___balances_ERC20 := _balances_ERC20;
[L1016]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1017]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1018]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1019]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1020]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1021]              __tmp___total_StrikeFarm := _total_StrikeFarm;
[L1022]  CALL        call StrikeFarm_StrikeFarm__fail(this, msgsender_MSG, msgvalue_MSG);
[L2699]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L1579]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1564]              assume msgsender_MSG != null;
[L1565]              __tmp__Balance[this] := 0;
[L1579]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1580]  COND FALSE  !(revert)
[L2699]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2700]  COND FALSE  !(revert)
[L2703]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L1547]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1532]              assume msgsender_MSG != null;
[L1533]              __tmp__Balance[this] := 0;
[L1547]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1548]  COND FALSE  !(revert)
[L2703]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2704]  COND FALSE  !(revert)
[L2707]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L1633]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L1579]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1564]              assume msgsender_MSG != null;
[L1565]              __tmp__Balance[this] := 0;
[L1579]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1580]  COND FALSE  !(revert)
[L1633]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L1634]  COND FALSE  !(revert)
[L1637]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L1547]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1532]              assume msgsender_MSG != null;
[L1533]              __tmp__Balance[this] := 0;
[L1547]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1548]  COND FALSE  !(revert)
[L1637]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L1638]  COND FALSE  !(revert)
[L1641]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1608]              assume msgsender_MSG != null;
[L1609]              __tmp__Balance[this] := 0;
[L1610]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L1611]              __tmp__sum__balances0[this] := 0;
[L1612]              __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L1613]              __tmp__sum__allowances1[this] := 0;
[L1614]              __tmp___totalSupply_ERC20[this] := 0;
[L1641]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1642]  COND FALSE  !(revert)
[L2707]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2708]  COND FALSE  !(revert)
[L2711]  CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 879309088, -1713371657, 18);
[L2401]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L1547]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1532]              assume msgsender_MSG != null;
[L1533]              __tmp__Balance[this] := 0;
[L1547]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1548]  COND FALSE  !(revert)
[L2401]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2402]  COND FALSE  !(revert)
[L2405]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s483, symbol_s483, decimals_s483);
[L2374]              assume msgsender_MSG != null;
[L2375]              __tmp__Balance[this] := 0;
[L2376]              __tmp___name_ERC20Detailed[this] := -1368110498;
[L2377]              __tmp___symbol_ERC20Detailed[this] := -1368110498;
[L2378]              __tmp___decimals_ERC20Detailed[this] := 0;
[L2380]              __tmp___name_ERC20Detailed[this] := name_s483;
[L2381]              __tmp___symbol_ERC20Detailed[this] := symbol_s483;
[L2382]              __tmp___decimals_ERC20Detailed[this] := decimals_s483;
[L2405]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s483, symbol_s483, decimals_s483);
[L2406]  COND FALSE  !(revert)
[L2711]  RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 879309088, -1713371657, 18);
[L2712]  COND FALSE  !(revert)
[L2715]  CALL        call StrikeFarm_StrikeFarm_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2644]              assume msgsender_MSG != null;
[L2645]              __tmp__Balance[this] := 0;
[L2646]              __tmp___total_StrikeFarm[this] := 11000;
[L2648]  COND TRUE   __tmp__DType[this] == StrikeFarm
[L2649]  CALL        call __var_27 := decimals_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG);
[L2449]              __ret_0_ := __tmp___decimals_ERC20Detailed[this];
[L2649]  RET         call __var_27 := decimals_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG);
[L2650]  COND FALSE  !(revert)
[L2656]              __var_26 := __var_27 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2657]  COND TRUE   __tmp__DType[this] == StrikeFarm
[L2658]  CALL        call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, nonlinearMul(__tmp___total_StrikeFarm[this], nonlinearPow(10, __var_27 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2239]              __var_16 := null;
[L2240]  COND FALSE  !(!(account_s366 != null))
[L2244]  CALL        call __var_17 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], amount_s366);
[L2494]              c_s533 := (a_s533 + b_s533) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2495]  COND FALSE  !(!(c_s533 >= a_s533))
[L2499]              __ret_0_ := c_s533;
[L2244]  RET         call __var_17 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], amount_s366);
[L2245]  COND FALSE  !(revert)
[L2248]              __tmp___totalSupply_ERC20[this] := __var_17;
[L2249]  CALL        call __var_18 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s366], amount_s366);
[L2494]              c_s533 := (a_s533 + b_s533) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2495]  COND FALSE  !(!(c_s533 >= a_s533))
[L2499]              __ret_0_ := c_s533;
[L2249]  RET         call __var_18 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s366], amount_s366);
[L2250]  COND FALSE  !(revert)
[L2253]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][account_s366];
[L2254]              __tmp___balances_ERC20[this][account_s366] := __var_18;
[L2255]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][account_s366];
[L2658]  RET         call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, nonlinearMul(__tmp___total_StrikeFarm[this], nonlinearPow(10, __var_27 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2659]  COND FALSE  !(revert)
[L2715]  RET         call StrikeFarm_StrikeFarm_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2716]  COND FALSE  !(revert)
[L1022]  RET         call StrikeFarm_StrikeFarm__fail(this, msgsender_MSG, msgvalue_MSG);
[L1023]              assume revert || gas < 0;
[L4114]  RET         call StrikeFarm_StrikeFarm(this, msgsender_MSG, msgvalue_MSG);
[L4115]              assume !revert && gas >= 0;
[L4118]  CALL        call CorralChoice_StrikeFarm(this);
[L3984]              havoc msgsender_MSG;
[L3985]              havoc msgvalue_MSG;
[L3986]              havoc choice;
[L3987]              havoc __ret_0_totalSupply;
[L3988]              havoc account_s121;
[L3989]              havoc __ret_0_balanceOf;
[L3990]              havoc recipient_s140;
[L3991]              havoc amount_s140;
[L3992]              havoc __ret_0_transfer;
[L3993]              havoc owner_s156;
[L3994]              havoc spender_s156;
[L3995]              havoc __ret_0_allowance;
[L3996]              havoc spender_s175;
[L3997]              havoc amount_s175;
[L3998]              havoc __ret_0_approve;
[L3999]              havoc sender_s211;
[L4000]              havoc recipient_s211;
[L4001]              havoc amount_s211;
[L4002]              havoc __ret_0_transferFrom;
[L4003]              havoc spender_s238;
[L4004]              havoc addedValue_s238;
[L4005]              havoc __ret_0_increaseAllowance;
[L4006]              havoc spender_s266;
[L4007]              havoc subtractedValue_s266;
[L4008]              havoc __ret_0_decreaseAllowance;
[L4009]              havoc name_s483;
[L4010]              havoc symbol_s483;
[L4011]              havoc decimals_s483;
[L4012]              havoc __ret_0_name;
[L4013]              havoc __ret_0_symbol;
[L4014]              havoc __ret_0_decimals;
[L4015]              havoc tmpNow;
[L4016]              havoc gas;
[L4017]              assume gas > 4000000 && gas <= 8000000;
[L4018]              tmpNow := now;
[L4019]              havoc now;
[L4020]              assume now > tmpNow;
[L4021]              assume msgsender_MSG != null;
[L4022]              assume DType[msgsender_MSG] != IERC20;
[L4023]              assume DType[msgsender_MSG] != Context;
[L4024]              assume DType[msgsender_MSG] != ERC20;
[L4025]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4026]              assume DType[msgsender_MSG] != SafeMath;
[L4027]              assume DType[msgsender_MSG] != StrikeFarm;
[L4028]              Alloc[msgsender_MSG] := true;
[L4029]  COND FALSE  !(choice == 11)
[L4035]  COND FALSE  !(choice == 10)
[L4041]  COND FALSE  !(choice == 9)
[L4048]  COND FALSE  !(choice == 8)
[L4054]  COND FALSE  !(choice == 7)
[L4061]  COND TRUE   choice == 6
[L4062]              gas := gas - 21000;
[L4063]  COND TRUE   gas >= 0
[L4064]              assume amount_s211 >= 0 && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4065]              assume msgvalue_MSG == 0;
[L4066]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((sender_s211 == recipient_s211 && (amount_s211 > _balances_ERC20[this][sender_s211] || amount_s211 > _allowances_ERC20[this][sender_s211][msgsender_MSG])) && amount_s211 >= 0) && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s211] >= 0) && _balances_ERC20[this][recipient_s211] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s211] >= 0) && _balances_ERC20[this][sender_s211] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s211][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s211][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L518]               havoc __exception;
[L519]               revert := false;
[L520]   COND FALSE  !(__exception)
[L542]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L1901]  COND TRUE   DType[this] == StrikeFarm
[L1902]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2207]              __var_12 := null;
[L2208]  COND FALSE  !(!(sender_s323 != null))
[L2212]              __var_13 := null;
[L2213]  COND FALSE  !(!(recipient_s323 != null))
[L2217]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, 861085777);
[L2552]  COND FALSE  !(!(b_s576 <= a_s576))
[L2556]              c_s576 := (a_s576 - b_s576) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2557]              __ret_0_ := c_s576;
[L2217]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, 861085777);
[L2218]  COND FALSE  !(revert)
[L2221]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2222]              _balances_ERC20[this][sender_s323] := __var_14;
[L2223]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2224]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2506]              c_s533 := (a_s533 + b_s533) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2507]  COND FALSE  !(!(c_s533 >= a_s533))
[L2511]              __ret_0_ := c_s533;
[L2224]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2225]  COND FALSE  !(revert)
[L2228]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2229]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2230]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2231]              assert { :EventEmitted "Transfer_ERC20" } true;
[L1902]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L1903]  COND FALSE  !(revert)
[L1914]  COND TRUE   DType[this] == StrikeFarm
[L1915]  CALL        call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L1601]              __ret_0_ := msgsender_MSG;
[L1915]  RET         call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L1916]  COND FALSE  !(revert)
[L1927]  COND TRUE   DType[this] == StrikeFarm
[L1928]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L1601]              __ret_0_ := msgsender_MSG;
[L1928]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L1929]  COND FALSE  !(revert)
[L1940]  CALL        call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, 872302118);
[L2552]  COND FALSE  !(!(b_s576 <= a_s576))
[L2556]              c_s576 := (a_s576 - b_s576) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2557]              __ret_0_ := c_s576;
[L1940]  RET         call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, 872302118);
[L1941]  COND FALSE  !(revert)
[L1944]  COND TRUE   DType[this] == StrikeFarm
[L1945]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L2355]              __var_22 := null;
[L2356]  COND FALSE  !(!(owner_s452 != null))
[L2360]              __var_23 := null;
[L2361]  COND FALSE  !(!(spender_s452 != null))
[L2365]              sum__allowances1[owner_s452] := sum__allowances1[owner_s452] - _allowances_ERC20[this][owner_s452][spender_s452];
[L2366]              _allowances_ERC20[this][owner_s452][spender_s452] := amount_s452;
[L2367]              sum__allowances1[owner_s452] := sum__allowances1[owner_s452] + _allowances_ERC20[this][owner_s452][spender_s452];
[L2368]              assert { :EventEmitted "Approval_ERC20" } true;
[L1945]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L1946]  COND FALSE  !(revert)
[L1957]              __ret_0_ := true;
[L542]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L543]               assume !revert && gas >= 0;
[L4066]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L4118]  RET         call CorralChoice_StrikeFarm(this);

Loop:
[L4118]  CALL        call CorralChoice_StrikeFarm(this);
[L3984]              havoc msgsender_MSG;
[L3985]              havoc msgvalue_MSG;
[L3986]              havoc choice;
[L3987]              havoc __ret_0_totalSupply;
[L3988]              havoc account_s121;
[L3989]              havoc __ret_0_balanceOf;
[L3990]              havoc recipient_s140;
[L3991]              havoc amount_s140;
[L3992]              havoc __ret_0_transfer;
[L3993]              havoc owner_s156;
[L3994]              havoc spender_s156;
[L3995]              havoc __ret_0_allowance;
[L3996]              havoc spender_s175;
[L3997]              havoc amount_s175;
[L3998]              havoc __ret_0_approve;
[L3999]              havoc sender_s211;
[L4000]              havoc recipient_s211;
[L4001]              havoc amount_s211;
[L4002]              havoc __ret_0_transferFrom;
[L4003]              havoc spender_s238;
[L4004]              havoc addedValue_s238;
[L4005]              havoc __ret_0_increaseAllowance;
[L4006]              havoc spender_s266;
[L4007]              havoc subtractedValue_s266;
[L4008]              havoc __ret_0_decreaseAllowance;
[L4009]              havoc name_s483;
[L4010]              havoc symbol_s483;
[L4011]              havoc decimals_s483;
[L4012]              havoc __ret_0_name;
[L4013]              havoc __ret_0_symbol;
[L4014]              havoc __ret_0_decimals;
[L4015]              havoc tmpNow;
[L4016]              havoc gas;
[L4017]              assume gas > 4000000 && gas <= 8000000;
[L4018]              tmpNow := now;
[L4019]              havoc now;
[L4020]              assume now > tmpNow;
[L4021]              assume msgsender_MSG != null;
[L4022]              assume DType[msgsender_MSG] != IERC20;
[L4023]              assume DType[msgsender_MSG] != Context;
[L4024]              assume DType[msgsender_MSG] != ERC20;
[L4025]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4026]              assume DType[msgsender_MSG] != SafeMath;
[L4027]              assume DType[msgsender_MSG] != StrikeFarm;
[L4028]              Alloc[msgsender_MSG] := true;
[L4029]  COND FALSE  !(choice == 11)
[L4035]  COND FALSE  !(choice == 10)
[L4041]  COND FALSE  !(choice == 9)
[L4048]  COND FALSE  !(choice == 8)
[L4054]  COND FALSE  !(choice == 7)
[L4061]  COND TRUE   choice == 6
[L4062]              gas := gas - 21000;
[L4063]  COND TRUE   gas >= 0
[L4064]              assume amount_s211 >= 0 && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4065]              assume msgvalue_MSG == 0;
[L4066]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((sender_s211 == recipient_s211 && (amount_s211 > _balances_ERC20[this][sender_s211] || amount_s211 > _allowances_ERC20[this][sender_s211][msgsender_MSG])) && amount_s211 >= 0) && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s211] >= 0) && _balances_ERC20[this][recipient_s211] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s211] >= 0) && _balances_ERC20[this][sender_s211] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s211][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s211][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L518]               havoc __exception;
[L519]               revert := false;
[L520]   COND FALSE  !(__exception)
[L542]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L1901]  COND TRUE   DType[this] == StrikeFarm
[L1902]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2207]              __var_12 := null;
[L2208]  COND FALSE  !(!(sender_s323 != null))
[L2212]              __var_13 := null;
[L2213]  COND FALSE  !(!(recipient_s323 != null))
[L2217]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, 861085777);
[L2552]  COND FALSE  !(!(b_s576 <= a_s576))
[L2556]              c_s576 := (a_s576 - b_s576) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2557]              __ret_0_ := c_s576;
[L2217]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, 861085777);
[L2218]  COND FALSE  !(revert)
[L2221]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2222]              _balances_ERC20[this][sender_s323] := __var_14;
[L2223]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2224]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2506]              c_s533 := (a_s533 + b_s533) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2507]  COND FALSE  !(!(c_s533 >= a_s533))
[L2511]              __ret_0_ := c_s533;
[L2224]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2225]  COND FALSE  !(revert)
[L2228]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2229]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2230]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2231]              assert { :EventEmitted "Transfer_ERC20" } true;
[L1902]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L1903]  COND FALSE  !(revert)
[L1914]  COND TRUE   DType[this] == StrikeFarm
[L1915]  CALL        call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L1601]              __ret_0_ := msgsender_MSG;
[L1915]  RET         call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L1916]  COND FALSE  !(revert)
[L1927]  COND TRUE   DType[this] == StrikeFarm
[L1928]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L1601]              __ret_0_ := msgsender_MSG;
[L1928]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L1929]  COND FALSE  !(revert)
[L1940]  CALL        call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, 872302118);
[L2552]  COND FALSE  !(!(b_s576 <= a_s576))
[L2556]              c_s576 := (a_s576 - b_s576) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2557]              __ret_0_ := c_s576;
[L1940]  RET         call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, 872302118);
[L1941]  COND FALSE  !(revert)
[L1944]  COND TRUE   DType[this] == StrikeFarm
[L1945]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L2355]              __var_22 := null;
[L2356]  COND FALSE  !(!(owner_s452 != null))
[L2360]              __var_23 := null;
[L2361]  COND FALSE  !(!(spender_s452 != null))
[L2365]              sum__allowances1[owner_s452] := sum__allowances1[owner_s452] - _allowances_ERC20[this][owner_s452][spender_s452];
[L2366]              _allowances_ERC20[this][owner_s452][spender_s452] := amount_s452;
[L2367]              sum__allowances1[owner_s452] := sum__allowances1[owner_s452] + _allowances_ERC20[this][owner_s452][spender_s452];
[L2368]              assert { :EventEmitted "Approval_ERC20" } true;
[L1945]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L1946]  COND FALSE  !(revert)
[L1957]              __ret_0_ := true;
[L542]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L543]               assume !revert && gas >= 0;
[L4066]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L4118]  RET         call CorralChoice_StrikeFarm(this);

[2020-11-25 05:54:29,089 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 05:54:29,089 INFO  L82        PathProgramCache]: Analyzing trace with hash -431179561, now seen corresponding path program 1 times
[2020-11-25 05:54:29,090 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 05:54:29,099 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 05:54:29,179 INFO  L134       CoverageAnalysis]: Checked inductivity of 53 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 53 trivial. 0 not checked.
[2020-11-25 05:54:29,179 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 05:54:29,179 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 05:54:29,180 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 05:54:29,181 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 05:54:29,181 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 05:54:29,181 INFO  L87              Difference]: Start difference. First operand 2236 states and 2517 transitions. cyclomatic complexity: 284 Second operand 4 states.
[2020-11-25 05:54:29,260 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 05:54:29,260 INFO  L93              Difference]: Finished difference Result 2797 states and 3224 transitions.
[2020-11-25 05:54:29,260 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-11-25 05:54:29,260 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2797 states and 3224 transitions.
[2020-11-25 05:54:29,266 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-11-25 05:54:29,273 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2797 states to 2654 states and 3075 transitions.
[2020-11-25 05:54:29,273 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 673
[2020-11-25 05:54:29,273 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 673
[2020-11-25 05:54:29,274 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2654 states and 3075 transitions.
[2020-11-25 05:54:29,276 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 05:54:29,276 INFO  L728         BuchiCegarLoop]: Abstraction has 2654 states and 3075 transitions.
[2020-11-25 05:54:29,277 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2654 states and 3075 transitions.
[2020-11-25 05:54:29,290 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2654 to 2093.
[2020-11-25 05:54:29,290 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2093 states.
[2020-11-25 05:54:29,292 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2093 states to 2093 states and 2367 transitions.
[2020-11-25 05:54:29,292 INFO  L751         BuchiCegarLoop]: Abstraction has 2093 states and 2367 transitions.
[2020-11-25 05:54:29,292 INFO  L631         BuchiCegarLoop]: Abstraction has 2093 states and 2367 transitions.
[2020-11-25 05:54:29,292 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 05:54:29,292 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2093 states and 2367 transitions.
[2020-11-25 05:54:29,294 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 05:54:29,294 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 05:54:29,294 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 05:54:29,296 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 05:54:29,296 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC200 := false;
[L2]                 call_transferFrom_ERC200 := false;
[L2]     CALL        call main();
[L4108]              assume null == 0;
[L4109]  CALL        call this := FreshRefGenerator__success();
[L1523]              havoc newRef;
[L1524]              assume Alloc[newRef] == false;
[L1525]              Alloc[newRef] := true;
[L1526]              assume newRef != null;
[L4109]  RET         call this := FreshRefGenerator__success();
[L4110]              assume now >= 0;
[L4111]              assume DType[this] == StrikeFarm;
[L4112]              assume msgvalue_MSG == 0;
[L4113]              gas := gas - 53000;
[L4114]  CALL        call StrikeFarm_StrikeFarm(this, msgsender_MSG, msgvalue_MSG);
[L1001]              havoc __exception;
[L1002]              revert := false;
[L1003]  COND FALSE  !(__exception)
[L1025]  CALL        call StrikeFarm_StrikeFarm__success(this, msgsender_MSG, msgvalue_MSG);
[L2725]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L1587]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1572]              assume msgsender_MSG != null;
[L1573]              Balance[this] := 0;
[L1587]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1588]  COND FALSE  !(revert)
[L2725]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2726]  COND FALSE  !(revert)
[L2729]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1555]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1540]              assume msgsender_MSG != null;
[L1541]              Balance[this] := 0;
[L1555]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1556]  COND FALSE  !(revert)
[L2729]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2730]  COND FALSE  !(revert)
[L2733]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1649]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L1587]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1572]              assume msgsender_MSG != null;
[L1573]              Balance[this] := 0;
[L1587]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1588]  COND FALSE  !(revert)
[L1649]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L1650]  COND FALSE  !(revert)
[L1653]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1555]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1540]              assume msgsender_MSG != null;
[L1541]              Balance[this] := 0;
[L1555]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1556]  COND FALSE  !(revert)
[L1653]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1654]  COND FALSE  !(revert)
[L1657]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1621]              assume msgsender_MSG != null;
[L1622]              Balance[this] := 0;
[L1623]              _balances_ERC20[this] := zeroRefintArr();
[L1624]              sum__balances0[this] := 0;
[L1625]              _allowances_ERC20[this] := zeroRefRefintArr();
[L1626]              sum__allowances1[this] := 0;
[L1627]              _totalSupply_ERC20[this] := 0;
[L1657]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1658]  COND FALSE  !(revert)
[L2733]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]  COND FALSE  !(revert)
[L2737]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 879309088, -1713371657, 18);
[L2413]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1555]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1540]              assume msgsender_MSG != null;
[L1541]              Balance[this] := 0;
[L1555]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1556]  COND FALSE  !(revert)
[L2413]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2414]  COND FALSE  !(revert)
[L2417]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s483, symbol_s483, decimals_s483);
[L2388]              assume msgsender_MSG != null;
[L2389]              Balance[this] := 0;
[L2390]              _name_ERC20Detailed[this] := -1368110498;
[L2391]              _symbol_ERC20Detailed[this] := -1368110498;
[L2392]              _decimals_ERC20Detailed[this] := 0;
[L2394]              _name_ERC20Detailed[this] := name_s483;
[L2395]              _symbol_ERC20Detailed[this] := symbol_s483;
[L2396]              _decimals_ERC20Detailed[this] := decimals_s483;
[L2417]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s483, symbol_s483, decimals_s483);
[L2418]  COND FALSE  !(revert)
[L2737]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 879309088, -1713371657, 18);
[L2738]  COND FALSE  !(revert)
[L2741]  CALL        call StrikeFarm_StrikeFarm_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2672]              assume msgsender_MSG != null;
[L2673]              Balance[this] := 0;
[L2674]              _total_StrikeFarm[this] := 11000;
[L2676]  COND TRUE   DType[this] == StrikeFarm
[L2677]  CALL        call __var_27 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L2455]              __ret_0_ := _decimals_ERC20Detailed[this];
[L2677]  RET         call __var_27 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L2678]  COND FALSE  !(revert)
[L2684]              __var_26 := __var_27 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2685]  COND TRUE   DType[this] == StrikeFarm
[L2686]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, nonlinearMul(_total_StrikeFarm[this], nonlinearPow(10, __var_27 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2263]              __var_16 := null;
[L2264]  COND FALSE  !(!(account_s366 != null))
[L2268]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s366);
[L2506]              c_s533 := (a_s533 + b_s533) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2507]  COND FALSE  !(!(c_s533 >= a_s533))
[L2511]              __ret_0_ := c_s533;
[L2268]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s366);
[L2269]  COND FALSE  !(revert)
[L2272]              _totalSupply_ERC20[this] := __var_17;
[L2273]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s366], amount_s366);
[L2506]              c_s533 := (a_s533 + b_s533) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2507]  COND FALSE  !(!(c_s533 >= a_s533))
[L2511]              __ret_0_ := c_s533;
[L2273]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s366], amount_s366);
[L2274]  COND FALSE  !(revert)
[L2277]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s366];
[L2278]              _balances_ERC20[this][account_s366] := __var_18;
[L2279]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s366];
[L2280]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2686]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, nonlinearMul(_total_StrikeFarm[this], nonlinearPow(10, __var_27 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2687]  COND FALSE  !(revert)
[L2741]  RET         call StrikeFarm_StrikeFarm_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2742]  COND FALSE  !(revert)
[L1025]  RET         call StrikeFarm_StrikeFarm__success(this, msgsender_MSG, msgvalue_MSG);
[L1026]              assume !revert && gas >= 0;
[L4114]  RET         call StrikeFarm_StrikeFarm(this, msgsender_MSG, msgvalue_MSG);
[L4115]              assume !revert && gas >= 0;
[L4118]  CALL        call CorralChoice_StrikeFarm(this);
[L3984]              havoc msgsender_MSG;
[L3985]              havoc msgvalue_MSG;
[L3986]              havoc choice;
[L3987]              havoc __ret_0_totalSupply;
[L3988]              havoc account_s121;
[L3989]              havoc __ret_0_balanceOf;
[L3990]              havoc recipient_s140;
[L3991]              havoc amount_s140;
[L3992]              havoc __ret_0_transfer;
[L3993]              havoc owner_s156;
[L3994]              havoc spender_s156;
[L3995]              havoc __ret_0_allowance;
[L3996]              havoc spender_s175;
[L3997]              havoc amount_s175;
[L3998]              havoc __ret_0_approve;
[L3999]              havoc sender_s211;
[L4000]              havoc recipient_s211;
[L4001]              havoc amount_s211;
[L4002]              havoc __ret_0_transferFrom;
[L4003]              havoc spender_s238;
[L4004]              havoc addedValue_s238;
[L4005]              havoc __ret_0_increaseAllowance;
[L4006]              havoc spender_s266;
[L4007]              havoc subtractedValue_s266;
[L4008]              havoc __ret_0_decreaseAllowance;
[L4009]              havoc name_s483;
[L4010]              havoc symbol_s483;
[L4011]              havoc decimals_s483;
[L4012]              havoc __ret_0_name;
[L4013]              havoc __ret_0_symbol;
[L4014]              havoc __ret_0_decimals;
[L4015]              havoc tmpNow;
[L4016]              havoc gas;
[L4017]              assume gas > 4000000 && gas <= 8000000;
[L4018]              tmpNow := now;
[L4019]              havoc now;
[L4020]              assume now > tmpNow;
[L4021]              assume msgsender_MSG != null;
[L4022]              assume DType[msgsender_MSG] != IERC20;
[L4023]              assume DType[msgsender_MSG] != Context;
[L4024]              assume DType[msgsender_MSG] != ERC20;
[L4025]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4026]              assume DType[msgsender_MSG] != SafeMath;
[L4027]              assume DType[msgsender_MSG] != StrikeFarm;
[L4028]              Alloc[msgsender_MSG] := true;
[L4029]  COND FALSE  !(choice == 11)
[L4035]  COND FALSE  !(choice == 10)
[L4041]  COND FALSE  !(choice == 9)
[L4048]  COND FALSE  !(choice == 8)
[L4054]  COND TRUE   choice == 7
[L4055]              gas := gas - 21000;
[L4056]  COND TRUE   gas >= 0
[L4057]              assume amount_s175 >= 0 && amount_s175 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4058]              assume msgvalue_MSG == 0;
[L4059]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s175, amount_s175);
[L462]               havoc __exception;
[L463]               revert := false;
[L464]   COND FALSE  !(__exception)
[L486]   CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s175, amount_s175);
[L1801]  COND FALSE  !(DType[this] == StrikeFarm)
[L1806]  COND TRUE   DType[this] == ERC20
[L1807]  CALL        call __var_2 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L1601]              __ret_0_ := msgsender_MSG;
[L1807]  RET         call __var_2 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L1808]  COND FALSE  !(revert)
[L1814]  COND TRUE   DType[this] == StrikeFarm
[L1815]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_2, spender_s175, amount_s175);
[L2355]              __var_22 := null;
[L2356]  COND FALSE  !(!(owner_s452 != null))
[L2360]              __var_23 := null;
[L2361]  COND FALSE  !(!(spender_s452 != null))
[L2365]              sum__allowances1[owner_s452] := sum__allowances1[owner_s452] - _allowances_ERC20[this][owner_s452][spender_s452];
[L2366]              _allowances_ERC20[this][owner_s452][spender_s452] := amount_s452;
[L2367]              sum__allowances1[owner_s452] := sum__allowances1[owner_s452] + _allowances_ERC20[this][owner_s452][spender_s452];
[L2368]              assert { :EventEmitted "Approval_ERC20" } true;
[L1815]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_2, spender_s175, amount_s175);
[L1816]  COND FALSE  !(revert)
[L1827]              __ret_0_ := true;
[L486]   RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s175, amount_s175);
[L487]               assume !revert && gas >= 0;
[L4059]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s175, amount_s175);
[L4118]  RET         call CorralChoice_StrikeFarm(this);
[L4118]  CALL        call CorralChoice_StrikeFarm(this);
[L3984]              havoc msgsender_MSG;
[L3985]              havoc msgvalue_MSG;
[L3986]              havoc choice;
[L3987]              havoc __ret_0_totalSupply;
[L3988]              havoc account_s121;
[L3989]              havoc __ret_0_balanceOf;
[L3990]              havoc recipient_s140;
[L3991]              havoc amount_s140;
[L3992]              havoc __ret_0_transfer;
[L3993]              havoc owner_s156;
[L3994]              havoc spender_s156;
[L3995]              havoc __ret_0_allowance;
[L3996]              havoc spender_s175;
[L3997]              havoc amount_s175;
[L3998]              havoc __ret_0_approve;
[L3999]              havoc sender_s211;
[L4000]              havoc recipient_s211;
[L4001]              havoc amount_s211;
[L4002]              havoc __ret_0_transferFrom;
[L4003]              havoc spender_s238;
[L4004]              havoc addedValue_s238;
[L4005]              havoc __ret_0_increaseAllowance;
[L4006]              havoc spender_s266;
[L4007]              havoc subtractedValue_s266;
[L4008]              havoc __ret_0_decreaseAllowance;
[L4009]              havoc name_s483;
[L4010]              havoc symbol_s483;
[L4011]              havoc decimals_s483;
[L4012]              havoc __ret_0_name;
[L4013]              havoc __ret_0_symbol;
[L4014]              havoc __ret_0_decimals;
[L4015]              havoc tmpNow;
[L4016]              havoc gas;
[L4017]              assume gas > 4000000 && gas <= 8000000;
[L4018]              tmpNow := now;
[L4019]              havoc now;
[L4020]              assume now > tmpNow;
[L4021]              assume msgsender_MSG != null;
[L4022]              assume DType[msgsender_MSG] != IERC20;
[L4023]              assume DType[msgsender_MSG] != Context;
[L4024]              assume DType[msgsender_MSG] != ERC20;
[L4025]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4026]              assume DType[msgsender_MSG] != SafeMath;
[L4027]              assume DType[msgsender_MSG] != StrikeFarm;
[L4028]              Alloc[msgsender_MSG] := true;
[L4029]  COND FALSE  !(choice == 11)
[L4035]  COND FALSE  !(choice == 10)
[L4041]  COND FALSE  !(choice == 9)
[L4048]  COND FALSE  !(choice == 8)
[L4054]  COND FALSE  !(choice == 7)
[L4061]  COND TRUE   choice == 6
[L4062]              gas := gas - 21000;
[L4063]  COND TRUE   gas >= 0
[L4064]              assume amount_s211 >= 0 && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4065]              assume msgvalue_MSG == 0;
[L4066]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((sender_s211 == recipient_s211 && (amount_s211 > _balances_ERC20[this][sender_s211] || amount_s211 > _allowances_ERC20[this][sender_s211][msgsender_MSG])) && amount_s211 >= 0) && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s211] >= 0) && _balances_ERC20[this][recipient_s211] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s211] >= 0) && _balances_ERC20[this][sender_s211] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s211][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s211][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L518]               havoc __exception;
[L519]               revert := false;
[L520]   COND FALSE  !(__exception)
[L542]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L1901]  COND TRUE   DType[this] == StrikeFarm
[L1902]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2207]              __var_12 := null;
[L2208]  COND FALSE  !(!(sender_s323 != null))
[L2212]              __var_13 := null;
[L2213]  COND FALSE  !(!(recipient_s323 != null))
[L2217]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, 861085777);
[L2552]  COND FALSE  !(!(b_s576 <= a_s576))
[L2556]              c_s576 := (a_s576 - b_s576) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2557]              __ret_0_ := c_s576;
[L2217]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, 861085777);
[L2218]  COND FALSE  !(revert)
[L2221]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2222]              _balances_ERC20[this][sender_s323] := __var_14;
[L2223]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2224]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2506]              c_s533 := (a_s533 + b_s533) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2507]  COND FALSE  !(!(c_s533 >= a_s533))
[L2511]              __ret_0_ := c_s533;
[L2224]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2225]  COND FALSE  !(revert)
[L2228]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2229]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2230]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2231]              assert { :EventEmitted "Transfer_ERC20" } true;
[L1902]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L1903]  COND FALSE  !(revert)
[L1914]  COND TRUE   DType[this] == StrikeFarm
[L1915]  CALL        call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L1601]              __ret_0_ := msgsender_MSG;
[L1915]  RET         call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L1916]  COND FALSE  !(revert)
[L1927]  COND FALSE  !(DType[this] == StrikeFarm)
[L1932]  COND TRUE   DType[this] == ERC20
[L1933]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L1601]              __ret_0_ := msgsender_MSG;
[L1933]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L1934]  COND FALSE  !(revert)
[L1940]  CALL        call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, 872302118);
[L2552]  COND FALSE  !(!(b_s576 <= a_s576))
[L2556]              c_s576 := (a_s576 - b_s576) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2557]              __ret_0_ := c_s576;
[L1940]  RET         call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, 872302118);
[L1941]  COND FALSE  !(revert)
[L1944]  COND TRUE   DType[this] == StrikeFarm
[L1945]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L2355]              __var_22 := null;
[L2356]  COND FALSE  !(!(owner_s452 != null))
[L2360]              __var_23 := null;
[L2361]  COND FALSE  !(!(spender_s452 != null))
[L2365]              sum__allowances1[owner_s452] := sum__allowances1[owner_s452] - _allowances_ERC20[this][owner_s452][spender_s452];
[L2366]              _allowances_ERC20[this][owner_s452][spender_s452] := amount_s452;
[L2367]              sum__allowances1[owner_s452] := sum__allowances1[owner_s452] + _allowances_ERC20[this][owner_s452][spender_s452];
[L2368]              assert { :EventEmitted "Approval_ERC20" } true;
[L1945]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L1946]  COND FALSE  !(revert)
[L1957]              __ret_0_ := true;
[L542]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L543]               assume !revert && gas >= 0;
[L4066]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L4118]  RET         call CorralChoice_StrikeFarm(this);

Loop:
[L4118]  CALL        call CorralChoice_StrikeFarm(this);
[L3984]              havoc msgsender_MSG;
[L3985]              havoc msgvalue_MSG;
[L3986]              havoc choice;
[L3987]              havoc __ret_0_totalSupply;
[L3988]              havoc account_s121;
[L3989]              havoc __ret_0_balanceOf;
[L3990]              havoc recipient_s140;
[L3991]              havoc amount_s140;
[L3992]              havoc __ret_0_transfer;
[L3993]              havoc owner_s156;
[L3994]              havoc spender_s156;
[L3995]              havoc __ret_0_allowance;
[L3996]              havoc spender_s175;
[L3997]              havoc amount_s175;
[L3998]              havoc __ret_0_approve;
[L3999]              havoc sender_s211;
[L4000]              havoc recipient_s211;
[L4001]              havoc amount_s211;
[L4002]              havoc __ret_0_transferFrom;
[L4003]              havoc spender_s238;
[L4004]              havoc addedValue_s238;
[L4005]              havoc __ret_0_increaseAllowance;
[L4006]              havoc spender_s266;
[L4007]              havoc subtractedValue_s266;
[L4008]              havoc __ret_0_decreaseAllowance;
[L4009]              havoc name_s483;
[L4010]              havoc symbol_s483;
[L4011]              havoc decimals_s483;
[L4012]              havoc __ret_0_name;
[L4013]              havoc __ret_0_symbol;
[L4014]              havoc __ret_0_decimals;
[L4015]              havoc tmpNow;
[L4016]              havoc gas;
[L4017]              assume gas > 4000000 && gas <= 8000000;
[L4018]              tmpNow := now;
[L4019]              havoc now;
[L4020]              assume now > tmpNow;
[L4021]              assume msgsender_MSG != null;
[L4022]              assume DType[msgsender_MSG] != IERC20;
[L4023]              assume DType[msgsender_MSG] != Context;
[L4024]              assume DType[msgsender_MSG] != ERC20;
[L4025]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4026]              assume DType[msgsender_MSG] != SafeMath;
[L4027]              assume DType[msgsender_MSG] != StrikeFarm;
[L4028]              Alloc[msgsender_MSG] := true;
[L4029]  COND FALSE  !(choice == 11)
[L4035]  COND FALSE  !(choice == 10)
[L4041]  COND FALSE  !(choice == 9)
[L4048]  COND FALSE  !(choice == 8)
[L4054]  COND FALSE  !(choice == 7)
[L4061]  COND TRUE   choice == 6
[L4062]              gas := gas - 21000;
[L4063]  COND TRUE   gas >= 0
[L4064]              assume amount_s211 >= 0 && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4065]              assume msgvalue_MSG == 0;
[L4066]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((sender_s211 == recipient_s211 && (amount_s211 > _balances_ERC20[this][sender_s211] || amount_s211 > _allowances_ERC20[this][sender_s211][msgsender_MSG])) && amount_s211 >= 0) && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s211] >= 0) && _balances_ERC20[this][recipient_s211] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s211] >= 0) && _balances_ERC20[this][sender_s211] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s211][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s211][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L518]               havoc __exception;
[L519]               revert := false;
[L520]   COND FALSE  !(__exception)
[L542]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L1901]  COND TRUE   DType[this] == StrikeFarm
[L1902]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2207]              __var_12 := null;
[L2208]  COND FALSE  !(!(sender_s323 != null))
[L2212]              __var_13 := null;
[L2213]  COND FALSE  !(!(recipient_s323 != null))
[L2217]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, 861085777);
[L2552]  COND FALSE  !(!(b_s576 <= a_s576))
[L2556]              c_s576 := (a_s576 - b_s576) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2557]              __ret_0_ := c_s576;
[L2217]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, 861085777);
[L2218]  COND FALSE  !(revert)
[L2221]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2222]              _balances_ERC20[this][sender_s323] := __var_14;
[L2223]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2224]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2506]              c_s533 := (a_s533 + b_s533) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2507]  COND FALSE  !(!(c_s533 >= a_s533))
[L2511]              __ret_0_ := c_s533;
[L2224]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2225]  COND FALSE  !(revert)
[L2228]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2229]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2230]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2231]              assert { :EventEmitted "Transfer_ERC20" } true;
[L1902]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L1903]  COND FALSE  !(revert)
[L1914]  COND TRUE   DType[this] == StrikeFarm
[L1915]  CALL        call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L1601]              __ret_0_ := msgsender_MSG;
[L1915]  RET         call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L1916]  COND FALSE  !(revert)
[L1927]  COND FALSE  !(DType[this] == StrikeFarm)
[L1932]  COND TRUE   DType[this] == ERC20
[L1933]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L1601]              __ret_0_ := msgsender_MSG;
[L1933]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L1934]  COND FALSE  !(revert)
[L1940]  CALL        call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, 872302118);
[L2552]  COND FALSE  !(!(b_s576 <= a_s576))
[L2556]              c_s576 := (a_s576 - b_s576) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2557]              __ret_0_ := c_s576;
[L1940]  RET         call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, 872302118);
[L1941]  COND FALSE  !(revert)
[L1944]  COND TRUE   DType[this] == StrikeFarm
[L1945]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L2355]              __var_22 := null;
[L2356]  COND FALSE  !(!(owner_s452 != null))
[L2360]              __var_23 := null;
[L2361]  COND FALSE  !(!(spender_s452 != null))
[L2365]              sum__allowances1[owner_s452] := sum__allowances1[owner_s452] - _allowances_ERC20[this][owner_s452][spender_s452];
[L2366]              _allowances_ERC20[this][owner_s452][spender_s452] := amount_s452;
[L2367]              sum__allowances1[owner_s452] := sum__allowances1[owner_s452] + _allowances_ERC20[this][owner_s452][spender_s452];
[L2368]              assert { :EventEmitted "Approval_ERC20" } true;
[L1945]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L1946]  COND FALSE  !(revert)
[L1957]              __ret_0_ := true;
[L542]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L543]               assume !revert && gas >= 0;
[L4066]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L4118]  RET         call CorralChoice_StrikeFarm(this);

[2020-11-25 05:54:29,301 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 05:54:29,301 INFO  L82        PathProgramCache]: Analyzing trace with hash 1508300818, now seen corresponding path program 1 times
[2020-11-25 05:54:29,302 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 05:54:29,314 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 05:54:29,367 INFO  L134       CoverageAnalysis]: Checked inductivity of 105 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 104 trivial. 0 not checked.
[2020-11-25 05:54:29,367 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 05:54:29,367 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 05:54:29,368 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 05:54:29,368 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 05:54:29,368 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 05:54:29,368 INFO  L87              Difference]: Start difference. First operand 2093 states and 2367 transitions. cyclomatic complexity: 277 Second operand 3 states.
[2020-11-25 05:54:29,383 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 05:54:29,383 INFO  L93              Difference]: Finished difference Result 2101 states and 2375 transitions.
[2020-11-25 05:54:29,384 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 05:54:29,384 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2101 states and 2375 transitions.
[2020-11-25 05:54:29,387 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 05:54:29,392 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2101 states to 2101 states and 2375 transitions.
[2020-11-25 05:54:29,392 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 554
[2020-11-25 05:54:29,392 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 554
[2020-11-25 05:54:29,392 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2101 states and 2375 transitions.
[2020-11-25 05:54:29,394 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 05:54:29,394 INFO  L728         BuchiCegarLoop]: Abstraction has 2101 states and 2375 transitions.
[2020-11-25 05:54:29,396 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2101 states and 2375 transitions.
[2020-11-25 05:54:29,406 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2101 to 2095.
[2020-11-25 05:54:29,406 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2095 states.
[2020-11-25 05:54:29,407 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2095 states to 2095 states and 2369 transitions.
[2020-11-25 05:54:29,408 INFO  L751         BuchiCegarLoop]: Abstraction has 2095 states and 2369 transitions.
[2020-11-25 05:54:29,408 INFO  L631         BuchiCegarLoop]: Abstraction has 2095 states and 2369 transitions.
[2020-11-25 05:54:29,408 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 05:54:29,408 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2095 states and 2369 transitions.
[2020-11-25 05:54:29,410 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 05:54:29,410 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 05:54:29,410 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 05:54:29,411 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 05:54:29,411 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC200 := false;
[L2]                 call_transferFrom_ERC200 := false;
[L2]     CALL        call main();
[L4108]              assume null == 0;
[L4109]  CALL        call this := FreshRefGenerator__success();
[L1523]              havoc newRef;
[L1524]              assume Alloc[newRef] == false;
[L1525]              Alloc[newRef] := true;
[L1526]              assume newRef != null;
[L4109]  RET         call this := FreshRefGenerator__success();
[L4110]              assume now >= 0;
[L4111]              assume DType[this] == StrikeFarm;
[L4112]              assume msgvalue_MSG == 0;
[L4113]              gas := gas - 53000;
[L4114]  CALL        call StrikeFarm_StrikeFarm(this, msgsender_MSG, msgvalue_MSG);
[L1001]              havoc __exception;
[L1002]              revert := false;
[L1003]  COND FALSE  !(__exception)
[L1025]  CALL        call StrikeFarm_StrikeFarm__success(this, msgsender_MSG, msgvalue_MSG);
[L2725]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L1587]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1572]              assume msgsender_MSG != null;
[L1573]              Balance[this] := 0;
[L1587]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1588]  COND FALSE  !(revert)
[L2725]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2726]  COND FALSE  !(revert)
[L2729]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1555]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1540]              assume msgsender_MSG != null;
[L1541]              Balance[this] := 0;
[L1555]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1556]  COND FALSE  !(revert)
[L2729]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2730]  COND FALSE  !(revert)
[L2733]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1649]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L1587]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1572]              assume msgsender_MSG != null;
[L1573]              Balance[this] := 0;
[L1587]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1588]  COND FALSE  !(revert)
[L1649]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L1650]  COND FALSE  !(revert)
[L1653]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1555]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1540]              assume msgsender_MSG != null;
[L1541]              Balance[this] := 0;
[L1555]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1556]  COND FALSE  !(revert)
[L1653]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1654]  COND FALSE  !(revert)
[L1657]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1621]              assume msgsender_MSG != null;
[L1622]              Balance[this] := 0;
[L1623]              _balances_ERC20[this] := zeroRefintArr();
[L1624]              sum__balances0[this] := 0;
[L1625]              _allowances_ERC20[this] := zeroRefRefintArr();
[L1626]              sum__allowances1[this] := 0;
[L1627]              _totalSupply_ERC20[this] := 0;
[L1657]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1658]  COND FALSE  !(revert)
[L2733]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]  COND FALSE  !(revert)
[L2737]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 879309088, -1713371657, 18);
[L2413]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1555]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1540]              assume msgsender_MSG != null;
[L1541]              Balance[this] := 0;
[L1555]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1556]  COND FALSE  !(revert)
[L2413]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2414]  COND FALSE  !(revert)
[L2417]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s483, symbol_s483, decimals_s483);
[L2388]              assume msgsender_MSG != null;
[L2389]              Balance[this] := 0;
[L2390]              _name_ERC20Detailed[this] := -1368110498;
[L2391]              _symbol_ERC20Detailed[this] := -1368110498;
[L2392]              _decimals_ERC20Detailed[this] := 0;
[L2394]              _name_ERC20Detailed[this] := name_s483;
[L2395]              _symbol_ERC20Detailed[this] := symbol_s483;
[L2396]              _decimals_ERC20Detailed[this] := decimals_s483;
[L2417]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s483, symbol_s483, decimals_s483);
[L2418]  COND FALSE  !(revert)
[L2737]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 879309088, -1713371657, 18);
[L2738]  COND FALSE  !(revert)
[L2741]  CALL        call StrikeFarm_StrikeFarm_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2672]              assume msgsender_MSG != null;
[L2673]              Balance[this] := 0;
[L2674]              _total_StrikeFarm[this] := 11000;
[L2676]  COND TRUE   DType[this] == StrikeFarm
[L2677]  CALL        call __var_27 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L2455]              __ret_0_ := _decimals_ERC20Detailed[this];
[L2677]  RET         call __var_27 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L2678]  COND FALSE  !(revert)
[L2684]              __var_26 := __var_27 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2685]  COND TRUE   DType[this] == StrikeFarm
[L2686]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, nonlinearMul(_total_StrikeFarm[this], nonlinearPow(10, __var_27 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2263]              __var_16 := null;
[L2264]  COND FALSE  !(!(account_s366 != null))
[L2268]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s366);
[L2506]              c_s533 := (a_s533 + b_s533) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2507]  COND FALSE  !(!(c_s533 >= a_s533))
[L2511]              __ret_0_ := c_s533;
[L2268]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s366);
[L2269]  COND FALSE  !(revert)
[L2272]              _totalSupply_ERC20[this] := __var_17;
[L2273]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s366], amount_s366);
[L2506]              c_s533 := (a_s533 + b_s533) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2507]  COND FALSE  !(!(c_s533 >= a_s533))
[L2511]              __ret_0_ := c_s533;
[L2273]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s366], amount_s366);
[L2274]  COND FALSE  !(revert)
[L2277]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s366];
[L2278]              _balances_ERC20[this][account_s366] := __var_18;
[L2279]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s366];
[L2280]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2686]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, nonlinearMul(_total_StrikeFarm[this], nonlinearPow(10, __var_27 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2687]  COND FALSE  !(revert)
[L2741]  RET         call StrikeFarm_StrikeFarm_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2742]  COND FALSE  !(revert)
[L1025]  RET         call StrikeFarm_StrikeFarm__success(this, msgsender_MSG, msgvalue_MSG);
[L1026]              assume !revert && gas >= 0;
[L4114]  RET         call StrikeFarm_StrikeFarm(this, msgsender_MSG, msgvalue_MSG);
[L4115]              assume !revert && gas >= 0;
[L4118]  CALL        call CorralChoice_StrikeFarm(this);
[L3984]              havoc msgsender_MSG;
[L3985]              havoc msgvalue_MSG;
[L3986]              havoc choice;
[L3987]              havoc __ret_0_totalSupply;
[L3988]              havoc account_s121;
[L3989]              havoc __ret_0_balanceOf;
[L3990]              havoc recipient_s140;
[L3991]              havoc amount_s140;
[L3992]              havoc __ret_0_transfer;
[L3993]              havoc owner_s156;
[L3994]              havoc spender_s156;
[L3995]              havoc __ret_0_allowance;
[L3996]              havoc spender_s175;
[L3997]              havoc amount_s175;
[L3998]              havoc __ret_0_approve;
[L3999]              havoc sender_s211;
[L4000]              havoc recipient_s211;
[L4001]              havoc amount_s211;
[L4002]              havoc __ret_0_transferFrom;
[L4003]              havoc spender_s238;
[L4004]              havoc addedValue_s238;
[L4005]              havoc __ret_0_increaseAllowance;
[L4006]              havoc spender_s266;
[L4007]              havoc subtractedValue_s266;
[L4008]              havoc __ret_0_decreaseAllowance;
[L4009]              havoc name_s483;
[L4010]              havoc symbol_s483;
[L4011]              havoc decimals_s483;
[L4012]              havoc __ret_0_name;
[L4013]              havoc __ret_0_symbol;
[L4014]              havoc __ret_0_decimals;
[L4015]              havoc tmpNow;
[L4016]              havoc gas;
[L4017]              assume gas > 4000000 && gas <= 8000000;
[L4018]              tmpNow := now;
[L4019]              havoc now;
[L4020]              assume now > tmpNow;
[L4021]              assume msgsender_MSG != null;
[L4022]              assume DType[msgsender_MSG] != IERC20;
[L4023]              assume DType[msgsender_MSG] != Context;
[L4024]              assume DType[msgsender_MSG] != ERC20;
[L4025]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4026]              assume DType[msgsender_MSG] != SafeMath;
[L4027]              assume DType[msgsender_MSG] != StrikeFarm;
[L4028]              Alloc[msgsender_MSG] := true;
[L4029]  COND FALSE  !(choice == 11)
[L4035]  COND FALSE  !(choice == 10)
[L4041]  COND FALSE  !(choice == 9)
[L4048]  COND FALSE  !(choice == 8)
[L4054]  COND TRUE   choice == 7
[L4055]              gas := gas - 21000;
[L4056]  COND TRUE   gas >= 0
[L4057]              assume amount_s175 >= 0 && amount_s175 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4058]              assume msgvalue_MSG == 0;
[L4059]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s175, amount_s175);
[L462]               havoc __exception;
[L463]               revert := false;
[L464]   COND FALSE  !(__exception)
[L486]   CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s175, amount_s175);
[L1801]  COND TRUE   DType[this] == StrikeFarm
[L1802]  CALL        call __var_2 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L1601]              __ret_0_ := msgsender_MSG;
[L1802]  RET         call __var_2 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L1803]  COND FALSE  !(revert)
[L1814]  COND TRUE   DType[this] == StrikeFarm
[L1815]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_2, spender_s175, amount_s175);
[L2355]              __var_22 := null;
[L2356]  COND FALSE  !(!(owner_s452 != null))
[L2360]              __var_23 := null;
[L2361]  COND FALSE  !(!(spender_s452 != null))
[L2365]              sum__allowances1[owner_s452] := sum__allowances1[owner_s452] - _allowances_ERC20[this][owner_s452][spender_s452];
[L2366]              _allowances_ERC20[this][owner_s452][spender_s452] := amount_s452;
[L2367]              sum__allowances1[owner_s452] := sum__allowances1[owner_s452] + _allowances_ERC20[this][owner_s452][spender_s452];
[L2368]              assert { :EventEmitted "Approval_ERC20" } true;
[L1815]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_2, spender_s175, amount_s175);
[L1816]  COND FALSE  !(revert)
[L1827]              __ret_0_ := true;
[L486]   RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s175, amount_s175);
[L487]               assume !revert && gas >= 0;
[L4059]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s175, amount_s175);
[L4118]  RET         call CorralChoice_StrikeFarm(this);
[L4118]  CALL        call CorralChoice_StrikeFarm(this);
[L3984]              havoc msgsender_MSG;
[L3985]              havoc msgvalue_MSG;
[L3986]              havoc choice;
[L3987]              havoc __ret_0_totalSupply;
[L3988]              havoc account_s121;
[L3989]              havoc __ret_0_balanceOf;
[L3990]              havoc recipient_s140;
[L3991]              havoc amount_s140;
[L3992]              havoc __ret_0_transfer;
[L3993]              havoc owner_s156;
[L3994]              havoc spender_s156;
[L3995]              havoc __ret_0_allowance;
[L3996]              havoc spender_s175;
[L3997]              havoc amount_s175;
[L3998]              havoc __ret_0_approve;
[L3999]              havoc sender_s211;
[L4000]              havoc recipient_s211;
[L4001]              havoc amount_s211;
[L4002]              havoc __ret_0_transferFrom;
[L4003]              havoc spender_s238;
[L4004]              havoc addedValue_s238;
[L4005]              havoc __ret_0_increaseAllowance;
[L4006]              havoc spender_s266;
[L4007]              havoc subtractedValue_s266;
[L4008]              havoc __ret_0_decreaseAllowance;
[L4009]              havoc name_s483;
[L4010]              havoc symbol_s483;
[L4011]              havoc decimals_s483;
[L4012]              havoc __ret_0_name;
[L4013]              havoc __ret_0_symbol;
[L4014]              havoc __ret_0_decimals;
[L4015]              havoc tmpNow;
[L4016]              havoc gas;
[L4017]              assume gas > 4000000 && gas <= 8000000;
[L4018]              tmpNow := now;
[L4019]              havoc now;
[L4020]              assume now > tmpNow;
[L4021]              assume msgsender_MSG != null;
[L4022]              assume DType[msgsender_MSG] != IERC20;
[L4023]              assume DType[msgsender_MSG] != Context;
[L4024]              assume DType[msgsender_MSG] != ERC20;
[L4025]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4026]              assume DType[msgsender_MSG] != SafeMath;
[L4027]              assume DType[msgsender_MSG] != StrikeFarm;
[L4028]              Alloc[msgsender_MSG] := true;
[L4029]  COND FALSE  !(choice == 11)
[L4035]  COND FALSE  !(choice == 10)
[L4041]  COND FALSE  !(choice == 9)
[L4048]  COND FALSE  !(choice == 8)
[L4054]  COND FALSE  !(choice == 7)
[L4061]  COND TRUE   choice == 6
[L4062]              gas := gas - 21000;
[L4063]  COND TRUE   gas >= 0
[L4064]              assume amount_s211 >= 0 && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4065]              assume msgvalue_MSG == 0;
[L4066]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((sender_s211 == recipient_s211 && (amount_s211 > _balances_ERC20[this][sender_s211] || amount_s211 > _allowances_ERC20[this][sender_s211][msgsender_MSG])) && amount_s211 >= 0) && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s211] >= 0) && _balances_ERC20[this][recipient_s211] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s211] >= 0) && _balances_ERC20[this][sender_s211] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s211][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s211][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L518]               havoc __exception;
[L519]               revert := false;
[L520]   COND FALSE  !(__exception)
[L542]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L1901]  COND TRUE   DType[this] == StrikeFarm
[L1902]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2207]              __var_12 := null;
[L2208]  COND FALSE  !(!(sender_s323 != null))
[L2212]              __var_13 := null;
[L2213]  COND FALSE  !(!(recipient_s323 != null))
[L2217]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, 861085777);
[L2552]  COND FALSE  !(!(b_s576 <= a_s576))
[L2556]              c_s576 := (a_s576 - b_s576) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2557]              __ret_0_ := c_s576;
[L2217]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, 861085777);
[L2218]  COND FALSE  !(revert)
[L2221]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2222]              _balances_ERC20[this][sender_s323] := __var_14;
[L2223]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2224]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2506]              c_s533 := (a_s533 + b_s533) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2507]  COND FALSE  !(!(c_s533 >= a_s533))
[L2511]              __ret_0_ := c_s533;
[L2224]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2225]  COND FALSE  !(revert)
[L2228]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2229]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2230]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2231]              assert { :EventEmitted "Transfer_ERC20" } true;
[L1902]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L1903]  COND FALSE  !(revert)
[L1914]  COND TRUE   DType[this] == StrikeFarm
[L1915]  CALL        call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L1601]              __ret_0_ := msgsender_MSG;
[L1915]  RET         call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L1916]  COND FALSE  !(revert)
[L1927]  COND FALSE  !(DType[this] == StrikeFarm)
[L1932]  COND TRUE   DType[this] == ERC20
[L1933]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L1601]              __ret_0_ := msgsender_MSG;
[L1933]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L1934]  COND FALSE  !(revert)
[L1940]  CALL        call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, 872302118);
[L2552]  COND FALSE  !(!(b_s576 <= a_s576))
[L2556]              c_s576 := (a_s576 - b_s576) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2557]              __ret_0_ := c_s576;
[L1940]  RET         call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, 872302118);
[L1941]  COND FALSE  !(revert)
[L1944]  COND TRUE   DType[this] == StrikeFarm
[L1945]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L2355]              __var_22 := null;
[L2356]  COND FALSE  !(!(owner_s452 != null))
[L2360]              __var_23 := null;
[L2361]  COND FALSE  !(!(spender_s452 != null))
[L2365]              sum__allowances1[owner_s452] := sum__allowances1[owner_s452] - _allowances_ERC20[this][owner_s452][spender_s452];
[L2366]              _allowances_ERC20[this][owner_s452][spender_s452] := amount_s452;
[L2367]              sum__allowances1[owner_s452] := sum__allowances1[owner_s452] + _allowances_ERC20[this][owner_s452][spender_s452];
[L2368]              assert { :EventEmitted "Approval_ERC20" } true;
[L1945]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L1946]  COND FALSE  !(revert)
[L1957]              __ret_0_ := true;
[L542]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L543]               assume !revert && gas >= 0;
[L4066]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L4118]  RET         call CorralChoice_StrikeFarm(this);

Loop:
[L4118]  CALL        call CorralChoice_StrikeFarm(this);
[L3984]              havoc msgsender_MSG;
[L3985]              havoc msgvalue_MSG;
[L3986]              havoc choice;
[L3987]              havoc __ret_0_totalSupply;
[L3988]              havoc account_s121;
[L3989]              havoc __ret_0_balanceOf;
[L3990]              havoc recipient_s140;
[L3991]              havoc amount_s140;
[L3992]              havoc __ret_0_transfer;
[L3993]              havoc owner_s156;
[L3994]              havoc spender_s156;
[L3995]              havoc __ret_0_allowance;
[L3996]              havoc spender_s175;
[L3997]              havoc amount_s175;
[L3998]              havoc __ret_0_approve;
[L3999]              havoc sender_s211;
[L4000]              havoc recipient_s211;
[L4001]              havoc amount_s211;
[L4002]              havoc __ret_0_transferFrom;
[L4003]              havoc spender_s238;
[L4004]              havoc addedValue_s238;
[L4005]              havoc __ret_0_increaseAllowance;
[L4006]              havoc spender_s266;
[L4007]              havoc subtractedValue_s266;
[L4008]              havoc __ret_0_decreaseAllowance;
[L4009]              havoc name_s483;
[L4010]              havoc symbol_s483;
[L4011]              havoc decimals_s483;
[L4012]              havoc __ret_0_name;
[L4013]              havoc __ret_0_symbol;
[L4014]              havoc __ret_0_decimals;
[L4015]              havoc tmpNow;
[L4016]              havoc gas;
[L4017]              assume gas > 4000000 && gas <= 8000000;
[L4018]              tmpNow := now;
[L4019]              havoc now;
[L4020]              assume now > tmpNow;
[L4021]              assume msgsender_MSG != null;
[L4022]              assume DType[msgsender_MSG] != IERC20;
[L4023]              assume DType[msgsender_MSG] != Context;
[L4024]              assume DType[msgsender_MSG] != ERC20;
[L4025]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4026]              assume DType[msgsender_MSG] != SafeMath;
[L4027]              assume DType[msgsender_MSG] != StrikeFarm;
[L4028]              Alloc[msgsender_MSG] := true;
[L4029]  COND TRUE   choice == 11
[L4030]              gas := gas - 21000;
[L4031]  COND FALSE  !(gas >= 0)
[L4118]  RET         call CorralChoice_StrikeFarm(this);

[2020-11-25 05:54:29,415 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 05:54:29,415 INFO  L82        PathProgramCache]: Analyzing trace with hash -974117262, now seen corresponding path program 1 times
[2020-11-25 05:54:29,415 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 05:54:29,427 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 05:54:29,481 INFO  L134       CoverageAnalysis]: Checked inductivity of 105 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 105 trivial. 0 not checked.
[2020-11-25 05:54:29,481 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 05:54:29,481 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 05:54:29,481 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 05:54:29,482 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 05:54:29,482 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 05:54:29,482 INFO  L87              Difference]: Start difference. First operand 2095 states and 2369 transitions. cyclomatic complexity: 277 Second operand 3 states.
[2020-11-25 05:54:29,498 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 05:54:29,498 INFO  L93              Difference]: Finished difference Result 2113 states and 2391 transitions.
[2020-11-25 05:54:29,498 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 05:54:29,498 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2113 states and 2391 transitions.
[2020-11-25 05:54:29,501 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 05:54:29,505 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2113 states to 2113 states and 2391 transitions.
[2020-11-25 05:54:29,506 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 557
[2020-11-25 05:54:29,506 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 557
[2020-11-25 05:54:29,506 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2113 states and 2391 transitions.
[2020-11-25 05:54:29,508 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 05:54:29,508 INFO  L728         BuchiCegarLoop]: Abstraction has 2113 states and 2391 transitions.
[2020-11-25 05:54:29,509 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2113 states and 2391 transitions.
[2020-11-25 05:54:29,519 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2113 to 2107.
[2020-11-25 05:54:29,520 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2107 states.
[2020-11-25 05:54:29,521 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2107 states to 2107 states and 2383 transitions.
[2020-11-25 05:54:29,529 INFO  L751         BuchiCegarLoop]: Abstraction has 2107 states and 2383 transitions.
[2020-11-25 05:54:29,529 INFO  L631         BuchiCegarLoop]: Abstraction has 2107 states and 2383 transitions.
[2020-11-25 05:54:29,529 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 05:54:29,529 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2107 states and 2383 transitions.
[2020-11-25 05:54:29,532 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 05:54:29,532 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 05:54:29,532 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 05:54:29,533 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 05:54:29,533 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC200 := false;
[L2]                 call_transferFrom_ERC200 := false;
[L2]     CALL        call main();
[L4108]              assume null == 0;
[L4109]  CALL        call this := FreshRefGenerator__success();
[L1523]              havoc newRef;
[L1524]              assume Alloc[newRef] == false;
[L1525]              Alloc[newRef] := true;
[L1526]              assume newRef != null;
[L4109]  RET         call this := FreshRefGenerator__success();
[L4110]              assume now >= 0;
[L4111]              assume DType[this] == StrikeFarm;
[L4112]              assume msgvalue_MSG == 0;
[L4113]              gas := gas - 53000;
[L4114]  CALL        call StrikeFarm_StrikeFarm(this, msgsender_MSG, msgvalue_MSG);
[L1001]              havoc __exception;
[L1002]              revert := false;
[L1003]  COND FALSE  !(__exception)
[L1025]  CALL        call StrikeFarm_StrikeFarm__success(this, msgsender_MSG, msgvalue_MSG);
[L2725]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L1587]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1572]              assume msgsender_MSG != null;
[L1573]              Balance[this] := 0;
[L1587]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1588]  COND FALSE  !(revert)
[L2725]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2726]  COND FALSE  !(revert)
[L2729]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1555]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1540]              assume msgsender_MSG != null;
[L1541]              Balance[this] := 0;
[L1555]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1556]  COND FALSE  !(revert)
[L2729]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2730]  COND FALSE  !(revert)
[L2733]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1649]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L1587]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1572]              assume msgsender_MSG != null;
[L1573]              Balance[this] := 0;
[L1587]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1588]  COND FALSE  !(revert)
[L1649]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L1650]  COND FALSE  !(revert)
[L1653]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1555]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1540]              assume msgsender_MSG != null;
[L1541]              Balance[this] := 0;
[L1555]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1556]  COND FALSE  !(revert)
[L1653]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1654]  COND FALSE  !(revert)
[L1657]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1621]              assume msgsender_MSG != null;
[L1622]              Balance[this] := 0;
[L1623]              _balances_ERC20[this] := zeroRefintArr();
[L1624]              sum__balances0[this] := 0;
[L1625]              _allowances_ERC20[this] := zeroRefRefintArr();
[L1626]              sum__allowances1[this] := 0;
[L1627]              _totalSupply_ERC20[this] := 0;
[L1657]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1658]  COND FALSE  !(revert)
[L2733]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]  COND FALSE  !(revert)
[L2737]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 879309088, -1713371657, 18);
[L2413]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1555]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1540]              assume msgsender_MSG != null;
[L1541]              Balance[this] := 0;
[L1555]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1556]  COND FALSE  !(revert)
[L2413]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2414]  COND FALSE  !(revert)
[L2417]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s483, symbol_s483, decimals_s483);
[L2388]              assume msgsender_MSG != null;
[L2389]              Balance[this] := 0;
[L2390]              _name_ERC20Detailed[this] := -1368110498;
[L2391]              _symbol_ERC20Detailed[this] := -1368110498;
[L2392]              _decimals_ERC20Detailed[this] := 0;
[L2394]              _name_ERC20Detailed[this] := name_s483;
[L2395]              _symbol_ERC20Detailed[this] := symbol_s483;
[L2396]              _decimals_ERC20Detailed[this] := decimals_s483;
[L2417]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s483, symbol_s483, decimals_s483);
[L2418]  COND FALSE  !(revert)
[L2737]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 879309088, -1713371657, 18);
[L2738]  COND FALSE  !(revert)
[L2741]  CALL        call StrikeFarm_StrikeFarm_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2672]              assume msgsender_MSG != null;
[L2673]              Balance[this] := 0;
[L2674]              _total_StrikeFarm[this] := 11000;
[L2676]  COND TRUE   DType[this] == StrikeFarm
[L2677]  CALL        call __var_27 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L2455]              __ret_0_ := _decimals_ERC20Detailed[this];
[L2677]  RET         call __var_27 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L2678]  COND FALSE  !(revert)
[L2684]              __var_26 := __var_27 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2685]  COND TRUE   DType[this] == StrikeFarm
[L2686]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, nonlinearMul(_total_StrikeFarm[this], nonlinearPow(10, __var_27 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2263]              __var_16 := null;
[L2264]  COND FALSE  !(!(account_s366 != null))
[L2268]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s366);
[L2506]              c_s533 := (a_s533 + b_s533) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2507]  COND FALSE  !(!(c_s533 >= a_s533))
[L2511]              __ret_0_ := c_s533;
[L2268]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s366);
[L2269]  COND FALSE  !(revert)
[L2272]              _totalSupply_ERC20[this] := __var_17;
[L2273]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s366], amount_s366);
[L2506]              c_s533 := (a_s533 + b_s533) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2507]  COND FALSE  !(!(c_s533 >= a_s533))
[L2511]              __ret_0_ := c_s533;
[L2273]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s366], amount_s366);
[L2274]  COND FALSE  !(revert)
[L2277]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s366];
[L2278]              _balances_ERC20[this][account_s366] := __var_18;
[L2279]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s366];
[L2280]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2686]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, nonlinearMul(_total_StrikeFarm[this], nonlinearPow(10, __var_27 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2687]  COND FALSE  !(revert)
[L2741]  RET         call StrikeFarm_StrikeFarm_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2742]  COND FALSE  !(revert)
[L1025]  RET         call StrikeFarm_StrikeFarm__success(this, msgsender_MSG, msgvalue_MSG);
[L1026]              assume !revert && gas >= 0;
[L4114]  RET         call StrikeFarm_StrikeFarm(this, msgsender_MSG, msgvalue_MSG);
[L4115]              assume !revert && gas >= 0;
[L4118]  CALL        call CorralChoice_StrikeFarm(this);
[L3984]              havoc msgsender_MSG;
[L3985]              havoc msgvalue_MSG;
[L3986]              havoc choice;
[L3987]              havoc __ret_0_totalSupply;
[L3988]              havoc account_s121;
[L3989]              havoc __ret_0_balanceOf;
[L3990]              havoc recipient_s140;
[L3991]              havoc amount_s140;
[L3992]              havoc __ret_0_transfer;
[L3993]              havoc owner_s156;
[L3994]              havoc spender_s156;
[L3995]              havoc __ret_0_allowance;
[L3996]              havoc spender_s175;
[L3997]              havoc amount_s175;
[L3998]              havoc __ret_0_approve;
[L3999]              havoc sender_s211;
[L4000]              havoc recipient_s211;
[L4001]              havoc amount_s211;
[L4002]              havoc __ret_0_transferFrom;
[L4003]              havoc spender_s238;
[L4004]              havoc addedValue_s238;
[L4005]              havoc __ret_0_increaseAllowance;
[L4006]              havoc spender_s266;
[L4007]              havoc subtractedValue_s266;
[L4008]              havoc __ret_0_decreaseAllowance;
[L4009]              havoc name_s483;
[L4010]              havoc symbol_s483;
[L4011]              havoc decimals_s483;
[L4012]              havoc __ret_0_name;
[L4013]              havoc __ret_0_symbol;
[L4014]              havoc __ret_0_decimals;
[L4015]              havoc tmpNow;
[L4016]              havoc gas;
[L4017]              assume gas > 4000000 && gas <= 8000000;
[L4018]              tmpNow := now;
[L4019]              havoc now;
[L4020]              assume now > tmpNow;
[L4021]              assume msgsender_MSG != null;
[L4022]              assume DType[msgsender_MSG] != IERC20;
[L4023]              assume DType[msgsender_MSG] != Context;
[L4024]              assume DType[msgsender_MSG] != ERC20;
[L4025]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4026]              assume DType[msgsender_MSG] != SafeMath;
[L4027]              assume DType[msgsender_MSG] != StrikeFarm;
[L4028]              Alloc[msgsender_MSG] := true;
[L4029]  COND FALSE  !(choice == 11)
[L4035]  COND FALSE  !(choice == 10)
[L4041]  COND FALSE  !(choice == 9)
[L4048]  COND FALSE  !(choice == 8)
[L4054]  COND TRUE   choice == 7
[L4055]              gas := gas - 21000;
[L4056]  COND TRUE   gas >= 0
[L4057]              assume amount_s175 >= 0 && amount_s175 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4058]              assume msgvalue_MSG == 0;
[L4059]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s175, amount_s175);
[L462]               havoc __exception;
[L463]               revert := false;
[L464]   COND FALSE  !(__exception)
[L486]   CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s175, amount_s175);
[L1801]  COND FALSE  !(DType[this] == StrikeFarm)
[L1806]  COND TRUE   DType[this] == ERC20
[L1807]  CALL        call __var_2 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L1601]              __ret_0_ := msgsender_MSG;
[L1807]  RET         call __var_2 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L1808]  COND FALSE  !(revert)
[L1814]  COND FALSE  !(DType[this] == StrikeFarm)
[L1819]  COND TRUE   DType[this] == ERC20
[L1820]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_2, spender_s175, amount_s175);
[L2355]              __var_22 := null;
[L2356]  COND FALSE  !(!(owner_s452 != null))
[L2360]              __var_23 := null;
[L2361]  COND FALSE  !(!(spender_s452 != null))
[L2365]              sum__allowances1[owner_s452] := sum__allowances1[owner_s452] - _allowances_ERC20[this][owner_s452][spender_s452];
[L2366]              _allowances_ERC20[this][owner_s452][spender_s452] := amount_s452;
[L2367]              sum__allowances1[owner_s452] := sum__allowances1[owner_s452] + _allowances_ERC20[this][owner_s452][spender_s452];
[L2368]              assert { :EventEmitted "Approval_ERC20" } true;
[L1820]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_2, spender_s175, amount_s175);
[L1821]  COND FALSE  !(revert)
[L1827]              __ret_0_ := true;
[L486]   RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s175, amount_s175);
[L487]               assume !revert && gas >= 0;
[L4059]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s175, amount_s175);
[L4118]  RET         call CorralChoice_StrikeFarm(this);
[L4118]  CALL        call CorralChoice_StrikeFarm(this);
[L3984]              havoc msgsender_MSG;
[L3985]              havoc msgvalue_MSG;
[L3986]              havoc choice;
[L3987]              havoc __ret_0_totalSupply;
[L3988]              havoc account_s121;
[L3989]              havoc __ret_0_balanceOf;
[L3990]              havoc recipient_s140;
[L3991]              havoc amount_s140;
[L3992]              havoc __ret_0_transfer;
[L3993]              havoc owner_s156;
[L3994]              havoc spender_s156;
[L3995]              havoc __ret_0_allowance;
[L3996]              havoc spender_s175;
[L3997]              havoc amount_s175;
[L3998]              havoc __ret_0_approve;
[L3999]              havoc sender_s211;
[L4000]              havoc recipient_s211;
[L4001]              havoc amount_s211;
[L4002]              havoc __ret_0_transferFrom;
[L4003]              havoc spender_s238;
[L4004]              havoc addedValue_s238;
[L4005]              havoc __ret_0_increaseAllowance;
[L4006]              havoc spender_s266;
[L4007]              havoc subtractedValue_s266;
[L4008]              havoc __ret_0_decreaseAllowance;
[L4009]              havoc name_s483;
[L4010]              havoc symbol_s483;
[L4011]              havoc decimals_s483;
[L4012]              havoc __ret_0_name;
[L4013]              havoc __ret_0_symbol;
[L4014]              havoc __ret_0_decimals;
[L4015]              havoc tmpNow;
[L4016]              havoc gas;
[L4017]              assume gas > 4000000 && gas <= 8000000;
[L4018]              tmpNow := now;
[L4019]              havoc now;
[L4020]              assume now > tmpNow;
[L4021]              assume msgsender_MSG != null;
[L4022]              assume DType[msgsender_MSG] != IERC20;
[L4023]              assume DType[msgsender_MSG] != Context;
[L4024]              assume DType[msgsender_MSG] != ERC20;
[L4025]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4026]              assume DType[msgsender_MSG] != SafeMath;
[L4027]              assume DType[msgsender_MSG] != StrikeFarm;
[L4028]              Alloc[msgsender_MSG] := true;
[L4029]  COND FALSE  !(choice == 11)
[L4035]  COND FALSE  !(choice == 10)
[L4041]  COND FALSE  !(choice == 9)
[L4048]  COND FALSE  !(choice == 8)
[L4054]  COND FALSE  !(choice == 7)
[L4061]  COND TRUE   choice == 6
[L4062]              gas := gas - 21000;
[L4063]  COND TRUE   gas >= 0
[L4064]              assume amount_s211 >= 0 && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4065]              assume msgvalue_MSG == 0;
[L4066]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((sender_s211 == recipient_s211 && (amount_s211 > _balances_ERC20[this][sender_s211] || amount_s211 > _allowances_ERC20[this][sender_s211][msgsender_MSG])) && amount_s211 >= 0) && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s211] >= 0) && _balances_ERC20[this][recipient_s211] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s211] >= 0) && _balances_ERC20[this][sender_s211] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s211][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s211][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L518]               havoc __exception;
[L519]               revert := false;
[L520]   COND FALSE  !(__exception)
[L542]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L1901]  COND TRUE   DType[this] == StrikeFarm
[L1902]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2207]              __var_12 := null;
[L2208]  COND FALSE  !(!(sender_s323 != null))
[L2212]              __var_13 := null;
[L2213]  COND FALSE  !(!(recipient_s323 != null))
[L2217]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, 861085777);
[L2552]  COND FALSE  !(!(b_s576 <= a_s576))
[L2556]              c_s576 := (a_s576 - b_s576) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2557]              __ret_0_ := c_s576;
[L2217]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, 861085777);
[L2218]  COND FALSE  !(revert)
[L2221]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2222]              _balances_ERC20[this][sender_s323] := __var_14;
[L2223]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2224]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2506]              c_s533 := (a_s533 + b_s533) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2507]  COND FALSE  !(!(c_s533 >= a_s533))
[L2511]              __ret_0_ := c_s533;
[L2224]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2225]  COND FALSE  !(revert)
[L2228]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2229]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2230]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2231]              assert { :EventEmitted "Transfer_ERC20" } true;
[L1902]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L1903]  COND FALSE  !(revert)
[L1914]  COND TRUE   DType[this] == StrikeFarm
[L1915]  CALL        call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L1601]              __ret_0_ := msgsender_MSG;
[L1915]  RET         call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L1916]  COND FALSE  !(revert)
[L1927]  COND TRUE   DType[this] == StrikeFarm
[L1928]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L1601]              __ret_0_ := msgsender_MSG;
[L1928]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L1929]  COND FALSE  !(revert)
[L1940]  CALL        call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, 872302118);
[L2552]  COND FALSE  !(!(b_s576 <= a_s576))
[L2556]              c_s576 := (a_s576 - b_s576) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2557]              __ret_0_ := c_s576;
[L1940]  RET         call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, 872302118);
[L1941]  COND FALSE  !(revert)
[L1944]  COND TRUE   DType[this] == StrikeFarm
[L1945]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L2355]              __var_22 := null;
[L2356]  COND FALSE  !(!(owner_s452 != null))
[L2360]              __var_23 := null;
[L2361]  COND FALSE  !(!(spender_s452 != null))
[L2365]              sum__allowances1[owner_s452] := sum__allowances1[owner_s452] - _allowances_ERC20[this][owner_s452][spender_s452];
[L2366]              _allowances_ERC20[this][owner_s452][spender_s452] := amount_s452;
[L2367]              sum__allowances1[owner_s452] := sum__allowances1[owner_s452] + _allowances_ERC20[this][owner_s452][spender_s452];
[L2368]              assert { :EventEmitted "Approval_ERC20" } true;
[L1945]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L1946]  COND FALSE  !(revert)
[L1957]              __ret_0_ := true;
[L542]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L543]               assume !revert && gas >= 0;
[L4066]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L4118]  RET         call CorralChoice_StrikeFarm(this);

Loop:
[L4118]  CALL        call CorralChoice_StrikeFarm(this);
[L3984]              havoc msgsender_MSG;
[L3985]              havoc msgvalue_MSG;
[L3986]              havoc choice;
[L3987]              havoc __ret_0_totalSupply;
[L3988]              havoc account_s121;
[L3989]              havoc __ret_0_balanceOf;
[L3990]              havoc recipient_s140;
[L3991]              havoc amount_s140;
[L3992]              havoc __ret_0_transfer;
[L3993]              havoc owner_s156;
[L3994]              havoc spender_s156;
[L3995]              havoc __ret_0_allowance;
[L3996]              havoc spender_s175;
[L3997]              havoc amount_s175;
[L3998]              havoc __ret_0_approve;
[L3999]              havoc sender_s211;
[L4000]              havoc recipient_s211;
[L4001]              havoc amount_s211;
[L4002]              havoc __ret_0_transferFrom;
[L4003]              havoc spender_s238;
[L4004]              havoc addedValue_s238;
[L4005]              havoc __ret_0_increaseAllowance;
[L4006]              havoc spender_s266;
[L4007]              havoc subtractedValue_s266;
[L4008]              havoc __ret_0_decreaseAllowance;
[L4009]              havoc name_s483;
[L4010]              havoc symbol_s483;
[L4011]              havoc decimals_s483;
[L4012]              havoc __ret_0_name;
[L4013]              havoc __ret_0_symbol;
[L4014]              havoc __ret_0_decimals;
[L4015]              havoc tmpNow;
[L4016]              havoc gas;
[L4017]              assume gas > 4000000 && gas <= 8000000;
[L4018]              tmpNow := now;
[L4019]              havoc now;
[L4020]              assume now > tmpNow;
[L4021]              assume msgsender_MSG != null;
[L4022]              assume DType[msgsender_MSG] != IERC20;
[L4023]              assume DType[msgsender_MSG] != Context;
[L4024]              assume DType[msgsender_MSG] != ERC20;
[L4025]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4026]              assume DType[msgsender_MSG] != SafeMath;
[L4027]              assume DType[msgsender_MSG] != StrikeFarm;
[L4028]              Alloc[msgsender_MSG] := true;
[L4029]  COND FALSE  !(choice == 11)
[L4035]  COND FALSE  !(choice == 10)
[L4041]  COND FALSE  !(choice == 9)
[L4048]  COND FALSE  !(choice == 8)
[L4054]  COND FALSE  !(choice == 7)
[L4061]  COND TRUE   choice == 6
[L4062]              gas := gas - 21000;
[L4063]  COND TRUE   gas >= 0
[L4064]              assume amount_s211 >= 0 && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4065]              assume msgvalue_MSG == 0;
[L4066]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((sender_s211 == recipient_s211 && (amount_s211 > _balances_ERC20[this][sender_s211] || amount_s211 > _allowances_ERC20[this][sender_s211][msgsender_MSG])) && amount_s211 >= 0) && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s211] >= 0) && _balances_ERC20[this][recipient_s211] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s211] >= 0) && _balances_ERC20[this][sender_s211] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s211][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s211][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L518]               havoc __exception;
[L519]               revert := false;
[L520]   COND FALSE  !(__exception)
[L542]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L1901]  COND TRUE   DType[this] == StrikeFarm
[L1902]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2207]              __var_12 := null;
[L2208]  COND FALSE  !(!(sender_s323 != null))
[L2212]              __var_13 := null;
[L2213]  COND FALSE  !(!(recipient_s323 != null))
[L2217]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, 861085777);
[L2552]  COND FALSE  !(!(b_s576 <= a_s576))
[L2556]              c_s576 := (a_s576 - b_s576) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2557]              __ret_0_ := c_s576;
[L2217]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, 861085777);
[L2218]  COND FALSE  !(revert)
[L2221]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2222]              _balances_ERC20[this][sender_s323] := __var_14;
[L2223]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2224]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2506]              c_s533 := (a_s533 + b_s533) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2507]  COND FALSE  !(!(c_s533 >= a_s533))
[L2511]              __ret_0_ := c_s533;
[L2224]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2225]  COND FALSE  !(revert)
[L2228]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2229]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2230]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2231]              assert { :EventEmitted "Transfer_ERC20" } true;
[L1902]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L1903]  COND FALSE  !(revert)
[L1914]  COND TRUE   DType[this] == StrikeFarm
[L1915]  CALL        call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L1601]              __ret_0_ := msgsender_MSG;
[L1915]  RET         call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L1916]  COND FALSE  !(revert)
[L1927]  COND TRUE   DType[this] == StrikeFarm
[L1928]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L1601]              __ret_0_ := msgsender_MSG;
[L1928]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L1929]  COND FALSE  !(revert)
[L1940]  CALL        call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, 872302118);
[L2552]  COND FALSE  !(!(b_s576 <= a_s576))
[L2556]              c_s576 := (a_s576 - b_s576) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2557]              __ret_0_ := c_s576;
[L1940]  RET         call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, 872302118);
[L1941]  COND FALSE  !(revert)
[L1944]  COND TRUE   DType[this] == StrikeFarm
[L1945]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L2355]              __var_22 := null;
[L2356]  COND FALSE  !(!(owner_s452 != null))
[L2360]              __var_23 := null;
[L2361]  COND FALSE  !(!(spender_s452 != null))
[L2365]              sum__allowances1[owner_s452] := sum__allowances1[owner_s452] - _allowances_ERC20[this][owner_s452][spender_s452];
[L2366]              _allowances_ERC20[this][owner_s452][spender_s452] := amount_s452;
[L2367]              sum__allowances1[owner_s452] := sum__allowances1[owner_s452] + _allowances_ERC20[this][owner_s452][spender_s452];
[L2368]              assert { :EventEmitted "Approval_ERC20" } true;
[L1945]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L1946]  COND FALSE  !(revert)
[L1957]              __ret_0_ := true;
[L542]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L543]               assume !revert && gas >= 0;
[L4066]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L4118]  RET         call CorralChoice_StrikeFarm(this);

[2020-11-25 05:54:29,538 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 05:54:29,538 INFO  L82        PathProgramCache]: Analyzing trace with hash 459383348, now seen corresponding path program 1 times
[2020-11-25 05:54:29,539 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 05:54:29,554 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 05:54:29,621 INFO  L134       CoverageAnalysis]: Checked inductivity of 105 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 104 trivial. 0 not checked.
[2020-11-25 05:54:29,621 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 05:54:29,622 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 05:54:29,622 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 05:54:29,622 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 05:54:29,622 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-25 05:54:29,622 INFO  L87              Difference]: Start difference. First operand 2107 states and 2383 transitions. cyclomatic complexity: 279 Second operand 6 states.
[2020-11-25 05:54:29,660 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 05:54:29,660 INFO  L93              Difference]: Finished difference Result 2129 states and 2403 transitions.
[2020-11-25 05:54:29,660 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-11-25 05:54:29,660 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2129 states and 2403 transitions.
[2020-11-25 05:54:29,664 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 05:54:29,669 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2129 states to 2085 states and 2353 transitions.
[2020-11-25 05:54:29,669 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 546
[2020-11-25 05:54:29,669 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 546
[2020-11-25 05:54:29,669 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2085 states and 2353 transitions.
[2020-11-25 05:54:29,671 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 05:54:29,671 INFO  L728         BuchiCegarLoop]: Abstraction has 2085 states and 2353 transitions.
[2020-11-25 05:54:29,673 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2085 states and 2353 transitions.
[2020-11-25 05:54:29,683 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2085 to 2085.
[2020-11-25 05:54:29,683 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2085 states.
[2020-11-25 05:54:29,685 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2085 states to 2085 states and 2353 transitions.
[2020-11-25 05:54:29,685 INFO  L751         BuchiCegarLoop]: Abstraction has 2085 states and 2353 transitions.
[2020-11-25 05:54:29,685 INFO  L631         BuchiCegarLoop]: Abstraction has 2085 states and 2353 transitions.
[2020-11-25 05:54:29,685 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 05:54:29,685 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2085 states and 2353 transitions.
[2020-11-25 05:54:29,687 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 05:54:29,687 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 05:54:29,687 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 05:54:29,688 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 05:54:29,688 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC200 := false;
[L2]                 call_transferFrom_ERC200 := false;
[L2]     CALL        call main();
[L4108]              assume null == 0;
[L4109]  CALL        call this := FreshRefGenerator__success();
[L1523]              havoc newRef;
[L1524]              assume Alloc[newRef] == false;
[L1525]              Alloc[newRef] := true;
[L1526]              assume newRef != null;
[L4109]  RET         call this := FreshRefGenerator__success();
[L4110]              assume now >= 0;
[L4111]              assume DType[this] == StrikeFarm;
[L4112]              assume msgvalue_MSG == 0;
[L4113]              gas := gas - 53000;
[L4114]  CALL        call StrikeFarm_StrikeFarm(this, msgsender_MSG, msgvalue_MSG);
[L1001]              havoc __exception;
[L1002]              revert := false;
[L1003]  COND FALSE  !(__exception)
[L1025]  CALL        call StrikeFarm_StrikeFarm__success(this, msgsender_MSG, msgvalue_MSG);
[L2725]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L1587]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1572]              assume msgsender_MSG != null;
[L1573]              Balance[this] := 0;
[L1587]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1588]  COND FALSE  !(revert)
[L2725]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2726]  COND FALSE  !(revert)
[L2729]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1555]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1540]              assume msgsender_MSG != null;
[L1541]              Balance[this] := 0;
[L1555]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1556]  COND FALSE  !(revert)
[L2729]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2730]  COND FALSE  !(revert)
[L2733]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1649]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L1587]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1572]              assume msgsender_MSG != null;
[L1573]              Balance[this] := 0;
[L1587]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1588]  COND FALSE  !(revert)
[L1649]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L1650]  COND FALSE  !(revert)
[L1653]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1555]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1540]              assume msgsender_MSG != null;
[L1541]              Balance[this] := 0;
[L1555]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1556]  COND FALSE  !(revert)
[L1653]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1654]  COND FALSE  !(revert)
[L1657]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1621]              assume msgsender_MSG != null;
[L1622]              Balance[this] := 0;
[L1623]              _balances_ERC20[this] := zeroRefintArr();
[L1624]              sum__balances0[this] := 0;
[L1625]              _allowances_ERC20[this] := zeroRefRefintArr();
[L1626]              sum__allowances1[this] := 0;
[L1627]              _totalSupply_ERC20[this] := 0;
[L1657]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1658]  COND FALSE  !(revert)
[L2733]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]  COND FALSE  !(revert)
[L2737]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 879309088, -1713371657, 18);
[L2413]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1555]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1540]              assume msgsender_MSG != null;
[L1541]              Balance[this] := 0;
[L1555]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1556]  COND FALSE  !(revert)
[L2413]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2414]  COND FALSE  !(revert)
[L2417]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s483, symbol_s483, decimals_s483);
[L2388]              assume msgsender_MSG != null;
[L2389]              Balance[this] := 0;
[L2390]              _name_ERC20Detailed[this] := -1368110498;
[L2391]              _symbol_ERC20Detailed[this] := -1368110498;
[L2392]              _decimals_ERC20Detailed[this] := 0;
[L2394]              _name_ERC20Detailed[this] := name_s483;
[L2395]              _symbol_ERC20Detailed[this] := symbol_s483;
[L2396]              _decimals_ERC20Detailed[this] := decimals_s483;
[L2417]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s483, symbol_s483, decimals_s483);
[L2418]  COND FALSE  !(revert)
[L2737]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 879309088, -1713371657, 18);
[L2738]  COND FALSE  !(revert)
[L2741]  CALL        call StrikeFarm_StrikeFarm_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2672]              assume msgsender_MSG != null;
[L2673]              Balance[this] := 0;
[L2674]              _total_StrikeFarm[this] := 11000;
[L2676]  COND TRUE   DType[this] == StrikeFarm
[L2677]  CALL        call __var_27 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L2455]              __ret_0_ := _decimals_ERC20Detailed[this];
[L2677]  RET         call __var_27 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L2678]  COND FALSE  !(revert)
[L2684]              __var_26 := __var_27 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2685]  COND TRUE   DType[this] == StrikeFarm
[L2686]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, nonlinearMul(_total_StrikeFarm[this], nonlinearPow(10, __var_27 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2263]              __var_16 := null;
[L2264]  COND FALSE  !(!(account_s366 != null))
[L2268]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s366);
[L2506]              c_s533 := (a_s533 + b_s533) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2507]  COND FALSE  !(!(c_s533 >= a_s533))
[L2511]              __ret_0_ := c_s533;
[L2268]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s366);
[L2269]  COND FALSE  !(revert)
[L2272]              _totalSupply_ERC20[this] := __var_17;
[L2273]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s366], amount_s366);
[L2506]              c_s533 := (a_s533 + b_s533) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2507]  COND FALSE  !(!(c_s533 >= a_s533))
[L2511]              __ret_0_ := c_s533;
[L2273]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s366], amount_s366);
[L2274]  COND FALSE  !(revert)
[L2277]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s366];
[L2278]              _balances_ERC20[this][account_s366] := __var_18;
[L2279]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s366];
[L2280]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2686]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, nonlinearMul(_total_StrikeFarm[this], nonlinearPow(10, __var_27 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2687]  COND FALSE  !(revert)
[L2741]  RET         call StrikeFarm_StrikeFarm_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2742]  COND FALSE  !(revert)
[L1025]  RET         call StrikeFarm_StrikeFarm__success(this, msgsender_MSG, msgvalue_MSG);
[L1026]              assume !revert && gas >= 0;
[L4114]  RET         call StrikeFarm_StrikeFarm(this, msgsender_MSG, msgvalue_MSG);
[L4115]              assume !revert && gas >= 0;
[L4118]  CALL        call CorralChoice_StrikeFarm(this);
[L3984]              havoc msgsender_MSG;
[L3985]              havoc msgvalue_MSG;
[L3986]              havoc choice;
[L3987]              havoc __ret_0_totalSupply;
[L3988]              havoc account_s121;
[L3989]              havoc __ret_0_balanceOf;
[L3990]              havoc recipient_s140;
[L3991]              havoc amount_s140;
[L3992]              havoc __ret_0_transfer;
[L3993]              havoc owner_s156;
[L3994]              havoc spender_s156;
[L3995]              havoc __ret_0_allowance;
[L3996]              havoc spender_s175;
[L3997]              havoc amount_s175;
[L3998]              havoc __ret_0_approve;
[L3999]              havoc sender_s211;
[L4000]              havoc recipient_s211;
[L4001]              havoc amount_s211;
[L4002]              havoc __ret_0_transferFrom;
[L4003]              havoc spender_s238;
[L4004]              havoc addedValue_s238;
[L4005]              havoc __ret_0_increaseAllowance;
[L4006]              havoc spender_s266;
[L4007]              havoc subtractedValue_s266;
[L4008]              havoc __ret_0_decreaseAllowance;
[L4009]              havoc name_s483;
[L4010]              havoc symbol_s483;
[L4011]              havoc decimals_s483;
[L4012]              havoc __ret_0_name;
[L4013]              havoc __ret_0_symbol;
[L4014]              havoc __ret_0_decimals;
[L4015]              havoc tmpNow;
[L4016]              havoc gas;
[L4017]              assume gas > 4000000 && gas <= 8000000;
[L4018]              tmpNow := now;
[L4019]              havoc now;
[L4020]              assume now > tmpNow;
[L4021]              assume msgsender_MSG != null;
[L4022]              assume DType[msgsender_MSG] != IERC20;
[L4023]              assume DType[msgsender_MSG] != Context;
[L4024]              assume DType[msgsender_MSG] != ERC20;
[L4025]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4026]              assume DType[msgsender_MSG] != SafeMath;
[L4027]              assume DType[msgsender_MSG] != StrikeFarm;
[L4028]              Alloc[msgsender_MSG] := true;
[L4029]  COND FALSE  !(choice == 11)
[L4035]  COND FALSE  !(choice == 10)
[L4041]  COND FALSE  !(choice == 9)
[L4048]  COND FALSE  !(choice == 8)
[L4054]  COND TRUE   choice == 7
[L4055]              gas := gas - 21000;
[L4056]  COND TRUE   gas >= 0
[L4057]              assume amount_s175 >= 0 && amount_s175 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4058]              assume msgvalue_MSG == 0;
[L4059]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s175, amount_s175);
[L462]               havoc __exception;
[L463]               revert := false;
[L464]   COND FALSE  !(__exception)
[L486]   CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s175, amount_s175);
[L1801]  COND TRUE   DType[this] == StrikeFarm
[L1802]  CALL        call __var_2 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L1601]              __ret_0_ := msgsender_MSG;
[L1802]  RET         call __var_2 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L1803]  COND FALSE  !(revert)
[L1814]  COND TRUE   DType[this] == StrikeFarm
[L1815]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_2, spender_s175, amount_s175);
[L2355]              __var_22 := null;
[L2356]  COND FALSE  !(!(owner_s452 != null))
[L2360]              __var_23 := null;
[L2361]  COND FALSE  !(!(spender_s452 != null))
[L2365]              sum__allowances1[owner_s452] := sum__allowances1[owner_s452] - _allowances_ERC20[this][owner_s452][spender_s452];
[L2366]              _allowances_ERC20[this][owner_s452][spender_s452] := amount_s452;
[L2367]              sum__allowances1[owner_s452] := sum__allowances1[owner_s452] + _allowances_ERC20[this][owner_s452][spender_s452];
[L2368]              assert { :EventEmitted "Approval_ERC20" } true;
[L1815]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_2, spender_s175, amount_s175);
[L1816]  COND FALSE  !(revert)
[L1827]              __ret_0_ := true;
[L486]   RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s175, amount_s175);
[L487]               assume !revert && gas >= 0;
[L4059]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s175, amount_s175);
[L4118]  RET         call CorralChoice_StrikeFarm(this);
[L4118]  CALL        call CorralChoice_StrikeFarm(this);
[L3984]              havoc msgsender_MSG;
[L3985]              havoc msgvalue_MSG;
[L3986]              havoc choice;
[L3987]              havoc __ret_0_totalSupply;
[L3988]              havoc account_s121;
[L3989]              havoc __ret_0_balanceOf;
[L3990]              havoc recipient_s140;
[L3991]              havoc amount_s140;
[L3992]              havoc __ret_0_transfer;
[L3993]              havoc owner_s156;
[L3994]              havoc spender_s156;
[L3995]              havoc __ret_0_allowance;
[L3996]              havoc spender_s175;
[L3997]              havoc amount_s175;
[L3998]              havoc __ret_0_approve;
[L3999]              havoc sender_s211;
[L4000]              havoc recipient_s211;
[L4001]              havoc amount_s211;
[L4002]              havoc __ret_0_transferFrom;
[L4003]              havoc spender_s238;
[L4004]              havoc addedValue_s238;
[L4005]              havoc __ret_0_increaseAllowance;
[L4006]              havoc spender_s266;
[L4007]              havoc subtractedValue_s266;
[L4008]              havoc __ret_0_decreaseAllowance;
[L4009]              havoc name_s483;
[L4010]              havoc symbol_s483;
[L4011]              havoc decimals_s483;
[L4012]              havoc __ret_0_name;
[L4013]              havoc __ret_0_symbol;
[L4014]              havoc __ret_0_decimals;
[L4015]              havoc tmpNow;
[L4016]              havoc gas;
[L4017]              assume gas > 4000000 && gas <= 8000000;
[L4018]              tmpNow := now;
[L4019]              havoc now;
[L4020]              assume now > tmpNow;
[L4021]              assume msgsender_MSG != null;
[L4022]              assume DType[msgsender_MSG] != IERC20;
[L4023]              assume DType[msgsender_MSG] != Context;
[L4024]              assume DType[msgsender_MSG] != ERC20;
[L4025]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4026]              assume DType[msgsender_MSG] != SafeMath;
[L4027]              assume DType[msgsender_MSG] != StrikeFarm;
[L4028]              Alloc[msgsender_MSG] := true;
[L4029]  COND FALSE  !(choice == 11)
[L4035]  COND FALSE  !(choice == 10)
[L4041]  COND FALSE  !(choice == 9)
[L4048]  COND FALSE  !(choice == 8)
[L4054]  COND FALSE  !(choice == 7)
[L4061]  COND TRUE   choice == 6
[L4062]              gas := gas - 21000;
[L4063]  COND TRUE   gas >= 0
[L4064]              assume amount_s211 >= 0 && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4065]              assume msgvalue_MSG == 0;
[L4066]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((sender_s211 == recipient_s211 && (amount_s211 > _balances_ERC20[this][sender_s211] || amount_s211 > _allowances_ERC20[this][sender_s211][msgsender_MSG])) && amount_s211 >= 0) && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s211] >= 0) && _balances_ERC20[this][recipient_s211] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s211] >= 0) && _balances_ERC20[this][sender_s211] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s211][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s211][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L518]               havoc __exception;
[L519]               revert := false;
[L520]   COND FALSE  !(__exception)
[L542]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L1901]  COND TRUE   DType[this] == StrikeFarm
[L1902]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2207]              __var_12 := null;
[L2208]  COND FALSE  !(!(sender_s323 != null))
[L2212]              __var_13 := null;
[L2213]  COND FALSE  !(!(recipient_s323 != null))
[L2217]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, 861085777);
[L2552]  COND FALSE  !(!(b_s576 <= a_s576))
[L2556]              c_s576 := (a_s576 - b_s576) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2557]              __ret_0_ := c_s576;
[L2217]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, 861085777);
[L2218]  COND FALSE  !(revert)
[L2221]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2222]              _balances_ERC20[this][sender_s323] := __var_14;
[L2223]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2224]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2506]              c_s533 := (a_s533 + b_s533) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2507]  COND FALSE  !(!(c_s533 >= a_s533))
[L2511]              __ret_0_ := c_s533;
[L2224]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2225]  COND FALSE  !(revert)
[L2228]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2229]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2230]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2231]              assert { :EventEmitted "Transfer_ERC20" } true;
[L1902]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L1903]  COND FALSE  !(revert)
[L1914]  COND TRUE   DType[this] == StrikeFarm
[L1915]  CALL        call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L1601]              __ret_0_ := msgsender_MSG;
[L1915]  RET         call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L1916]  COND FALSE  !(revert)
[L1927]  COND TRUE   DType[this] == StrikeFarm
[L1928]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L1601]              __ret_0_ := msgsender_MSG;
[L1928]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L1929]  COND FALSE  !(revert)
[L1940]  CALL        call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, 872302118);
[L2552]  COND FALSE  !(!(b_s576 <= a_s576))
[L2556]              c_s576 := (a_s576 - b_s576) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2557]              __ret_0_ := c_s576;
[L1940]  RET         call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, 872302118);
[L1941]  COND FALSE  !(revert)
[L1944]  COND TRUE   DType[this] == StrikeFarm
[L1945]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L2355]              __var_22 := null;
[L2356]  COND FALSE  !(!(owner_s452 != null))
[L2360]              __var_23 := null;
[L2361]  COND FALSE  !(!(spender_s452 != null))
[L2365]              sum__allowances1[owner_s452] := sum__allowances1[owner_s452] - _allowances_ERC20[this][owner_s452][spender_s452];
[L2366]              _allowances_ERC20[this][owner_s452][spender_s452] := amount_s452;
[L2367]              sum__allowances1[owner_s452] := sum__allowances1[owner_s452] + _allowances_ERC20[this][owner_s452][spender_s452];
[L2368]              assert { :EventEmitted "Approval_ERC20" } true;
[L1945]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L1946]  COND FALSE  !(revert)
[L1957]              __ret_0_ := true;
[L542]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L543]               assume !revert && gas >= 0;
[L4066]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L4118]  RET         call CorralChoice_StrikeFarm(this);

Loop:
[L4118]  CALL        call CorralChoice_StrikeFarm(this);
[L3984]              havoc msgsender_MSG;
[L3985]              havoc msgvalue_MSG;
[L3986]              havoc choice;
[L3987]              havoc __ret_0_totalSupply;
[L3988]              havoc account_s121;
[L3989]              havoc __ret_0_balanceOf;
[L3990]              havoc recipient_s140;
[L3991]              havoc amount_s140;
[L3992]              havoc __ret_0_transfer;
[L3993]              havoc owner_s156;
[L3994]              havoc spender_s156;
[L3995]              havoc __ret_0_allowance;
[L3996]              havoc spender_s175;
[L3997]              havoc amount_s175;
[L3998]              havoc __ret_0_approve;
[L3999]              havoc sender_s211;
[L4000]              havoc recipient_s211;
[L4001]              havoc amount_s211;
[L4002]              havoc __ret_0_transferFrom;
[L4003]              havoc spender_s238;
[L4004]              havoc addedValue_s238;
[L4005]              havoc __ret_0_increaseAllowance;
[L4006]              havoc spender_s266;
[L4007]              havoc subtractedValue_s266;
[L4008]              havoc __ret_0_decreaseAllowance;
[L4009]              havoc name_s483;
[L4010]              havoc symbol_s483;
[L4011]              havoc decimals_s483;
[L4012]              havoc __ret_0_name;
[L4013]              havoc __ret_0_symbol;
[L4014]              havoc __ret_0_decimals;
[L4015]              havoc tmpNow;
[L4016]              havoc gas;
[L4017]              assume gas > 4000000 && gas <= 8000000;
[L4018]              tmpNow := now;
[L4019]              havoc now;
[L4020]              assume now > tmpNow;
[L4021]              assume msgsender_MSG != null;
[L4022]              assume DType[msgsender_MSG] != IERC20;
[L4023]              assume DType[msgsender_MSG] != Context;
[L4024]              assume DType[msgsender_MSG] != ERC20;
[L4025]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4026]              assume DType[msgsender_MSG] != SafeMath;
[L4027]              assume DType[msgsender_MSG] != StrikeFarm;
[L4028]              Alloc[msgsender_MSG] := true;
[L4029]  COND FALSE  !(choice == 11)
[L4035]  COND FALSE  !(choice == 10)
[L4041]  COND FALSE  !(choice == 9)
[L4048]  COND FALSE  !(choice == 8)
[L4054]  COND FALSE  !(choice == 7)
[L4061]  COND TRUE   choice == 6
[L4062]              gas := gas - 21000;
[L4063]  COND TRUE   gas >= 0
[L4064]              assume amount_s211 >= 0 && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4065]              assume msgvalue_MSG == 0;
[L4066]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((sender_s211 == recipient_s211 && (amount_s211 > _balances_ERC20[this][sender_s211] || amount_s211 > _allowances_ERC20[this][sender_s211][msgsender_MSG])) && amount_s211 >= 0) && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s211] >= 0) && _balances_ERC20[this][recipient_s211] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s211] >= 0) && _balances_ERC20[this][sender_s211] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s211][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s211][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L518]               havoc __exception;
[L519]               revert := false;
[L520]   COND FALSE  !(__exception)
[L542]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L1901]  COND TRUE   DType[this] == StrikeFarm
[L1902]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2207]              __var_12 := null;
[L2208]  COND FALSE  !(!(sender_s323 != null))
[L2212]              __var_13 := null;
[L2213]  COND FALSE  !(!(recipient_s323 != null))
[L2217]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, 861085777);
[L2552]  COND FALSE  !(!(b_s576 <= a_s576))
[L2556]              c_s576 := (a_s576 - b_s576) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2557]              __ret_0_ := c_s576;
[L2217]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, 861085777);
[L2218]  COND FALSE  !(revert)
[L2221]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2222]              _balances_ERC20[this][sender_s323] := __var_14;
[L2223]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2224]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2506]              c_s533 := (a_s533 + b_s533) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2507]  COND FALSE  !(!(c_s533 >= a_s533))
[L2511]              __ret_0_ := c_s533;
[L2224]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2225]  COND FALSE  !(revert)
[L2228]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2229]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2230]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2231]              assert { :EventEmitted "Transfer_ERC20" } true;
[L1902]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L1903]  COND FALSE  !(revert)
[L1914]  COND TRUE   DType[this] == StrikeFarm
[L1915]  CALL        call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L1601]              __ret_0_ := msgsender_MSG;
[L1915]  RET         call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L1916]  COND FALSE  !(revert)
[L1927]  COND TRUE   DType[this] == StrikeFarm
[L1928]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L1601]              __ret_0_ := msgsender_MSG;
[L1928]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L1929]  COND FALSE  !(revert)
[L1940]  CALL        call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, 872302118);
[L2552]  COND FALSE  !(!(b_s576 <= a_s576))
[L2556]              c_s576 := (a_s576 - b_s576) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2557]              __ret_0_ := c_s576;
[L1940]  RET         call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, 872302118);
[L1941]  COND FALSE  !(revert)
[L1944]  COND TRUE   DType[this] == StrikeFarm
[L1945]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L2355]              __var_22 := null;
[L2356]  COND FALSE  !(!(owner_s452 != null))
[L2360]              __var_23 := null;
[L2361]  COND FALSE  !(!(spender_s452 != null))
[L2365]              sum__allowances1[owner_s452] := sum__allowances1[owner_s452] - _allowances_ERC20[this][owner_s452][spender_s452];
[L2366]              _allowances_ERC20[this][owner_s452][spender_s452] := amount_s452;
[L2367]              sum__allowances1[owner_s452] := sum__allowances1[owner_s452] + _allowances_ERC20[this][owner_s452][spender_s452];
[L2368]              assert { :EventEmitted "Approval_ERC20" } true;
[L1945]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L1946]  COND FALSE  !(revert)
[L1957]              __ret_0_ := true;
[L542]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L543]               assume !revert && gas >= 0;
[L4066]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L4118]  RET         call CorralChoice_StrikeFarm(this);

[2020-11-25 05:54:29,692 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 05:54:29,692 INFO  L82        PathProgramCache]: Analyzing trace with hash 2026551181, now seen corresponding path program 1 times
[2020-11-25 05:54:29,693 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 05:54:29,707 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 05:54:29,825 INFO  L134       CoverageAnalysis]: Checked inductivity of 105 backedges. 2 proven. 0 refuted. 0 times theorem prover too weak. 103 trivial. 0 not checked.
[2020-11-25 05:54:29,825 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 05:54:29,825 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [13] imperfect sequences [] total 13
[2020-11-25 05:54:29,826 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 05:54:29,826 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 13 interpolants.
[2020-11-25 05:54:29,826 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=29, Invalid=127, Unknown=0, NotChecked=0, Total=156
[2020-11-25 05:54:29,826 INFO  L87              Difference]: Start difference. First operand 2085 states and 2353 transitions. cyclomatic complexity: 271 Second operand 13 states.
[2020-11-25 05:54:30,439 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 05:54:30,439 INFO  L93              Difference]: Finished difference Result 1305 states and 1467 transitions.
[2020-11-25 05:54:30,439 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 13 states. 
[2020-11-25 05:54:30,439 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1305 states and 1467 transitions.
[2020-11-25 05:54:30,441 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 05:54:30,441 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1305 states to 0 states and 0 transitions.
[2020-11-25 05:54:30,441 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-25 05:54:30,441 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-25 05:54:30,441 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-25 05:54:30,441 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 05:54:30,442 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 05:54:30,442 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 05:54:30,442 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 05:54:30,442 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-25 05:54:30,442 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-25 05:54:30,442 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 05:54:30,442 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-25 05:54:30,445 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 05:54:30 BasicIcfg
[2020-11-25 05:54:30,445 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 05:54:30,445 INFO  L168              Benchmark]: Toolchain (without parser) took 6940.57 ms. Allocated memory was 1.0 GB in the beginning and 1.8 GB in the end (delta: 744.5 MB). Free memory was 935.2 MB in the beginning and 1.5 GB in the end (delta: -603.2 MB). Peak memory consumption was 141.3 MB. Max. memory is 15.3 GB.
[2020-11-25 05:54:30,446 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.16 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 05:54:30,446 INFO  L168              Benchmark]: Boogie Preprocessor took 103.85 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 929.8 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 05:54:30,447 INFO  L168              Benchmark]: UtopiaSpecLang took 59.22 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 919.1 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 05:54:30,447 INFO  L168              Benchmark]: Boogie Printer took 15.22 ms. Allocated memory is still 1.0 GB. Free memory is still 919.1 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 05:54:30,447 INFO  L168              Benchmark]: RCFGBuilder took 768.13 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 806.3 MB in the end (delta: 112.7 MB). Peak memory consumption was 112.7 MB. Max. memory is 15.3 GB.
[2020-11-25 05:54:30,447 INFO  L168              Benchmark]: UtopiaLTL2Aut took 42.67 ms. Allocated memory is still 1.0 GB. Free memory was 806.3 MB in the beginning and 802.8 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
[2020-11-25 05:54:30,448 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1275.76 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 216.0 MB). Free memory was 802.8 MB in the beginning and 1.1 GB in the end (delta: -258.1 MB). Peak memory consumption was 187.8 MB. Max. memory is 15.3 GB.
[2020-11-25 05:54:30,448 INFO  L168              Benchmark]: BlockEncodingV2 took 131.65 ms. Allocated memory is still 1.2 GB. Free memory was 1.1 GB in the beginning and 997.0 MB in the end (delta: 63.9 MB). Peak memory consumption was 63.9 MB. Max. memory is 15.3 GB.
[2020-11-25 05:54:30,448 INFO  L168              Benchmark]: BuchiAutomizer took 4540.83 ms. Allocated memory was 1.2 GB in the beginning and 1.8 GB in the end (delta: 528.5 MB). Free memory was 997.0 MB in the beginning and 1.5 GB in the end (delta: -541.4 MB). There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 05:54:30,450 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    3730 locations, 6779 edges
  - StatisticsResult: Encoded RCFG
    3610 locations, 6462 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.16 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 103.85 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 929.8 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 59.22 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 919.1 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 15.22 ms. Allocated memory is still 1.0 GB. Free memory is still 919.1 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * RCFGBuilder took 768.13 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 806.3 MB in the end (delta: 112.7 MB). Peak memory consumption was 112.7 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 42.67 ms. Allocated memory is still 1.0 GB. Free memory was 806.3 MB in the beginning and 802.8 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1275.76 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 216.0 MB). Free memory was 802.8 MB in the beginning and 1.1 GB in the end (delta: -258.1 MB). Peak memory consumption was 187.8 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 131.65 ms. Allocated memory is still 1.2 GB. Free memory was 1.1 GB in the beginning and 997.0 MB in the end (delta: 63.9 MB). Peak memory consumption was 63.9 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 4540.83 ms. Allocated memory was 1.2 GB in the beginning and 1.8 GB in the end (delta: 528.5 MB). Free memory was 997.0 MB in the beginning and 1.5 GB in the end (delta: -541.4 MB). There was no memory consumed. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    1474 locations, 2075 edges
  - StatisticsResult: BuchiProgram size
    3730 locations, 6779 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 10 terminating modules (10 trivial, 0 deterministic, 0 nondeterministic). 10 modules have a trivial ranking function, the largest among these consists of 17 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 4.5s and 11 iterations.  TraceHistogramMax:3. Analysis of lassos took 0.8s. Construction of modules took 1.9s. BÃ¼chi inclusion checks took 1.0s. Highest rank in rank-based complementation 0. Minimization of det autom 10. Minimization of nondet autom 0. Automata minimization 0.2s AutomataMinimizationTime, 9 MinimizatonAttempts, 1383 StatesRemovedByMinimization, 7 NontrivialMinimizations. Non-live state removal took 0.1s Buchi closure took 0.0s. Biggest automaton had 2701 states and ocurred in iteration 1.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 24342 SDtfs, 12171 SDslu, 46768 SDs, 0 SdLazy, 32712 SolverSat, 2252 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 1.9s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU10 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_transferFrom_ERC200) ==> ( <>(fail_transferFrom_ERC200) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
