This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 09:28:00,483 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 09:28:00,484 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 09:28:00,495 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 09:28:00,495 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 09:28:00,496 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 09:28:00,497 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 09:28:00,498 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 09:28:00,500 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 09:28:00,500 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 09:28:00,501 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 09:28:00,501 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 09:28:00,502 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 09:28:00,503 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 09:28:00,504 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 09:28:00,504 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 09:28:00,505 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 09:28:00,506 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 09:28:00,507 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 09:28:00,510 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 09:28:00,512 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 09:28:00,514 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 09:28:00,518 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 09:28:00,519 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 09:28:00,519 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 09:28:00,520 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 09:28:00,521 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 09:28:00,523 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 09:28:00,523 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 09:28:00,524 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 09:28:00,524 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 09:28:00,525 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 09:28:00,525 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 09:28:00,526 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 09:28:00,527 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 09:28:00,527 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 09:28:00,527 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 09:28:00,527 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 09:28:00,527 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 09:28:00,528 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 09:28:00,528 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 09:28:00,529 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 09:28:00,536 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 09:28:00,537 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 09:28:00,537 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 09:28:00,537 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 09:28:00,538 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 09:28:00,538 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 09:28:00,538 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 09:28:00,538 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 09:28:00,538 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 09:28:00,538 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 09:28:00,538 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 09:28:00,538 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 09:28:00,538 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 09:28:00,538 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 09:28:00,539 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 09:28:00,539 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 09:28:00,539 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 09:28:00,539 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 09:28:00,539 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 09:28:00,539 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 09:28:00,539 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 09:28:00,539 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 09:28:00,539 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 09:28:00,539 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 09:28:00,540 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 09:28:00,540 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 09:28:00,564 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 09:28:00,580 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 09:28:00,584 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 09:28:00,585 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 09:28:00,586 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 09:28:00,586 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/YearnFinanceBitToken_0xf0a0f3a6fa6bed75345171a5ea18abcadf6453ba_transfer-normal.bpl
[2020-11-25 09:28:00,586 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/YearnFinanceBitToken_0xf0a0f3a6fa6bed75345171a5ea18abcadf6453ba_transfer-normal.bpl'
[2020-11-25 09:28:00,658 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 09:28:00,659 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 09:28:00,659 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 09:28:00,659 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 09:28:00,660 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 09:28:00,676 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "YearnFinanceBitToken_0xf0a0f3a6fa6bed75345171a5ea18abcadf6453ba_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:28:00" (1/1) ...
[2020-11-25 09:28:00,678 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "YearnFinanceBitToken_0xf0a0f3a6fa6bed75345171a5ea18abcadf6453ba_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:28:00" (1/1) ...
[2020-11-25 09:28:00,704 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "YearnFinanceBitToken_0xf0a0f3a6fa6bed75345171a5ea18abcadf6453ba_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:28:00" (1/1) ...
[2020-11-25 09:28:00,704 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "YearnFinanceBitToken_0xf0a0f3a6fa6bed75345171a5ea18abcadf6453ba_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:28:00" (1/1) ...
[2020-11-25 09:28:00,721 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "YearnFinanceBitToken_0xf0a0f3a6fa6bed75345171a5ea18abcadf6453ba_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:28:00" (1/1) ...
[2020-11-25 09:28:00,730 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "YearnFinanceBitToken_0xf0a0f3a6fa6bed75345171a5ea18abcadf6453ba_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:28:00" (1/1) ...
[2020-11-25 09:28:00,736 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "YearnFinanceBitToken_0xf0a0f3a6fa6bed75345171a5ea18abcadf6453ba_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:28:00" (1/1) ...
[2020-11-25 09:28:00,744 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 09:28:00,745 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 09:28:00,745 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 09:28:00,747 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 09:28:00,751 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "YearnFinanceBitToken_0xf0a0f3a6fa6bed75345171a5ea18abcadf6453ba_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:28:00" (1/1) ...
[2020-11-25 09:28:00,767 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(YearnFinanceBitToken.transfer(to, value), p1 != msg.sender && p1 != to && msg.sender != to && value <= balances_YearnFinanceBitToken[this][msg.sender] && balances_YearnFinanceBitToken[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_YearnFinanceBitToken[this][to] >= 0 && balances_YearnFinanceBitToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_YearnFinanceBitToken[this][msg.sender] >= 0 &&  balances_YearnFinanceBitToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(YearnFinanceBitToken.transfer(to, value), return == true && balances_YearnFinanceBitToken[this][msg.sender] == old(balances_YearnFinanceBitToken[this][msg.sender]) - value && balances_YearnFinanceBitToken[this][to] == old(balances_YearnFinanceBitToken[this][to]) + value && _totalSupply_YearnFinanceBitToken[this] == old(_totalSupply_YearnFinanceBitToken[this]) && allowed_YearnFinanceBitToken[this] == old(allowed_YearnFinanceBitToken[this]) && balances_YearnFinanceBitToken[this][p1] == old(balances_YearnFinanceBitToken[this][p1]) && name_YearnFinanceBitToken[this] == old(name_YearnFinanceBitToken[this]) && symbol_YearnFinanceBitToken[this] == old(symbol_YearnFinanceBitToken[this]) && decimals_YearnFinanceBitToken[this] == old(decimals_YearnFinanceBitToken[this]))))
[2020-11-25 09:28:00,772 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(YearnFinanceBitToken.transfer(to, value), p1 != msg.sender && p1 != to && msg.sender != to && value <= balances_YearnFinanceBitToken[this][msg.sender] && balances_YearnFinanceBitToken[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_YearnFinanceBitToken[this][to] >= 0 && balances_YearnFinanceBitToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_YearnFinanceBitToken[this][msg.sender] >= 0 &&  balances_YearnFinanceBitToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(YearnFinanceBitToken.transfer(to, value), return == true && balances_YearnFinanceBitToken[this][msg.sender] == old(balances_YearnFinanceBitToken[this][msg.sender]) - value && balances_YearnFinanceBitToken[this][to] == old(balances_YearnFinanceBitToken[this][to]) + value && _totalSupply_YearnFinanceBitToken[this] == old(_totalSupply_YearnFinanceBitToken[this]) && allowed_YearnFinanceBitToken[this] == old(allowed_YearnFinanceBitToken[this]) && balances_YearnFinanceBitToken[this][p1] == old(balances_YearnFinanceBitToken[this][p1]) && name_YearnFinanceBitToken[this] == old(name_YearnFinanceBitToken[this]) && symbol_YearnFinanceBitToken[this] == old(symbol_YearnFinanceBitToken[this]) && decimals_YearnFinanceBitToken[this] == old(decimals_YearnFinanceBitToken[this]))))
[2020-11-25 09:28:00,780 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(YearnFinanceBitToken.transfer(to, value), p1 != msg.sender && p1 != to && msg.sender != to && value <= balances_YearnFinanceBitToken[this][msg.sender] && balances_YearnFinanceBitToken[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_YearnFinanceBitToken[this][to] >= 0 && balances_YearnFinanceBitToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_YearnFinanceBitToken[this][msg.sender] >= 0 &&  balances_YearnFinanceBitToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(YearnFinanceBitToken.transfer(to, value), return == true && balances_YearnFinanceBitToken[this][msg.sender] == old(balances_YearnFinanceBitToken[this][msg.sender]) - value && balances_YearnFinanceBitToken[this][to] == old(balances_YearnFinanceBitToken[this][to]) + value && _totalSupply_YearnFinanceBitToken[this] == old(_totalSupply_YearnFinanceBitToken[this]) && allowed_YearnFinanceBitToken[this] == old(allowed_YearnFinanceBitToken[this]) && balances_YearnFinanceBitToken[this][p1] == old(balances_YearnFinanceBitToken[this][p1]) && name_YearnFinanceBitToken[this] == old(name_YearnFinanceBitToken[this]) && symbol_YearnFinanceBitToken[this] == old(symbol_YearnFinanceBitToken[this]) && decimals_YearnFinanceBitToken[this] == old(decimals_YearnFinanceBitToken[this]))))
[2020-11-25 09:28:00,787 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( p1!=msg.sender && p1!=to_s334 ) && msg.sender!=to_s334 ) && tokens_s334<=balances_YearnFinanceBitToken[this][msg.sender] ) && ( balances_YearnFinanceBitToken[this][to_s334] + tokens_s334 )<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && tokens_s334>=0 ) && tokens_s334<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_YearnFinanceBitToken[this][to_s334]>=0 ) && balances_YearnFinanceBitToken[this][to_s334]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_YearnFinanceBitToken[this][msg.sender]>=0 ) && balances_YearnFinanceBitToken[this][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_YearnFinanceBitToken>]],BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[to_s334,<IMPLEMENTATION_INPARAM,transfer~address~uint256_YearnFinanceBitToken>]]],BinaryExpression[COMPNEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_YearnFinanceBitToken>],IdentifierExpression[to_s334,<IMPLEMENTATION_INPARAM,transfer~address~uint256_YearnFinanceBitToken>]]],BinaryExpression[COMPLEQ,IdentifierExpression[tokens_s334,<IMPLEMENTATION_INPARAM,transfer~address~uint256_YearnFinanceBitToken>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_YearnFinanceBitToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_YearnFinanceBitToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_YearnFinanceBitToken>]]]]],BinaryExpression[COMPLT,BinaryExpression[ARITHPLUS,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_YearnFinanceBitToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_YearnFinanceBitToken>]]],[IdentifierExpression[to_s334,<IMPLEMENTATION_INPARAM,transfer~address~uint256_YearnFinanceBitToken>]]],IdentifierExpression[tokens_s334,<IMPLEMENTATION_INPARAM,transfer~address~uint256_YearnFinanceBitToken>]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,IdentifierExpression[tokens_s334,<IMPLEMENTATION_INPARAM,transfer~address~uint256_YearnFinanceBitToken>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[tokens_s334,<IMPLEMENTATION_INPARAM,transfer~address~uint256_YearnFinanceBitToken>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_YearnFinanceBitToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_YearnFinanceBitToken>]]],[IdentifierExpression[to_s334,<IMPLEMENTATION_INPARAM,transfer~address~uint256_YearnFinanceBitToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_YearnFinanceBitToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_YearnFinanceBitToken>]]],[IdentifierExpression[to_s334,<IMPLEMENTATION_INPARAM,transfer~address~uint256_YearnFinanceBitToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_YearnFinanceBitToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_YearnFinanceBitToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_YearnFinanceBitToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_YearnFinanceBitToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_YearnFinanceBitToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_YearnFinanceBitToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 09:28:00,790 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( success_s334==true && balances_YearnFinanceBitToken[this][msg.sender]==( ( old(balances_YearnFinanceBitToken[this][msg.sender]) ) - tokens_s334 ) ) && balances_YearnFinanceBitToken[this][to_s334]==( ( old(balances_YearnFinanceBitToken[this][to_s334]) ) + tokens_s334 ) ) && _totalSupply_YearnFinanceBitToken[this]==( old(_totalSupply_YearnFinanceBitToken[this]) ) ) && allowed_YearnFinanceBitToken[this]==( old(allowed_YearnFinanceBitToken[this]) ) ) && balances_YearnFinanceBitToken[this][p1]==( old(balances_YearnFinanceBitToken[this][p1]) ) ) && name_YearnFinanceBitToken[this]==( old(name_YearnFinanceBitToken[this]) ) ) && symbol_YearnFinanceBitToken[this]==( old(symbol_YearnFinanceBitToken[this]) ) ) && decimals_YearnFinanceBitToken[this]==( old(decimals_YearnFinanceBitToken[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[success_s334,<IMPLEMENTATION_OUTPARAM,transfer~address~uint256_YearnFinanceBitToken>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_YearnFinanceBitToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_YearnFinanceBitToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_YearnFinanceBitToken>]]],BinaryExpression[ARITHMINUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_YearnFinanceBitToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_YearnFinanceBitToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_YearnFinanceBitToken>]]]],IdentifierExpression[tokens_s334,<IMPLEMENTATION_INPARAM,transfer~address~uint256_YearnFinanceBitToken>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_YearnFinanceBitToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_YearnFinanceBitToken>]]],[IdentifierExpression[to_s334,<IMPLEMENTATION_INPARAM,transfer~address~uint256_YearnFinanceBitToken>]]],BinaryExpression[ARITHPLUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_YearnFinanceBitToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_YearnFinanceBitToken>]]],[IdentifierExpression[to_s334,<IMPLEMENTATION_INPARAM,transfer~address~uint256_YearnFinanceBitToken>]]]],IdentifierExpression[tokens_s334,<IMPLEMENTATION_INPARAM,transfer~address~uint256_YearnFinanceBitToken>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_totalSupply_YearnFinanceBitToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_YearnFinanceBitToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_totalSupply_YearnFinanceBitToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_YearnFinanceBitToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[allowed_YearnFinanceBitToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_YearnFinanceBitToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[allowed_YearnFinanceBitToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_YearnFinanceBitToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_YearnFinanceBitToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_YearnFinanceBitToken>]]],[IdentifierExpression[p1,GLOBAL]]],UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_YearnFinanceBitToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_YearnFinanceBitToken>]]],[IdentifierExpression[p1,GLOBAL]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[name_YearnFinanceBitToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_YearnFinanceBitToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[name_YearnFinanceBitToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_YearnFinanceBitToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[symbol_YearnFinanceBitToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_YearnFinanceBitToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[symbol_YearnFinanceBitToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_YearnFinanceBitToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[decimals_YearnFinanceBitToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_YearnFinanceBitToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[decimals_YearnFinanceBitToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_YearnFinanceBitToken>]]]]]]
[2020-11-25 09:28:00,794 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(YearnFinanceBitToken.transfer(to, value), p1 != msg.sender && p1 != to && msg.sender != to && value <= balances_YearnFinanceBitToken[this][msg.sender] && balances_YearnFinanceBitToken[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_YearnFinanceBitToken[this][to] >= 0 && balances_YearnFinanceBitToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_YearnFinanceBitToken[this][msg.sender] >= 0 &&  balances_YearnFinanceBitToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(YearnFinanceBitToken.transfer(to, value), return == true && balances_YearnFinanceBitToken[this][msg.sender] == old(balances_YearnFinanceBitToken[this][msg.sender]) - value && balances_YearnFinanceBitToken[this][to] == old(balances_YearnFinanceBitToken[this][to]) + value && _totalSupply_YearnFinanceBitToken[this] == old(_totalSupply_YearnFinanceBitToken[this]) && allowed_YearnFinanceBitToken[this] == old(allowed_YearnFinanceBitToken[this]) && balances_YearnFinanceBitToken[this][p1] == old(balances_YearnFinanceBitToken[this][p1]) && name_YearnFinanceBitToken[this] == old(name_YearnFinanceBitToken[this]) && symbol_YearnFinanceBitToken[this] == old(symbol_YearnFinanceBitToken[this]) && decimals_YearnFinanceBitToken[this] == old(decimals_YearnFinanceBitToken[this]))))
[2020-11-25 09:28:00,794 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transfer_YearnFinanceBitToken0) ==> ( <>AP(success_transfer_YearnFinanceBitToken0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 09:28:00,801 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 09:28:00 PropertyContainer
[2020-11-25 09:28:00,801 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 09:28:00,801 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 09:28:00,801 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 09:28:00,801 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 09:28:00,802 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "YearnFinanceBitToken_0xf0a0f3a6fa6bed75345171a5ea18abcadf6453ba_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:28:00" (1/2) ...
[2020-11-25 09:28:00,802 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 09:28:00,802 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 09:28:00,813 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 09:28:00" (2/2) ...
[2020-11-25 09:28:00,814 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 09:28:00,814 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 09:28:00,814 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 09:28:00,814 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 09:28:00,815 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "YearnFinanceBitToken_0xf0a0f3a6fa6bed75345171a5ea18abcadf6453ba_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:28:00" (1/2) ...
[2020-11-25 09:28:00,869 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 09:28:00,870 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface_NoBaseCtor__success
[2020-11-25 09:28:00,870 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface
[2020-11-25 09:28:00,870 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface
[2020-11-25 09:28:00,870 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20Interface
[2020-11-25 09:28:00,870 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20Interface
[2020-11-25 09:28:00,870 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20Interface
[2020-11-25 09:28:00,870 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Interface
[2020-11-25 09:28:00,870 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Interface
[2020-11-25 09:28:00,870 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Interface
[2020-11-25 09:28:00,870 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 09:28:00,870 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 09:28:00,871 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 09:28:00,871 INFO  L130     BoogieDeclarations]: Found specification of procedure safeAdd~uint256~uint256_SafeMath
[2020-11-25 09:28:00,871 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeAdd~uint256~uint256_SafeMath
[2020-11-25 09:28:00,871 INFO  L130     BoogieDeclarations]: Found specification of procedure safeSub~uint256~uint256_SafeMath
[2020-11-25 09:28:00,871 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeSub~uint256~uint256_SafeMath
[2020-11-25 09:28:00,871 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMul~uint256~uint256_SafeMath
[2020-11-25 09:28:00,871 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMul~uint256~uint256_SafeMath
[2020-11-25 09:28:00,871 INFO  L130     BoogieDeclarations]: Found specification of procedure safeDiv~uint256~uint256_SafeMath
[2020-11-25 09:28:00,871 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeDiv~uint256~uint256_SafeMath
[2020-11-25 09:28:00,872 INFO  L130     BoogieDeclarations]: Found specification of procedure YearnFinanceBitToken_YearnFinanceBitToken_NoBaseCtor__success
[2020-11-25 09:28:00,872 INFO  L130     BoogieDeclarations]: Found specification of procedure YearnFinanceBitToken_YearnFinanceBitToken
[2020-11-25 09:28:00,872 INFO  L138     BoogieDeclarations]: Found implementation of procedure YearnFinanceBitToken_YearnFinanceBitToken
[2020-11-25 09:28:00,872 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_YearnFinanceBitToken
[2020-11-25 09:28:00,872 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_YearnFinanceBitToken
[2020-11-25 09:28:00,872 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_YearnFinanceBitToken
[2020-11-25 09:28:00,872 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_YearnFinanceBitToken
[2020-11-25 09:28:00,872 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_YearnFinanceBitToken
[2020-11-25 09:28:00,872 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_YearnFinanceBitToken
[2020-11-25 09:28:00,872 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_YearnFinanceBitToken
[2020-11-25 09:28:00,872 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_YearnFinanceBitToken
[2020-11-25 09:28:00,872 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_YearnFinanceBitToken
[2020-11-25 09:28:00,872 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_YearnFinanceBitToken
[2020-11-25 09:28:00,873 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_YearnFinanceBitToken
[2020-11-25 09:28:00,873 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_YearnFinanceBitToken
[2020-11-25 09:28:00,873 INFO  L130     BoogieDeclarations]: Found specification of procedure name_YearnFinanceBitToken
[2020-11-25 09:28:00,873 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_YearnFinanceBitToken
[2020-11-25 09:28:00,873 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_YearnFinanceBitToken
[2020-11-25 09:28:00,873 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_YearnFinanceBitToken
[2020-11-25 09:28:00,873 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_YearnFinanceBitToken
[2020-11-25 09:28:00,873 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_YearnFinanceBitToken
[2020-11-25 09:28:00,873 INFO  L130     BoogieDeclarations]: Found specification of procedure _totalSupply_YearnFinanceBitToken
[2020-11-25 09:28:00,873 INFO  L138     BoogieDeclarations]: Found implementation of procedure _totalSupply_YearnFinanceBitToken
[2020-11-25 09:28:00,873 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 09:28:00,873 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 09:28:00,873 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 09:28:00,873 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Interface
[2020-11-25 09:28:00,874 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Interface
[2020-11-25 09:28:00,874 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 09:28:00,874 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 09:28:00,874 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_YearnFinanceBitToken
[2020-11-25 09:28:00,874 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 09:28:00,874 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 09:28:00,874 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface_NoBaseCtor__fail
[2020-11-25 09:28:00,874 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface__success
[2020-11-25 09:28:00,874 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface__fail
[2020-11-25 09:28:00,874 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 09:28:00,874 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 09:28:00,874 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 09:28:00,874 INFO  L130     BoogieDeclarations]: Found specification of procedure safeAdd~uint256~uint256_SafeMath__success
[2020-11-25 09:28:00,875 INFO  L130     BoogieDeclarations]: Found specification of procedure safeAdd~uint256~uint256_SafeMath__fail
[2020-11-25 09:28:00,875 INFO  L130     BoogieDeclarations]: Found specification of procedure safeSub~uint256~uint256_SafeMath__success
[2020-11-25 09:28:00,875 INFO  L130     BoogieDeclarations]: Found specification of procedure safeSub~uint256~uint256_SafeMath__fail
[2020-11-25 09:28:00,875 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMul~uint256~uint256_SafeMath__success
[2020-11-25 09:28:00,875 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMul~uint256~uint256_SafeMath__fail
[2020-11-25 09:28:00,875 INFO  L130     BoogieDeclarations]: Found specification of procedure safeDiv~uint256~uint256_SafeMath__success
[2020-11-25 09:28:00,875 INFO  L130     BoogieDeclarations]: Found specification of procedure safeDiv~uint256~uint256_SafeMath__fail
[2020-11-25 09:28:00,875 INFO  L130     BoogieDeclarations]: Found specification of procedure YearnFinanceBitToken_YearnFinanceBitToken_NoBaseCtor__fail
[2020-11-25 09:28:00,875 INFO  L130     BoogieDeclarations]: Found specification of procedure YearnFinanceBitToken_YearnFinanceBitToken__success
[2020-11-25 09:28:00,875 INFO  L130     BoogieDeclarations]: Found specification of procedure YearnFinanceBitToken_YearnFinanceBitToken__fail
[2020-11-25 09:28:00,875 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_YearnFinanceBitToken__success
[2020-11-25 09:28:00,875 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_YearnFinanceBitToken__fail
[2020-11-25 09:28:00,875 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_YearnFinanceBitToken__success
[2020-11-25 09:28:00,876 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_YearnFinanceBitToken__fail
[2020-11-25 09:28:00,876 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_YearnFinanceBitToken__success
[2020-11-25 09:28:00,876 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_YearnFinanceBitToken__fail
[2020-11-25 09:28:00,876 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_YearnFinanceBitToken__success
[2020-11-25 09:28:00,876 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_YearnFinanceBitToken__fail
[2020-11-25 09:28:00,876 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_YearnFinanceBitToken__success
[2020-11-25 09:28:00,876 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_YearnFinanceBitToken__fail
[2020-11-25 09:28:00,876 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_YearnFinanceBitToken__success
[2020-11-25 09:28:00,876 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_YearnFinanceBitToken__fail
[2020-11-25 09:28:00,876 INFO  L130     BoogieDeclarations]: Found specification of procedure name_YearnFinanceBitToken__success
[2020-11-25 09:28:00,876 INFO  L130     BoogieDeclarations]: Found specification of procedure name_YearnFinanceBitToken__fail
[2020-11-25 09:28:00,876 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_YearnFinanceBitToken__success
[2020-11-25 09:28:00,877 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_YearnFinanceBitToken__fail
[2020-11-25 09:28:00,877 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_YearnFinanceBitToken__success
[2020-11-25 09:28:00,877 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_YearnFinanceBitToken__fail
[2020-11-25 09:28:00,877 INFO  L130     BoogieDeclarations]: Found specification of procedure _totalSupply_YearnFinanceBitToken__success
[2020-11-25 09:28:00,877 INFO  L130     BoogieDeclarations]: Found specification of procedure _totalSupply_YearnFinanceBitToken__fail
[2020-11-25 09:28:00,877 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 09:28:00,877 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 09:28:00,877 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 09:28:00,877 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 09:28:00,877 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 09:28:00,877 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface_NoBaseCtor__fail
[2020-11-25 09:28:00,877 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface_NoBaseCtor__success
[2020-11-25 09:28:00,878 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface__fail
[2020-11-25 09:28:00,878 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface__success
[2020-11-25 09:28:00,878 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 09:28:00,878 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 09:28:00,878 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 09:28:00,878 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 09:28:00,878 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeAdd~uint256~uint256_SafeMath__fail
[2020-11-25 09:28:00,878 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeAdd~uint256~uint256_SafeMath__success
[2020-11-25 09:28:00,878 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeSub~uint256~uint256_SafeMath__fail
[2020-11-25 09:28:00,878 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeSub~uint256~uint256_SafeMath__success
[2020-11-25 09:28:00,878 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMul~uint256~uint256_SafeMath__fail
[2020-11-25 09:28:00,878 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMul~uint256~uint256_SafeMath__success
[2020-11-25 09:28:00,878 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeDiv~uint256~uint256_SafeMath__fail
[2020-11-25 09:28:00,879 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeDiv~uint256~uint256_SafeMath__success
[2020-11-25 09:28:00,879 INFO  L138     BoogieDeclarations]: Found implementation of procedure YearnFinanceBitToken_YearnFinanceBitToken_NoBaseCtor__fail
[2020-11-25 09:28:00,879 INFO  L138     BoogieDeclarations]: Found implementation of procedure YearnFinanceBitToken_YearnFinanceBitToken_NoBaseCtor__success
[2020-11-25 09:28:00,879 INFO  L138     BoogieDeclarations]: Found implementation of procedure YearnFinanceBitToken_YearnFinanceBitToken__fail
[2020-11-25 09:28:00,879 INFO  L138     BoogieDeclarations]: Found implementation of procedure YearnFinanceBitToken_YearnFinanceBitToken__success
[2020-11-25 09:28:00,879 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_YearnFinanceBitToken__fail
[2020-11-25 09:28:00,879 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_YearnFinanceBitToken__success
[2020-11-25 09:28:00,879 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_YearnFinanceBitToken__fail
[2020-11-25 09:28:00,879 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_YearnFinanceBitToken__success
[2020-11-25 09:28:00,879 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_YearnFinanceBitToken__fail
[2020-11-25 09:28:00,879 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_YearnFinanceBitToken__success
[2020-11-25 09:28:00,879 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_YearnFinanceBitToken__fail
[2020-11-25 09:28:00,879 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_YearnFinanceBitToken__success
[2020-11-25 09:28:00,880 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_YearnFinanceBitToken__fail
[2020-11-25 09:28:00,880 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_YearnFinanceBitToken__success
[2020-11-25 09:28:00,880 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_YearnFinanceBitToken__fail
[2020-11-25 09:28:00,880 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_YearnFinanceBitToken__success
[2020-11-25 09:28:00,880 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_YearnFinanceBitToken__fail
[2020-11-25 09:28:00,880 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_YearnFinanceBitToken__success
[2020-11-25 09:28:00,880 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_YearnFinanceBitToken__fail
[2020-11-25 09:28:00,880 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_YearnFinanceBitToken__success
[2020-11-25 09:28:00,880 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_YearnFinanceBitToken__fail
[2020-11-25 09:28:00,880 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_YearnFinanceBitToken__success
[2020-11-25 09:28:00,880 INFO  L138     BoogieDeclarations]: Found implementation of procedure _totalSupply_YearnFinanceBitToken__fail
[2020-11-25 09:28:00,880 INFO  L138     BoogieDeclarations]: Found implementation of procedure _totalSupply_YearnFinanceBitToken__success
[2020-11-25 09:28:00,881 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 09:28:00,881 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 09:28:00,881 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 09:28:00,881 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 09:28:00,881 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 09:28:00,881 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 09:28:00,881 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Interface
[2020-11-25 09:28:00,881 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Interface
[2020-11-25 09:28:00,881 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 09:28:00,881 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 09:28:00,881 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_YearnFinanceBitToken
[2020-11-25 09:28:00,881 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 09:28:00,882 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 09:28:00,882 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 09:28:01,043 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 09:28:01,397 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 09:28:01,398 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 09:28:01,398 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 09:28:01,487 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 09:28:01,488 INFO  L286             CfgBuilder]: Removed 3 assue(true) statements.
[2020-11-25 09:28:01,489 INFO  L202        PluginConnector]: Adding new model YearnFinanceBitToken_0xf0a0f3a6fa6bed75345171a5ea18abcadf6453ba_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 09:28:01 BoogieIcfgContainer
[2020-11-25 09:28:01,490 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 09:28:00" (2/2) ...
[2020-11-25 09:28:01,490 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 09:28:01,490 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@681c3d71 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 09:28:01, skipping insertion in model container
[2020-11-25 09:28:01,490 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 09:28:01,490 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 09:28:01,490 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 09:28:01,492 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 09:28:01,492 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "YearnFinanceBitToken_0xf0a0f3a6fa6bed75345171a5ea18abcadf6453ba_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:28:00" (1/3) ...
[2020-11-25 09:28:01,492 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@354e1e11 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 09:28:01, skipping insertion in model container
[2020-11-25 09:28:01,493 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 09:28:00" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 09:28:01,529 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 09:28:01 NWAContainer
[2020-11-25 09:28:01,529 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 09:28:01,529 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 09:28:01,529 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 09:28:01,530 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 09:28:01,531 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "YearnFinanceBitToken_0xf0a0f3a6fa6bed75345171a5ea18abcadf6453ba_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 09:28:01" (3/4) ...
[2020-11-25 09:28:01,531 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@3a032882 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 09:28:01, skipping insertion in model container
[2020-11-25 09:28:01,532 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 09:28:01" (4/4) ...
[2020-11-25 09:28:01,535 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 09:28:01,538 INFO  L110   BuchiProductObserver]: Initial RCFG 1050 locations, 1323 edges
[2020-11-25 09:28:01,539 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 09:28:01,551 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 09:28:02,623 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 09:28:02,626 INFO  L110   BuchiProductObserver]: BuchiProgram size 2490 locations, 4281 edges
[2020-11-25 09:28:02,627 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 09:28:02 BoogieIcfgContainer
[2020-11-25 09:28:02,627 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 09:28:02,627 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 09:28:02,627 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 09:28:02,629 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 09:28:02,629 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 09:28:02" (1/1) ...
[2020-11-25 09:28:02,703 INFO  L313           BlockEncoder]: Initial Icfg 2490 locations, 4281 edges
[2020-11-25 09:28:02,703 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 09:28:02,705 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 09:28:02,705 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 09:28:02,706 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 09:28:02,718 INFO  L70    emoveInfeasibleEdges]: Removed 66 edges and 9 locations because of local infeasibility
[2020-11-25 09:28:02,725 INFO  L70        RemoveSinkStates]: Removed 32 edges and 21 locations by removing sink states
[2020-11-25 09:28:02,735 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 09:28:02,739 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 09:28:02,742 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 09:28:02,742 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 09:28:02,747 INFO  L313           BlockEncoder]: Encoded RCFG 2446 locations, 4163 edges
[2020-11-25 09:28:02,747 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 09:28:02 BasicIcfg
[2020-11-25 09:28:02,747 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 09:28:02,748 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 09:28:02,748 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 09:28:02,750 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 09:28:02,751 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 09:28:02,751 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "YearnFinanceBitToken_0xf0a0f3a6fa6bed75345171a5ea18abcadf6453ba_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:28:00" (1/6) ...
[2020-11-25 09:28:02,753 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@6cc59ef2 and model type YearnFinanceBitToken_0xf0a0f3a6fa6bed75345171a5ea18abcadf6453ba_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 09:28:02, skipping insertion in model container
[2020-11-25 09:28:02,753 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 09:28:02,753 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 09:28:00" (2/6) ...
[2020-11-25 09:28:02,753 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@6cc59ef2 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 09:28:02, skipping insertion in model container
[2020-11-25 09:28:02,753 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 09:28:02,753 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "YearnFinanceBitToken_0xf0a0f3a6fa6bed75345171a5ea18abcadf6453ba_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 09:28:01" (3/6) ...
[2020-11-25 09:28:02,754 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@6cc59ef2 and model type YearnFinanceBitToken_0xf0a0f3a6fa6bed75345171a5ea18abcadf6453ba_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 09:28:02, skipping insertion in model container
[2020-11-25 09:28:02,754 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 09:28:02,754 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 09:28:01" (4/6) ...
[2020-11-25 09:28:02,754 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@6cc59ef2 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 09:28:02, skipping insertion in model container
[2020-11-25 09:28:02,754 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 09:28:02,754 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 09:28:02" (5/6) ...
[2020-11-25 09:28:02,755 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@6cc59ef2 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 09:28:02, skipping insertion in model container
[2020-11-25 09:28:02,755 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 09:28:02,755 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 09:28:02" (6/6) ...
[2020-11-25 09:28:02,756 INFO  L404   chiAutomizerObserver]: Analyzing ICFG YearnFinanceBitToken_0xf0a0f3a6fa6bed75345171a5ea18abcadf6453ba_transfer-normal.bpl_BEv2
[2020-11-25 09:28:02,796 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 09:28:02,797 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 09:28:02,797 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 09:28:02,797 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 09:28:02,797 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 09:28:02,797 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 09:28:02,797 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 09:28:02,797 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 09:28:02,798 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 09:28:02,829 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2446 states.
[2020-11-25 09:28:02,915 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:28:02,916 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:28:02,916 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:28:02,925 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:28:02,925 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:28:02,925 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 09:28:02,925 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2446 states.
[2020-11-25 09:28:02,941 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:28:02,941 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:28:02,941 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:28:02,943 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:28:02,943 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_YearnFinanceBitToken0 := false;
[L3]                 call_transfer_YearnFinanceBitToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L2854]              assume null == 0;
[L2855]  CALL        call this := FreshRefGenerator__success();
[L1250]              havoc newRef;
[L1251]              assume Alloc[newRef] == false;
[L1252]              Alloc[newRef] := true;
[L1253]              assume newRef != null;
[L2855]  RET         call this := FreshRefGenerator__success();
[L2856]              assume now >= 0;
[L2857]              assume DType[this] == YearnFinanceBitToken;
[L2858]              assume msgvalue_MSG == 0;
[L2859]              gas := gas - 53000;
[L2860]  CALL        call YearnFinanceBitToken_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG);
[L399]               havoc __exception;
[L400]               revert := false;
[L401]   COND FALSE  !(__exception)
[L422]   CALL        call YearnFinanceBitToken_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1457]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1282]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1267]              assume msgsender_MSG != null;
[L1268]              Balance[this] := 0;
[L1282]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1283]  COND FALSE  !(revert)
[L1457]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1458]  COND TRUE   revert
[L422]   RET         call YearnFinanceBitToken_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG);
[L423]               assume !revert && gas >= 0;
[L2860]  RET         call YearnFinanceBitToken_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG);
[L2861]              assume !revert && gas >= 0;

Loop:
[L2864]  CALL        call CorralChoice_YearnFinanceBitToken(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != YearnFinanceBitToken;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND TRUE   choice == 14
[L2752]              gas := gas - 21000;
[L2753]  COND FALSE  !(gas >= 0)
[L2864]  RET         call CorralChoice_YearnFinanceBitToken(this);

[2020-11-25 09:28:02,963 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:28:02,963 INFO  L82        PathProgramCache]: Analyzing trace with hash 329576695, now seen corresponding path program 1 times
[2020-11-25 09:28:02,968 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:28:02,990 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:28:03,036 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 09:28:03,038 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:28:03,038 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 09:28:03,042 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:28:03,187 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 09:28:03,188 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 09:28:03,189 INFO  L87              Difference]: Start difference. First operand 2446 states. Second operand 4 states.
[2020-11-25 09:28:03,470 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:28:03,470 INFO  L93              Difference]: Finished difference Result 1723 states and 1880 transitions.
[2020-11-25 09:28:03,470 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 09:28:03,472 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1723 states and 1880 transitions.
[2020-11-25 09:28:03,480 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:28:03,492 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1723 states to 1723 states and 1880 transitions.
[2020-11-25 09:28:03,493 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-25 09:28:03,495 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 603
[2020-11-25 09:28:03,495 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1723 states and 1880 transitions.
[2020-11-25 09:28:03,501 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:28:03,501 INFO  L728         BuchiCegarLoop]: Abstraction has 1723 states and 1880 transitions.
[2020-11-25 09:28:03,517 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1723 states and 1880 transitions.
[2020-11-25 09:28:03,548 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1723 to 1723.
[2020-11-25 09:28:03,548 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1723 states.
[2020-11-25 09:28:03,552 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1723 states to 1723 states and 1880 transitions.
[2020-11-25 09:28:03,553 INFO  L751         BuchiCegarLoop]: Abstraction has 1723 states and 1880 transitions.
[2020-11-25 09:28:03,553 INFO  L631         BuchiCegarLoop]: Abstraction has 1723 states and 1880 transitions.
[2020-11-25 09:28:03,553 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 09:28:03,553 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1723 states and 1880 transitions.
[2020-11-25 09:28:03,558 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:28:03,559 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:28:03,559 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:28:03,560 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:28:03,561 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_YearnFinanceBitToken0 := false;
[L3]                 call_transfer_YearnFinanceBitToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L2854]              assume null == 0;
[L2855]  CALL        call this := FreshRefGenerator__success();
[L1250]              havoc newRef;
[L1251]              assume Alloc[newRef] == false;
[L1252]              Alloc[newRef] := true;
[L1253]              assume newRef != null;
[L2855]  RET         call this := FreshRefGenerator__success();
[L2856]              assume now >= 0;
[L2857]              assume DType[this] == YearnFinanceBitToken;
[L2858]              assume msgvalue_MSG == 0;
[L2859]              gas := gas - 53000;
[L2860]  CALL        call YearnFinanceBitToken_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG);
[L399]               havoc __exception;
[L400]               revert := false;
[L401]   COND FALSE  !(__exception)
[L422]   CALL        call YearnFinanceBitToken_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1457]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1282]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1267]              assume msgsender_MSG != null;
[L1268]              Balance[this] := 0;
[L1282]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1283]  COND FALSE  !(revert)
[L1457]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1458]  COND TRUE   revert
[L422]   RET         call YearnFinanceBitToken_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG);
[L423]               assume !revert && gas >= 0;
[L2860]  RET         call YearnFinanceBitToken_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG);
[L2861]              assume !revert && gas >= 0;
[L2864]  CALL        call CorralChoice_YearnFinanceBitToken(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != YearnFinanceBitToken;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND TRUE   choice == 11
[L2770]              gas := gas - 21000;
[L2771]  COND TRUE   gas >= 0
[L2772]              assume tokens_s334 >= 0 && tokens_s334 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2773]              assume msgvalue_MSG == 0;
[L2774]  CALL        call success_s334 := transfer~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s334) && msgsender_MSG != to_s334) && tokens_s334 <= balances_YearnFinanceBitToken[this][msgsender_MSG]) && balances_YearnFinanceBitToken[this][to_s334] + tokens_s334 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s334 >= 0) && tokens_s334 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][to_s334] >= 0) && balances_YearnFinanceBitToken[this][to_s334] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][msgsender_MSG] >= 0) && balances_YearnFinanceBitToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_YearnFinanceBitToken0 := true;
[L3]                 call_transfer_YearnFinanceBitToken0 := false;
[L3]                 revert := revert_hold;
[L653]               havoc __exception;
[L654]               revert := false;
[L655]   COND FALSE  !(__exception)
[L676]   CALL        call success_s334 := transfer~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L1564]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1565]  CALL        call __var_2 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][msgsender_MSG], tokens_s334);
[L1349]  COND TRUE   !(b_s112 <= a_s112)
[L1350]              revert := true;
[L1565]  RET         call __var_2 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][msgsender_MSG], tokens_s334);
[L1566]  COND TRUE   revert
[L676]   RET         call success_s334 := transfer~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L677]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((success_s334 == true && balances_YearnFinanceBitToken[this][msgsender_MSG] == old(balances_YearnFinanceBitToken[this][msgsender_MSG]) - tokens_s334) && balances_YearnFinanceBitToken[this][to_s334] == old(balances_YearnFinanceBitToken[this][to_s334]) + tokens_s334) && _totalSupply_YearnFinanceBitToken[this] == old(_totalSupply_YearnFinanceBitToken[this])) && allowed_YearnFinanceBitToken[this] == old(allowed_YearnFinanceBitToken[this])) && balances_YearnFinanceBitToken[this][p1] == old(balances_YearnFinanceBitToken[this][p1])) && name_YearnFinanceBitToken[this] == old(name_YearnFinanceBitToken[this])) && symbol_YearnFinanceBitToken[this] == old(symbol_YearnFinanceBitToken[this])) && decimals_YearnFinanceBitToken[this] == old(decimals_YearnFinanceBitToken[this]));
[L3]                 revert := revert_hold;
[L2774]  RET         call success_s334 := transfer~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L2864]  RET         call CorralChoice_YearnFinanceBitToken(this);

Loop:
[L2864]  CALL        call CorralChoice_YearnFinanceBitToken(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != YearnFinanceBitToken;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND TRUE   choice == 11
[L2770]              gas := gas - 21000;
[L2771]  COND TRUE   gas >= 0
[L2772]              assume tokens_s334 >= 0 && tokens_s334 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2773]              assume msgvalue_MSG == 0;
[L2774]  CALL        call success_s334 := transfer~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s334) && msgsender_MSG != to_s334) && tokens_s334 <= balances_YearnFinanceBitToken[this][msgsender_MSG]) && balances_YearnFinanceBitToken[this][to_s334] + tokens_s334 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s334 >= 0) && tokens_s334 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][to_s334] >= 0) && balances_YearnFinanceBitToken[this][to_s334] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][msgsender_MSG] >= 0) && balances_YearnFinanceBitToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_YearnFinanceBitToken0 := true;
[L3]                 call_transfer_YearnFinanceBitToken0 := false;
[L3]                 revert := revert_hold;
[L653]               havoc __exception;
[L654]               revert := false;
[L655]   COND FALSE  !(__exception)
[L676]   CALL        call success_s334 := transfer~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L1564]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1565]  CALL        call __var_2 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][msgsender_MSG], tokens_s334);
[L1349]  COND TRUE   !(b_s112 <= a_s112)
[L1350]              revert := true;
[L1565]  RET         call __var_2 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][msgsender_MSG], tokens_s334);
[L1566]  COND TRUE   revert
[L676]   RET         call success_s334 := transfer~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L677]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((success_s334 == true && balances_YearnFinanceBitToken[this][msgsender_MSG] == old(balances_YearnFinanceBitToken[this][msgsender_MSG]) - tokens_s334) && balances_YearnFinanceBitToken[this][to_s334] == old(balances_YearnFinanceBitToken[this][to_s334]) + tokens_s334) && _totalSupply_YearnFinanceBitToken[this] == old(_totalSupply_YearnFinanceBitToken[this])) && allowed_YearnFinanceBitToken[this] == old(allowed_YearnFinanceBitToken[this])) && balances_YearnFinanceBitToken[this][p1] == old(balances_YearnFinanceBitToken[this][p1])) && name_YearnFinanceBitToken[this] == old(name_YearnFinanceBitToken[this])) && symbol_YearnFinanceBitToken[this] == old(symbol_YearnFinanceBitToken[this])) && decimals_YearnFinanceBitToken[this] == old(decimals_YearnFinanceBitToken[this]));
[L3]                 revert := revert_hold;
[L2774]  RET         call success_s334 := transfer~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L2864]  RET         call CorralChoice_YearnFinanceBitToken(this);

[2020-11-25 09:28:03,564 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:28:03,565 INFO  L82        PathProgramCache]: Analyzing trace with hash 1223087485, now seen corresponding path program 1 times
[2020-11-25 09:28:03,565 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:28:03,574 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:28:03,597 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 09:28:03,597 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:28:03,597 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 09:28:03,599 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:28:03,599 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 09:28:03,599 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 09:28:03,599 INFO  L87              Difference]: Start difference. First operand 1723 states and 1880 transitions. cyclomatic complexity: 159 Second operand 4 states.
[2020-11-25 09:28:03,900 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:28:03,900 INFO  L93              Difference]: Finished difference Result 2597 states and 2956 transitions.
[2020-11-25 09:28:03,900 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 09:28:03,901 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2597 states and 2956 transitions.
[2020-11-25 09:28:03,911 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-25 09:28:03,924 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2597 states to 2521 states and 2874 transitions.
[2020-11-25 09:28:03,924 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 855
[2020-11-25 09:28:03,926 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 860
[2020-11-25 09:28:03,926 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2521 states and 2874 transitions.
[2020-11-25 09:28:03,931 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:28:03,931 INFO  L728         BuchiCegarLoop]: Abstraction has 2521 states and 2874 transitions.
[2020-11-25 09:28:03,933 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2521 states and 2874 transitions.
[2020-11-25 09:28:03,959 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2521 to 1743.
[2020-11-25 09:28:03,959 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1743 states.
[2020-11-25 09:28:03,961 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1743 states to 1743 states and 1872 transitions.
[2020-11-25 09:28:03,962 INFO  L751         BuchiCegarLoop]: Abstraction has 1743 states and 1872 transitions.
[2020-11-25 09:28:03,962 INFO  L631         BuchiCegarLoop]: Abstraction has 1743 states and 1872 transitions.
[2020-11-25 09:28:03,962 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 09:28:03,962 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1743 states and 1872 transitions.
[2020-11-25 09:28:03,965 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:28:03,965 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:28:03,965 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:28:03,967 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:28:03,967 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_YearnFinanceBitToken0 := false;
[L3]                 call_transfer_YearnFinanceBitToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L2854]              assume null == 0;
[L2855]  CALL        call this := FreshRefGenerator__success();
[L1250]              havoc newRef;
[L1251]              assume Alloc[newRef] == false;
[L1252]              Alloc[newRef] := true;
[L1253]              assume newRef != null;
[L2855]  RET         call this := FreshRefGenerator__success();
[L2856]              assume now >= 0;
[L2857]              assume DType[this] == YearnFinanceBitToken;
[L2858]              assume msgvalue_MSG == 0;
[L2859]              gas := gas - 53000;
[L2860]  CALL        call YearnFinanceBitToken_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG);
[L399]               havoc __exception;
[L400]               revert := false;
[L401]   COND FALSE  !(__exception)
[L422]   CALL        call YearnFinanceBitToken_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1457]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1282]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1267]              assume msgsender_MSG != null;
[L1268]              Balance[this] := 0;
[L1282]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1283]  COND FALSE  !(revert)
[L1457]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1458]  COND FALSE  !(revert)
[L1461]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1314]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1299]              assume msgsender_MSG != null;
[L1300]              Balance[this] := 0;
[L1314]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1315]  COND FALSE  !(revert)
[L1461]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1462]  COND FALSE  !(revert)
[L1465]  CALL        call YearnFinanceBitToken_YearnFinanceBitToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1418]              assume msgsender_MSG != null;
[L1419]              Balance[this] := 0;
[L1420]              name_YearnFinanceBitToken[this] := 627147201;
[L1421]              symbol_YearnFinanceBitToken[this] := 627147201;
[L1422]              decimals_YearnFinanceBitToken[this] := 0;
[L1423]              _totalSupply_YearnFinanceBitToken[this] := 0;
[L1424]              balances_YearnFinanceBitToken[this] := zeroRefintArr();
[L1425]              sum_balances0[this] := 0;
[L1426]              allowed_YearnFinanceBitToken[this] := zeroRefRefintArr();
[L1427]              sum_allowed1[this] := 0;
[L1429]              name_YearnFinanceBitToken[this] := 1658284292;
[L1430]              symbol_YearnFinanceBitToken[this] := -1175268548;
[L1431]              decimals_YearnFinanceBitToken[this] := 18;
[L1432]              _totalSupply_YearnFinanceBitToken[this] := 7000000000000000000000;
[L1433]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1434]              balances_YearnFinanceBitToken[this][msgsender_MSG] := _totalSupply_YearnFinanceBitToken[this];
[L1435]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1436]              assert { :EventEmitted "Transfer_YearnFinanceBitToken" } true;
[L1465]  RET         call YearnFinanceBitToken_YearnFinanceBitToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1466]  COND FALSE  !(revert)
[L422]   RET         call YearnFinanceBitToken_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG);
[L423]               assume !revert && gas >= 0;
[L2860]  RET         call YearnFinanceBitToken_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG);
[L2861]              assume !revert && gas >= 0;
[L2864]  CALL        call CorralChoice_YearnFinanceBitToken(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != YearnFinanceBitToken;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND TRUE   choice == 11
[L2770]              gas := gas - 21000;
[L2771]  COND TRUE   gas >= 0
[L2772]              assume tokens_s334 >= 0 && tokens_s334 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2773]              assume msgvalue_MSG == 0;
[L2774]  CALL        call success_s334 := transfer~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s334) && msgsender_MSG != to_s334) && tokens_s334 <= balances_YearnFinanceBitToken[this][msgsender_MSG]) && balances_YearnFinanceBitToken[this][to_s334] + tokens_s334 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s334 >= 0) && tokens_s334 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][to_s334] >= 0) && balances_YearnFinanceBitToken[this][to_s334] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][msgsender_MSG] >= 0) && balances_YearnFinanceBitToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_YearnFinanceBitToken0 := true;
[L3]                 call_transfer_YearnFinanceBitToken0 := false;
[L3]                 revert := revert_hold;
[L653]               havoc __exception;
[L654]               revert := false;
[L655]   COND TRUE   __exception
[L656]               __tmp__Balance := Balance;
[L657]               __tmp__DType := DType;
[L658]               __tmp__Alloc := Alloc;
[L659]               __tmp__balance_ADDR := balance_ADDR;
[L660]               __tmp__M_Ref_int := M_Ref_int;
[L661]               __tmp__sum_balances0 := sum_balances0;
[L662]               __tmp__alloc_allowed_YearnFinanceBitToken_lvl0 := alloc_allowed_YearnFinanceBitToken_lvl0;
[L663]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L664]               __tmp__sum_allowed1 := sum_allowed1;
[L665]               __tmp__Length := Length;
[L666]               __tmp__now := now;
[L667]               __tmp__name_YearnFinanceBitToken := name_YearnFinanceBitToken;
[L668]               __tmp__symbol_YearnFinanceBitToken := symbol_YearnFinanceBitToken;
[L669]               __tmp__decimals_YearnFinanceBitToken := decimals_YearnFinanceBitToken;
[L670]               __tmp___totalSupply_YearnFinanceBitToken := _totalSupply_YearnFinanceBitToken;
[L671]               __tmp__balances_YearnFinanceBitToken := balances_YearnFinanceBitToken;
[L672]               __tmp__allowed_YearnFinanceBitToken := allowed_YearnFinanceBitToken;
[L673]   CALL        call success_s334 := transfer~address~uint256_YearnFinanceBitToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L1534]  COND TRUE   __tmp__DType[this] == YearnFinanceBitToken
[L1535]  CALL        call __var_2 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_YearnFinanceBitToken[this][msgsender_MSG], tokens_s334);
[L1340]  COND TRUE   !(b_s112 <= a_s112)
[L1341]              revert := true;
[L1535]  RET         call __var_2 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_YearnFinanceBitToken[this][msgsender_MSG], tokens_s334);
[L1536]  COND TRUE   revert
[L673]   RET         call success_s334 := transfer~address~uint256_YearnFinanceBitToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L674]               assume revert || gas < 0;
[L2774]  RET         call success_s334 := transfer~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L2864]  RET         call CorralChoice_YearnFinanceBitToken(this);

Loop:
[L2864]  CALL        call CorralChoice_YearnFinanceBitToken(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != YearnFinanceBitToken;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND TRUE   choice == 11
[L2770]              gas := gas - 21000;
[L2771]  COND TRUE   gas >= 0
[L2772]              assume tokens_s334 >= 0 && tokens_s334 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2773]              assume msgvalue_MSG == 0;
[L2774]  CALL        call success_s334 := transfer~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s334) && msgsender_MSG != to_s334) && tokens_s334 <= balances_YearnFinanceBitToken[this][msgsender_MSG]) && balances_YearnFinanceBitToken[this][to_s334] + tokens_s334 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s334 >= 0) && tokens_s334 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][to_s334] >= 0) && balances_YearnFinanceBitToken[this][to_s334] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][msgsender_MSG] >= 0) && balances_YearnFinanceBitToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_YearnFinanceBitToken0 := true;
[L3]                 call_transfer_YearnFinanceBitToken0 := false;
[L3]                 revert := revert_hold;
[L653]               havoc __exception;
[L654]               revert := false;
[L655]   COND TRUE   __exception
[L656]               __tmp__Balance := Balance;
[L657]               __tmp__DType := DType;
[L658]               __tmp__Alloc := Alloc;
[L659]               __tmp__balance_ADDR := balance_ADDR;
[L660]               __tmp__M_Ref_int := M_Ref_int;
[L661]               __tmp__sum_balances0 := sum_balances0;
[L662]               __tmp__alloc_allowed_YearnFinanceBitToken_lvl0 := alloc_allowed_YearnFinanceBitToken_lvl0;
[L663]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L664]               __tmp__sum_allowed1 := sum_allowed1;
[L665]               __tmp__Length := Length;
[L666]               __tmp__now := now;
[L667]               __tmp__name_YearnFinanceBitToken := name_YearnFinanceBitToken;
[L668]               __tmp__symbol_YearnFinanceBitToken := symbol_YearnFinanceBitToken;
[L669]               __tmp__decimals_YearnFinanceBitToken := decimals_YearnFinanceBitToken;
[L670]               __tmp___totalSupply_YearnFinanceBitToken := _totalSupply_YearnFinanceBitToken;
[L671]               __tmp__balances_YearnFinanceBitToken := balances_YearnFinanceBitToken;
[L672]               __tmp__allowed_YearnFinanceBitToken := allowed_YearnFinanceBitToken;
[L673]   CALL        call success_s334 := transfer~address~uint256_YearnFinanceBitToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L1534]  COND TRUE   __tmp__DType[this] == YearnFinanceBitToken
[L1535]  CALL        call __var_2 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_YearnFinanceBitToken[this][msgsender_MSG], tokens_s334);
[L1340]  COND TRUE   !(b_s112 <= a_s112)
[L1341]              revert := true;
[L1535]  RET         call __var_2 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_YearnFinanceBitToken[this][msgsender_MSG], tokens_s334);
[L1536]  COND TRUE   revert
[L673]   RET         call success_s334 := transfer~address~uint256_YearnFinanceBitToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L674]               assume revert || gas < 0;
[L2774]  RET         call success_s334 := transfer~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L2864]  RET         call CorralChoice_YearnFinanceBitToken(this);

[2020-11-25 09:28:03,970 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:28:03,970 INFO  L82        PathProgramCache]: Analyzing trace with hash 1708318003, now seen corresponding path program 1 times
[2020-11-25 09:28:03,970 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:28:03,982 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:28:04,030 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 09:28:04,031 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:28:04,031 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 09:28:04,031 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:28:04,031 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 09:28:04,031 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 09:28:04,031 INFO  L87              Difference]: Start difference. First operand 1743 states and 1872 transitions. cyclomatic complexity: 131 Second operand 7 states.
[2020-11-25 09:28:04,691 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:28:04,691 INFO  L93              Difference]: Finished difference Result 1901 states and 2044 transitions.
[2020-11-25 09:28:04,691 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 09:28:04,691 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1901 states and 2044 transitions.
[2020-11-25 09:28:04,698 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 09:28:04,706 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1901 states to 1901 states and 2044 transitions.
[2020-11-25 09:28:04,706 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 670
[2020-11-25 09:28:04,706 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 670
[2020-11-25 09:28:04,706 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1901 states and 2044 transitions.
[2020-11-25 09:28:04,708 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:28:04,708 INFO  L728         BuchiCegarLoop]: Abstraction has 1901 states and 2044 transitions.
[2020-11-25 09:28:04,710 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1901 states and 2044 transitions.
[2020-11-25 09:28:04,730 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1901 to 1795.
[2020-11-25 09:28:04,730 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1795 states.
[2020-11-25 09:28:04,732 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1795 states to 1795 states and 1928 transitions.
[2020-11-25 09:28:04,732 INFO  L751         BuchiCegarLoop]: Abstraction has 1795 states and 1928 transitions.
[2020-11-25 09:28:04,733 INFO  L631         BuchiCegarLoop]: Abstraction has 1795 states and 1928 transitions.
[2020-11-25 09:28:04,733 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 09:28:04,733 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1795 states and 1928 transitions.
[2020-11-25 09:28:04,737 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:28:04,737 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:28:04,737 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:28:04,739 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:28:04,739 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_YearnFinanceBitToken0 := false;
[L3]                 call_transfer_YearnFinanceBitToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L2854]              assume null == 0;
[L2855]  CALL        call this := FreshRefGenerator__success();
[L1250]              havoc newRef;
[L1251]              assume Alloc[newRef] == false;
[L1252]              Alloc[newRef] := true;
[L1253]              assume newRef != null;
[L2855]  RET         call this := FreshRefGenerator__success();
[L2856]              assume now >= 0;
[L2857]              assume DType[this] == YearnFinanceBitToken;
[L2858]              assume msgvalue_MSG == 0;
[L2859]              gas := gas - 53000;
[L2860]  CALL        call YearnFinanceBitToken_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG);
[L399]               havoc __exception;
[L400]               revert := false;
[L401]   COND FALSE  !(__exception)
[L422]   CALL        call YearnFinanceBitToken_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1457]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1282]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1267]              assume msgsender_MSG != null;
[L1268]              Balance[this] := 0;
[L1282]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1283]  COND FALSE  !(revert)
[L1457]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1458]  COND FALSE  !(revert)
[L1461]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1314]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1299]              assume msgsender_MSG != null;
[L1300]              Balance[this] := 0;
[L1314]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1315]  COND FALSE  !(revert)
[L1461]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1462]  COND FALSE  !(revert)
[L1465]  CALL        call YearnFinanceBitToken_YearnFinanceBitToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1418]              assume msgsender_MSG != null;
[L1419]              Balance[this] := 0;
[L1420]              name_YearnFinanceBitToken[this] := 627147201;
[L1421]              symbol_YearnFinanceBitToken[this] := 627147201;
[L1422]              decimals_YearnFinanceBitToken[this] := 0;
[L1423]              _totalSupply_YearnFinanceBitToken[this] := 0;
[L1424]              balances_YearnFinanceBitToken[this] := zeroRefintArr();
[L1425]              sum_balances0[this] := 0;
[L1426]              allowed_YearnFinanceBitToken[this] := zeroRefRefintArr();
[L1427]              sum_allowed1[this] := 0;
[L1429]              name_YearnFinanceBitToken[this] := 1658284292;
[L1430]              symbol_YearnFinanceBitToken[this] := -1175268548;
[L1431]              decimals_YearnFinanceBitToken[this] := 18;
[L1432]              _totalSupply_YearnFinanceBitToken[this] := 7000000000000000000000;
[L1433]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1434]              balances_YearnFinanceBitToken[this][msgsender_MSG] := _totalSupply_YearnFinanceBitToken[this];
[L1435]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1436]              assert { :EventEmitted "Transfer_YearnFinanceBitToken" } true;
[L1465]  RET         call YearnFinanceBitToken_YearnFinanceBitToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1466]  COND FALSE  !(revert)
[L422]   RET         call YearnFinanceBitToken_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG);
[L423]               assume !revert && gas >= 0;
[L2860]  RET         call YearnFinanceBitToken_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG);
[L2861]              assume !revert && gas >= 0;
[L2864]  CALL        call CorralChoice_YearnFinanceBitToken(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != YearnFinanceBitToken;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND TRUE   choice == 11
[L2770]              gas := gas - 21000;
[L2771]  COND TRUE   gas >= 0
[L2772]              assume tokens_s334 >= 0 && tokens_s334 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2773]              assume msgvalue_MSG == 0;
[L2774]  CALL        call success_s334 := transfer~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s334) && msgsender_MSG != to_s334) && tokens_s334 <= balances_YearnFinanceBitToken[this][msgsender_MSG]) && balances_YearnFinanceBitToken[this][to_s334] + tokens_s334 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s334 >= 0) && tokens_s334 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][to_s334] >= 0) && balances_YearnFinanceBitToken[this][to_s334] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][msgsender_MSG] >= 0) && balances_YearnFinanceBitToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_YearnFinanceBitToken0 := true;
[L3]                 call_transfer_YearnFinanceBitToken0 := false;
[L3]                 revert := revert_hold;
[L653]               havoc __exception;
[L654]               revert := false;
[L655]   COND FALSE  !(__exception)
[L676]   CALL        call success_s334 := transfer~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L1564]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1565]  CALL        call __var_2 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][msgsender_MSG], tokens_s334);
[L1349]  COND FALSE  !(!(b_s112 <= a_s112))
[L1353]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1565]  RET         call __var_2 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][msgsender_MSG], tokens_s334);
[L1566]  COND FALSE  !(revert)
[L1572]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1573]              balances_YearnFinanceBitToken[this][msgsender_MSG] := __var_2;
[L1574]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1575]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1576]  CALL        call __var_3 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][to_s334], tokens_s334);
[L1331]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1332]  COND FALSE  !(!(c_s90 >= a_s90))
[L1576]  RET         call __var_3 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][to_s334], tokens_s334);
[L1577]  COND FALSE  !(revert)
[L1583]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][to_s334];
[L1584]              balances_YearnFinanceBitToken[this][to_s334] := __var_3;
[L1585]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][to_s334];
[L1586]              assert { :EventEmitted "Transfer_YearnFinanceBitToken" } true;
[L1587]              success_s334 := true;
[L676]   RET         call success_s334 := transfer~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L677]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((success_s334 == true && balances_YearnFinanceBitToken[this][msgsender_MSG] == old(balances_YearnFinanceBitToken[this][msgsender_MSG]) - tokens_s334) && balances_YearnFinanceBitToken[this][to_s334] == old(balances_YearnFinanceBitToken[this][to_s334]) + tokens_s334) && _totalSupply_YearnFinanceBitToken[this] == old(_totalSupply_YearnFinanceBitToken[this])) && allowed_YearnFinanceBitToken[this] == old(allowed_YearnFinanceBitToken[this])) && balances_YearnFinanceBitToken[this][p1] == old(balances_YearnFinanceBitToken[this][p1])) && name_YearnFinanceBitToken[this] == old(name_YearnFinanceBitToken[this])) && symbol_YearnFinanceBitToken[this] == old(symbol_YearnFinanceBitToken[this])) && decimals_YearnFinanceBitToken[this] == old(decimals_YearnFinanceBitToken[this]));
[L3]                 revert := revert_hold;
[L2774]  RET         call success_s334 := transfer~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L2864]  RET         call CorralChoice_YearnFinanceBitToken(this);

Loop:
[L2864]  CALL        call CorralChoice_YearnFinanceBitToken(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != YearnFinanceBitToken;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND TRUE   choice == 11
[L2770]              gas := gas - 21000;
[L2771]  COND TRUE   gas >= 0
[L2772]              assume tokens_s334 >= 0 && tokens_s334 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2773]              assume msgvalue_MSG == 0;
[L2774]  CALL        call success_s334 := transfer~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s334) && msgsender_MSG != to_s334) && tokens_s334 <= balances_YearnFinanceBitToken[this][msgsender_MSG]) && balances_YearnFinanceBitToken[this][to_s334] + tokens_s334 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s334 >= 0) && tokens_s334 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][to_s334] >= 0) && balances_YearnFinanceBitToken[this][to_s334] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][msgsender_MSG] >= 0) && balances_YearnFinanceBitToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_YearnFinanceBitToken0 := true;
[L3]                 call_transfer_YearnFinanceBitToken0 := false;
[L3]                 revert := revert_hold;
[L653]               havoc __exception;
[L654]               revert := false;
[L655]   COND FALSE  !(__exception)
[L676]   CALL        call success_s334 := transfer~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L1564]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1565]  CALL        call __var_2 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][msgsender_MSG], tokens_s334);
[L1349]  COND FALSE  !(!(b_s112 <= a_s112))
[L1353]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1565]  RET         call __var_2 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][msgsender_MSG], tokens_s334);
[L1566]  COND FALSE  !(revert)
[L1572]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1573]              balances_YearnFinanceBitToken[this][msgsender_MSG] := __var_2;
[L1574]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1575]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1576]  CALL        call __var_3 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][to_s334], tokens_s334);
[L1331]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1332]  COND FALSE  !(!(c_s90 >= a_s90))
[L1576]  RET         call __var_3 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][to_s334], tokens_s334);
[L1577]  COND FALSE  !(revert)
[L1583]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][to_s334];
[L1584]              balances_YearnFinanceBitToken[this][to_s334] := __var_3;
[L1585]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][to_s334];
[L1586]              assert { :EventEmitted "Transfer_YearnFinanceBitToken" } true;
[L1587]              success_s334 := true;
[L676]   RET         call success_s334 := transfer~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L677]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((success_s334 == true && balances_YearnFinanceBitToken[this][msgsender_MSG] == old(balances_YearnFinanceBitToken[this][msgsender_MSG]) - tokens_s334) && balances_YearnFinanceBitToken[this][to_s334] == old(balances_YearnFinanceBitToken[this][to_s334]) + tokens_s334) && _totalSupply_YearnFinanceBitToken[this] == old(_totalSupply_YearnFinanceBitToken[this])) && allowed_YearnFinanceBitToken[this] == old(allowed_YearnFinanceBitToken[this])) && balances_YearnFinanceBitToken[this][p1] == old(balances_YearnFinanceBitToken[this][p1])) && name_YearnFinanceBitToken[this] == old(name_YearnFinanceBitToken[this])) && symbol_YearnFinanceBitToken[this] == old(symbol_YearnFinanceBitToken[this])) && decimals_YearnFinanceBitToken[this] == old(decimals_YearnFinanceBitToken[this]));
[L3]                 revert := revert_hold;
[L2774]  RET         call success_s334 := transfer~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L2864]  RET         call CorralChoice_YearnFinanceBitToken(this);

[2020-11-25 09:28:04,743 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:28:04,744 INFO  L82        PathProgramCache]: Analyzing trace with hash 2113390327, now seen corresponding path program 1 times
[2020-11-25 09:28:04,745 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:28:04,799 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:28:05,351 WARN  L188               SmtUtils]: Spent 102.00 ms on a formula simplification. DAG size of input: 93 DAG size of output: 65
[2020-11-25 09:28:05,695 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 09:28:05,695 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:28:05,695 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [23] imperfect sequences [] total 23
[2020-11-25 09:28:05,696 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:28:05,696 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 24 interpolants.
[2020-11-25 09:28:05,696 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=53, Invalid=499, Unknown=0, NotChecked=0, Total=552
[2020-11-25 09:28:05,696 INFO  L87              Difference]: Start difference. First operand 1795 states and 1928 transitions. cyclomatic complexity: 135 Second operand 24 states.
[2020-11-25 09:28:09,374 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:28:09,374 INFO  L93              Difference]: Finished difference Result 1864 states and 2029 transitions.
[2020-11-25 09:28:09,374 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 25 states. 
[2020-11-25 09:28:09,374 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1864 states and 2029 transitions.
[2020-11-25 09:28:09,380 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 09:28:09,386 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1864 states to 1864 states and 2029 transitions.
[2020-11-25 09:28:09,386 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 649
[2020-11-25 09:28:09,386 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 649
[2020-11-25 09:28:09,386 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1864 states and 2029 transitions.
[2020-11-25 09:28:09,388 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:28:09,388 INFO  L728         BuchiCegarLoop]: Abstraction has 1864 states and 2029 transitions.
[2020-11-25 09:28:09,390 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1864 states and 2029 transitions.
[2020-11-25 09:28:09,408 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1864 to 1845.
[2020-11-25 09:28:09,408 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1845 states.
[2020-11-25 09:28:09,411 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1845 states to 1845 states and 1989 transitions.
[2020-11-25 09:28:09,412 INFO  L751         BuchiCegarLoop]: Abstraction has 1845 states and 1989 transitions.
[2020-11-25 09:28:09,412 INFO  L631         BuchiCegarLoop]: Abstraction has 1845 states and 1989 transitions.
[2020-11-25 09:28:09,412 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 09:28:09,412 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1845 states and 1989 transitions.
[2020-11-25 09:28:09,416 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 09:28:09,416 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:28:09,416 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:28:09,418 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:28:09,418 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_YearnFinanceBitToken0 := false;
[L3]                 call_transfer_YearnFinanceBitToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L2854]              assume null == 0;
[L2855]  CALL        call this := FreshRefGenerator__success();
[L1250]              havoc newRef;
[L1251]              assume Alloc[newRef] == false;
[L1252]              Alloc[newRef] := true;
[L1253]              assume newRef != null;
[L2855]  RET         call this := FreshRefGenerator__success();
[L2856]              assume now >= 0;
[L2857]              assume DType[this] == YearnFinanceBitToken;
[L2858]              assume msgvalue_MSG == 0;
[L2859]              gas := gas - 53000;
[L2860]  CALL        call YearnFinanceBitToken_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG);
[L399]               havoc __exception;
[L400]               revert := false;
[L401]   COND FALSE  !(__exception)
[L422]   CALL        call YearnFinanceBitToken_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1457]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1282]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1267]              assume msgsender_MSG != null;
[L1268]              Balance[this] := 0;
[L1282]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1283]  COND FALSE  !(revert)
[L1457]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1458]  COND FALSE  !(revert)
[L1461]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1314]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1299]              assume msgsender_MSG != null;
[L1300]              Balance[this] := 0;
[L1314]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1315]  COND FALSE  !(revert)
[L1461]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1462]  COND FALSE  !(revert)
[L1465]  CALL        call YearnFinanceBitToken_YearnFinanceBitToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1418]              assume msgsender_MSG != null;
[L1419]              Balance[this] := 0;
[L1420]              name_YearnFinanceBitToken[this] := 627147201;
[L1421]              symbol_YearnFinanceBitToken[this] := 627147201;
[L1422]              decimals_YearnFinanceBitToken[this] := 0;
[L1423]              _totalSupply_YearnFinanceBitToken[this] := 0;
[L1424]              balances_YearnFinanceBitToken[this] := zeroRefintArr();
[L1425]              sum_balances0[this] := 0;
[L1426]              allowed_YearnFinanceBitToken[this] := zeroRefRefintArr();
[L1427]              sum_allowed1[this] := 0;
[L1429]              name_YearnFinanceBitToken[this] := 1658284292;
[L1430]              symbol_YearnFinanceBitToken[this] := -1175268548;
[L1431]              decimals_YearnFinanceBitToken[this] := 18;
[L1432]              _totalSupply_YearnFinanceBitToken[this] := 7000000000000000000000;
[L1433]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1434]              balances_YearnFinanceBitToken[this][msgsender_MSG] := _totalSupply_YearnFinanceBitToken[this];
[L1435]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1436]              assert { :EventEmitted "Transfer_YearnFinanceBitToken" } true;
[L1465]  RET         call YearnFinanceBitToken_YearnFinanceBitToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1466]  COND FALSE  !(revert)
[L422]   RET         call YearnFinanceBitToken_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG);
[L423]               assume !revert && gas >= 0;
[L2860]  RET         call YearnFinanceBitToken_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG);
[L2861]              assume !revert && gas >= 0;
[L2864]  CALL        call CorralChoice_YearnFinanceBitToken(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != YearnFinanceBitToken;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND TRUE   choice == 11
[L2770]              gas := gas - 21000;
[L2771]  COND TRUE   gas >= 0
[L2772]              assume tokens_s334 >= 0 && tokens_s334 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2773]              assume msgvalue_MSG == 0;
[L2774]  CALL        call success_s334 := transfer~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s334) && msgsender_MSG != to_s334) && tokens_s334 <= balances_YearnFinanceBitToken[this][msgsender_MSG]) && balances_YearnFinanceBitToken[this][to_s334] + tokens_s334 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s334 >= 0) && tokens_s334 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][to_s334] >= 0) && balances_YearnFinanceBitToken[this][to_s334] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][msgsender_MSG] >= 0) && balances_YearnFinanceBitToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_YearnFinanceBitToken0 := true;
[L3]                 call_transfer_YearnFinanceBitToken0 := false;
[L3]                 revert := revert_hold;
[L653]               havoc __exception;
[L654]               revert := false;
[L655]   COND TRUE   __exception
[L656]               __tmp__Balance := Balance;
[L657]               __tmp__DType := DType;
[L658]               __tmp__Alloc := Alloc;
[L659]               __tmp__balance_ADDR := balance_ADDR;
[L660]               __tmp__M_Ref_int := M_Ref_int;
[L661]               __tmp__sum_balances0 := sum_balances0;
[L662]               __tmp__alloc_allowed_YearnFinanceBitToken_lvl0 := alloc_allowed_YearnFinanceBitToken_lvl0;
[L663]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L664]               __tmp__sum_allowed1 := sum_allowed1;
[L665]               __tmp__Length := Length;
[L666]               __tmp__now := now;
[L667]               __tmp__name_YearnFinanceBitToken := name_YearnFinanceBitToken;
[L668]               __tmp__symbol_YearnFinanceBitToken := symbol_YearnFinanceBitToken;
[L669]               __tmp__decimals_YearnFinanceBitToken := decimals_YearnFinanceBitToken;
[L670]               __tmp___totalSupply_YearnFinanceBitToken := _totalSupply_YearnFinanceBitToken;
[L671]               __tmp__balances_YearnFinanceBitToken := balances_YearnFinanceBitToken;
[L672]               __tmp__allowed_YearnFinanceBitToken := allowed_YearnFinanceBitToken;
[L673]   CALL        call success_s334 := transfer~address~uint256_YearnFinanceBitToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L1534]  COND TRUE   __tmp__DType[this] == YearnFinanceBitToken
[L1535]  CALL        call __var_2 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_YearnFinanceBitToken[this][msgsender_MSG], tokens_s334);
[L1340]  COND FALSE  !(!(b_s112 <= a_s112))
[L1344]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1535]  RET         call __var_2 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_YearnFinanceBitToken[this][msgsender_MSG], tokens_s334);
[L1536]  COND FALSE  !(revert)
[L1542]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1543]              __tmp__balances_YearnFinanceBitToken[this][msgsender_MSG] := __var_2;
[L1544]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1545]  COND TRUE   __tmp__DType[this] == YearnFinanceBitToken
[L1546]  CALL        call __var_3 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_YearnFinanceBitToken[this][to_s334], tokens_s334);
[L1322]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1323]  COND TRUE   !(c_s90 >= a_s90)
[L1324]              revert := true;
[L1546]  RET         call __var_3 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_YearnFinanceBitToken[this][to_s334], tokens_s334);
[L1547]  COND TRUE   revert
[L673]   RET         call success_s334 := transfer~address~uint256_YearnFinanceBitToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L674]               assume revert || gas < 0;
[L2774]  RET         call success_s334 := transfer~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L2864]  RET         call CorralChoice_YearnFinanceBitToken(this);

Loop:
[L2864]  CALL        call CorralChoice_YearnFinanceBitToken(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != YearnFinanceBitToken;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND TRUE   choice == 11
[L2770]              gas := gas - 21000;
[L2771]  COND TRUE   gas >= 0
[L2772]              assume tokens_s334 >= 0 && tokens_s334 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2773]              assume msgvalue_MSG == 0;
[L2774]  CALL        call success_s334 := transfer~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s334) && msgsender_MSG != to_s334) && tokens_s334 <= balances_YearnFinanceBitToken[this][msgsender_MSG]) && balances_YearnFinanceBitToken[this][to_s334] + tokens_s334 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s334 >= 0) && tokens_s334 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][to_s334] >= 0) && balances_YearnFinanceBitToken[this][to_s334] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][msgsender_MSG] >= 0) && balances_YearnFinanceBitToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_YearnFinanceBitToken0 := true;
[L3]                 call_transfer_YearnFinanceBitToken0 := false;
[L3]                 revert := revert_hold;
[L653]               havoc __exception;
[L654]               revert := false;
[L655]   COND TRUE   __exception
[L656]               __tmp__Balance := Balance;
[L657]               __tmp__DType := DType;
[L658]               __tmp__Alloc := Alloc;
[L659]               __tmp__balance_ADDR := balance_ADDR;
[L660]               __tmp__M_Ref_int := M_Ref_int;
[L661]               __tmp__sum_balances0 := sum_balances0;
[L662]               __tmp__alloc_allowed_YearnFinanceBitToken_lvl0 := alloc_allowed_YearnFinanceBitToken_lvl0;
[L663]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L664]               __tmp__sum_allowed1 := sum_allowed1;
[L665]               __tmp__Length := Length;
[L666]               __tmp__now := now;
[L667]               __tmp__name_YearnFinanceBitToken := name_YearnFinanceBitToken;
[L668]               __tmp__symbol_YearnFinanceBitToken := symbol_YearnFinanceBitToken;
[L669]               __tmp__decimals_YearnFinanceBitToken := decimals_YearnFinanceBitToken;
[L670]               __tmp___totalSupply_YearnFinanceBitToken := _totalSupply_YearnFinanceBitToken;
[L671]               __tmp__balances_YearnFinanceBitToken := balances_YearnFinanceBitToken;
[L672]               __tmp__allowed_YearnFinanceBitToken := allowed_YearnFinanceBitToken;
[L673]   CALL        call success_s334 := transfer~address~uint256_YearnFinanceBitToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L1534]  COND TRUE   __tmp__DType[this] == YearnFinanceBitToken
[L1535]  CALL        call __var_2 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_YearnFinanceBitToken[this][msgsender_MSG], tokens_s334);
[L1340]  COND FALSE  !(!(b_s112 <= a_s112))
[L1344]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1535]  RET         call __var_2 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_YearnFinanceBitToken[this][msgsender_MSG], tokens_s334);
[L1536]  COND FALSE  !(revert)
[L1542]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1543]              __tmp__balances_YearnFinanceBitToken[this][msgsender_MSG] := __var_2;
[L1544]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1545]  COND TRUE   __tmp__DType[this] == YearnFinanceBitToken
[L1546]  CALL        call __var_3 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_YearnFinanceBitToken[this][to_s334], tokens_s334);
[L1322]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1323]  COND TRUE   !(c_s90 >= a_s90)
[L1324]              revert := true;
[L1546]  RET         call __var_3 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_YearnFinanceBitToken[this][to_s334], tokens_s334);
[L1547]  COND TRUE   revert
[L673]   RET         call success_s334 := transfer~address~uint256_YearnFinanceBitToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L674]               assume revert || gas < 0;
[L2774]  RET         call success_s334 := transfer~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L2864]  RET         call CorralChoice_YearnFinanceBitToken(this);

[2020-11-25 09:28:09,421 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:28:09,421 INFO  L82        PathProgramCache]: Analyzing trace with hash 695814107, now seen corresponding path program 1 times
[2020-11-25 09:28:09,421 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:28:09,430 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:28:09,490 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 09:28:09,491 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:28:09,491 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [9] imperfect sequences [] total 9
[2020-11-25 09:28:09,491 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:28:09,491 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 09:28:09,491 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=16, Invalid=56, Unknown=0, NotChecked=0, Total=72
[2020-11-25 09:28:09,491 INFO  L87              Difference]: Start difference. First operand 1845 states and 1989 transitions. cyclomatic complexity: 148 Second operand 9 states.
[2020-11-25 09:28:10,120 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:28:10,120 INFO  L93              Difference]: Finished difference Result 1939 states and 2100 transitions.
[2020-11-25 09:28:10,121 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-11-25 09:28:10,121 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1939 states and 2100 transitions.
[2020-11-25 09:28:10,126 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 09:28:10,130 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1939 states to 1939 states and 2100 transitions.
[2020-11-25 09:28:10,130 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 689
[2020-11-25 09:28:10,131 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 689
[2020-11-25 09:28:10,131 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1939 states and 2100 transitions.
[2020-11-25 09:28:10,132 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:28:10,132 INFO  L728         BuchiCegarLoop]: Abstraction has 1939 states and 2100 transitions.
[2020-11-25 09:28:10,134 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1939 states and 2100 transitions.
[2020-11-25 09:28:10,144 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1939 to 1845.
[2020-11-25 09:28:10,144 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1845 states.
[2020-11-25 09:28:10,146 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1845 states to 1845 states and 1989 transitions.
[2020-11-25 09:28:10,146 INFO  L751         BuchiCegarLoop]: Abstraction has 1845 states and 1989 transitions.
[2020-11-25 09:28:10,146 INFO  L631         BuchiCegarLoop]: Abstraction has 1845 states and 1989 transitions.
[2020-11-25 09:28:10,146 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 09:28:10,146 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1845 states and 1989 transitions.
[2020-11-25 09:28:10,148 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 09:28:10,148 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:28:10,148 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:28:10,149 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:28:10,149 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_YearnFinanceBitToken0 := false;
[L3]                 call_transfer_YearnFinanceBitToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L2854]              assume null == 0;
[L2855]  CALL        call this := FreshRefGenerator__success();
[L1250]              havoc newRef;
[L1251]              assume Alloc[newRef] == false;
[L1252]              Alloc[newRef] := true;
[L1253]              assume newRef != null;
[L2855]  RET         call this := FreshRefGenerator__success();
[L2856]              assume now >= 0;
[L2857]              assume DType[this] == YearnFinanceBitToken;
[L2858]              assume msgvalue_MSG == 0;
[L2859]              gas := gas - 53000;
[L2860]  CALL        call YearnFinanceBitToken_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG);
[L399]               havoc __exception;
[L400]               revert := false;
[L401]   COND FALSE  !(__exception)
[L422]   CALL        call YearnFinanceBitToken_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1457]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1282]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1267]              assume msgsender_MSG != null;
[L1268]              Balance[this] := 0;
[L1282]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1283]  COND FALSE  !(revert)
[L1457]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1458]  COND FALSE  !(revert)
[L1461]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1314]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1299]              assume msgsender_MSG != null;
[L1300]              Balance[this] := 0;
[L1314]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1315]  COND FALSE  !(revert)
[L1461]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1462]  COND FALSE  !(revert)
[L1465]  CALL        call YearnFinanceBitToken_YearnFinanceBitToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1418]              assume msgsender_MSG != null;
[L1419]              Balance[this] := 0;
[L1420]              name_YearnFinanceBitToken[this] := 627147201;
[L1421]              symbol_YearnFinanceBitToken[this] := 627147201;
[L1422]              decimals_YearnFinanceBitToken[this] := 0;
[L1423]              _totalSupply_YearnFinanceBitToken[this] := 0;
[L1424]              balances_YearnFinanceBitToken[this] := zeroRefintArr();
[L1425]              sum_balances0[this] := 0;
[L1426]              allowed_YearnFinanceBitToken[this] := zeroRefRefintArr();
[L1427]              sum_allowed1[this] := 0;
[L1429]              name_YearnFinanceBitToken[this] := 1658284292;
[L1430]              symbol_YearnFinanceBitToken[this] := -1175268548;
[L1431]              decimals_YearnFinanceBitToken[this] := 18;
[L1432]              _totalSupply_YearnFinanceBitToken[this] := 7000000000000000000000;
[L1433]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1434]              balances_YearnFinanceBitToken[this][msgsender_MSG] := _totalSupply_YearnFinanceBitToken[this];
[L1435]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1436]              assert { :EventEmitted "Transfer_YearnFinanceBitToken" } true;
[L1465]  RET         call YearnFinanceBitToken_YearnFinanceBitToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1466]  COND FALSE  !(revert)
[L422]   RET         call YearnFinanceBitToken_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG);
[L423]               assume !revert && gas >= 0;
[L2860]  RET         call YearnFinanceBitToken_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG);
[L2861]              assume !revert && gas >= 0;
[L2864]  CALL        call CorralChoice_YearnFinanceBitToken(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != YearnFinanceBitToken;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND TRUE   choice == 11
[L2770]              gas := gas - 21000;
[L2771]  COND TRUE   gas >= 0
[L2772]              assume tokens_s334 >= 0 && tokens_s334 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2773]              assume msgvalue_MSG == 0;
[L2774]  CALL        call success_s334 := transfer~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s334) && msgsender_MSG != to_s334) && tokens_s334 <= balances_YearnFinanceBitToken[this][msgsender_MSG]) && balances_YearnFinanceBitToken[this][to_s334] + tokens_s334 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s334 >= 0) && tokens_s334 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][to_s334] >= 0) && balances_YearnFinanceBitToken[this][to_s334] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][msgsender_MSG] >= 0) && balances_YearnFinanceBitToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_YearnFinanceBitToken0 := true;
[L3]                 call_transfer_YearnFinanceBitToken0 := false;
[L3]                 revert := revert_hold;
[L653]               havoc __exception;
[L654]               revert := false;
[L655]   COND TRUE   __exception
[L656]               __tmp__Balance := Balance;
[L657]               __tmp__DType := DType;
[L658]               __tmp__Alloc := Alloc;
[L659]               __tmp__balance_ADDR := balance_ADDR;
[L660]               __tmp__M_Ref_int := M_Ref_int;
[L661]               __tmp__sum_balances0 := sum_balances0;
[L662]               __tmp__alloc_allowed_YearnFinanceBitToken_lvl0 := alloc_allowed_YearnFinanceBitToken_lvl0;
[L663]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L664]               __tmp__sum_allowed1 := sum_allowed1;
[L665]               __tmp__Length := Length;
[L666]               __tmp__now := now;
[L667]               __tmp__name_YearnFinanceBitToken := name_YearnFinanceBitToken;
[L668]               __tmp__symbol_YearnFinanceBitToken := symbol_YearnFinanceBitToken;
[L669]               __tmp__decimals_YearnFinanceBitToken := decimals_YearnFinanceBitToken;
[L670]               __tmp___totalSupply_YearnFinanceBitToken := _totalSupply_YearnFinanceBitToken;
[L671]               __tmp__balances_YearnFinanceBitToken := balances_YearnFinanceBitToken;
[L672]               __tmp__allowed_YearnFinanceBitToken := allowed_YearnFinanceBitToken;
[L673]   CALL        call success_s334 := transfer~address~uint256_YearnFinanceBitToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L1534]  COND TRUE   __tmp__DType[this] == YearnFinanceBitToken
[L1535]  CALL        call __var_2 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_YearnFinanceBitToken[this][msgsender_MSG], tokens_s334);
[L1340]  COND FALSE  !(!(b_s112 <= a_s112))
[L1344]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1535]  RET         call __var_2 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_YearnFinanceBitToken[this][msgsender_MSG], tokens_s334);
[L1536]  COND FALSE  !(revert)
[L1542]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1543]              __tmp__balances_YearnFinanceBitToken[this][msgsender_MSG] := __var_2;
[L1544]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1545]  COND TRUE   __tmp__DType[this] == YearnFinanceBitToken
[L1546]  CALL        call __var_3 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_YearnFinanceBitToken[this][to_s334], tokens_s334);
[L1322]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1323]  COND FALSE  !(!(c_s90 >= a_s90))
[L1546]  RET         call __var_3 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_YearnFinanceBitToken[this][to_s334], tokens_s334);
[L1547]  COND FALSE  !(revert)
[L1553]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_YearnFinanceBitToken[this][to_s334];
[L1554]              __tmp__balances_YearnFinanceBitToken[this][to_s334] := __var_3;
[L1555]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_YearnFinanceBitToken[this][to_s334];
[L1556]              success_s334 := true;
[L673]   RET         call success_s334 := transfer~address~uint256_YearnFinanceBitToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L674]               assume revert || gas < 0;
[L2774]  RET         call success_s334 := transfer~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L2864]  RET         call CorralChoice_YearnFinanceBitToken(this);

Loop:
[L2864]  CALL        call CorralChoice_YearnFinanceBitToken(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != YearnFinanceBitToken;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND TRUE   choice == 14
[L2752]              gas := gas - 21000;
[L2753]  COND FALSE  !(gas >= 0)
[L2864]  RET         call CorralChoice_YearnFinanceBitToken(this);

[2020-11-25 09:28:10,152 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:28:10,152 INFO  L82        PathProgramCache]: Analyzing trace with hash -1235032232, now seen corresponding path program 1 times
[2020-11-25 09:28:10,152 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:28:10,158 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:28:10,181 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 09:28:10,181 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:28:10,181 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-25 09:28:10,182 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:28:10,182 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-25 09:28:10,182 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-11-25 09:28:10,182 INFO  L87              Difference]: Start difference. First operand 1845 states and 1989 transitions. cyclomatic complexity: 148 Second operand 5 states.
[2020-11-25 09:28:10,387 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:28:10,387 INFO  L93              Difference]: Finished difference Result 2427 states and 2692 transitions.
[2020-11-25 09:28:10,387 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 09:28:10,387 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2427 states and 2692 transitions.
[2020-11-25 09:28:10,393 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-11-25 09:28:10,398 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2427 states to 1849 states and 2111 transitions.
[2020-11-25 09:28:10,398 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 550
[2020-11-25 09:28:10,398 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 550
[2020-11-25 09:28:10,398 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1849 states and 2111 transitions.
[2020-11-25 09:28:10,400 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:28:10,400 INFO  L728         BuchiCegarLoop]: Abstraction has 1849 states and 2111 transitions.
[2020-11-25 09:28:10,401 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1849 states and 2111 transitions.
[2020-11-25 09:28:10,408 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1849 to 1289.
[2020-11-25 09:28:10,408 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1289 states.
[2020-11-25 09:28:10,409 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1289 states to 1289 states and 1394 transitions.
[2020-11-25 09:28:10,409 INFO  L751         BuchiCegarLoop]: Abstraction has 1289 states and 1394 transitions.
[2020-11-25 09:28:10,409 INFO  L631         BuchiCegarLoop]: Abstraction has 1289 states and 1394 transitions.
[2020-11-25 09:28:10,410 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 09:28:10,410 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1289 states and 1394 transitions.
[2020-11-25 09:28:10,411 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:28:10,411 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:28:10,411 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:28:10,412 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:28:10,412 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_YearnFinanceBitToken0 := false;
[L3]                 call_transfer_YearnFinanceBitToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L2854]              assume null == 0;
[L2855]  CALL        call this := FreshRefGenerator__success();
[L1250]              havoc newRef;
[L1251]              assume Alloc[newRef] == false;
[L1252]              Alloc[newRef] := true;
[L1253]              assume newRef != null;
[L2855]  RET         call this := FreshRefGenerator__success();
[L2856]              assume now >= 0;
[L2857]              assume DType[this] == YearnFinanceBitToken;
[L2858]              assume msgvalue_MSG == 0;
[L2859]              gas := gas - 53000;
[L2860]  CALL        call YearnFinanceBitToken_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG);
[L399]               havoc __exception;
[L400]               revert := false;
[L401]   COND FALSE  !(__exception)
[L422]   CALL        call YearnFinanceBitToken_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1457]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1282]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1267]              assume msgsender_MSG != null;
[L1268]              Balance[this] := 0;
[L1282]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1283]  COND FALSE  !(revert)
[L1457]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1458]  COND FALSE  !(revert)
[L1461]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1314]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1299]              assume msgsender_MSG != null;
[L1300]              Balance[this] := 0;
[L1314]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1315]  COND FALSE  !(revert)
[L1461]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1462]  COND FALSE  !(revert)
[L1465]  CALL        call YearnFinanceBitToken_YearnFinanceBitToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1418]              assume msgsender_MSG != null;
[L1419]              Balance[this] := 0;
[L1420]              name_YearnFinanceBitToken[this] := 627147201;
[L1421]              symbol_YearnFinanceBitToken[this] := 627147201;
[L1422]              decimals_YearnFinanceBitToken[this] := 0;
[L1423]              _totalSupply_YearnFinanceBitToken[this] := 0;
[L1424]              balances_YearnFinanceBitToken[this] := zeroRefintArr();
[L1425]              sum_balances0[this] := 0;
[L1426]              allowed_YearnFinanceBitToken[this] := zeroRefRefintArr();
[L1427]              sum_allowed1[this] := 0;
[L1429]              name_YearnFinanceBitToken[this] := 1658284292;
[L1430]              symbol_YearnFinanceBitToken[this] := -1175268548;
[L1431]              decimals_YearnFinanceBitToken[this] := 18;
[L1432]              _totalSupply_YearnFinanceBitToken[this] := 7000000000000000000000;
[L1433]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1434]              balances_YearnFinanceBitToken[this][msgsender_MSG] := _totalSupply_YearnFinanceBitToken[this];
[L1435]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1436]              assert { :EventEmitted "Transfer_YearnFinanceBitToken" } true;
[L1465]  RET         call YearnFinanceBitToken_YearnFinanceBitToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1466]  COND FALSE  !(revert)
[L422]   RET         call YearnFinanceBitToken_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG);
[L423]               assume !revert && gas >= 0;
[L2860]  RET         call YearnFinanceBitToken_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG);
[L2861]              assume !revert && gas >= 0;
[L2864]  CALL        call CorralChoice_YearnFinanceBitToken(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != YearnFinanceBitToken;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND FALSE  !(choice == 11)
[L2776]  COND FALSE  !(choice == 10)
[L2783]  COND TRUE   choice == 9
[L2784]              gas := gas - 21000;
[L2785]  COND TRUE   gas >= 0
[L2786]              assume tokens_s393 >= 0 && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2787]              assume msgvalue_MSG == 0;
[L2788]  CALL        call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L707]               havoc __exception;
[L708]               revert := false;
[L709]   COND FALSE  !(__exception)
[L730]   CALL        call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L1638]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1639]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][from_s393], tokens_s393);
[L1349]  COND FALSE  !(!(b_s112 <= a_s112))
[L1353]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1639]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][from_s393], tokens_s393);
[L1640]  COND FALSE  !(revert)
[L1646]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][from_s393];
[L1647]              balances_YearnFinanceBitToken[this][from_s393] := __var_4;
[L1648]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][from_s393];
[L1649]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1650]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG], tokens_s393);
[L1349]  COND FALSE  !(!(b_s112 <= a_s112))
[L1353]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1650]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG], tokens_s393);
[L1651]  COND FALSE  !(revert)
[L1657]              sum_allowed1[from_s393] := sum_allowed1[from_s393] - allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG];
[L1658]              allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] := __var_5;
[L1659]              sum_allowed1[from_s393] := sum_allowed1[from_s393] + allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG];
[L1660]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1661]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][to_s393], tokens_s393);
[L1331]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1332]  COND FALSE  !(!(c_s90 >= a_s90))
[L1661]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][to_s393], tokens_s393);
[L1662]  COND FALSE  !(revert)
[L1668]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][to_s393];
[L1669]              balances_YearnFinanceBitToken[this][to_s393] := __var_6;
[L1670]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][to_s393];
[L1671]              assert { :EventEmitted "Transfer_YearnFinanceBitToken" } true;
[L1672]              success_s393 := true;
[L730]   RET         call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L731]               assume !revert && gas >= 0;
[L2788]  RET         call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L2864]  RET         call CorralChoice_YearnFinanceBitToken(this);
[L2864]  CALL        call CorralChoice_YearnFinanceBitToken(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != YearnFinanceBitToken;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND TRUE   choice == 11
[L2770]              gas := gas - 21000;
[L2771]  COND TRUE   gas >= 0
[L2772]              assume tokens_s334 >= 0 && tokens_s334 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2773]              assume msgvalue_MSG == 0;
[L2774]  CALL        call success_s334 := transfer~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s334) && msgsender_MSG != to_s334) && tokens_s334 <= balances_YearnFinanceBitToken[this][msgsender_MSG]) && balances_YearnFinanceBitToken[this][to_s334] + tokens_s334 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s334 >= 0) && tokens_s334 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][to_s334] >= 0) && balances_YearnFinanceBitToken[this][to_s334] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][msgsender_MSG] >= 0) && balances_YearnFinanceBitToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_YearnFinanceBitToken0 := true;
[L3]                 call_transfer_YearnFinanceBitToken0 := false;
[L3]                 revert := revert_hold;
[L653]               havoc __exception;
[L654]               revert := false;
[L655]   COND FALSE  !(__exception)
[L676]   CALL        call success_s334 := transfer~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L1564]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1565]  CALL        call __var_2 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][msgsender_MSG], tokens_s334);
[L1349]  COND FALSE  !(!(b_s112 <= a_s112))
[L1353]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1565]  RET         call __var_2 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][msgsender_MSG], tokens_s334);
[L1566]  COND FALSE  !(revert)
[L1572]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1573]              balances_YearnFinanceBitToken[this][msgsender_MSG] := __var_2;
[L1574]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1575]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1576]  CALL        call __var_3 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][to_s334], tokens_s334);
[L1331]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1332]  COND FALSE  !(!(c_s90 >= a_s90))
[L1576]  RET         call __var_3 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][to_s334], tokens_s334);
[L1577]  COND FALSE  !(revert)
[L1583]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][to_s334];
[L1584]              balances_YearnFinanceBitToken[this][to_s334] := __var_3;
[L1585]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][to_s334];
[L1586]              assert { :EventEmitted "Transfer_YearnFinanceBitToken" } true;
[L1587]              success_s334 := true;
[L676]   RET         call success_s334 := transfer~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L677]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((success_s334 == true && balances_YearnFinanceBitToken[this][msgsender_MSG] == old(balances_YearnFinanceBitToken[this][msgsender_MSG]) - tokens_s334) && balances_YearnFinanceBitToken[this][to_s334] == old(balances_YearnFinanceBitToken[this][to_s334]) + tokens_s334) && _totalSupply_YearnFinanceBitToken[this] == old(_totalSupply_YearnFinanceBitToken[this])) && allowed_YearnFinanceBitToken[this] == old(allowed_YearnFinanceBitToken[this])) && balances_YearnFinanceBitToken[this][p1] == old(balances_YearnFinanceBitToken[this][p1])) && name_YearnFinanceBitToken[this] == old(name_YearnFinanceBitToken[this])) && symbol_YearnFinanceBitToken[this] == old(symbol_YearnFinanceBitToken[this])) && decimals_YearnFinanceBitToken[this] == old(decimals_YearnFinanceBitToken[this]));
[L3]                 revert := revert_hold;
[L2774]  RET         call success_s334 := transfer~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L2864]  RET         call CorralChoice_YearnFinanceBitToken(this);

Loop:
[L2864]  CALL        call CorralChoice_YearnFinanceBitToken(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != YearnFinanceBitToken;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND TRUE   choice == 14
[L2752]              gas := gas - 21000;
[L2753]  COND FALSE  !(gas >= 0)
[L2864]  RET         call CorralChoice_YearnFinanceBitToken(this);

[2020-11-25 09:28:10,415 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:28:10,415 INFO  L82        PathProgramCache]: Analyzing trace with hash 1744910008, now seen corresponding path program 1 times
[2020-11-25 09:28:10,415 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:28:10,442 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:28:10,592 INFO  L134       CoverageAnalysis]: Checked inductivity of 56 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 56 trivial. 0 not checked.
[2020-11-25 09:28:10,592 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:28:10,592 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [14] imperfect sequences [] total 14
[2020-11-25 09:28:10,592 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:28:10,593 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-11-25 09:28:10,593 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=29, Invalid=153, Unknown=0, NotChecked=0, Total=182
[2020-11-25 09:28:10,593 INFO  L87              Difference]: Start difference. First operand 1289 states and 1394 transitions. cyclomatic complexity: 108 Second operand 14 states.
[2020-11-25 09:28:11,231 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:28:11,231 INFO  L93              Difference]: Finished difference Result 730 states and 782 transitions.
[2020-11-25 09:28:11,231 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 14 states. 
[2020-11-25 09:28:11,231 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 730 states and 782 transitions.
[2020-11-25 09:28:11,233 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 09:28:11,233 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 730 states to 0 states and 0 transitions.
[2020-11-25 09:28:11,233 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-25 09:28:11,233 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-25 09:28:11,233 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-25 09:28:11,233 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:28:11,233 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 09:28:11,233 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 09:28:11,233 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 09:28:11,233 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 09:28:11,233 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-25 09:28:11,233 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 09:28:11,233 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-25 09:28:11,236 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 09:28:11 BasicIcfg
[2020-11-25 09:28:11,236 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 09:28:11,236 INFO  L168              Benchmark]: Toolchain (without parser) took 10578.19 ms. Allocated memory was 1.0 GB in the beginning and 2.0 GB in the end (delta: 932.2 MB). Free memory was 940.6 MB in the beginning and 1.7 GB in the end (delta: -774.8 MB). Peak memory consumption was 157.4 MB. Max. memory is 15.3 GB.
[2020-11-25 09:28:11,237 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.16 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 09:28:11,237 INFO  L168              Benchmark]: Boogie Preprocessor took 85.06 ms. Allocated memory is still 1.0 GB. Free memory was 940.6 MB in the beginning and 929.8 MB in the end (delta: 10.8 MB). Peak memory consumption was 10.8 MB. Max. memory is 15.3 GB.
[2020-11-25 09:28:11,237 INFO  L168              Benchmark]: UtopiaSpecLang took 56.27 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 924.4 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 09:28:11,238 INFO  L168              Benchmark]: Boogie Printer took 12.63 ms. Allocated memory is still 1.0 GB. Free memory is still 924.4 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 09:28:11,238 INFO  L168              Benchmark]: RCFGBuilder took 676.17 ms. Allocated memory is still 1.0 GB. Free memory was 924.4 MB in the beginning and 843.9 MB in the end (delta: 80.5 MB). Peak memory consumption was 80.5 MB. Max. memory is 15.3 GB.
[2020-11-25 09:28:11,238 INFO  L168              Benchmark]: UtopiaLTL2Aut took 38.62 ms. Allocated memory is still 1.0 GB. Free memory was 843.9 MB in the beginning and 834.9 MB in the end (delta: 8.9 MB). Peak memory consumption was 8.9 MB. Max. memory is 15.3 GB.
[2020-11-25 09:28:11,238 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1097.89 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 56.6 MB). Free memory was 834.9 MB in the beginning and 758.0 MB in the end (delta: 76.9 MB). Peak memory consumption was 133.5 MB. Max. memory is 15.3 GB.
[2020-11-25 09:28:11,238 INFO  L168              Benchmark]: BlockEncodingV2 took 120.12 ms. Allocated memory is still 1.1 GB. Free memory was 758.0 MB in the beginning and 715.4 MB in the end (delta: 42.7 MB). Peak memory consumption was 42.7 MB. Max. memory is 15.3 GB.
[2020-11-25 09:28:11,239 INFO  L168              Benchmark]: BuchiAutomizer took 8488.33 ms. Allocated memory was 1.1 GB in the beginning and 2.0 GB in the end (delta: 875.6 MB). Free memory was 715.4 MB in the beginning and 1.7 GB in the end (delta: -1000.0 MB). There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 09:28:11,241 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    2490 locations, 4281 edges
  - StatisticsResult: Encoded RCFG
    2446 locations, 4163 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.16 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 85.06 ms. Allocated memory is still 1.0 GB. Free memory was 940.6 MB in the beginning and 929.8 MB in the end (delta: 10.8 MB). Peak memory consumption was 10.8 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 56.27 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 924.4 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 12.63 ms. Allocated memory is still 1.0 GB. Free memory is still 924.4 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * RCFGBuilder took 676.17 ms. Allocated memory is still 1.0 GB. Free memory was 924.4 MB in the beginning and 843.9 MB in the end (delta: 80.5 MB). Peak memory consumption was 80.5 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 38.62 ms. Allocated memory is still 1.0 GB. Free memory was 843.9 MB in the beginning and 834.9 MB in the end (delta: 8.9 MB). Peak memory consumption was 8.9 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1097.89 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 56.6 MB). Free memory was 834.9 MB in the beginning and 758.0 MB in the end (delta: 76.9 MB). Peak memory consumption was 133.5 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 120.12 ms. Allocated memory is still 1.1 GB. Free memory was 758.0 MB in the beginning and 715.4 MB in the end (delta: 42.7 MB). Peak memory consumption was 42.7 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 8488.33 ms. Allocated memory was 1.1 GB in the beginning and 2.0 GB in the end (delta: 875.6 MB). Free memory was 715.4 MB in the beginning and 1.7 GB in the end (delta: -1000.0 MB). There was no memory consumed. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    1050 locations, 1323 edges
  - StatisticsResult: BuchiProgram size
    2490 locations, 4281 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 7 terminating modules (7 trivial, 0 deterministic, 0 nondeterministic). 7 modules have a trivial ranking function, the largest among these consists of 24 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 8.4s and 8 iterations.  TraceHistogramMax:2. Analysis of lassos took 1.4s. Construction of modules took 5.1s. BÃ¼chi inclusion checks took 1.3s. Highest rank in rank-based complementation 0. Minimization of det autom 7. Minimization of nondet autom 0. Automata minimization 0.1s AutomataMinimizationTime, 6 MinimizatonAttempts, 1557 StatesRemovedByMinimization, 5 NontrivialMinimizations. Non-live state removal took 0.0s Buchi closure took 0.0s. Biggest automaton had 1845 states and ocurred in iteration 4.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 12348 SDtfs, 12767 SDslu, 31422 SDs, 0 SdLazy, 32309 SolverSat, 2187 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 5.1s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU7 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_transfer_YearnFinance(success_transfer_YearnFinanceBitToken0)itToken0) ==> ( <>(success_transfer_YearnFinanceBitToken0) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
