This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 08:43:21,033 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 08:43:21,035 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 08:43:21,046 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 08:43:21,046 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 08:43:21,047 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 08:43:21,048 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 08:43:21,049 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 08:43:21,050 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 08:43:21,051 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 08:43:21,053 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 08:43:21,053 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 08:43:21,053 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 08:43:21,054 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 08:43:21,055 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 08:43:21,056 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 08:43:21,056 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 08:43:21,058 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 08:43:21,059 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 08:43:21,061 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 08:43:21,062 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 08:43:21,063 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 08:43:21,064 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 08:43:21,065 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 08:43:21,065 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 08:43:21,065 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 08:43:21,066 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 08:43:21,066 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 08:43:21,066 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 08:43:21,067 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 08:43:21,067 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 08:43:21,068 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 08:43:21,068 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 08:43:21,069 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 08:43:21,069 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 08:43:21,070 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 08:43:21,070 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 08:43:21,070 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 08:43:21,070 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 08:43:21,071 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 08:43:21,072 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 08:43:21,072 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 08:43:21,080 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 08:43:21,080 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 08:43:21,081 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 08:43:21,081 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 08:43:21,081 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 08:43:21,081 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 08:43:21,081 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 08:43:21,082 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 08:43:21,082 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 08:43:21,082 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 08:43:21,082 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 08:43:21,082 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 08:43:21,082 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 08:43:21,082 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 08:43:21,082 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 08:43:21,082 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 08:43:21,083 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 08:43:21,083 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 08:43:21,083 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 08:43:21,083 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 08:43:21,083 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 08:43:21,083 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 08:43:21,083 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 08:43:21,083 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 08:43:21,083 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 08:43:21,084 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 08:43:21,107 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 08:43:21,118 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 08:43:21,120 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 08:43:21,122 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 08:43:21,122 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 08:43:21,123 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_transfer-self.bpl
[2020-11-25 08:43:21,123 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_transfer-self.bpl'
[2020-11-25 08:43:21,248 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 08:43:21,249 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 08:43:21,249 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 08:43:21,249 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 08:43:21,249 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 08:43:21,266 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:43:21" (1/1) ...
[2020-11-25 08:43:21,268 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:43:21" (1/1) ...
[2020-11-25 08:43:21,312 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:43:21" (1/1) ...
[2020-11-25 08:43:21,313 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:43:21" (1/1) ...
[2020-11-25 08:43:21,344 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:43:21" (1/1) ...
[2020-11-25 08:43:21,366 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:43:21" (1/1) ...
[2020-11-25 08:43:21,383 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:43:21" (1/1) ...
[2020-11-25 08:43:21,404 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 08:43:21,405 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 08:43:21,405 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 08:43:21,407 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 08:43:21,411 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:43:21" (1/1) ...
[2020-11-25 08:43:21,435 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(ERC20Pausable.transfer(to, value), msg.sender == to && value <= _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20Pausable.transfer(to, value), return == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this] == old(_allowances_ERC20[this]) && _owner_Ownable[this] == old(_owner_Ownable[this]) && _minters_MinterRole[this] == old(_minters_MinterRole[this]) && _paused_Pausable[this] == old(_paused_Pausable[this]) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 08:43:21,441 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(ERC20Pausable.transfer(to, value), msg.sender == to && value <= _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20Pausable.transfer(to, value), return == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this] == old(_allowances_ERC20[this]) && _owner_Ownable[this] == old(_owner_Ownable[this]) && _minters_MinterRole[this] == old(_minters_MinterRole[this]) && _paused_Pausable[this] == old(_paused_Pausable[this]) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 08:43:21,450 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(ERC20Pausable.transfer(to, value), msg.sender == to && value <= _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20Pausable.transfer(to, value), return == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this] == old(_allowances_ERC20[this]) && _owner_Ownable[this] == old(_owner_Ownable[this]) && _minters_MinterRole[this] == old(_minters_MinterRole[this]) && _paused_Pausable[this] == old(_paused_Pausable[this]) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 08:43:21,467 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( msg.sender==to_s1040 && value_s1040<=_balances_ERC20[this][msg.sender] ) && value_s1040>=0 ) && value_s1040<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][to_s1040]>=0 ) && _balances_ERC20[this][to_s1040]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][msg.sender]>=0 ) && _balances_ERC20[this][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>],IdentifierExpression[to_s1040,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]],BinaryExpression[COMPLEQ,IdentifierExpression[value_s1040,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]]]],BinaryExpression[COMPGEQ,IdentifierExpression[value_s1040,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[value_s1040,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],[IdentifierExpression[to_s1040,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],[IdentifierExpression[to_s1040,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 08:43:21,470 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( __ret_0_==true && _totalSupply_ERC20[this]==( old(_totalSupply_ERC20[this]) ) ) && _balances_ERC20[this]==( old(_balances_ERC20[this]) ) ) && _allowances_ERC20[this]==( old(_allowances_ERC20[this]) ) ) && _owner_Ownable[this]==( old(_owner_Ownable[this]) ) ) && _minters_MinterRole[this]==( old(_minters_MinterRole[this]) ) ) && _paused_Pausable[this]==( old(_paused_Pausable[this]) ) ) && _pausers_PauserRole[this]==( old(_pausers_PauserRole[this]) ) ) && _name_ERC20Detailed[this]==( old(_name_ERC20Detailed[this]) ) ) && _symbol_ERC20Detailed[this]==( old(_symbol_ERC20Detailed[this]) ) ) && _decimals_ERC20Detailed[this]==( old(_decimals_ERC20Detailed[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[__ret_0_,<IMPLEMENTATION_OUTPARAM,transfer~address~uint256_ERC20Pausable>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_owner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_owner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_minters_MinterRole,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_minters_MinterRole,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_paused_Pausable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_paused_Pausable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_pausers_PauserRole,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_pausers_PauserRole,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_name_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_name_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_symbol_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_symbol_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_decimals_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_decimals_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]]]]]
[2020-11-25 08:43:21,478 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(ERC20Pausable.transfer(to, value), msg.sender == to && value <= _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20Pausable.transfer(to, value), return == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this] == old(_allowances_ERC20[this]) && _owner_Ownable[this] == old(_owner_Ownable[this]) && _minters_MinterRole[this] == old(_minters_MinterRole[this]) && _paused_Pausable[this] == old(_paused_Pausable[this]) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 08:43:21,478 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transfer_ERC20Pausable0) ==> ( <>AP(success_transfer_ERC20Pausable0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 08:43:21,499 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 08:43:21 PropertyContainer
[2020-11-25 08:43:21,499 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 08:43:21,500 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 08:43:21,500 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 08:43:21,500 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 08:43:21,501 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:43:21" (1/2) ...
[2020-11-25 08:43:21,501 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 08:43:21,501 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 08:43:21,528 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 08:43:21" (2/2) ...
[2020-11-25 08:43:21,528 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 08:43:21,529 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 08:43:21,529 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 08:43:21,529 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 08:43:21,530 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:43:21" (1/2) ...
[2020-11-25 08:43:21,585 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 08:43:21,585 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles.Role_ctor__success
[2020-11-25 08:43:21,586 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 08:43:21,586 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 08:43:21,586 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 08:43:21,586 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 08:43:21,586 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 08:43:21,586 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 08:43:21,586 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 08:43:21,586 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 08:43:21,586 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-25 08:43:21,587 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable
[2020-11-25 08:43:21,587 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable
[2020-11-25 08:43:21,587 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable
[2020-11-25 08:43:21,587 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable
[2020-11-25 08:43:21,587 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner_Ownable
[2020-11-25 08:43:21,587 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner_Ownable
[2020-11-25 08:43:21,587 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable
[2020-11-25 08:43:21,587 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable
[2020-11-25 08:43:21,588 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable
[2020-11-25 08:43:21,588 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable
[2020-11-25 08:43:21,588 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferOwnership~address_Ownable__success
[2020-11-25 08:43:21,588 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 08:43:21,588 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-25 08:43:21,588 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-25 08:43:21,588 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-25 08:43:21,588 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-25 08:43:21,588 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-25 08:43:21,589 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-25 08:43:21,589 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-25 08:43:21,589 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-25 08:43:21,589 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 08:43:21,589 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 08:43:21,589 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 08:43:21,589 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20
[2020-11-25 08:43:21,589 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20
[2020-11-25 08:43:21,589 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20
[2020-11-25 08:43:21,589 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20
[2020-11-25 08:43:21,590 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20
[2020-11-25 08:43:21,590 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20
[2020-11-25 08:43:21,590 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 08:43:21,590 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20
[2020-11-25 08:43:21,590 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 08:43:21,590 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20
[2020-11-25 08:43:21,590 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 08:43:21,590 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 08:43:21,590 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 08:43:21,590 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 08:43:21,591 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 08:43:21,591 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 08:43:21,591 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 08:43:21,591 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__success
[2020-11-25 08:43:21,591 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__success
[2020-11-25 08:43:21,591 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 08:43:21,591 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 08:43:21,591 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 08:43:21,591 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 08:43:21,591 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 08:43:21,592 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed
[2020-11-25 08:43:21,592 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed
[2020-11-25 08:43:21,592 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed
[2020-11-25 08:43:21,592 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed
[2020-11-25 08:43:21,592 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed
[2020-11-25 08:43:21,592 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed
[2020-11-25 08:43:21,592 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles_NoBaseCtor__success
[2020-11-25 08:43:21,592 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles
[2020-11-25 08:43:21,592 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles
[2020-11-25 08:43:21,592 INFO  L130     BoogieDeclarations]: Found specification of procedure add~Role~address_Roles__success
[2020-11-25 08:43:21,593 INFO  L130     BoogieDeclarations]: Found specification of procedure remove~Role~address_Roles__success
[2020-11-25 08:43:21,593 INFO  L130     BoogieDeclarations]: Found specification of procedure has~Role~address_Roles__success
[2020-11-25 08:43:21,593 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole_NoBaseCtor__success
[2020-11-25 08:43:21,593 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole
[2020-11-25 08:43:21,593 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole
[2020-11-25 08:43:21,593 INFO  L130     BoogieDeclarations]: Found specification of procedure isPauser~address_PauserRole
[2020-11-25 08:43:21,593 INFO  L138     BoogieDeclarations]: Found implementation of procedure isPauser~address_PauserRole
[2020-11-25 08:43:21,593 INFO  L130     BoogieDeclarations]: Found specification of procedure addPauser~address_PauserRole
[2020-11-25 08:43:21,593 INFO  L138     BoogieDeclarations]: Found implementation of procedure addPauser~address_PauserRole
[2020-11-25 08:43:21,593 INFO  L130     BoogieDeclarations]: Found specification of procedure renouncePauser_PauserRole
[2020-11-25 08:43:21,594 INFO  L138     BoogieDeclarations]: Found implementation of procedure renouncePauser_PauserRole
[2020-11-25 08:43:21,594 INFO  L130     BoogieDeclarations]: Found specification of procedure _addPauser~address_PauserRole__success
[2020-11-25 08:43:21,594 INFO  L130     BoogieDeclarations]: Found specification of procedure _removePauser~address_PauserRole__success
[2020-11-25 08:43:21,594 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-25 08:43:21,594 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable
[2020-11-25 08:43:21,594 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable
[2020-11-25 08:43:21,594 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable
[2020-11-25 08:43:21,594 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable
[2020-11-25 08:43:21,594 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable
[2020-11-25 08:43:21,594 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable
[2020-11-25 08:43:21,595 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable
[2020-11-25 08:43:21,595 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable
[2020-11-25 08:43:21,595 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__success
[2020-11-25 08:43:21,595 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable
[2020-11-25 08:43:21,595 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable
[2020-11-25 08:43:21,595 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Pausable
[2020-11-25 08:43:21,595 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Pausable
[2020-11-25 08:43:21,595 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Pausable
[2020-11-25 08:43:21,595 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Pausable
[2020-11-25 08:43:21,595 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Pausable
[2020-11-25 08:43:21,596 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20Pausable
[2020-11-25 08:43:21,596 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20Pausable
[2020-11-25 08:43:21,596 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20Pausable
[2020-11-25 08:43:21,596 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20Pausable
[2020-11-25 08:43:21,596 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20Pausable
[2020-11-25 08:43:21,596 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole_NoBaseCtor__success
[2020-11-25 08:43:21,596 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole
[2020-11-25 08:43:21,596 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole
[2020-11-25 08:43:21,596 INFO  L130     BoogieDeclarations]: Found specification of procedure isMinter~address_MinterRole
[2020-11-25 08:43:21,596 INFO  L138     BoogieDeclarations]: Found implementation of procedure isMinter~address_MinterRole
[2020-11-25 08:43:21,596 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_MinterRole
[2020-11-25 08:43:21,597 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_MinterRole
[2020-11-25 08:43:21,597 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceMinter_MinterRole
[2020-11-25 08:43:21,597 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceMinter_MinterRole
[2020-11-25 08:43:21,597 INFO  L130     BoogieDeclarations]: Found specification of procedure _addMinter~address_MinterRole__success
[2020-11-25 08:43:21,597 INFO  L130     BoogieDeclarations]: Found specification of procedure _removeMinter~address_MinterRole__success
[2020-11-25 08:43:21,597 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__success
[2020-11-25 08:43:21,597 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable
[2020-11-25 08:43:21,597 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable
[2020-11-25 08:43:21,597 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ERC20Mintable
[2020-11-25 08:43:21,597 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ERC20Mintable
[2020-11-25 08:43:21,598 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__success
[2020-11-25 08:43:21,598 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable
[2020-11-25 08:43:21,598 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable
[2020-11-25 08:43:21,598 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_ERC20Burnable
[2020-11-25 08:43:21,598 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_ERC20Burnable
[2020-11-25 08:43:21,598 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_ERC20Burnable
[2020-11-25 08:43:21,598 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_ERC20Burnable
[2020-11-25 08:43:21,598 INFO  L130     BoogieDeclarations]: Found specification of procedure Wafl_Wafl_NoBaseCtor__success
[2020-11-25 08:43:21,598 INFO  L130     BoogieDeclarations]: Found specification of procedure Wafl_Wafl
[2020-11-25 08:43:21,598 INFO  L138     BoogieDeclarations]: Found implementation of procedure Wafl_Wafl
[2020-11-25 08:43:21,599 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 08:43:21,599 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 08:43:21,599 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 08:43:21,599 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 08:43:21,599 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyPauser_pre__success
[2020-11-25 08:43:21,599 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__success
[2020-11-25 08:43:21,599 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__success
[2020-11-25 08:43:21,599 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyMinter_pre__success
[2020-11-25 08:43:21,599 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 08:43:21,600 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 08:43:21,600 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Ownable
[2020-11-25 08:43:21,600 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Ownable
[2020-11-25 08:43:21,600 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-25 08:43:21,600 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-25 08:43:21,600 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 08:43:21,600 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 08:43:21,600 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Detailed
[2020-11-25 08:43:21,600 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Detailed
[2020-11-25 08:43:21,600 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Roles
[2020-11-25 08:43:21,601 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Roles
[2020-11-25 08:43:21,601 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_PauserRole
[2020-11-25 08:43:21,601 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_PauserRole
[2020-11-25 08:43:21,601 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Pausable
[2020-11-25 08:43:21,601 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Pausable
[2020-11-25 08:43:21,601 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Pausable
[2020-11-25 08:43:21,601 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Pausable
[2020-11-25 08:43:21,601 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_MinterRole
[2020-11-25 08:43:21,601 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_MinterRole
[2020-11-25 08:43:21,601 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Mintable
[2020-11-25 08:43:21,602 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Mintable
[2020-11-25 08:43:21,602 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Burnable
[2020-11-25 08:43:21,602 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Burnable
[2020-11-25 08:43:21,602 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Wafl
[2020-11-25 08:43:21,602 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 08:43:21,602 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 08:43:21,602 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles.Role_ctor__fail
[2020-11-25 08:43:21,602 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 08:43:21,602 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 08:43:21,602 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 08:43:21,602 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 08:43:21,603 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 08:43:21,603 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 08:43:21,603 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 08:43:21,603 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 08:43:21,603 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-25 08:43:21,603 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__success
[2020-11-25 08:43:21,603 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__fail
[2020-11-25 08:43:21,603 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__success
[2020-11-25 08:43:21,603 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__fail
[2020-11-25 08:43:21,603 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner_Ownable__success
[2020-11-25 08:43:21,603 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner_Ownable__fail
[2020-11-25 08:43:21,604 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable__success
[2020-11-25 08:43:21,604 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable__fail
[2020-11-25 08:43:21,604 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__success
[2020-11-25 08:43:21,604 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__fail
[2020-11-25 08:43:21,604 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferOwnership~address_Ownable__fail
[2020-11-25 08:43:21,604 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 08:43:21,604 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-25 08:43:21,604 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-25 08:43:21,604 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 08:43:21,604 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 08:43:21,604 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 08:43:21,605 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__success
[2020-11-25 08:43:21,605 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__fail
[2020-11-25 08:43:21,605 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__success
[2020-11-25 08:43:21,605 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__fail
[2020-11-25 08:43:21,605 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__success
[2020-11-25 08:43:21,605 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 08:43:21,605 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__success
[2020-11-25 08:43:21,605 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__fail
[2020-11-25 08:43:21,605 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__success
[2020-11-25 08:43:21,605 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__fail
[2020-11-25 08:43:21,605 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 08:43:21,605 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 08:43:21,606 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 08:43:21,606 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 08:43:21,606 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 08:43:21,606 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 08:43:21,606 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 08:43:21,606 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 08:43:21,606 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 08:43:21,606 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 08:43:21,606 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 08:43:21,606 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 08:43:21,606 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 08:43:21,606 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 08:43:21,607 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__success
[2020-11-25 08:43:21,607 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__fail
[2020-11-25 08:43:21,607 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__success
[2020-11-25 08:43:21,607 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__fail
[2020-11-25 08:43:21,607 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__success
[2020-11-25 08:43:21,607 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__fail
[2020-11-25 08:43:21,607 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles_NoBaseCtor__fail
[2020-11-25 08:43:21,607 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles__success
[2020-11-25 08:43:21,607 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles__fail
[2020-11-25 08:43:21,607 INFO  L130     BoogieDeclarations]: Found specification of procedure add~Role~address_Roles__fail
[2020-11-25 08:43:21,607 INFO  L130     BoogieDeclarations]: Found specification of procedure remove~Role~address_Roles__fail
[2020-11-25 08:43:21,608 INFO  L130     BoogieDeclarations]: Found specification of procedure has~Role~address_Roles__fail
[2020-11-25 08:43:21,608 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole_NoBaseCtor__fail
[2020-11-25 08:43:21,608 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole__success
[2020-11-25 08:43:21,608 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole__fail
[2020-11-25 08:43:21,608 INFO  L130     BoogieDeclarations]: Found specification of procedure isPauser~address_PauserRole__success
[2020-11-25 08:43:21,608 INFO  L130     BoogieDeclarations]: Found specification of procedure isPauser~address_PauserRole__fail
[2020-11-25 08:43:21,608 INFO  L130     BoogieDeclarations]: Found specification of procedure addPauser~address_PauserRole__success
[2020-11-25 08:43:21,608 INFO  L130     BoogieDeclarations]: Found specification of procedure addPauser~address_PauserRole__fail
[2020-11-25 08:43:21,608 INFO  L130     BoogieDeclarations]: Found specification of procedure renouncePauser_PauserRole__success
[2020-11-25 08:43:21,608 INFO  L130     BoogieDeclarations]: Found specification of procedure renouncePauser_PauserRole__fail
[2020-11-25 08:43:21,608 INFO  L130     BoogieDeclarations]: Found specification of procedure _addPauser~address_PauserRole__fail
[2020-11-25 08:43:21,608 INFO  L130     BoogieDeclarations]: Found specification of procedure _removePauser~address_PauserRole__fail
[2020-11-25 08:43:21,609 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-25 08:43:21,609 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__success
[2020-11-25 08:43:21,609 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__fail
[2020-11-25 08:43:21,609 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__success
[2020-11-25 08:43:21,609 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__fail
[2020-11-25 08:43:21,609 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__success
[2020-11-25 08:43:21,609 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__fail
[2020-11-25 08:43:21,609 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__success
[2020-11-25 08:43:21,609 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__fail
[2020-11-25 08:43:21,609 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__fail
[2020-11-25 08:43:21,609 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable__success
[2020-11-25 08:43:21,610 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable__fail
[2020-11-25 08:43:21,610 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Pausable__success
[2020-11-25 08:43:21,610 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Pausable__fail
[2020-11-25 08:43:21,610 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Pausable__success
[2020-11-25 08:43:21,610 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Pausable__fail
[2020-11-25 08:43:21,610 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Pausable__success
[2020-11-25 08:43:21,610 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Pausable__fail
[2020-11-25 08:43:21,610 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20Pausable__success
[2020-11-25 08:43:21,610 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20Pausable__fail
[2020-11-25 08:43:21,610 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20Pausable__success
[2020-11-25 08:43:21,610 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20Pausable__fail
[2020-11-25 08:43:21,610 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole_NoBaseCtor__fail
[2020-11-25 08:43:21,611 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole__success
[2020-11-25 08:43:21,611 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole__fail
[2020-11-25 08:43:21,611 INFO  L130     BoogieDeclarations]: Found specification of procedure isMinter~address_MinterRole__success
[2020-11-25 08:43:21,611 INFO  L130     BoogieDeclarations]: Found specification of procedure isMinter~address_MinterRole__fail
[2020-11-25 08:43:21,611 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_MinterRole__success
[2020-11-25 08:43:21,611 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_MinterRole__fail
[2020-11-25 08:43:21,611 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceMinter_MinterRole__success
[2020-11-25 08:43:21,611 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceMinter_MinterRole__fail
[2020-11-25 08:43:21,611 INFO  L130     BoogieDeclarations]: Found specification of procedure _addMinter~address_MinterRole__fail
[2020-11-25 08:43:21,611 INFO  L130     BoogieDeclarations]: Found specification of procedure _removeMinter~address_MinterRole__fail
[2020-11-25 08:43:21,611 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__fail
[2020-11-25 08:43:21,611 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable__success
[2020-11-25 08:43:21,612 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable__fail
[2020-11-25 08:43:21,612 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ERC20Mintable__success
[2020-11-25 08:43:21,612 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ERC20Mintable__fail
[2020-11-25 08:43:21,612 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__fail
[2020-11-25 08:43:21,612 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable__success
[2020-11-25 08:43:21,612 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable__fail
[2020-11-25 08:43:21,612 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_ERC20Burnable__success
[2020-11-25 08:43:21,612 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_ERC20Burnable__fail
[2020-11-25 08:43:21,612 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_ERC20Burnable__success
[2020-11-25 08:43:21,612 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_ERC20Burnable__fail
[2020-11-25 08:43:21,612 INFO  L130     BoogieDeclarations]: Found specification of procedure Wafl_Wafl_NoBaseCtor__fail
[2020-11-25 08:43:21,613 INFO  L130     BoogieDeclarations]: Found specification of procedure Wafl_Wafl__success
[2020-11-25 08:43:21,613 INFO  L130     BoogieDeclarations]: Found specification of procedure Wafl_Wafl__fail
[2020-11-25 08:43:21,613 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 08:43:21,613 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 08:43:21,613 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 08:43:21,613 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 08:43:21,613 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyPauser_pre__fail
[2020-11-25 08:43:21,613 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__fail
[2020-11-25 08:43:21,613 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__fail
[2020-11-25 08:43:21,613 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyMinter_pre__fail
[2020-11-25 08:43:21,613 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 08:43:21,614 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 08:43:21,614 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles.Role_ctor__fail
[2020-11-25 08:43:21,614 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles.Role_ctor__success
[2020-11-25 08:43:21,614 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 08:43:21,614 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 08:43:21,614 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 08:43:21,614 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 08:43:21,614 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 08:43:21,614 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 08:43:21,614 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 08:43:21,614 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 08:43:21,614 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 08:43:21,615 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 08:43:21,615 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 08:43:21,615 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 08:43:21,615 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 08:43:21,615 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 08:43:21,615 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-25 08:43:21,615 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-25 08:43:21,615 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__fail
[2020-11-25 08:43:21,615 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__success
[2020-11-25 08:43:21,615 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__fail
[2020-11-25 08:43:21,615 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__success
[2020-11-25 08:43:21,615 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner_Ownable__fail
[2020-11-25 08:43:21,616 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner_Ownable__success
[2020-11-25 08:43:21,616 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable__fail
[2020-11-25 08:43:21,616 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable__success
[2020-11-25 08:43:21,616 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__fail
[2020-11-25 08:43:21,616 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__success
[2020-11-25 08:43:21,616 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferOwnership~address_Ownable__fail
[2020-11-25 08:43:21,616 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferOwnership~address_Ownable__success
[2020-11-25 08:43:21,616 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 08:43:21,616 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 08:43:21,616 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-25 08:43:21,616 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-25 08:43:21,616 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 08:43:21,616 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 08:43:21,617 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 08:43:21,617 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 08:43:21,617 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__fail
[2020-11-25 08:43:21,617 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__success
[2020-11-25 08:43:21,617 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__fail
[2020-11-25 08:43:21,617 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__success
[2020-11-25 08:43:21,617 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 08:43:21,617 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__success
[2020-11-25 08:43:21,617 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__fail
[2020-11-25 08:43:21,617 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__success
[2020-11-25 08:43:21,617 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__fail
[2020-11-25 08:43:21,617 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__success
[2020-11-25 08:43:21,618 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 08:43:21,618 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 08:43:21,618 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 08:43:21,618 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 08:43:21,618 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 08:43:21,618 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 08:43:21,618 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 08:43:21,618 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 08:43:21,618 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 08:43:21,618 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__success
[2020-11-25 08:43:21,618 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 08:43:21,618 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__success
[2020-11-25 08:43:21,619 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 08:43:21,619 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 08:43:21,619 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 08:43:21,619 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 08:43:21,619 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 08:43:21,619 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 08:43:21,619 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 08:43:21,619 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 08:43:21,619 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__fail
[2020-11-25 08:43:21,619 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__success
[2020-11-25 08:43:21,619 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__fail
[2020-11-25 08:43:21,620 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__success
[2020-11-25 08:43:21,620 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__fail
[2020-11-25 08:43:21,620 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__success
[2020-11-25 08:43:21,620 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles_NoBaseCtor__fail
[2020-11-25 08:43:21,620 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles_NoBaseCtor__success
[2020-11-25 08:43:21,620 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles__fail
[2020-11-25 08:43:21,620 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles__success
[2020-11-25 08:43:21,621 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~Role~address_Roles__fail
[2020-11-25 08:43:21,621 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~Role~address_Roles__success
[2020-11-25 08:43:21,621 INFO  L138     BoogieDeclarations]: Found implementation of procedure remove~Role~address_Roles__fail
[2020-11-25 08:43:21,621 INFO  L138     BoogieDeclarations]: Found implementation of procedure remove~Role~address_Roles__success
[2020-11-25 08:43:21,621 INFO  L138     BoogieDeclarations]: Found implementation of procedure has~Role~address_Roles__fail
[2020-11-25 08:43:21,621 INFO  L138     BoogieDeclarations]: Found implementation of procedure has~Role~address_Roles__success
[2020-11-25 08:43:21,621 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole_NoBaseCtor__fail
[2020-11-25 08:43:21,621 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole_NoBaseCtor__success
[2020-11-25 08:43:21,622 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole__fail
[2020-11-25 08:43:21,622 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole__success
[2020-11-25 08:43:21,622 INFO  L138     BoogieDeclarations]: Found implementation of procedure isPauser~address_PauserRole__fail
[2020-11-25 08:43:21,622 INFO  L138     BoogieDeclarations]: Found implementation of procedure isPauser~address_PauserRole__success
[2020-11-25 08:43:21,622 INFO  L138     BoogieDeclarations]: Found implementation of procedure addPauser~address_PauserRole__fail
[2020-11-25 08:43:21,622 INFO  L138     BoogieDeclarations]: Found implementation of procedure addPauser~address_PauserRole__success
[2020-11-25 08:43:21,622 INFO  L138     BoogieDeclarations]: Found implementation of procedure renouncePauser_PauserRole__fail
[2020-11-25 08:43:21,622 INFO  L138     BoogieDeclarations]: Found implementation of procedure renouncePauser_PauserRole__success
[2020-11-25 08:43:21,623 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addPauser~address_PauserRole__fail
[2020-11-25 08:43:21,623 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addPauser~address_PauserRole__success
[2020-11-25 08:43:21,623 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removePauser~address_PauserRole__fail
[2020-11-25 08:43:21,623 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removePauser~address_PauserRole__success
[2020-11-25 08:43:21,623 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-25 08:43:21,623 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-25 08:43:21,623 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__fail
[2020-11-25 08:43:21,623 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__success
[2020-11-25 08:43:21,624 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__fail
[2020-11-25 08:43:21,624 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__success
[2020-11-25 08:43:21,624 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__fail
[2020-11-25 08:43:21,624 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__success
[2020-11-25 08:43:21,624 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__fail
[2020-11-25 08:43:21,624 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__success
[2020-11-25 08:43:21,624 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__fail
[2020-11-25 08:43:21,624 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__success
[2020-11-25 08:43:21,624 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable__fail
[2020-11-25 08:43:21,625 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable__success
[2020-11-25 08:43:21,625 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Pausable__fail
[2020-11-25 08:43:21,625 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Pausable__success
[2020-11-25 08:43:21,625 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Pausable__fail
[2020-11-25 08:43:21,625 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Pausable__success
[2020-11-25 08:43:21,625 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20Pausable__fail
[2020-11-25 08:43:21,625 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20Pausable__success
[2020-11-25 08:43:21,625 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20Pausable__fail
[2020-11-25 08:43:21,625 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20Pausable__success
[2020-11-25 08:43:21,625 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20Pausable__fail
[2020-11-25 08:43:21,626 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20Pausable__success
[2020-11-25 08:43:21,626 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole_NoBaseCtor__fail
[2020-11-25 08:43:21,626 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole_NoBaseCtor__success
[2020-11-25 08:43:21,626 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole__fail
[2020-11-25 08:43:21,626 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole__success
[2020-11-25 08:43:21,626 INFO  L138     BoogieDeclarations]: Found implementation of procedure isMinter~address_MinterRole__fail
[2020-11-25 08:43:21,626 INFO  L138     BoogieDeclarations]: Found implementation of procedure isMinter~address_MinterRole__success
[2020-11-25 08:43:21,626 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_MinterRole__fail
[2020-11-25 08:43:21,626 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_MinterRole__success
[2020-11-25 08:43:21,627 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceMinter_MinterRole__fail
[2020-11-25 08:43:21,627 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceMinter_MinterRole__success
[2020-11-25 08:43:21,627 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addMinter~address_MinterRole__fail
[2020-11-25 08:43:21,627 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addMinter~address_MinterRole__success
[2020-11-25 08:43:21,627 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removeMinter~address_MinterRole__fail
[2020-11-25 08:43:21,627 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removeMinter~address_MinterRole__success
[2020-11-25 08:43:21,627 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__fail
[2020-11-25 08:43:21,627 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__success
[2020-11-25 08:43:21,627 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable__fail
[2020-11-25 08:43:21,627 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable__success
[2020-11-25 08:43:21,628 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ERC20Mintable__fail
[2020-11-25 08:43:21,628 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ERC20Mintable__success
[2020-11-25 08:43:21,628 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__fail
[2020-11-25 08:43:21,628 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__success
[2020-11-25 08:43:21,628 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable__fail
[2020-11-25 08:43:21,628 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable__success
[2020-11-25 08:43:21,628 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_ERC20Burnable__fail
[2020-11-25 08:43:21,628 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_ERC20Burnable__success
[2020-11-25 08:43:21,628 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_ERC20Burnable__fail
[2020-11-25 08:43:21,628 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_ERC20Burnable__success
[2020-11-25 08:43:21,629 INFO  L138     BoogieDeclarations]: Found implementation of procedure Wafl_Wafl_NoBaseCtor__fail
[2020-11-25 08:43:21,629 INFO  L138     BoogieDeclarations]: Found implementation of procedure Wafl_Wafl_NoBaseCtor__success
[2020-11-25 08:43:21,629 INFO  L138     BoogieDeclarations]: Found implementation of procedure Wafl_Wafl__fail
[2020-11-25 08:43:21,629 INFO  L138     BoogieDeclarations]: Found implementation of procedure Wafl_Wafl__success
[2020-11-25 08:43:21,629 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 08:43:21,629 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 08:43:21,629 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 08:43:21,629 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 08:43:21,629 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 08:43:21,630 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 08:43:21,630 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 08:43:21,630 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 08:43:21,630 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyPauser_pre__fail
[2020-11-25 08:43:21,630 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyPauser_pre__success
[2020-11-25 08:43:21,630 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__fail
[2020-11-25 08:43:21,630 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__success
[2020-11-25 08:43:21,630 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__fail
[2020-11-25 08:43:21,630 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__success
[2020-11-25 08:43:21,630 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyMinter_pre__fail
[2020-11-25 08:43:21,631 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyMinter_pre__success
[2020-11-25 08:43:21,631 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 08:43:21,631 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 08:43:21,631 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Ownable
[2020-11-25 08:43:21,631 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Ownable
[2020-11-25 08:43:21,631 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-25 08:43:21,631 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-25 08:43:21,631 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 08:43:21,631 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 08:43:21,632 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Detailed
[2020-11-25 08:43:21,632 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Detailed
[2020-11-25 08:43:21,632 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Roles
[2020-11-25 08:43:21,632 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Roles
[2020-11-25 08:43:21,632 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_PauserRole
[2020-11-25 08:43:21,632 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_PauserRole
[2020-11-25 08:43:21,632 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Pausable
[2020-11-25 08:43:21,632 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Pausable
[2020-11-25 08:43:21,632 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Pausable
[2020-11-25 08:43:21,632 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Pausable
[2020-11-25 08:43:21,633 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_MinterRole
[2020-11-25 08:43:21,633 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_MinterRole
[2020-11-25 08:43:21,633 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Mintable
[2020-11-25 08:43:21,633 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Mintable
[2020-11-25 08:43:21,633 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Burnable
[2020-11-25 08:43:21,633 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Burnable
[2020-11-25 08:43:21,633 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Wafl
[2020-11-25 08:43:21,633 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 08:43:21,633 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 08:43:21,634 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 08:43:22,845 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 08:43:22,845 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 08:43:22,845 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 08:43:23,138 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 08:43:23,138 INFO  L286             CfgBuilder]: Removed 13 assue(true) statements.
[2020-11-25 08:43:23,141 INFO  L202        PluginConnector]: Adding new model Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 08:43:23 BoogieIcfgContainer
[2020-11-25 08:43:23,142 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 08:43:21" (2/2) ...
[2020-11-25 08:43:23,142 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 08:43:23,142 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@1024e7aa and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 08:43:23, skipping insertion in model container
[2020-11-25 08:43:23,142 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 08:43:23,142 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 08:43:23,142 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 08:43:23,144 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 08:43:23,144 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:43:21" (1/3) ...
[2020-11-25 08:43:23,144 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@736b67af and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 08:43:23, skipping insertion in model container
[2020-11-25 08:43:23,144 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 08:43:21" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 08:43:23,180 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 08:43:23 NWAContainer
[2020-11-25 08:43:23,181 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 08:43:23,181 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 08:43:23,181 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 08:43:23,182 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 08:43:23,183 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 08:43:23" (3/4) ...
[2020-11-25 08:43:23,184 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@2bd7ce60 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 08:43:23, skipping insertion in model container
[2020-11-25 08:43:23,184 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 08:43:23" (4/4) ...
[2020-11-25 08:43:23,190 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 08:43:23,199 INFO  L110   BuchiProductObserver]: Initial RCFG 4156 locations, 6111 edges
[2020-11-25 08:43:23,200 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 08:43:23,215 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 08:43:26,607 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 08:43:26,621 INFO  L110   BuchiProductObserver]: BuchiProgram size 10762 locations, 20071 edges
[2020-11-25 08:43:26,621 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 08:43:26 BoogieIcfgContainer
[2020-11-25 08:43:26,621 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 08:43:26,622 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 08:43:26,622 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 08:43:26,623 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 08:43:26,623 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 08:43:26" (1/1) ...
[2020-11-25 08:43:26,822 INFO  L313           BlockEncoder]: Initial Icfg 10762 locations, 20071 edges
[2020-11-25 08:43:26,822 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 08:43:26,823 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 08:43:26,823 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 08:43:26,824 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 08:43:26,845 INFO  L70    emoveInfeasibleEdges]: Removed 291 edges and 29 locations because of local infeasibility
[2020-11-25 08:43:26,866 INFO  L70        RemoveSinkStates]: Removed 170 edges and 113 locations by removing sink states
[2020-11-25 08:43:26,891 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 08:43:26,898 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 08:43:26,908 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 08:43:26,909 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 08:43:26,920 INFO  L313           BlockEncoder]: Encoded RCFG 10568 locations, 19533 edges
[2020-11-25 08:43:26,921 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 08:43:26 BasicIcfg
[2020-11-25 08:43:26,921 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 08:43:26,922 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 08:43:26,922 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 08:43:26,924 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 08:43:26,924 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 08:43:26,925 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:43:21" (1/6) ...
[2020-11-25 08:43:26,926 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@778106e6 and model type Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 08:43:26, skipping insertion in model container
[2020-11-25 08:43:26,926 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 08:43:26,926 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 08:43:21" (2/6) ...
[2020-11-25 08:43:26,927 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@778106e6 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 08:43:26, skipping insertion in model container
[2020-11-25 08:43:26,927 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 08:43:26,927 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 08:43:23" (3/6) ...
[2020-11-25 08:43:26,927 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@778106e6 and model type Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 08:43:26, skipping insertion in model container
[2020-11-25 08:43:26,927 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 08:43:26,927 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 08:43:23" (4/6) ...
[2020-11-25 08:43:26,928 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@778106e6 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 08:43:26, skipping insertion in model container
[2020-11-25 08:43:26,928 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 08:43:26,928 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 08:43:26" (5/6) ...
[2020-11-25 08:43:26,928 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@778106e6 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 08:43:26, skipping insertion in model container
[2020-11-25 08:43:26,929 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 08:43:26,929 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 08:43:26" (6/6) ...
[2020-11-25 08:43:26,930 INFO  L404   chiAutomizerObserver]: Analyzing ICFG Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_transfer-self.bpl_BEv2
[2020-11-25 08:43:26,969 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 08:43:26,970 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 08:43:26,970 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 08:43:26,970 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 08:43:26,970 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 08:43:26,970 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 08:43:26,970 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 08:43:26,970 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 08:43:26,970 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 08:43:27,069 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10568 states.
[2020-11-25 08:43:27,171 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:43:27,171 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:43:27,171 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:43:27,181 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:43:27,182 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:43:27,182 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 08:43:27,182 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10568 states.
[2020-11-25 08:43:27,288 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:43:27,288 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:43:27,288 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:43:27,290 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:43:27,290 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_ERC20Pausable0 := false;
[L2]                  call_transfer_ERC20Pausable0 := false;
[L2]      CALL        call main();
[L11211]              assume null == 0;
[L11212]  CALL        call this := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L11212]  RET         call this := FreshRefGenerator__success();
[L11213]              assume now >= 0;
[L11214]              assume DType[this] == Wafl;
[L11215]              assume msgvalue_MSG == 0;
[L11216]              gas := gas - 53000;
[L11217]  CALL        call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L3134]               havoc __exception;
[L3135]               revert := false;
[L3136]   COND FALSE  !(__exception)
[L3164]   CALL        call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L7163]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L7163]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7164]   COND TRUE   revert
[L3164]   RET         call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L3165]               assume !revert && gas >= 0;
[L11217]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L11218]              assume !revert && gas >= 0;

Loop:
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND TRUE   choice == 27
[L11034]              gas := gas - 21000;
[L11035]  COND FALSE  !(gas >= 0)
[L11221]  RET         call CorralChoice_Wafl(this);

[2020-11-25 08:43:27,308 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:43:27,308 INFO  L82        PathProgramCache]: Analyzing trace with hash -2088842662, now seen corresponding path program 1 times
[2020-11-25 08:43:27,314 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:43:27,336 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:43:27,378 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 08:43:27,380 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:43:27,381 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 08:43:27,792 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:43:27,804 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 08:43:27,804 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 08:43:27,806 INFO  L87              Difference]: Start difference. First operand 10568 states. Second operand 4 states.
[2020-11-25 08:43:28,916 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:43:28,916 INFO  L93              Difference]: Finished difference Result 6107 states and 7519 transitions.
[2020-11-25 08:43:28,916 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 08:43:28,917 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6107 states and 7519 transitions.
[2020-11-25 08:43:28,946 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:43:28,980 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6107 states to 6107 states and 7519 transitions.
[2020-11-25 08:43:28,981 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-25 08:43:28,985 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1407
[2020-11-25 08:43:28,985 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6107 states and 7519 transitions.
[2020-11-25 08:43:29,003 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:43:29,003 INFO  L728         BuchiCegarLoop]: Abstraction has 6107 states and 7519 transitions.
[2020-11-25 08:43:29,027 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6107 states and 7519 transitions.
[2020-11-25 08:43:29,130 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6107 to 6107.
[2020-11-25 08:43:29,131 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6107 states.
[2020-11-25 08:43:29,141 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6107 states to 6107 states and 7519 transitions.
[2020-11-25 08:43:29,142 INFO  L751         BuchiCegarLoop]: Abstraction has 6107 states and 7519 transitions.
[2020-11-25 08:43:29,143 INFO  L631         BuchiCegarLoop]: Abstraction has 6107 states and 7519 transitions.
[2020-11-25 08:43:29,143 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 08:43:29,143 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6107 states and 7519 transitions.
[2020-11-25 08:43:29,157 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:43:29,157 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:43:29,157 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:43:29,160 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:43:29,160 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_ERC20Pausable0 := false;
[L2]                  call_transfer_ERC20Pausable0 := false;
[L2]      CALL        call main();
[L11211]              assume null == 0;
[L11212]  CALL        call this := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L11212]  RET         call this := FreshRefGenerator__success();
[L11213]              assume now >= 0;
[L11214]              assume DType[this] == Wafl;
[L11215]              assume msgvalue_MSG == 0;
[L11216]              gas := gas - 53000;
[L11217]  CALL        call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L3134]               havoc __exception;
[L3135]               revert := false;
[L3136]   COND FALSE  !(__exception)
[L3164]   CALL        call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L7163]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L7163]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7164]   COND TRUE   revert
[L3164]   RET         call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L3165]               assume !revert && gas >= 0;
[L11217]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L11218]              assume !revert && gas >= 0;
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND TRUE   choice == 21
[L11070]              gas := gas - 21000;
[L11071]  COND TRUE   gas >= 0
[L11072]              assume value_s1040 >= 0 && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11073]              assume msgvalue_MSG == 0;
[L11074]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1040 && value_s1040 <= _balances_ERC20[this][msgsender_MSG]) && value_s1040 >= 0) && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1040] >= 0) && _balances_ERC20[this][to_s1040] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ERC20Pausable0 := true;
[L2]                  call_transfer_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2158]               havoc __exception;
[L2159]               revert := false;
[L2160]   COND FALSE  !(__exception)
[L2188]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6380]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9503]   COND FALSE  !(!!_paused_Pausable[this])
[L6380]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6381]   COND TRUE   revert
[L2188]   RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2189]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _owner_Ownable[this] == old(_owner_Ownable[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L11074]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L11221]  RET         call CorralChoice_Wafl(this);

Loop:
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND TRUE   choice == 21
[L11070]              gas := gas - 21000;
[L11071]  COND TRUE   gas >= 0
[L11072]              assume value_s1040 >= 0 && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11073]              assume msgvalue_MSG == 0;
[L11074]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1040 && value_s1040 <= _balances_ERC20[this][msgsender_MSG]) && value_s1040 >= 0) && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1040] >= 0) && _balances_ERC20[this][to_s1040] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ERC20Pausable0 := true;
[L2]                  call_transfer_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2158]               havoc __exception;
[L2159]               revert := false;
[L2160]   COND FALSE  !(__exception)
[L2188]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6380]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9503]   COND FALSE  !(!!_paused_Pausable[this])
[L6380]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6381]   COND TRUE   revert
[L2188]   RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2189]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _owner_Ownable[this] == old(_owner_Ownable[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L11074]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L11221]  RET         call CorralChoice_Wafl(this);

[2020-11-25 08:43:29,166 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:43:29,166 INFO  L82        PathProgramCache]: Analyzing trace with hash 1241147845, now seen corresponding path program 1 times
[2020-11-25 08:43:29,167 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:43:29,179 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:43:29,209 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 08:43:29,209 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:43:29,209 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 08:43:29,210 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:43:29,210 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 08:43:29,211 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 08:43:29,211 INFO  L87              Difference]: Start difference. First operand 6107 states and 7519 transitions. cyclomatic complexity: 1414 Second operand 3 states.
[2020-11-25 08:43:29,478 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:43:29,478 INFO  L93              Difference]: Finished difference Result 8315 states and 10246 transitions.
[2020-11-25 08:43:29,478 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 08:43:29,479 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8315 states and 10246 transitions.
[2020-11-25 08:43:29,504 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 08:43:29,544 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8315 states to 8315 states and 10246 transitions.
[2020-11-25 08:43:29,544 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2070
[2020-11-25 08:43:29,546 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2070
[2020-11-25 08:43:29,546 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8315 states and 10246 transitions.
[2020-11-25 08:43:29,555 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:43:29,555 INFO  L728         BuchiCegarLoop]: Abstraction has 8315 states and 10246 transitions.
[2020-11-25 08:43:29,563 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8315 states and 10246 transitions.
[2020-11-25 08:43:29,650 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8315 to 7329.
[2020-11-25 08:43:29,651 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7329 states.
[2020-11-25 08:43:29,662 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7329 states to 7329 states and 9052 transitions.
[2020-11-25 08:43:29,662 INFO  L751         BuchiCegarLoop]: Abstraction has 7329 states and 9052 transitions.
[2020-11-25 08:43:29,662 INFO  L631         BuchiCegarLoop]: Abstraction has 7329 states and 9052 transitions.
[2020-11-25 08:43:29,662 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 08:43:29,662 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7329 states and 9052 transitions.
[2020-11-25 08:43:29,673 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:43:29,674 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:43:29,674 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:43:29,676 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:43:29,676 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_ERC20Pausable0 := false;
[L2]                  call_transfer_ERC20Pausable0 := false;
[L2]      CALL        call main();
[L11211]              assume null == 0;
[L11212]  CALL        call this := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L11212]  RET         call this := FreshRefGenerator__success();
[L11213]              assume now >= 0;
[L11214]              assume DType[this] == Wafl;
[L11215]              assume msgvalue_MSG == 0;
[L11216]              gas := gas - 53000;
[L11217]  CALL        call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L3134]               havoc __exception;
[L3135]               revert := false;
[L3136]   COND FALSE  !(__exception)
[L3164]   CALL        call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L7163]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L7163]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7164]   COND FALSE  !(revert)
[L7167]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L7167]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7168]   COND FALSE  !(revert)
[L7171]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L5753]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L5753]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]   COND FALSE  !(revert)
[L5757]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5728]               assume msgsender_MSG != null;
[L5729]               Balance[this] := 0;
[L5730]               _name_ERC20Detailed[this] := -1545721152;
[L5731]               _symbol_ERC20Detailed[this] := -1545721152;
[L5732]               _decimals_ERC20Detailed[this] := 0;
[L5734]               _name_ERC20Detailed[this] := name_s731;
[L5735]               _symbol_ERC20Detailed[this] := symbol_s731;
[L5736]               _decimals_ERC20Detailed[this] := decimals_s731;
[L5757]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5758]   COND FALSE  !(revert)
[L7171]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L7172]   COND FALSE  !(revert)
[L7175]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND TRUE   !(account_s834 != null)
[L5904]               revert := true;
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND TRUE   revert
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND TRUE   revert
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND TRUE   revert
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND TRUE   revert
[L7175]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7176]   COND TRUE   revert
[L3164]   RET         call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L3165]               assume !revert && gas >= 0;
[L11217]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L11218]              assume !revert && gas >= 0;
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND TRUE   choice == 21
[L11070]              gas := gas - 21000;
[L11071]  COND TRUE   gas >= 0
[L11072]              assume value_s1040 >= 0 && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11073]              assume msgvalue_MSG == 0;
[L11074]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1040 && value_s1040 <= _balances_ERC20[this][msgsender_MSG]) && value_s1040 >= 0) && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1040] >= 0) && _balances_ERC20[this][to_s1040] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ERC20Pausable0 := true;
[L2]                  call_transfer_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2158]               havoc __exception;
[L2159]               revert := false;
[L2160]   COND FALSE  !(__exception)
[L2188]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6380]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9503]   COND TRUE   !!_paused_Pausable[this]
[L9504]               revert := true;
[L6380]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6381]   COND TRUE   revert
[L2188]   RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2189]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _owner_Ownable[this] == old(_owner_Ownable[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L11074]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L11221]  RET         call CorralChoice_Wafl(this);

Loop:
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND TRUE   choice == 21
[L11070]              gas := gas - 21000;
[L11071]  COND TRUE   gas >= 0
[L11072]              assume value_s1040 >= 0 && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11073]              assume msgvalue_MSG == 0;
[L11074]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1040 && value_s1040 <= _balances_ERC20[this][msgsender_MSG]) && value_s1040 >= 0) && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1040] >= 0) && _balances_ERC20[this][to_s1040] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ERC20Pausable0 := true;
[L2]                  call_transfer_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2158]               havoc __exception;
[L2159]               revert := false;
[L2160]   COND FALSE  !(__exception)
[L2188]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6380]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9503]   COND TRUE   !!_paused_Pausable[this]
[L9504]               revert := true;
[L6380]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6381]   COND TRUE   revert
[L2188]   RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2189]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _owner_Ownable[this] == old(_owner_Ownable[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L11074]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L11221]  RET         call CorralChoice_Wafl(this);

[2020-11-25 08:43:29,680 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:43:29,680 INFO  L82        PathProgramCache]: Analyzing trace with hash -392561984, now seen corresponding path program 1 times
[2020-11-25 08:43:29,681 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:43:29,693 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:43:29,754 INFO  L134       CoverageAnalysis]: Checked inductivity of 36 backedges. 0 proven. 14 refuted. 0 times theorem prover too weak. 22 trivial. 0 not checked.
[2020-11-25 08:43:29,754 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 08:43:29,754 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [10] total 10
[2020-11-25 08:43:29,754 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:43:29,755 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 10 interpolants.
[2020-11-25 08:43:29,755 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=17, Invalid=73, Unknown=0, NotChecked=0, Total=90
[2020-11-25 08:43:29,755 INFO  L87              Difference]: Start difference. First operand 7329 states and 9052 transitions. cyclomatic complexity: 1725 Second operand 10 states.
[2020-11-25 08:43:29,988 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:43:29,988 INFO  L93              Difference]: Finished difference Result 7389 states and 9147 transitions.
[2020-11-25 08:43:29,988 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-11-25 08:43:29,988 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7389 states and 9147 transitions.
[2020-11-25 08:43:30,012 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:43:30,043 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7389 states to 7389 states and 9147 transitions.
[2020-11-25 08:43:30,043 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1807
[2020-11-25 08:43:30,045 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1807
[2020-11-25 08:43:30,045 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7389 states and 9147 transitions.
[2020-11-25 08:43:30,054 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:43:30,054 INFO  L728         BuchiCegarLoop]: Abstraction has 7389 states and 9147 transitions.
[2020-11-25 08:43:30,061 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7389 states and 9147 transitions.
[2020-11-25 08:43:30,138 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7389 to 7373.
[2020-11-25 08:43:30,139 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7373 states.
[2020-11-25 08:43:30,151 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7373 states to 7373 states and 9121 transitions.
[2020-11-25 08:43:30,151 INFO  L751         BuchiCegarLoop]: Abstraction has 7373 states and 9121 transitions.
[2020-11-25 08:43:30,151 INFO  L631         BuchiCegarLoop]: Abstraction has 7373 states and 9121 transitions.
[2020-11-25 08:43:30,151 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 08:43:30,151 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7373 states and 9121 transitions.
[2020-11-25 08:43:30,164 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:43:30,164 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:43:30,165 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:43:30,167 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:43:30,167 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_ERC20Pausable0 := false;
[L2]                  call_transfer_ERC20Pausable0 := false;
[L2]      CALL        call main();
[L11211]              assume null == 0;
[L11212]  CALL        call this := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L11212]  RET         call this := FreshRefGenerator__success();
[L11213]              assume now >= 0;
[L11214]              assume DType[this] == Wafl;
[L11215]              assume msgvalue_MSG == 0;
[L11216]              gas := gas - 53000;
[L11217]  CALL        call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L3134]               havoc __exception;
[L3135]               revert := false;
[L3136]   COND FALSE  !(__exception)
[L3164]   CALL        call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L7163]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L7163]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7164]   COND FALSE  !(revert)
[L7167]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L7167]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7168]   COND FALSE  !(revert)
[L7171]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L5753]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L5753]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]   COND FALSE  !(revert)
[L5757]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5728]               assume msgsender_MSG != null;
[L5729]               Balance[this] := 0;
[L5730]               _name_ERC20Detailed[this] := -1545721152;
[L5731]               _symbol_ERC20Detailed[this] := -1545721152;
[L5732]               _decimals_ERC20Detailed[this] := 0;
[L5734]               _name_ERC20Detailed[this] := name_s731;
[L5735]               _symbol_ERC20Detailed[this] := symbol_s731;
[L5736]               _decimals_ERC20Detailed[this] := decimals_s731;
[L5757]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5758]   COND FALSE  !(revert)
[L7171]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L7172]   COND FALSE  !(revert)
[L7175]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND FALSE  !(DType[this] == Wafl)
[L5967]   COND TRUE   DType[this] == ERC20Pausable
[L5968]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND TRUE   !!__var_20
[L5853]               revert := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND TRUE   revert
[L5968]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5969]   COND TRUE   revert
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND TRUE   revert
[L7175]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7176]   COND TRUE   revert
[L3164]   RET         call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L3165]               assume !revert && gas >= 0;
[L11217]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L11218]              assume !revert && gas >= 0;
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND TRUE   choice == 21
[L11070]              gas := gas - 21000;
[L11071]  COND TRUE   gas >= 0
[L11072]              assume value_s1040 >= 0 && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11073]              assume msgvalue_MSG == 0;
[L11074]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1040 && value_s1040 <= _balances_ERC20[this][msgsender_MSG]) && value_s1040 >= 0) && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1040] >= 0) && _balances_ERC20[this][to_s1040] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ERC20Pausable0 := true;
[L2]                  call_transfer_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2158]               havoc __exception;
[L2159]               revert := false;
[L2160]   COND FALSE  !(__exception)
[L2188]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6380]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9503]   COND TRUE   !!_paused_Pausable[this]
[L9504]               revert := true;
[L6380]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6381]   COND TRUE   revert
[L2188]   RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2189]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _owner_Ownable[this] == old(_owner_Ownable[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L11074]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L11221]  RET         call CorralChoice_Wafl(this);

Loop:
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND TRUE   choice == 21
[L11070]              gas := gas - 21000;
[L11071]  COND TRUE   gas >= 0
[L11072]              assume value_s1040 >= 0 && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11073]              assume msgvalue_MSG == 0;
[L11074]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1040 && value_s1040 <= _balances_ERC20[this][msgsender_MSG]) && value_s1040 >= 0) && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1040] >= 0) && _balances_ERC20[this][to_s1040] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ERC20Pausable0 := true;
[L2]                  call_transfer_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2158]               havoc __exception;
[L2159]               revert := false;
[L2160]   COND FALSE  !(__exception)
[L2188]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6380]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9503]   COND TRUE   !!_paused_Pausable[this]
[L9504]               revert := true;
[L6380]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6381]   COND TRUE   revert
[L2188]   RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2189]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _owner_Ownable[this] == old(_owner_Ownable[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L11074]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L11221]  RET         call CorralChoice_Wafl(this);

[2020-11-25 08:43:30,171 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:43:30,171 INFO  L82        PathProgramCache]: Analyzing trace with hash 864977177, now seen corresponding path program 1 times
[2020-11-25 08:43:30,172 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:43:30,182 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:43:30,235 INFO  L134       CoverageAnalysis]: Checked inductivity of 36 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 36 trivial. 0 not checked.
[2020-11-25 08:43:30,236 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:43:30,236 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 08:43:30,236 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:43:30,236 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 08:43:30,236 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 08:43:30,236 INFO  L87              Difference]: Start difference. First operand 7373 states and 9121 transitions. cyclomatic complexity: 1750 Second operand 3 states.
[2020-11-25 08:43:30,444 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:43:30,444 INFO  L93              Difference]: Finished difference Result 8335 states and 9753 transitions.
[2020-11-25 08:43:30,444 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 08:43:30,444 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8335 states and 9753 transitions.
[2020-11-25 08:43:30,461 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 08:43:30,482 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8335 states to 7469 states and 8686 transitions.
[2020-11-25 08:43:30,482 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1802
[2020-11-25 08:43:30,483 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1895
[2020-11-25 08:43:30,483 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7469 states and 8686 transitions.
[2020-11-25 08:43:30,488 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:43:30,489 INFO  L728         BuchiCegarLoop]: Abstraction has 7469 states and 8686 transitions.
[2020-11-25 08:43:30,494 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7469 states and 8686 transitions.
[2020-11-25 08:43:30,540 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7469 to 6631.
[2020-11-25 08:43:30,540 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6631 states.
[2020-11-25 08:43:30,548 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6631 states to 6631 states and 7640 transitions.
[2020-11-25 08:43:30,548 INFO  L751         BuchiCegarLoop]: Abstraction has 6631 states and 7640 transitions.
[2020-11-25 08:43:30,548 INFO  L631         BuchiCegarLoop]: Abstraction has 6631 states and 7640 transitions.
[2020-11-25 08:43:30,548 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 08:43:30,548 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6631 states and 7640 transitions.
[2020-11-25 08:43:30,555 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:43:30,556 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:43:30,556 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:43:30,558 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:43:30,558 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_ERC20Pausable0 := false;
[L2]                  call_transfer_ERC20Pausable0 := false;
[L2]      CALL        call main();
[L11211]              assume null == 0;
[L11212]  CALL        call this := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L11212]  RET         call this := FreshRefGenerator__success();
[L11213]              assume now >= 0;
[L11214]              assume DType[this] == Wafl;
[L11215]              assume msgvalue_MSG == 0;
[L11216]              gas := gas - 53000;
[L11217]  CALL        call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L3134]               havoc __exception;
[L3135]               revert := false;
[L3136]   COND FALSE  !(__exception)
[L3164]   CALL        call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L7163]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L7163]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7164]   COND FALSE  !(revert)
[L7167]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L7167]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7168]   COND FALSE  !(revert)
[L7171]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L5753]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L5753]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]   COND FALSE  !(revert)
[L5757]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5728]               assume msgsender_MSG != null;
[L5729]               Balance[this] := 0;
[L5730]               _name_ERC20Detailed[this] := -1545721152;
[L5731]               _symbol_ERC20Detailed[this] := -1545721152;
[L5732]               _decimals_ERC20Detailed[this] := 0;
[L5734]               _name_ERC20Detailed[this] := name_s731;
[L5735]               _symbol_ERC20Detailed[this] := symbol_s731;
[L5736]               _decimals_ERC20Detailed[this] := decimals_s731;
[L5757]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5758]   COND FALSE  !(revert)
[L7171]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L7172]   COND FALSE  !(revert)
[L7175]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND FALSE  !(DType[this] == Wafl)
[L5967]   COND FALSE  !(DType[this] == ERC20Pausable)
[L5972]   COND TRUE   DType[this] == Pausable
[L5973]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5973]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5974]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L7175]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7176]   COND FALSE  !(revert)
[L7179]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND FALSE  !(DType[this] == Wafl)
[L5967]   COND FALSE  !(DType[this] == ERC20Pausable)
[L5972]   COND TRUE   DType[this] == Pausable
[L5973]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5973]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5974]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L7179]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7180]   COND FALSE  !(revert)
[L7183]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6329]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6329]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6330]   COND FALSE  !(revert)
[L6333]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6333]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6334]   COND FALSE  !(revert)
[L6337]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND FALSE  !(DType[this] == Wafl)
[L5967]   COND FALSE  !(DType[this] == ERC20Pausable)
[L5972]   COND TRUE   DType[this] == Pausable
[L5973]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5973]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5974]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6337]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   COND FALSE  !(revert)
[L6341]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND FALSE  !(DType[this] == Wafl)
[L5967]   COND FALSE  !(DType[this] == ERC20Pausable)
[L5972]   COND TRUE   DType[this] == Pausable
[L5973]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5973]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5974]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L6341]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6342]   COND FALSE  !(revert)
[L6345]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6298]               assume msgsender_MSG != null;
[L6299]               Balance[this] := 0;
[L6345]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6346]   COND FALSE  !(revert)
[L7183]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7184]   COND FALSE  !(revert)
[L7187]   CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6973]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6974]   COND FALSE  !(revert)
[L6977]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6977]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6978]   COND FALSE  !(revert)
[L6981]   CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6950]               assume msgsender_MSG != null;
[L6951]               Balance[this] := 0;
[L6981]   RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6982]   COND FALSE  !(revert)
[L7187]   RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7188]   COND FALSE  !(revert)
[L7191]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND FALSE  !(DType[this] == Wafl)
[L6652]   COND FALSE  !(DType[this] == ERC20Mintable)
[L6657]   COND TRUE   DType[this] == MinterRole
[L6658]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6658]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6659]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L7191]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7192]   COND FALSE  !(revert)
[L7195]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6875]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6875]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6876]   COND FALSE  !(revert)
[L6879]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6879]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6880]   COND FALSE  !(revert)
[L6883]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND FALSE  !(DType[this] == Wafl)
[L6652]   COND FALSE  !(DType[this] == ERC20Mintable)
[L6657]   COND TRUE   DType[this] == MinterRole
[L6658]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6658]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6659]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L6883]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6884]   COND FALSE  !(revert)
[L6887]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6848]               assume msgsender_MSG != null;
[L6849]               Balance[this] := 0;
[L6887]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6888]   COND FALSE  !(revert)
[L7195]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L7196]   COND FALSE  !(revert)
[L7199]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4717]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4699]               assume msgsender_MSG != null;
[L4700]               Balance[this] := 0;
[L4701]               _owner_Ownable[this] := null;
[L4703]               _owner_Ownable[this] := msgsender_MSG;
[L4704]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L4717]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4718]   COND FALSE  !(revert)
[L7199]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7200]   COND FALSE  !(revert)
[L7203]   CALL        call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7087]               assume msgsender_MSG != null;
[L7088]               Balance[this] := 0;
[L7090]   COND TRUE   DType[this] == Wafl
[L7091]   CALL        call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L5795]               __ret_0_ := _decimals_ERC20Detailed[this];
[L7091]   RET         call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L7092]   COND FALSE  !(revert)
[L7098]               __var_39 := __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7099]   COND TRUE   DType[this] == Wafl
[L7100]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5473]               __var_11 := null;
[L5474]   COND FALSE  !(!(account_s587 != null))
[L5478]   CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5478]   RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L5479]   COND FALSE  !(revert)
[L5482]               _totalSupply_ERC20[this] := __var_12;
[L5483]   CALL        call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5483]   RET         call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L5484]   COND FALSE  !(revert)
[L5487]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s587];
[L5488]               _balances_ERC20[this][account_s587] := __var_13;
[L5489]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s587];
[L5490]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7100]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7101]   COND FALSE  !(revert)
[L7203]   RET         call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7204]   COND FALSE  !(revert)
[L3164]   RET         call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L3165]               assume !revert && gas >= 0;
[L11217]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L11218]              assume !revert && gas >= 0;
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND TRUE   choice == 21
[L11070]              gas := gas - 21000;
[L11071]  COND TRUE   gas >= 0
[L11072]              assume value_s1040 >= 0 && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11073]              assume msgvalue_MSG == 0;
[L11074]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1040 && value_s1040 <= _balances_ERC20[this][msgsender_MSG]) && value_s1040 >= 0) && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1040] >= 0) && _balances_ERC20[this][to_s1040] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ERC20Pausable0 := true;
[L2]                  call_transfer_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2158]               havoc __exception;
[L2159]               revert := false;
[L2160]   COND TRUE   __exception
[L2161]               __tmp__Balance := Balance;
[L2162]               __tmp__DType := DType;
[L2163]               __tmp__Alloc := Alloc;
[L2164]               __tmp__balance_ADDR := balance_ADDR;
[L2165]               __tmp__M_Ref_int := M_Ref_int;
[L2166]               __tmp__sum__balances0 := sum__balances0;
[L2167]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2168]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L2169]               __tmp__sum__allowances1 := sum__allowances1;
[L2170]               __tmp__M_Ref_bool := M_Ref_bool;
[L2171]               __tmp__sum := sum;
[L2172]               __tmp__Length := Length;
[L2173]               __tmp__now := now;
[L2174]               __tmp___owner_Ownable := _owner_Ownable;
[L2175]               __tmp___balances_ERC20 := _balances_ERC20;
[L2176]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L2177]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2178]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2179]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2180]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2181]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2182]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2183]               __tmp___paused_Pausable := _paused_Pausable;
[L2184]               __tmp___minters_MinterRole := _minters_MinterRole;
[L2185]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6355]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9495]   COND TRUE   !!__tmp___paused_Pausable[this]
[L9496]               revert := true;
[L6355]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6356]   COND TRUE   revert
[L2185]   RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2186]               assume revert || gas < 0;
[L11074]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L11221]  RET         call CorralChoice_Wafl(this);

Loop:
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND TRUE   choice == 21
[L11070]              gas := gas - 21000;
[L11071]  COND TRUE   gas >= 0
[L11072]              assume value_s1040 >= 0 && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11073]              assume msgvalue_MSG == 0;
[L11074]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1040 && value_s1040 <= _balances_ERC20[this][msgsender_MSG]) && value_s1040 >= 0) && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1040] >= 0) && _balances_ERC20[this][to_s1040] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ERC20Pausable0 := true;
[L2]                  call_transfer_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2158]               havoc __exception;
[L2159]               revert := false;
[L2160]   COND TRUE   __exception
[L2161]               __tmp__Balance := Balance;
[L2162]               __tmp__DType := DType;
[L2163]               __tmp__Alloc := Alloc;
[L2164]               __tmp__balance_ADDR := balance_ADDR;
[L2165]               __tmp__M_Ref_int := M_Ref_int;
[L2166]               __tmp__sum__balances0 := sum__balances0;
[L2167]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2168]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L2169]               __tmp__sum__allowances1 := sum__allowances1;
[L2170]               __tmp__M_Ref_bool := M_Ref_bool;
[L2171]               __tmp__sum := sum;
[L2172]               __tmp__Length := Length;
[L2173]               __tmp__now := now;
[L2174]               __tmp___owner_Ownable := _owner_Ownable;
[L2175]               __tmp___balances_ERC20 := _balances_ERC20;
[L2176]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L2177]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2178]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2179]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2180]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2181]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2182]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2183]               __tmp___paused_Pausable := _paused_Pausable;
[L2184]               __tmp___minters_MinterRole := _minters_MinterRole;
[L2185]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6355]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9495]   COND TRUE   !!__tmp___paused_Pausable[this]
[L9496]               revert := true;
[L6355]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6356]   COND TRUE   revert
[L2185]   RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2186]               assume revert || gas < 0;
[L11074]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L11221]  RET         call CorralChoice_Wafl(this);

[2020-11-25 08:43:30,565 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:43:30,565 INFO  L82        PathProgramCache]: Analyzing trace with hash -1627222423, now seen corresponding path program 1 times
[2020-11-25 08:43:30,566 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:43:30,581 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:43:30,784 INFO  L134       CoverageAnalysis]: Checked inductivity of 1019 backedges. 0 proven. 27 refuted. 0 times theorem prover too weak. 992 trivial. 0 not checked.
[2020-11-25 08:43:30,784 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 08:43:30,784 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-11-25 08:43:30,785 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:43:30,785 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 08:43:30,785 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 08:43:30,785 INFO  L87              Difference]: Start difference. First operand 6631 states and 7640 transitions. cyclomatic complexity: 1011 Second operand 7 states.
[2020-11-25 08:43:30,985 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:43:30,986 INFO  L93              Difference]: Finished difference Result 6666 states and 7683 transitions.
[2020-11-25 08:43:30,986 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 08:43:30,986 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6666 states and 7683 transitions.
[2020-11-25 08:43:30,999 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:43:31,015 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6666 states to 6637 states and 7647 transitions.
[2020-11-25 08:43:31,015 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1684
[2020-11-25 08:43:31,016 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1684
[2020-11-25 08:43:31,016 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6637 states and 7647 transitions.
[2020-11-25 08:43:31,021 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:43:31,021 INFO  L728         BuchiCegarLoop]: Abstraction has 6637 states and 7647 transitions.
[2020-11-25 08:43:31,028 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6637 states and 7647 transitions.
[2020-11-25 08:43:31,061 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6637 to 6637.
[2020-11-25 08:43:31,062 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6637 states.
[2020-11-25 08:43:31,068 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6637 states to 6637 states and 7647 transitions.
[2020-11-25 08:43:31,069 INFO  L751         BuchiCegarLoop]: Abstraction has 6637 states and 7647 transitions.
[2020-11-25 08:43:31,069 INFO  L631         BuchiCegarLoop]: Abstraction has 6637 states and 7647 transitions.
[2020-11-25 08:43:31,069 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 08:43:31,069 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6637 states and 7647 transitions.
[2020-11-25 08:43:31,076 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:43:31,076 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:43:31,076 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:43:31,078 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:43:31,078 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_ERC20Pausable0 := false;
[L2]                  call_transfer_ERC20Pausable0 := false;
[L2]      CALL        call main();
[L11211]              assume null == 0;
[L11212]  CALL        call this := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L11212]  RET         call this := FreshRefGenerator__success();
[L11213]              assume now >= 0;
[L11214]              assume DType[this] == Wafl;
[L11215]              assume msgvalue_MSG == 0;
[L11216]              gas := gas - 53000;
[L11217]  CALL        call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L3134]               havoc __exception;
[L3135]               revert := false;
[L3136]   COND FALSE  !(__exception)
[L3164]   CALL        call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L7163]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L7163]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7164]   COND FALSE  !(revert)
[L7167]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L7167]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7168]   COND FALSE  !(revert)
[L7171]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L5753]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L5753]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]   COND FALSE  !(revert)
[L5757]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5728]               assume msgsender_MSG != null;
[L5729]               Balance[this] := 0;
[L5730]               _name_ERC20Detailed[this] := -1545721152;
[L5731]               _symbol_ERC20Detailed[this] := -1545721152;
[L5732]               _decimals_ERC20Detailed[this] := 0;
[L5734]               _name_ERC20Detailed[this] := name_s731;
[L5735]               _symbol_ERC20Detailed[this] := symbol_s731;
[L5736]               _decimals_ERC20Detailed[this] := decimals_s731;
[L5757]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5758]   COND FALSE  !(revert)
[L7171]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L7172]   COND FALSE  !(revert)
[L7175]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND FALSE  !(DType[this] == Wafl)
[L5967]   COND FALSE  !(DType[this] == ERC20Pausable)
[L5972]   COND FALSE  !(DType[this] == Pausable)
[L5977]   COND TRUE   DType[this] == PauserRole
[L5978]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5978]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5979]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L7175]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7176]   COND FALSE  !(revert)
[L7179]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND FALSE  !(DType[this] == Wafl)
[L5967]   COND FALSE  !(DType[this] == ERC20Pausable)
[L5972]   COND FALSE  !(DType[this] == Pausable)
[L5977]   COND TRUE   DType[this] == PauserRole
[L5978]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5978]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5979]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L7179]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7180]   COND FALSE  !(revert)
[L7183]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6329]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6329]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6330]   COND FALSE  !(revert)
[L6333]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6333]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6334]   COND FALSE  !(revert)
[L6337]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND FALSE  !(DType[this] == Wafl)
[L5967]   COND FALSE  !(DType[this] == ERC20Pausable)
[L5972]   COND FALSE  !(DType[this] == Pausable)
[L5977]   COND TRUE   DType[this] == PauserRole
[L5978]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5978]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5979]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6337]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   COND FALSE  !(revert)
[L6341]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND FALSE  !(DType[this] == Wafl)
[L5967]   COND FALSE  !(DType[this] == ERC20Pausable)
[L5972]   COND FALSE  !(DType[this] == Pausable)
[L5977]   COND TRUE   DType[this] == PauserRole
[L5978]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5978]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5979]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L6341]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6342]   COND FALSE  !(revert)
[L6345]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6298]               assume msgsender_MSG != null;
[L6299]               Balance[this] := 0;
[L6345]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6346]   COND FALSE  !(revert)
[L7183]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7184]   COND FALSE  !(revert)
[L7187]   CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6973]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6974]   COND FALSE  !(revert)
[L6977]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6977]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6978]   COND FALSE  !(revert)
[L6981]   CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6950]               assume msgsender_MSG != null;
[L6951]               Balance[this] := 0;
[L6981]   RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6982]   COND FALSE  !(revert)
[L7187]   RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7188]   COND FALSE  !(revert)
[L7191]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND FALSE  !(DType[this] == Wafl)
[L6652]   COND FALSE  !(DType[this] == ERC20Mintable)
[L6657]   COND TRUE   DType[this] == MinterRole
[L6658]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6658]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6659]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L7191]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7192]   COND FALSE  !(revert)
[L7195]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6875]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6875]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6876]   COND FALSE  !(revert)
[L6879]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6879]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6880]   COND FALSE  !(revert)
[L6883]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND FALSE  !(DType[this] == Wafl)
[L6652]   COND FALSE  !(DType[this] == ERC20Mintable)
[L6657]   COND TRUE   DType[this] == MinterRole
[L6658]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6658]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6659]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L6883]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6884]   COND FALSE  !(revert)
[L6887]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6848]               assume msgsender_MSG != null;
[L6849]               Balance[this] := 0;
[L6887]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6888]   COND FALSE  !(revert)
[L7195]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L7196]   COND FALSE  !(revert)
[L7199]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4717]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4699]               assume msgsender_MSG != null;
[L4700]               Balance[this] := 0;
[L4701]               _owner_Ownable[this] := null;
[L4703]               _owner_Ownable[this] := msgsender_MSG;
[L4704]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L4717]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4718]   COND FALSE  !(revert)
[L7199]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7200]   COND FALSE  !(revert)
[L7203]   CALL        call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7087]               assume msgsender_MSG != null;
[L7088]               Balance[this] := 0;
[L7090]   COND TRUE   DType[this] == Wafl
[L7091]   CALL        call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L5795]               __ret_0_ := _decimals_ERC20Detailed[this];
[L7091]   RET         call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L7092]   COND FALSE  !(revert)
[L7098]               __var_39 := __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7099]   COND TRUE   DType[this] == Wafl
[L7100]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5473]               __var_11 := null;
[L5474]   COND FALSE  !(!(account_s587 != null))
[L5478]   CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5478]   RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L5479]   COND FALSE  !(revert)
[L5482]               _totalSupply_ERC20[this] := __var_12;
[L5483]   CALL        call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5483]   RET         call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L5484]   COND FALSE  !(revert)
[L5487]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s587];
[L5488]               _balances_ERC20[this][account_s587] := __var_13;
[L5489]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s587];
[L5490]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7100]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7101]   COND FALSE  !(revert)
[L7203]   RET         call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7204]   COND FALSE  !(revert)
[L3164]   RET         call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L3165]               assume !revert && gas >= 0;
[L11217]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L11218]              assume !revert && gas >= 0;
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND TRUE   choice == 21
[L11070]              gas := gas - 21000;
[L11071]  COND TRUE   gas >= 0
[L11072]              assume value_s1040 >= 0 && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11073]              assume msgvalue_MSG == 0;
[L11074]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1040 && value_s1040 <= _balances_ERC20[this][msgsender_MSG]) && value_s1040 >= 0) && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1040] >= 0) && _balances_ERC20[this][to_s1040] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ERC20Pausable0 := true;
[L2]                  call_transfer_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2158]               havoc __exception;
[L2159]               revert := false;
[L2160]   COND TRUE   __exception
[L2161]               __tmp__Balance := Balance;
[L2162]               __tmp__DType := DType;
[L2163]               __tmp__Alloc := Alloc;
[L2164]               __tmp__balance_ADDR := balance_ADDR;
[L2165]               __tmp__M_Ref_int := M_Ref_int;
[L2166]               __tmp__sum__balances0 := sum__balances0;
[L2167]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2168]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L2169]               __tmp__sum__allowances1 := sum__allowances1;
[L2170]               __tmp__M_Ref_bool := M_Ref_bool;
[L2171]               __tmp__sum := sum;
[L2172]               __tmp__Length := Length;
[L2173]               __tmp__now := now;
[L2174]               __tmp___owner_Ownable := _owner_Ownable;
[L2175]               __tmp___balances_ERC20 := _balances_ERC20;
[L2176]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L2177]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2178]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2179]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2180]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2181]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2182]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2183]               __tmp___paused_Pausable := _paused_Pausable;
[L2184]               __tmp___minters_MinterRole := _minters_MinterRole;
[L2185]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6355]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9495]   COND TRUE   !!__tmp___paused_Pausable[this]
[L9496]               revert := true;
[L6355]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6356]   COND TRUE   revert
[L2185]   RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2186]               assume revert || gas < 0;
[L11074]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L11221]  RET         call CorralChoice_Wafl(this);

Loop:
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND TRUE   choice == 21
[L11070]              gas := gas - 21000;
[L11071]  COND TRUE   gas >= 0
[L11072]              assume value_s1040 >= 0 && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11073]              assume msgvalue_MSG == 0;
[L11074]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1040 && value_s1040 <= _balances_ERC20[this][msgsender_MSG]) && value_s1040 >= 0) && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1040] >= 0) && _balances_ERC20[this][to_s1040] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ERC20Pausable0 := true;
[L2]                  call_transfer_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2158]               havoc __exception;
[L2159]               revert := false;
[L2160]   COND TRUE   __exception
[L2161]               __tmp__Balance := Balance;
[L2162]               __tmp__DType := DType;
[L2163]               __tmp__Alloc := Alloc;
[L2164]               __tmp__balance_ADDR := balance_ADDR;
[L2165]               __tmp__M_Ref_int := M_Ref_int;
[L2166]               __tmp__sum__balances0 := sum__balances0;
[L2167]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2168]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L2169]               __tmp__sum__allowances1 := sum__allowances1;
[L2170]               __tmp__M_Ref_bool := M_Ref_bool;
[L2171]               __tmp__sum := sum;
[L2172]               __tmp__Length := Length;
[L2173]               __tmp__now := now;
[L2174]               __tmp___owner_Ownable := _owner_Ownable;
[L2175]               __tmp___balances_ERC20 := _balances_ERC20;
[L2176]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L2177]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2178]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2179]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2180]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2181]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2182]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2183]               __tmp___paused_Pausable := _paused_Pausable;
[L2184]               __tmp___minters_MinterRole := _minters_MinterRole;
[L2185]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6355]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9495]   COND TRUE   !!__tmp___paused_Pausable[this]
[L9496]               revert := true;
[L6355]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6356]   COND TRUE   revert
[L2185]   RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2186]               assume revert || gas < 0;
[L11074]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L11221]  RET         call CorralChoice_Wafl(this);

[2020-11-25 08:43:31,084 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:43:31,084 INFO  L82        PathProgramCache]: Analyzing trace with hash 1633147875, now seen corresponding path program 1 times
[2020-11-25 08:43:31,085 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:43:31,097 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:43:31,275 INFO  L134       CoverageAnalysis]: Checked inductivity of 1025 backedges. 0 proven. 36 refuted. 0 times theorem prover too weak. 989 trivial. 0 not checked.
[2020-11-25 08:43:31,275 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 08:43:31,275 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-11-25 08:43:31,275 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:43:31,275 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 08:43:31,275 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 08:43:31,276 INFO  L87              Difference]: Start difference. First operand 6637 states and 7647 transitions. cyclomatic complexity: 1012 Second operand 7 states.
[2020-11-25 08:43:31,457 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:43:31,457 INFO  L93              Difference]: Finished difference Result 6672 states and 7690 transitions.
[2020-11-25 08:43:31,457 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 08:43:31,457 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6672 states and 7690 transitions.
[2020-11-25 08:43:31,473 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:43:31,489 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6672 states to 6643 states and 7654 transitions.
[2020-11-25 08:43:31,489 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1684
[2020-11-25 08:43:31,490 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1684
[2020-11-25 08:43:31,490 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6643 states and 7654 transitions.
[2020-11-25 08:43:31,494 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:43:31,495 INFO  L728         BuchiCegarLoop]: Abstraction has 6643 states and 7654 transitions.
[2020-11-25 08:43:31,500 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6643 states and 7654 transitions.
[2020-11-25 08:43:31,541 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6643 to 6637.
[2020-11-25 08:43:31,541 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6637 states.
[2020-11-25 08:43:31,549 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6637 states to 6637 states and 7647 transitions.
[2020-11-25 08:43:31,549 INFO  L751         BuchiCegarLoop]: Abstraction has 6637 states and 7647 transitions.
[2020-11-25 08:43:31,549 INFO  L631         BuchiCegarLoop]: Abstraction has 6637 states and 7647 transitions.
[2020-11-25 08:43:31,549 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 08:43:31,549 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6637 states and 7647 transitions.
[2020-11-25 08:43:31,557 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:43:31,557 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:43:31,557 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:43:31,559 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:43:31,559 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_ERC20Pausable0 := false;
[L2]                  call_transfer_ERC20Pausable0 := false;
[L2]      CALL        call main();
[L11211]              assume null == 0;
[L11212]  CALL        call this := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L11212]  RET         call this := FreshRefGenerator__success();
[L11213]              assume now >= 0;
[L11214]              assume DType[this] == Wafl;
[L11215]              assume msgvalue_MSG == 0;
[L11216]              gas := gas - 53000;
[L11217]  CALL        call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L3134]               havoc __exception;
[L3135]               revert := false;
[L3136]   COND FALSE  !(__exception)
[L3164]   CALL        call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L7163]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L7163]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7164]   COND FALSE  !(revert)
[L7167]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L7167]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7168]   COND FALSE  !(revert)
[L7171]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L5753]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L5753]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]   COND FALSE  !(revert)
[L5757]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5728]               assume msgsender_MSG != null;
[L5729]               Balance[this] := 0;
[L5730]               _name_ERC20Detailed[this] := -1545721152;
[L5731]               _symbol_ERC20Detailed[this] := -1545721152;
[L5732]               _decimals_ERC20Detailed[this] := 0;
[L5734]               _name_ERC20Detailed[this] := name_s731;
[L5735]               _symbol_ERC20Detailed[this] := symbol_s731;
[L5736]               _decimals_ERC20Detailed[this] := decimals_s731;
[L5757]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5758]   COND FALSE  !(revert)
[L7171]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L7172]   COND FALSE  !(revert)
[L7175]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L7175]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7176]   COND FALSE  !(revert)
[L7179]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L7179]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7180]   COND FALSE  !(revert)
[L7183]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6329]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6329]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6330]   COND FALSE  !(revert)
[L6333]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6333]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6334]   COND FALSE  !(revert)
[L6337]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6337]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   COND FALSE  !(revert)
[L6341]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L6341]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6342]   COND FALSE  !(revert)
[L6345]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6298]               assume msgsender_MSG != null;
[L6299]               Balance[this] := 0;
[L6345]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6346]   COND FALSE  !(revert)
[L7183]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7184]   COND FALSE  !(revert)
[L7187]   CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6973]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6974]   COND FALSE  !(revert)
[L6977]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6977]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6978]   COND FALSE  !(revert)
[L6981]   CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6950]               assume msgsender_MSG != null;
[L6951]               Balance[this] := 0;
[L6981]   RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6982]   COND FALSE  !(revert)
[L7187]   RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7188]   COND FALSE  !(revert)
[L7191]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND FALSE  !(DType[this] == Wafl)
[L6652]   COND TRUE   DType[this] == ERC20Mintable
[L6653]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6653]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6654]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L7191]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7192]   COND FALSE  !(revert)
[L7195]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6875]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6875]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6876]   COND FALSE  !(revert)
[L6879]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6879]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6880]   COND FALSE  !(revert)
[L6883]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND FALSE  !(DType[this] == Wafl)
[L6652]   COND TRUE   DType[this] == ERC20Mintable
[L6653]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6653]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6654]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L6883]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6884]   COND FALSE  !(revert)
[L6887]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6848]               assume msgsender_MSG != null;
[L6849]               Balance[this] := 0;
[L6887]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6888]   COND FALSE  !(revert)
[L7195]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L7196]   COND FALSE  !(revert)
[L7199]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4717]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4699]               assume msgsender_MSG != null;
[L4700]               Balance[this] := 0;
[L4701]               _owner_Ownable[this] := null;
[L4703]               _owner_Ownable[this] := msgsender_MSG;
[L4704]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L4717]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4718]   COND FALSE  !(revert)
[L7199]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7200]   COND FALSE  !(revert)
[L7203]   CALL        call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7087]               assume msgsender_MSG != null;
[L7088]               Balance[this] := 0;
[L7090]   COND TRUE   DType[this] == Wafl
[L7091]   CALL        call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L5795]               __ret_0_ := _decimals_ERC20Detailed[this];
[L7091]   RET         call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L7092]   COND FALSE  !(revert)
[L7098]               __var_39 := __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7099]   COND TRUE   DType[this] == Wafl
[L7100]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5473]               __var_11 := null;
[L5474]   COND FALSE  !(!(account_s587 != null))
[L5478]   CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5478]   RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L5479]   COND FALSE  !(revert)
[L5482]               _totalSupply_ERC20[this] := __var_12;
[L5483]   CALL        call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5483]   RET         call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L5484]   COND FALSE  !(revert)
[L5487]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s587];
[L5488]               _balances_ERC20[this][account_s587] := __var_13;
[L5489]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s587];
[L5490]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7100]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7101]   COND FALSE  !(revert)
[L7203]   RET         call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7204]   COND FALSE  !(revert)
[L3164]   RET         call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L3165]               assume !revert && gas >= 0;
[L11217]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L11218]              assume !revert && gas >= 0;
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND TRUE   choice == 21
[L11070]              gas := gas - 21000;
[L11071]  COND TRUE   gas >= 0
[L11072]              assume value_s1040 >= 0 && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11073]              assume msgvalue_MSG == 0;
[L11074]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1040 && value_s1040 <= _balances_ERC20[this][msgsender_MSG]) && value_s1040 >= 0) && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1040] >= 0) && _balances_ERC20[this][to_s1040] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ERC20Pausable0 := true;
[L2]                  call_transfer_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2158]               havoc __exception;
[L2159]               revert := false;
[L2160]   COND TRUE   __exception
[L2161]               __tmp__Balance := Balance;
[L2162]               __tmp__DType := DType;
[L2163]               __tmp__Alloc := Alloc;
[L2164]               __tmp__balance_ADDR := balance_ADDR;
[L2165]               __tmp__M_Ref_int := M_Ref_int;
[L2166]               __tmp__sum__balances0 := sum__balances0;
[L2167]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2168]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L2169]               __tmp__sum__allowances1 := sum__allowances1;
[L2170]               __tmp__M_Ref_bool := M_Ref_bool;
[L2171]               __tmp__sum := sum;
[L2172]               __tmp__Length := Length;
[L2173]               __tmp__now := now;
[L2174]               __tmp___owner_Ownable := _owner_Ownable;
[L2175]               __tmp___balances_ERC20 := _balances_ERC20;
[L2176]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L2177]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2178]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2179]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2180]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2181]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2182]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2183]               __tmp___paused_Pausable := _paused_Pausable;
[L2184]               __tmp___minters_MinterRole := _minters_MinterRole;
[L2185]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6355]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9495]   COND TRUE   !!__tmp___paused_Pausable[this]
[L9496]               revert := true;
[L6355]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6356]   COND TRUE   revert
[L2185]   RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2186]               assume revert || gas < 0;
[L11074]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L11221]  RET         call CorralChoice_Wafl(this);

Loop:
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND TRUE   choice == 21
[L11070]              gas := gas - 21000;
[L11071]  COND TRUE   gas >= 0
[L11072]              assume value_s1040 >= 0 && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11073]              assume msgvalue_MSG == 0;
[L11074]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1040 && value_s1040 <= _balances_ERC20[this][msgsender_MSG]) && value_s1040 >= 0) && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1040] >= 0) && _balances_ERC20[this][to_s1040] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ERC20Pausable0 := true;
[L2]                  call_transfer_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2158]               havoc __exception;
[L2159]               revert := false;
[L2160]   COND TRUE   __exception
[L2161]               __tmp__Balance := Balance;
[L2162]               __tmp__DType := DType;
[L2163]               __tmp__Alloc := Alloc;
[L2164]               __tmp__balance_ADDR := balance_ADDR;
[L2165]               __tmp__M_Ref_int := M_Ref_int;
[L2166]               __tmp__sum__balances0 := sum__balances0;
[L2167]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2168]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L2169]               __tmp__sum__allowances1 := sum__allowances1;
[L2170]               __tmp__M_Ref_bool := M_Ref_bool;
[L2171]               __tmp__sum := sum;
[L2172]               __tmp__Length := Length;
[L2173]               __tmp__now := now;
[L2174]               __tmp___owner_Ownable := _owner_Ownable;
[L2175]               __tmp___balances_ERC20 := _balances_ERC20;
[L2176]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L2177]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2178]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2179]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2180]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2181]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2182]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2183]               __tmp___paused_Pausable := _paused_Pausable;
[L2184]               __tmp___minters_MinterRole := _minters_MinterRole;
[L2185]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6355]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9495]   COND TRUE   !!__tmp___paused_Pausable[this]
[L9496]               revert := true;
[L6355]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6356]   COND TRUE   revert
[L2185]   RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2186]               assume revert || gas < 0;
[L11074]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L11221]  RET         call CorralChoice_Wafl(this);

[2020-11-25 08:43:31,564 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:43:31,564 INFO  L82        PathProgramCache]: Analyzing trace with hash -242696895, now seen corresponding path program 1 times
[2020-11-25 08:43:31,565 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:43:31,586 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:43:31,804 INFO  L134       CoverageAnalysis]: Checked inductivity of 1006 backedges. 0 proven. 9 refuted. 0 times theorem prover too weak. 997 trivial. 0 not checked.
[2020-11-25 08:43:31,804 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 08:43:31,805 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-11-25 08:43:31,806 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:43:31,806 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 08:43:31,806 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 08:43:31,806 INFO  L87              Difference]: Start difference. First operand 6637 states and 7647 transitions. cyclomatic complexity: 1012 Second operand 7 states.
[2020-11-25 08:43:31,960 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:43:31,960 INFO  L93              Difference]: Finished difference Result 6660 states and 7673 transitions.
[2020-11-25 08:43:31,960 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 08:43:31,960 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6660 states and 7673 transitions.
[2020-11-25 08:43:31,972 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:43:31,984 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6660 states to 6643 states and 7653 transitions.
[2020-11-25 08:43:31,984 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1684
[2020-11-25 08:43:31,985 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1684
[2020-11-25 08:43:31,985 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6643 states and 7653 transitions.
[2020-11-25 08:43:31,989 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:43:31,989 INFO  L728         BuchiCegarLoop]: Abstraction has 6643 states and 7653 transitions.
[2020-11-25 08:43:31,994 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6643 states and 7653 transitions.
[2020-11-25 08:43:32,025 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6643 to 6643.
[2020-11-25 08:43:32,025 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6643 states.
[2020-11-25 08:43:32,032 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6643 states to 6643 states and 7653 transitions.
[2020-11-25 08:43:32,032 INFO  L751         BuchiCegarLoop]: Abstraction has 6643 states and 7653 transitions.
[2020-11-25 08:43:32,032 INFO  L631         BuchiCegarLoop]: Abstraction has 6643 states and 7653 transitions.
[2020-11-25 08:43:32,032 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 08:43:32,032 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6643 states and 7653 transitions.
[2020-11-25 08:43:32,040 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:43:32,040 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:43:32,040 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:43:32,042 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:43:32,042 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_ERC20Pausable0 := false;
[L2]                  call_transfer_ERC20Pausable0 := false;
[L2]      CALL        call main();
[L11211]              assume null == 0;
[L11212]  CALL        call this := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L11212]  RET         call this := FreshRefGenerator__success();
[L11213]              assume now >= 0;
[L11214]              assume DType[this] == Wafl;
[L11215]              assume msgvalue_MSG == 0;
[L11216]              gas := gas - 53000;
[L11217]  CALL        call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L3134]               havoc __exception;
[L3135]               revert := false;
[L3136]   COND FALSE  !(__exception)
[L3164]   CALL        call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L7163]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L7163]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7164]   COND FALSE  !(revert)
[L7167]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L7167]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7168]   COND FALSE  !(revert)
[L7171]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L5753]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L5753]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]   COND FALSE  !(revert)
[L5757]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5728]               assume msgsender_MSG != null;
[L5729]               Balance[this] := 0;
[L5730]               _name_ERC20Detailed[this] := -1545721152;
[L5731]               _symbol_ERC20Detailed[this] := -1545721152;
[L5732]               _decimals_ERC20Detailed[this] := 0;
[L5734]               _name_ERC20Detailed[this] := name_s731;
[L5735]               _symbol_ERC20Detailed[this] := symbol_s731;
[L5736]               _decimals_ERC20Detailed[this] := decimals_s731;
[L5757]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5758]   COND FALSE  !(revert)
[L7171]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L7172]   COND FALSE  !(revert)
[L7175]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L7175]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7176]   COND FALSE  !(revert)
[L7179]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND FALSE  !(DType[this] == Wafl)
[L5967]   COND FALSE  !(DType[this] == ERC20Pausable)
[L5972]   COND TRUE   DType[this] == Pausable
[L5973]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5973]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5974]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L7179]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7180]   COND FALSE  !(revert)
[L7183]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6329]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6329]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6330]   COND FALSE  !(revert)
[L6333]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6333]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6334]   COND FALSE  !(revert)
[L6337]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND FALSE  !(DType[this] == Wafl)
[L5967]   COND FALSE  !(DType[this] == ERC20Pausable)
[L5972]   COND TRUE   DType[this] == Pausable
[L5973]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5973]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5974]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6337]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   COND FALSE  !(revert)
[L6341]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND FALSE  !(DType[this] == Wafl)
[L5967]   COND FALSE  !(DType[this] == ERC20Pausable)
[L5972]   COND TRUE   DType[this] == Pausable
[L5973]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5973]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5974]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L6341]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6342]   COND FALSE  !(revert)
[L6345]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6298]               assume msgsender_MSG != null;
[L6299]               Balance[this] := 0;
[L6345]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6346]   COND FALSE  !(revert)
[L7183]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7184]   COND FALSE  !(revert)
[L7187]   CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6973]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6974]   COND FALSE  !(revert)
[L6977]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6977]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6978]   COND FALSE  !(revert)
[L6981]   CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6950]               assume msgsender_MSG != null;
[L6951]               Balance[this] := 0;
[L6981]   RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6982]   COND FALSE  !(revert)
[L7187]   RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7188]   COND FALSE  !(revert)
[L7191]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND FALSE  !(DType[this] == Wafl)
[L6652]   COND FALSE  !(DType[this] == ERC20Mintable)
[L6657]   COND TRUE   DType[this] == MinterRole
[L6658]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6658]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6659]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L7191]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7192]   COND FALSE  !(revert)
[L7195]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6875]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6875]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6876]   COND FALSE  !(revert)
[L6879]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6879]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6880]   COND FALSE  !(revert)
[L6883]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND FALSE  !(DType[this] == Wafl)
[L6652]   COND FALSE  !(DType[this] == ERC20Mintable)
[L6657]   COND TRUE   DType[this] == MinterRole
[L6658]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6658]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6659]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L6883]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6884]   COND FALSE  !(revert)
[L6887]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6848]               assume msgsender_MSG != null;
[L6849]               Balance[this] := 0;
[L6887]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6888]   COND FALSE  !(revert)
[L7195]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L7196]   COND FALSE  !(revert)
[L7199]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4717]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4699]               assume msgsender_MSG != null;
[L4700]               Balance[this] := 0;
[L4701]               _owner_Ownable[this] := null;
[L4703]               _owner_Ownable[this] := msgsender_MSG;
[L4704]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L4717]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4718]   COND FALSE  !(revert)
[L7199]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7200]   COND FALSE  !(revert)
[L7203]   CALL        call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7087]               assume msgsender_MSG != null;
[L7088]               Balance[this] := 0;
[L7090]   COND TRUE   DType[this] == Wafl
[L7091]   CALL        call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L5795]               __ret_0_ := _decimals_ERC20Detailed[this];
[L7091]   RET         call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L7092]   COND FALSE  !(revert)
[L7098]               __var_39 := __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7099]   COND TRUE   DType[this] == Wafl
[L7100]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5473]               __var_11 := null;
[L5474]   COND FALSE  !(!(account_s587 != null))
[L5478]   CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5478]   RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L5479]   COND FALSE  !(revert)
[L5482]               _totalSupply_ERC20[this] := __var_12;
[L5483]   CALL        call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5483]   RET         call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L5484]   COND FALSE  !(revert)
[L5487]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s587];
[L5488]               _balances_ERC20[this][account_s587] := __var_13;
[L5489]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s587];
[L5490]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7100]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7101]   COND FALSE  !(revert)
[L7203]   RET         call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7204]   COND FALSE  !(revert)
[L3164]   RET         call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L3165]               assume !revert && gas >= 0;
[L11217]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L11218]              assume !revert && gas >= 0;
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND TRUE   choice == 21
[L11070]              gas := gas - 21000;
[L11071]  COND TRUE   gas >= 0
[L11072]              assume value_s1040 >= 0 && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11073]              assume msgvalue_MSG == 0;
[L11074]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1040 && value_s1040 <= _balances_ERC20[this][msgsender_MSG]) && value_s1040 >= 0) && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1040] >= 0) && _balances_ERC20[this][to_s1040] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ERC20Pausable0 := true;
[L2]                  call_transfer_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2158]               havoc __exception;
[L2159]               revert := false;
[L2160]   COND TRUE   __exception
[L2161]               __tmp__Balance := Balance;
[L2162]               __tmp__DType := DType;
[L2163]               __tmp__Alloc := Alloc;
[L2164]               __tmp__balance_ADDR := balance_ADDR;
[L2165]               __tmp__M_Ref_int := M_Ref_int;
[L2166]               __tmp__sum__balances0 := sum__balances0;
[L2167]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2168]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L2169]               __tmp__sum__allowances1 := sum__allowances1;
[L2170]               __tmp__M_Ref_bool := M_Ref_bool;
[L2171]               __tmp__sum := sum;
[L2172]               __tmp__Length := Length;
[L2173]               __tmp__now := now;
[L2174]               __tmp___owner_Ownable := _owner_Ownable;
[L2175]               __tmp___balances_ERC20 := _balances_ERC20;
[L2176]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L2177]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2178]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2179]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2180]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2181]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2182]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2183]               __tmp___paused_Pausable := _paused_Pausable;
[L2184]               __tmp___minters_MinterRole := _minters_MinterRole;
[L2185]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6355]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9495]   COND TRUE   !!__tmp___paused_Pausable[this]
[L9496]               revert := true;
[L6355]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6356]   COND TRUE   revert
[L2185]   RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2186]               assume revert || gas < 0;
[L11074]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L11221]  RET         call CorralChoice_Wafl(this);

Loop:
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND TRUE   choice == 21
[L11070]              gas := gas - 21000;
[L11071]  COND TRUE   gas >= 0
[L11072]              assume value_s1040 >= 0 && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11073]              assume msgvalue_MSG == 0;
[L11074]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1040 && value_s1040 <= _balances_ERC20[this][msgsender_MSG]) && value_s1040 >= 0) && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1040] >= 0) && _balances_ERC20[this][to_s1040] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ERC20Pausable0 := true;
[L2]                  call_transfer_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2158]               havoc __exception;
[L2159]               revert := false;
[L2160]   COND TRUE   __exception
[L2161]               __tmp__Balance := Balance;
[L2162]               __tmp__DType := DType;
[L2163]               __tmp__Alloc := Alloc;
[L2164]               __tmp__balance_ADDR := balance_ADDR;
[L2165]               __tmp__M_Ref_int := M_Ref_int;
[L2166]               __tmp__sum__balances0 := sum__balances0;
[L2167]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2168]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L2169]               __tmp__sum__allowances1 := sum__allowances1;
[L2170]               __tmp__M_Ref_bool := M_Ref_bool;
[L2171]               __tmp__sum := sum;
[L2172]               __tmp__Length := Length;
[L2173]               __tmp__now := now;
[L2174]               __tmp___owner_Ownable := _owner_Ownable;
[L2175]               __tmp___balances_ERC20 := _balances_ERC20;
[L2176]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L2177]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2178]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2179]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2180]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2181]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2182]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2183]               __tmp___paused_Pausable := _paused_Pausable;
[L2184]               __tmp___minters_MinterRole := _minters_MinterRole;
[L2185]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6355]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9495]   COND TRUE   !!__tmp___paused_Pausable[this]
[L9496]               revert := true;
[L6355]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6356]   COND TRUE   revert
[L2185]   RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2186]               assume revert || gas < 0;
[L11074]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L11221]  RET         call CorralChoice_Wafl(this);

[2020-11-25 08:43:32,047 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:43:32,047 INFO  L82        PathProgramCache]: Analyzing trace with hash 1523840956, now seen corresponding path program 1 times
[2020-11-25 08:43:32,048 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:43:32,059 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:43:32,297 INFO  L134       CoverageAnalysis]: Checked inductivity of 1001 backedges. 6 proven. 25 refuted. 0 times theorem prover too weak. 970 trivial. 0 not checked.
[2020-11-25 08:43:32,297 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 08:43:32,297 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [8] total 8
[2020-11-25 08:43:32,298 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:43:32,298 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 08:43:32,298 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 08:43:32,299 INFO  L87              Difference]: Start difference. First operand 6643 states and 7653 transitions. cyclomatic complexity: 1012 Second operand 8 states.
[2020-11-25 08:43:32,556 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:43:32,556 INFO  L93              Difference]: Finished difference Result 6682 states and 7700 transitions.
[2020-11-25 08:43:32,556 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 08:43:32,557 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6682 states and 7700 transitions.
[2020-11-25 08:43:32,569 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:43:32,583 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6682 states to 6656 states and 7668 transitions.
[2020-11-25 08:43:32,584 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1684
[2020-11-25 08:43:32,584 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1684
[2020-11-25 08:43:32,584 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6656 states and 7668 transitions.
[2020-11-25 08:43:32,589 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:43:32,589 INFO  L728         BuchiCegarLoop]: Abstraction has 6656 states and 7668 transitions.
[2020-11-25 08:43:32,594 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6656 states and 7668 transitions.
[2020-11-25 08:43:32,628 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6656 to 6656.
[2020-11-25 08:43:32,629 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6656 states.
[2020-11-25 08:43:32,635 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6656 states to 6656 states and 7668 transitions.
[2020-11-25 08:43:32,636 INFO  L751         BuchiCegarLoop]: Abstraction has 6656 states and 7668 transitions.
[2020-11-25 08:43:32,636 INFO  L631         BuchiCegarLoop]: Abstraction has 6656 states and 7668 transitions.
[2020-11-25 08:43:32,636 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 08:43:32,636 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6656 states and 7668 transitions.
[2020-11-25 08:43:32,643 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:43:32,643 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:43:32,643 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:43:32,645 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:43:32,645 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_ERC20Pausable0 := false;
[L2]                  call_transfer_ERC20Pausable0 := false;
[L2]      CALL        call main();
[L11211]              assume null == 0;
[L11212]  CALL        call this := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L11212]  RET         call this := FreshRefGenerator__success();
[L11213]              assume now >= 0;
[L11214]              assume DType[this] == Wafl;
[L11215]              assume msgvalue_MSG == 0;
[L11216]              gas := gas - 53000;
[L11217]  CALL        call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L3134]               havoc __exception;
[L3135]               revert := false;
[L3136]   COND FALSE  !(__exception)
[L3164]   CALL        call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L7163]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L7163]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7164]   COND FALSE  !(revert)
[L7167]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L7167]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7168]   COND FALSE  !(revert)
[L7171]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L5753]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L5753]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]   COND FALSE  !(revert)
[L5757]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5728]               assume msgsender_MSG != null;
[L5729]               Balance[this] := 0;
[L5730]               _name_ERC20Detailed[this] := -1545721152;
[L5731]               _symbol_ERC20Detailed[this] := -1545721152;
[L5732]               _decimals_ERC20Detailed[this] := 0;
[L5734]               _name_ERC20Detailed[this] := name_s731;
[L5735]               _symbol_ERC20Detailed[this] := symbol_s731;
[L5736]               _decimals_ERC20Detailed[this] := decimals_s731;
[L5757]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5758]   COND FALSE  !(revert)
[L7171]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L7172]   COND FALSE  !(revert)
[L7175]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L7175]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7176]   COND FALSE  !(revert)
[L7179]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L7179]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7180]   COND FALSE  !(revert)
[L7183]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6329]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6329]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6330]   COND FALSE  !(revert)
[L6333]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6333]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6334]   COND FALSE  !(revert)
[L6337]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6337]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   COND FALSE  !(revert)
[L6341]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L6341]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6342]   COND FALSE  !(revert)
[L6345]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6298]               assume msgsender_MSG != null;
[L6299]               Balance[this] := 0;
[L6345]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6346]   COND FALSE  !(revert)
[L7183]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7184]   COND FALSE  !(revert)
[L7187]   CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6973]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6974]   COND FALSE  !(revert)
[L6977]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6977]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6978]   COND FALSE  !(revert)
[L6981]   CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6950]               assume msgsender_MSG != null;
[L6951]               Balance[this] := 0;
[L6981]   RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6982]   COND FALSE  !(revert)
[L7187]   RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7188]   COND FALSE  !(revert)
[L7191]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND FALSE  !(DType[this] == Wafl)
[L6652]   COND FALSE  !(DType[this] == ERC20Mintable)
[L6657]   COND TRUE   DType[this] == MinterRole
[L6658]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6658]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6659]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L7191]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7192]   COND FALSE  !(revert)
[L7195]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6875]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6875]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6876]   COND FALSE  !(revert)
[L6879]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6879]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6880]   COND FALSE  !(revert)
[L6883]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND FALSE  !(DType[this] == Wafl)
[L6652]   COND FALSE  !(DType[this] == ERC20Mintable)
[L6657]   COND TRUE   DType[this] == MinterRole
[L6658]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6658]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6659]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L6883]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6884]   COND FALSE  !(revert)
[L6887]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6848]               assume msgsender_MSG != null;
[L6849]               Balance[this] := 0;
[L6887]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6888]   COND FALSE  !(revert)
[L7195]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L7196]   COND FALSE  !(revert)
[L7199]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4717]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4699]               assume msgsender_MSG != null;
[L4700]               Balance[this] := 0;
[L4701]               _owner_Ownable[this] := null;
[L4703]               _owner_Ownable[this] := msgsender_MSG;
[L4704]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L4717]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4718]   COND FALSE  !(revert)
[L7199]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7200]   COND FALSE  !(revert)
[L7203]   CALL        call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7087]               assume msgsender_MSG != null;
[L7088]               Balance[this] := 0;
[L7090]   COND TRUE   DType[this] == Wafl
[L7091]   CALL        call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L5795]               __ret_0_ := _decimals_ERC20Detailed[this];
[L7091]   RET         call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L7092]   COND FALSE  !(revert)
[L7098]               __var_39 := __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7099]   COND TRUE   DType[this] == Wafl
[L7100]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5473]               __var_11 := null;
[L5474]   COND FALSE  !(!(account_s587 != null))
[L5478]   CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5478]   RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L5479]   COND FALSE  !(revert)
[L5482]               _totalSupply_ERC20[this] := __var_12;
[L5483]   CALL        call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5483]   RET         call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L5484]   COND FALSE  !(revert)
[L5487]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s587];
[L5488]               _balances_ERC20[this][account_s587] := __var_13;
[L5489]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s587];
[L5490]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7100]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7101]   COND FALSE  !(revert)
[L7203]   RET         call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7204]   COND FALSE  !(revert)
[L3164]   RET         call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L3165]               assume !revert && gas >= 0;
[L11217]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L11218]              assume !revert && gas >= 0;
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND TRUE   choice == 21
[L11070]              gas := gas - 21000;
[L11071]  COND TRUE   gas >= 0
[L11072]              assume value_s1040 >= 0 && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11073]              assume msgvalue_MSG == 0;
[L11074]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1040 && value_s1040 <= _balances_ERC20[this][msgsender_MSG]) && value_s1040 >= 0) && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1040] >= 0) && _balances_ERC20[this][to_s1040] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ERC20Pausable0 := true;
[L2]                  call_transfer_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2158]               havoc __exception;
[L2159]               revert := false;
[L2160]   COND TRUE   __exception
[L2161]               __tmp__Balance := Balance;
[L2162]               __tmp__DType := DType;
[L2163]               __tmp__Alloc := Alloc;
[L2164]               __tmp__balance_ADDR := balance_ADDR;
[L2165]               __tmp__M_Ref_int := M_Ref_int;
[L2166]               __tmp__sum__balances0 := sum__balances0;
[L2167]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2168]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L2169]               __tmp__sum__allowances1 := sum__allowances1;
[L2170]               __tmp__M_Ref_bool := M_Ref_bool;
[L2171]               __tmp__sum := sum;
[L2172]               __tmp__Length := Length;
[L2173]               __tmp__now := now;
[L2174]               __tmp___owner_Ownable := _owner_Ownable;
[L2175]               __tmp___balances_ERC20 := _balances_ERC20;
[L2176]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L2177]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2178]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2179]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2180]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2181]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2182]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2183]               __tmp___paused_Pausable := _paused_Pausable;
[L2184]               __tmp___minters_MinterRole := _minters_MinterRole;
[L2185]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6355]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9495]   COND TRUE   !!__tmp___paused_Pausable[this]
[L9496]               revert := true;
[L6355]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6356]   COND TRUE   revert
[L2185]   RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2186]               assume revert || gas < 0;
[L11074]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L11221]  RET         call CorralChoice_Wafl(this);

Loop:
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND TRUE   choice == 21
[L11070]              gas := gas - 21000;
[L11071]  COND TRUE   gas >= 0
[L11072]              assume value_s1040 >= 0 && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11073]              assume msgvalue_MSG == 0;
[L11074]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1040 && value_s1040 <= _balances_ERC20[this][msgsender_MSG]) && value_s1040 >= 0) && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1040] >= 0) && _balances_ERC20[this][to_s1040] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ERC20Pausable0 := true;
[L2]                  call_transfer_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2158]               havoc __exception;
[L2159]               revert := false;
[L2160]   COND TRUE   __exception
[L2161]               __tmp__Balance := Balance;
[L2162]               __tmp__DType := DType;
[L2163]               __tmp__Alloc := Alloc;
[L2164]               __tmp__balance_ADDR := balance_ADDR;
[L2165]               __tmp__M_Ref_int := M_Ref_int;
[L2166]               __tmp__sum__balances0 := sum__balances0;
[L2167]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2168]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L2169]               __tmp__sum__allowances1 := sum__allowances1;
[L2170]               __tmp__M_Ref_bool := M_Ref_bool;
[L2171]               __tmp__sum := sum;
[L2172]               __tmp__Length := Length;
[L2173]               __tmp__now := now;
[L2174]               __tmp___owner_Ownable := _owner_Ownable;
[L2175]               __tmp___balances_ERC20 := _balances_ERC20;
[L2176]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L2177]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2178]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2179]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2180]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2181]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2182]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2183]               __tmp___paused_Pausable := _paused_Pausable;
[L2184]               __tmp___minters_MinterRole := _minters_MinterRole;
[L2185]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6355]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9495]   COND TRUE   !!__tmp___paused_Pausable[this]
[L9496]               revert := true;
[L6355]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6356]   COND TRUE   revert
[L2185]   RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2186]               assume revert || gas < 0;
[L11074]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L11221]  RET         call CorralChoice_Wafl(this);

[2020-11-25 08:43:32,650 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:43:32,651 INFO  L82        PathProgramCache]: Analyzing trace with hash 683447657, now seen corresponding path program 1 times
[2020-11-25 08:43:32,652 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:43:32,676 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:43:32,858 INFO  L134       CoverageAnalysis]: Checked inductivity of 1007 backedges. 0 proven. 9 refuted. 0 times theorem prover too weak. 998 trivial. 0 not checked.
[2020-11-25 08:43:32,858 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 08:43:32,858 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-11-25 08:43:32,859 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:43:32,859 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 08:43:32,859 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 08:43:32,859 INFO  L87              Difference]: Start difference. First operand 6656 states and 7668 transitions. cyclomatic complexity: 1014 Second operand 7 states.
[2020-11-25 08:43:33,043 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:43:33,043 INFO  L93              Difference]: Finished difference Result 6679 states and 7694 transitions.
[2020-11-25 08:43:33,043 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 08:43:33,043 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6679 states and 7694 transitions.
[2020-11-25 08:43:33,056 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:43:33,069 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6679 states to 6662 states and 7674 transitions.
[2020-11-25 08:43:33,069 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1684
[2020-11-25 08:43:33,070 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1684
[2020-11-25 08:43:33,070 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6662 states and 7674 transitions.
[2020-11-25 08:43:33,074 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:43:33,074 INFO  L728         BuchiCegarLoop]: Abstraction has 6662 states and 7674 transitions.
[2020-11-25 08:43:33,079 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6662 states and 7674 transitions.
[2020-11-25 08:43:33,119 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6662 to 6656.
[2020-11-25 08:43:33,119 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6656 states.
[2020-11-25 08:43:33,128 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6656 states to 6656 states and 7668 transitions.
[2020-11-25 08:43:33,128 INFO  L751         BuchiCegarLoop]: Abstraction has 6656 states and 7668 transitions.
[2020-11-25 08:43:33,128 INFO  L631         BuchiCegarLoop]: Abstraction has 6656 states and 7668 transitions.
[2020-11-25 08:43:33,128 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 08:43:33,128 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6656 states and 7668 transitions.
[2020-11-25 08:43:33,138 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:43:33,138 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:43:33,138 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:43:33,141 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:43:33,141 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_ERC20Pausable0 := false;
[L2]                  call_transfer_ERC20Pausable0 := false;
[L2]      CALL        call main();
[L11211]              assume null == 0;
[L11212]  CALL        call this := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L11212]  RET         call this := FreshRefGenerator__success();
[L11213]              assume now >= 0;
[L11214]              assume DType[this] == Wafl;
[L11215]              assume msgvalue_MSG == 0;
[L11216]              gas := gas - 53000;
[L11217]  CALL        call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L3134]               havoc __exception;
[L3135]               revert := false;
[L3136]   COND TRUE   __exception
[L3137]               __tmp__Balance := Balance;
[L3138]               __tmp__DType := DType;
[L3139]               __tmp__Alloc := Alloc;
[L3140]               __tmp__balance_ADDR := balance_ADDR;
[L3141]               __tmp__M_Ref_int := M_Ref_int;
[L3142]               __tmp__sum__balances0 := sum__balances0;
[L3143]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L3144]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3145]               __tmp__sum__allowances1 := sum__allowances1;
[L3146]               __tmp__M_Ref_bool := M_Ref_bool;
[L3147]               __tmp__sum := sum;
[L3148]               __tmp__Length := Length;
[L3149]               __tmp__now := now;
[L3150]               __tmp___owner_Ownable := _owner_Ownable;
[L3151]               __tmp___balances_ERC20 := _balances_ERC20;
[L3152]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L3153]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3154]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3155]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3156]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3157]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3158]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3159]               __tmp___paused_Pausable := _paused_Pausable;
[L3160]               __tmp___minters_MinterRole := _minters_MinterRole;
[L3161]   CALL        call Wafl_Wafl__fail(this, msgsender_MSG, msgvalue_MSG);
[L7113]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4853]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4838]               assume msgsender_MSG != null;
[L4839]               __tmp__Balance[this] := 0;
[L4853]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   COND FALSE  !(revert)
[L7113]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7114]   COND FALSE  !(revert)
[L7117]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4895]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4853]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4838]               assume msgsender_MSG != null;
[L4839]               __tmp__Balance[this] := 0;
[L4853]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   COND FALSE  !(revert)
[L4895]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4896]   COND FALSE  !(revert)
[L4899]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4870]               assume msgsender_MSG != null;
[L4871]               __tmp__Balance[this] := 0;
[L4872]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4873]               __tmp__sum__balances0[this] := 0;
[L4874]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4875]               __tmp__sum__allowances1[this] := 0;
[L4876]               __tmp___totalSupply_ERC20[this] := 0;
[L4899]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4900]   COND FALSE  !(revert)
[L7117]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7118]   COND FALSE  !(revert)
[L7121]   CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L5741]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4853]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4838]               assume msgsender_MSG != null;
[L4839]               __tmp__Balance[this] := 0;
[L4853]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   COND FALSE  !(revert)
[L5741]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5742]   COND FALSE  !(revert)
[L5745]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5714]               assume msgsender_MSG != null;
[L5715]               __tmp__Balance[this] := 0;
[L5716]               __tmp___name_ERC20Detailed[this] := -1545721152;
[L5717]               __tmp___symbol_ERC20Detailed[this] := -1545721152;
[L5718]               __tmp___decimals_ERC20Detailed[this] := 0;
[L5720]               __tmp___name_ERC20Detailed[this] := name_s731;
[L5721]               __tmp___symbol_ERC20Detailed[this] := symbol_s731;
[L5722]               __tmp___decimals_ERC20Detailed[this] := decimals_s731;
[L5745]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5746]   COND FALSE  !(revert)
[L7121]   RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L7122]   COND FALSE  !(revert)
[L7125]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5990]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5915]               assume msgsender_MSG != null;
[L5916]               __tmp__Balance[this] := 0;
[L5918]   CALL        call __var_23 := FreshRefGenerator__fail();
[L4506]               havoc newRef;
[L4507]               assume __tmp__Alloc[newRef] == false;
[L4508]               __tmp__Alloc[newRef] := true;
[L4509]               assume newRef != null;
[L5918]   RET         call __var_23 := FreshRefGenerator__fail();
[L5919]   COND FALSE  !(revert)
[L5922]               __tmp___pausers_PauserRole[this] := __var_23;
[L5924]   COND TRUE   __tmp__DType[this] == Wafl
[L5925]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6145]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L5834]   CALL        call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5890]               __var_22 := null;
[L5891]   COND FALSE  !(!(account_s834 != null))
[L5895]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s834]][account_s834];
[L5834]   RET         call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5835]   COND FALSE  !(revert)
[L5838]   COND FALSE  !(!!__var_20)
[L5842]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s786]][account_s786] := true;
[L6145]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L6146]   COND FALSE  !(revert)
[L5925]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5926]   COND FALSE  !(revert)
[L5990]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5991]   COND FALSE  !(revert)
[L7125]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7126]   COND FALSE  !(revert)
[L7129]   CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6199]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5990]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5915]               assume msgsender_MSG != null;
[L5916]               __tmp__Balance[this] := 0;
[L5918]   CALL        call __var_23 := FreshRefGenerator__fail();
[L4506]               havoc newRef;
[L4507]               assume __tmp__Alloc[newRef] == false;
[L4508]               __tmp__Alloc[newRef] := true;
[L4509]               assume newRef != null;
[L5918]   RET         call __var_23 := FreshRefGenerator__fail();
[L5919]   COND FALSE  !(revert)
[L5922]               __tmp___pausers_PauserRole[this] := __var_23;
[L5924]   COND TRUE   __tmp__DType[this] == Wafl
[L5925]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6145]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L5834]   CALL        call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5890]               __var_22 := null;
[L5891]   COND FALSE  !(!(account_s834 != null))
[L5895]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s834]][account_s834];
[L5834]   RET         call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5835]   COND FALSE  !(revert)
[L5838]   COND FALSE  !(!!__var_20)
[L5842]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s786]][account_s786] := true;
[L6145]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L6146]   COND FALSE  !(revert)
[L5925]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5926]   COND FALSE  !(revert)
[L5990]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5991]   COND FALSE  !(revert)
[L6199]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6200]   COND FALSE  !(revert)
[L6203]   CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6180]               assume msgsender_MSG != null;
[L6181]               __tmp__Balance[this] := 0;
[L6182]               __tmp___paused_Pausable[this] := false;
[L6184]               __tmp___paused_Pausable[this] := false;
[L6203]   RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6204]   COND FALSE  !(revert)
[L7129]   RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7130]   COND FALSE  !(revert)
[L7133]   CALL        call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6305]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4853]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4838]               assume msgsender_MSG != null;
[L4839]               __tmp__Balance[this] := 0;
[L4853]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   COND FALSE  !(revert)
[L6305]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6306]   COND FALSE  !(revert)
[L6309]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4895]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4853]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4838]               assume msgsender_MSG != null;
[L4839]               __tmp__Balance[this] := 0;
[L4853]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   COND FALSE  !(revert)
[L4895]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4896]   COND FALSE  !(revert)
[L4899]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4870]               assume msgsender_MSG != null;
[L4871]               __tmp__Balance[this] := 0;
[L4872]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4873]               __tmp__sum__balances0[this] := 0;
[L4874]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4875]               __tmp__sum__allowances1[this] := 0;
[L4876]               __tmp___totalSupply_ERC20[this] := 0;
[L4899]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4900]   COND FALSE  !(revert)
[L6309]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6310]   COND FALSE  !(revert)
[L6313]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5990]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5915]               assume msgsender_MSG != null;
[L5916]               __tmp__Balance[this] := 0;
[L5918]   CALL        call __var_23 := FreshRefGenerator__fail();
[L4506]               havoc newRef;
[L4507]               assume __tmp__Alloc[newRef] == false;
[L4508]               __tmp__Alloc[newRef] := true;
[L4509]               assume newRef != null;
[L5918]   RET         call __var_23 := FreshRefGenerator__fail();
[L5919]   COND FALSE  !(revert)
[L5922]               __tmp___pausers_PauserRole[this] := __var_23;
[L5924]   COND TRUE   __tmp__DType[this] == Wafl
[L5925]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6145]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L5834]   CALL        call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5890]               __var_22 := null;
[L5891]   COND FALSE  !(!(account_s834 != null))
[L5895]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s834]][account_s834];
[L5834]   RET         call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5835]   COND FALSE  !(revert)
[L5838]   COND FALSE  !(!!__var_20)
[L5842]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s786]][account_s786] := true;
[L6145]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L6146]   COND FALSE  !(revert)
[L5925]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5926]   COND FALSE  !(revert)
[L5990]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5991]   COND FALSE  !(revert)
[L6313]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6314]   COND FALSE  !(revert)
[L6317]   CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6199]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5990]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5915]               assume msgsender_MSG != null;
[L5916]               __tmp__Balance[this] := 0;
[L5918]   CALL        call __var_23 := FreshRefGenerator__fail();
[L4506]               havoc newRef;
[L4507]               assume __tmp__Alloc[newRef] == false;
[L4508]               __tmp__Alloc[newRef] := true;
[L4509]               assume newRef != null;
[L5918]   RET         call __var_23 := FreshRefGenerator__fail();
[L5919]   COND FALSE  !(revert)
[L5922]               __tmp___pausers_PauserRole[this] := __var_23;
[L5924]   COND TRUE   __tmp__DType[this] == Wafl
[L5925]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6145]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L5834]   CALL        call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5890]               __var_22 := null;
[L5891]   COND FALSE  !(!(account_s834 != null))
[L5895]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s834]][account_s834];
[L5834]   RET         call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5835]   COND FALSE  !(revert)
[L5838]   COND FALSE  !(!!__var_20)
[L5842]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s786]][account_s786] := true;
[L6145]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L6146]   COND FALSE  !(revert)
[L5925]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5926]   COND FALSE  !(revert)
[L5990]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5991]   COND FALSE  !(revert)
[L6199]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6200]   COND FALSE  !(revert)
[L6203]   CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6180]               assume msgsender_MSG != null;
[L6181]               __tmp__Balance[this] := 0;
[L6182]               __tmp___paused_Pausable[this] := false;
[L6184]               __tmp___paused_Pausable[this] := false;
[L6203]   RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6204]   COND FALSE  !(revert)
[L6317]   RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6318]   COND FALSE  !(revert)
[L6321]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6290]               assume msgsender_MSG != null;
[L6291]               __tmp__Balance[this] := 0;
[L6321]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6322]   COND FALSE  !(revert)
[L7133]   RET         call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7134]   COND FALSE  !(revert)
[L7137]   CALL        call ERC20Burnable_ERC20Burnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6957]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4853]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4838]               assume msgsender_MSG != null;
[L4839]               __tmp__Balance[this] := 0;
[L4853]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   COND FALSE  !(revert)
[L6957]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6958]   COND FALSE  !(revert)
[L6961]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4895]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4853]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4838]               assume msgsender_MSG != null;
[L4839]               __tmp__Balance[this] := 0;
[L4853]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   COND FALSE  !(revert)
[L4895]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4896]   COND FALSE  !(revert)
[L4899]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4870]               assume msgsender_MSG != null;
[L4871]               __tmp__Balance[this] := 0;
[L4872]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4873]               __tmp__sum__balances0[this] := 0;
[L4874]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4875]               __tmp__sum__allowances1[this] := 0;
[L4876]               __tmp___totalSupply_ERC20[this] := 0;
[L4899]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4900]   COND FALSE  !(revert)
[L6961]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6962]   COND FALSE  !(revert)
[L6965]   CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6942]               assume msgsender_MSG != null;
[L6943]               __tmp__Balance[this] := 0;
[L6965]   RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6966]   COND FALSE  !(revert)
[L7137]   RET         call ERC20Burnable_ERC20Burnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7138]   COND FALSE  !(revert)
[L7141]   CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6670]   CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6605]               assume msgsender_MSG != null;
[L6606]               __tmp__Balance[this] := 0;
[L6608]   CALL        call __var_36 := FreshRefGenerator__fail();
[L4506]               havoc newRef;
[L4507]               assume __tmp__Alloc[newRef] == false;
[L4508]               __tmp__Alloc[newRef] := true;
[L4509]               assume newRef != null;
[L6608]   RET         call __var_36 := FreshRefGenerator__fail();
[L6609]   COND FALSE  !(revert)
[L6612]               __tmp___minters_MinterRole[this] := __var_36;
[L6614]   COND TRUE   __tmp__DType[this] == Wafl
[L6615]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6805]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1200);
[L5834]   CALL        call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5890]               __var_22 := null;
[L5891]   COND FALSE  !(!(account_s834 != null))
[L5895]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s834]][account_s834];
[L5834]   RET         call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5835]   COND FALSE  !(revert)
[L5838]   COND FALSE  !(!!__var_20)
[L5842]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s786]][account_s786] := true;
[L6805]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1200);
[L6806]   COND FALSE  !(revert)
[L6615]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6616]   COND FALSE  !(revert)
[L6670]   RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6671]   COND FALSE  !(revert)
[L7141]   RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7142]   COND FALSE  !(revert)
[L7145]   CALL        call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6855]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4853]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4838]               assume msgsender_MSG != null;
[L4839]               __tmp__Balance[this] := 0;
[L4853]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   COND FALSE  !(revert)
[L6855]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6856]   COND FALSE  !(revert)
[L6859]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4895]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4853]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4838]               assume msgsender_MSG != null;
[L4839]               __tmp__Balance[this] := 0;
[L4853]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   COND FALSE  !(revert)
[L4895]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4896]   COND FALSE  !(revert)
[L4899]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4870]               assume msgsender_MSG != null;
[L4871]               __tmp__Balance[this] := 0;
[L4872]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4873]               __tmp__sum__balances0[this] := 0;
[L4874]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4875]               __tmp__sum__allowances1[this] := 0;
[L4876]               __tmp___totalSupply_ERC20[this] := 0;
[L4899]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4900]   COND FALSE  !(revert)
[L6859]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6860]   COND FALSE  !(revert)
[L6863]   CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6670]   CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6605]               assume msgsender_MSG != null;
[L6606]               __tmp__Balance[this] := 0;
[L6608]   CALL        call __var_36 := FreshRefGenerator__fail();
[L4506]               havoc newRef;
[L4507]               assume __tmp__Alloc[newRef] == false;
[L4508]               __tmp__Alloc[newRef] := true;
[L4509]               assume newRef != null;
[L6608]   RET         call __var_36 := FreshRefGenerator__fail();
[L6609]   COND FALSE  !(revert)
[L6612]               __tmp___minters_MinterRole[this] := __var_36;
[L6614]   COND TRUE   __tmp__DType[this] == Wafl
[L6615]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6805]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1200);
[L5834]   CALL        call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5890]               __var_22 := null;
[L5891]   COND FALSE  !(!(account_s834 != null))
[L5895]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s834]][account_s834];
[L5834]   RET         call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5835]   COND FALSE  !(revert)
[L5838]   COND FALSE  !(!!__var_20)
[L5842]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s786]][account_s786] := true;
[L6805]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1200);
[L6806]   COND FALSE  !(revert)
[L6615]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6616]   COND FALSE  !(revert)
[L6670]   RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6671]   COND FALSE  !(revert)
[L6863]   RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6864]   COND FALSE  !(revert)
[L6867]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6840]               assume msgsender_MSG != null;
[L6841]               __tmp__Balance[this] := 0;
[L6867]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L7145]   RET         call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7146]   COND FALSE  !(revert)
[L7149]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4709]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4689]               assume msgsender_MSG != null;
[L4690]               __tmp__Balance[this] := 0;
[L4691]               __tmp___owner_Ownable[this] := null;
[L4693]               __tmp___owner_Ownable[this] := msgsender_MSG;
[L4709]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4710]   COND FALSE  !(revert)
[L7149]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7150]   COND FALSE  !(revert)
[L7153]   CALL        call Wafl_Wafl_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7060]               assume msgsender_MSG != null;
[L7061]               __tmp__Balance[this] := 0;
[L7063]   COND TRUE   __tmp__DType[this] == Wafl
[L7064]   CALL        call __var_40 := decimals_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG);
[L5789]               __ret_0_ := __tmp___decimals_ERC20Detailed[this];
[L7064]   RET         call __var_40 := decimals_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG);
[L7065]   COND FALSE  !(revert)
[L7071]               __var_39 := __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7072]   COND TRUE   __tmp__DType[this] == Wafl
[L7073]   CALL        call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5449]               __var_11 := null;
[L5450]   COND FALSE  !(!(account_s587 != null))
[L5454]   CALL        call __var_12 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], amount_s587);
[L4565]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4566]   COND FALSE  !(!(c_s26 >= a_s26))
[L4570]               __ret_0_ := c_s26;
[L5454]   RET         call __var_12 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], amount_s587);
[L5455]   COND FALSE  !(revert)
[L5458]               __tmp___totalSupply_ERC20[this] := __var_12;
[L5459]   CALL        call __var_13 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s587], amount_s587);
[L4565]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4566]   COND FALSE  !(!(c_s26 >= a_s26))
[L4570]               __ret_0_ := c_s26;
[L5459]   RET         call __var_13 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s587], amount_s587);
[L5460]   COND FALSE  !(revert)
[L5463]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][account_s587];
[L5464]               __tmp___balances_ERC20[this][account_s587] := __var_13;
[L5465]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][account_s587];
[L7073]   RET         call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7074]   COND FALSE  !(revert)
[L7153]   RET         call Wafl_Wafl_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7154]   COND FALSE  !(revert)
[L3161]   RET         call Wafl_Wafl__fail(this, msgsender_MSG, msgvalue_MSG);
[L3162]               assume revert || gas < 0;
[L11217]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L11218]              assume !revert && gas >= 0;
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND TRUE   choice == 21
[L11070]              gas := gas - 21000;
[L11071]  COND TRUE   gas >= 0
[L11072]              assume value_s1040 >= 0 && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11073]              assume msgvalue_MSG == 0;
[L11074]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1040 && value_s1040 <= _balances_ERC20[this][msgsender_MSG]) && value_s1040 >= 0) && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1040] >= 0) && _balances_ERC20[this][to_s1040] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ERC20Pausable0 := true;
[L2]                  call_transfer_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2158]               havoc __exception;
[L2159]               revert := false;
[L2160]   COND TRUE   __exception
[L2161]               __tmp__Balance := Balance;
[L2162]               __tmp__DType := DType;
[L2163]               __tmp__Alloc := Alloc;
[L2164]               __tmp__balance_ADDR := balance_ADDR;
[L2165]               __tmp__M_Ref_int := M_Ref_int;
[L2166]               __tmp__sum__balances0 := sum__balances0;
[L2167]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2168]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L2169]               __tmp__sum__allowances1 := sum__allowances1;
[L2170]               __tmp__M_Ref_bool := M_Ref_bool;
[L2171]               __tmp__sum := sum;
[L2172]               __tmp__Length := Length;
[L2173]               __tmp__now := now;
[L2174]               __tmp___owner_Ownable := _owner_Ownable;
[L2175]               __tmp___balances_ERC20 := _balances_ERC20;
[L2176]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L2177]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2178]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2179]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2180]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2181]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2182]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2183]               __tmp___paused_Pausable := _paused_Pausable;
[L2184]               __tmp___minters_MinterRole := _minters_MinterRole;
[L2185]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6355]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9495]   COND TRUE   !!__tmp___paused_Pausable[this]
[L9496]               revert := true;
[L6355]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6356]   COND TRUE   revert
[L2185]   RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2186]               assume revert || gas < 0;
[L11074]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L11221]  RET         call CorralChoice_Wafl(this);

Loop:
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND TRUE   choice == 21
[L11070]              gas := gas - 21000;
[L11071]  COND TRUE   gas >= 0
[L11072]              assume value_s1040 >= 0 && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11073]              assume msgvalue_MSG == 0;
[L11074]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1040 && value_s1040 <= _balances_ERC20[this][msgsender_MSG]) && value_s1040 >= 0) && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1040] >= 0) && _balances_ERC20[this][to_s1040] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ERC20Pausable0 := true;
[L2]                  call_transfer_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2158]               havoc __exception;
[L2159]               revert := false;
[L2160]   COND TRUE   __exception
[L2161]               __tmp__Balance := Balance;
[L2162]               __tmp__DType := DType;
[L2163]               __tmp__Alloc := Alloc;
[L2164]               __tmp__balance_ADDR := balance_ADDR;
[L2165]               __tmp__M_Ref_int := M_Ref_int;
[L2166]               __tmp__sum__balances0 := sum__balances0;
[L2167]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2168]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L2169]               __tmp__sum__allowances1 := sum__allowances1;
[L2170]               __tmp__M_Ref_bool := M_Ref_bool;
[L2171]               __tmp__sum := sum;
[L2172]               __tmp__Length := Length;
[L2173]               __tmp__now := now;
[L2174]               __tmp___owner_Ownable := _owner_Ownable;
[L2175]               __tmp___balances_ERC20 := _balances_ERC20;
[L2176]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L2177]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2178]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2179]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2180]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2181]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2182]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2183]               __tmp___paused_Pausable := _paused_Pausable;
[L2184]               __tmp___minters_MinterRole := _minters_MinterRole;
[L2185]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6355]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9495]   COND TRUE   !!__tmp___paused_Pausable[this]
[L9496]               revert := true;
[L6355]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6356]   COND TRUE   revert
[L2185]   RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2186]               assume revert || gas < 0;
[L11074]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L11221]  RET         call CorralChoice_Wafl(this);

[2020-11-25 08:43:33,147 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:43:33,147 INFO  L82        PathProgramCache]: Analyzing trace with hash 1717633616, now seen corresponding path program 1 times
[2020-11-25 08:43:33,148 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:43:33,172 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:43:33,370 INFO  L134       CoverageAnalysis]: Checked inductivity of 962 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 962 trivial. 0 not checked.
[2020-11-25 08:43:33,371 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:43:33,371 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 08:43:33,371 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:43:33,371 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 08:43:33,371 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-11-25 08:43:33,372 INFO  L87              Difference]: Start difference. First operand 6656 states and 7668 transitions. cyclomatic complexity: 1014 Second operand 4 states.
[2020-11-25 08:43:34,302 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:43:34,302 INFO  L93              Difference]: Finished difference Result 7762 states and 9043 transitions.
[2020-11-25 08:43:34,302 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 08:43:34,302 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7762 states and 9043 transitions.
[2020-11-25 08:43:34,319 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-25 08:43:34,334 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7762 states to 7455 states and 8709 transitions.
[2020-11-25 08:43:34,335 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1977
[2020-11-25 08:43:34,335 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1977
[2020-11-25 08:43:34,336 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7455 states and 8709 transitions.
[2020-11-25 08:43:34,340 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:43:34,340 INFO  L728         BuchiCegarLoop]: Abstraction has 7455 states and 8709 transitions.
[2020-11-25 08:43:34,345 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7455 states and 8709 transitions.
[2020-11-25 08:43:34,382 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7455 to 6709.
[2020-11-25 08:43:34,382 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6709 states.
[2020-11-25 08:43:34,389 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6709 states to 6709 states and 7752 transitions.
[2020-11-25 08:43:34,389 INFO  L751         BuchiCegarLoop]: Abstraction has 6709 states and 7752 transitions.
[2020-11-25 08:43:34,389 INFO  L631         BuchiCegarLoop]: Abstraction has 6709 states and 7752 transitions.
[2020-11-25 08:43:34,389 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-25 08:43:34,389 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6709 states and 7752 transitions.
[2020-11-25 08:43:34,396 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 08:43:34,396 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:43:34,396 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:43:34,398 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:43:34,398 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_ERC20Pausable0 := false;
[L2]                  call_transfer_ERC20Pausable0 := false;
[L2]      CALL        call main();
[L11211]              assume null == 0;
[L11212]  CALL        call this := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L11212]  RET         call this := FreshRefGenerator__success();
[L11213]              assume now >= 0;
[L11214]              assume DType[this] == Wafl;
[L11215]              assume msgvalue_MSG == 0;
[L11216]              gas := gas - 53000;
[L11217]  CALL        call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L3134]               havoc __exception;
[L3135]               revert := false;
[L3136]   COND FALSE  !(__exception)
[L3164]   CALL        call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L7163]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L7163]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7164]   COND FALSE  !(revert)
[L7167]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L7167]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7168]   COND FALSE  !(revert)
[L7171]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L5753]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L5753]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]   COND FALSE  !(revert)
[L5757]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5728]               assume msgsender_MSG != null;
[L5729]               Balance[this] := 0;
[L5730]               _name_ERC20Detailed[this] := -1545721152;
[L5731]               _symbol_ERC20Detailed[this] := -1545721152;
[L5732]               _decimals_ERC20Detailed[this] := 0;
[L5734]               _name_ERC20Detailed[this] := name_s731;
[L5735]               _symbol_ERC20Detailed[this] := symbol_s731;
[L5736]               _decimals_ERC20Detailed[this] := decimals_s731;
[L5757]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5758]   COND FALSE  !(revert)
[L7171]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L7172]   COND FALSE  !(revert)
[L7175]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L7175]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7176]   COND FALSE  !(revert)
[L7179]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND FALSE  !(DType[this] == Wafl)
[L5967]   COND TRUE   DType[this] == ERC20Pausable
[L5968]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5968]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5969]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L7179]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7180]   COND FALSE  !(revert)
[L7183]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6329]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6329]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6330]   COND FALSE  !(revert)
[L6333]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6333]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6334]   COND FALSE  !(revert)
[L6337]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND FALSE  !(DType[this] == Wafl)
[L5967]   COND FALSE  !(DType[this] == ERC20Pausable)
[L5972]   COND TRUE   DType[this] == Pausable
[L5973]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5973]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5974]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6337]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   COND FALSE  !(revert)
[L6341]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND FALSE  !(DType[this] == Wafl)
[L5967]   COND TRUE   DType[this] == ERC20Pausable
[L5968]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5968]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5969]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L6341]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6342]   COND FALSE  !(revert)
[L6345]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6298]               assume msgsender_MSG != null;
[L6299]               Balance[this] := 0;
[L6345]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6346]   COND FALSE  !(revert)
[L7183]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7184]   COND FALSE  !(revert)
[L7187]   CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6973]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6974]   COND FALSE  !(revert)
[L6977]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6977]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6978]   COND FALSE  !(revert)
[L6981]   CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6950]               assume msgsender_MSG != null;
[L6951]               Balance[this] := 0;
[L6981]   RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6982]   COND FALSE  !(revert)
[L7187]   RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7188]   COND FALSE  !(revert)
[L7191]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND TRUE   DType[this] == Wafl
[L6648]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6648]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6649]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L7191]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7192]   COND FALSE  !(revert)
[L7195]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6875]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6875]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6876]   COND FALSE  !(revert)
[L6879]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6879]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6880]   COND FALSE  !(revert)
[L6883]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND FALSE  !(DType[this] == Wafl)
[L6652]   COND FALSE  !(DType[this] == ERC20Mintable)
[L6657]   COND TRUE   DType[this] == MinterRole
[L6658]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6658]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6659]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L6883]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6884]   COND FALSE  !(revert)
[L6887]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6848]               assume msgsender_MSG != null;
[L6849]               Balance[this] := 0;
[L6887]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6888]   COND FALSE  !(revert)
[L7195]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L7196]   COND FALSE  !(revert)
[L7199]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4717]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4699]               assume msgsender_MSG != null;
[L4700]               Balance[this] := 0;
[L4701]               _owner_Ownable[this] := null;
[L4703]               _owner_Ownable[this] := msgsender_MSG;
[L4704]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L4717]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4718]   COND FALSE  !(revert)
[L7199]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7200]   COND FALSE  !(revert)
[L7203]   CALL        call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7087]               assume msgsender_MSG != null;
[L7088]               Balance[this] := 0;
[L7090]   COND TRUE   DType[this] == Wafl
[L7091]   CALL        call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L5795]               __ret_0_ := _decimals_ERC20Detailed[this];
[L7091]   RET         call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L7092]   COND FALSE  !(revert)
[L7098]               __var_39 := __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7099]   COND TRUE   DType[this] == Wafl
[L7100]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5473]               __var_11 := null;
[L5474]   COND FALSE  !(!(account_s587 != null))
[L5478]   CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5478]   RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L5479]   COND FALSE  !(revert)
[L5482]               _totalSupply_ERC20[this] := __var_12;
[L5483]   CALL        call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5483]   RET         call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L5484]   COND FALSE  !(revert)
[L5487]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s587];
[L5488]               _balances_ERC20[this][account_s587] := __var_13;
[L5489]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s587];
[L5490]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7100]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7101]   COND FALSE  !(revert)
[L7203]   RET         call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7204]   COND FALSE  !(revert)
[L3164]   RET         call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L3165]               assume !revert && gas >= 0;
[L11217]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L11218]              assume !revert && gas >= 0;
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND TRUE   choice == 21
[L11070]              gas := gas - 21000;
[L11071]  COND TRUE   gas >= 0
[L11072]              assume value_s1040 >= 0 && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11073]              assume msgvalue_MSG == 0;
[L11074]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1040 && value_s1040 <= _balances_ERC20[this][msgsender_MSG]) && value_s1040 >= 0) && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1040] >= 0) && _balances_ERC20[this][to_s1040] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ERC20Pausable0 := true;
[L2]                  call_transfer_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2158]               havoc __exception;
[L2159]               revert := false;
[L2160]   COND TRUE   __exception
[L2161]               __tmp__Balance := Balance;
[L2162]               __tmp__DType := DType;
[L2163]               __tmp__Alloc := Alloc;
[L2164]               __tmp__balance_ADDR := balance_ADDR;
[L2165]               __tmp__M_Ref_int := M_Ref_int;
[L2166]               __tmp__sum__balances0 := sum__balances0;
[L2167]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2168]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L2169]               __tmp__sum__allowances1 := sum__allowances1;
[L2170]               __tmp__M_Ref_bool := M_Ref_bool;
[L2171]               __tmp__sum := sum;
[L2172]               __tmp__Length := Length;
[L2173]               __tmp__now := now;
[L2174]               __tmp___owner_Ownable := _owner_Ownable;
[L2175]               __tmp___balances_ERC20 := _balances_ERC20;
[L2176]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L2177]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2178]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2179]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2180]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2181]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2182]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2183]               __tmp___paused_Pausable := _paused_Pausable;
[L2184]               __tmp___minters_MinterRole := _minters_MinterRole;
[L2185]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6355]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9495]   COND TRUE   !!__tmp___paused_Pausable[this]
[L9496]               revert := true;
[L6355]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6356]   COND TRUE   revert
[L2185]   RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2186]               assume revert || gas < 0;
[L11074]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L11221]  RET         call CorralChoice_Wafl(this);

Loop:
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND TRUE   choice == 21
[L11070]              gas := gas - 21000;
[L11071]  COND TRUE   gas >= 0
[L11072]              assume value_s1040 >= 0 && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11073]              assume msgvalue_MSG == 0;
[L11074]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1040 && value_s1040 <= _balances_ERC20[this][msgsender_MSG]) && value_s1040 >= 0) && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1040] >= 0) && _balances_ERC20[this][to_s1040] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ERC20Pausable0 := true;
[L2]                  call_transfer_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2158]               havoc __exception;
[L2159]               revert := false;
[L2160]   COND TRUE   __exception
[L2161]               __tmp__Balance := Balance;
[L2162]               __tmp__DType := DType;
[L2163]               __tmp__Alloc := Alloc;
[L2164]               __tmp__balance_ADDR := balance_ADDR;
[L2165]               __tmp__M_Ref_int := M_Ref_int;
[L2166]               __tmp__sum__balances0 := sum__balances0;
[L2167]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2168]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L2169]               __tmp__sum__allowances1 := sum__allowances1;
[L2170]               __tmp__M_Ref_bool := M_Ref_bool;
[L2171]               __tmp__sum := sum;
[L2172]               __tmp__Length := Length;
[L2173]               __tmp__now := now;
[L2174]               __tmp___owner_Ownable := _owner_Ownable;
[L2175]               __tmp___balances_ERC20 := _balances_ERC20;
[L2176]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L2177]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2178]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2179]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2180]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2181]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2182]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2183]               __tmp___paused_Pausable := _paused_Pausable;
[L2184]               __tmp___minters_MinterRole := _minters_MinterRole;
[L2185]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6355]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9495]   COND TRUE   !!__tmp___paused_Pausable[this]
[L9496]               revert := true;
[L6355]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6356]   COND TRUE   revert
[L2185]   RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2186]               assume revert || gas < 0;
[L11074]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L11221]  RET         call CorralChoice_Wafl(this);

[2020-11-25 08:43:34,403 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:43:34,403 INFO  L82        PathProgramCache]: Analyzing trace with hash 1840871856, now seen corresponding path program 1 times
[2020-11-25 08:43:34,404 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:43:34,415 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:43:34,618 INFO  L134       CoverageAnalysis]: Checked inductivity of 984 backedges. 6 proven. 22 refuted. 0 times theorem prover too weak. 956 trivial. 0 not checked.
[2020-11-25 08:43:34,618 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 08:43:34,618 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [8] total 8
[2020-11-25 08:43:34,619 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:43:34,619 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 08:43:34,619 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 08:43:34,619 INFO  L87              Difference]: Start difference. First operand 6709 states and 7752 transitions. cyclomatic complexity: 1045 Second operand 8 states.
[2020-11-25 08:43:34,815 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:43:34,815 INFO  L93              Difference]: Finished difference Result 6748 states and 7799 transitions.
[2020-11-25 08:43:34,815 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 08:43:34,815 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6748 states and 7799 transitions.
[2020-11-25 08:43:34,827 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 08:43:34,840 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6748 states to 6722 states and 7767 transitions.
[2020-11-25 08:43:34,840 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1914
[2020-11-25 08:43:34,841 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1914
[2020-11-25 08:43:34,841 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6722 states and 7767 transitions.
[2020-11-25 08:43:34,844 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:43:34,844 INFO  L728         BuchiCegarLoop]: Abstraction has 6722 states and 7767 transitions.
[2020-11-25 08:43:34,849 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6722 states and 7767 transitions.
[2020-11-25 08:43:34,882 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6722 to 6709.
[2020-11-25 08:43:34,882 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6709 states.
[2020-11-25 08:43:34,889 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6709 states to 6709 states and 7752 transitions.
[2020-11-25 08:43:34,889 INFO  L751         BuchiCegarLoop]: Abstraction has 6709 states and 7752 transitions.
[2020-11-25 08:43:34,889 INFO  L631         BuchiCegarLoop]: Abstraction has 6709 states and 7752 transitions.
[2020-11-25 08:43:34,889 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-11-25 08:43:34,889 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6709 states and 7752 transitions.
[2020-11-25 08:43:34,897 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 08:43:34,897 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:43:34,897 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:43:34,899 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:43:34,899 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_ERC20Pausable0 := false;
[L2]                  call_transfer_ERC20Pausable0 := false;
[L2]      CALL        call main();
[L11211]              assume null == 0;
[L11212]  CALL        call this := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L11212]  RET         call this := FreshRefGenerator__success();
[L11213]              assume now >= 0;
[L11214]              assume DType[this] == Wafl;
[L11215]              assume msgvalue_MSG == 0;
[L11216]              gas := gas - 53000;
[L11217]  CALL        call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L3134]               havoc __exception;
[L3135]               revert := false;
[L3136]   COND FALSE  !(__exception)
[L3164]   CALL        call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L7163]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L7163]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7164]   COND FALSE  !(revert)
[L7167]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L7167]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7168]   COND FALSE  !(revert)
[L7171]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L5753]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L5753]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]   COND FALSE  !(revert)
[L5757]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5728]               assume msgsender_MSG != null;
[L5729]               Balance[this] := 0;
[L5730]               _name_ERC20Detailed[this] := -1545721152;
[L5731]               _symbol_ERC20Detailed[this] := -1545721152;
[L5732]               _decimals_ERC20Detailed[this] := 0;
[L5734]               _name_ERC20Detailed[this] := name_s731;
[L5735]               _symbol_ERC20Detailed[this] := symbol_s731;
[L5736]               _decimals_ERC20Detailed[this] := decimals_s731;
[L5757]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5758]   COND FALSE  !(revert)
[L7171]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L7172]   COND FALSE  !(revert)
[L7175]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L7175]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7176]   COND FALSE  !(revert)
[L7179]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L7179]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7180]   COND FALSE  !(revert)
[L7183]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6329]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6329]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6330]   COND FALSE  !(revert)
[L6333]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6333]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6334]   COND FALSE  !(revert)
[L6337]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6337]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   COND FALSE  !(revert)
[L6341]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND FALSE  !(DType[this] == Wafl)
[L5967]   COND TRUE   DType[this] == ERC20Pausable
[L5968]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5968]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5969]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L6341]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6342]   COND FALSE  !(revert)
[L6345]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6298]               assume msgsender_MSG != null;
[L6299]               Balance[this] := 0;
[L6345]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6346]   COND FALSE  !(revert)
[L7183]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7184]   COND FALSE  !(revert)
[L7187]   CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6973]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6974]   COND FALSE  !(revert)
[L6977]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6977]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6978]   COND FALSE  !(revert)
[L6981]   CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6950]               assume msgsender_MSG != null;
[L6951]               Balance[this] := 0;
[L6981]   RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6982]   COND FALSE  !(revert)
[L7187]   RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7188]   COND FALSE  !(revert)
[L7191]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND TRUE   DType[this] == Wafl
[L6648]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6648]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6649]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L7191]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7192]   COND FALSE  !(revert)
[L7195]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6875]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6875]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6876]   COND FALSE  !(revert)
[L6879]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6879]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6880]   COND FALSE  !(revert)
[L6883]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND TRUE   DType[this] == Wafl
[L6648]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6648]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6649]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L6883]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6884]   COND FALSE  !(revert)
[L6887]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6848]               assume msgsender_MSG != null;
[L6849]               Balance[this] := 0;
[L6887]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6888]   COND FALSE  !(revert)
[L7195]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L7196]   COND FALSE  !(revert)
[L7199]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4717]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4699]               assume msgsender_MSG != null;
[L4700]               Balance[this] := 0;
[L4701]               _owner_Ownable[this] := null;
[L4703]               _owner_Ownable[this] := msgsender_MSG;
[L4704]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L4717]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4718]   COND FALSE  !(revert)
[L7199]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7200]   COND FALSE  !(revert)
[L7203]   CALL        call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7087]               assume msgsender_MSG != null;
[L7088]               Balance[this] := 0;
[L7090]   COND TRUE   DType[this] == Wafl
[L7091]   CALL        call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L5795]               __ret_0_ := _decimals_ERC20Detailed[this];
[L7091]   RET         call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L7092]   COND FALSE  !(revert)
[L7098]               __var_39 := __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7099]   COND TRUE   DType[this] == Wafl
[L7100]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5473]               __var_11 := null;
[L5474]   COND FALSE  !(!(account_s587 != null))
[L5478]   CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5478]   RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L5479]   COND FALSE  !(revert)
[L5482]               _totalSupply_ERC20[this] := __var_12;
[L5483]   CALL        call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5483]   RET         call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L5484]   COND FALSE  !(revert)
[L5487]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s587];
[L5488]               _balances_ERC20[this][account_s587] := __var_13;
[L5489]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s587];
[L5490]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7100]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7101]   COND FALSE  !(revert)
[L7203]   RET         call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7204]   COND FALSE  !(revert)
[L3164]   RET         call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L3165]               assume !revert && gas >= 0;
[L11217]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L11218]              assume !revert && gas >= 0;
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND TRUE   choice == 21
[L11070]              gas := gas - 21000;
[L11071]  COND TRUE   gas >= 0
[L11072]              assume value_s1040 >= 0 && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11073]              assume msgvalue_MSG == 0;
[L11074]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1040 && value_s1040 <= _balances_ERC20[this][msgsender_MSG]) && value_s1040 >= 0) && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1040] >= 0) && _balances_ERC20[this][to_s1040] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ERC20Pausable0 := true;
[L2]                  call_transfer_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2158]               havoc __exception;
[L2159]               revert := false;
[L2160]   COND TRUE   __exception
[L2161]               __tmp__Balance := Balance;
[L2162]               __tmp__DType := DType;
[L2163]               __tmp__Alloc := Alloc;
[L2164]               __tmp__balance_ADDR := balance_ADDR;
[L2165]               __tmp__M_Ref_int := M_Ref_int;
[L2166]               __tmp__sum__balances0 := sum__balances0;
[L2167]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2168]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L2169]               __tmp__sum__allowances1 := sum__allowances1;
[L2170]               __tmp__M_Ref_bool := M_Ref_bool;
[L2171]               __tmp__sum := sum;
[L2172]               __tmp__Length := Length;
[L2173]               __tmp__now := now;
[L2174]               __tmp___owner_Ownable := _owner_Ownable;
[L2175]               __tmp___balances_ERC20 := _balances_ERC20;
[L2176]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L2177]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2178]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2179]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2180]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2181]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2182]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2183]               __tmp___paused_Pausable := _paused_Pausable;
[L2184]               __tmp___minters_MinterRole := _minters_MinterRole;
[L2185]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6355]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9495]   COND TRUE   !!__tmp___paused_Pausable[this]
[L9496]               revert := true;
[L6355]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6356]   COND TRUE   revert
[L2185]   RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2186]               assume revert || gas < 0;
[L11074]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L11221]  RET         call CorralChoice_Wafl(this);

Loop:
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND TRUE   choice == 21
[L11070]              gas := gas - 21000;
[L11071]  COND TRUE   gas >= 0
[L11072]              assume value_s1040 >= 0 && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11073]              assume msgvalue_MSG == 0;
[L11074]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1040 && value_s1040 <= _balances_ERC20[this][msgsender_MSG]) && value_s1040 >= 0) && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1040] >= 0) && _balances_ERC20[this][to_s1040] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ERC20Pausable0 := true;
[L2]                  call_transfer_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2158]               havoc __exception;
[L2159]               revert := false;
[L2160]   COND TRUE   __exception
[L2161]               __tmp__Balance := Balance;
[L2162]               __tmp__DType := DType;
[L2163]               __tmp__Alloc := Alloc;
[L2164]               __tmp__balance_ADDR := balance_ADDR;
[L2165]               __tmp__M_Ref_int := M_Ref_int;
[L2166]               __tmp__sum__balances0 := sum__balances0;
[L2167]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2168]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L2169]               __tmp__sum__allowances1 := sum__allowances1;
[L2170]               __tmp__M_Ref_bool := M_Ref_bool;
[L2171]               __tmp__sum := sum;
[L2172]               __tmp__Length := Length;
[L2173]               __tmp__now := now;
[L2174]               __tmp___owner_Ownable := _owner_Ownable;
[L2175]               __tmp___balances_ERC20 := _balances_ERC20;
[L2176]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L2177]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2178]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2179]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2180]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2181]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2182]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2183]               __tmp___paused_Pausable := _paused_Pausable;
[L2184]               __tmp___minters_MinterRole := _minters_MinterRole;
[L2185]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6355]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9495]   COND TRUE   !!__tmp___paused_Pausable[this]
[L9496]               revert := true;
[L6355]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6356]   COND TRUE   revert
[L2185]   RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2186]               assume revert || gas < 0;
[L11074]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L11221]  RET         call CorralChoice_Wafl(this);

[2020-11-25 08:43:34,903 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:43:34,903 INFO  L82        PathProgramCache]: Analyzing trace with hash 422079134, now seen corresponding path program 1 times
[2020-11-25 08:43:34,904 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:43:34,918 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:43:35,098 INFO  L134       CoverageAnalysis]: Checked inductivity of 993 backedges. 25 proven. 0 refuted. 0 times theorem prover too weak. 968 trivial. 0 not checked.
[2020-11-25 08:43:35,098 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:43:35,098 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [9] imperfect sequences [] total 9
[2020-11-25 08:43:35,098 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:43:35,098 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 08:43:35,099 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=15, Invalid=57, Unknown=0, NotChecked=0, Total=72
[2020-11-25 08:43:35,099 INFO  L87              Difference]: Start difference. First operand 6709 states and 7752 transitions. cyclomatic complexity: 1045 Second operand 9 states.
[2020-11-25 08:43:35,316 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:43:35,316 INFO  L93              Difference]: Finished difference Result 6768 states and 7822 transitions.
[2020-11-25 08:43:35,316 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 08:43:35,316 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6768 states and 7822 transitions.
[2020-11-25 08:43:35,327 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 08:43:35,339 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6768 states to 6705 states and 7746 transitions.
[2020-11-25 08:43:35,339 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1914
[2020-11-25 08:43:35,340 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1914
[2020-11-25 08:43:35,340 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6705 states and 7746 transitions.
[2020-11-25 08:43:35,343 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:43:35,343 INFO  L728         BuchiCegarLoop]: Abstraction has 6705 states and 7746 transitions.
[2020-11-25 08:43:35,348 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6705 states and 7746 transitions.
[2020-11-25 08:43:35,375 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6705 to 6705.
[2020-11-25 08:43:35,375 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6705 states.
[2020-11-25 08:43:35,381 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6705 states to 6705 states and 7746 transitions.
[2020-11-25 08:43:35,381 INFO  L751         BuchiCegarLoop]: Abstraction has 6705 states and 7746 transitions.
[2020-11-25 08:43:35,381 INFO  L631         BuchiCegarLoop]: Abstraction has 6705 states and 7746 transitions.
[2020-11-25 08:43:35,381 INFO  L445         BuchiCegarLoop]: ======== Iteration 13============
[2020-11-25 08:43:35,382 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6705 states and 7746 transitions.
[2020-11-25 08:43:35,388 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 08:43:35,389 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:43:35,389 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:43:35,390 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:43:35,390 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_ERC20Pausable0 := false;
[L2]                  call_transfer_ERC20Pausable0 := false;
[L2]      CALL        call main();
[L11211]              assume null == 0;
[L11212]  CALL        call this := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L11212]  RET         call this := FreshRefGenerator__success();
[L11213]              assume now >= 0;
[L11214]              assume DType[this] == Wafl;
[L11215]              assume msgvalue_MSG == 0;
[L11216]              gas := gas - 53000;
[L11217]  CALL        call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L3134]               havoc __exception;
[L3135]               revert := false;
[L3136]   COND FALSE  !(__exception)
[L3164]   CALL        call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L7163]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L7163]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7164]   COND FALSE  !(revert)
[L7167]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L7167]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7168]   COND FALSE  !(revert)
[L7171]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L5753]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L5753]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]   COND FALSE  !(revert)
[L5757]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5728]               assume msgsender_MSG != null;
[L5729]               Balance[this] := 0;
[L5730]               _name_ERC20Detailed[this] := -1545721152;
[L5731]               _symbol_ERC20Detailed[this] := -1545721152;
[L5732]               _decimals_ERC20Detailed[this] := 0;
[L5734]               _name_ERC20Detailed[this] := name_s731;
[L5735]               _symbol_ERC20Detailed[this] := symbol_s731;
[L5736]               _decimals_ERC20Detailed[this] := decimals_s731;
[L5757]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5758]   COND FALSE  !(revert)
[L7171]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L7172]   COND FALSE  !(revert)
[L7175]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L7175]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7176]   COND FALSE  !(revert)
[L7179]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L7179]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7180]   COND FALSE  !(revert)
[L7183]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6329]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6329]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6330]   COND FALSE  !(revert)
[L6333]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6333]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6334]   COND FALSE  !(revert)
[L6337]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6337]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   COND FALSE  !(revert)
[L6341]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L6341]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6342]   COND FALSE  !(revert)
[L6345]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6298]               assume msgsender_MSG != null;
[L6299]               Balance[this] := 0;
[L6345]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6346]   COND FALSE  !(revert)
[L7183]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7184]   COND FALSE  !(revert)
[L7187]   CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6973]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6974]   COND FALSE  !(revert)
[L6977]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6977]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6978]   COND FALSE  !(revert)
[L6981]   CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6950]               assume msgsender_MSG != null;
[L6951]               Balance[this] := 0;
[L6981]   RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6982]   COND FALSE  !(revert)
[L7187]   RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7188]   COND FALSE  !(revert)
[L7191]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND TRUE   DType[this] == Wafl
[L6648]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6648]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6649]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L7191]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7192]   COND FALSE  !(revert)
[L7195]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6875]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6875]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6876]   COND FALSE  !(revert)
[L6879]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6879]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6880]   COND FALSE  !(revert)
[L6883]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND TRUE   DType[this] == Wafl
[L6648]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6648]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6649]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L6883]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6884]   COND FALSE  !(revert)
[L6887]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6848]               assume msgsender_MSG != null;
[L6849]               Balance[this] := 0;
[L6887]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6888]   COND FALSE  !(revert)
[L7195]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L7196]   COND FALSE  !(revert)
[L7199]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4717]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4699]               assume msgsender_MSG != null;
[L4700]               Balance[this] := 0;
[L4701]               _owner_Ownable[this] := null;
[L4703]               _owner_Ownable[this] := msgsender_MSG;
[L4704]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L4717]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4718]   COND FALSE  !(revert)
[L7199]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7200]   COND FALSE  !(revert)
[L7203]   CALL        call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7087]               assume msgsender_MSG != null;
[L7088]               Balance[this] := 0;
[L7090]   COND TRUE   DType[this] == Wafl
[L7091]   CALL        call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L5795]               __ret_0_ := _decimals_ERC20Detailed[this];
[L7091]   RET         call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L7092]   COND FALSE  !(revert)
[L7098]               __var_39 := __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7099]   COND TRUE   DType[this] == Wafl
[L7100]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5473]               __var_11 := null;
[L5474]   COND FALSE  !(!(account_s587 != null))
[L5478]   CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5478]   RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L5479]   COND FALSE  !(revert)
[L5482]               _totalSupply_ERC20[this] := __var_12;
[L5483]   CALL        call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5483]   RET         call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L5484]   COND FALSE  !(revert)
[L5487]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s587];
[L5488]               _balances_ERC20[this][account_s587] := __var_13;
[L5489]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s587];
[L5490]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7100]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7101]   COND FALSE  !(revert)
[L7203]   RET         call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7204]   COND FALSE  !(revert)
[L3164]   RET         call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L3165]               assume !revert && gas >= 0;
[L11217]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L11218]              assume !revert && gas >= 0;
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND TRUE   choice == 21
[L11070]              gas := gas - 21000;
[L11071]  COND TRUE   gas >= 0
[L11072]              assume value_s1040 >= 0 && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11073]              assume msgvalue_MSG == 0;
[L11074]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1040 && value_s1040 <= _balances_ERC20[this][msgsender_MSG]) && value_s1040 >= 0) && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1040] >= 0) && _balances_ERC20[this][to_s1040] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ERC20Pausable0 := true;
[L2]                  call_transfer_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2158]               havoc __exception;
[L2159]               revert := false;
[L2160]   COND TRUE   __exception
[L2161]               __tmp__Balance := Balance;
[L2162]               __tmp__DType := DType;
[L2163]               __tmp__Alloc := Alloc;
[L2164]               __tmp__balance_ADDR := balance_ADDR;
[L2165]               __tmp__M_Ref_int := M_Ref_int;
[L2166]               __tmp__sum__balances0 := sum__balances0;
[L2167]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2168]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L2169]               __tmp__sum__allowances1 := sum__allowances1;
[L2170]               __tmp__M_Ref_bool := M_Ref_bool;
[L2171]               __tmp__sum := sum;
[L2172]               __tmp__Length := Length;
[L2173]               __tmp__now := now;
[L2174]               __tmp___owner_Ownable := _owner_Ownable;
[L2175]               __tmp___balances_ERC20 := _balances_ERC20;
[L2176]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L2177]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2178]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2179]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2180]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2181]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2182]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2183]               __tmp___paused_Pausable := _paused_Pausable;
[L2184]               __tmp___minters_MinterRole := _minters_MinterRole;
[L2185]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6355]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9495]   COND TRUE   !!__tmp___paused_Pausable[this]
[L9496]               revert := true;
[L6355]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6356]   COND TRUE   revert
[L2185]   RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2186]               assume revert || gas < 0;
[L11074]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L11221]  RET         call CorralChoice_Wafl(this);

Loop:
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND TRUE   choice == 21
[L11070]              gas := gas - 21000;
[L11071]  COND TRUE   gas >= 0
[L11072]              assume value_s1040 >= 0 && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11073]              assume msgvalue_MSG == 0;
[L11074]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1040 && value_s1040 <= _balances_ERC20[this][msgsender_MSG]) && value_s1040 >= 0) && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1040] >= 0) && _balances_ERC20[this][to_s1040] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ERC20Pausable0 := true;
[L2]                  call_transfer_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2158]               havoc __exception;
[L2159]               revert := false;
[L2160]   COND TRUE   __exception
[L2161]               __tmp__Balance := Balance;
[L2162]               __tmp__DType := DType;
[L2163]               __tmp__Alloc := Alloc;
[L2164]               __tmp__balance_ADDR := balance_ADDR;
[L2165]               __tmp__M_Ref_int := M_Ref_int;
[L2166]               __tmp__sum__balances0 := sum__balances0;
[L2167]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2168]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L2169]               __tmp__sum__allowances1 := sum__allowances1;
[L2170]               __tmp__M_Ref_bool := M_Ref_bool;
[L2171]               __tmp__sum := sum;
[L2172]               __tmp__Length := Length;
[L2173]               __tmp__now := now;
[L2174]               __tmp___owner_Ownable := _owner_Ownable;
[L2175]               __tmp___balances_ERC20 := _balances_ERC20;
[L2176]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L2177]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2178]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2179]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2180]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2181]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2182]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2183]               __tmp___paused_Pausable := _paused_Pausable;
[L2184]               __tmp___minters_MinterRole := _minters_MinterRole;
[L2185]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6355]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9495]   COND TRUE   !!__tmp___paused_Pausable[this]
[L9496]               revert := true;
[L6355]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6356]   COND TRUE   revert
[L2185]   RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2186]               assume revert || gas < 0;
[L11074]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L11221]  RET         call CorralChoice_Wafl(this);

[2020-11-25 08:43:35,394 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:43:35,395 INFO  L82        PathProgramCache]: Analyzing trace with hash 371817833, now seen corresponding path program 1 times
[2020-11-25 08:43:35,395 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:43:35,413 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:43:35,681 INFO  L134       CoverageAnalysis]: Checked inductivity of 1005 backedges. 6 proven. 0 refuted. 0 times theorem prover too weak. 999 trivial. 0 not checked.
[2020-11-25 08:43:35,681 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:43:35,681 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [13] imperfect sequences [] total 13
[2020-11-25 08:43:35,681 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:43:35,682 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-11-25 08:43:35,682 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=25, Invalid=157, Unknown=0, NotChecked=0, Total=182
[2020-11-25 08:43:35,682 INFO  L87              Difference]: Start difference. First operand 6705 states and 7746 transitions. cyclomatic complexity: 1043 Second operand 14 states.
[2020-11-25 08:43:43,444 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:43:43,445 INFO  L93              Difference]: Finished difference Result 10645 states and 12344 transitions.
[2020-11-25 08:43:43,445 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 18 states. 
[2020-11-25 08:43:43,445 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 10645 states and 12344 transitions.
[2020-11-25 08:43:43,465 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 16
[2020-11-25 08:43:43,484 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 10645 states to 10638 states and 12336 transitions.
[2020-11-25 08:43:43,484 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2863
[2020-11-25 08:43:43,485 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2863
[2020-11-25 08:43:43,485 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 10638 states and 12336 transitions.
[2020-11-25 08:43:43,491 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:43:43,491 INFO  L728         BuchiCegarLoop]: Abstraction has 10638 states and 12336 transitions.
[2020-11-25 08:43:43,496 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 10638 states and 12336 transitions.
[2020-11-25 08:43:43,543 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 10638 to 9363.
[2020-11-25 08:43:43,543 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9363 states.
[2020-11-25 08:43:43,555 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9363 states to 9363 states and 11060 transitions.
[2020-11-25 08:43:43,555 INFO  L751         BuchiCegarLoop]: Abstraction has 9363 states and 11060 transitions.
[2020-11-25 08:43:43,555 INFO  L631         BuchiCegarLoop]: Abstraction has 9363 states and 11060 transitions.
[2020-11-25 08:43:43,555 INFO  L445         BuchiCegarLoop]: ======== Iteration 14============
[2020-11-25 08:43:43,555 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9363 states and 11060 transitions.
[2020-11-25 08:43:43,566 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 16
[2020-11-25 08:43:43,566 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:43:43,566 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:43:43,568 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:43:43,568 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_ERC20Pausable0 := false;
[L2]                  call_transfer_ERC20Pausable0 := false;
[L2]      CALL        call main();
[L11211]              assume null == 0;
[L11212]  CALL        call this := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L11212]  RET         call this := FreshRefGenerator__success();
[L11213]              assume now >= 0;
[L11214]              assume DType[this] == Wafl;
[L11215]              assume msgvalue_MSG == 0;
[L11216]              gas := gas - 53000;
[L11217]  CALL        call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L3134]               havoc __exception;
[L3135]               revert := false;
[L3136]   COND FALSE  !(__exception)
[L3164]   CALL        call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L7163]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L7163]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7164]   COND FALSE  !(revert)
[L7167]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L7167]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7168]   COND FALSE  !(revert)
[L7171]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L5753]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L5753]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]   COND FALSE  !(revert)
[L5757]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5728]               assume msgsender_MSG != null;
[L5729]               Balance[this] := 0;
[L5730]               _name_ERC20Detailed[this] := -1545721152;
[L5731]               _symbol_ERC20Detailed[this] := -1545721152;
[L5732]               _decimals_ERC20Detailed[this] := 0;
[L5734]               _name_ERC20Detailed[this] := name_s731;
[L5735]               _symbol_ERC20Detailed[this] := symbol_s731;
[L5736]               _decimals_ERC20Detailed[this] := decimals_s731;
[L5757]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5758]   COND FALSE  !(revert)
[L7171]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L7172]   COND FALSE  !(revert)
[L7175]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L7175]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7176]   COND FALSE  !(revert)
[L7179]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND FALSE  !(DType[this] == Wafl)
[L5967]   COND FALSE  !(DType[this] == ERC20Pausable)
[L5972]   COND FALSE  !(DType[this] == Pausable)
[L5977]   COND TRUE   DType[this] == PauserRole
[L5978]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5978]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5979]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L7179]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7180]   COND FALSE  !(revert)
[L7183]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6329]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6329]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6330]   COND FALSE  !(revert)
[L6333]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6333]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6334]   COND FALSE  !(revert)
[L6337]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND FALSE  !(DType[this] == Wafl)
[L5967]   COND FALSE  !(DType[this] == ERC20Pausable)
[L5972]   COND TRUE   DType[this] == Pausable
[L5973]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5973]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5974]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6337]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   COND FALSE  !(revert)
[L6341]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND FALSE  !(DType[this] == Wafl)
[L5967]   COND FALSE  !(DType[this] == ERC20Pausable)
[L5972]   COND TRUE   DType[this] == Pausable
[L5973]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5973]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5974]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L6341]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6342]   COND FALSE  !(revert)
[L6345]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6298]               assume msgsender_MSG != null;
[L6299]               Balance[this] := 0;
[L6345]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6346]   COND FALSE  !(revert)
[L7183]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7184]   COND FALSE  !(revert)
[L7187]   CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6973]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6974]   COND FALSE  !(revert)
[L6977]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6977]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6978]   COND FALSE  !(revert)
[L6981]   CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6950]               assume msgsender_MSG != null;
[L6951]               Balance[this] := 0;
[L6981]   RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6982]   COND FALSE  !(revert)
[L7187]   RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7188]   COND FALSE  !(revert)
[L7191]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND TRUE   DType[this] == Wafl
[L6648]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6648]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6649]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L7191]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7192]   COND FALSE  !(revert)
[L7195]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6875]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6875]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6876]   COND FALSE  !(revert)
[L6879]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6879]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6880]   COND FALSE  !(revert)
[L6883]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND TRUE   DType[this] == Wafl
[L6648]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6648]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6649]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L6883]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6884]   COND FALSE  !(revert)
[L6887]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6848]               assume msgsender_MSG != null;
[L6849]               Balance[this] := 0;
[L6887]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6888]   COND FALSE  !(revert)
[L7195]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L7196]   COND FALSE  !(revert)
[L7199]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4717]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4699]               assume msgsender_MSG != null;
[L4700]               Balance[this] := 0;
[L4701]               _owner_Ownable[this] := null;
[L4703]               _owner_Ownable[this] := msgsender_MSG;
[L4704]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L4717]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4718]   COND FALSE  !(revert)
[L7199]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7200]   COND FALSE  !(revert)
[L7203]   CALL        call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7087]               assume msgsender_MSG != null;
[L7088]               Balance[this] := 0;
[L7090]   COND TRUE   DType[this] == Wafl
[L7091]   CALL        call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L5795]               __ret_0_ := _decimals_ERC20Detailed[this];
[L7091]   RET         call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L7092]   COND FALSE  !(revert)
[L7098]               __var_39 := __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7099]   COND TRUE   DType[this] == Wafl
[L7100]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5473]               __var_11 := null;
[L5474]   COND FALSE  !(!(account_s587 != null))
[L5478]   CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5478]   RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L5479]   COND FALSE  !(revert)
[L5482]               _totalSupply_ERC20[this] := __var_12;
[L5483]   CALL        call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5483]   RET         call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L5484]   COND FALSE  !(revert)
[L5487]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s587];
[L5488]               _balances_ERC20[this][account_s587] := __var_13;
[L5489]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s587];
[L5490]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7100]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7101]   COND FALSE  !(revert)
[L7203]   RET         call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7204]   COND FALSE  !(revert)
[L3164]   RET         call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L3165]               assume !revert && gas >= 0;
[L11217]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L11218]              assume !revert && gas >= 0;
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND TRUE   choice == 21
[L11070]              gas := gas - 21000;
[L11071]  COND TRUE   gas >= 0
[L11072]              assume value_s1040 >= 0 && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11073]              assume msgvalue_MSG == 0;
[L11074]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1040 && value_s1040 <= _balances_ERC20[this][msgsender_MSG]) && value_s1040 >= 0) && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1040] >= 0) && _balances_ERC20[this][to_s1040] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ERC20Pausable0 := true;
[L2]                  call_transfer_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2158]               havoc __exception;
[L2159]               revert := false;
[L2160]   COND TRUE   __exception
[L2161]               __tmp__Balance := Balance;
[L2162]               __tmp__DType := DType;
[L2163]               __tmp__Alloc := Alloc;
[L2164]               __tmp__balance_ADDR := balance_ADDR;
[L2165]               __tmp__M_Ref_int := M_Ref_int;
[L2166]               __tmp__sum__balances0 := sum__balances0;
[L2167]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2168]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L2169]               __tmp__sum__allowances1 := sum__allowances1;
[L2170]               __tmp__M_Ref_bool := M_Ref_bool;
[L2171]               __tmp__sum := sum;
[L2172]               __tmp__Length := Length;
[L2173]               __tmp__now := now;
[L2174]               __tmp___owner_Ownable := _owner_Ownable;
[L2175]               __tmp___balances_ERC20 := _balances_ERC20;
[L2176]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L2177]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2178]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2179]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2180]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2181]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2182]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2183]               __tmp___paused_Pausable := _paused_Pausable;
[L2184]               __tmp___minters_MinterRole := _minters_MinterRole;
[L2185]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6355]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9495]   COND FALSE  !(!!__tmp___paused_Pausable[this])
[L6355]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6356]   COND FALSE  !(revert)
[L6359]   COND TRUE   __tmp__DType[this] == Wafl
[L6360]   CALL        call __var_26 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L4943]   COND TRUE   __tmp__DType[this] == Wafl
[L4944]   CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s364, amount_s364);
[L5385]               __var_7 := null;
[L5386]   COND TRUE   !(sender_s544 != null)
[L5387]               revert := true;
[L4944]   RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s364, amount_s364);
[L4945]   COND TRUE   revert
[L6360]   RET         call __var_26 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6361]   COND TRUE   revert
[L2185]   RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2186]               assume revert || gas < 0;
[L11074]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L11221]  RET         call CorralChoice_Wafl(this);

Loop:
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND TRUE   choice == 21
[L11070]              gas := gas - 21000;
[L11071]  COND TRUE   gas >= 0
[L11072]              assume value_s1040 >= 0 && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11073]              assume msgvalue_MSG == 0;
[L11074]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1040 && value_s1040 <= _balances_ERC20[this][msgsender_MSG]) && value_s1040 >= 0) && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1040] >= 0) && _balances_ERC20[this][to_s1040] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ERC20Pausable0 := true;
[L2]                  call_transfer_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2158]               havoc __exception;
[L2159]               revert := false;
[L2160]   COND TRUE   __exception
[L2161]               __tmp__Balance := Balance;
[L2162]               __tmp__DType := DType;
[L2163]               __tmp__Alloc := Alloc;
[L2164]               __tmp__balance_ADDR := balance_ADDR;
[L2165]               __tmp__M_Ref_int := M_Ref_int;
[L2166]               __tmp__sum__balances0 := sum__balances0;
[L2167]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2168]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L2169]               __tmp__sum__allowances1 := sum__allowances1;
[L2170]               __tmp__M_Ref_bool := M_Ref_bool;
[L2171]               __tmp__sum := sum;
[L2172]               __tmp__Length := Length;
[L2173]               __tmp__now := now;
[L2174]               __tmp___owner_Ownable := _owner_Ownable;
[L2175]               __tmp___balances_ERC20 := _balances_ERC20;
[L2176]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L2177]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2178]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2179]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2180]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2181]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2182]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2183]               __tmp___paused_Pausable := _paused_Pausable;
[L2184]               __tmp___minters_MinterRole := _minters_MinterRole;
[L2185]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6355]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9495]   COND FALSE  !(!!__tmp___paused_Pausable[this])
[L6355]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6356]   COND FALSE  !(revert)
[L6359]   COND TRUE   __tmp__DType[this] == Wafl
[L6360]   CALL        call __var_26 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L4943]   COND TRUE   __tmp__DType[this] == Wafl
[L4944]   CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s364, amount_s364);
[L5385]               __var_7 := null;
[L5386]   COND TRUE   !(sender_s544 != null)
[L5387]               revert := true;
[L4944]   RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s364, amount_s364);
[L4945]   COND TRUE   revert
[L6360]   RET         call __var_26 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6361]   COND TRUE   revert
[L2185]   RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2186]               assume revert || gas < 0;
[L11074]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L11221]  RET         call CorralChoice_Wafl(this);

[2020-11-25 08:43:43,573 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:43:43,573 INFO  L82        PathProgramCache]: Analyzing trace with hash -606779645, now seen corresponding path program 1 times
[2020-11-25 08:43:43,574 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:43:43,584 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:43:43,760 INFO  L134       CoverageAnalysis]: Checked inductivity of 991 backedges. 6 proven. 23 refuted. 0 times theorem prover too weak. 962 trivial. 0 not checked.
[2020-11-25 08:43:43,760 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 08:43:43,760 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [8] total 8
[2020-11-25 08:43:43,760 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:43:43,761 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 08:43:43,761 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 08:43:43,761 INFO  L87              Difference]: Start difference. First operand 9363 states and 11060 transitions. cyclomatic complexity: 1701 Second operand 8 states.
[2020-11-25 08:43:43,967 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:43:43,968 INFO  L93              Difference]: Finished difference Result 9403 states and 11107 transitions.
[2020-11-25 08:43:43,968 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 08:43:43,968 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9403 states and 11107 transitions.
[2020-11-25 08:43:43,986 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 16
[2020-11-25 08:43:44,003 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9403 states to 9370 states and 11067 transitions.
[2020-11-25 08:43:44,003 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2597
[2020-11-25 08:43:44,004 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2597
[2020-11-25 08:43:44,005 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9370 states and 11067 transitions.
[2020-11-25 08:43:44,010 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:43:44,010 INFO  L728         BuchiCegarLoop]: Abstraction has 9370 states and 11067 transitions.
[2020-11-25 08:43:44,014 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9370 states and 11067 transitions.
[2020-11-25 08:43:44,063 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9370 to 9357.
[2020-11-25 08:43:44,063 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9357 states.
[2020-11-25 08:43:44,074 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9357 states to 9357 states and 11052 transitions.
[2020-11-25 08:43:44,075 INFO  L751         BuchiCegarLoop]: Abstraction has 9357 states and 11052 transitions.
[2020-11-25 08:43:44,075 INFO  L631         BuchiCegarLoop]: Abstraction has 9357 states and 11052 transitions.
[2020-11-25 08:43:44,075 INFO  L445         BuchiCegarLoop]: ======== Iteration 15============
[2020-11-25 08:43:44,075 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9357 states and 11052 transitions.
[2020-11-25 08:43:44,085 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 16
[2020-11-25 08:43:44,086 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:43:44,086 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:43:44,087 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:43:44,087 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_ERC20Pausable0 := false;
[L2]                  call_transfer_ERC20Pausable0 := false;
[L2]      CALL        call main();
[L11211]              assume null == 0;
[L11212]  CALL        call this := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L11212]  RET         call this := FreshRefGenerator__success();
[L11213]              assume now >= 0;
[L11214]              assume DType[this] == Wafl;
[L11215]              assume msgvalue_MSG == 0;
[L11216]              gas := gas - 53000;
[L11217]  CALL        call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L3134]               havoc __exception;
[L3135]               revert := false;
[L3136]   COND FALSE  !(__exception)
[L3164]   CALL        call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L7163]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L7163]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7164]   COND FALSE  !(revert)
[L7167]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L7167]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7168]   COND FALSE  !(revert)
[L7171]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L5753]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L5753]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]   COND FALSE  !(revert)
[L5757]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5728]               assume msgsender_MSG != null;
[L5729]               Balance[this] := 0;
[L5730]               _name_ERC20Detailed[this] := -1545721152;
[L5731]               _symbol_ERC20Detailed[this] := -1545721152;
[L5732]               _decimals_ERC20Detailed[this] := 0;
[L5734]               _name_ERC20Detailed[this] := name_s731;
[L5735]               _symbol_ERC20Detailed[this] := symbol_s731;
[L5736]               _decimals_ERC20Detailed[this] := decimals_s731;
[L5757]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5758]   COND FALSE  !(revert)
[L7171]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L7172]   COND FALSE  !(revert)
[L7175]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L7175]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7176]   COND FALSE  !(revert)
[L7179]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L7179]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7180]   COND FALSE  !(revert)
[L7183]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6329]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6329]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6330]   COND FALSE  !(revert)
[L6333]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6333]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6334]   COND FALSE  !(revert)
[L6337]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND FALSE  !(DType[this] == Wafl)
[L5967]   COND FALSE  !(DType[this] == ERC20Pausable)
[L5972]   COND TRUE   DType[this] == Pausable
[L5973]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5973]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5974]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6337]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   COND FALSE  !(revert)
[L6341]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND FALSE  !(DType[this] == Wafl)
[L5967]   COND FALSE  !(DType[this] == ERC20Pausable)
[L5972]   COND TRUE   DType[this] == Pausable
[L5973]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5973]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5974]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L6341]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6342]   COND FALSE  !(revert)
[L6345]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6298]               assume msgsender_MSG != null;
[L6299]               Balance[this] := 0;
[L6345]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6346]   COND FALSE  !(revert)
[L7183]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7184]   COND FALSE  !(revert)
[L7187]   CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6973]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6974]   COND FALSE  !(revert)
[L6977]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6977]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6978]   COND FALSE  !(revert)
[L6981]   CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6950]               assume msgsender_MSG != null;
[L6951]               Balance[this] := 0;
[L6981]   RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6982]   COND FALSE  !(revert)
[L7187]   RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7188]   COND FALSE  !(revert)
[L7191]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND TRUE   DType[this] == Wafl
[L6648]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6648]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6649]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L7191]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7192]   COND FALSE  !(revert)
[L7195]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6875]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6875]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6876]   COND FALSE  !(revert)
[L6879]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6879]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6880]   COND FALSE  !(revert)
[L6883]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND TRUE   DType[this] == Wafl
[L6648]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6648]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6649]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L6883]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6884]   COND FALSE  !(revert)
[L6887]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6848]               assume msgsender_MSG != null;
[L6849]               Balance[this] := 0;
[L6887]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6888]   COND FALSE  !(revert)
[L7195]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L7196]   COND FALSE  !(revert)
[L7199]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4717]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4699]               assume msgsender_MSG != null;
[L4700]               Balance[this] := 0;
[L4701]               _owner_Ownable[this] := null;
[L4703]               _owner_Ownable[this] := msgsender_MSG;
[L4704]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L4717]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4718]   COND FALSE  !(revert)
[L7199]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7200]   COND FALSE  !(revert)
[L7203]   CALL        call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7087]               assume msgsender_MSG != null;
[L7088]               Balance[this] := 0;
[L7090]   COND TRUE   DType[this] == Wafl
[L7091]   CALL        call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L5795]               __ret_0_ := _decimals_ERC20Detailed[this];
[L7091]   RET         call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L7092]   COND FALSE  !(revert)
[L7098]               __var_39 := __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7099]   COND TRUE   DType[this] == Wafl
[L7100]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5473]               __var_11 := null;
[L5474]   COND FALSE  !(!(account_s587 != null))
[L5478]   CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5478]   RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L5479]   COND FALSE  !(revert)
[L5482]               _totalSupply_ERC20[this] := __var_12;
[L5483]   CALL        call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5483]   RET         call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L5484]   COND FALSE  !(revert)
[L5487]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s587];
[L5488]               _balances_ERC20[this][account_s587] := __var_13;
[L5489]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s587];
[L5490]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7100]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7101]   COND FALSE  !(revert)
[L7203]   RET         call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7204]   COND FALSE  !(revert)
[L3164]   RET         call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L3165]               assume !revert && gas >= 0;
[L11217]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L11218]              assume !revert && gas >= 0;
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND TRUE   choice == 21
[L11070]              gas := gas - 21000;
[L11071]  COND TRUE   gas >= 0
[L11072]              assume value_s1040 >= 0 && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11073]              assume msgvalue_MSG == 0;
[L11074]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1040 && value_s1040 <= _balances_ERC20[this][msgsender_MSG]) && value_s1040 >= 0) && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1040] >= 0) && _balances_ERC20[this][to_s1040] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ERC20Pausable0 := true;
[L2]                  call_transfer_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2158]               havoc __exception;
[L2159]               revert := false;
[L2160]   COND TRUE   __exception
[L2161]               __tmp__Balance := Balance;
[L2162]               __tmp__DType := DType;
[L2163]               __tmp__Alloc := Alloc;
[L2164]               __tmp__balance_ADDR := balance_ADDR;
[L2165]               __tmp__M_Ref_int := M_Ref_int;
[L2166]               __tmp__sum__balances0 := sum__balances0;
[L2167]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2168]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L2169]               __tmp__sum__allowances1 := sum__allowances1;
[L2170]               __tmp__M_Ref_bool := M_Ref_bool;
[L2171]               __tmp__sum := sum;
[L2172]               __tmp__Length := Length;
[L2173]               __tmp__now := now;
[L2174]               __tmp___owner_Ownable := _owner_Ownable;
[L2175]               __tmp___balances_ERC20 := _balances_ERC20;
[L2176]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L2177]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2178]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2179]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2180]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2181]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2182]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2183]               __tmp___paused_Pausable := _paused_Pausable;
[L2184]               __tmp___minters_MinterRole := _minters_MinterRole;
[L2185]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6355]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9495]   COND FALSE  !(!!__tmp___paused_Pausable[this])
[L6355]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6356]   COND FALSE  !(revert)
[L6359]   COND TRUE   __tmp__DType[this] == Wafl
[L6360]   CALL        call __var_26 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L4943]   COND TRUE   __tmp__DType[this] == Wafl
[L4944]   CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s364, amount_s364);
[L5385]               __var_7 := null;
[L5386]   COND TRUE   !(sender_s544 != null)
[L5387]               revert := true;
[L4944]   RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s364, amount_s364);
[L4945]   COND TRUE   revert
[L6360]   RET         call __var_26 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6361]   COND TRUE   revert
[L2185]   RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2186]               assume revert || gas < 0;
[L11074]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L11221]  RET         call CorralChoice_Wafl(this);

Loop:
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND TRUE   choice == 21
[L11070]              gas := gas - 21000;
[L11071]  COND TRUE   gas >= 0
[L11072]              assume value_s1040 >= 0 && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11073]              assume msgvalue_MSG == 0;
[L11074]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1040 && value_s1040 <= _balances_ERC20[this][msgsender_MSG]) && value_s1040 >= 0) && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1040] >= 0) && _balances_ERC20[this][to_s1040] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ERC20Pausable0 := true;
[L2]                  call_transfer_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2158]               havoc __exception;
[L2159]               revert := false;
[L2160]   COND TRUE   __exception
[L2161]               __tmp__Balance := Balance;
[L2162]               __tmp__DType := DType;
[L2163]               __tmp__Alloc := Alloc;
[L2164]               __tmp__balance_ADDR := balance_ADDR;
[L2165]               __tmp__M_Ref_int := M_Ref_int;
[L2166]               __tmp__sum__balances0 := sum__balances0;
[L2167]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2168]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L2169]               __tmp__sum__allowances1 := sum__allowances1;
[L2170]               __tmp__M_Ref_bool := M_Ref_bool;
[L2171]               __tmp__sum := sum;
[L2172]               __tmp__Length := Length;
[L2173]               __tmp__now := now;
[L2174]               __tmp___owner_Ownable := _owner_Ownable;
[L2175]               __tmp___balances_ERC20 := _balances_ERC20;
[L2176]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L2177]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2178]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2179]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2180]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2181]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2182]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2183]               __tmp___paused_Pausable := _paused_Pausable;
[L2184]               __tmp___minters_MinterRole := _minters_MinterRole;
[L2185]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6355]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9495]   COND FALSE  !(!!__tmp___paused_Pausable[this])
[L6355]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6356]   COND FALSE  !(revert)
[L6359]   COND TRUE   __tmp__DType[this] == Wafl
[L6360]   CALL        call __var_26 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L4943]   COND TRUE   __tmp__DType[this] == Wafl
[L4944]   CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s364, amount_s364);
[L5385]               __var_7 := null;
[L5386]   COND TRUE   !(sender_s544 != null)
[L5387]               revert := true;
[L4944]   RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s364, amount_s364);
[L4945]   COND TRUE   revert
[L6360]   RET         call __var_26 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6361]   COND TRUE   revert
[L2185]   RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2186]               assume revert || gas < 0;
[L11074]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L11221]  RET         call CorralChoice_Wafl(this);

[2020-11-25 08:43:44,092 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:43:44,092 INFO  L82        PathProgramCache]: Analyzing trace with hash -1372815785, now seen corresponding path program 1 times
[2020-11-25 08:43:44,093 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:43:44,106 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:43:44,293 INFO  L134       CoverageAnalysis]: Checked inductivity of 991 backedges. 12 proven. 9 refuted. 0 times theorem prover too weak. 970 trivial. 0 not checked.
[2020-11-25 08:43:44,293 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 08:43:44,294 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [8] total 8
[2020-11-25 08:43:44,294 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:43:44,294 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 08:43:44,294 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 08:43:44,294 INFO  L87              Difference]: Start difference. First operand 9357 states and 11052 transitions. cyclomatic complexity: 1699 Second operand 8 states.
[2020-11-25 08:43:44,486 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:43:44,486 INFO  L93              Difference]: Finished difference Result 9396 states and 11098 transitions.
[2020-11-25 08:43:44,486 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 08:43:44,486 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9396 states and 11098 transitions.
[2020-11-25 08:43:44,515 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 16
[2020-11-25 08:43:44,540 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9396 states to 9363 states and 11058 transitions.
[2020-11-25 08:43:44,540 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2597
[2020-11-25 08:43:44,542 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2597
[2020-11-25 08:43:44,542 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9363 states and 11058 transitions.
[2020-11-25 08:43:44,549 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:43:44,549 INFO  L728         BuchiCegarLoop]: Abstraction has 9363 states and 11058 transitions.
[2020-11-25 08:43:44,555 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9363 states and 11058 transitions.
[2020-11-25 08:43:44,620 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9363 to 9363.
[2020-11-25 08:43:44,620 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9363 states.
[2020-11-25 08:43:44,636 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9363 states to 9363 states and 11058 transitions.
[2020-11-25 08:43:44,636 INFO  L751         BuchiCegarLoop]: Abstraction has 9363 states and 11058 transitions.
[2020-11-25 08:43:44,636 INFO  L631         BuchiCegarLoop]: Abstraction has 9363 states and 11058 transitions.
[2020-11-25 08:43:44,636 INFO  L445         BuchiCegarLoop]: ======== Iteration 16============
[2020-11-25 08:43:44,636 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9363 states and 11058 transitions.
[2020-11-25 08:43:44,651 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 16
[2020-11-25 08:43:44,651 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:43:44,651 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:43:44,653 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:43:44,653 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_ERC20Pausable0 := false;
[L2]                  call_transfer_ERC20Pausable0 := false;
[L2]      CALL        call main();
[L11211]              assume null == 0;
[L11212]  CALL        call this := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L11212]  RET         call this := FreshRefGenerator__success();
[L11213]              assume now >= 0;
[L11214]              assume DType[this] == Wafl;
[L11215]              assume msgvalue_MSG == 0;
[L11216]              gas := gas - 53000;
[L11217]  CALL        call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L3134]               havoc __exception;
[L3135]               revert := false;
[L3136]   COND FALSE  !(__exception)
[L3164]   CALL        call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L7163]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L7163]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7164]   COND FALSE  !(revert)
[L7167]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L7167]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7168]   COND FALSE  !(revert)
[L7171]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L5753]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L5753]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]   COND FALSE  !(revert)
[L5757]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5728]               assume msgsender_MSG != null;
[L5729]               Balance[this] := 0;
[L5730]               _name_ERC20Detailed[this] := -1545721152;
[L5731]               _symbol_ERC20Detailed[this] := -1545721152;
[L5732]               _decimals_ERC20Detailed[this] := 0;
[L5734]               _name_ERC20Detailed[this] := name_s731;
[L5735]               _symbol_ERC20Detailed[this] := symbol_s731;
[L5736]               _decimals_ERC20Detailed[this] := decimals_s731;
[L5757]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5758]   COND FALSE  !(revert)
[L7171]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L7172]   COND FALSE  !(revert)
[L7175]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L7175]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7176]   COND FALSE  !(revert)
[L7179]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L7179]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7180]   COND FALSE  !(revert)
[L7183]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6329]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6329]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6330]   COND FALSE  !(revert)
[L6333]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6333]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6334]   COND FALSE  !(revert)
[L6337]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND FALSE  !(DType[this] == Wafl)
[L5967]   COND FALSE  !(DType[this] == ERC20Pausable)
[L5972]   COND FALSE  !(DType[this] == Pausable)
[L5977]   COND TRUE   DType[this] == PauserRole
[L5978]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5978]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5979]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6337]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   COND FALSE  !(revert)
[L6341]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND FALSE  !(DType[this] == Wafl)
[L5967]   COND FALSE  !(DType[this] == ERC20Pausable)
[L5972]   COND FALSE  !(DType[this] == Pausable)
[L5977]   COND TRUE   DType[this] == PauserRole
[L5978]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5978]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5979]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L6341]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6342]   COND FALSE  !(revert)
[L6345]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6298]               assume msgsender_MSG != null;
[L6299]               Balance[this] := 0;
[L6345]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6346]   COND FALSE  !(revert)
[L7183]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7184]   COND FALSE  !(revert)
[L7187]   CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6973]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6974]   COND FALSE  !(revert)
[L6977]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6977]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6978]   COND FALSE  !(revert)
[L6981]   CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6950]               assume msgsender_MSG != null;
[L6951]               Balance[this] := 0;
[L6981]   RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6982]   COND FALSE  !(revert)
[L7187]   RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7188]   COND FALSE  !(revert)
[L7191]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND TRUE   DType[this] == Wafl
[L6648]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6648]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6649]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L7191]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7192]   COND FALSE  !(revert)
[L7195]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6875]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6875]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6876]   COND FALSE  !(revert)
[L6879]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6879]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6880]   COND FALSE  !(revert)
[L6883]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND FALSE  !(DType[this] == Wafl)
[L6652]   COND FALSE  !(DType[this] == ERC20Mintable)
[L6657]   COND TRUE   DType[this] == MinterRole
[L6658]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6658]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6659]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L6883]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6884]   COND FALSE  !(revert)
[L6887]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6848]               assume msgsender_MSG != null;
[L6849]               Balance[this] := 0;
[L6887]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6888]   COND FALSE  !(revert)
[L7195]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L7196]   COND FALSE  !(revert)
[L7199]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4717]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4699]               assume msgsender_MSG != null;
[L4700]               Balance[this] := 0;
[L4701]               _owner_Ownable[this] := null;
[L4703]               _owner_Ownable[this] := msgsender_MSG;
[L4704]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L4717]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4718]   COND FALSE  !(revert)
[L7199]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7200]   COND FALSE  !(revert)
[L7203]   CALL        call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7087]               assume msgsender_MSG != null;
[L7088]               Balance[this] := 0;
[L7090]   COND TRUE   DType[this] == Wafl
[L7091]   CALL        call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L5795]               __ret_0_ := _decimals_ERC20Detailed[this];
[L7091]   RET         call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L7092]   COND FALSE  !(revert)
[L7098]               __var_39 := __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7099]   COND TRUE   DType[this] == Wafl
[L7100]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5473]               __var_11 := null;
[L5474]   COND FALSE  !(!(account_s587 != null))
[L5478]   CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5478]   RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L5479]   COND FALSE  !(revert)
[L5482]               _totalSupply_ERC20[this] := __var_12;
[L5483]   CALL        call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5483]   RET         call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L5484]   COND FALSE  !(revert)
[L5487]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s587];
[L5488]               _balances_ERC20[this][account_s587] := __var_13;
[L5489]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s587];
[L5490]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7100]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7101]   COND FALSE  !(revert)
[L7203]   RET         call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7204]   COND FALSE  !(revert)
[L3164]   RET         call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L3165]               assume !revert && gas >= 0;
[L11217]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L11218]              assume !revert && gas >= 0;
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND TRUE   choice == 21
[L11070]              gas := gas - 21000;
[L11071]  COND TRUE   gas >= 0
[L11072]              assume value_s1040 >= 0 && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11073]              assume msgvalue_MSG == 0;
[L11074]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1040 && value_s1040 <= _balances_ERC20[this][msgsender_MSG]) && value_s1040 >= 0) && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1040] >= 0) && _balances_ERC20[this][to_s1040] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ERC20Pausable0 := true;
[L2]                  call_transfer_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2158]               havoc __exception;
[L2159]               revert := false;
[L2160]   COND TRUE   __exception
[L2161]               __tmp__Balance := Balance;
[L2162]               __tmp__DType := DType;
[L2163]               __tmp__Alloc := Alloc;
[L2164]               __tmp__balance_ADDR := balance_ADDR;
[L2165]               __tmp__M_Ref_int := M_Ref_int;
[L2166]               __tmp__sum__balances0 := sum__balances0;
[L2167]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2168]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L2169]               __tmp__sum__allowances1 := sum__allowances1;
[L2170]               __tmp__M_Ref_bool := M_Ref_bool;
[L2171]               __tmp__sum := sum;
[L2172]               __tmp__Length := Length;
[L2173]               __tmp__now := now;
[L2174]               __tmp___owner_Ownable := _owner_Ownable;
[L2175]               __tmp___balances_ERC20 := _balances_ERC20;
[L2176]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L2177]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2178]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2179]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2180]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2181]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2182]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2183]               __tmp___paused_Pausable := _paused_Pausable;
[L2184]               __tmp___minters_MinterRole := _minters_MinterRole;
[L2185]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6355]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9495]   COND FALSE  !(!!__tmp___paused_Pausable[this])
[L6355]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6356]   COND FALSE  !(revert)
[L6359]   COND TRUE   __tmp__DType[this] == Wafl
[L6360]   CALL        call __var_26 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L4943]   COND TRUE   __tmp__DType[this] == Wafl
[L4944]   CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s364, amount_s364);
[L5385]               __var_7 := null;
[L5386]   COND TRUE   !(sender_s544 != null)
[L5387]               revert := true;
[L4944]   RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s364, amount_s364);
[L4945]   COND TRUE   revert
[L6360]   RET         call __var_26 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6361]   COND TRUE   revert
[L2185]   RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2186]               assume revert || gas < 0;
[L11074]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L11221]  RET         call CorralChoice_Wafl(this);

Loop:
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND TRUE   choice == 21
[L11070]              gas := gas - 21000;
[L11071]  COND TRUE   gas >= 0
[L11072]              assume value_s1040 >= 0 && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11073]              assume msgvalue_MSG == 0;
[L11074]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1040 && value_s1040 <= _balances_ERC20[this][msgsender_MSG]) && value_s1040 >= 0) && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1040] >= 0) && _balances_ERC20[this][to_s1040] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ERC20Pausable0 := true;
[L2]                  call_transfer_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2158]               havoc __exception;
[L2159]               revert := false;
[L2160]   COND TRUE   __exception
[L2161]               __tmp__Balance := Balance;
[L2162]               __tmp__DType := DType;
[L2163]               __tmp__Alloc := Alloc;
[L2164]               __tmp__balance_ADDR := balance_ADDR;
[L2165]               __tmp__M_Ref_int := M_Ref_int;
[L2166]               __tmp__sum__balances0 := sum__balances0;
[L2167]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2168]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L2169]               __tmp__sum__allowances1 := sum__allowances1;
[L2170]               __tmp__M_Ref_bool := M_Ref_bool;
[L2171]               __tmp__sum := sum;
[L2172]               __tmp__Length := Length;
[L2173]               __tmp__now := now;
[L2174]               __tmp___owner_Ownable := _owner_Ownable;
[L2175]               __tmp___balances_ERC20 := _balances_ERC20;
[L2176]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L2177]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2178]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2179]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2180]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2181]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2182]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2183]               __tmp___paused_Pausable := _paused_Pausable;
[L2184]               __tmp___minters_MinterRole := _minters_MinterRole;
[L2185]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6355]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9495]   COND FALSE  !(!!__tmp___paused_Pausable[this])
[L6355]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6356]   COND FALSE  !(revert)
[L6359]   COND TRUE   __tmp__DType[this] == Wafl
[L6360]   CALL        call __var_26 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L4943]   COND TRUE   __tmp__DType[this] == Wafl
[L4944]   CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s364, amount_s364);
[L5385]               __var_7 := null;
[L5386]   COND TRUE   !(sender_s544 != null)
[L5387]               revert := true;
[L4944]   RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s364, amount_s364);
[L4945]   COND TRUE   revert
[L6360]   RET         call __var_26 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6361]   COND TRUE   revert
[L2185]   RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2186]               assume revert || gas < 0;
[L11074]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L11221]  RET         call CorralChoice_Wafl(this);

[2020-11-25 08:43:44,660 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:43:44,660 INFO  L82        PathProgramCache]: Analyzing trace with hash -2002440287, now seen corresponding path program 1 times
[2020-11-25 08:43:44,661 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:43:44,676 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:43:44,844 INFO  L134       CoverageAnalysis]: Checked inductivity of 988 backedges. 12 proven. 12 refuted. 0 times theorem prover too weak. 964 trivial. 0 not checked.
[2020-11-25 08:43:44,844 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 08:43:44,844 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [8] total 8
[2020-11-25 08:43:44,845 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:43:44,845 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 08:43:44,845 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 08:43:44,845 INFO  L87              Difference]: Start difference. First operand 9363 states and 11058 transitions. cyclomatic complexity: 1699 Second operand 8 states.
[2020-11-25 08:43:45,029 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:43:45,029 INFO  L93              Difference]: Finished difference Result 9396 states and 11097 transitions.
[2020-11-25 08:43:45,029 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 08:43:45,029 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9396 states and 11097 transitions.
[2020-11-25 08:43:45,047 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 16
[2020-11-25 08:43:45,064 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9396 states to 9363 states and 11057 transitions.
[2020-11-25 08:43:45,064 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2597
[2020-11-25 08:43:45,065 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2597
[2020-11-25 08:43:45,065 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9363 states and 11057 transitions.
[2020-11-25 08:43:45,070 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:43:45,070 INFO  L728         BuchiCegarLoop]: Abstraction has 9363 states and 11057 transitions.
[2020-11-25 08:43:45,074 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9363 states and 11057 transitions.
[2020-11-25 08:43:45,118 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9363 to 9357.
[2020-11-25 08:43:45,118 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9357 states.
[2020-11-25 08:43:45,129 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9357 states to 9357 states and 11051 transitions.
[2020-11-25 08:43:45,129 INFO  L751         BuchiCegarLoop]: Abstraction has 9357 states and 11051 transitions.
[2020-11-25 08:43:45,129 INFO  L631         BuchiCegarLoop]: Abstraction has 9357 states and 11051 transitions.
[2020-11-25 08:43:45,129 INFO  L445         BuchiCegarLoop]: ======== Iteration 17============
[2020-11-25 08:43:45,129 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9357 states and 11051 transitions.
[2020-11-25 08:43:45,139 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 16
[2020-11-25 08:43:45,139 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:43:45,139 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:43:45,140 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:43:45,141 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_ERC20Pausable0 := false;
[L2]                  call_transfer_ERC20Pausable0 := false;
[L2]      CALL        call main();
[L11211]              assume null == 0;
[L11212]  CALL        call this := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L11212]  RET         call this := FreshRefGenerator__success();
[L11213]              assume now >= 0;
[L11214]              assume DType[this] == Wafl;
[L11215]              assume msgvalue_MSG == 0;
[L11216]              gas := gas - 53000;
[L11217]  CALL        call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L3134]               havoc __exception;
[L3135]               revert := false;
[L3136]   COND FALSE  !(__exception)
[L3164]   CALL        call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L7163]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L7163]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7164]   COND FALSE  !(revert)
[L7167]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L7167]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7168]   COND FALSE  !(revert)
[L7171]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L5753]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L5753]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]   COND FALSE  !(revert)
[L5757]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5728]               assume msgsender_MSG != null;
[L5729]               Balance[this] := 0;
[L5730]               _name_ERC20Detailed[this] := -1545721152;
[L5731]               _symbol_ERC20Detailed[this] := -1545721152;
[L5732]               _decimals_ERC20Detailed[this] := 0;
[L5734]               _name_ERC20Detailed[this] := name_s731;
[L5735]               _symbol_ERC20Detailed[this] := symbol_s731;
[L5736]               _decimals_ERC20Detailed[this] := decimals_s731;
[L5757]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5758]   COND FALSE  !(revert)
[L7171]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L7172]   COND FALSE  !(revert)
[L7175]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L7175]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7176]   COND FALSE  !(revert)
[L7179]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L7179]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7180]   COND FALSE  !(revert)
[L7183]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6329]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6329]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6330]   COND FALSE  !(revert)
[L6333]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6333]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6334]   COND FALSE  !(revert)
[L6337]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6337]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   COND FALSE  !(revert)
[L6341]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L6341]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6342]   COND FALSE  !(revert)
[L6345]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6298]               assume msgsender_MSG != null;
[L6299]               Balance[this] := 0;
[L6345]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6346]   COND FALSE  !(revert)
[L7183]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7184]   COND FALSE  !(revert)
[L7187]   CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6973]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6974]   COND FALSE  !(revert)
[L6977]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6977]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6978]   COND FALSE  !(revert)
[L6981]   CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6950]               assume msgsender_MSG != null;
[L6951]               Balance[this] := 0;
[L6981]   RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6982]   COND FALSE  !(revert)
[L7187]   RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7188]   COND FALSE  !(revert)
[L7191]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND TRUE   DType[this] == Wafl
[L6648]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6648]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6649]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L7191]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7192]   COND FALSE  !(revert)
[L7195]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6875]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6875]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6876]   COND FALSE  !(revert)
[L6879]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6879]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6880]   COND FALSE  !(revert)
[L6883]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND FALSE  !(DType[this] == Wafl)
[L6652]   COND FALSE  !(DType[this] == ERC20Mintable)
[L6657]   COND TRUE   DType[this] == MinterRole
[L6658]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6658]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6659]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L6883]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6884]   COND FALSE  !(revert)
[L6887]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6848]               assume msgsender_MSG != null;
[L6849]               Balance[this] := 0;
[L6887]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6888]   COND FALSE  !(revert)
[L7195]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L7196]   COND FALSE  !(revert)
[L7199]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4717]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4699]               assume msgsender_MSG != null;
[L4700]               Balance[this] := 0;
[L4701]               _owner_Ownable[this] := null;
[L4703]               _owner_Ownable[this] := msgsender_MSG;
[L4704]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L4717]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4718]   COND FALSE  !(revert)
[L7199]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7200]   COND FALSE  !(revert)
[L7203]   CALL        call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7087]               assume msgsender_MSG != null;
[L7088]               Balance[this] := 0;
[L7090]   COND TRUE   DType[this] == Wafl
[L7091]   CALL        call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L5795]               __ret_0_ := _decimals_ERC20Detailed[this];
[L7091]   RET         call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L7092]   COND FALSE  !(revert)
[L7098]               __var_39 := __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7099]   COND TRUE   DType[this] == Wafl
[L7100]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5473]               __var_11 := null;
[L5474]   COND FALSE  !(!(account_s587 != null))
[L5478]   CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5478]   RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L5479]   COND FALSE  !(revert)
[L5482]               _totalSupply_ERC20[this] := __var_12;
[L5483]   CALL        call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5483]   RET         call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L5484]   COND FALSE  !(revert)
[L5487]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s587];
[L5488]               _balances_ERC20[this][account_s587] := __var_13;
[L5489]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s587];
[L5490]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7100]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7101]   COND FALSE  !(revert)
[L7203]   RET         call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7204]   COND FALSE  !(revert)
[L3164]   RET         call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L3165]               assume !revert && gas >= 0;
[L11217]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L11218]              assume !revert && gas >= 0;
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND TRUE   choice == 21
[L11070]              gas := gas - 21000;
[L11071]  COND TRUE   gas >= 0
[L11072]              assume value_s1040 >= 0 && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11073]              assume msgvalue_MSG == 0;
[L11074]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1040 && value_s1040 <= _balances_ERC20[this][msgsender_MSG]) && value_s1040 >= 0) && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1040] >= 0) && _balances_ERC20[this][to_s1040] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ERC20Pausable0 := true;
[L2]                  call_transfer_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2158]               havoc __exception;
[L2159]               revert := false;
[L2160]   COND TRUE   __exception
[L2161]               __tmp__Balance := Balance;
[L2162]               __tmp__DType := DType;
[L2163]               __tmp__Alloc := Alloc;
[L2164]               __tmp__balance_ADDR := balance_ADDR;
[L2165]               __tmp__M_Ref_int := M_Ref_int;
[L2166]               __tmp__sum__balances0 := sum__balances0;
[L2167]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2168]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L2169]               __tmp__sum__allowances1 := sum__allowances1;
[L2170]               __tmp__M_Ref_bool := M_Ref_bool;
[L2171]               __tmp__sum := sum;
[L2172]               __tmp__Length := Length;
[L2173]               __tmp__now := now;
[L2174]               __tmp___owner_Ownable := _owner_Ownable;
[L2175]               __tmp___balances_ERC20 := _balances_ERC20;
[L2176]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L2177]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2178]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2179]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2180]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2181]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2182]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2183]               __tmp___paused_Pausable := _paused_Pausable;
[L2184]               __tmp___minters_MinterRole := _minters_MinterRole;
[L2185]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6355]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9495]   COND FALSE  !(!!__tmp___paused_Pausable[this])
[L6355]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6356]   COND FALSE  !(revert)
[L6359]   COND TRUE   __tmp__DType[this] == Wafl
[L6360]   CALL        call __var_26 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L4943]   COND TRUE   __tmp__DType[this] == Wafl
[L4944]   CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s364, amount_s364);
[L5385]               __var_7 := null;
[L5386]   COND TRUE   !(sender_s544 != null)
[L5387]               revert := true;
[L4944]   RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s364, amount_s364);
[L4945]   COND TRUE   revert
[L6360]   RET         call __var_26 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6361]   COND TRUE   revert
[L2185]   RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2186]               assume revert || gas < 0;
[L11074]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L11221]  RET         call CorralChoice_Wafl(this);

Loop:
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND TRUE   choice == 21
[L11070]              gas := gas - 21000;
[L11071]  COND TRUE   gas >= 0
[L11072]              assume value_s1040 >= 0 && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11073]              assume msgvalue_MSG == 0;
[L11074]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1040 && value_s1040 <= _balances_ERC20[this][msgsender_MSG]) && value_s1040 >= 0) && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1040] >= 0) && _balances_ERC20[this][to_s1040] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ERC20Pausable0 := true;
[L2]                  call_transfer_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2158]               havoc __exception;
[L2159]               revert := false;
[L2160]   COND TRUE   __exception
[L2161]               __tmp__Balance := Balance;
[L2162]               __tmp__DType := DType;
[L2163]               __tmp__Alloc := Alloc;
[L2164]               __tmp__balance_ADDR := balance_ADDR;
[L2165]               __tmp__M_Ref_int := M_Ref_int;
[L2166]               __tmp__sum__balances0 := sum__balances0;
[L2167]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2168]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L2169]               __tmp__sum__allowances1 := sum__allowances1;
[L2170]               __tmp__M_Ref_bool := M_Ref_bool;
[L2171]               __tmp__sum := sum;
[L2172]               __tmp__Length := Length;
[L2173]               __tmp__now := now;
[L2174]               __tmp___owner_Ownable := _owner_Ownable;
[L2175]               __tmp___balances_ERC20 := _balances_ERC20;
[L2176]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L2177]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2178]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2179]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2180]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2181]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2182]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2183]               __tmp___paused_Pausable := _paused_Pausable;
[L2184]               __tmp___minters_MinterRole := _minters_MinterRole;
[L2185]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6355]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9495]   COND FALSE  !(!!__tmp___paused_Pausable[this])
[L6355]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6356]   COND FALSE  !(revert)
[L6359]   COND TRUE   __tmp__DType[this] == Wafl
[L6360]   CALL        call __var_26 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L4943]   COND TRUE   __tmp__DType[this] == Wafl
[L4944]   CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s364, amount_s364);
[L5385]               __var_7 := null;
[L5386]   COND TRUE   !(sender_s544 != null)
[L5387]               revert := true;
[L4944]   RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s364, amount_s364);
[L4945]   COND TRUE   revert
[L6360]   RET         call __var_26 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6361]   COND TRUE   revert
[L2185]   RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2186]               assume revert || gas < 0;
[L11074]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L11221]  RET         call CorralChoice_Wafl(this);

[2020-11-25 08:43:45,145 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:43:45,145 INFO  L82        PathProgramCache]: Analyzing trace with hash -788214057, now seen corresponding path program 1 times
[2020-11-25 08:43:45,146 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:43:45,163 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:43:45,369 INFO  L134       CoverageAnalysis]: Checked inductivity of 1001 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1001 trivial. 0 not checked.
[2020-11-25 08:43:45,369 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:43:45,369 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 08:43:45,370 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:43:45,370 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 08:43:45,370 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 08:43:45,370 INFO  L87              Difference]: Start difference. First operand 9357 states and 11051 transitions. cyclomatic complexity: 1698 Second operand 7 states.
[2020-11-25 08:43:45,444 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:43:45,444 INFO  L93              Difference]: Finished difference Result 9405 states and 11117 transitions.
[2020-11-25 08:43:45,445 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 08:43:45,445 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9405 states and 11117 transitions.
[2020-11-25 08:43:45,462 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 16
[2020-11-25 08:43:45,479 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9405 states to 9361 states and 11063 transitions.
[2020-11-25 08:43:45,479 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2599
[2020-11-25 08:43:45,480 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2599
[2020-11-25 08:43:45,480 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9361 states and 11063 transitions.
[2020-11-25 08:43:45,485 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:43:45,485 INFO  L728         BuchiCegarLoop]: Abstraction has 9361 states and 11063 transitions.
[2020-11-25 08:43:45,490 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9361 states and 11063 transitions.
[2020-11-25 08:43:45,532 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9361 to 9361.
[2020-11-25 08:43:45,532 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9361 states.
[2020-11-25 08:43:45,543 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9361 states to 9361 states and 11063 transitions.
[2020-11-25 08:43:45,543 INFO  L751         BuchiCegarLoop]: Abstraction has 9361 states and 11063 transitions.
[2020-11-25 08:43:45,543 INFO  L631         BuchiCegarLoop]: Abstraction has 9361 states and 11063 transitions.
[2020-11-25 08:43:45,543 INFO  L445         BuchiCegarLoop]: ======== Iteration 18============
[2020-11-25 08:43:45,543 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9361 states and 11063 transitions.
[2020-11-25 08:43:45,552 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 16
[2020-11-25 08:43:45,552 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:43:45,552 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:43:45,553 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:43:45,553 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_ERC20Pausable0 := false;
[L2]                  call_transfer_ERC20Pausable0 := false;
[L2]      CALL        call main();
[L11211]              assume null == 0;
[L11212]  CALL        call this := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L11212]  RET         call this := FreshRefGenerator__success();
[L11213]              assume now >= 0;
[L11214]              assume DType[this] == Wafl;
[L11215]              assume msgvalue_MSG == 0;
[L11216]              gas := gas - 53000;
[L11217]  CALL        call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L3134]               havoc __exception;
[L3135]               revert := false;
[L3136]   COND FALSE  !(__exception)
[L3164]   CALL        call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L7163]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L7163]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7164]   COND FALSE  !(revert)
[L7167]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L7167]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7168]   COND FALSE  !(revert)
[L7171]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L5753]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L5753]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]   COND FALSE  !(revert)
[L5757]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5728]               assume msgsender_MSG != null;
[L5729]               Balance[this] := 0;
[L5730]               _name_ERC20Detailed[this] := -1545721152;
[L5731]               _symbol_ERC20Detailed[this] := -1545721152;
[L5732]               _decimals_ERC20Detailed[this] := 0;
[L5734]               _name_ERC20Detailed[this] := name_s731;
[L5735]               _symbol_ERC20Detailed[this] := symbol_s731;
[L5736]               _decimals_ERC20Detailed[this] := decimals_s731;
[L5757]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5758]   COND FALSE  !(revert)
[L7171]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L7172]   COND FALSE  !(revert)
[L7175]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L7175]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7176]   COND FALSE  !(revert)
[L7179]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L7179]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7180]   COND FALSE  !(revert)
[L7183]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6329]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6329]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6330]   COND FALSE  !(revert)
[L6333]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6333]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6334]   COND FALSE  !(revert)
[L6337]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6337]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   COND FALSE  !(revert)
[L6341]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND FALSE  !(DType[this] == Wafl)
[L5967]   COND FALSE  !(DType[this] == ERC20Pausable)
[L5972]   COND TRUE   DType[this] == Pausable
[L5973]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5973]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5974]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L6341]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6342]   COND FALSE  !(revert)
[L6345]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6298]               assume msgsender_MSG != null;
[L6299]               Balance[this] := 0;
[L6345]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6346]   COND FALSE  !(revert)
[L7183]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7184]   COND FALSE  !(revert)
[L7187]   CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6973]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6974]   COND FALSE  !(revert)
[L6977]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6977]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6978]   COND FALSE  !(revert)
[L6981]   CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6950]               assume msgsender_MSG != null;
[L6951]               Balance[this] := 0;
[L6981]   RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6982]   COND FALSE  !(revert)
[L7187]   RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7188]   COND FALSE  !(revert)
[L7191]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND TRUE   DType[this] == Wafl
[L6648]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6648]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6649]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L7191]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7192]   COND FALSE  !(revert)
[L7195]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6875]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6875]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6876]   COND FALSE  !(revert)
[L6879]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6879]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6880]   COND FALSE  !(revert)
[L6883]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND FALSE  !(DType[this] == Wafl)
[L6652]   COND FALSE  !(DType[this] == ERC20Mintable)
[L6657]   COND TRUE   DType[this] == MinterRole
[L6658]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6658]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6659]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L6883]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6884]   COND FALSE  !(revert)
[L6887]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6848]               assume msgsender_MSG != null;
[L6849]               Balance[this] := 0;
[L6887]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6888]   COND FALSE  !(revert)
[L7195]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L7196]   COND FALSE  !(revert)
[L7199]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4717]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4699]               assume msgsender_MSG != null;
[L4700]               Balance[this] := 0;
[L4701]               _owner_Ownable[this] := null;
[L4703]               _owner_Ownable[this] := msgsender_MSG;
[L4704]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L4717]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4718]   COND FALSE  !(revert)
[L7199]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7200]   COND FALSE  !(revert)
[L7203]   CALL        call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7087]               assume msgsender_MSG != null;
[L7088]               Balance[this] := 0;
[L7090]   COND TRUE   DType[this] == Wafl
[L7091]   CALL        call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L5795]               __ret_0_ := _decimals_ERC20Detailed[this];
[L7091]   RET         call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L7092]   COND FALSE  !(revert)
[L7098]               __var_39 := __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7099]   COND TRUE   DType[this] == Wafl
[L7100]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5473]               __var_11 := null;
[L5474]   COND FALSE  !(!(account_s587 != null))
[L5478]   CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5478]   RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L5479]   COND FALSE  !(revert)
[L5482]               _totalSupply_ERC20[this] := __var_12;
[L5483]   CALL        call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5483]   RET         call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L5484]   COND FALSE  !(revert)
[L5487]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s587];
[L5488]               _balances_ERC20[this][account_s587] := __var_13;
[L5489]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s587];
[L5490]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7100]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7101]   COND FALSE  !(revert)
[L7203]   RET         call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7204]   COND FALSE  !(revert)
[L3164]   RET         call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L3165]               assume !revert && gas >= 0;
[L11217]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L11218]              assume !revert && gas >= 0;
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND TRUE   choice == 21
[L11070]              gas := gas - 21000;
[L11071]  COND TRUE   gas >= 0
[L11072]              assume value_s1040 >= 0 && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11073]              assume msgvalue_MSG == 0;
[L11074]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1040 && value_s1040 <= _balances_ERC20[this][msgsender_MSG]) && value_s1040 >= 0) && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1040] >= 0) && _balances_ERC20[this][to_s1040] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ERC20Pausable0 := true;
[L2]                  call_transfer_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2158]               havoc __exception;
[L2159]               revert := false;
[L2160]   COND TRUE   __exception
[L2161]               __tmp__Balance := Balance;
[L2162]               __tmp__DType := DType;
[L2163]               __tmp__Alloc := Alloc;
[L2164]               __tmp__balance_ADDR := balance_ADDR;
[L2165]               __tmp__M_Ref_int := M_Ref_int;
[L2166]               __tmp__sum__balances0 := sum__balances0;
[L2167]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2168]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L2169]               __tmp__sum__allowances1 := sum__allowances1;
[L2170]               __tmp__M_Ref_bool := M_Ref_bool;
[L2171]               __tmp__sum := sum;
[L2172]               __tmp__Length := Length;
[L2173]               __tmp__now := now;
[L2174]               __tmp___owner_Ownable := _owner_Ownable;
[L2175]               __tmp___balances_ERC20 := _balances_ERC20;
[L2176]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L2177]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2178]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2179]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2180]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2181]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2182]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2183]               __tmp___paused_Pausable := _paused_Pausable;
[L2184]               __tmp___minters_MinterRole := _minters_MinterRole;
[L2185]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6355]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9495]   COND FALSE  !(!!__tmp___paused_Pausable[this])
[L6355]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6356]   COND FALSE  !(revert)
[L6359]   COND TRUE   __tmp__DType[this] == Wafl
[L6360]   CALL        call __var_26 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L4943]   COND TRUE   __tmp__DType[this] == Wafl
[L4944]   CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s364, amount_s364);
[L5385]               __var_7 := null;
[L5386]   COND FALSE  !(!(sender_s544 != null))
[L5390]               __var_8 := null;
[L5391]   COND TRUE   !(recipient_s544 != null)
[L5392]               revert := true;
[L4944]   RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s364, amount_s364);
[L4945]   COND TRUE   revert
[L6360]   RET         call __var_26 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6361]   COND TRUE   revert
[L2185]   RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2186]               assume revert || gas < 0;
[L11074]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L11221]  RET         call CorralChoice_Wafl(this);

Loop:
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND TRUE   choice == 21
[L11070]              gas := gas - 21000;
[L11071]  COND TRUE   gas >= 0
[L11072]              assume value_s1040 >= 0 && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11073]              assume msgvalue_MSG == 0;
[L11074]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1040 && value_s1040 <= _balances_ERC20[this][msgsender_MSG]) && value_s1040 >= 0) && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1040] >= 0) && _balances_ERC20[this][to_s1040] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ERC20Pausable0 := true;
[L2]                  call_transfer_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2158]               havoc __exception;
[L2159]               revert := false;
[L2160]   COND TRUE   __exception
[L2161]               __tmp__Balance := Balance;
[L2162]               __tmp__DType := DType;
[L2163]               __tmp__Alloc := Alloc;
[L2164]               __tmp__balance_ADDR := balance_ADDR;
[L2165]               __tmp__M_Ref_int := M_Ref_int;
[L2166]               __tmp__sum__balances0 := sum__balances0;
[L2167]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2168]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L2169]               __tmp__sum__allowances1 := sum__allowances1;
[L2170]               __tmp__M_Ref_bool := M_Ref_bool;
[L2171]               __tmp__sum := sum;
[L2172]               __tmp__Length := Length;
[L2173]               __tmp__now := now;
[L2174]               __tmp___owner_Ownable := _owner_Ownable;
[L2175]               __tmp___balances_ERC20 := _balances_ERC20;
[L2176]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L2177]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2178]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2179]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2180]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2181]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2182]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2183]               __tmp___paused_Pausable := _paused_Pausable;
[L2184]               __tmp___minters_MinterRole := _minters_MinterRole;
[L2185]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6355]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9495]   COND FALSE  !(!!__tmp___paused_Pausable[this])
[L6355]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6356]   COND FALSE  !(revert)
[L6359]   COND TRUE   __tmp__DType[this] == Wafl
[L6360]   CALL        call __var_26 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L4943]   COND TRUE   __tmp__DType[this] == Wafl
[L4944]   CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s364, amount_s364);
[L5385]               __var_7 := null;
[L5386]   COND FALSE  !(!(sender_s544 != null))
[L5390]               __var_8 := null;
[L5391]   COND TRUE   !(recipient_s544 != null)
[L5392]               revert := true;
[L4944]   RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s364, amount_s364);
[L4945]   COND TRUE   revert
[L6360]   RET         call __var_26 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6361]   COND TRUE   revert
[L2185]   RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2186]               assume revert || gas < 0;
[L11074]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L11221]  RET         call CorralChoice_Wafl(this);

[2020-11-25 08:43:45,558 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:43:45,558 INFO  L82        PathProgramCache]: Analyzing trace with hash -799318036, now seen corresponding path program 1 times
[2020-11-25 08:43:45,559 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:43:45,571 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:43:45,741 INFO  L134       CoverageAnalysis]: Checked inductivity of 989 backedges. 25 proven. 0 refuted. 0 times theorem prover too weak. 964 trivial. 0 not checked.
[2020-11-25 08:43:45,741 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:43:45,741 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [9] imperfect sequences [] total 9
[2020-11-25 08:43:45,742 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:43:45,742 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 08:43:45,742 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=15, Invalid=57, Unknown=0, NotChecked=0, Total=72
[2020-11-25 08:43:45,742 INFO  L87              Difference]: Start difference. First operand 9361 states and 11063 transitions. cyclomatic complexity: 1706 Second operand 9 states.
[2020-11-25 08:43:45,945 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:43:45,945 INFO  L93              Difference]: Finished difference Result 9404 states and 11112 transitions.
[2020-11-25 08:43:45,945 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 08:43:45,946 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9404 states and 11112 transitions.
[2020-11-25 08:43:45,962 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 16
[2020-11-25 08:43:45,979 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9404 states to 9357 states and 11057 transitions.
[2020-11-25 08:43:45,979 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2599
[2020-11-25 08:43:45,980 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2599
[2020-11-25 08:43:45,980 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9357 states and 11057 transitions.
[2020-11-25 08:43:45,985 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:43:45,985 INFO  L728         BuchiCegarLoop]: Abstraction has 9357 states and 11057 transitions.
[2020-11-25 08:43:45,990 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9357 states and 11057 transitions.
[2020-11-25 08:43:46,032 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9357 to 9357.
[2020-11-25 08:43:46,032 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9357 states.
[2020-11-25 08:43:46,042 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9357 states to 9357 states and 11057 transitions.
[2020-11-25 08:43:46,043 INFO  L751         BuchiCegarLoop]: Abstraction has 9357 states and 11057 transitions.
[2020-11-25 08:43:46,043 INFO  L631         BuchiCegarLoop]: Abstraction has 9357 states and 11057 transitions.
[2020-11-25 08:43:46,043 INFO  L445         BuchiCegarLoop]: ======== Iteration 19============
[2020-11-25 08:43:46,043 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9357 states and 11057 transitions.
[2020-11-25 08:43:46,052 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 16
[2020-11-25 08:43:46,052 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:43:46,052 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:43:46,053 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:43:46,053 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_ERC20Pausable0 := false;
[L2]                  call_transfer_ERC20Pausable0 := false;
[L2]      CALL        call main();
[L11211]              assume null == 0;
[L11212]  CALL        call this := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L11212]  RET         call this := FreshRefGenerator__success();
[L11213]              assume now >= 0;
[L11214]              assume DType[this] == Wafl;
[L11215]              assume msgvalue_MSG == 0;
[L11216]              gas := gas - 53000;
[L11217]  CALL        call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L3134]               havoc __exception;
[L3135]               revert := false;
[L3136]   COND FALSE  !(__exception)
[L3164]   CALL        call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L7163]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L7163]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7164]   COND FALSE  !(revert)
[L7167]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L7167]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7168]   COND FALSE  !(revert)
[L7171]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L5753]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L5753]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]   COND FALSE  !(revert)
[L5757]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5728]               assume msgsender_MSG != null;
[L5729]               Balance[this] := 0;
[L5730]               _name_ERC20Detailed[this] := -1545721152;
[L5731]               _symbol_ERC20Detailed[this] := -1545721152;
[L5732]               _decimals_ERC20Detailed[this] := 0;
[L5734]               _name_ERC20Detailed[this] := name_s731;
[L5735]               _symbol_ERC20Detailed[this] := symbol_s731;
[L5736]               _decimals_ERC20Detailed[this] := decimals_s731;
[L5757]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5758]   COND FALSE  !(revert)
[L7171]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L7172]   COND FALSE  !(revert)
[L7175]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L7175]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7176]   COND FALSE  !(revert)
[L7179]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L7179]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7180]   COND FALSE  !(revert)
[L7183]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6329]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6329]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6330]   COND FALSE  !(revert)
[L6333]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6333]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6334]   COND FALSE  !(revert)
[L6337]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6337]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   COND FALSE  !(revert)
[L6341]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L6341]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6342]   COND FALSE  !(revert)
[L6345]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6298]               assume msgsender_MSG != null;
[L6299]               Balance[this] := 0;
[L6345]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6346]   COND FALSE  !(revert)
[L7183]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7184]   COND FALSE  !(revert)
[L7187]   CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6973]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6974]   COND FALSE  !(revert)
[L6977]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6977]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6978]   COND FALSE  !(revert)
[L6981]   CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6950]               assume msgsender_MSG != null;
[L6951]               Balance[this] := 0;
[L6981]   RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6982]   COND FALSE  !(revert)
[L7187]   RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7188]   COND FALSE  !(revert)
[L7191]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND TRUE   DType[this] == Wafl
[L6648]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6648]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6649]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L7191]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7192]   COND FALSE  !(revert)
[L7195]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6875]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6875]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6876]   COND FALSE  !(revert)
[L6879]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6879]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6880]   COND FALSE  !(revert)
[L6883]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND FALSE  !(DType[this] == Wafl)
[L6652]   COND TRUE   DType[this] == ERC20Mintable
[L6653]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6653]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6654]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L6883]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6884]   COND FALSE  !(revert)
[L6887]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6848]               assume msgsender_MSG != null;
[L6849]               Balance[this] := 0;
[L6887]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6888]   COND FALSE  !(revert)
[L7195]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L7196]   COND FALSE  !(revert)
[L7199]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4717]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4699]               assume msgsender_MSG != null;
[L4700]               Balance[this] := 0;
[L4701]               _owner_Ownable[this] := null;
[L4703]               _owner_Ownable[this] := msgsender_MSG;
[L4704]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L4717]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4718]   COND FALSE  !(revert)
[L7199]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7200]   COND FALSE  !(revert)
[L7203]   CALL        call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7087]               assume msgsender_MSG != null;
[L7088]               Balance[this] := 0;
[L7090]   COND TRUE   DType[this] == Wafl
[L7091]   CALL        call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L5795]               __ret_0_ := _decimals_ERC20Detailed[this];
[L7091]   RET         call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L7092]   COND FALSE  !(revert)
[L7098]               __var_39 := __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7099]   COND TRUE   DType[this] == Wafl
[L7100]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5473]               __var_11 := null;
[L5474]   COND FALSE  !(!(account_s587 != null))
[L5478]   CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5478]   RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L5479]   COND FALSE  !(revert)
[L5482]               _totalSupply_ERC20[this] := __var_12;
[L5483]   CALL        call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5483]   RET         call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L5484]   COND FALSE  !(revert)
[L5487]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s587];
[L5488]               _balances_ERC20[this][account_s587] := __var_13;
[L5489]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s587];
[L5490]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7100]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7101]   COND FALSE  !(revert)
[L7203]   RET         call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7204]   COND FALSE  !(revert)
[L3164]   RET         call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L3165]               assume !revert && gas >= 0;
[L11217]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L11218]              assume !revert && gas >= 0;
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND TRUE   choice == 21
[L11070]              gas := gas - 21000;
[L11071]  COND TRUE   gas >= 0
[L11072]              assume value_s1040 >= 0 && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11073]              assume msgvalue_MSG == 0;
[L11074]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1040 && value_s1040 <= _balances_ERC20[this][msgsender_MSG]) && value_s1040 >= 0) && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1040] >= 0) && _balances_ERC20[this][to_s1040] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ERC20Pausable0 := true;
[L2]                  call_transfer_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2158]               havoc __exception;
[L2159]               revert := false;
[L2160]   COND TRUE   __exception
[L2161]               __tmp__Balance := Balance;
[L2162]               __tmp__DType := DType;
[L2163]               __tmp__Alloc := Alloc;
[L2164]               __tmp__balance_ADDR := balance_ADDR;
[L2165]               __tmp__M_Ref_int := M_Ref_int;
[L2166]               __tmp__sum__balances0 := sum__balances0;
[L2167]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2168]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L2169]               __tmp__sum__allowances1 := sum__allowances1;
[L2170]               __tmp__M_Ref_bool := M_Ref_bool;
[L2171]               __tmp__sum := sum;
[L2172]               __tmp__Length := Length;
[L2173]               __tmp__now := now;
[L2174]               __tmp___owner_Ownable := _owner_Ownable;
[L2175]               __tmp___balances_ERC20 := _balances_ERC20;
[L2176]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L2177]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2178]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2179]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2180]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2181]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2182]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2183]               __tmp___paused_Pausable := _paused_Pausable;
[L2184]               __tmp___minters_MinterRole := _minters_MinterRole;
[L2185]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6355]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9495]   COND FALSE  !(!!__tmp___paused_Pausable[this])
[L6355]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6356]   COND FALSE  !(revert)
[L6359]   COND TRUE   __tmp__DType[this] == Wafl
[L6360]   CALL        call __var_26 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L4943]   COND TRUE   __tmp__DType[this] == Wafl
[L4944]   CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s364, amount_s364);
[L5385]               __var_7 := null;
[L5386]   COND FALSE  !(!(sender_s544 != null))
[L5390]               __var_8 := null;
[L5391]   COND TRUE   !(recipient_s544 != null)
[L5392]               revert := true;
[L4944]   RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s364, amount_s364);
[L4945]   COND TRUE   revert
[L6360]   RET         call __var_26 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6361]   COND TRUE   revert
[L2185]   RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2186]               assume revert || gas < 0;
[L11074]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L11221]  RET         call CorralChoice_Wafl(this);

Loop:
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND TRUE   choice == 21
[L11070]              gas := gas - 21000;
[L11071]  COND TRUE   gas >= 0
[L11072]              assume value_s1040 >= 0 && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11073]              assume msgvalue_MSG == 0;
[L11074]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1040 && value_s1040 <= _balances_ERC20[this][msgsender_MSG]) && value_s1040 >= 0) && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1040] >= 0) && _balances_ERC20[this][to_s1040] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ERC20Pausable0 := true;
[L2]                  call_transfer_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2158]               havoc __exception;
[L2159]               revert := false;
[L2160]   COND TRUE   __exception
[L2161]               __tmp__Balance := Balance;
[L2162]               __tmp__DType := DType;
[L2163]               __tmp__Alloc := Alloc;
[L2164]               __tmp__balance_ADDR := balance_ADDR;
[L2165]               __tmp__M_Ref_int := M_Ref_int;
[L2166]               __tmp__sum__balances0 := sum__balances0;
[L2167]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2168]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L2169]               __tmp__sum__allowances1 := sum__allowances1;
[L2170]               __tmp__M_Ref_bool := M_Ref_bool;
[L2171]               __tmp__sum := sum;
[L2172]               __tmp__Length := Length;
[L2173]               __tmp__now := now;
[L2174]               __tmp___owner_Ownable := _owner_Ownable;
[L2175]               __tmp___balances_ERC20 := _balances_ERC20;
[L2176]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L2177]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2178]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2179]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2180]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2181]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2182]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2183]               __tmp___paused_Pausable := _paused_Pausable;
[L2184]               __tmp___minters_MinterRole := _minters_MinterRole;
[L2185]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6355]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9495]   COND FALSE  !(!!__tmp___paused_Pausable[this])
[L6355]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6356]   COND FALSE  !(revert)
[L6359]   COND TRUE   __tmp__DType[this] == Wafl
[L6360]   CALL        call __var_26 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L4943]   COND TRUE   __tmp__DType[this] == Wafl
[L4944]   CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s364, amount_s364);
[L5385]               __var_7 := null;
[L5386]   COND FALSE  !(!(sender_s544 != null))
[L5390]               __var_8 := null;
[L5391]   COND TRUE   !(recipient_s544 != null)
[L5392]               revert := true;
[L4944]   RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s364, amount_s364);
[L4945]   COND TRUE   revert
[L6360]   RET         call __var_26 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6361]   COND TRUE   revert
[L2185]   RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2186]               assume revert || gas < 0;
[L11074]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L11221]  RET         call CorralChoice_Wafl(this);

[2020-11-25 08:43:46,057 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:43:46,058 INFO  L82        PathProgramCache]: Analyzing trace with hash -759154720, now seen corresponding path program 1 times
[2020-11-25 08:43:46,058 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:43:46,075 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:43:46,242 INFO  L134       CoverageAnalysis]: Checked inductivity of 1001 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1001 trivial. 0 not checked.
[2020-11-25 08:43:46,242 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:43:46,242 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [8] imperfect sequences [] total 8
[2020-11-25 08:43:46,242 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:43:46,243 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 08:43:46,243 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 08:43:46,243 INFO  L87              Difference]: Start difference. First operand 9357 states and 11057 transitions. cyclomatic complexity: 1704 Second operand 8 states.
[2020-11-25 08:43:46,351 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:43:46,351 INFO  L93              Difference]: Finished difference Result 9527 states and 11267 transitions.
[2020-11-25 08:43:46,351 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 08:43:46,351 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9527 states and 11267 transitions.
[2020-11-25 08:43:46,367 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 16
[2020-11-25 08:43:46,383 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9527 states to 9519 states and 11259 transitions.
[2020-11-25 08:43:46,383 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2647
[2020-11-25 08:43:46,384 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2647
[2020-11-25 08:43:46,384 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9519 states and 11259 transitions.
[2020-11-25 08:43:46,390 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:43:46,390 INFO  L728         BuchiCegarLoop]: Abstraction has 9519 states and 11259 transitions.
[2020-11-25 08:43:46,394 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9519 states and 11259 transitions.
[2020-11-25 08:43:46,437 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9519 to 9491.
[2020-11-25 08:43:46,438 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9491 states.
[2020-11-25 08:43:46,448 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9491 states to 9491 states and 11225 transitions.
[2020-11-25 08:43:46,448 INFO  L751         BuchiCegarLoop]: Abstraction has 9491 states and 11225 transitions.
[2020-11-25 08:43:46,448 INFO  L631         BuchiCegarLoop]: Abstraction has 9491 states and 11225 transitions.
[2020-11-25 08:43:46,448 INFO  L445         BuchiCegarLoop]: ======== Iteration 20============
[2020-11-25 08:43:46,448 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9491 states and 11225 transitions.
[2020-11-25 08:43:46,458 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 16
[2020-11-25 08:43:46,458 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:43:46,458 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:43:46,459 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:43:46,459 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_ERC20Pausable0 := false;
[L2]                  call_transfer_ERC20Pausable0 := false;
[L2]      CALL        call main();
[L11211]              assume null == 0;
[L11212]  CALL        call this := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L11212]  RET         call this := FreshRefGenerator__success();
[L11213]              assume now >= 0;
[L11214]              assume DType[this] == Wafl;
[L11215]              assume msgvalue_MSG == 0;
[L11216]              gas := gas - 53000;
[L11217]  CALL        call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L3134]               havoc __exception;
[L3135]               revert := false;
[L3136]   COND FALSE  !(__exception)
[L3164]   CALL        call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L7163]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L7163]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7164]   COND FALSE  !(revert)
[L7167]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L7167]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7168]   COND FALSE  !(revert)
[L7171]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L5753]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L5753]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]   COND FALSE  !(revert)
[L5757]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5728]               assume msgsender_MSG != null;
[L5729]               Balance[this] := 0;
[L5730]               _name_ERC20Detailed[this] := -1545721152;
[L5731]               _symbol_ERC20Detailed[this] := -1545721152;
[L5732]               _decimals_ERC20Detailed[this] := 0;
[L5734]               _name_ERC20Detailed[this] := name_s731;
[L5735]               _symbol_ERC20Detailed[this] := symbol_s731;
[L5736]               _decimals_ERC20Detailed[this] := decimals_s731;
[L5757]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5758]   COND FALSE  !(revert)
[L7171]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L7172]   COND FALSE  !(revert)
[L7175]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L7175]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7176]   COND FALSE  !(revert)
[L7179]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L7179]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7180]   COND FALSE  !(revert)
[L7183]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6329]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6329]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6330]   COND FALSE  !(revert)
[L6333]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6333]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6334]   COND FALSE  !(revert)
[L6337]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6337]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   COND FALSE  !(revert)
[L6341]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND FALSE  !(DType[this] == Wafl)
[L5967]   COND FALSE  !(DType[this] == ERC20Pausable)
[L5972]   COND FALSE  !(DType[this] == Pausable)
[L5977]   COND TRUE   DType[this] == PauserRole
[L5978]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5978]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5979]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L6341]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6342]   COND FALSE  !(revert)
[L6345]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6298]               assume msgsender_MSG != null;
[L6299]               Balance[this] := 0;
[L6345]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6346]   COND FALSE  !(revert)
[L7183]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7184]   COND FALSE  !(revert)
[L7187]   CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6973]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6974]   COND FALSE  !(revert)
[L6977]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6977]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6978]   COND FALSE  !(revert)
[L6981]   CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6950]               assume msgsender_MSG != null;
[L6951]               Balance[this] := 0;
[L6981]   RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6982]   COND FALSE  !(revert)
[L7187]   RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7188]   COND FALSE  !(revert)
[L7191]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND TRUE   DType[this] == Wafl
[L6648]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6648]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6649]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L7191]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7192]   COND FALSE  !(revert)
[L7195]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6875]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6875]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6876]   COND FALSE  !(revert)
[L6879]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6879]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6880]   COND FALSE  !(revert)
[L6883]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND FALSE  !(DType[this] == Wafl)
[L6652]   COND FALSE  !(DType[this] == ERC20Mintable)
[L6657]   COND TRUE   DType[this] == MinterRole
[L6658]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6658]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6659]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L6883]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6884]   COND FALSE  !(revert)
[L6887]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6848]               assume msgsender_MSG != null;
[L6849]               Balance[this] := 0;
[L6887]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6888]   COND FALSE  !(revert)
[L7195]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L7196]   COND FALSE  !(revert)
[L7199]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4717]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4699]               assume msgsender_MSG != null;
[L4700]               Balance[this] := 0;
[L4701]               _owner_Ownable[this] := null;
[L4703]               _owner_Ownable[this] := msgsender_MSG;
[L4704]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L4717]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4718]   COND FALSE  !(revert)
[L7199]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7200]   COND FALSE  !(revert)
[L7203]   CALL        call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7087]               assume msgsender_MSG != null;
[L7088]               Balance[this] := 0;
[L7090]   COND TRUE   DType[this] == Wafl
[L7091]   CALL        call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L5795]               __ret_0_ := _decimals_ERC20Detailed[this];
[L7091]   RET         call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L7092]   COND FALSE  !(revert)
[L7098]               __var_39 := __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7099]   COND TRUE   DType[this] == Wafl
[L7100]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5473]               __var_11 := null;
[L5474]   COND FALSE  !(!(account_s587 != null))
[L5478]   CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5478]   RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L5479]   COND FALSE  !(revert)
[L5482]               _totalSupply_ERC20[this] := __var_12;
[L5483]   CALL        call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5483]   RET         call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L5484]   COND FALSE  !(revert)
[L5487]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s587];
[L5488]               _balances_ERC20[this][account_s587] := __var_13;
[L5489]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s587];
[L5490]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7100]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7101]   COND FALSE  !(revert)
[L7203]   RET         call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7204]   COND FALSE  !(revert)
[L3164]   RET         call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L3165]               assume !revert && gas >= 0;
[L11217]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L11218]              assume !revert && gas >= 0;
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND TRUE   choice == 21
[L11070]              gas := gas - 21000;
[L11071]  COND TRUE   gas >= 0
[L11072]              assume value_s1040 >= 0 && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11073]              assume msgvalue_MSG == 0;
[L11074]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1040 && value_s1040 <= _balances_ERC20[this][msgsender_MSG]) && value_s1040 >= 0) && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1040] >= 0) && _balances_ERC20[this][to_s1040] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ERC20Pausable0 := true;
[L2]                  call_transfer_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2158]               havoc __exception;
[L2159]               revert := false;
[L2160]   COND FALSE  !(__exception)
[L2188]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6380]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9503]   COND FALSE  !(!!_paused_Pausable[this])
[L6380]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6381]   COND FALSE  !(revert)
[L6384]   COND TRUE   DType[this] == Wafl
[L6385]   CALL        call __var_26 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L4977]   COND TRUE   DType[this] == Wafl
[L4978]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s364, amount_s364);
[L5417]               __var_7 := null;
[L5418]   COND FALSE  !(!(sender_s544 != null))
[L5422]               __var_8 := null;
[L5423]   COND FALSE  !(!(recipient_s544 != null))
[L5427]   CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5427]   RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L5428]   COND FALSE  !(revert)
[L5431]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s544];
[L5432]               _balances_ERC20[this][sender_s544] := __var_9;
[L5433]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s544];
[L5434]   CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5434]   RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L5435]   COND FALSE  !(revert)
[L5438]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s544];
[L5439]               _balances_ERC20[this][recipient_s544] := __var_10;
[L5440]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s544];
[L5441]               assert { :EventEmitted "Transfer_ERC20" } true;
[L4978]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s364, amount_s364);
[L4979]   COND FALSE  !(revert)
[L5005]               __ret_0_ := true;
[L6385]   RET         call __var_26 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6386]   COND FALSE  !(revert)
[L6397]               __ret_0_ := __var_26;
[L2188]   RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2189]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _owner_Ownable[this] == old(_owner_Ownable[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L11074]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L11221]  RET         call CorralChoice_Wafl(this);

Loop:
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND TRUE   choice == 21
[L11070]              gas := gas - 21000;
[L11071]  COND TRUE   gas >= 0
[L11072]              assume value_s1040 >= 0 && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11073]              assume msgvalue_MSG == 0;
[L11074]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1040 && value_s1040 <= _balances_ERC20[this][msgsender_MSG]) && value_s1040 >= 0) && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1040] >= 0) && _balances_ERC20[this][to_s1040] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ERC20Pausable0 := true;
[L2]                  call_transfer_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2158]               havoc __exception;
[L2159]               revert := false;
[L2160]   COND FALSE  !(__exception)
[L2188]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6380]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9503]   COND FALSE  !(!!_paused_Pausable[this])
[L6380]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6381]   COND FALSE  !(revert)
[L6384]   COND TRUE   DType[this] == Wafl
[L6385]   CALL        call __var_26 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L4977]   COND TRUE   DType[this] == Wafl
[L4978]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s364, amount_s364);
[L5417]               __var_7 := null;
[L5418]   COND FALSE  !(!(sender_s544 != null))
[L5422]               __var_8 := null;
[L5423]   COND FALSE  !(!(recipient_s544 != null))
[L5427]   CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5427]   RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L5428]   COND FALSE  !(revert)
[L5431]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s544];
[L5432]               _balances_ERC20[this][sender_s544] := __var_9;
[L5433]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s544];
[L5434]   CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5434]   RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L5435]   COND FALSE  !(revert)
[L5438]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s544];
[L5439]               _balances_ERC20[this][recipient_s544] := __var_10;
[L5440]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s544];
[L5441]               assert { :EventEmitted "Transfer_ERC20" } true;
[L4978]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s364, amount_s364);
[L4979]   COND FALSE  !(revert)
[L5005]               __ret_0_ := true;
[L6385]   RET         call __var_26 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6386]   COND FALSE  !(revert)
[L6397]               __ret_0_ := __var_26;
[L2188]   RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2189]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _owner_Ownable[this] == old(_owner_Ownable[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L11074]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L11221]  RET         call CorralChoice_Wafl(this);

[2020-11-25 08:43:46,463 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:43:46,463 INFO  L82        PathProgramCache]: Analyzing trace with hash -444404156, now seen corresponding path program 1 times
[2020-11-25 08:43:46,464 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:43:46,476 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:43:46,648 INFO  L134       CoverageAnalysis]: Checked inductivity of 989 backedges. 25 proven. 0 refuted. 0 times theorem prover too weak. 964 trivial. 0 not checked.
[2020-11-25 08:43:46,648 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:43:46,648 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [9] imperfect sequences [] total 9
[2020-11-25 08:43:46,648 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:43:46,648 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 08:43:46,648 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=15, Invalid=57, Unknown=0, NotChecked=0, Total=72
[2020-11-25 08:43:46,649 INFO  L87              Difference]: Start difference. First operand 9491 states and 11225 transitions. cyclomatic complexity: 1738 Second operand 9 states.
[2020-11-25 08:43:46,854 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:43:46,855 INFO  L93              Difference]: Finished difference Result 9528 states and 11268 transitions.
[2020-11-25 08:43:46,855 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 08:43:46,855 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9528 states and 11268 transitions.
[2020-11-25 08:43:46,872 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 16
[2020-11-25 08:43:46,888 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9528 states to 9478 states and 11210 transitions.
[2020-11-25 08:43:46,888 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2647
[2020-11-25 08:43:46,889 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2647
[2020-11-25 08:43:46,890 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9478 states and 11210 transitions.
[2020-11-25 08:43:46,895 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:43:46,895 INFO  L728         BuchiCegarLoop]: Abstraction has 9478 states and 11210 transitions.
[2020-11-25 08:43:46,900 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9478 states and 11210 transitions.
[2020-11-25 08:43:46,945 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9478 to 9478.
[2020-11-25 08:43:46,945 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9478 states.
[2020-11-25 08:43:46,955 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9478 states to 9478 states and 11210 transitions.
[2020-11-25 08:43:46,955 INFO  L751         BuchiCegarLoop]: Abstraction has 9478 states and 11210 transitions.
[2020-11-25 08:43:46,955 INFO  L631         BuchiCegarLoop]: Abstraction has 9478 states and 11210 transitions.
[2020-11-25 08:43:46,955 INFO  L445         BuchiCegarLoop]: ======== Iteration 21============
[2020-11-25 08:43:46,955 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9478 states and 11210 transitions.
[2020-11-25 08:43:46,965 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 16
[2020-11-25 08:43:46,965 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:43:46,965 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:43:46,966 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:43:46,966 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_ERC20Pausable0 := false;
[L2]                  call_transfer_ERC20Pausable0 := false;
[L2]      CALL        call main();
[L11211]              assume null == 0;
[L11212]  CALL        call this := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L11212]  RET         call this := FreshRefGenerator__success();
[L11213]              assume now >= 0;
[L11214]              assume DType[this] == Wafl;
[L11215]              assume msgvalue_MSG == 0;
[L11216]              gas := gas - 53000;
[L11217]  CALL        call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L3134]               havoc __exception;
[L3135]               revert := false;
[L3136]   COND FALSE  !(__exception)
[L3164]   CALL        call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L7163]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L7163]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7164]   COND FALSE  !(revert)
[L7167]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L7167]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7168]   COND FALSE  !(revert)
[L7171]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L5753]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L5753]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]   COND FALSE  !(revert)
[L5757]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5728]               assume msgsender_MSG != null;
[L5729]               Balance[this] := 0;
[L5730]               _name_ERC20Detailed[this] := -1545721152;
[L5731]               _symbol_ERC20Detailed[this] := -1545721152;
[L5732]               _decimals_ERC20Detailed[this] := 0;
[L5734]               _name_ERC20Detailed[this] := name_s731;
[L5735]               _symbol_ERC20Detailed[this] := symbol_s731;
[L5736]               _decimals_ERC20Detailed[this] := decimals_s731;
[L5757]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5758]   COND FALSE  !(revert)
[L7171]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L7172]   COND FALSE  !(revert)
[L7175]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L7175]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7176]   COND FALSE  !(revert)
[L7179]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L7179]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7180]   COND FALSE  !(revert)
[L7183]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6329]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6329]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6330]   COND FALSE  !(revert)
[L6333]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6333]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6334]   COND FALSE  !(revert)
[L6337]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6337]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   COND FALSE  !(revert)
[L6341]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L6341]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6342]   COND FALSE  !(revert)
[L6345]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6298]               assume msgsender_MSG != null;
[L6299]               Balance[this] := 0;
[L6345]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6346]   COND FALSE  !(revert)
[L7183]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7184]   COND FALSE  !(revert)
[L7187]   CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6973]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6974]   COND FALSE  !(revert)
[L6977]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6977]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6978]   COND FALSE  !(revert)
[L6981]   CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6950]               assume msgsender_MSG != null;
[L6951]               Balance[this] := 0;
[L6981]   RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6982]   COND FALSE  !(revert)
[L7187]   RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7188]   COND FALSE  !(revert)
[L7191]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND TRUE   DType[this] == Wafl
[L6648]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6648]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6649]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L7191]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7192]   COND FALSE  !(revert)
[L7195]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6875]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6875]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6876]   COND FALSE  !(revert)
[L6879]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6879]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6880]   COND FALSE  !(revert)
[L6883]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND FALSE  !(DType[this] == Wafl)
[L6652]   COND TRUE   DType[this] == ERC20Mintable
[L6653]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6653]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6654]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L6883]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6884]   COND FALSE  !(revert)
[L6887]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6848]               assume msgsender_MSG != null;
[L6849]               Balance[this] := 0;
[L6887]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6888]   COND FALSE  !(revert)
[L7195]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L7196]   COND FALSE  !(revert)
[L7199]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4717]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4699]               assume msgsender_MSG != null;
[L4700]               Balance[this] := 0;
[L4701]               _owner_Ownable[this] := null;
[L4703]               _owner_Ownable[this] := msgsender_MSG;
[L4704]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L4717]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4718]   COND FALSE  !(revert)
[L7199]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7200]   COND FALSE  !(revert)
[L7203]   CALL        call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7087]               assume msgsender_MSG != null;
[L7088]               Balance[this] := 0;
[L7090]   COND TRUE   DType[this] == Wafl
[L7091]   CALL        call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L5795]               __ret_0_ := _decimals_ERC20Detailed[this];
[L7091]   RET         call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L7092]   COND FALSE  !(revert)
[L7098]               __var_39 := __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7099]   COND TRUE   DType[this] == Wafl
[L7100]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5473]               __var_11 := null;
[L5474]   COND FALSE  !(!(account_s587 != null))
[L5478]   CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5478]   RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L5479]   COND FALSE  !(revert)
[L5482]               _totalSupply_ERC20[this] := __var_12;
[L5483]   CALL        call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5483]   RET         call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L5484]   COND FALSE  !(revert)
[L5487]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s587];
[L5488]               _balances_ERC20[this][account_s587] := __var_13;
[L5489]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s587];
[L5490]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7100]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7101]   COND FALSE  !(revert)
[L7203]   RET         call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7204]   COND FALSE  !(revert)
[L3164]   RET         call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L3165]               assume !revert && gas >= 0;
[L11217]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L11218]              assume !revert && gas >= 0;
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND TRUE   choice == 21
[L11070]              gas := gas - 21000;
[L11071]  COND TRUE   gas >= 0
[L11072]              assume value_s1040 >= 0 && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11073]              assume msgvalue_MSG == 0;
[L11074]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1040 && value_s1040 <= _balances_ERC20[this][msgsender_MSG]) && value_s1040 >= 0) && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1040] >= 0) && _balances_ERC20[this][to_s1040] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ERC20Pausable0 := true;
[L2]                  call_transfer_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2158]               havoc __exception;
[L2159]               revert := false;
[L2160]   COND FALSE  !(__exception)
[L2188]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6380]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9503]   COND FALSE  !(!!_paused_Pausable[this])
[L6380]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6381]   COND FALSE  !(revert)
[L6384]   COND TRUE   DType[this] == Wafl
[L6385]   CALL        call __var_26 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L4977]   COND TRUE   DType[this] == Wafl
[L4978]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s364, amount_s364);
[L5417]               __var_7 := null;
[L5418]   COND FALSE  !(!(sender_s544 != null))
[L5422]               __var_8 := null;
[L5423]   COND FALSE  !(!(recipient_s544 != null))
[L5427]   CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5427]   RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L5428]   COND FALSE  !(revert)
[L5431]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s544];
[L5432]               _balances_ERC20[this][sender_s544] := __var_9;
[L5433]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s544];
[L5434]   CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5434]   RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L5435]   COND FALSE  !(revert)
[L5438]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s544];
[L5439]               _balances_ERC20[this][recipient_s544] := __var_10;
[L5440]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s544];
[L5441]               assert { :EventEmitted "Transfer_ERC20" } true;
[L4978]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s364, amount_s364);
[L4979]   COND FALSE  !(revert)
[L5005]               __ret_0_ := true;
[L6385]   RET         call __var_26 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6386]   COND FALSE  !(revert)
[L6397]               __ret_0_ := __var_26;
[L2188]   RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2189]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _owner_Ownable[this] == old(_owner_Ownable[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L11074]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L11221]  RET         call CorralChoice_Wafl(this);

Loop:
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND TRUE   choice == 21
[L11070]              gas := gas - 21000;
[L11071]  COND TRUE   gas >= 0
[L11072]              assume value_s1040 >= 0 && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11073]              assume msgvalue_MSG == 0;
[L11074]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1040 && value_s1040 <= _balances_ERC20[this][msgsender_MSG]) && value_s1040 >= 0) && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1040] >= 0) && _balances_ERC20[this][to_s1040] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ERC20Pausable0 := true;
[L2]                  call_transfer_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2158]               havoc __exception;
[L2159]               revert := false;
[L2160]   COND FALSE  !(__exception)
[L2188]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6380]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9503]   COND FALSE  !(!!_paused_Pausable[this])
[L6380]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6381]   COND FALSE  !(revert)
[L6384]   COND TRUE   DType[this] == Wafl
[L6385]   CALL        call __var_26 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L4977]   COND TRUE   DType[this] == Wafl
[L4978]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s364, amount_s364);
[L5417]               __var_7 := null;
[L5418]   COND FALSE  !(!(sender_s544 != null))
[L5422]               __var_8 := null;
[L5423]   COND FALSE  !(!(recipient_s544 != null))
[L5427]   CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5427]   RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L5428]   COND FALSE  !(revert)
[L5431]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s544];
[L5432]               _balances_ERC20[this][sender_s544] := __var_9;
[L5433]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s544];
[L5434]   CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5434]   RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L5435]   COND FALSE  !(revert)
[L5438]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s544];
[L5439]               _balances_ERC20[this][recipient_s544] := __var_10;
[L5440]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s544];
[L5441]               assert { :EventEmitted "Transfer_ERC20" } true;
[L4978]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s364, amount_s364);
[L4979]   COND FALSE  !(revert)
[L5005]               __ret_0_ := true;
[L6385]   RET         call __var_26 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6386]   COND FALSE  !(revert)
[L6397]               __ret_0_ := __var_26;
[L2188]   RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2189]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _owner_Ownable[this] == old(_owner_Ownable[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L11074]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L11221]  RET         call CorralChoice_Wafl(this);

[2020-11-25 08:43:46,970 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:43:46,971 INFO  L82        PathProgramCache]: Analyzing trace with hash -1139138079, now seen corresponding path program 1 times
[2020-11-25 08:43:46,971 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:43:46,988 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:43:47,162 INFO  L134       CoverageAnalysis]: Checked inductivity of 1001 backedges. 6 proven. 0 refuted. 0 times theorem prover too weak. 995 trivial. 0 not checked.
[2020-11-25 08:43:47,162 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:43:47,162 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [8] imperfect sequences [] total 8
[2020-11-25 08:43:47,163 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:43:47,163 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 08:43:47,163 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 08:43:47,163 INFO  L87              Difference]: Start difference. First operand 9478 states and 11210 transitions. cyclomatic complexity: 1736 Second operand 8 states.
[2020-11-25 08:43:47,338 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:43:47,338 INFO  L93              Difference]: Finished difference Result 9505 states and 11239 transitions.
[2020-11-25 08:43:47,338 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 08:43:47,338 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9505 states and 11239 transitions.
[2020-11-25 08:43:47,355 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 16
[2020-11-25 08:43:47,371 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9505 states to 9474 states and 11204 transitions.
[2020-11-25 08:43:47,372 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2647
[2020-11-25 08:43:47,373 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2647
[2020-11-25 08:43:47,373 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9474 states and 11204 transitions.
[2020-11-25 08:43:47,378 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:43:47,378 INFO  L728         BuchiCegarLoop]: Abstraction has 9474 states and 11204 transitions.
[2020-11-25 08:43:47,382 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9474 states and 11204 transitions.
[2020-11-25 08:43:47,426 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9474 to 9474.
[2020-11-25 08:43:47,426 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9474 states.
[2020-11-25 08:43:47,436 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9474 states to 9474 states and 11204 transitions.
[2020-11-25 08:43:47,436 INFO  L751         BuchiCegarLoop]: Abstraction has 9474 states and 11204 transitions.
[2020-11-25 08:43:47,436 INFO  L631         BuchiCegarLoop]: Abstraction has 9474 states and 11204 transitions.
[2020-11-25 08:43:47,436 INFO  L445         BuchiCegarLoop]: ======== Iteration 22============
[2020-11-25 08:43:47,437 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9474 states and 11204 transitions.
[2020-11-25 08:43:47,446 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 16
[2020-11-25 08:43:47,446 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:43:47,446 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:43:47,447 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:43:47,447 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_ERC20Pausable0 := false;
[L2]                  call_transfer_ERC20Pausable0 := false;
[L2]      CALL        call main();
[L11211]              assume null == 0;
[L11212]  CALL        call this := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L11212]  RET         call this := FreshRefGenerator__success();
[L11213]              assume now >= 0;
[L11214]              assume DType[this] == Wafl;
[L11215]              assume msgvalue_MSG == 0;
[L11216]              gas := gas - 53000;
[L11217]  CALL        call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L3134]               havoc __exception;
[L3135]               revert := false;
[L3136]   COND FALSE  !(__exception)
[L3164]   CALL        call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L7163]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L7163]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7164]   COND FALSE  !(revert)
[L7167]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L7167]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7168]   COND FALSE  !(revert)
[L7171]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L5753]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L5753]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]   COND FALSE  !(revert)
[L5757]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5728]               assume msgsender_MSG != null;
[L5729]               Balance[this] := 0;
[L5730]               _name_ERC20Detailed[this] := -1545721152;
[L5731]               _symbol_ERC20Detailed[this] := -1545721152;
[L5732]               _decimals_ERC20Detailed[this] := 0;
[L5734]               _name_ERC20Detailed[this] := name_s731;
[L5735]               _symbol_ERC20Detailed[this] := symbol_s731;
[L5736]               _decimals_ERC20Detailed[this] := decimals_s731;
[L5757]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5758]   COND FALSE  !(revert)
[L7171]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L7172]   COND FALSE  !(revert)
[L7175]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L7175]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7176]   COND FALSE  !(revert)
[L7179]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L7179]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7180]   COND FALSE  !(revert)
[L7183]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6329]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6329]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6330]   COND FALSE  !(revert)
[L6333]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6333]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6334]   COND FALSE  !(revert)
[L6337]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6337]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   COND FALSE  !(revert)
[L6341]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L6341]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6342]   COND FALSE  !(revert)
[L6345]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6298]               assume msgsender_MSG != null;
[L6299]               Balance[this] := 0;
[L6345]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6346]   COND FALSE  !(revert)
[L7183]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7184]   COND FALSE  !(revert)
[L7187]   CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6973]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6974]   COND FALSE  !(revert)
[L6977]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6977]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6978]   COND FALSE  !(revert)
[L6981]   CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6950]               assume msgsender_MSG != null;
[L6951]               Balance[this] := 0;
[L6981]   RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6982]   COND FALSE  !(revert)
[L7187]   RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7188]   COND FALSE  !(revert)
[L7191]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND TRUE   DType[this] == Wafl
[L6648]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6648]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6649]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L7191]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7192]   COND FALSE  !(revert)
[L7195]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6875]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6875]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6876]   COND FALSE  !(revert)
[L6879]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6879]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6880]   COND FALSE  !(revert)
[L6883]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND FALSE  !(DType[this] == Wafl)
[L6652]   COND FALSE  !(DType[this] == ERC20Mintable)
[L6657]   COND TRUE   DType[this] == MinterRole
[L6658]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6658]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6659]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L6883]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6884]   COND FALSE  !(revert)
[L6887]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6848]               assume msgsender_MSG != null;
[L6849]               Balance[this] := 0;
[L6887]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6888]   COND FALSE  !(revert)
[L7195]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L7196]   COND FALSE  !(revert)
[L7199]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4717]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4699]               assume msgsender_MSG != null;
[L4700]               Balance[this] := 0;
[L4701]               _owner_Ownable[this] := null;
[L4703]               _owner_Ownable[this] := msgsender_MSG;
[L4704]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L4717]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4718]   COND FALSE  !(revert)
[L7199]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7200]   COND FALSE  !(revert)
[L7203]   CALL        call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7087]               assume msgsender_MSG != null;
[L7088]               Balance[this] := 0;
[L7090]   COND TRUE   DType[this] == Wafl
[L7091]   CALL        call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L5795]               __ret_0_ := _decimals_ERC20Detailed[this];
[L7091]   RET         call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L7092]   COND FALSE  !(revert)
[L7098]               __var_39 := __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7099]   COND TRUE   DType[this] == Wafl
[L7100]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5473]               __var_11 := null;
[L5474]   COND FALSE  !(!(account_s587 != null))
[L5478]   CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5478]   RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L5479]   COND FALSE  !(revert)
[L5482]               _totalSupply_ERC20[this] := __var_12;
[L5483]   CALL        call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5483]   RET         call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L5484]   COND FALSE  !(revert)
[L5487]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s587];
[L5488]               _balances_ERC20[this][account_s587] := __var_13;
[L5489]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s587];
[L5490]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7100]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7101]   COND FALSE  !(revert)
[L7203]   RET         call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7204]   COND FALSE  !(revert)
[L3164]   RET         call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L3165]               assume !revert && gas >= 0;
[L11217]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L11218]              assume !revert && gas >= 0;
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND TRUE   choice == 21
[L11070]              gas := gas - 21000;
[L11071]  COND TRUE   gas >= 0
[L11072]              assume value_s1040 >= 0 && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11073]              assume msgvalue_MSG == 0;
[L11074]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1040 && value_s1040 <= _balances_ERC20[this][msgsender_MSG]) && value_s1040 >= 0) && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1040] >= 0) && _balances_ERC20[this][to_s1040] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ERC20Pausable0 := true;
[L2]                  call_transfer_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2158]               havoc __exception;
[L2159]               revert := false;
[L2160]   COND FALSE  !(__exception)
[L2188]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6380]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9503]   COND FALSE  !(!!_paused_Pausable[this])
[L6380]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6381]   COND FALSE  !(revert)
[L6384]   COND TRUE   DType[this] == Wafl
[L6385]   CALL        call __var_26 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L4977]   COND TRUE   DType[this] == Wafl
[L4978]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s364, amount_s364);
[L5417]               __var_7 := null;
[L5418]   COND FALSE  !(!(sender_s544 != null))
[L5422]               __var_8 := null;
[L5423]   COND FALSE  !(!(recipient_s544 != null))
[L5427]   CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5427]   RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L5428]   COND FALSE  !(revert)
[L5431]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s544];
[L5432]               _balances_ERC20[this][sender_s544] := __var_9;
[L5433]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s544];
[L5434]   CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5434]   RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L5435]   COND FALSE  !(revert)
[L5438]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s544];
[L5439]               _balances_ERC20[this][recipient_s544] := __var_10;
[L5440]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s544];
[L5441]               assert { :EventEmitted "Transfer_ERC20" } true;
[L4978]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s364, amount_s364);
[L4979]   COND FALSE  !(revert)
[L5005]               __ret_0_ := true;
[L6385]   RET         call __var_26 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6386]   COND FALSE  !(revert)
[L6397]               __ret_0_ := __var_26;
[L2188]   RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2189]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _owner_Ownable[this] == old(_owner_Ownable[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L11074]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L11221]  RET         call CorralChoice_Wafl(this);

Loop:
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND TRUE   choice == 21
[L11070]              gas := gas - 21000;
[L11071]  COND TRUE   gas >= 0
[L11072]              assume value_s1040 >= 0 && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11073]              assume msgvalue_MSG == 0;
[L11074]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1040 && value_s1040 <= _balances_ERC20[this][msgsender_MSG]) && value_s1040 >= 0) && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1040] >= 0) && _balances_ERC20[this][to_s1040] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ERC20Pausable0 := true;
[L2]                  call_transfer_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2158]               havoc __exception;
[L2159]               revert := false;
[L2160]   COND FALSE  !(__exception)
[L2188]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6380]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9503]   COND FALSE  !(!!_paused_Pausable[this])
[L6380]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6381]   COND FALSE  !(revert)
[L6384]   COND TRUE   DType[this] == Wafl
[L6385]   CALL        call __var_26 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L4977]   COND TRUE   DType[this] == Wafl
[L4978]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s364, amount_s364);
[L5417]               __var_7 := null;
[L5418]   COND FALSE  !(!(sender_s544 != null))
[L5422]               __var_8 := null;
[L5423]   COND FALSE  !(!(recipient_s544 != null))
[L5427]   CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5427]   RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L5428]   COND FALSE  !(revert)
[L5431]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s544];
[L5432]               _balances_ERC20[this][sender_s544] := __var_9;
[L5433]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s544];
[L5434]   CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5434]   RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L5435]   COND FALSE  !(revert)
[L5438]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s544];
[L5439]               _balances_ERC20[this][recipient_s544] := __var_10;
[L5440]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s544];
[L5441]               assert { :EventEmitted "Transfer_ERC20" } true;
[L4978]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s364, amount_s364);
[L4979]   COND FALSE  !(revert)
[L5005]               __ret_0_ := true;
[L6385]   RET         call __var_26 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6386]   COND FALSE  !(revert)
[L6397]               __ret_0_ := __var_26;
[L2188]   RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2189]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _owner_Ownable[this] == old(_owner_Ownable[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L11074]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L11221]  RET         call CorralChoice_Wafl(this);

[2020-11-25 08:43:47,452 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:43:47,452 INFO  L82        PathProgramCache]: Analyzing trace with hash 1049830778, now seen corresponding path program 1 times
[2020-11-25 08:43:47,453 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:43:47,473 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:43:47,688 INFO  L134       CoverageAnalysis]: Checked inductivity of 1001 backedges. 6 proven. 0 refuted. 0 times theorem prover too weak. 995 trivial. 0 not checked.
[2020-11-25 08:43:47,688 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:43:47,688 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [8] imperfect sequences [] total 8
[2020-11-25 08:43:47,688 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:43:47,688 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 08:43:47,689 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 08:43:47,689 INFO  L87              Difference]: Start difference. First operand 9474 states and 11204 transitions. cyclomatic complexity: 1734 Second operand 8 states.
[2020-11-25 08:43:47,860 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:43:47,860 INFO  L93              Difference]: Finished difference Result 9495 states and 11227 transitions.
[2020-11-25 08:43:47,860 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 08:43:47,860 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9495 states and 11227 transitions.
[2020-11-25 08:43:47,877 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 16
[2020-11-25 08:43:47,894 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9495 states to 9462 states and 11190 transitions.
[2020-11-25 08:43:47,894 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2647
[2020-11-25 08:43:47,895 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2647
[2020-11-25 08:43:47,895 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9462 states and 11190 transitions.
[2020-11-25 08:43:47,900 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:43:47,900 INFO  L728         BuchiCegarLoop]: Abstraction has 9462 states and 11190 transitions.
[2020-11-25 08:43:47,905 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9462 states and 11190 transitions.
[2020-11-25 08:43:47,949 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9462 to 9462.
[2020-11-25 08:43:47,949 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9462 states.
[2020-11-25 08:43:47,959 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9462 states to 9462 states and 11190 transitions.
[2020-11-25 08:43:47,959 INFO  L751         BuchiCegarLoop]: Abstraction has 9462 states and 11190 transitions.
[2020-11-25 08:43:47,959 INFO  L631         BuchiCegarLoop]: Abstraction has 9462 states and 11190 transitions.
[2020-11-25 08:43:47,959 INFO  L445         BuchiCegarLoop]: ======== Iteration 23============
[2020-11-25 08:43:47,959 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9462 states and 11190 transitions.
[2020-11-25 08:43:47,969 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 16
[2020-11-25 08:43:47,969 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:43:47,969 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:43:47,970 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:43:47,970 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_ERC20Pausable0 := false;
[L2]                  call_transfer_ERC20Pausable0 := false;
[L2]      CALL        call main();
[L11211]              assume null == 0;
[L11212]  CALL        call this := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L11212]  RET         call this := FreshRefGenerator__success();
[L11213]              assume now >= 0;
[L11214]              assume DType[this] == Wafl;
[L11215]              assume msgvalue_MSG == 0;
[L11216]              gas := gas - 53000;
[L11217]  CALL        call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L3134]               havoc __exception;
[L3135]               revert := false;
[L3136]   COND FALSE  !(__exception)
[L3164]   CALL        call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L7163]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L7163]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7164]   COND FALSE  !(revert)
[L7167]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L7167]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7168]   COND FALSE  !(revert)
[L7171]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L5753]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L5753]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]   COND FALSE  !(revert)
[L5757]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5728]               assume msgsender_MSG != null;
[L5729]               Balance[this] := 0;
[L5730]               _name_ERC20Detailed[this] := -1545721152;
[L5731]               _symbol_ERC20Detailed[this] := -1545721152;
[L5732]               _decimals_ERC20Detailed[this] := 0;
[L5734]               _name_ERC20Detailed[this] := name_s731;
[L5735]               _symbol_ERC20Detailed[this] := symbol_s731;
[L5736]               _decimals_ERC20Detailed[this] := decimals_s731;
[L5757]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5758]   COND FALSE  !(revert)
[L7171]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L7172]   COND FALSE  !(revert)
[L7175]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L7175]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7176]   COND FALSE  !(revert)
[L7179]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L7179]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7180]   COND FALSE  !(revert)
[L7183]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6329]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6329]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6330]   COND FALSE  !(revert)
[L6333]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6333]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6334]   COND FALSE  !(revert)
[L6337]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6337]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   COND FALSE  !(revert)
[L6341]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L6341]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6342]   COND FALSE  !(revert)
[L6345]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6298]               assume msgsender_MSG != null;
[L6299]               Balance[this] := 0;
[L6345]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6346]   COND FALSE  !(revert)
[L7183]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7184]   COND FALSE  !(revert)
[L7187]   CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6973]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6974]   COND FALSE  !(revert)
[L6977]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6977]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6978]   COND FALSE  !(revert)
[L6981]   CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6950]               assume msgsender_MSG != null;
[L6951]               Balance[this] := 0;
[L6981]   RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6982]   COND FALSE  !(revert)
[L7187]   RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7188]   COND FALSE  !(revert)
[L7191]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND TRUE   DType[this] == Wafl
[L6648]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6648]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6649]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L7191]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7192]   COND FALSE  !(revert)
[L7195]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6875]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6875]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6876]   COND FALSE  !(revert)
[L6879]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6879]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6880]   COND FALSE  !(revert)
[L6883]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND TRUE   DType[this] == Wafl
[L6648]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6648]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6649]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L6883]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6884]   COND FALSE  !(revert)
[L6887]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6848]               assume msgsender_MSG != null;
[L6849]               Balance[this] := 0;
[L6887]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6888]   COND FALSE  !(revert)
[L7195]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L7196]   COND FALSE  !(revert)
[L7199]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4717]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4699]               assume msgsender_MSG != null;
[L4700]               Balance[this] := 0;
[L4701]               _owner_Ownable[this] := null;
[L4703]               _owner_Ownable[this] := msgsender_MSG;
[L4704]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L4717]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4718]   COND FALSE  !(revert)
[L7199]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7200]   COND FALSE  !(revert)
[L7203]   CALL        call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7087]               assume msgsender_MSG != null;
[L7088]               Balance[this] := 0;
[L7090]   COND TRUE   DType[this] == Wafl
[L7091]   CALL        call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L5795]               __ret_0_ := _decimals_ERC20Detailed[this];
[L7091]   RET         call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L7092]   COND FALSE  !(revert)
[L7098]               __var_39 := __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7099]   COND TRUE   DType[this] == Wafl
[L7100]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5473]               __var_11 := null;
[L5474]   COND FALSE  !(!(account_s587 != null))
[L5478]   CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5478]   RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L5479]   COND FALSE  !(revert)
[L5482]               _totalSupply_ERC20[this] := __var_12;
[L5483]   CALL        call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5483]   RET         call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L5484]   COND FALSE  !(revert)
[L5487]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s587];
[L5488]               _balances_ERC20[this][account_s587] := __var_13;
[L5489]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s587];
[L5490]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7100]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7101]   COND FALSE  !(revert)
[L7203]   RET         call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7204]   COND FALSE  !(revert)
[L3164]   RET         call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L3165]               assume !revert && gas >= 0;
[L11217]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L11218]              assume !revert && gas >= 0;
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND TRUE   choice == 21
[L11070]              gas := gas - 21000;
[L11071]  COND TRUE   gas >= 0
[L11072]              assume value_s1040 >= 0 && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11073]              assume msgvalue_MSG == 0;
[L11074]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1040 && value_s1040 <= _balances_ERC20[this][msgsender_MSG]) && value_s1040 >= 0) && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1040] >= 0) && _balances_ERC20[this][to_s1040] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ERC20Pausable0 := true;
[L2]                  call_transfer_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2158]               havoc __exception;
[L2159]               revert := false;
[L2160]   COND FALSE  !(__exception)
[L2188]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6380]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9503]   COND FALSE  !(!!_paused_Pausable[this])
[L6380]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6381]   COND FALSE  !(revert)
[L6384]   COND TRUE   DType[this] == Wafl
[L6385]   CALL        call __var_26 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L4977]   COND TRUE   DType[this] == Wafl
[L4978]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s364, amount_s364);
[L5417]               __var_7 := null;
[L5418]   COND FALSE  !(!(sender_s544 != null))
[L5422]               __var_8 := null;
[L5423]   COND FALSE  !(!(recipient_s544 != null))
[L5427]   CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5427]   RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L5428]   COND FALSE  !(revert)
[L5431]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s544];
[L5432]               _balances_ERC20[this][sender_s544] := __var_9;
[L5433]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s544];
[L5434]   CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5434]   RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L5435]   COND FALSE  !(revert)
[L5438]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s544];
[L5439]               _balances_ERC20[this][recipient_s544] := __var_10;
[L5440]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s544];
[L5441]               assert { :EventEmitted "Transfer_ERC20" } true;
[L4978]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s364, amount_s364);
[L4979]   COND FALSE  !(revert)
[L5005]               __ret_0_ := true;
[L6385]   RET         call __var_26 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6386]   COND FALSE  !(revert)
[L6397]               __ret_0_ := __var_26;
[L2188]   RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2189]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _owner_Ownable[this] == old(_owner_Ownable[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L11074]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L11221]  RET         call CorralChoice_Wafl(this);

Loop:
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND TRUE   choice == 21
[L11070]              gas := gas - 21000;
[L11071]  COND TRUE   gas >= 0
[L11072]              assume value_s1040 >= 0 && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11073]              assume msgvalue_MSG == 0;
[L11074]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1040 && value_s1040 <= _balances_ERC20[this][msgsender_MSG]) && value_s1040 >= 0) && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1040] >= 0) && _balances_ERC20[this][to_s1040] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ERC20Pausable0 := true;
[L2]                  call_transfer_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2158]               havoc __exception;
[L2159]               revert := false;
[L2160]   COND FALSE  !(__exception)
[L2188]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6380]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9503]   COND FALSE  !(!!_paused_Pausable[this])
[L6380]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6381]   COND FALSE  !(revert)
[L6384]   COND TRUE   DType[this] == Wafl
[L6385]   CALL        call __var_26 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L4977]   COND TRUE   DType[this] == Wafl
[L4978]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s364, amount_s364);
[L5417]               __var_7 := null;
[L5418]   COND FALSE  !(!(sender_s544 != null))
[L5422]               __var_8 := null;
[L5423]   COND FALSE  !(!(recipient_s544 != null))
[L5427]   CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5427]   RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L5428]   COND FALSE  !(revert)
[L5431]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s544];
[L5432]               _balances_ERC20[this][sender_s544] := __var_9;
[L5433]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s544];
[L5434]   CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5434]   RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L5435]   COND FALSE  !(revert)
[L5438]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s544];
[L5439]               _balances_ERC20[this][recipient_s544] := __var_10;
[L5440]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s544];
[L5441]               assert { :EventEmitted "Transfer_ERC20" } true;
[L4978]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s364, amount_s364);
[L4979]   COND FALSE  !(revert)
[L5005]               __ret_0_ := true;
[L6385]   RET         call __var_26 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6386]   COND FALSE  !(revert)
[L6397]               __ret_0_ := __var_26;
[L2188]   RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2189]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _owner_Ownable[this] == old(_owner_Ownable[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L11074]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L11221]  RET         call CorralChoice_Wafl(this);

[2020-11-25 08:43:47,974 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:43:47,974 INFO  L82        PathProgramCache]: Analyzing trace with hash 606921236, now seen corresponding path program 1 times
[2020-11-25 08:43:47,975 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:43:48,128 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:43:49,767 INFO  L134       CoverageAnalysis]: Checked inductivity of 1005 backedges. 30 proven. 0 refuted. 0 times theorem prover too weak. 975 trivial. 0 not checked.
[2020-11-25 08:43:49,767 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:43:49,767 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [35] imperfect sequences [] total 35
[2020-11-25 08:43:49,767 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:43:49,768 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 36 interpolants.
[2020-11-25 08:43:49,768 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=100, Invalid=1160, Unknown=0, NotChecked=0, Total=1260
[2020-11-25 08:43:49,768 INFO  L87              Difference]: Start difference. First operand 9462 states and 11190 transitions. cyclomatic complexity: 1732 Second operand 36 states.
[2020-11-25 08:44:23,881 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:44:23,881 INFO  L93              Difference]: Finished difference Result 9558 states and 11388 transitions.
[2020-11-25 08:44:23,881 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 33 states. 
[2020-11-25 08:44:23,881 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9558 states and 11388 transitions.
[2020-11-25 08:44:23,901 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 28
[2020-11-25 08:44:23,921 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9558 states to 9558 states and 11388 transitions.
[2020-11-25 08:44:23,921 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2678
[2020-11-25 08:44:23,922 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2678
[2020-11-25 08:44:23,922 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9558 states and 11388 transitions.
[2020-11-25 08:44:23,928 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:44:23,928 INFO  L728         BuchiCegarLoop]: Abstraction has 9558 states and 11388 transitions.
[2020-11-25 08:44:23,933 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9558 states and 11388 transitions.
[2020-11-25 08:44:23,983 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9558 to 9544.
[2020-11-25 08:44:23,983 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9544 states.
[2020-11-25 08:44:23,995 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9544 states to 9544 states and 11372 transitions.
[2020-11-25 08:44:23,995 INFO  L751         BuchiCegarLoop]: Abstraction has 9544 states and 11372 transitions.
[2020-11-25 08:44:23,995 INFO  L631         BuchiCegarLoop]: Abstraction has 9544 states and 11372 transitions.
[2020-11-25 08:44:23,995 INFO  L445         BuchiCegarLoop]: ======== Iteration 24============
[2020-11-25 08:44:23,995 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9544 states and 11372 transitions.
[2020-11-25 08:44:24,005 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 28
[2020-11-25 08:44:24,005 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:44:24,005 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:44:24,007 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:44:24,007 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_ERC20Pausable0 := false;
[L2]                  call_transfer_ERC20Pausable0 := false;
[L2]      CALL        call main();
[L11211]              assume null == 0;
[L11212]  CALL        call this := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L11212]  RET         call this := FreshRefGenerator__success();
[L11213]              assume now >= 0;
[L11214]              assume DType[this] == Wafl;
[L11215]              assume msgvalue_MSG == 0;
[L11216]              gas := gas - 53000;
[L11217]  CALL        call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L3134]               havoc __exception;
[L3135]               revert := false;
[L3136]   COND FALSE  !(__exception)
[L3164]   CALL        call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L7163]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L7163]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7164]   COND FALSE  !(revert)
[L7167]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L7167]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7168]   COND FALSE  !(revert)
[L7171]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L5753]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L5753]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]   COND FALSE  !(revert)
[L5757]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5728]               assume msgsender_MSG != null;
[L5729]               Balance[this] := 0;
[L5730]               _name_ERC20Detailed[this] := -1545721152;
[L5731]               _symbol_ERC20Detailed[this] := -1545721152;
[L5732]               _decimals_ERC20Detailed[this] := 0;
[L5734]               _name_ERC20Detailed[this] := name_s731;
[L5735]               _symbol_ERC20Detailed[this] := symbol_s731;
[L5736]               _decimals_ERC20Detailed[this] := decimals_s731;
[L5757]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5758]   COND FALSE  !(revert)
[L7171]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L7172]   COND FALSE  !(revert)
[L7175]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L7175]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7176]   COND FALSE  !(revert)
[L7179]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L7179]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7180]   COND FALSE  !(revert)
[L7183]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6329]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6329]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6330]   COND FALSE  !(revert)
[L6333]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6333]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6334]   COND FALSE  !(revert)
[L6337]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6337]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   COND FALSE  !(revert)
[L6341]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L6341]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6342]   COND FALSE  !(revert)
[L6345]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6298]               assume msgsender_MSG != null;
[L6299]               Balance[this] := 0;
[L6345]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6346]   COND FALSE  !(revert)
[L7183]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7184]   COND FALSE  !(revert)
[L7187]   CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6973]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6974]   COND FALSE  !(revert)
[L6977]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6977]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6978]   COND FALSE  !(revert)
[L6981]   CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6950]               assume msgsender_MSG != null;
[L6951]               Balance[this] := 0;
[L6981]   RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6982]   COND FALSE  !(revert)
[L7187]   RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7188]   COND FALSE  !(revert)
[L7191]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND TRUE   DType[this] == Wafl
[L6648]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6648]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6649]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L7191]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7192]   COND FALSE  !(revert)
[L7195]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6875]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6875]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6876]   COND FALSE  !(revert)
[L6879]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6879]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6880]   COND FALSE  !(revert)
[L6883]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND TRUE   DType[this] == Wafl
[L6648]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6648]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6649]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L6883]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6884]   COND FALSE  !(revert)
[L6887]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6848]               assume msgsender_MSG != null;
[L6849]               Balance[this] := 0;
[L6887]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6888]   COND FALSE  !(revert)
[L7195]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L7196]   COND FALSE  !(revert)
[L7199]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4717]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4699]               assume msgsender_MSG != null;
[L4700]               Balance[this] := 0;
[L4701]               _owner_Ownable[this] := null;
[L4703]               _owner_Ownable[this] := msgsender_MSG;
[L4704]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L4717]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4718]   COND FALSE  !(revert)
[L7199]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7200]   COND FALSE  !(revert)
[L7203]   CALL        call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7087]               assume msgsender_MSG != null;
[L7088]               Balance[this] := 0;
[L7090]   COND TRUE   DType[this] == Wafl
[L7091]   CALL        call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L5795]               __ret_0_ := _decimals_ERC20Detailed[this];
[L7091]   RET         call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L7092]   COND FALSE  !(revert)
[L7098]               __var_39 := __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7099]   COND TRUE   DType[this] == Wafl
[L7100]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5473]               __var_11 := null;
[L5474]   COND FALSE  !(!(account_s587 != null))
[L5478]   CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5478]   RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L5479]   COND FALSE  !(revert)
[L5482]               _totalSupply_ERC20[this] := __var_12;
[L5483]   CALL        call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5483]   RET         call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L5484]   COND FALSE  !(revert)
[L5487]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s587];
[L5488]               _balances_ERC20[this][account_s587] := __var_13;
[L5489]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s587];
[L5490]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7100]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7101]   COND FALSE  !(revert)
[L7203]   RET         call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7204]   COND FALSE  !(revert)
[L3164]   RET         call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L3165]               assume !revert && gas >= 0;
[L11217]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L11218]              assume !revert && gas >= 0;
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND TRUE   choice == 21
[L11070]              gas := gas - 21000;
[L11071]  COND TRUE   gas >= 0
[L11072]              assume value_s1040 >= 0 && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11073]              assume msgvalue_MSG == 0;
[L11074]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1040 && value_s1040 <= _balances_ERC20[this][msgsender_MSG]) && value_s1040 >= 0) && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1040] >= 0) && _balances_ERC20[this][to_s1040] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ERC20Pausable0 := true;
[L2]                  call_transfer_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2158]               havoc __exception;
[L2159]               revert := false;
[L2160]   COND TRUE   __exception
[L2161]               __tmp__Balance := Balance;
[L2162]               __tmp__DType := DType;
[L2163]               __tmp__Alloc := Alloc;
[L2164]               __tmp__balance_ADDR := balance_ADDR;
[L2165]               __tmp__M_Ref_int := M_Ref_int;
[L2166]               __tmp__sum__balances0 := sum__balances0;
[L2167]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2168]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L2169]               __tmp__sum__allowances1 := sum__allowances1;
[L2170]               __tmp__M_Ref_bool := M_Ref_bool;
[L2171]               __tmp__sum := sum;
[L2172]               __tmp__Length := Length;
[L2173]               __tmp__now := now;
[L2174]               __tmp___owner_Ownable := _owner_Ownable;
[L2175]               __tmp___balances_ERC20 := _balances_ERC20;
[L2176]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L2177]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2178]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2179]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2180]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2181]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2182]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2183]               __tmp___paused_Pausable := _paused_Pausable;
[L2184]               __tmp___minters_MinterRole := _minters_MinterRole;
[L2185]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6355]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9495]   COND FALSE  !(!!__tmp___paused_Pausable[this])
[L6355]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6356]   COND FALSE  !(revert)
[L6359]   COND TRUE   __tmp__DType[this] == Wafl
[L6360]   CALL        call __var_26 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L4943]   COND TRUE   __tmp__DType[this] == Wafl
[L4944]   CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s364, amount_s364);
[L5385]               __var_7 := null;
[L5386]   COND FALSE  !(!(sender_s544 != null))
[L5390]               __var_8 := null;
[L5391]   COND FALSE  !(!(recipient_s544 != null))
[L5395]   CALL        call __var_9 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s544], amount_s544);
[L4589]   COND TRUE   !(b_s51 <= a_s51)
[L4590]               revert := true;
[L5395]   RET         call __var_9 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s544], amount_s544);
[L5396]   COND TRUE   revert
[L4944]   RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s364, amount_s364);
[L4945]   COND TRUE   revert
[L6360]   RET         call __var_26 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6361]   COND TRUE   revert
[L2185]   RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2186]               assume revert || gas < 0;
[L11074]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L11221]  RET         call CorralChoice_Wafl(this);

Loop:
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND TRUE   choice == 21
[L11070]              gas := gas - 21000;
[L11071]  COND TRUE   gas >= 0
[L11072]              assume value_s1040 >= 0 && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11073]              assume msgvalue_MSG == 0;
[L11074]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1040 && value_s1040 <= _balances_ERC20[this][msgsender_MSG]) && value_s1040 >= 0) && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1040] >= 0) && _balances_ERC20[this][to_s1040] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ERC20Pausable0 := true;
[L2]                  call_transfer_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2158]               havoc __exception;
[L2159]               revert := false;
[L2160]   COND TRUE   __exception
[L2161]               __tmp__Balance := Balance;
[L2162]               __tmp__DType := DType;
[L2163]               __tmp__Alloc := Alloc;
[L2164]               __tmp__balance_ADDR := balance_ADDR;
[L2165]               __tmp__M_Ref_int := M_Ref_int;
[L2166]               __tmp__sum__balances0 := sum__balances0;
[L2167]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2168]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L2169]               __tmp__sum__allowances1 := sum__allowances1;
[L2170]               __tmp__M_Ref_bool := M_Ref_bool;
[L2171]               __tmp__sum := sum;
[L2172]               __tmp__Length := Length;
[L2173]               __tmp__now := now;
[L2174]               __tmp___owner_Ownable := _owner_Ownable;
[L2175]               __tmp___balances_ERC20 := _balances_ERC20;
[L2176]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L2177]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2178]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2179]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2180]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2181]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2182]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2183]               __tmp___paused_Pausable := _paused_Pausable;
[L2184]               __tmp___minters_MinterRole := _minters_MinterRole;
[L2185]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6355]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9495]   COND FALSE  !(!!__tmp___paused_Pausable[this])
[L6355]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6356]   COND FALSE  !(revert)
[L6359]   COND TRUE   __tmp__DType[this] == Wafl
[L6360]   CALL        call __var_26 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L4943]   COND TRUE   __tmp__DType[this] == Wafl
[L4944]   CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s364, amount_s364);
[L5385]               __var_7 := null;
[L5386]   COND FALSE  !(!(sender_s544 != null))
[L5390]               __var_8 := null;
[L5391]   COND FALSE  !(!(recipient_s544 != null))
[L5395]   CALL        call __var_9 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s544], amount_s544);
[L4589]   COND TRUE   !(b_s51 <= a_s51)
[L4590]               revert := true;
[L5395]   RET         call __var_9 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s544], amount_s544);
[L5396]   COND TRUE   revert
[L4944]   RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s364, amount_s364);
[L4945]   COND TRUE   revert
[L6360]   RET         call __var_26 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6361]   COND TRUE   revert
[L2185]   RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2186]               assume revert || gas < 0;
[L11074]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L11221]  RET         call CorralChoice_Wafl(this);

[2020-11-25 08:44:24,011 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:44:24,012 INFO  L82        PathProgramCache]: Analyzing trace with hash -29397583, now seen corresponding path program 1 times
[2020-11-25 08:44:24,013 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:44:24,031 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:44:24,245 INFO  L134       CoverageAnalysis]: Checked inductivity of 1005 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1005 trivial. 0 not checked.
[2020-11-25 08:44:24,245 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:44:24,245 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [9] imperfect sequences [] total 9
[2020-11-25 08:44:24,245 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:44:24,245 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 08:44:24,245 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=15, Invalid=57, Unknown=0, NotChecked=0, Total=72
[2020-11-25 08:44:24,246 INFO  L87              Difference]: Start difference. First operand 9544 states and 11372 transitions. cyclomatic complexity: 1836 Second operand 9 states.
[2020-11-25 08:44:27,535 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:44:27,535 INFO  L93              Difference]: Finished difference Result 9734 states and 11677 transitions.
[2020-11-25 08:44:27,535 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-11-25 08:44:27,535 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9734 states and 11677 transitions.
[2020-11-25 08:44:27,556 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 36
[2020-11-25 08:44:27,577 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9734 states to 9734 states and 11677 transitions.
[2020-11-25 08:44:27,577 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2738
[2020-11-25 08:44:27,578 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2738
[2020-11-25 08:44:27,578 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9734 states and 11677 transitions.
[2020-11-25 08:44:27,585 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:44:27,585 INFO  L728         BuchiCegarLoop]: Abstraction has 9734 states and 11677 transitions.
[2020-11-25 08:44:27,590 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9734 states and 11677 transitions.
[2020-11-25 08:44:27,642 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9734 to 9336.
[2020-11-25 08:44:27,642 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9336 states.
[2020-11-25 08:44:27,654 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9336 states to 9336 states and 11047 transitions.
[2020-11-25 08:44:27,654 INFO  L751         BuchiCegarLoop]: Abstraction has 9336 states and 11047 transitions.
[2020-11-25 08:44:27,654 INFO  L631         BuchiCegarLoop]: Abstraction has 9336 states and 11047 transitions.
[2020-11-25 08:44:27,654 INFO  L445         BuchiCegarLoop]: ======== Iteration 25============
[2020-11-25 08:44:27,654 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9336 states and 11047 transitions.
[2020-11-25 08:44:27,664 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 20
[2020-11-25 08:44:27,664 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:44:27,664 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:44:27,665 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:44:27,665 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_ERC20Pausable0 := false;
[L2]                  call_transfer_ERC20Pausable0 := false;
[L2]      CALL        call main();
[L11211]              assume null == 0;
[L11212]  CALL        call this := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L11212]  RET         call this := FreshRefGenerator__success();
[L11213]              assume now >= 0;
[L11214]              assume DType[this] == Wafl;
[L11215]              assume msgvalue_MSG == 0;
[L11216]              gas := gas - 53000;
[L11217]  CALL        call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L3134]               havoc __exception;
[L3135]               revert := false;
[L3136]   COND FALSE  !(__exception)
[L3164]   CALL        call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L7163]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L7163]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7164]   COND FALSE  !(revert)
[L7167]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L7167]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7168]   COND FALSE  !(revert)
[L7171]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L5753]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L5753]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]   COND FALSE  !(revert)
[L5757]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5728]               assume msgsender_MSG != null;
[L5729]               Balance[this] := 0;
[L5730]               _name_ERC20Detailed[this] := -1545721152;
[L5731]               _symbol_ERC20Detailed[this] := -1545721152;
[L5732]               _decimals_ERC20Detailed[this] := 0;
[L5734]               _name_ERC20Detailed[this] := name_s731;
[L5735]               _symbol_ERC20Detailed[this] := symbol_s731;
[L5736]               _decimals_ERC20Detailed[this] := decimals_s731;
[L5757]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5758]   COND FALSE  !(revert)
[L7171]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L7172]   COND FALSE  !(revert)
[L7175]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L7175]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7176]   COND FALSE  !(revert)
[L7179]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L7179]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7180]   COND FALSE  !(revert)
[L7183]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6329]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6329]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6330]   COND FALSE  !(revert)
[L6333]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6333]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6334]   COND FALSE  !(revert)
[L6337]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6337]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   COND FALSE  !(revert)
[L6341]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L6341]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6342]   COND FALSE  !(revert)
[L6345]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6298]               assume msgsender_MSG != null;
[L6299]               Balance[this] := 0;
[L6345]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6346]   COND FALSE  !(revert)
[L7183]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7184]   COND FALSE  !(revert)
[L7187]   CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6973]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6974]   COND FALSE  !(revert)
[L6977]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6977]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6978]   COND FALSE  !(revert)
[L6981]   CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6950]               assume msgsender_MSG != null;
[L6951]               Balance[this] := 0;
[L6981]   RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6982]   COND FALSE  !(revert)
[L7187]   RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7188]   COND FALSE  !(revert)
[L7191]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND TRUE   DType[this] == Wafl
[L6648]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6648]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6649]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L7191]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7192]   COND FALSE  !(revert)
[L7195]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6875]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6875]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6876]   COND FALSE  !(revert)
[L6879]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6879]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6880]   COND FALSE  !(revert)
[L6883]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND TRUE   DType[this] == Wafl
[L6648]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6648]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6649]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L6883]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6884]   COND FALSE  !(revert)
[L6887]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6848]               assume msgsender_MSG != null;
[L6849]               Balance[this] := 0;
[L6887]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6888]   COND FALSE  !(revert)
[L7195]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L7196]   COND FALSE  !(revert)
[L7199]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4717]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4699]               assume msgsender_MSG != null;
[L4700]               Balance[this] := 0;
[L4701]               _owner_Ownable[this] := null;
[L4703]               _owner_Ownable[this] := msgsender_MSG;
[L4704]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L4717]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4718]   COND FALSE  !(revert)
[L7199]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7200]   COND FALSE  !(revert)
[L7203]   CALL        call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7087]               assume msgsender_MSG != null;
[L7088]               Balance[this] := 0;
[L7090]   COND TRUE   DType[this] == Wafl
[L7091]   CALL        call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L5795]               __ret_0_ := _decimals_ERC20Detailed[this];
[L7091]   RET         call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L7092]   COND FALSE  !(revert)
[L7098]               __var_39 := __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7099]   COND TRUE   DType[this] == Wafl
[L7100]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5473]               __var_11 := null;
[L5474]   COND FALSE  !(!(account_s587 != null))
[L5478]   CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5478]   RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L5479]   COND FALSE  !(revert)
[L5482]               _totalSupply_ERC20[this] := __var_12;
[L5483]   CALL        call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5483]   RET         call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L5484]   COND FALSE  !(revert)
[L5487]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s587];
[L5488]               _balances_ERC20[this][account_s587] := __var_13;
[L5489]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s587];
[L5490]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7100]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7101]   COND FALSE  !(revert)
[L7203]   RET         call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7204]   COND FALSE  !(revert)
[L3164]   RET         call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L3165]               assume !revert && gas >= 0;
[L11217]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L11218]              assume !revert && gas >= 0;
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND TRUE   choice == 21
[L11070]              gas := gas - 21000;
[L11071]  COND TRUE   gas >= 0
[L11072]              assume value_s1040 >= 0 && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11073]              assume msgvalue_MSG == 0;
[L11074]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1040 && value_s1040 <= _balances_ERC20[this][msgsender_MSG]) && value_s1040 >= 0) && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1040] >= 0) && _balances_ERC20[this][to_s1040] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ERC20Pausable0 := true;
[L2]                  call_transfer_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2158]               havoc __exception;
[L2159]               revert := false;
[L2160]   COND TRUE   __exception
[L2161]               __tmp__Balance := Balance;
[L2162]               __tmp__DType := DType;
[L2163]               __tmp__Alloc := Alloc;
[L2164]               __tmp__balance_ADDR := balance_ADDR;
[L2165]               __tmp__M_Ref_int := M_Ref_int;
[L2166]               __tmp__sum__balances0 := sum__balances0;
[L2167]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2168]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L2169]               __tmp__sum__allowances1 := sum__allowances1;
[L2170]               __tmp__M_Ref_bool := M_Ref_bool;
[L2171]               __tmp__sum := sum;
[L2172]               __tmp__Length := Length;
[L2173]               __tmp__now := now;
[L2174]               __tmp___owner_Ownable := _owner_Ownable;
[L2175]               __tmp___balances_ERC20 := _balances_ERC20;
[L2176]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L2177]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2178]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2179]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2180]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2181]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2182]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2183]               __tmp___paused_Pausable := _paused_Pausable;
[L2184]               __tmp___minters_MinterRole := _minters_MinterRole;
[L2185]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6355]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9495]   COND FALSE  !(!!__tmp___paused_Pausable[this])
[L6355]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6356]   COND FALSE  !(revert)
[L6359]   COND TRUE   __tmp__DType[this] == Wafl
[L6360]   CALL        call __var_26 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L4943]   COND TRUE   __tmp__DType[this] == Wafl
[L4944]   CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s364, amount_s364);
[L5385]               __var_7 := null;
[L5386]   COND FALSE  !(!(sender_s544 != null))
[L5390]               __var_8 := null;
[L5391]   COND FALSE  !(!(recipient_s544 != null))
[L5395]   CALL        call __var_9 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s544], amount_s544);
[L4589]   COND FALSE  !(!(b_s51 <= a_s51))
[L4593]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4594]               __ret_0_ := c_s51;
[L5395]   RET         call __var_9 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s544], amount_s544);
[L5396]   COND FALSE  !(revert)
[L5399]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][sender_s544];
[L5400]               __tmp___balances_ERC20[this][sender_s544] := __var_9;
[L5401]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][sender_s544];
[L5402]   CALL        call __var_10 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s544], amount_s544);
[L4565]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4566]   COND TRUE   !(c_s26 >= a_s26)
[L4567]               revert := true;
[L5402]   RET         call __var_10 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s544], amount_s544);
[L5403]   COND TRUE   revert
[L4944]   RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s364, amount_s364);
[L4945]   COND TRUE   revert
[L6360]   RET         call __var_26 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6361]   COND TRUE   revert
[L2185]   RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2186]               assume revert || gas < 0;
[L11074]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L11221]  RET         call CorralChoice_Wafl(this);

Loop:
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND TRUE   choice == 21
[L11070]              gas := gas - 21000;
[L11071]  COND TRUE   gas >= 0
[L11072]              assume value_s1040 >= 0 && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11073]              assume msgvalue_MSG == 0;
[L11074]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1040 && value_s1040 <= _balances_ERC20[this][msgsender_MSG]) && value_s1040 >= 0) && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1040] >= 0) && _balances_ERC20[this][to_s1040] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ERC20Pausable0 := true;
[L2]                  call_transfer_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2158]               havoc __exception;
[L2159]               revert := false;
[L2160]   COND TRUE   __exception
[L2161]               __tmp__Balance := Balance;
[L2162]               __tmp__DType := DType;
[L2163]               __tmp__Alloc := Alloc;
[L2164]               __tmp__balance_ADDR := balance_ADDR;
[L2165]               __tmp__M_Ref_int := M_Ref_int;
[L2166]               __tmp__sum__balances0 := sum__balances0;
[L2167]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2168]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L2169]               __tmp__sum__allowances1 := sum__allowances1;
[L2170]               __tmp__M_Ref_bool := M_Ref_bool;
[L2171]               __tmp__sum := sum;
[L2172]               __tmp__Length := Length;
[L2173]               __tmp__now := now;
[L2174]               __tmp___owner_Ownable := _owner_Ownable;
[L2175]               __tmp___balances_ERC20 := _balances_ERC20;
[L2176]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L2177]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2178]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2179]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2180]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2181]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2182]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2183]               __tmp___paused_Pausable := _paused_Pausable;
[L2184]               __tmp___minters_MinterRole := _minters_MinterRole;
[L2185]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6355]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9495]   COND FALSE  !(!!__tmp___paused_Pausable[this])
[L6355]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6356]   COND FALSE  !(revert)
[L6359]   COND TRUE   __tmp__DType[this] == Wafl
[L6360]   CALL        call __var_26 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L4943]   COND TRUE   __tmp__DType[this] == Wafl
[L4944]   CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s364, amount_s364);
[L5385]               __var_7 := null;
[L5386]   COND FALSE  !(!(sender_s544 != null))
[L5390]               __var_8 := null;
[L5391]   COND FALSE  !(!(recipient_s544 != null))
[L5395]   CALL        call __var_9 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s544], amount_s544);
[L4589]   COND FALSE  !(!(b_s51 <= a_s51))
[L4593]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4594]               __ret_0_ := c_s51;
[L5395]   RET         call __var_9 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s544], amount_s544);
[L5396]   COND FALSE  !(revert)
[L5399]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][sender_s544];
[L5400]               __tmp___balances_ERC20[this][sender_s544] := __var_9;
[L5401]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][sender_s544];
[L5402]   CALL        call __var_10 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s544], amount_s544);
[L4565]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4566]   COND TRUE   !(c_s26 >= a_s26)
[L4567]               revert := true;
[L5402]   RET         call __var_10 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s544], amount_s544);
[L5403]   COND TRUE   revert
[L4944]   RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s364, amount_s364);
[L4945]   COND TRUE   revert
[L6360]   RET         call __var_26 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6361]   COND TRUE   revert
[L2185]   RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2186]               assume revert || gas < 0;
[L11074]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L11221]  RET         call CorralChoice_Wafl(this);

[2020-11-25 08:44:27,670 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:44:27,670 INFO  L82        PathProgramCache]: Analyzing trace with hash -939966282, now seen corresponding path program 1 times
[2020-11-25 08:44:27,671 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:44:27,693 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:44:27,977 INFO  L134       CoverageAnalysis]: Checked inductivity of 1005 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1005 trivial. 0 not checked.
[2020-11-25 08:44:27,977 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:44:27,977 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [15] imperfect sequences [] total 15
[2020-11-25 08:44:27,978 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:44:27,978 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 15 interpolants.
[2020-11-25 08:44:27,978 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=30, Invalid=180, Unknown=0, NotChecked=0, Total=210
[2020-11-25 08:44:27,978 INFO  L87              Difference]: Start difference. First operand 9336 states and 11047 transitions. cyclomatic complexity: 1719 Second operand 15 states.
[2020-11-25 08:44:34,708 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:44:34,708 INFO  L93              Difference]: Finished difference Result 9424 states and 11207 transitions.
[2020-11-25 08:44:34,708 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 16 states. 
[2020-11-25 08:44:34,708 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9424 states and 11207 transitions.
[2020-11-25 08:44:34,729 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 28
[2020-11-25 08:44:34,750 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9424 states to 9424 states and 11207 transitions.
[2020-11-25 08:44:34,750 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2572
[2020-11-25 08:44:34,751 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2572
[2020-11-25 08:44:34,751 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9424 states and 11207 transitions.
[2020-11-25 08:44:34,757 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:44:34,757 INFO  L728         BuchiCegarLoop]: Abstraction has 9424 states and 11207 transitions.
[2020-11-25 08:44:34,762 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9424 states and 11207 transitions.
[2020-11-25 08:44:34,809 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9424 to 9300.
[2020-11-25 08:44:34,810 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9300 states.
[2020-11-25 08:44:34,821 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9300 states to 9300 states and 10991 transitions.
[2020-11-25 08:44:34,821 INFO  L751         BuchiCegarLoop]: Abstraction has 9300 states and 10991 transitions.
[2020-11-25 08:44:34,821 INFO  L631         BuchiCegarLoop]: Abstraction has 9300 states and 10991 transitions.
[2020-11-25 08:44:34,821 INFO  L445         BuchiCegarLoop]: ======== Iteration 26============
[2020-11-25 08:44:34,821 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9300 states and 10991 transitions.
[2020-11-25 08:44:34,832 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 20
[2020-11-25 08:44:34,832 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:44:34,832 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:44:34,833 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:44:34,833 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_ERC20Pausable0 := false;
[L2]                  call_transfer_ERC20Pausable0 := false;
[L2]      CALL        call main();
[L11211]              assume null == 0;
[L11212]  CALL        call this := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L11212]  RET         call this := FreshRefGenerator__success();
[L11213]              assume now >= 0;
[L11214]              assume DType[this] == Wafl;
[L11215]              assume msgvalue_MSG == 0;
[L11216]              gas := gas - 53000;
[L11217]  CALL        call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L3134]               havoc __exception;
[L3135]               revert := false;
[L3136]   COND FALSE  !(__exception)
[L3164]   CALL        call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L7163]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L7163]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7164]   COND FALSE  !(revert)
[L7167]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L7167]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7168]   COND FALSE  !(revert)
[L7171]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L5753]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L5753]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]   COND FALSE  !(revert)
[L5757]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5728]               assume msgsender_MSG != null;
[L5729]               Balance[this] := 0;
[L5730]               _name_ERC20Detailed[this] := -1545721152;
[L5731]               _symbol_ERC20Detailed[this] := -1545721152;
[L5732]               _decimals_ERC20Detailed[this] := 0;
[L5734]               _name_ERC20Detailed[this] := name_s731;
[L5735]               _symbol_ERC20Detailed[this] := symbol_s731;
[L5736]               _decimals_ERC20Detailed[this] := decimals_s731;
[L5757]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5758]   COND FALSE  !(revert)
[L7171]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L7172]   COND FALSE  !(revert)
[L7175]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L7175]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7176]   COND FALSE  !(revert)
[L7179]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L7179]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7180]   COND FALSE  !(revert)
[L7183]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6329]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6329]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6330]   COND FALSE  !(revert)
[L6333]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6333]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6334]   COND FALSE  !(revert)
[L6337]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6337]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   COND FALSE  !(revert)
[L6341]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L6341]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6342]   COND FALSE  !(revert)
[L6345]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6298]               assume msgsender_MSG != null;
[L6299]               Balance[this] := 0;
[L6345]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6346]   COND FALSE  !(revert)
[L7183]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7184]   COND FALSE  !(revert)
[L7187]   CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6973]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6974]   COND FALSE  !(revert)
[L6977]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6977]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6978]   COND FALSE  !(revert)
[L6981]   CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6950]               assume msgsender_MSG != null;
[L6951]               Balance[this] := 0;
[L6981]   RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6982]   COND FALSE  !(revert)
[L7187]   RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7188]   COND FALSE  !(revert)
[L7191]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND TRUE   DType[this] == Wafl
[L6648]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6648]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6649]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L7191]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7192]   COND FALSE  !(revert)
[L7195]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6875]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6875]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6876]   COND FALSE  !(revert)
[L6879]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6879]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6880]   COND FALSE  !(revert)
[L6883]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND TRUE   DType[this] == Wafl
[L6648]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6648]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6649]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L6883]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6884]   COND FALSE  !(revert)
[L6887]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6848]               assume msgsender_MSG != null;
[L6849]               Balance[this] := 0;
[L6887]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6888]   COND FALSE  !(revert)
[L7195]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L7196]   COND FALSE  !(revert)
[L7199]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4717]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4699]               assume msgsender_MSG != null;
[L4700]               Balance[this] := 0;
[L4701]               _owner_Ownable[this] := null;
[L4703]               _owner_Ownable[this] := msgsender_MSG;
[L4704]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L4717]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4718]   COND FALSE  !(revert)
[L7199]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7200]   COND FALSE  !(revert)
[L7203]   CALL        call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7087]               assume msgsender_MSG != null;
[L7088]               Balance[this] := 0;
[L7090]   COND TRUE   DType[this] == Wafl
[L7091]   CALL        call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L5795]               __ret_0_ := _decimals_ERC20Detailed[this];
[L7091]   RET         call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L7092]   COND FALSE  !(revert)
[L7098]               __var_39 := __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7099]   COND TRUE   DType[this] == Wafl
[L7100]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5473]               __var_11 := null;
[L5474]   COND FALSE  !(!(account_s587 != null))
[L5478]   CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5478]   RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L5479]   COND FALSE  !(revert)
[L5482]               _totalSupply_ERC20[this] := __var_12;
[L5483]   CALL        call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5483]   RET         call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L5484]   COND FALSE  !(revert)
[L5487]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s587];
[L5488]               _balances_ERC20[this][account_s587] := __var_13;
[L5489]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s587];
[L5490]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7100]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7101]   COND FALSE  !(revert)
[L7203]   RET         call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7204]   COND FALSE  !(revert)
[L3164]   RET         call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L3165]               assume !revert && gas >= 0;
[L11217]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L11218]              assume !revert && gas >= 0;
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND TRUE   choice == 21
[L11070]              gas := gas - 21000;
[L11071]  COND TRUE   gas >= 0
[L11072]              assume value_s1040 >= 0 && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11073]              assume msgvalue_MSG == 0;
[L11074]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1040 && value_s1040 <= _balances_ERC20[this][msgsender_MSG]) && value_s1040 >= 0) && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1040] >= 0) && _balances_ERC20[this][to_s1040] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ERC20Pausable0 := true;
[L2]                  call_transfer_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2158]               havoc __exception;
[L2159]               revert := false;
[L2160]   COND TRUE   __exception
[L2161]               __tmp__Balance := Balance;
[L2162]               __tmp__DType := DType;
[L2163]               __tmp__Alloc := Alloc;
[L2164]               __tmp__balance_ADDR := balance_ADDR;
[L2165]               __tmp__M_Ref_int := M_Ref_int;
[L2166]               __tmp__sum__balances0 := sum__balances0;
[L2167]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2168]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L2169]               __tmp__sum__allowances1 := sum__allowances1;
[L2170]               __tmp__M_Ref_bool := M_Ref_bool;
[L2171]               __tmp__sum := sum;
[L2172]               __tmp__Length := Length;
[L2173]               __tmp__now := now;
[L2174]               __tmp___owner_Ownable := _owner_Ownable;
[L2175]               __tmp___balances_ERC20 := _balances_ERC20;
[L2176]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L2177]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2178]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2179]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2180]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2181]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2182]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2183]               __tmp___paused_Pausable := _paused_Pausable;
[L2184]               __tmp___minters_MinterRole := _minters_MinterRole;
[L2185]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6355]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9495]   COND FALSE  !(!!__tmp___paused_Pausable[this])
[L6355]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6356]   COND FALSE  !(revert)
[L6359]   COND TRUE   __tmp__DType[this] == Wafl
[L6360]   CALL        call __var_26 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L4943]   COND TRUE   __tmp__DType[this] == Wafl
[L4944]   CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s364, amount_s364);
[L5385]               __var_7 := null;
[L5386]   COND FALSE  !(!(sender_s544 != null))
[L5390]               __var_8 := null;
[L5391]   COND FALSE  !(!(recipient_s544 != null))
[L5395]   CALL        call __var_9 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s544], amount_s544);
[L4589]   COND FALSE  !(!(b_s51 <= a_s51))
[L4593]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4594]               __ret_0_ := c_s51;
[L5395]   RET         call __var_9 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s544], amount_s544);
[L5396]   COND FALSE  !(revert)
[L5399]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][sender_s544];
[L5400]               __tmp___balances_ERC20[this][sender_s544] := __var_9;
[L5401]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][sender_s544];
[L5402]   CALL        call __var_10 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s544], amount_s544);
[L4565]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4566]   COND FALSE  !(!(c_s26 >= a_s26))
[L4570]               __ret_0_ := c_s26;
[L5402]   RET         call __var_10 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s544], amount_s544);
[L5403]   COND FALSE  !(revert)
[L5406]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][recipient_s544];
[L5407]               __tmp___balances_ERC20[this][recipient_s544] := __var_10;
[L5408]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][recipient_s544];
[L4944]   RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s364, amount_s364);
[L4945]   COND FALSE  !(revert)
[L4971]               __ret_0_ := true;
[L6360]   RET         call __var_26 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6361]   COND FALSE  !(revert)
[L6372]               __ret_0_ := __var_26;
[L2185]   RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2186]               assume revert || gas < 0;
[L11074]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L11221]  RET         call CorralChoice_Wafl(this);

Loop:
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND TRUE   choice == 21
[L11070]              gas := gas - 21000;
[L11071]  COND TRUE   gas >= 0
[L11072]              assume value_s1040 >= 0 && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11073]              assume msgvalue_MSG == 0;
[L11074]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1040 && value_s1040 <= _balances_ERC20[this][msgsender_MSG]) && value_s1040 >= 0) && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1040] >= 0) && _balances_ERC20[this][to_s1040] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ERC20Pausable0 := true;
[L2]                  call_transfer_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2158]               havoc __exception;
[L2159]               revert := false;
[L2160]   COND TRUE   __exception
[L2161]               __tmp__Balance := Balance;
[L2162]               __tmp__DType := DType;
[L2163]               __tmp__Alloc := Alloc;
[L2164]               __tmp__balance_ADDR := balance_ADDR;
[L2165]               __tmp__M_Ref_int := M_Ref_int;
[L2166]               __tmp__sum__balances0 := sum__balances0;
[L2167]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2168]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L2169]               __tmp__sum__allowances1 := sum__allowances1;
[L2170]               __tmp__M_Ref_bool := M_Ref_bool;
[L2171]               __tmp__sum := sum;
[L2172]               __tmp__Length := Length;
[L2173]               __tmp__now := now;
[L2174]               __tmp___owner_Ownable := _owner_Ownable;
[L2175]               __tmp___balances_ERC20 := _balances_ERC20;
[L2176]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L2177]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2178]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2179]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2180]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2181]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2182]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2183]               __tmp___paused_Pausable := _paused_Pausable;
[L2184]               __tmp___minters_MinterRole := _minters_MinterRole;
[L2185]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6355]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9495]   COND FALSE  !(!!__tmp___paused_Pausable[this])
[L6355]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6356]   COND FALSE  !(revert)
[L6359]   COND TRUE   __tmp__DType[this] == Wafl
[L6360]   CALL        call __var_26 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L4943]   COND TRUE   __tmp__DType[this] == Wafl
[L4944]   CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s364, amount_s364);
[L5385]               __var_7 := null;
[L5386]   COND FALSE  !(!(sender_s544 != null))
[L5390]               __var_8 := null;
[L5391]   COND FALSE  !(!(recipient_s544 != null))
[L5395]   CALL        call __var_9 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s544], amount_s544);
[L4589]   COND FALSE  !(!(b_s51 <= a_s51))
[L4593]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4594]               __ret_0_ := c_s51;
[L5395]   RET         call __var_9 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s544], amount_s544);
[L5396]   COND FALSE  !(revert)
[L5399]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][sender_s544];
[L5400]               __tmp___balances_ERC20[this][sender_s544] := __var_9;
[L5401]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][sender_s544];
[L5402]   CALL        call __var_10 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s544], amount_s544);
[L4565]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4566]   COND FALSE  !(!(c_s26 >= a_s26))
[L4570]               __ret_0_ := c_s26;
[L5402]   RET         call __var_10 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s544], amount_s544);
[L5403]   COND FALSE  !(revert)
[L5406]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][recipient_s544];
[L5407]               __tmp___balances_ERC20[this][recipient_s544] := __var_10;
[L5408]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][recipient_s544];
[L4944]   RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s364, amount_s364);
[L4945]   COND FALSE  !(revert)
[L4971]               __ret_0_ := true;
[L6360]   RET         call __var_26 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6361]   COND FALSE  !(revert)
[L6372]               __ret_0_ := __var_26;
[L2185]   RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2186]               assume revert || gas < 0;
[L11074]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L11221]  RET         call CorralChoice_Wafl(this);

[2020-11-25 08:44:34,838 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:44:34,838 INFO  L82        PathProgramCache]: Analyzing trace with hash 745554900, now seen corresponding path program 1 times
[2020-11-25 08:44:34,839 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:44:34,856 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:44:35,024 INFO  L134       CoverageAnalysis]: Checked inductivity of 1005 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1005 trivial. 0 not checked.
[2020-11-25 08:44:35,024 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:44:35,025 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-25 08:44:35,025 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:44:35,025 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-25 08:44:35,025 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-11-25 08:44:35,025 INFO  L87              Difference]: Start difference. First operand 9300 states and 10991 transitions. cyclomatic complexity: 1699 Second operand 5 states.
[2020-11-25 08:44:37,255 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:44:37,255 INFO  L93              Difference]: Finished difference Result 10908 states and 13137 transitions.
[2020-11-25 08:44:37,256 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 08:44:37,256 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 10908 states and 13137 transitions.
[2020-11-25 08:44:37,284 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 44
[2020-11-25 08:44:37,311 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 10908 states to 9826 states and 11948 transitions.
[2020-11-25 08:44:37,311 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2173
[2020-11-25 08:44:37,312 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2173
[2020-11-25 08:44:37,312 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9826 states and 11948 transitions.
[2020-11-25 08:44:37,319 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:44:37,319 INFO  L728         BuchiCegarLoop]: Abstraction has 9826 states and 11948 transitions.
[2020-11-25 08:44:37,324 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9826 states and 11948 transitions.
[2020-11-25 08:44:37,373 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9826 to 8470.
[2020-11-25 08:44:37,373 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8470 states.
[2020-11-25 08:44:37,383 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8470 states to 8470 states and 10015 transitions.
[2020-11-25 08:44:37,383 INFO  L751         BuchiCegarLoop]: Abstraction has 8470 states and 10015 transitions.
[2020-11-25 08:44:37,384 INFO  L631         BuchiCegarLoop]: Abstraction has 8470 states and 10015 transitions.
[2020-11-25 08:44:37,384 INFO  L445         BuchiCegarLoop]: ======== Iteration 27============
[2020-11-25 08:44:37,384 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8470 states and 10015 transitions.
[2020-11-25 08:44:37,392 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 16
[2020-11-25 08:44:37,392 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:44:37,392 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:44:37,394 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:44:37,394 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_ERC20Pausable0 := false;
[L2]                  call_transfer_ERC20Pausable0 := false;
[L2]      CALL        call main();
[L11211]              assume null == 0;
[L11212]  CALL        call this := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L11212]  RET         call this := FreshRefGenerator__success();
[L11213]              assume now >= 0;
[L11214]              assume DType[this] == Wafl;
[L11215]              assume msgvalue_MSG == 0;
[L11216]              gas := gas - 53000;
[L11217]  CALL        call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L3134]               havoc __exception;
[L3135]               revert := false;
[L3136]   COND FALSE  !(__exception)
[L3164]   CALL        call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L7163]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L7163]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7164]   COND FALSE  !(revert)
[L7167]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L7167]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7168]   COND FALSE  !(revert)
[L7171]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L5753]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L5753]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]   COND FALSE  !(revert)
[L5757]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5728]               assume msgsender_MSG != null;
[L5729]               Balance[this] := 0;
[L5730]               _name_ERC20Detailed[this] := -1545721152;
[L5731]               _symbol_ERC20Detailed[this] := -1545721152;
[L5732]               _decimals_ERC20Detailed[this] := 0;
[L5734]               _name_ERC20Detailed[this] := name_s731;
[L5735]               _symbol_ERC20Detailed[this] := symbol_s731;
[L5736]               _decimals_ERC20Detailed[this] := decimals_s731;
[L5757]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5758]   COND FALSE  !(revert)
[L7171]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L7172]   COND FALSE  !(revert)
[L7175]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L7175]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7176]   COND FALSE  !(revert)
[L7179]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L7179]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7180]   COND FALSE  !(revert)
[L7183]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6329]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6329]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6330]   COND FALSE  !(revert)
[L6333]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6333]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6334]   COND FALSE  !(revert)
[L6337]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6337]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   COND FALSE  !(revert)
[L6341]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L6341]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6342]   COND FALSE  !(revert)
[L6345]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6298]               assume msgsender_MSG != null;
[L6299]               Balance[this] := 0;
[L6345]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6346]   COND FALSE  !(revert)
[L7183]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7184]   COND FALSE  !(revert)
[L7187]   CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6973]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6974]   COND FALSE  !(revert)
[L6977]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6977]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6978]   COND FALSE  !(revert)
[L6981]   CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6950]               assume msgsender_MSG != null;
[L6951]               Balance[this] := 0;
[L6981]   RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6982]   COND FALSE  !(revert)
[L7187]   RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7188]   COND FALSE  !(revert)
[L7191]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND TRUE   DType[this] == Wafl
[L6648]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6648]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6649]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L7191]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7192]   COND FALSE  !(revert)
[L7195]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6875]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6875]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6876]   COND FALSE  !(revert)
[L6879]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6879]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6880]   COND FALSE  !(revert)
[L6883]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND TRUE   DType[this] == Wafl
[L6648]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6648]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6649]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L6883]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6884]   COND FALSE  !(revert)
[L6887]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6848]               assume msgsender_MSG != null;
[L6849]               Balance[this] := 0;
[L6887]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6888]   COND FALSE  !(revert)
[L7195]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L7196]   COND FALSE  !(revert)
[L7199]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4717]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4699]               assume msgsender_MSG != null;
[L4700]               Balance[this] := 0;
[L4701]               _owner_Ownable[this] := null;
[L4703]               _owner_Ownable[this] := msgsender_MSG;
[L4704]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L4717]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4718]   COND FALSE  !(revert)
[L7199]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7200]   COND FALSE  !(revert)
[L7203]   CALL        call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7087]               assume msgsender_MSG != null;
[L7088]               Balance[this] := 0;
[L7090]   COND TRUE   DType[this] == Wafl
[L7091]   CALL        call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L5795]               __ret_0_ := _decimals_ERC20Detailed[this];
[L7091]   RET         call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L7092]   COND FALSE  !(revert)
[L7098]               __var_39 := __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7099]   COND TRUE   DType[this] == Wafl
[L7100]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5473]               __var_11 := null;
[L5474]   COND FALSE  !(!(account_s587 != null))
[L5478]   CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5478]   RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L5479]   COND FALSE  !(revert)
[L5482]               _totalSupply_ERC20[this] := __var_12;
[L5483]   CALL        call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5483]   RET         call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L5484]   COND FALSE  !(revert)
[L5487]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s587];
[L5488]               _balances_ERC20[this][account_s587] := __var_13;
[L5489]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s587];
[L5490]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7100]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7101]   COND FALSE  !(revert)
[L7203]   RET         call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7204]   COND FALSE  !(revert)
[L3164]   RET         call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L3165]               assume !revert && gas >= 0;
[L11217]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L11218]              assume !revert && gas >= 0;
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND FALSE  !(choice == 21)
[L11076]  COND FALSE  !(choice == 20)
[L11082]  COND FALSE  !(choice == 19)
[L11089]  COND FALSE  !(choice == 18)
[L11096]  COND FALSE  !(choice == 17)
[L11103]  COND FALSE  !(choice == 16)
[L11110]  COND FALSE  !(choice == 15)
[L11116]  COND FALSE  !(choice == 14)
[L11122]  COND FALSE  !(choice == 13)
[L11128]  COND FALSE  !(choice == 12)
[L11134]  COND FALSE  !(choice == 11)
[L11140]  COND FALSE  !(choice == 10)
[L11146]  COND FALSE  !(choice == 9)
[L11152]  COND FALSE  !(choice == 8)
[L11158]  COND FALSE  !(choice == 7)
[L11164]  COND FALSE  !(choice == 6)
[L11170]  COND FALSE  !(choice == 5)
[L11176]  COND FALSE  !(choice == 4)
[L11182]  COND FALSE  !(choice == 3)
[L11189]  COND TRUE   choice == 2
[L11190]              gas := gas - 21000;
[L11191]  COND TRUE   gas >= 0
[L11192]              assume amount_s1255 >= 0 && amount_s1255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11193]              assume msgvalue_MSG == 0;
[L11194]  CALL        call burn~uint256_ERC20Burnable(this, msgsender_MSG, msgvalue_MSG, amount_s1255);
[L2980]               havoc __exception;
[L2981]               revert := false;
[L2982]   COND FALSE  !(__exception)
[L3010]   CALL        call burn~uint256_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG, amount_s1255);
[L7006]   COND TRUE   DType[this] == Wafl
[L7007]   CALL        call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s1255);
[L5522]               __var_14 := null;
[L5523]   COND FALSE  !(!(account_s630 != null))
[L5527]   CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s630);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5527]   RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s630);
[L5528]   COND FALSE  !(revert)
[L5531]               _totalSupply_ERC20[this] := __var_15;
[L5532]   CALL        call __var_16 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s630], value_s630);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5532]   RET         call __var_16 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s630], value_s630);
[L5533]   COND FALSE  !(revert)
[L5536]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s630];
[L5537]               _balances_ERC20[this][account_s630] := __var_16;
[L5538]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s630];
[L5539]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7007]   RET         call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s1255);
[L7008]   COND FALSE  !(revert)
[L3010]   RET         call burn~uint256_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG, amount_s1255);
[L3011]               assume !revert && gas >= 0;
[L11194]  RET         call burn~uint256_ERC20Burnable(this, msgsender_MSG, msgvalue_MSG, amount_s1255);
[L11221]  RET         call CorralChoice_Wafl(this);
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND TRUE   choice == 21
[L11070]              gas := gas - 21000;
[L11071]  COND TRUE   gas >= 0
[L11072]              assume value_s1040 >= 0 && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11073]              assume msgvalue_MSG == 0;
[L11074]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1040 && value_s1040 <= _balances_ERC20[this][msgsender_MSG]) && value_s1040 >= 0) && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1040] >= 0) && _balances_ERC20[this][to_s1040] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ERC20Pausable0 := true;
[L2]                  call_transfer_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2158]               havoc __exception;
[L2159]               revert := false;
[L2160]   COND FALSE  !(__exception)
[L2188]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6380]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9503]   COND FALSE  !(!!_paused_Pausable[this])
[L6380]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6381]   COND FALSE  !(revert)
[L6384]   COND TRUE   DType[this] == Wafl
[L6385]   CALL        call __var_26 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L4977]   COND TRUE   DType[this] == Wafl
[L4978]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s364, amount_s364);
[L5417]               __var_7 := null;
[L5418]   COND FALSE  !(!(sender_s544 != null))
[L5422]               __var_8 := null;
[L5423]   COND FALSE  !(!(recipient_s544 != null))
[L5427]   CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5427]   RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L5428]   COND FALSE  !(revert)
[L5431]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s544];
[L5432]               _balances_ERC20[this][sender_s544] := __var_9;
[L5433]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s544];
[L5434]   CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5434]   RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L5435]   COND FALSE  !(revert)
[L5438]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s544];
[L5439]               _balances_ERC20[this][recipient_s544] := __var_10;
[L5440]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s544];
[L5441]               assert { :EventEmitted "Transfer_ERC20" } true;
[L4978]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s364, amount_s364);
[L4979]   COND FALSE  !(revert)
[L5005]               __ret_0_ := true;
[L6385]   RET         call __var_26 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6386]   COND FALSE  !(revert)
[L6397]               __ret_0_ := __var_26;
[L2188]   RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2189]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _owner_Ownable[this] == old(_owner_Ownable[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L11074]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L11221]  RET         call CorralChoice_Wafl(this);

Loop:
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND TRUE   choice == 27
[L11034]              gas := gas - 21000;
[L11035]  COND FALSE  !(gas >= 0)
[L11221]  RET         call CorralChoice_Wafl(this);

[2020-11-25 08:44:37,398 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:44:37,398 INFO  L82        PathProgramCache]: Analyzing trace with hash 1364196097, now seen corresponding path program 1 times
[2020-11-25 08:44:37,399 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:44:37,458 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:44:37,973 INFO  L134       CoverageAnalysis]: Checked inductivity of 1087 backedges. 76 proven. 0 refuted. 0 times theorem prover too weak. 1011 trivial. 0 not checked.
[2020-11-25 08:44:37,974 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:44:37,974 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [18] imperfect sequences [] total 18
[2020-11-25 08:44:37,974 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:44:37,974 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 18 interpolants.
[2020-11-25 08:44:37,974 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=42, Invalid=264, Unknown=0, NotChecked=0, Total=306
[2020-11-25 08:44:37,975 INFO  L87              Difference]: Start difference. First operand 8470 states and 10015 transitions. cyclomatic complexity: 1555 Second operand 18 states.
[2020-11-25 08:44:51,973 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:44:51,973 INFO  L93              Difference]: Finished difference Result 8450 states and 9960 transitions.
[2020-11-25 08:44:51,973 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 18 states. 
[2020-11-25 08:44:51,973 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8450 states and 9960 transitions.
[2020-11-25 08:44:51,991 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 10
[2020-11-25 08:44:52,007 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8450 states to 8438 states and 9946 transitions.
[2020-11-25 08:44:52,007 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1961
[2020-11-25 08:44:52,008 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1961
[2020-11-25 08:44:52,008 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8438 states and 9946 transitions.
[2020-11-25 08:44:52,013 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:44:52,013 INFO  L728         BuchiCegarLoop]: Abstraction has 8438 states and 9946 transitions.
[2020-11-25 08:44:52,018 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8438 states and 9946 transitions.
[2020-11-25 08:44:52,044 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8438 to 5526.
[2020-11-25 08:44:52,044 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5526 states.
[2020-11-25 08:44:52,051 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5526 states to 5526 states and 6367 transitions.
[2020-11-25 08:44:52,051 INFO  L751         BuchiCegarLoop]: Abstraction has 5526 states and 6367 transitions.
[2020-11-25 08:44:52,051 INFO  L631         BuchiCegarLoop]: Abstraction has 5526 states and 6367 transitions.
[2020-11-25 08:44:52,051 INFO  L445         BuchiCegarLoop]: ======== Iteration 28============
[2020-11-25 08:44:52,051 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5526 states and 6367 transitions.
[2020-11-25 08:44:52,057 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:44:52,058 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:44:52,058 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:44:52,060 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:44:52,060 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_ERC20Pausable0 := false;
[L2]                  call_transfer_ERC20Pausable0 := false;
[L2]      CALL        call main();
[L11211]              assume null == 0;
[L11212]  CALL        call this := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L11212]  RET         call this := FreshRefGenerator__success();
[L11213]              assume now >= 0;
[L11214]              assume DType[this] == Wafl;
[L11215]              assume msgvalue_MSG == 0;
[L11216]              gas := gas - 53000;
[L11217]  CALL        call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L3134]               havoc __exception;
[L3135]               revert := false;
[L3136]   COND FALSE  !(__exception)
[L3164]   CALL        call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L7163]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L7163]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7164]   COND FALSE  !(revert)
[L7167]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L7167]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7168]   COND FALSE  !(revert)
[L7171]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L5753]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L5753]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]   COND FALSE  !(revert)
[L5757]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5728]               assume msgsender_MSG != null;
[L5729]               Balance[this] := 0;
[L5730]               _name_ERC20Detailed[this] := -1545721152;
[L5731]               _symbol_ERC20Detailed[this] := -1545721152;
[L5732]               _decimals_ERC20Detailed[this] := 0;
[L5734]               _name_ERC20Detailed[this] := name_s731;
[L5735]               _symbol_ERC20Detailed[this] := symbol_s731;
[L5736]               _decimals_ERC20Detailed[this] := decimals_s731;
[L5757]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5758]   COND FALSE  !(revert)
[L7171]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L7172]   COND FALSE  !(revert)
[L7175]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L7175]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7176]   COND FALSE  !(revert)
[L7179]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L7179]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7180]   COND FALSE  !(revert)
[L7183]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6329]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6329]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6330]   COND FALSE  !(revert)
[L6333]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6333]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6334]   COND FALSE  !(revert)
[L6337]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6337]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   COND FALSE  !(revert)
[L6341]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L6341]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6342]   COND FALSE  !(revert)
[L6345]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6298]               assume msgsender_MSG != null;
[L6299]               Balance[this] := 0;
[L6345]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6346]   COND FALSE  !(revert)
[L7183]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7184]   COND FALSE  !(revert)
[L7187]   CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6973]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6974]   COND FALSE  !(revert)
[L6977]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6977]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6978]   COND FALSE  !(revert)
[L6981]   CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6950]               assume msgsender_MSG != null;
[L6951]               Balance[this] := 0;
[L6981]   RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6982]   COND FALSE  !(revert)
[L7187]   RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7188]   COND FALSE  !(revert)
[L7191]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND TRUE   DType[this] == Wafl
[L6648]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6648]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6649]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L7191]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7192]   COND FALSE  !(revert)
[L7195]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6875]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6875]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6876]   COND FALSE  !(revert)
[L6879]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6879]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6880]   COND FALSE  !(revert)
[L6883]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND TRUE   DType[this] == Wafl
[L6648]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6648]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6649]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L6883]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6884]   COND FALSE  !(revert)
[L6887]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6848]               assume msgsender_MSG != null;
[L6849]               Balance[this] := 0;
[L6887]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6888]   COND FALSE  !(revert)
[L7195]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L7196]   COND FALSE  !(revert)
[L7199]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4717]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4699]               assume msgsender_MSG != null;
[L4700]               Balance[this] := 0;
[L4701]               _owner_Ownable[this] := null;
[L4703]               _owner_Ownable[this] := msgsender_MSG;
[L4704]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L4717]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4718]   COND FALSE  !(revert)
[L7199]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7200]   COND FALSE  !(revert)
[L7203]   CALL        call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7087]               assume msgsender_MSG != null;
[L7088]               Balance[this] := 0;
[L7090]   COND TRUE   DType[this] == Wafl
[L7091]   CALL        call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L5795]               __ret_0_ := _decimals_ERC20Detailed[this];
[L7091]   RET         call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L7092]   COND FALSE  !(revert)
[L7098]               __var_39 := __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7099]   COND TRUE   DType[this] == Wafl
[L7100]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5473]               __var_11 := null;
[L5474]   COND FALSE  !(!(account_s587 != null))
[L5478]   CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5478]   RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L5479]   COND FALSE  !(revert)
[L5482]               _totalSupply_ERC20[this] := __var_12;
[L5483]   CALL        call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5483]   RET         call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L5484]   COND FALSE  !(revert)
[L5487]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s587];
[L5488]               _balances_ERC20[this][account_s587] := __var_13;
[L5489]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s587];
[L5490]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7100]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7101]   COND FALSE  !(revert)
[L7203]   RET         call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7204]   COND FALSE  !(revert)
[L3164]   RET         call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L3165]               assume !revert && gas >= 0;
[L11217]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L11218]              assume !revert && gas >= 0;
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND FALSE  !(choice == 21)
[L11076]  COND FALSE  !(choice == 20)
[L11082]  COND FALSE  !(choice == 19)
[L11089]  COND FALSE  !(choice == 18)
[L11096]  COND FALSE  !(choice == 17)
[L11103]  COND FALSE  !(choice == 16)
[L11110]  COND FALSE  !(choice == 15)
[L11116]  COND FALSE  !(choice == 14)
[L11122]  COND FALSE  !(choice == 13)
[L11128]  COND FALSE  !(choice == 12)
[L11134]  COND FALSE  !(choice == 11)
[L11140]  COND FALSE  !(choice == 10)
[L11146]  COND FALSE  !(choice == 9)
[L11152]  COND FALSE  !(choice == 8)
[L11158]  COND TRUE   choice == 7
[L11159]              gas := gas - 21000;
[L11160]  COND TRUE   gas >= 0
[L11161]              assume msgvalue_MSG == 0;
[L11162]  CALL        call unpause_Pausable(this, msgsender_MSG, msgvalue_MSG);
[L2016]               havoc __exception;
[L2017]               revert := false;
[L2018]   COND FALSE  !(__exception)
[L2046]   CALL        call unpause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6275]   CALL        call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9464]   COND FALSE  !(DType[this] == Wafl)
[L9469]   COND TRUE   DType[this] == ERC20Pausable
[L9470]   CALL        call __var_24 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6019]   CALL        call __var_25 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s882);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L6019]   RET         call __var_25 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s882);
[L6020]   COND FALSE  !(revert)
[L6023]               __ret_0_ := __var_25;
[L9470]   RET         call __var_24 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L9471]   COND FALSE  !(revert)
[L9487]   COND FALSE  !(!__var_24)
[L6275]   RET         call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6276]   COND FALSE  !(revert)
[L6279]   CALL        call whenPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9519]   COND FALSE  !(!_paused_Pausable[this])
[L6279]   RET         call whenPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6280]   COND FALSE  !(revert)
[L6283]               _paused_Pausable[this] := false;
[L6284]               assert { :EventEmitted "Unpaused_Pausable" } true;
[L2046]   RET         call unpause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L2047]               assume !revert && gas >= 0;
[L11162]  RET         call unpause_Pausable(this, msgsender_MSG, msgvalue_MSG);
[L11221]  RET         call CorralChoice_Wafl(this);
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND TRUE   choice == 21
[L11070]              gas := gas - 21000;
[L11071]  COND TRUE   gas >= 0
[L11072]              assume value_s1040 >= 0 && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11073]              assume msgvalue_MSG == 0;
[L11074]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1040 && value_s1040 <= _balances_ERC20[this][msgsender_MSG]) && value_s1040 >= 0) && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1040] >= 0) && _balances_ERC20[this][to_s1040] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ERC20Pausable0 := true;
[L2]                  call_transfer_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2158]               havoc __exception;
[L2159]               revert := false;
[L2160]   COND TRUE   __exception
[L2161]               __tmp__Balance := Balance;
[L2162]               __tmp__DType := DType;
[L2163]               __tmp__Alloc := Alloc;
[L2164]               __tmp__balance_ADDR := balance_ADDR;
[L2165]               __tmp__M_Ref_int := M_Ref_int;
[L2166]               __tmp__sum__balances0 := sum__balances0;
[L2167]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2168]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L2169]               __tmp__sum__allowances1 := sum__allowances1;
[L2170]               __tmp__M_Ref_bool := M_Ref_bool;
[L2171]               __tmp__sum := sum;
[L2172]               __tmp__Length := Length;
[L2173]               __tmp__now := now;
[L2174]               __tmp___owner_Ownable := _owner_Ownable;
[L2175]               __tmp___balances_ERC20 := _balances_ERC20;
[L2176]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L2177]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2178]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2179]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2180]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2181]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2182]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2183]               __tmp___paused_Pausable := _paused_Pausable;
[L2184]               __tmp___minters_MinterRole := _minters_MinterRole;
[L2185]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6355]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9495]   COND TRUE   !!__tmp___paused_Pausable[this]
[L9496]               revert := true;
[L6355]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6356]   COND TRUE   revert
[L2185]   RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2186]               assume revert || gas < 0;
[L11074]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L11221]  RET         call CorralChoice_Wafl(this);

Loop:
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND TRUE   choice == 21
[L11070]              gas := gas - 21000;
[L11071]  COND TRUE   gas >= 0
[L11072]              assume value_s1040 >= 0 && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11073]              assume msgvalue_MSG == 0;
[L11074]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1040 && value_s1040 <= _balances_ERC20[this][msgsender_MSG]) && value_s1040 >= 0) && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1040] >= 0) && _balances_ERC20[this][to_s1040] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ERC20Pausable0 := true;
[L2]                  call_transfer_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2158]               havoc __exception;
[L2159]               revert := false;
[L2160]   COND TRUE   __exception
[L2161]               __tmp__Balance := Balance;
[L2162]               __tmp__DType := DType;
[L2163]               __tmp__Alloc := Alloc;
[L2164]               __tmp__balance_ADDR := balance_ADDR;
[L2165]               __tmp__M_Ref_int := M_Ref_int;
[L2166]               __tmp__sum__balances0 := sum__balances0;
[L2167]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2168]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L2169]               __tmp__sum__allowances1 := sum__allowances1;
[L2170]               __tmp__M_Ref_bool := M_Ref_bool;
[L2171]               __tmp__sum := sum;
[L2172]               __tmp__Length := Length;
[L2173]               __tmp__now := now;
[L2174]               __tmp___owner_Ownable := _owner_Ownable;
[L2175]               __tmp___balances_ERC20 := _balances_ERC20;
[L2176]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L2177]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2178]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2179]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2180]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2181]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2182]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2183]               __tmp___paused_Pausable := _paused_Pausable;
[L2184]               __tmp___minters_MinterRole := _minters_MinterRole;
[L2185]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6355]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9495]   COND TRUE   !!__tmp___paused_Pausable[this]
[L9496]               revert := true;
[L6355]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6356]   COND TRUE   revert
[L2185]   RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2186]               assume revert || gas < 0;
[L11074]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L11221]  RET         call CorralChoice_Wafl(this);

[2020-11-25 08:44:52,064 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:44:52,064 INFO  L82        PathProgramCache]: Analyzing trace with hash -237836531, now seen corresponding path program 1 times
[2020-11-25 08:44:52,065 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:44:52,086 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:44:52,351 INFO  L134       CoverageAnalysis]: Checked inductivity of 1112 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 1111 trivial. 0 not checked.
[2020-11-25 08:44:52,351 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:44:52,351 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 08:44:52,351 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:44:52,352 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 08:44:52,352 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 08:44:52,352 INFO  L87              Difference]: Start difference. First operand 5526 states and 6367 transitions. cyclomatic complexity: 844 Second operand 7 states.
[2020-11-25 08:44:52,527 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:44:52,527 INFO  L93              Difference]: Finished difference Result 5564 states and 6409 transitions.
[2020-11-25 08:44:52,527 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 08:44:52,527 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5564 states and 6409 transitions.
[2020-11-25 08:44:52,536 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:44:52,544 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5564 states to 5532 states and 6375 transitions.
[2020-11-25 08:44:52,544 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1228
[2020-11-25 08:44:52,545 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1228
[2020-11-25 08:44:52,545 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5532 states and 6375 transitions.
[2020-11-25 08:44:52,548 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:44:52,548 INFO  L728         BuchiCegarLoop]: Abstraction has 5532 states and 6375 transitions.
[2020-11-25 08:44:52,552 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5532 states and 6375 transitions.
[2020-11-25 08:44:52,571 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5532 to 5532.
[2020-11-25 08:44:52,571 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5532 states.
[2020-11-25 08:44:52,576 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5532 states to 5532 states and 6375 transitions.
[2020-11-25 08:44:52,576 INFO  L751         BuchiCegarLoop]: Abstraction has 5532 states and 6375 transitions.
[2020-11-25 08:44:52,576 INFO  L631         BuchiCegarLoop]: Abstraction has 5532 states and 6375 transitions.
[2020-11-25 08:44:52,576 INFO  L445         BuchiCegarLoop]: ======== Iteration 29============
[2020-11-25 08:44:52,576 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5532 states and 6375 transitions.
[2020-11-25 08:44:52,581 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:44:52,581 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:44:52,581 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:44:52,583 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:44:52,583 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_ERC20Pausable0 := false;
[L2]                  call_transfer_ERC20Pausable0 := false;
[L2]      CALL        call main();
[L11211]              assume null == 0;
[L11212]  CALL        call this := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L11212]  RET         call this := FreshRefGenerator__success();
[L11213]              assume now >= 0;
[L11214]              assume DType[this] == Wafl;
[L11215]              assume msgvalue_MSG == 0;
[L11216]              gas := gas - 53000;
[L11217]  CALL        call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L3134]               havoc __exception;
[L3135]               revert := false;
[L3136]   COND FALSE  !(__exception)
[L3164]   CALL        call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L7163]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L7163]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7164]   COND FALSE  !(revert)
[L7167]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L7167]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7168]   COND FALSE  !(revert)
[L7171]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L5753]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L5753]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]   COND FALSE  !(revert)
[L5757]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5728]               assume msgsender_MSG != null;
[L5729]               Balance[this] := 0;
[L5730]               _name_ERC20Detailed[this] := -1545721152;
[L5731]               _symbol_ERC20Detailed[this] := -1545721152;
[L5732]               _decimals_ERC20Detailed[this] := 0;
[L5734]               _name_ERC20Detailed[this] := name_s731;
[L5735]               _symbol_ERC20Detailed[this] := symbol_s731;
[L5736]               _decimals_ERC20Detailed[this] := decimals_s731;
[L5757]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5758]   COND FALSE  !(revert)
[L7171]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L7172]   COND FALSE  !(revert)
[L7175]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L7175]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7176]   COND FALSE  !(revert)
[L7179]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L7179]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7180]   COND FALSE  !(revert)
[L7183]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6329]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6329]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6330]   COND FALSE  !(revert)
[L6333]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6333]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6334]   COND FALSE  !(revert)
[L6337]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6337]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   COND FALSE  !(revert)
[L6341]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L6341]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6342]   COND FALSE  !(revert)
[L6345]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6298]               assume msgsender_MSG != null;
[L6299]               Balance[this] := 0;
[L6345]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6346]   COND FALSE  !(revert)
[L7183]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7184]   COND FALSE  !(revert)
[L7187]   CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6973]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6974]   COND FALSE  !(revert)
[L6977]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6977]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6978]   COND FALSE  !(revert)
[L6981]   CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6950]               assume msgsender_MSG != null;
[L6951]               Balance[this] := 0;
[L6981]   RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6982]   COND FALSE  !(revert)
[L7187]   RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7188]   COND FALSE  !(revert)
[L7191]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND TRUE   DType[this] == Wafl
[L6648]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6648]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6649]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L7191]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7192]   COND FALSE  !(revert)
[L7195]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6875]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6875]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6876]   COND FALSE  !(revert)
[L6879]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6879]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6880]   COND FALSE  !(revert)
[L6883]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND TRUE   DType[this] == Wafl
[L6648]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6648]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6649]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L6883]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6884]   COND FALSE  !(revert)
[L6887]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6848]               assume msgsender_MSG != null;
[L6849]               Balance[this] := 0;
[L6887]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6888]   COND FALSE  !(revert)
[L7195]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L7196]   COND FALSE  !(revert)
[L7199]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4717]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4699]               assume msgsender_MSG != null;
[L4700]               Balance[this] := 0;
[L4701]               _owner_Ownable[this] := null;
[L4703]               _owner_Ownable[this] := msgsender_MSG;
[L4704]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L4717]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4718]   COND FALSE  !(revert)
[L7199]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7200]   COND FALSE  !(revert)
[L7203]   CALL        call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7087]               assume msgsender_MSG != null;
[L7088]               Balance[this] := 0;
[L7090]   COND TRUE   DType[this] == Wafl
[L7091]   CALL        call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L5795]               __ret_0_ := _decimals_ERC20Detailed[this];
[L7091]   RET         call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L7092]   COND FALSE  !(revert)
[L7098]               __var_39 := __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7099]   COND TRUE   DType[this] == Wafl
[L7100]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5473]               __var_11 := null;
[L5474]   COND FALSE  !(!(account_s587 != null))
[L5478]   CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5478]   RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L5479]   COND FALSE  !(revert)
[L5482]               _totalSupply_ERC20[this] := __var_12;
[L5483]   CALL        call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5483]   RET         call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L5484]   COND FALSE  !(revert)
[L5487]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s587];
[L5488]               _balances_ERC20[this][account_s587] := __var_13;
[L5489]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s587];
[L5490]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7100]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7101]   COND FALSE  !(revert)
[L7203]   RET         call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7204]   COND FALSE  !(revert)
[L3164]   RET         call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L3165]               assume !revert && gas >= 0;
[L11217]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L11218]              assume !revert && gas >= 0;
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND FALSE  !(choice == 21)
[L11076]  COND FALSE  !(choice == 20)
[L11082]  COND FALSE  !(choice == 19)
[L11089]  COND FALSE  !(choice == 18)
[L11096]  COND FALSE  !(choice == 17)
[L11103]  COND FALSE  !(choice == 16)
[L11110]  COND FALSE  !(choice == 15)
[L11116]  COND FALSE  !(choice == 14)
[L11122]  COND FALSE  !(choice == 13)
[L11128]  COND FALSE  !(choice == 12)
[L11134]  COND FALSE  !(choice == 11)
[L11140]  COND FALSE  !(choice == 10)
[L11146]  COND FALSE  !(choice == 9)
[L11152]  COND FALSE  !(choice == 8)
[L11158]  COND TRUE   choice == 7
[L11159]              gas := gas - 21000;
[L11160]  COND TRUE   gas >= 0
[L11161]              assume msgvalue_MSG == 0;
[L11162]  CALL        call unpause_Pausable(this, msgsender_MSG, msgvalue_MSG);
[L2016]               havoc __exception;
[L2017]               revert := false;
[L2018]   COND FALSE  !(__exception)
[L2046]   CALL        call unpause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6275]   CALL        call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9464]   COND TRUE   DType[this] == Wafl
[L9465]   CALL        call __var_24 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6019]   CALL        call __var_25 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s882);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L6019]   RET         call __var_25 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s882);
[L6020]   COND FALSE  !(revert)
[L6023]               __ret_0_ := __var_25;
[L9465]   RET         call __var_24 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L9466]   COND FALSE  !(revert)
[L9487]   COND FALSE  !(!__var_24)
[L6275]   RET         call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6276]   COND FALSE  !(revert)
[L6279]   CALL        call whenPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9519]   COND FALSE  !(!_paused_Pausable[this])
[L6279]   RET         call whenPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6280]   COND FALSE  !(revert)
[L6283]               _paused_Pausable[this] := false;
[L6284]               assert { :EventEmitted "Unpaused_Pausable" } true;
[L2046]   RET         call unpause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L2047]               assume !revert && gas >= 0;
[L11162]  RET         call unpause_Pausable(this, msgsender_MSG, msgvalue_MSG);
[L11221]  RET         call CorralChoice_Wafl(this);
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND TRUE   choice == 21
[L11070]              gas := gas - 21000;
[L11071]  COND TRUE   gas >= 0
[L11072]              assume value_s1040 >= 0 && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11073]              assume msgvalue_MSG == 0;
[L11074]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1040 && value_s1040 <= _balances_ERC20[this][msgsender_MSG]) && value_s1040 >= 0) && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1040] >= 0) && _balances_ERC20[this][to_s1040] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ERC20Pausable0 := true;
[L2]                  call_transfer_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2158]               havoc __exception;
[L2159]               revert := false;
[L2160]   COND TRUE   __exception
[L2161]               __tmp__Balance := Balance;
[L2162]               __tmp__DType := DType;
[L2163]               __tmp__Alloc := Alloc;
[L2164]               __tmp__balance_ADDR := balance_ADDR;
[L2165]               __tmp__M_Ref_int := M_Ref_int;
[L2166]               __tmp__sum__balances0 := sum__balances0;
[L2167]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2168]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L2169]               __tmp__sum__allowances1 := sum__allowances1;
[L2170]               __tmp__M_Ref_bool := M_Ref_bool;
[L2171]               __tmp__sum := sum;
[L2172]               __tmp__Length := Length;
[L2173]               __tmp__now := now;
[L2174]               __tmp___owner_Ownable := _owner_Ownable;
[L2175]               __tmp___balances_ERC20 := _balances_ERC20;
[L2176]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L2177]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2178]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2179]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2180]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2181]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2182]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2183]               __tmp___paused_Pausable := _paused_Pausable;
[L2184]               __tmp___minters_MinterRole := _minters_MinterRole;
[L2185]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6355]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9495]   COND TRUE   !!__tmp___paused_Pausable[this]
[L9496]               revert := true;
[L6355]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6356]   COND TRUE   revert
[L2185]   RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2186]               assume revert || gas < 0;
[L11074]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L11221]  RET         call CorralChoice_Wafl(this);

Loop:
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND TRUE   choice == 27
[L11034]              gas := gas - 21000;
[L11035]  COND FALSE  !(gas >= 0)
[L11221]  RET         call CorralChoice_Wafl(this);

[2020-11-25 08:44:52,587 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:44:52,587 INFO  L82        PathProgramCache]: Analyzing trace with hash -926872850, now seen corresponding path program 1 times
[2020-11-25 08:44:52,588 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:44:52,605 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:44:52,849 INFO  L134       CoverageAnalysis]: Checked inductivity of 1112 backedges. 7 proven. 76 refuted. 0 times theorem prover too weak. 1029 trivial. 0 not checked.
[2020-11-25 08:44:52,849 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 08:44:52,849 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [14] total 14
[2020-11-25 08:44:52,850 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:44:52,850 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-11-25 08:44:52,850 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=27, Invalid=155, Unknown=0, NotChecked=0, Total=182
[2020-11-25 08:44:52,850 INFO  L87              Difference]: Start difference. First operand 5532 states and 6375 transitions. cyclomatic complexity: 846 Second operand 14 states.
[2020-11-25 08:44:56,852 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:44:56,852 INFO  L93              Difference]: Finished difference Result 5544 states and 6387 transitions.
[2020-11-25 08:44:56,852 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 16 states. 
[2020-11-25 08:44:56,852 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5544 states and 6387 transitions.
[2020-11-25 08:44:56,862 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:44:56,871 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5544 states to 5544 states and 6387 transitions.
[2020-11-25 08:44:56,871 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1238
[2020-11-25 08:44:56,872 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1238
[2020-11-25 08:44:56,872 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5544 states and 6387 transitions.
[2020-11-25 08:44:56,875 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:44:56,875 INFO  L728         BuchiCegarLoop]: Abstraction has 5544 states and 6387 transitions.
[2020-11-25 08:44:56,879 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5544 states and 6387 transitions.
[2020-11-25 08:44:56,898 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5544 to 5532.
[2020-11-25 08:44:56,898 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5532 states.
[2020-11-25 08:44:56,903 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5532 states to 5532 states and 6375 transitions.
[2020-11-25 08:44:56,903 INFO  L751         BuchiCegarLoop]: Abstraction has 5532 states and 6375 transitions.
[2020-11-25 08:44:56,903 INFO  L631         BuchiCegarLoop]: Abstraction has 5532 states and 6375 transitions.
[2020-11-25 08:44:56,903 INFO  L445         BuchiCegarLoop]: ======== Iteration 30============
[2020-11-25 08:44:56,904 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5532 states and 6375 transitions.
[2020-11-25 08:44:56,909 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:44:56,909 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:44:56,909 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:44:56,910 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:44:56,910 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_ERC20Pausable0 := false;
[L2]                  call_transfer_ERC20Pausable0 := false;
[L2]      CALL        call main();
[L11211]              assume null == 0;
[L11212]  CALL        call this := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L11212]  RET         call this := FreshRefGenerator__success();
[L11213]              assume now >= 0;
[L11214]              assume DType[this] == Wafl;
[L11215]              assume msgvalue_MSG == 0;
[L11216]              gas := gas - 53000;
[L11217]  CALL        call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L3134]               havoc __exception;
[L3135]               revert := false;
[L3136]   COND FALSE  !(__exception)
[L3164]   CALL        call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L7163]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L7163]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7164]   COND FALSE  !(revert)
[L7167]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L7167]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7168]   COND FALSE  !(revert)
[L7171]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L5753]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L5753]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]   COND FALSE  !(revert)
[L5757]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5728]               assume msgsender_MSG != null;
[L5729]               Balance[this] := 0;
[L5730]               _name_ERC20Detailed[this] := -1545721152;
[L5731]               _symbol_ERC20Detailed[this] := -1545721152;
[L5732]               _decimals_ERC20Detailed[this] := 0;
[L5734]               _name_ERC20Detailed[this] := name_s731;
[L5735]               _symbol_ERC20Detailed[this] := symbol_s731;
[L5736]               _decimals_ERC20Detailed[this] := decimals_s731;
[L5757]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5758]   COND FALSE  !(revert)
[L7171]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L7172]   COND FALSE  !(revert)
[L7175]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L7175]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7176]   COND FALSE  !(revert)
[L7179]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L7179]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7180]   COND FALSE  !(revert)
[L7183]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6329]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6329]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6330]   COND FALSE  !(revert)
[L6333]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6333]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6334]   COND FALSE  !(revert)
[L6337]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6337]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   COND FALSE  !(revert)
[L6341]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L6341]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6342]   COND FALSE  !(revert)
[L6345]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6298]               assume msgsender_MSG != null;
[L6299]               Balance[this] := 0;
[L6345]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6346]   COND FALSE  !(revert)
[L7183]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7184]   COND FALSE  !(revert)
[L7187]   CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6973]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6974]   COND FALSE  !(revert)
[L6977]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6977]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6978]   COND FALSE  !(revert)
[L6981]   CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6950]               assume msgsender_MSG != null;
[L6951]               Balance[this] := 0;
[L6981]   RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6982]   COND FALSE  !(revert)
[L7187]   RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7188]   COND FALSE  !(revert)
[L7191]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND TRUE   DType[this] == Wafl
[L6648]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6648]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6649]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L7191]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7192]   COND FALSE  !(revert)
[L7195]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6875]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6875]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6876]   COND FALSE  !(revert)
[L6879]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6879]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6880]   COND FALSE  !(revert)
[L6883]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND TRUE   DType[this] == Wafl
[L6648]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6648]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6649]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L6883]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6884]   COND FALSE  !(revert)
[L6887]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6848]               assume msgsender_MSG != null;
[L6849]               Balance[this] := 0;
[L6887]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6888]   COND FALSE  !(revert)
[L7195]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L7196]   COND FALSE  !(revert)
[L7199]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4717]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4699]               assume msgsender_MSG != null;
[L4700]               Balance[this] := 0;
[L4701]               _owner_Ownable[this] := null;
[L4703]               _owner_Ownable[this] := msgsender_MSG;
[L4704]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L4717]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4718]   COND FALSE  !(revert)
[L7199]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7200]   COND FALSE  !(revert)
[L7203]   CALL        call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7087]               assume msgsender_MSG != null;
[L7088]               Balance[this] := 0;
[L7090]   COND TRUE   DType[this] == Wafl
[L7091]   CALL        call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L5795]               __ret_0_ := _decimals_ERC20Detailed[this];
[L7091]   RET         call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L7092]   COND FALSE  !(revert)
[L7098]               __var_39 := __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7099]   COND TRUE   DType[this] == Wafl
[L7100]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5473]               __var_11 := null;
[L5474]   COND FALSE  !(!(account_s587 != null))
[L5478]   CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5478]   RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L5479]   COND FALSE  !(revert)
[L5482]               _totalSupply_ERC20[this] := __var_12;
[L5483]   CALL        call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5483]   RET         call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L5484]   COND FALSE  !(revert)
[L5487]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s587];
[L5488]               _balances_ERC20[this][account_s587] := __var_13;
[L5489]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s587];
[L5490]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7100]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7101]   COND FALSE  !(revert)
[L7203]   RET         call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7204]   COND FALSE  !(revert)
[L3164]   RET         call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L3165]               assume !revert && gas >= 0;
[L11217]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L11218]              assume !revert && gas >= 0;
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND FALSE  !(choice == 21)
[L11076]  COND FALSE  !(choice == 20)
[L11082]  COND FALSE  !(choice == 19)
[L11089]  COND FALSE  !(choice == 18)
[L11096]  COND FALSE  !(choice == 17)
[L11103]  COND FALSE  !(choice == 16)
[L11110]  COND FALSE  !(choice == 15)
[L11116]  COND FALSE  !(choice == 14)
[L11122]  COND FALSE  !(choice == 13)
[L11128]  COND FALSE  !(choice == 12)
[L11134]  COND FALSE  !(choice == 11)
[L11140]  COND FALSE  !(choice == 10)
[L11146]  COND FALSE  !(choice == 9)
[L11152]  COND TRUE   choice == 8
[L11153]              gas := gas - 21000;
[L11154]  COND TRUE   gas >= 0
[L11155]              assume msgvalue_MSG == 0;
[L11156]  CALL        call pause_Pausable(this, msgsender_MSG, msgvalue_MSG);
[L1951]               havoc __exception;
[L1952]               revert := false;
[L1953]   COND FALSE  !(__exception)
[L1981]   CALL        call pause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6248]   CALL        call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9464]   COND TRUE   DType[this] == Wafl
[L9465]   CALL        call __var_24 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6019]   CALL        call __var_25 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s882);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L6019]   RET         call __var_25 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s882);
[L6020]   COND FALSE  !(revert)
[L6023]               __ret_0_ := __var_25;
[L9465]   RET         call __var_24 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L9466]   COND FALSE  !(revert)
[L9487]   COND FALSE  !(!__var_24)
[L6248]   RET         call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6249]   COND FALSE  !(revert)
[L6252]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9503]   COND FALSE  !(!!_paused_Pausable[this])
[L6252]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6253]   COND FALSE  !(revert)
[L6256]               _paused_Pausable[this] := true;
[L6257]               assert { :EventEmitted "Paused_Pausable" } true;
[L1981]   RET         call pause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L1982]               assume !revert && gas >= 0;
[L11156]  RET         call pause_Pausable(this, msgsender_MSG, msgvalue_MSG);
[L11221]  RET         call CorralChoice_Wafl(this);
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND TRUE   choice == 21
[L11070]              gas := gas - 21000;
[L11071]  COND TRUE   gas >= 0
[L11072]              assume value_s1040 >= 0 && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11073]              assume msgvalue_MSG == 0;
[L11074]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1040 && value_s1040 <= _balances_ERC20[this][msgsender_MSG]) && value_s1040 >= 0) && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1040] >= 0) && _balances_ERC20[this][to_s1040] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ERC20Pausable0 := true;
[L2]                  call_transfer_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2158]               havoc __exception;
[L2159]               revert := false;
[L2160]   COND TRUE   __exception
[L2161]               __tmp__Balance := Balance;
[L2162]               __tmp__DType := DType;
[L2163]               __tmp__Alloc := Alloc;
[L2164]               __tmp__balance_ADDR := balance_ADDR;
[L2165]               __tmp__M_Ref_int := M_Ref_int;
[L2166]               __tmp__sum__balances0 := sum__balances0;
[L2167]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2168]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L2169]               __tmp__sum__allowances1 := sum__allowances1;
[L2170]               __tmp__M_Ref_bool := M_Ref_bool;
[L2171]               __tmp__sum := sum;
[L2172]               __tmp__Length := Length;
[L2173]               __tmp__now := now;
[L2174]               __tmp___owner_Ownable := _owner_Ownable;
[L2175]               __tmp___balances_ERC20 := _balances_ERC20;
[L2176]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L2177]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2178]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2179]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2180]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2181]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2182]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2183]               __tmp___paused_Pausable := _paused_Pausable;
[L2184]               __tmp___minters_MinterRole := _minters_MinterRole;
[L2185]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6355]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9495]   COND TRUE   !!__tmp___paused_Pausable[this]
[L9496]               revert := true;
[L6355]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6356]   COND TRUE   revert
[L2185]   RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2186]               assume revert || gas < 0;
[L11074]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L11221]  RET         call CorralChoice_Wafl(this);

Loop:
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND TRUE   choice == 27
[L11034]              gas := gas - 21000;
[L11035]  COND FALSE  !(gas >= 0)
[L11221]  RET         call CorralChoice_Wafl(this);

[2020-11-25 08:44:56,914 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:44:56,914 INFO  L82        PathProgramCache]: Analyzing trace with hash 1104224844, now seen corresponding path program 1 times
[2020-11-25 08:44:56,915 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:44:56,941 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 08:44:56,966 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 08:44:57,132 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:44:57,133 INFO  L82        PathProgramCache]: Analyzing trace with hash 1765353150, now seen corresponding path program 1 times
[2020-11-25 08:44:57,134 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:44:57,136 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:44:57,141 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 08:44:57,141 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:44:57,142 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 08:44:57,142 INFO  L1008  eck$LassoCheckResult]: loop already infeasible
[2020-11-25 08:44:57,142 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 08:44:57,142 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-11-25 08:44:57,142 INFO  L87              Difference]: Start difference. First operand 5532 states and 6375 transitions. cyclomatic complexity: 846 Second operand 4 states.
[2020-11-25 08:44:58,089 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:44:58,089 INFO  L93              Difference]: Finished difference Result 5693 states and 6497 transitions.
[2020-11-25 08:44:58,089 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 08:44:58,089 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5693 states and 6497 transitions.
[2020-11-25 08:44:58,106 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 08:44:58,117 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5693 states to 5693 states and 6497 transitions.
[2020-11-25 08:44:58,117 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1232
[2020-11-25 08:44:58,118 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1232
[2020-11-25 08:44:58,118 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5693 states and 6497 transitions.
[2020-11-25 08:44:58,121 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:44:58,121 INFO  L728         BuchiCegarLoop]: Abstraction has 5693 states and 6497 transitions.
[2020-11-25 08:44:58,126 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5693 states and 6497 transitions.
[2020-11-25 08:44:58,149 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5693 to 5532.
[2020-11-25 08:44:58,149 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5532 states.
[2020-11-25 08:44:58,154 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5532 states to 5532 states and 6321 transitions.
[2020-11-25 08:44:58,154 INFO  L751         BuchiCegarLoop]: Abstraction has 5532 states and 6321 transitions.
[2020-11-25 08:44:58,154 INFO  L631         BuchiCegarLoop]: Abstraction has 5532 states and 6321 transitions.
[2020-11-25 08:44:58,154 INFO  L445         BuchiCegarLoop]: ======== Iteration 31============
[2020-11-25 08:44:58,154 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5532 states and 6321 transitions.
[2020-11-25 08:44:58,162 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:44:58,162 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:44:58,162 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:44:58,164 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:44:58,164 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_ERC20Pausable0 := false;
[L2]                  call_transfer_ERC20Pausable0 := false;
[L2]      CALL        call main();
[L11211]              assume null == 0;
[L11212]  CALL        call this := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L11212]  RET         call this := FreshRefGenerator__success();
[L11213]              assume now >= 0;
[L11214]              assume DType[this] == Wafl;
[L11215]              assume msgvalue_MSG == 0;
[L11216]              gas := gas - 53000;
[L11217]  CALL        call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L3134]               havoc __exception;
[L3135]               revert := false;
[L3136]   COND FALSE  !(__exception)
[L3164]   CALL        call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L7163]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L7163]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7164]   COND FALSE  !(revert)
[L7167]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L7167]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7168]   COND FALSE  !(revert)
[L7171]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L5753]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L5753]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]   COND FALSE  !(revert)
[L5757]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5728]               assume msgsender_MSG != null;
[L5729]               Balance[this] := 0;
[L5730]               _name_ERC20Detailed[this] := -1545721152;
[L5731]               _symbol_ERC20Detailed[this] := -1545721152;
[L5732]               _decimals_ERC20Detailed[this] := 0;
[L5734]               _name_ERC20Detailed[this] := name_s731;
[L5735]               _symbol_ERC20Detailed[this] := symbol_s731;
[L5736]               _decimals_ERC20Detailed[this] := decimals_s731;
[L5757]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5758]   COND FALSE  !(revert)
[L7171]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L7172]   COND FALSE  !(revert)
[L7175]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L7175]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7176]   COND FALSE  !(revert)
[L7179]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L7179]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7180]   COND FALSE  !(revert)
[L7183]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6329]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6329]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6330]   COND FALSE  !(revert)
[L6333]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6333]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6334]   COND FALSE  !(revert)
[L6337]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6337]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   COND FALSE  !(revert)
[L6341]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L6341]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6342]   COND FALSE  !(revert)
[L6345]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6298]               assume msgsender_MSG != null;
[L6299]               Balance[this] := 0;
[L6345]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6346]   COND FALSE  !(revert)
[L7183]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7184]   COND FALSE  !(revert)
[L7187]   CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6973]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6974]   COND FALSE  !(revert)
[L6977]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6977]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6978]   COND FALSE  !(revert)
[L6981]   CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6950]               assume msgsender_MSG != null;
[L6951]               Balance[this] := 0;
[L6981]   RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6982]   COND FALSE  !(revert)
[L7187]   RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7188]   COND FALSE  !(revert)
[L7191]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND TRUE   DType[this] == Wafl
[L6648]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6648]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6649]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L7191]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7192]   COND FALSE  !(revert)
[L7195]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6875]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6875]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6876]   COND FALSE  !(revert)
[L6879]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6879]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6880]   COND FALSE  !(revert)
[L6883]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND TRUE   DType[this] == Wafl
[L6648]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6648]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6649]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L6883]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6884]   COND FALSE  !(revert)
[L6887]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6848]               assume msgsender_MSG != null;
[L6849]               Balance[this] := 0;
[L6887]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6888]   COND FALSE  !(revert)
[L7195]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L7196]   COND FALSE  !(revert)
[L7199]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4717]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4699]               assume msgsender_MSG != null;
[L4700]               Balance[this] := 0;
[L4701]               _owner_Ownable[this] := null;
[L4703]               _owner_Ownable[this] := msgsender_MSG;
[L4704]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L4717]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4718]   COND FALSE  !(revert)
[L7199]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7200]   COND FALSE  !(revert)
[L7203]   CALL        call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7087]               assume msgsender_MSG != null;
[L7088]               Balance[this] := 0;
[L7090]   COND TRUE   DType[this] == Wafl
[L7091]   CALL        call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L5795]               __ret_0_ := _decimals_ERC20Detailed[this];
[L7091]   RET         call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L7092]   COND FALSE  !(revert)
[L7098]               __var_39 := __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7099]   COND TRUE   DType[this] == Wafl
[L7100]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5473]               __var_11 := null;
[L5474]   COND FALSE  !(!(account_s587 != null))
[L5478]   CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5478]   RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L5479]   COND FALSE  !(revert)
[L5482]               _totalSupply_ERC20[this] := __var_12;
[L5483]   CALL        call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5483]   RET         call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L5484]   COND FALSE  !(revert)
[L5487]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s587];
[L5488]               _balances_ERC20[this][account_s587] := __var_13;
[L5489]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s587];
[L5490]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7100]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7101]   COND FALSE  !(revert)
[L7203]   RET         call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7204]   COND FALSE  !(revert)
[L3164]   RET         call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L3165]               assume !revert && gas >= 0;
[L11217]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L11218]              assume !revert && gas >= 0;
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND FALSE  !(choice == 21)
[L11076]  COND FALSE  !(choice == 20)
[L11082]  COND FALSE  !(choice == 19)
[L11089]  COND FALSE  !(choice == 18)
[L11096]  COND FALSE  !(choice == 17)
[L11103]  COND FALSE  !(choice == 16)
[L11110]  COND FALSE  !(choice == 15)
[L11116]  COND FALSE  !(choice == 14)
[L11122]  COND FALSE  !(choice == 13)
[L11128]  COND FALSE  !(choice == 12)
[L11134]  COND FALSE  !(choice == 11)
[L11140]  COND FALSE  !(choice == 10)
[L11146]  COND FALSE  !(choice == 9)
[L11152]  COND TRUE   choice == 8
[L11153]              gas := gas - 21000;
[L11154]  COND TRUE   gas >= 0
[L11155]              assume msgvalue_MSG == 0;
[L11156]  CALL        call pause_Pausable(this, msgsender_MSG, msgvalue_MSG);
[L1951]               havoc __exception;
[L1952]               revert := false;
[L1953]   COND FALSE  !(__exception)
[L1981]   CALL        call pause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6248]   CALL        call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9464]   COND FALSE  !(DType[this] == Wafl)
[L9469]   COND TRUE   DType[this] == ERC20Pausable
[L9470]   CALL        call __var_24 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6019]   CALL        call __var_25 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s882);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L6019]   RET         call __var_25 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s882);
[L6020]   COND FALSE  !(revert)
[L6023]               __ret_0_ := __var_25;
[L9470]   RET         call __var_24 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L9471]   COND FALSE  !(revert)
[L9487]   COND FALSE  !(!__var_24)
[L6248]   RET         call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6249]   COND FALSE  !(revert)
[L6252]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9503]   COND FALSE  !(!!_paused_Pausable[this])
[L6252]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6253]   COND FALSE  !(revert)
[L6256]               _paused_Pausable[this] := true;
[L6257]               assert { :EventEmitted "Paused_Pausable" } true;
[L1981]   RET         call pause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L1982]               assume !revert && gas >= 0;
[L11156]  RET         call pause_Pausable(this, msgsender_MSG, msgvalue_MSG);
[L11221]  RET         call CorralChoice_Wafl(this);
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND TRUE   choice == 21
[L11070]              gas := gas - 21000;
[L11071]  COND TRUE   gas >= 0
[L11072]              assume value_s1040 >= 0 && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11073]              assume msgvalue_MSG == 0;
[L11074]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1040 && value_s1040 <= _balances_ERC20[this][msgsender_MSG]) && value_s1040 >= 0) && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1040] >= 0) && _balances_ERC20[this][to_s1040] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ERC20Pausable0 := true;
[L2]                  call_transfer_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2158]               havoc __exception;
[L2159]               revert := false;
[L2160]   COND TRUE   __exception
[L2161]               __tmp__Balance := Balance;
[L2162]               __tmp__DType := DType;
[L2163]               __tmp__Alloc := Alloc;
[L2164]               __tmp__balance_ADDR := balance_ADDR;
[L2165]               __tmp__M_Ref_int := M_Ref_int;
[L2166]               __tmp__sum__balances0 := sum__balances0;
[L2167]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2168]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L2169]               __tmp__sum__allowances1 := sum__allowances1;
[L2170]               __tmp__M_Ref_bool := M_Ref_bool;
[L2171]               __tmp__sum := sum;
[L2172]               __tmp__Length := Length;
[L2173]               __tmp__now := now;
[L2174]               __tmp___owner_Ownable := _owner_Ownable;
[L2175]               __tmp___balances_ERC20 := _balances_ERC20;
[L2176]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L2177]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2178]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2179]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2180]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2181]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2182]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2183]               __tmp___paused_Pausable := _paused_Pausable;
[L2184]               __tmp___minters_MinterRole := _minters_MinterRole;
[L2185]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6355]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9495]   COND TRUE   !!__tmp___paused_Pausable[this]
[L9496]               revert := true;
[L6355]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6356]   COND TRUE   revert
[L2185]   RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2186]               assume revert || gas < 0;
[L11074]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L11221]  RET         call CorralChoice_Wafl(this);

Loop:
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND TRUE   choice == 21
[L11070]              gas := gas - 21000;
[L11071]  COND TRUE   gas >= 0
[L11072]              assume value_s1040 >= 0 && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11073]              assume msgvalue_MSG == 0;
[L11074]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1040 && value_s1040 <= _balances_ERC20[this][msgsender_MSG]) && value_s1040 >= 0) && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1040] >= 0) && _balances_ERC20[this][to_s1040] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ERC20Pausable0 := true;
[L2]                  call_transfer_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2158]               havoc __exception;
[L2159]               revert := false;
[L2160]   COND TRUE   __exception
[L2161]               __tmp__Balance := Balance;
[L2162]               __tmp__DType := DType;
[L2163]               __tmp__Alloc := Alloc;
[L2164]               __tmp__balance_ADDR := balance_ADDR;
[L2165]               __tmp__M_Ref_int := M_Ref_int;
[L2166]               __tmp__sum__balances0 := sum__balances0;
[L2167]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2168]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L2169]               __tmp__sum__allowances1 := sum__allowances1;
[L2170]               __tmp__M_Ref_bool := M_Ref_bool;
[L2171]               __tmp__sum := sum;
[L2172]               __tmp__Length := Length;
[L2173]               __tmp__now := now;
[L2174]               __tmp___owner_Ownable := _owner_Ownable;
[L2175]               __tmp___balances_ERC20 := _balances_ERC20;
[L2176]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L2177]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2178]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2179]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2180]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2181]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2182]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2183]               __tmp___paused_Pausable := _paused_Pausable;
[L2184]               __tmp___minters_MinterRole := _minters_MinterRole;
[L2185]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6355]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9495]   COND TRUE   !!__tmp___paused_Pausable[this]
[L9496]               revert := true;
[L6355]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6356]   COND TRUE   revert
[L2185]   RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2186]               assume revert || gas < 0;
[L11074]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L11221]  RET         call CorralChoice_Wafl(this);

[2020-11-25 08:44:58,168 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:44:58,168 INFO  L82        PathProgramCache]: Analyzing trace with hash 983437119, now seen corresponding path program 1 times
[2020-11-25 08:44:58,169 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:44:58,186 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:44:58,401 INFO  L134       CoverageAnalysis]: Checked inductivity of 1112 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 1111 trivial. 0 not checked.
[2020-11-25 08:44:58,402 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:44:58,402 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 08:44:58,402 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:44:58,402 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 08:44:58,402 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 08:44:58,402 INFO  L87              Difference]: Start difference. First operand 5532 states and 6321 transitions. cyclomatic complexity: 792 Second operand 7 states.
[2020-11-25 08:44:58,578 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:44:58,578 INFO  L93              Difference]: Finished difference Result 5564 states and 6353 transitions.
[2020-11-25 08:44:58,579 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 08:44:58,579 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5564 states and 6353 transitions.
[2020-11-25 08:44:58,588 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:44:58,597 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5564 states to 5532 states and 6319 transitions.
[2020-11-25 08:44:58,597 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1228
[2020-11-25 08:44:58,597 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1228
[2020-11-25 08:44:58,598 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5532 states and 6319 transitions.
[2020-11-25 08:44:58,600 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:44:58,600 INFO  L728         BuchiCegarLoop]: Abstraction has 5532 states and 6319 transitions.
[2020-11-25 08:44:58,605 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5532 states and 6319 transitions.
[2020-11-25 08:44:58,624 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5532 to 5532.
[2020-11-25 08:44:58,624 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5532 states.
[2020-11-25 08:44:58,629 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5532 states to 5532 states and 6319 transitions.
[2020-11-25 08:44:58,630 INFO  L751         BuchiCegarLoop]: Abstraction has 5532 states and 6319 transitions.
[2020-11-25 08:44:58,630 INFO  L631         BuchiCegarLoop]: Abstraction has 5532 states and 6319 transitions.
[2020-11-25 08:44:58,630 INFO  L445         BuchiCegarLoop]: ======== Iteration 32============
[2020-11-25 08:44:58,630 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5532 states and 6319 transitions.
[2020-11-25 08:44:58,635 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:44:58,635 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:44:58,635 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:44:58,636 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:44:58,636 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_ERC20Pausable0 := false;
[L2]                  call_transfer_ERC20Pausable0 := false;
[L2]      CALL        call main();
[L11211]              assume null == 0;
[L11212]  CALL        call this := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L11212]  RET         call this := FreshRefGenerator__success();
[L11213]              assume now >= 0;
[L11214]              assume DType[this] == Wafl;
[L11215]              assume msgvalue_MSG == 0;
[L11216]              gas := gas - 53000;
[L11217]  CALL        call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L3134]               havoc __exception;
[L3135]               revert := false;
[L3136]   COND FALSE  !(__exception)
[L3164]   CALL        call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L7163]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L7163]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7164]   COND FALSE  !(revert)
[L7167]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L7167]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7168]   COND FALSE  !(revert)
[L7171]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L5753]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L5753]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]   COND FALSE  !(revert)
[L5757]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5728]               assume msgsender_MSG != null;
[L5729]               Balance[this] := 0;
[L5730]               _name_ERC20Detailed[this] := -1545721152;
[L5731]               _symbol_ERC20Detailed[this] := -1545721152;
[L5732]               _decimals_ERC20Detailed[this] := 0;
[L5734]               _name_ERC20Detailed[this] := name_s731;
[L5735]               _symbol_ERC20Detailed[this] := symbol_s731;
[L5736]               _decimals_ERC20Detailed[this] := decimals_s731;
[L5757]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5758]   COND FALSE  !(revert)
[L7171]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L7172]   COND FALSE  !(revert)
[L7175]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L7175]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7176]   COND FALSE  !(revert)
[L7179]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L7179]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7180]   COND FALSE  !(revert)
[L7183]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6329]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6329]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6330]   COND FALSE  !(revert)
[L6333]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6333]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6334]   COND FALSE  !(revert)
[L6337]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6337]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   COND FALSE  !(revert)
[L6341]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L6341]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6342]   COND FALSE  !(revert)
[L6345]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6298]               assume msgsender_MSG != null;
[L6299]               Balance[this] := 0;
[L6345]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6346]   COND FALSE  !(revert)
[L7183]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7184]   COND FALSE  !(revert)
[L7187]   CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6973]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6974]   COND FALSE  !(revert)
[L6977]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6977]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6978]   COND FALSE  !(revert)
[L6981]   CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6950]               assume msgsender_MSG != null;
[L6951]               Balance[this] := 0;
[L6981]   RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6982]   COND FALSE  !(revert)
[L7187]   RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7188]   COND FALSE  !(revert)
[L7191]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND TRUE   DType[this] == Wafl
[L6648]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6648]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6649]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L7191]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7192]   COND FALSE  !(revert)
[L7195]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6875]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6875]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6876]   COND FALSE  !(revert)
[L6879]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6879]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6880]   COND FALSE  !(revert)
[L6883]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND TRUE   DType[this] == Wafl
[L6648]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6648]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6649]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L6883]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6884]   COND FALSE  !(revert)
[L6887]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6848]               assume msgsender_MSG != null;
[L6849]               Balance[this] := 0;
[L6887]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6888]   COND FALSE  !(revert)
[L7195]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L7196]   COND FALSE  !(revert)
[L7199]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4717]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4699]               assume msgsender_MSG != null;
[L4700]               Balance[this] := 0;
[L4701]               _owner_Ownable[this] := null;
[L4703]               _owner_Ownable[this] := msgsender_MSG;
[L4704]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L4717]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4718]   COND FALSE  !(revert)
[L7199]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7200]   COND FALSE  !(revert)
[L7203]   CALL        call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7087]               assume msgsender_MSG != null;
[L7088]               Balance[this] := 0;
[L7090]   COND TRUE   DType[this] == Wafl
[L7091]   CALL        call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L5795]               __ret_0_ := _decimals_ERC20Detailed[this];
[L7091]   RET         call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L7092]   COND FALSE  !(revert)
[L7098]               __var_39 := __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7099]   COND TRUE   DType[this] == Wafl
[L7100]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5473]               __var_11 := null;
[L5474]   COND FALSE  !(!(account_s587 != null))
[L5478]   CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5478]   RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L5479]   COND FALSE  !(revert)
[L5482]               _totalSupply_ERC20[this] := __var_12;
[L5483]   CALL        call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5483]   RET         call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L5484]   COND FALSE  !(revert)
[L5487]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s587];
[L5488]               _balances_ERC20[this][account_s587] := __var_13;
[L5489]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s587];
[L5490]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7100]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7101]   COND FALSE  !(revert)
[L7203]   RET         call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7204]   COND FALSE  !(revert)
[L3164]   RET         call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L3165]               assume !revert && gas >= 0;
[L11217]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L11218]              assume !revert && gas >= 0;
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND FALSE  !(choice == 21)
[L11076]  COND FALSE  !(choice == 20)
[L11082]  COND FALSE  !(choice == 19)
[L11089]  COND FALSE  !(choice == 18)
[L11096]  COND FALSE  !(choice == 17)
[L11103]  COND FALSE  !(choice == 16)
[L11110]  COND FALSE  !(choice == 15)
[L11116]  COND FALSE  !(choice == 14)
[L11122]  COND FALSE  !(choice == 13)
[L11128]  COND FALSE  !(choice == 12)
[L11134]  COND FALSE  !(choice == 11)
[L11140]  COND FALSE  !(choice == 10)
[L11146]  COND FALSE  !(choice == 9)
[L11152]  COND TRUE   choice == 8
[L11153]              gas := gas - 21000;
[L11154]  COND TRUE   gas >= 0
[L11155]              assume msgvalue_MSG == 0;
[L11156]  CALL        call pause_Pausable(this, msgsender_MSG, msgvalue_MSG);
[L1951]               havoc __exception;
[L1952]               revert := false;
[L1953]   COND FALSE  !(__exception)
[L1981]   CALL        call pause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6248]   CALL        call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9464]   COND TRUE   DType[this] == Wafl
[L9465]   CALL        call __var_24 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6019]   CALL        call __var_25 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s882);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L6019]   RET         call __var_25 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s882);
[L6020]   COND FALSE  !(revert)
[L6023]               __ret_0_ := __var_25;
[L9465]   RET         call __var_24 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L9466]   COND FALSE  !(revert)
[L9487]   COND FALSE  !(!__var_24)
[L6248]   RET         call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6249]   COND FALSE  !(revert)
[L6252]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9503]   COND FALSE  !(!!_paused_Pausable[this])
[L6252]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6253]   COND FALSE  !(revert)
[L6256]               _paused_Pausable[this] := true;
[L6257]               assert { :EventEmitted "Paused_Pausable" } true;
[L1981]   RET         call pause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L1982]               assume !revert && gas >= 0;
[L11156]  RET         call pause_Pausable(this, msgsender_MSG, msgvalue_MSG);
[L11221]  RET         call CorralChoice_Wafl(this);
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND TRUE   choice == 21
[L11070]              gas := gas - 21000;
[L11071]  COND TRUE   gas >= 0
[L11072]              assume value_s1040 >= 0 && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11073]              assume msgvalue_MSG == 0;
[L11074]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1040 && value_s1040 <= _balances_ERC20[this][msgsender_MSG]) && value_s1040 >= 0) && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1040] >= 0) && _balances_ERC20[this][to_s1040] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ERC20Pausable0 := true;
[L2]                  call_transfer_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2158]               havoc __exception;
[L2159]               revert := false;
[L2160]   COND TRUE   __exception
[L2161]               __tmp__Balance := Balance;
[L2162]               __tmp__DType := DType;
[L2163]               __tmp__Alloc := Alloc;
[L2164]               __tmp__balance_ADDR := balance_ADDR;
[L2165]               __tmp__M_Ref_int := M_Ref_int;
[L2166]               __tmp__sum__balances0 := sum__balances0;
[L2167]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2168]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L2169]               __tmp__sum__allowances1 := sum__allowances1;
[L2170]               __tmp__M_Ref_bool := M_Ref_bool;
[L2171]               __tmp__sum := sum;
[L2172]               __tmp__Length := Length;
[L2173]               __tmp__now := now;
[L2174]               __tmp___owner_Ownable := _owner_Ownable;
[L2175]               __tmp___balances_ERC20 := _balances_ERC20;
[L2176]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L2177]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2178]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2179]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2180]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2181]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2182]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2183]               __tmp___paused_Pausable := _paused_Pausable;
[L2184]               __tmp___minters_MinterRole := _minters_MinterRole;
[L2185]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6355]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9495]   COND TRUE   !!__tmp___paused_Pausable[this]
[L9496]               revert := true;
[L6355]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6356]   COND TRUE   revert
[L2185]   RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2186]               assume revert || gas < 0;
[L11074]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L11221]  RET         call CorralChoice_Wafl(this);

Loop:
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND TRUE   choice == 21
[L11070]              gas := gas - 21000;
[L11071]  COND TRUE   gas >= 0
[L11072]              assume value_s1040 >= 0 && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11073]              assume msgvalue_MSG == 0;
[L11074]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1040 && value_s1040 <= _balances_ERC20[this][msgsender_MSG]) && value_s1040 >= 0) && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1040] >= 0) && _balances_ERC20[this][to_s1040] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ERC20Pausable0 := true;
[L2]                  call_transfer_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2158]               havoc __exception;
[L2159]               revert := false;
[L2160]   COND TRUE   __exception
[L2161]               __tmp__Balance := Balance;
[L2162]               __tmp__DType := DType;
[L2163]               __tmp__Alloc := Alloc;
[L2164]               __tmp__balance_ADDR := balance_ADDR;
[L2165]               __tmp__M_Ref_int := M_Ref_int;
[L2166]               __tmp__sum__balances0 := sum__balances0;
[L2167]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2168]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L2169]               __tmp__sum__allowances1 := sum__allowances1;
[L2170]               __tmp__M_Ref_bool := M_Ref_bool;
[L2171]               __tmp__sum := sum;
[L2172]               __tmp__Length := Length;
[L2173]               __tmp__now := now;
[L2174]               __tmp___owner_Ownable := _owner_Ownable;
[L2175]               __tmp___balances_ERC20 := _balances_ERC20;
[L2176]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L2177]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2178]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2179]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2180]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2181]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2182]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2183]               __tmp___paused_Pausable := _paused_Pausable;
[L2184]               __tmp___minters_MinterRole := _minters_MinterRole;
[L2185]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6355]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9495]   COND TRUE   !!__tmp___paused_Pausable[this]
[L9496]               revert := true;
[L6355]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6356]   COND TRUE   revert
[L2185]   RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2186]               assume revert || gas < 0;
[L11074]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L11221]  RET         call CorralChoice_Wafl(this);

[2020-11-25 08:44:58,641 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:44:58,641 INFO  L82        PathProgramCache]: Analyzing trace with hash 1104224844, now seen corresponding path program 2 times
[2020-11-25 08:44:58,642 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:44:58,668 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 08:44:58,693 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 08:44:58,782 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:44:58,782 INFO  L82        PathProgramCache]: Analyzing trace with hash -563228251, now seen corresponding path program 1 times
[2020-11-25 08:44:58,783 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:44:58,786 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 08:44:58,790 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 08:44:58,796 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:44:58,797 INFO  L82        PathProgramCache]: Analyzing trace with hash -578172688, now seen corresponding path program 1 times
[2020-11-25 08:44:58,797 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:44:58,827 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 08:44:58,860 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 139 to 277
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #1: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #2: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #3: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #4: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #5: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #6: 1259 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 1259 to 2503
Garbage collection #7: 2503 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 2503 to 5003
Garbage collection #1: 107 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 107 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 3331 to 6661
[2020-11-25 08:44:59,383 WARN  L188               SmtUtils]: Spent 148.00 ms on a formula simplification that was a NOOP. DAG size: 208
[2020-11-25 08:44:59,851 WARN  L188               SmtUtils]: Spent 464.00 ms on a formula simplification. DAG size of input: 295 DAG size of output: 273
Garbage collection #1: 101 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 101 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 3137 to 6271
Garbage collection #7: 6271 nodes / 0 free / 0.001s / 0.003s total
Resizing node table from 6271 to 12541
Garbage collection #8: 12541 nodes / 0 free / 0.003s / 0.006s total
Resizing node table from 12541 to 25073
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #7: 4027 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4027 to 8053
[2020-11-25 08:44:59,984 WARN  L188               SmtUtils]: Spent 109.00 ms on a formula simplification. DAG size of input: 168 DAG size of output: 164
[2020-11-25 08:45:00,099 WARN  L188               SmtUtils]: Spent 114.00 ms on a formula simplification that was a NOOP. DAG size: 350
Garbage collection #1: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #2: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #3: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #4: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #5: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
Garbage collection #6: 4357 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4357 to 8713
Garbage collection #7: 8713 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8713 to 17419
[2020-11-25 08:45:00,236 WARN  L188               SmtUtils]: Spent 130.00 ms on a formula simplification that was a NOOP. DAG size: 283
[2020-11-25 08:45:00,376 WARN  L188               SmtUtils]: Spent 137.00 ms on a formula simplification that was a NOOP. DAG size: 283
Garbage collection #1: 107 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 107 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
Garbage collection #7: 6661 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6661 to 13313
Garbage collection #1: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #6: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
[2020-11-25 08:45:00,444 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #5: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #5: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #5: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
[2020-11-25 08:45:03,641 WARN  L188               SmtUtils]: Spent 2.02 s on a formula simplification. DAG size of input: 541 DAG size of output: 502
Garbage collection #1: 191 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 191 to 379
Garbage collection #2: 379 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 379 to 757
Garbage collection #3: 757 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 757 to 1511
Garbage collection #4: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #5: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #6: 6037 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6037 to 12073
Garbage collection #7: 12073 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 12073 to 24137
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
[2020-11-25 08:45:03,822 WARN  L188               SmtUtils]: Spent 112.00 ms on a formula simplification that was a NOOP. DAG size: 244
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #6: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
[2020-11-25 08:45:04,096 WARN  L188               SmtUtils]: Spent 184.00 ms on a formula simplification. DAG size of input: 217 DAG size of output: 216
Garbage collection #1: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #6: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
[2020-11-25 08:45:04,485 WARN  L188               SmtUtils]: Spent 327.00 ms on a formula simplification that was a NOOP. DAG size: 367
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #1: 107 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 107 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
[2020-11-25 08:45:04,758 WARN  L188               SmtUtils]: Spent 267.00 ms on a formula simplification that was a NOOP. DAG size: 335
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #1: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #2: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #3: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #4: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #5: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #6: 4027 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4027 to 8053
Garbage collection #7: 8053 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8053 to 16103
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #1: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #2: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #3: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #4: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #5: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #6: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #1: 107 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 107 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
[2020-11-25 08:45:05,428 WARN  L188               SmtUtils]: Spent 117.00 ms on a formula simplification that was a NOOP. DAG size: 207
[2020-11-25 08:45:05,825 WARN  L188               SmtUtils]: Spent 394.00 ms on a formula simplification. DAG size of input: 293 DAG size of output: 272
Garbage collection #1: 101 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 101 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 3137 to 6271
Garbage collection #7: 6271 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 6271 to 12541
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 2017 to 4027
Garbage collection #7: 4027 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 4027 to 8053
[2020-11-25 08:45:05,942 WARN  L188               SmtUtils]: Spent 108.00 ms on a formula simplification. DAG size of input: 168 DAG size of output: 164
[2020-11-25 08:45:06,095 WARN  L188               SmtUtils]: Spent 151.00 ms on a formula simplification that was a NOOP. DAG size: 350
Garbage collection #1: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #2: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #3: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #4: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #5: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
Garbage collection #6: 4357 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4357 to 8713
[2020-11-25 08:45:06,227 WARN  L188               SmtUtils]: Spent 127.00 ms on a formula simplification that was a NOOP. DAG size: 283
[2020-11-25 08:45:08,921 WARN  L188               SmtUtils]: Spent 2.69 s on a formula simplification. DAG size of input: 795 DAG size of output: 784
Garbage collection #1: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #2: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #3: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #4: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
Garbage collection #5: 5003 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5003 to 9973
Garbage collection #6: 9973 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9973 to 19937
Garbage collection #7: 19937 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 19937 to 39869
Garbage collection #8: 39869 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 39869 to 79699
Garbage collection #1: 109 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 109 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
[2020-11-25 08:45:09,439 WARN  L188               SmtUtils]: Spent 467.00 ms on a formula simplification. DAG size of input: 331 DAG size of output: 329
[2020-11-25 08:45:09,789 WARN  L188               SmtUtils]: Spent 327.00 ms on a formula simplification that was a NOOP. DAG size: 446
Garbage collection #1: 149 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 149 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4591 to 9181
Garbage collection #7: 9181 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9181 to 18353
Garbage collection #1: 107 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 107 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
[2020-11-25 08:45:10,011 WARN  L188               SmtUtils]: Spent 215.00 ms on a formula simplification that was a NOOP. DAG size: 329
[2020-11-25 08:45:10,673 WARN  L188               SmtUtils]: Spent 659.00 ms on a formula simplification. DAG size of input: 448 DAG size of output: 447
Garbage collection #1: 151 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 151 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4591 to 9181
Garbage collection #7: 9181 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9181 to 18353
Garbage collection #1: 149 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 149 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4591 to 9181
Garbage collection #7: 9181 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9181 to 18353
[2020-11-25 08:45:11,001 WARN  L188               SmtUtils]: Spent 323.00 ms on a formula simplification that was a NOOP. DAG size: 443
[2020-11-25 08:45:11,033 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 08:45:11,070 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 08:45:11,082 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 08:45:11 BasicIcfg
[2020-11-25 08:45:11,082 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 08:45:11,083 INFO  L168              Benchmark]: Toolchain (without parser) took 109834.58 ms. Allocated memory was 1.0 GB in the beginning and 4.8 GB in the end (delta: 3.8 GB). Free memory was 919.1 MB in the beginning and 1.9 GB in the end (delta: -996.3 MB). Peak memory consumption was 4.0 GB. Max. memory is 15.3 GB.
[2020-11-25 08:45:11,083 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.16 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 08:45:11,083 INFO  L168              Benchmark]: Boogie Preprocessor took 155.65 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 897.2 MB in the end (delta: 21.9 MB). Peak memory consumption was 21.9 MB. Max. memory is 15.3 GB.
[2020-11-25 08:45:11,083 INFO  L168              Benchmark]: UtopiaSpecLang took 94.32 ms. Allocated memory is still 1.0 GB. Free memory was 897.2 MB in the beginning and 886.5 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 08:45:11,083 INFO  L168              Benchmark]: Boogie Printer took 28.79 ms. Allocated memory is still 1.0 GB. Free memory was 886.5 MB in the beginning and 881.1 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 08:45:11,084 INFO  L168              Benchmark]: RCFGBuilder took 1613.30 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 62.9 MB). Free memory was 881.1 MB in the beginning and 757.4 MB in the end (delta: 123.7 MB). Peak memory consumption was 186.6 MB. Max. memory is 15.3 GB.
[2020-11-25 08:45:11,084 INFO  L168              Benchmark]: UtopiaLTL2Aut took 38.42 ms. Allocated memory is still 1.1 GB. Free memory was 757.4 MB in the beginning and 753.9 MB in the end (delta: 3.4 MB). Peak memory consumption was 3.4 MB. Max. memory is 15.3 GB.
[2020-11-25 08:45:11,084 INFO  L168              Benchmark]: BÃ¼chi Program Product took 3440.58 ms. Allocated memory was 1.1 GB in the beginning and 1.5 GB in the end (delta: 444.6 MB). Free memory was 753.9 MB in the beginning and 866.6 MB in the end (delta: -112.7 MB). Peak memory consumption was 337.9 MB. Max. memory is 15.3 GB.
[2020-11-25 08:45:11,084 INFO  L168              Benchmark]: BlockEncodingV2 took 299.80 ms. Allocated memory is still 1.5 GB. Free memory was 866.6 MB in the beginning and 710.6 MB in the end (delta: 156.0 MB). Peak memory consumption was 156.0 MB. Max. memory is 15.3 GB.
[2020-11-25 08:45:11,084 INFO  L168              Benchmark]: BuchiAutomizer took 104160.51 ms. Allocated memory was 1.5 GB in the beginning and 4.8 GB in the end (delta: 3.3 GB). Free memory was 710.6 MB in the beginning and 1.9 GB in the end (delta: -1.2 GB). Peak memory consumption was 3.3 GB. Max. memory is 15.3 GB.
[2020-11-25 08:45:11,087 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    10762 locations, 20071 edges
  - StatisticsResult: Encoded RCFG
    10568 locations, 19533 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.16 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 155.65 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 897.2 MB in the end (delta: 21.9 MB). Peak memory consumption was 21.9 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 94.32 ms. Allocated memory is still 1.0 GB. Free memory was 897.2 MB in the beginning and 886.5 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 28.79 ms. Allocated memory is still 1.0 GB. Free memory was 886.5 MB in the beginning and 881.1 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 1613.30 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 62.9 MB). Free memory was 881.1 MB in the beginning and 757.4 MB in the end (delta: 123.7 MB). Peak memory consumption was 186.6 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 38.42 ms. Allocated memory is still 1.1 GB. Free memory was 757.4 MB in the beginning and 753.9 MB in the end (delta: 3.4 MB). Peak memory consumption was 3.4 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 3440.58 ms. Allocated memory was 1.1 GB in the beginning and 1.5 GB in the end (delta: 444.6 MB). Free memory was 753.9 MB in the beginning and 866.6 MB in the end (delta: -112.7 MB). Peak memory consumption was 337.9 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 299.80 ms. Allocated memory is still 1.5 GB. Free memory was 866.6 MB in the beginning and 710.6 MB in the end (delta: 156.0 MB). Peak memory consumption was 156.0 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 104160.51 ms. Allocated memory was 1.5 GB in the beginning and 4.8 GB in the end (delta: 3.3 GB). Free memory was 710.6 MB in the beginning and 1.9 GB in the end (delta: -1.2 GB). Peak memory consumption was 3.3 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    4156 locations, 6111 edges
  - StatisticsResult: BuchiProgram size
    10762 locations, 20071 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 31 terminating modules (31 trivial, 0 deterministic, 0 nondeterministic) and one nonterminating remainder module.31 modules have a trivial ranking function, the largest among these consists of 36 locations. The remainder module has 5532 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 104.0s and 32 iterations.  TraceHistogramMax:9. Analysis of lassos took 21.1s. Construction of modules took 64.1s. BÃ¼chi inclusion checks took 14.9s. Highest rank in rank-based complementation 0. Minimization of det autom 31. Minimization of nondet autom 0. Automata minimization 1.8s AutomataMinimizationTime, 31 MinimizatonAttempts, 8910 StatesRemovedByMinimization, 18 NontrivialMinimizations. Non-live state removal took 1.1s Buchi closure took 0.0s. Biggest automaton had 9544 states and ocurred in iteration 23.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 212175 SDtfs, 88171 SDslu, 903266 SDs, 0 SdLazy, 462569 SolverSat, 16663 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 64.1s Time	LassoAnalysisResults: nont1 unkn0 SFLI1 SFLT0 conc0 concLT0 SILN0 SILU30 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - TransactionCounterexample: Violation of LTL property LTL
    Found an infinite, lasso-shaped execution that violates the LTL property LTL.
Stem:
address(115787428790991736226411098954254884178879543113989747471779898303288945549156) = (new Wafl)({from : 115787428790991736226411098954254884178879543113989747471779898303288945549159});
[L3134]               havoc __exception;
[L3135]               revert := false;
[L3136]   COND FALSE  !(__exception)
[L3164]   CALL        call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L7163]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L7163]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7164]   COND FALSE  !(revert)
[L7167]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L7167]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7168]   COND FALSE  !(revert)
[L7171]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L5753]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L5753]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]   COND FALSE  !(revert)
[L5757]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5728]               assume msgsender_MSG != null;
[L5729]               Balance[this] := 0;
[L5730]               _name_ERC20Detailed[this] := -1545721152;
[L5731]               _symbol_ERC20Detailed[this] := -1545721152;
[L5732]               _decimals_ERC20Detailed[this] := 0;
[L5734]               _name_ERC20Detailed[this] := name_s731;
[L5735]               _symbol_ERC20Detailed[this] := symbol_s731;
[L5736]               _decimals_ERC20Detailed[this] := decimals_s731;
[L5757]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5758]   COND FALSE  !(revert)
[L7171]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L7172]   COND FALSE  !(revert)
[L7175]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L7175]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7176]   COND FALSE  !(revert)
[L7179]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L7179]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7180]   COND FALSE  !(revert)
[L7183]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6329]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6329]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6330]   COND FALSE  !(revert)
[L6333]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6333]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6334]   COND FALSE  !(revert)
[L6337]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6337]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   COND FALSE  !(revert)
[L6341]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L6341]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6342]   COND FALSE  !(revert)
[L6345]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6298]               assume msgsender_MSG != null;
[L6299]               Balance[this] := 0;
[L6345]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6346]   COND FALSE  !(revert)
[L7183]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7184]   COND FALSE  !(revert)
[L7187]   CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6973]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6974]   COND FALSE  !(revert)
[L6977]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6977]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6978]   COND FALSE  !(revert)
[L6981]   CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6950]               assume msgsender_MSG != null;
[L6951]               Balance[this] := 0;
[L6981]   RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6982]   COND FALSE  !(revert)
[L7187]   RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7188]   COND FALSE  !(revert)
[L7191]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND TRUE   DType[this] == Wafl
[L6648]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6648]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6649]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L7191]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7192]   COND FALSE  !(revert)
[L7195]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6875]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6875]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6876]   COND FALSE  !(revert)
[L6879]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6879]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6880]   COND FALSE  !(revert)
[L6883]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND TRUE   DType[this] == Wafl
[L6648]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6648]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6649]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L6883]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6884]   COND FALSE  !(revert)
[L6887]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6848]               assume msgsender_MSG != null;
[L6849]               Balance[this] := 0;
[L6887]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6888]   COND FALSE  !(revert)
[L7195]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L7196]   COND FALSE  !(revert)
[L7199]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4717]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4699]               assume msgsender_MSG != null;
[L4700]               Balance[this] := 0;
[L4701]               _owner_Ownable[this] := null;
[L4703]               _owner_Ownable[this] := msgsender_MSG;
[L4704]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L4717]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4718]   COND FALSE  !(revert)
[L7199]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7200]   COND FALSE  !(revert)
[L7203]   CALL        call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7087]               assume msgsender_MSG != null;
[L7088]               Balance[this] := 0;
[L7090]   COND TRUE   DType[this] == Wafl
[L7091]   CALL        call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L5795]               __ret_0_ := _decimals_ERC20Detailed[this];
[L7091]   RET         call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L7092]   COND FALSE  !(revert)
[L7098]               __var_39 := __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7099]   COND TRUE   DType[this] == Wafl
[L7100]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5473]               __var_11 := null;
[L5474]   COND FALSE  !(!(account_s587 != null))
[L5478]   CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5478]   RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L5479]   COND FALSE  !(revert)
[L5482]               _totalSupply_ERC20[this] := __var_12;
[L5483]   CALL        call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5483]   RET         call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L5484]   COND FALSE  !(revert)
[L5487]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s587];
[L5488]               _balances_ERC20[this][account_s587] := __var_13;
[L5489]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s587];
[L5490]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7100]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7101]   COND FALSE  !(revert)
[L7203]   RET         call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7204]   COND FALSE  !(revert)
[L3164]   RET         call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L3165]               assume !revert && gas >= 0;
[L11217]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
Pausable(115787428790991736226411098954254884178879543113989747471779898303288945549156).pause.gas(3979002)({from : 115787428790991736226411098954254884178879543113989747471779898303288945549147});
[L1951]               havoc __exception;
[L1952]               revert := false;
[L1953]   COND FALSE  !(__exception)
[L1981]   CALL        call pause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6248]   CALL        call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9464]   COND TRUE   DType[this] == Wafl
[L9465]   CALL        call __var_24 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6019]   CALL        call __var_25 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s882);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L6019]   RET         call __var_25 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s882);
[L6020]   COND FALSE  !(revert)
[L6023]               __ret_0_ := __var_25;
[L9465]   RET         call __var_24 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L9466]   COND FALSE  !(revert)
[L9487]   COND FALSE  !(!__var_24)
[L6248]   RET         call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6249]   COND FALSE  !(revert)
[L6252]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9503]   COND FALSE  !(!!_paused_Pausable[this])
[L6252]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6253]   COND FALSE  !(revert)
[L6256]               _paused_Pausable[this] := true;
[L6257]               assert { :EventEmitted "Paused_Pausable" } true;
[L1981]   RET         call pause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L1982]               assume !revert && gas >= 0;
[L11156]  RET         call pause_Pausable(this, msgsender_MSG, msgvalue_MSG);
ERC20Pausable(115787428790991736226411098954254884178879543113989747471779898303288945549156).transfer~address~uint256.gas(3979003)({from : 115787428790991736226411098954254884178879543113989747471779898303288945549159, to : 115787428790991736226411098954254884178879543113989747471779898303288945549159, value : 0});
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s1040 && value_s1040 <= _balances_ERC20[this][msgsender_MSG]) && value_s1040 >= 0) && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1040] >= 0) && _balances_ERC20[this][to_s1040] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L2158]              havoc __exception;
[L2159]              revert := false;
[L2160]   COND TRUE  __exception
[L2161]              __tmp__Balance := Balance;
[L2162]              __tmp__DType := DType;
[L2163]              __tmp__Alloc := Alloc;
[L2164]              __tmp__balance_ADDR := balance_ADDR;
[L2165]              __tmp__M_Ref_int := M_Ref_int;
[L2166]              __tmp__sum__balances0 := sum__balances0;
[L2167]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2168]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L2169]              __tmp__sum__allowances1 := sum__allowances1;
[L2170]              __tmp__M_Ref_bool := M_Ref_bool;
[L2171]              __tmp__sum := sum;
[L2172]              __tmp__Length := Length;
[L2173]              __tmp__now := now;
[L2174]              __tmp___owner_Ownable := _owner_Ownable;
[L2175]              __tmp___balances_ERC20 := _balances_ERC20;
[L2176]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L2177]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2178]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2179]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2180]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2181]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2182]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2183]              __tmp___paused_Pausable := _paused_Pausable;
[L2184]              __tmp___minters_MinterRole := _minters_MinterRole;
[L2185]   CALL       call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6355]   CALL       call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9495]   COND TRUE  !!__tmp___paused_Pausable[this]
[L9496]              revert := true;
[L6355]   RET        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6356]   COND TRUE  revert
[L2185]   RET        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2186]              assume revert || gas < 0;
[L11074]  RET        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);

Loop:
ERC20Pausable(115787428790991736226411098954254884178879543113989747471779898303288945549156).transfer~address~uint256.gas(3979001)({from : 115787428790991736226411098954254884178879543113989747471779898303288945549159, to : 115787428790991736226411098954254884178879543113989747471779898303288945549159, value : 0});
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s1040 && value_s1040 <= _balances_ERC20[this][msgsender_MSG]) && value_s1040 >= 0) && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1040] >= 0) && _balances_ERC20[this][to_s1040] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L2158]              havoc __exception;
[L2159]              revert := false;
[L2160]   COND TRUE  __exception
[L2161]              __tmp__Balance := Balance;
[L2162]              __tmp__DType := DType;
[L2163]              __tmp__Alloc := Alloc;
[L2164]              __tmp__balance_ADDR := balance_ADDR;
[L2165]              __tmp__M_Ref_int := M_Ref_int;
[L2166]              __tmp__sum__balances0 := sum__balances0;
[L2167]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2168]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L2169]              __tmp__sum__allowances1 := sum__allowances1;
[L2170]              __tmp__M_Ref_bool := M_Ref_bool;
[L2171]              __tmp__sum := sum;
[L2172]              __tmp__Length := Length;
[L2173]              __tmp__now := now;
[L2174]              __tmp___owner_Ownable := _owner_Ownable;
[L2175]              __tmp___balances_ERC20 := _balances_ERC20;
[L2176]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L2177]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2178]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2179]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2180]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2181]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2182]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2183]              __tmp___paused_Pausable := _paused_Pausable;
[L2184]              __tmp___minters_MinterRole := _minters_MinterRole;
[L2185]   CALL       call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6355]   CALL       call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9495]   COND TRUE  !!__tmp___paused_Pausable[this]
[L9496]              revert := true;
[L6355]   RET        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6356]   COND TRUE  revert
[L2185]   RET        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2186]              assume revert || gas < 0;
[L11074]  RET        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);

End of lasso representation.
RESULT: Ultimate could not prove your program: Toolchain returned no result.
Received shutdown request...
