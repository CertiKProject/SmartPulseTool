This is Ultimate 0.1.24-f1553f5-m
[2020-11-24 22:31:41,712 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-24 22:31:41,714 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-24 22:31:41,724 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-24 22:31:41,725 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-24 22:31:41,725 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-24 22:31:41,726 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-24 22:31:41,728 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-24 22:31:41,730 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-24 22:31:41,730 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-24 22:31:41,731 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-24 22:31:41,731 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-24 22:31:41,732 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-24 22:31:41,733 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-24 22:31:41,734 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-24 22:31:41,734 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-24 22:31:41,735 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-24 22:31:41,736 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-24 22:31:41,738 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-24 22:31:41,739 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-24 22:31:41,740 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-24 22:31:41,741 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-24 22:31:41,742 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-24 22:31:41,743 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-24 22:31:41,743 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-24 22:31:41,743 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-24 22:31:41,744 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-24 22:31:41,744 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-24 22:31:41,745 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-24 22:31:41,745 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-24 22:31:41,745 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-24 22:31:41,746 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-24 22:31:41,746 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-24 22:31:41,747 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-24 22:31:41,748 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-24 22:31:41,748 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-24 22:31:41,748 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-24 22:31:41,748 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-24 22:31:41,749 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-24 22:31:41,749 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-24 22:31:41,750 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-24 22:31:41,750 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-24 22:31:41,758 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-24 22:31:41,758 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-24 22:31:41,759 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-24 22:31:41,759 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-24 22:31:41,759 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-24 22:31:41,759 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-24 22:31:41,760 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-24 22:31:41,760 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-24 22:31:41,760 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-24 22:31:41,760 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-24 22:31:41,760 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-24 22:31:41,760 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-24 22:31:41,760 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-24 22:31:41,760 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-24 22:31:41,760 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-24 22:31:41,760 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-24 22:31:41,761 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-24 22:31:41,761 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-24 22:31:41,761 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-24 22:31:41,761 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-24 22:31:41,761 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-24 22:31:41,761 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-24 22:31:41,761 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-24 22:31:41,761 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-24 22:31:41,761 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-24 22:31:41,761 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-24 22:31:41,784 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-24 22:31:41,795 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-24 22:31:41,798 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-24 22:31:41,800 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-24 22:31:41,800 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-24 22:31:41,801 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/_0x_0x71e4b8de109428f999391eb3424d2cc87192e8ba_transfer-self.bpl
[2020-11-24 22:31:41,801 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/_0x_0x71e4b8de109428f999391eb3424d2cc87192e8ba_transfer-self.bpl'
[2020-11-24 22:31:41,905 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-24 22:31:41,906 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-24 22:31:41,907 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-24 22:31:41,907 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-24 22:31:41,907 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-24 22:31:41,924 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "_0x_0x71e4b8de109428f999391eb3424d2cc87192e8ba_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 10:31:41" (1/1) ...
[2020-11-24 22:31:41,926 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "_0x_0x71e4b8de109428f999391eb3424d2cc87192e8ba_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 10:31:41" (1/1) ...
[2020-11-24 22:31:41,970 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "_0x_0x71e4b8de109428f999391eb3424d2cc87192e8ba_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 10:31:41" (1/1) ...
[2020-11-24 22:31:41,971 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "_0x_0x71e4b8de109428f999391eb3424d2cc87192e8ba_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 10:31:41" (1/1) ...
[2020-11-24 22:31:42,002 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "_0x_0x71e4b8de109428f999391eb3424d2cc87192e8ba_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 10:31:41" (1/1) ...
[2020-11-24 22:31:42,012 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "_0x_0x71e4b8de109428f999391eb3424d2cc87192e8ba_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 10:31:41" (1/1) ...
[2020-11-24 22:31:42,021 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "_0x_0x71e4b8de109428f999391eb3424d2cc87192e8ba_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 10:31:41" (1/1) ...
[2020-11-24 22:31:42,032 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-24 22:31:42,033 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-24 22:31:42,033 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-24 22:31:42,035 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-24 22:31:42,039 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "_0x_0x71e4b8de109428f999391eb3424d2cc87192e8ba_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 10:31:41" (1/1) ...
[2020-11-24 22:31:42,056 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(TokenERC20.transfer(to, value), msg.sender == to && value <= balances_TokenERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_TokenERC20[this][to] >= 0 && balances_TokenERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_TokenERC20[this][msg.sender] >= 0 &&  balances_TokenERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(TokenERC20.transfer(to, value), return == true && _totalSupply_TokenERC20[this] == old(_totalSupply_TokenERC20[this]) && balances_TokenERC20[this] == old(balances_TokenERC20[this]) && allowed_TokenERC20[this] == old(allowed_TokenERC20[this]) && aSBlock__0x[this] == old(aSBlock__0x[this]) && aEBlock__0x[this] == old(aEBlock__0x[this]) && aCap__0x[this] == old(aCap__0x[this]) && aTot__0x[this] == old(aTot__0x[this]) && aAmt__0x[this] == old(aAmt__0x[this]) && sSBlock__0x[this] == old(sSBlock__0x[this]) && sEBlock__0x[this] == old(sEBlock__0x[this]) && sCap__0x[this] == old(sCap__0x[this]) && sTot__0x[this] == old(sTot__0x[this]) && sChunk__0x[this] == old(sChunk__0x[this]) && sPrice__0x[this] == old(sPrice__0x[this]) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this]) && name_TokenERC20[this] == old(name_TokenERC20[this]) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-24 22:31:42,060 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(TokenERC20.transfer(to, value), msg.sender == to && value <= balances_TokenERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_TokenERC20[this][to] >= 0 && balances_TokenERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_TokenERC20[this][msg.sender] >= 0 &&  balances_TokenERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(TokenERC20.transfer(to, value), return == true && _totalSupply_TokenERC20[this] == old(_totalSupply_TokenERC20[this]) && balances_TokenERC20[this] == old(balances_TokenERC20[this]) && allowed_TokenERC20[this] == old(allowed_TokenERC20[this]) && aSBlock__0x[this] == old(aSBlock__0x[this]) && aEBlock__0x[this] == old(aEBlock__0x[this]) && aCap__0x[this] == old(aCap__0x[this]) && aTot__0x[this] == old(aTot__0x[this]) && aAmt__0x[this] == old(aAmt__0x[this]) && sSBlock__0x[this] == old(sSBlock__0x[this]) && sEBlock__0x[this] == old(sEBlock__0x[this]) && sCap__0x[this] == old(sCap__0x[this]) && sTot__0x[this] == old(sTot__0x[this]) && sChunk__0x[this] == old(sChunk__0x[this]) && sPrice__0x[this] == old(sPrice__0x[this]) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this]) && name_TokenERC20[this] == old(name_TokenERC20[this]) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-24 22:31:42,066 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(TokenERC20.transfer(to, value), msg.sender == to && value <= balances_TokenERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_TokenERC20[this][to] >= 0 && balances_TokenERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_TokenERC20[this][msg.sender] >= 0 &&  balances_TokenERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(TokenERC20.transfer(to, value), return == true && _totalSupply_TokenERC20[this] == old(_totalSupply_TokenERC20[this]) && balances_TokenERC20[this] == old(balances_TokenERC20[this]) && allowed_TokenERC20[this] == old(allowed_TokenERC20[this]) && aSBlock__0x[this] == old(aSBlock__0x[this]) && aEBlock__0x[this] == old(aEBlock__0x[this]) && aCap__0x[this] == old(aCap__0x[this]) && aTot__0x[this] == old(aTot__0x[this]) && aAmt__0x[this] == old(aAmt__0x[this]) && sSBlock__0x[this] == old(sSBlock__0x[this]) && sEBlock__0x[this] == old(sEBlock__0x[this]) && sCap__0x[this] == old(sCap__0x[this]) && sTot__0x[this] == old(sTot__0x[this]) && sChunk__0x[this] == old(sChunk__0x[this]) && sPrice__0x[this] == old(sPrice__0x[this]) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this]) && name_TokenERC20[this] == old(name_TokenERC20[this]) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-24 22:31:42,074 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( msg.sender==to_s381 && tokens_s381<=balances_TokenERC20[this][msg.sender] ) && tokens_s381>=0 ) && tokens_s381<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_TokenERC20[this][to_s381]>=0 ) && balances_TokenERC20[this][to_s381]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_TokenERC20[this][msg.sender]>=0 ) && balances_TokenERC20[this][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>],IdentifierExpression[to_s381,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]],BinaryExpression[COMPLEQ,IdentifierExpression[tokens_s381,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]]],BinaryExpression[COMPGEQ,IdentifierExpression[tokens_s381,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[tokens_s381,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],[IdentifierExpression[to_s381,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],[IdentifierExpression[to_s381,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-24 22:31:42,080 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( success_s381==true && _totalSupply_TokenERC20[this]==( old(_totalSupply_TokenERC20[this]) ) ) && balances_TokenERC20[this]==( old(balances_TokenERC20[this]) ) ) && allowed_TokenERC20[this]==( old(allowed_TokenERC20[this]) ) ) && aSBlock__0x[this]==( old(aSBlock__0x[this]) ) ) && aEBlock__0x[this]==( old(aEBlock__0x[this]) ) ) && aCap__0x[this]==( old(aCap__0x[this]) ) ) && aTot__0x[this]==( old(aTot__0x[this]) ) ) && aAmt__0x[this]==( old(aAmt__0x[this]) ) ) && sSBlock__0x[this]==( old(sSBlock__0x[this]) ) ) && sEBlock__0x[this]==( old(sEBlock__0x[this]) ) ) && sCap__0x[this]==( old(sCap__0x[this]) ) ) && sTot__0x[this]==( old(sTot__0x[this]) ) ) && sChunk__0x[this]==( old(sChunk__0x[this]) ) ) && sPrice__0x[this]==( old(sPrice__0x[this]) ) ) && symbol_TokenERC20[this]==( old(symbol_TokenERC20[this]) ) ) && name_TokenERC20[this]==( old(name_TokenERC20[this]) ) ) && decimals_TokenERC20[this]==( old(decimals_TokenERC20[this]) ) ) && owner_Owned[this]==( old(owner_Owned[this]) ) ) && newOwner_Owned[this]==( old(newOwner_Owned[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[success_s381,<IMPLEMENTATION_OUTPARAM,transfer~address~uint256_TokenERC20>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_totalSupply_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_totalSupply_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[balances_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[balances_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[allowed_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[allowed_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[aSBlock__0x,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[aSBlock__0x,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[aEBlock__0x,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[aEBlock__0x,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[aCap__0x,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[aCap__0x,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[aTot__0x,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[aTot__0x,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[aAmt__0x,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[aAmt__0x,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[sSBlock__0x,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[sSBlock__0x,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[sEBlock__0x,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[sEBlock__0x,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[sCap__0x,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[sCap__0x,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[sTot__0x,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[sTot__0x,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[sChunk__0x,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[sChunk__0x,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[sPrice__0x,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[sPrice__0x,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[symbol_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[symbol_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[name_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[name_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[decimals_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[decimals_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[owner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[owner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[newOwner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[newOwner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]]]]
[2020-11-24 22:31:42,094 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(TokenERC20.transfer(to, value), msg.sender == to && value <= balances_TokenERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_TokenERC20[this][to] >= 0 && balances_TokenERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_TokenERC20[this][msg.sender] >= 0 &&  balances_TokenERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(TokenERC20.transfer(to, value), return == true && _totalSupply_TokenERC20[this] == old(_totalSupply_TokenERC20[this]) && balances_TokenERC20[this] == old(balances_TokenERC20[this]) && allowed_TokenERC20[this] == old(allowed_TokenERC20[this]) && aSBlock__0x[this] == old(aSBlock__0x[this]) && aEBlock__0x[this] == old(aEBlock__0x[this]) && aCap__0x[this] == old(aCap__0x[this]) && aTot__0x[this] == old(aTot__0x[this]) && aAmt__0x[this] == old(aAmt__0x[this]) && sSBlock__0x[this] == old(sSBlock__0x[this]) && sEBlock__0x[this] == old(sEBlock__0x[this]) && sCap__0x[this] == old(sCap__0x[this]) && sTot__0x[this] == old(sTot__0x[this]) && sChunk__0x[this] == old(sChunk__0x[this]) && sPrice__0x[this] == old(sPrice__0x[this]) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this]) && name_TokenERC20[this] == old(name_TokenERC20[this]) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-24 22:31:42,095 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transfer_TokenERC200) ==> ( <>AP(success_transfer_TokenERC200) ) ) )
Executed UtopiaSpecLang
[2020-11-24 22:31:42,110 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 10:31:42 PropertyContainer
[2020-11-24 22:31:42,110 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-24 22:31:42,111 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-24 22:31:42,111 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-24 22:31:42,111 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-24 22:31:42,112 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "_0x_0x71e4b8de109428f999391eb3424d2cc87192e8ba_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 10:31:41" (1/2) ...
[2020-11-24 22:31:42,112 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-24 22:31:42,113 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-24 22:31:42,131 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 10:31:42" (2/2) ...
[2020-11-24 22:31:42,131 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-24 22:31:42,132 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-24 22:31:42,132 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-24 22:31:42,132 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-24 22:31:42,133 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "_0x_0x71e4b8de109428f999391eb3424d2cc87192e8ba_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 10:31:41" (1/2) ...
[2020-11-24 22:31:42,190 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-24 22:31:42,191 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-24 22:31:42,191 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-24 22:31:42,191 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-24 22:31:42,191 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-24 22:31:42,191 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-24 22:31:42,191 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-24 22:31:42,191 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-24 22:31:42,192 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface_NoBaseCtor__success
[2020-11-24 22:31:42,192 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface
[2020-11-24 22:31:42,192 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface
[2020-11-24 22:31:42,192 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20Interface
[2020-11-24 22:31:42,192 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20Interface
[2020-11-24 22:31:42,192 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20Interface
[2020-11-24 22:31:42,192 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Interface
[2020-11-24 22:31:42,192 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Interface
[2020-11-24 22:31:42,193 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Interface
[2020-11-24 22:31:42,193 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__success
[2020-11-24 22:31:42,193 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack
[2020-11-24 22:31:42,193 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack
[2020-11-24 22:31:42,193 INFO  L130     BoogieDeclarations]: Found specification of procedure receiveApproval~address~uint256~address~bytes_ApproveAndCallFallBack
[2020-11-24 22:31:42,193 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned_NoBaseCtor__success
[2020-11-24 22:31:42,193 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned
[2020-11-24 22:31:42,193 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned
[2020-11-24 22:31:42,193 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned
[2020-11-24 22:31:42,194 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned
[2020-11-24 22:31:42,194 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Owned
[2020-11-24 22:31:42,194 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Owned
[2020-11-24 22:31:42,194 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned
[2020-11-24 22:31:42,194 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned
[2020-11-24 22:31:42,194 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Owned
[2020-11-24 22:31:42,194 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Owned
[2020-11-24 22:31:42,194 INFO  L130     BoogieDeclarations]: Found specification of procedure TokenERC20_TokenERC20_NoBaseCtor__success
[2020-11-24 22:31:42,194 INFO  L130     BoogieDeclarations]: Found specification of procedure TokenERC20_TokenERC20
[2020-11-24 22:31:42,194 INFO  L138     BoogieDeclarations]: Found implementation of procedure TokenERC20_TokenERC20
[2020-11-24 22:31:42,195 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_TokenERC20
[2020-11-24 22:31:42,195 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_TokenERC20
[2020-11-24 22:31:42,195 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_TokenERC20
[2020-11-24 22:31:42,195 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_TokenERC20
[2020-11-24 22:31:42,195 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_TokenERC20
[2020-11-24 22:31:42,195 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_TokenERC20
[2020-11-24 22:31:42,195 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_TokenERC20
[2020-11-24 22:31:42,195 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_TokenERC20
[2020-11-24 22:31:42,195 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_TokenERC20
[2020-11-24 22:31:42,195 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_TokenERC20
[2020-11-24 22:31:42,195 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_TokenERC20
[2020-11-24 22:31:42,196 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_TokenERC20
[2020-11-24 22:31:42,196 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_TokenERC20
[2020-11-24 22:31:42,196 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_TokenERC20
[2020-11-24 22:31:42,196 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_TokenERC20__success
[2020-11-24 22:31:42,196 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_TokenERC20
[2020-11-24 22:31:42,196 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_TokenERC20
[2020-11-24 22:31:42,196 INFO  L130     BoogieDeclarations]: Found specification of procedure name_TokenERC20
[2020-11-24 22:31:42,196 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_TokenERC20
[2020-11-24 22:31:42,196 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_TokenERC20
[2020-11-24 22:31:42,196 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_TokenERC20
[2020-11-24 22:31:42,197 INFO  L130     BoogieDeclarations]: Found specification of procedure _0x__0x_NoBaseCtor__success
[2020-11-24 22:31:42,197 INFO  L130     BoogieDeclarations]: Found specification of procedure _0x__0x
[2020-11-24 22:31:42,197 INFO  L138     BoogieDeclarations]: Found implementation of procedure _0x__0x
[2020-11-24 22:31:42,197 INFO  L130     BoogieDeclarations]: Found specification of procedure getAirdrop~address__0x
[2020-11-24 22:31:42,197 INFO  L138     BoogieDeclarations]: Found implementation of procedure getAirdrop~address__0x
[2020-11-24 22:31:42,197 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenSale~address__0x
[2020-11-24 22:31:42,197 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenSale~address__0x
[2020-11-24 22:31:42,197 INFO  L130     BoogieDeclarations]: Found specification of procedure viewAirdrop__0x
[2020-11-24 22:31:42,197 INFO  L138     BoogieDeclarations]: Found implementation of procedure viewAirdrop__0x
[2020-11-24 22:31:42,197 INFO  L130     BoogieDeclarations]: Found specification of procedure viewSale__0x
[2020-11-24 22:31:42,198 INFO  L138     BoogieDeclarations]: Found implementation of procedure viewSale__0x
[2020-11-24 22:31:42,198 INFO  L130     BoogieDeclarations]: Found specification of procedure startAirdrop~uint256~uint256~uint256~uint256__0x
[2020-11-24 22:31:42,198 INFO  L138     BoogieDeclarations]: Found implementation of procedure startAirdrop~uint256~uint256~uint256~uint256__0x
[2020-11-24 22:31:42,198 INFO  L130     BoogieDeclarations]: Found specification of procedure startSale~uint256~uint256~uint256~uint256~uint256__0x
[2020-11-24 22:31:42,198 INFO  L138     BoogieDeclarations]: Found implementation of procedure startSale~uint256~uint256~uint256~uint256~uint256__0x
[2020-11-24 22:31:42,198 INFO  L130     BoogieDeclarations]: Found specification of procedure clearETH__0x
[2020-11-24 22:31:42,198 INFO  L138     BoogieDeclarations]: Found implementation of procedure clearETH__0x
[2020-11-24 22:31:42,198 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod__0x__success
[2020-11-24 22:31:42,198 INFO  L130     BoogieDeclarations]: Found specification of procedure aSBlock__0x
[2020-11-24 22:31:42,198 INFO  L138     BoogieDeclarations]: Found implementation of procedure aSBlock__0x
[2020-11-24 22:31:42,199 INFO  L130     BoogieDeclarations]: Found specification of procedure aEBlock__0x
[2020-11-24 22:31:42,199 INFO  L138     BoogieDeclarations]: Found implementation of procedure aEBlock__0x
[2020-11-24 22:31:42,199 INFO  L130     BoogieDeclarations]: Found specification of procedure aCap__0x
[2020-11-24 22:31:42,199 INFO  L138     BoogieDeclarations]: Found implementation of procedure aCap__0x
[2020-11-24 22:31:42,199 INFO  L130     BoogieDeclarations]: Found specification of procedure aTot__0x
[2020-11-24 22:31:42,199 INFO  L138     BoogieDeclarations]: Found implementation of procedure aTot__0x
[2020-11-24 22:31:42,199 INFO  L130     BoogieDeclarations]: Found specification of procedure aAmt__0x
[2020-11-24 22:31:42,199 INFO  L138     BoogieDeclarations]: Found implementation of procedure aAmt__0x
[2020-11-24 22:31:42,199 INFO  L130     BoogieDeclarations]: Found specification of procedure sSBlock__0x
[2020-11-24 22:31:42,199 INFO  L138     BoogieDeclarations]: Found implementation of procedure sSBlock__0x
[2020-11-24 22:31:42,200 INFO  L130     BoogieDeclarations]: Found specification of procedure sEBlock__0x
[2020-11-24 22:31:42,200 INFO  L138     BoogieDeclarations]: Found implementation of procedure sEBlock__0x
[2020-11-24 22:31:42,200 INFO  L130     BoogieDeclarations]: Found specification of procedure sCap__0x
[2020-11-24 22:31:42,200 INFO  L138     BoogieDeclarations]: Found implementation of procedure sCap__0x
[2020-11-24 22:31:42,200 INFO  L130     BoogieDeclarations]: Found specification of procedure sTot__0x
[2020-11-24 22:31:42,200 INFO  L138     BoogieDeclarations]: Found implementation of procedure sTot__0x
[2020-11-24 22:31:42,200 INFO  L130     BoogieDeclarations]: Found specification of procedure sChunk__0x
[2020-11-24 22:31:42,200 INFO  L138     BoogieDeclarations]: Found implementation of procedure sChunk__0x
[2020-11-24 22:31:42,200 INFO  L130     BoogieDeclarations]: Found specification of procedure sPrice__0x
[2020-11-24 22:31:42,200 INFO  L138     BoogieDeclarations]: Found implementation of procedure sPrice__0x
[2020-11-24 22:31:42,201 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-24 22:31:42,201 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-24 22:31:42,201 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-24 22:31:42,201 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-24 22:31:42,201 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-24 22:31:42,201 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-24 22:31:42,201 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Interface
[2020-11-24 22:31:42,201 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Interface
[2020-11-24 22:31:42,201 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ApproveAndCallFallBack
[2020-11-24 22:31:42,201 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ApproveAndCallFallBack
[2020-11-24 22:31:42,202 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Owned
[2020-11-24 22:31:42,202 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Owned
[2020-11-24 22:31:42,202 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_TokenERC20
[2020-11-24 22:31:42,202 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_TokenERC20
[2020-11-24 22:31:42,202 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice__0x
[2020-11-24 22:31:42,202 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-24 22:31:42,202 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-24 22:31:42,202 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-24 22:31:42,203 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-24 22:31:42,203 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-24 22:31:42,203 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-24 22:31:42,203 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-24 22:31:42,203 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-24 22:31:42,203 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-24 22:31:42,203 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface_NoBaseCtor__fail
[2020-11-24 22:31:42,203 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface__success
[2020-11-24 22:31:42,203 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface__fail
[2020-11-24 22:31:42,203 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__fail
[2020-11-24 22:31:42,204 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__success
[2020-11-24 22:31:42,204 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__fail
[2020-11-24 22:31:42,204 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned_NoBaseCtor__fail
[2020-11-24 22:31:42,204 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned__success
[2020-11-24 22:31:42,204 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned__fail
[2020-11-24 22:31:42,204 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned__success
[2020-11-24 22:31:42,204 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned__fail
[2020-11-24 22:31:42,204 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Owned__success
[2020-11-24 22:31:42,204 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Owned__fail
[2020-11-24 22:31:42,204 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned__success
[2020-11-24 22:31:42,205 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned__fail
[2020-11-24 22:31:42,205 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Owned__success
[2020-11-24 22:31:42,205 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Owned__fail
[2020-11-24 22:31:42,205 INFO  L130     BoogieDeclarations]: Found specification of procedure TokenERC20_TokenERC20_NoBaseCtor__fail
[2020-11-24 22:31:42,205 INFO  L130     BoogieDeclarations]: Found specification of procedure TokenERC20_TokenERC20__success
[2020-11-24 22:31:42,205 INFO  L130     BoogieDeclarations]: Found specification of procedure TokenERC20_TokenERC20__fail
[2020-11-24 22:31:42,205 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_TokenERC20__success
[2020-11-24 22:31:42,205 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_TokenERC20__fail
[2020-11-24 22:31:42,205 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_TokenERC20__success
[2020-11-24 22:31:42,205 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_TokenERC20__fail
[2020-11-24 22:31:42,206 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_TokenERC20__success
[2020-11-24 22:31:42,206 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_TokenERC20__fail
[2020-11-24 22:31:42,206 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_TokenERC20__success
[2020-11-24 22:31:42,206 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_TokenERC20__fail
[2020-11-24 22:31:42,206 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_TokenERC20__success
[2020-11-24 22:31:42,206 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_TokenERC20__fail
[2020-11-24 22:31:42,206 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_TokenERC20__success
[2020-11-24 22:31:42,206 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_TokenERC20__fail
[2020-11-24 22:31:42,206 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_TokenERC20__success
[2020-11-24 22:31:42,206 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_TokenERC20__fail
[2020-11-24 22:31:42,207 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_TokenERC20__fail
[2020-11-24 22:31:42,207 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_TokenERC20__success
[2020-11-24 22:31:42,207 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_TokenERC20__fail
[2020-11-24 22:31:42,207 INFO  L130     BoogieDeclarations]: Found specification of procedure name_TokenERC20__success
[2020-11-24 22:31:42,207 INFO  L130     BoogieDeclarations]: Found specification of procedure name_TokenERC20__fail
[2020-11-24 22:31:42,207 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_TokenERC20__success
[2020-11-24 22:31:42,207 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_TokenERC20__fail
[2020-11-24 22:31:42,207 INFO  L130     BoogieDeclarations]: Found specification of procedure _0x__0x_NoBaseCtor__fail
[2020-11-24 22:31:42,207 INFO  L130     BoogieDeclarations]: Found specification of procedure _0x__0x__success
[2020-11-24 22:31:42,207 INFO  L130     BoogieDeclarations]: Found specification of procedure _0x__0x__fail
[2020-11-24 22:31:42,207 INFO  L130     BoogieDeclarations]: Found specification of procedure getAirdrop~address__0x__success
[2020-11-24 22:31:42,208 INFO  L130     BoogieDeclarations]: Found specification of procedure getAirdrop~address__0x__fail
[2020-11-24 22:31:42,208 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenSale~address__0x__success
[2020-11-24 22:31:42,208 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenSale~address__0x__fail
[2020-11-24 22:31:42,208 INFO  L130     BoogieDeclarations]: Found specification of procedure viewAirdrop__0x__success
[2020-11-24 22:31:42,208 INFO  L130     BoogieDeclarations]: Found specification of procedure viewAirdrop__0x__fail
[2020-11-24 22:31:42,208 INFO  L130     BoogieDeclarations]: Found specification of procedure viewSale__0x__success
[2020-11-24 22:31:42,208 INFO  L130     BoogieDeclarations]: Found specification of procedure viewSale__0x__fail
[2020-11-24 22:31:42,208 INFO  L130     BoogieDeclarations]: Found specification of procedure startAirdrop~uint256~uint256~uint256~uint256__0x__success
[2020-11-24 22:31:42,208 INFO  L130     BoogieDeclarations]: Found specification of procedure startAirdrop~uint256~uint256~uint256~uint256__0x__fail
[2020-11-24 22:31:42,208 INFO  L130     BoogieDeclarations]: Found specification of procedure startSale~uint256~uint256~uint256~uint256~uint256__0x__success
[2020-11-24 22:31:42,208 INFO  L130     BoogieDeclarations]: Found specification of procedure startSale~uint256~uint256~uint256~uint256~uint256__0x__fail
[2020-11-24 22:31:42,209 INFO  L130     BoogieDeclarations]: Found specification of procedure clearETH__0x__success
[2020-11-24 22:31:42,209 INFO  L130     BoogieDeclarations]: Found specification of procedure clearETH__0x__fail
[2020-11-24 22:31:42,209 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod__0x__fail
[2020-11-24 22:31:42,209 INFO  L130     BoogieDeclarations]: Found specification of procedure aSBlock__0x__success
[2020-11-24 22:31:42,209 INFO  L130     BoogieDeclarations]: Found specification of procedure aSBlock__0x__fail
[2020-11-24 22:31:42,209 INFO  L130     BoogieDeclarations]: Found specification of procedure aEBlock__0x__success
[2020-11-24 22:31:42,209 INFO  L130     BoogieDeclarations]: Found specification of procedure aEBlock__0x__fail
[2020-11-24 22:31:42,209 INFO  L130     BoogieDeclarations]: Found specification of procedure aCap__0x__success
[2020-11-24 22:31:42,209 INFO  L130     BoogieDeclarations]: Found specification of procedure aCap__0x__fail
[2020-11-24 22:31:42,209 INFO  L130     BoogieDeclarations]: Found specification of procedure aTot__0x__success
[2020-11-24 22:31:42,209 INFO  L130     BoogieDeclarations]: Found specification of procedure aTot__0x__fail
[2020-11-24 22:31:42,209 INFO  L130     BoogieDeclarations]: Found specification of procedure aAmt__0x__success
[2020-11-24 22:31:42,210 INFO  L130     BoogieDeclarations]: Found specification of procedure aAmt__0x__fail
[2020-11-24 22:31:42,210 INFO  L130     BoogieDeclarations]: Found specification of procedure sSBlock__0x__success
[2020-11-24 22:31:42,210 INFO  L130     BoogieDeclarations]: Found specification of procedure sSBlock__0x__fail
[2020-11-24 22:31:42,210 INFO  L130     BoogieDeclarations]: Found specification of procedure sEBlock__0x__success
[2020-11-24 22:31:42,210 INFO  L130     BoogieDeclarations]: Found specification of procedure sEBlock__0x__fail
[2020-11-24 22:31:42,210 INFO  L130     BoogieDeclarations]: Found specification of procedure sCap__0x__success
[2020-11-24 22:31:42,210 INFO  L130     BoogieDeclarations]: Found specification of procedure sCap__0x__fail
[2020-11-24 22:31:42,210 INFO  L130     BoogieDeclarations]: Found specification of procedure sTot__0x__success
[2020-11-24 22:31:42,210 INFO  L130     BoogieDeclarations]: Found specification of procedure sTot__0x__fail
[2020-11-24 22:31:42,210 INFO  L130     BoogieDeclarations]: Found specification of procedure sChunk__0x__success
[2020-11-24 22:31:42,210 INFO  L130     BoogieDeclarations]: Found specification of procedure sChunk__0x__fail
[2020-11-24 22:31:42,211 INFO  L130     BoogieDeclarations]: Found specification of procedure sPrice__0x__success
[2020-11-24 22:31:42,211 INFO  L130     BoogieDeclarations]: Found specification of procedure sPrice__0x__fail
[2020-11-24 22:31:42,211 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-24 22:31:42,211 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-24 22:31:42,211 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-24 22:31:42,211 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-24 22:31:42,211 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-24 22:31:42,211 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-24 22:31:42,211 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-24 22:31:42,211 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-24 22:31:42,211 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-24 22:31:42,211 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-24 22:31:42,212 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-24 22:31:42,212 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-24 22:31:42,212 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-24 22:31:42,212 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-24 22:31:42,212 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-24 22:31:42,212 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-24 22:31:42,212 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-24 22:31:42,212 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-24 22:31:42,212 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface_NoBaseCtor__fail
[2020-11-24 22:31:42,212 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface_NoBaseCtor__success
[2020-11-24 22:31:42,212 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface__fail
[2020-11-24 22:31:42,212 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface__success
[2020-11-24 22:31:42,213 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__fail
[2020-11-24 22:31:42,213 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__success
[2020-11-24 22:31:42,213 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__fail
[2020-11-24 22:31:42,213 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__success
[2020-11-24 22:31:42,213 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned_NoBaseCtor__fail
[2020-11-24 22:31:42,213 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned_NoBaseCtor__success
[2020-11-24 22:31:42,214 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned__fail
[2020-11-24 22:31:42,214 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned__success
[2020-11-24 22:31:42,214 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned__fail
[2020-11-24 22:31:42,214 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned__success
[2020-11-24 22:31:42,214 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Owned__fail
[2020-11-24 22:31:42,214 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Owned__success
[2020-11-24 22:31:42,214 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned__fail
[2020-11-24 22:31:42,214 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned__success
[2020-11-24 22:31:42,214 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Owned__fail
[2020-11-24 22:31:42,215 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Owned__success
[2020-11-24 22:31:42,215 INFO  L138     BoogieDeclarations]: Found implementation of procedure TokenERC20_TokenERC20_NoBaseCtor__fail
[2020-11-24 22:31:42,215 INFO  L138     BoogieDeclarations]: Found implementation of procedure TokenERC20_TokenERC20_NoBaseCtor__success
[2020-11-24 22:31:42,215 INFO  L138     BoogieDeclarations]: Found implementation of procedure TokenERC20_TokenERC20__fail
[2020-11-24 22:31:42,215 INFO  L138     BoogieDeclarations]: Found implementation of procedure TokenERC20_TokenERC20__success
[2020-11-24 22:31:42,215 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_TokenERC20__fail
[2020-11-24 22:31:42,215 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_TokenERC20__success
[2020-11-24 22:31:42,215 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_TokenERC20__fail
[2020-11-24 22:31:42,215 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_TokenERC20__success
[2020-11-24 22:31:42,216 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_TokenERC20__fail
[2020-11-24 22:31:42,216 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_TokenERC20__success
[2020-11-24 22:31:42,216 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_TokenERC20__fail
[2020-11-24 22:31:42,216 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_TokenERC20__success
[2020-11-24 22:31:42,216 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_TokenERC20__fail
[2020-11-24 22:31:42,216 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_TokenERC20__success
[2020-11-24 22:31:42,217 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_TokenERC20__fail
[2020-11-24 22:31:42,217 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_TokenERC20__success
[2020-11-24 22:31:42,217 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_TokenERC20__fail
[2020-11-24 22:31:42,217 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_TokenERC20__success
[2020-11-24 22:31:42,217 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_TokenERC20__fail
[2020-11-24 22:31:42,218 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_TokenERC20__success
[2020-11-24 22:31:42,218 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_TokenERC20__fail
[2020-11-24 22:31:42,218 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_TokenERC20__success
[2020-11-24 22:31:42,218 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_TokenERC20__fail
[2020-11-24 22:31:42,218 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_TokenERC20__success
[2020-11-24 22:31:42,218 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_TokenERC20__fail
[2020-11-24 22:31:42,219 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_TokenERC20__success
[2020-11-24 22:31:42,219 INFO  L138     BoogieDeclarations]: Found implementation of procedure _0x__0x_NoBaseCtor__fail
[2020-11-24 22:31:42,219 INFO  L138     BoogieDeclarations]: Found implementation of procedure _0x__0x_NoBaseCtor__success
[2020-11-24 22:31:42,219 INFO  L138     BoogieDeclarations]: Found implementation of procedure _0x__0x__fail
[2020-11-24 22:31:42,219 INFO  L138     BoogieDeclarations]: Found implementation of procedure _0x__0x__success
[2020-11-24 22:31:42,220 INFO  L138     BoogieDeclarations]: Found implementation of procedure getAirdrop~address__0x__fail
[2020-11-24 22:31:42,220 INFO  L138     BoogieDeclarations]: Found implementation of procedure getAirdrop~address__0x__success
[2020-11-24 22:31:42,220 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenSale~address__0x__fail
[2020-11-24 22:31:42,220 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenSale~address__0x__success
[2020-11-24 22:31:42,221 INFO  L138     BoogieDeclarations]: Found implementation of procedure viewAirdrop__0x__fail
[2020-11-24 22:31:42,221 INFO  L138     BoogieDeclarations]: Found implementation of procedure viewAirdrop__0x__success
[2020-11-24 22:31:42,221 INFO  L138     BoogieDeclarations]: Found implementation of procedure viewSale__0x__fail
[2020-11-24 22:31:42,221 INFO  L138     BoogieDeclarations]: Found implementation of procedure viewSale__0x__success
[2020-11-24 22:31:42,222 INFO  L138     BoogieDeclarations]: Found implementation of procedure startAirdrop~uint256~uint256~uint256~uint256__0x__fail
[2020-11-24 22:31:42,222 INFO  L138     BoogieDeclarations]: Found implementation of procedure startAirdrop~uint256~uint256~uint256~uint256__0x__success
[2020-11-24 22:31:42,222 INFO  L138     BoogieDeclarations]: Found implementation of procedure startSale~uint256~uint256~uint256~uint256~uint256__0x__fail
[2020-11-24 22:31:42,222 INFO  L138     BoogieDeclarations]: Found implementation of procedure startSale~uint256~uint256~uint256~uint256~uint256__0x__success
[2020-11-24 22:31:42,222 INFO  L138     BoogieDeclarations]: Found implementation of procedure clearETH__0x__fail
[2020-11-24 22:31:42,223 INFO  L138     BoogieDeclarations]: Found implementation of procedure clearETH__0x__success
[2020-11-24 22:31:42,223 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod__0x__fail
[2020-11-24 22:31:42,223 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod__0x__success
[2020-11-24 22:31:42,223 INFO  L138     BoogieDeclarations]: Found implementation of procedure aSBlock__0x__fail
[2020-11-24 22:31:42,223 INFO  L138     BoogieDeclarations]: Found implementation of procedure aSBlock__0x__success
[2020-11-24 22:31:42,223 INFO  L138     BoogieDeclarations]: Found implementation of procedure aEBlock__0x__fail
[2020-11-24 22:31:42,224 INFO  L138     BoogieDeclarations]: Found implementation of procedure aEBlock__0x__success
[2020-11-24 22:31:42,224 INFO  L138     BoogieDeclarations]: Found implementation of procedure aCap__0x__fail
[2020-11-24 22:31:42,224 INFO  L138     BoogieDeclarations]: Found implementation of procedure aCap__0x__success
[2020-11-24 22:31:42,224 INFO  L138     BoogieDeclarations]: Found implementation of procedure aTot__0x__fail
[2020-11-24 22:31:42,224 INFO  L138     BoogieDeclarations]: Found implementation of procedure aTot__0x__success
[2020-11-24 22:31:42,224 INFO  L138     BoogieDeclarations]: Found implementation of procedure aAmt__0x__fail
[2020-11-24 22:31:42,225 INFO  L138     BoogieDeclarations]: Found implementation of procedure aAmt__0x__success
[2020-11-24 22:31:42,225 INFO  L138     BoogieDeclarations]: Found implementation of procedure sSBlock__0x__fail
[2020-11-24 22:31:42,225 INFO  L138     BoogieDeclarations]: Found implementation of procedure sSBlock__0x__success
[2020-11-24 22:31:42,225 INFO  L138     BoogieDeclarations]: Found implementation of procedure sEBlock__0x__fail
[2020-11-24 22:31:42,225 INFO  L138     BoogieDeclarations]: Found implementation of procedure sEBlock__0x__success
[2020-11-24 22:31:42,226 INFO  L138     BoogieDeclarations]: Found implementation of procedure sCap__0x__fail
[2020-11-24 22:31:42,226 INFO  L138     BoogieDeclarations]: Found implementation of procedure sCap__0x__success
[2020-11-24 22:31:42,226 INFO  L138     BoogieDeclarations]: Found implementation of procedure sTot__0x__fail
[2020-11-24 22:31:42,226 INFO  L138     BoogieDeclarations]: Found implementation of procedure sTot__0x__success
[2020-11-24 22:31:42,226 INFO  L138     BoogieDeclarations]: Found implementation of procedure sChunk__0x__fail
[2020-11-24 22:31:42,226 INFO  L138     BoogieDeclarations]: Found implementation of procedure sChunk__0x__success
[2020-11-24 22:31:42,227 INFO  L138     BoogieDeclarations]: Found implementation of procedure sPrice__0x__fail
[2020-11-24 22:31:42,227 INFO  L138     BoogieDeclarations]: Found implementation of procedure sPrice__0x__success
[2020-11-24 22:31:42,227 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-24 22:31:42,227 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-24 22:31:42,227 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-24 22:31:42,228 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-24 22:31:42,228 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-24 22:31:42,228 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-24 22:31:42,228 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-24 22:31:42,228 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-24 22:31:42,228 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-24 22:31:42,228 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-24 22:31:42,228 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Interface
[2020-11-24 22:31:42,228 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Interface
[2020-11-24 22:31:42,229 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ApproveAndCallFallBack
[2020-11-24 22:31:42,229 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ApproveAndCallFallBack
[2020-11-24 22:31:42,229 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Owned
[2020-11-24 22:31:42,229 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Owned
[2020-11-24 22:31:42,229 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_TokenERC20
[2020-11-24 22:31:42,229 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_TokenERC20
[2020-11-24 22:31:42,229 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice__0x
[2020-11-24 22:31:42,229 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-24 22:31:42,229 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-24 22:31:42,229 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-24 22:31:43,101 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 22:31:43,101 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 22:31:43,101 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 22:31:43,147 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-24 22:31:43,148 INFO  L286             CfgBuilder]: Removed 6 assue(true) statements.
[2020-11-24 22:31:43,150 INFO  L202        PluginConnector]: Adding new model _0x_0x71e4b8de109428f999391eb3424d2cc87192e8ba_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 10:31:43 BoogieIcfgContainer
[2020-11-24 22:31:43,150 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 10:31:42" (2/2) ...
[2020-11-24 22:31:43,150 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-24 22:31:43,151 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@35c2f411 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 10:31:43, skipping insertion in model container
[2020-11-24 22:31:43,151 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-24 22:31:43,151 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-24 22:31:43,151 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-24 22:31:43,152 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-24 22:31:43,152 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "_0x_0x71e4b8de109428f999391eb3424d2cc87192e8ba_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 10:31:41" (1/3) ...
[2020-11-24 22:31:43,153 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@460bc505 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 10:31:43, skipping insertion in model container
[2020-11-24 22:31:43,153 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 10:31:42" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-24 22:31:43,189 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 10:31:43 NWAContainer
[2020-11-24 22:31:43,189 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-24 22:31:43,189 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-24 22:31:43,189 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-24 22:31:43,190 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-24 22:31:43,190 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "_0x_0x71e4b8de109428f999391eb3424d2cc87192e8ba_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 10:31:43" (3/4) ...
[2020-11-24 22:31:43,191 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@30718f83 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 10:31:43, skipping insertion in model container
[2020-11-24 22:31:43,192 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 10:31:43" (4/4) ...
[2020-11-24 22:31:43,194 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-24 22:31:43,200 INFO  L110   BuchiProductObserver]: Initial RCFG 3566 locations, 4642 edges
[2020-11-24 22:31:43,200 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-24 22:31:43,214 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-24 22:31:44,925 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-24 22:31:44,935 INFO  L110   BuchiProductObserver]: BuchiProgram size 8358 locations, 14611 edges
[2020-11-24 22:31:44,936 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 10:31:44 BoogieIcfgContainer
[2020-11-24 22:31:44,936 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-24 22:31:44,936 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-24 22:31:44,936 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-24 22:31:44,937 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-24 22:31:44,938 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 10:31:44" (1/1) ...
[2020-11-24 22:31:45,065 INFO  L313           BlockEncoder]: Initial Icfg 8358 locations, 14611 edges
[2020-11-24 22:31:45,065 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-24 22:31:45,066 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-24 22:31:45,066 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-24 22:31:45,066 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-24 22:31:45,083 INFO  L70    emoveInfeasibleEdges]: Removed 84 edges and 15 locations because of local infeasibility
[2020-11-24 22:31:45,098 INFO  L70        RemoveSinkStates]: Removed 14 edges and 9 locations by removing sink states
[2020-11-24 22:31:45,116 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-24 22:31:45,122 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-24 22:31:45,128 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-24 22:31:45,129 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-24 22:31:45,133 INFO  L313           BlockEncoder]: Encoded RCFG 8302 locations, 14466 edges
[2020-11-24 22:31:45,134 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 24.11 10:31:45 BasicIcfg
[2020-11-24 22:31:45,134 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-24 22:31:45,134 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-24 22:31:45,134 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-24 22:31:45,136 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-24 22:31:45,136 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 22:31:45,136 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "_0x_0x71e4b8de109428f999391eb3424d2cc87192e8ba_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 10:31:41" (1/6) ...
[2020-11-24 22:31:45,138 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@35892277 and model type _0x_0x71e4b8de109428f999391eb3424d2cc87192e8ba_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 10:31:45, skipping insertion in model container
[2020-11-24 22:31:45,138 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 22:31:45,138 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 10:31:42" (2/6) ...
[2020-11-24 22:31:45,138 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@35892277 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 10:31:45, skipping insertion in model container
[2020-11-24 22:31:45,138 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 22:31:45,138 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "_0x_0x71e4b8de109428f999391eb3424d2cc87192e8ba_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 10:31:43" (3/6) ...
[2020-11-24 22:31:45,138 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@35892277 and model type _0x_0x71e4b8de109428f999391eb3424d2cc87192e8ba_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 24.11 10:31:45, skipping insertion in model container
[2020-11-24 22:31:45,138 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 22:31:45,138 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 10:31:43" (4/6) ...
[2020-11-24 22:31:45,138 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@35892277 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 10:31:45, skipping insertion in model container
[2020-11-24 22:31:45,139 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 22:31:45,139 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 10:31:44" (5/6) ...
[2020-11-24 22:31:45,139 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@35892277 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 24.11 10:31:45, skipping insertion in model container
[2020-11-24 22:31:45,139 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 22:31:45,139 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 24.11 10:31:45" (6/6) ...
[2020-11-24 22:31:45,140 INFO  L404   chiAutomizerObserver]: Analyzing ICFG _0x_0x71e4b8de109428f999391eb3424d2cc87192e8ba_transfer-self.bpl_BEv2
[2020-11-24 22:31:45,166 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-24 22:31:45,167 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-24 22:31:45,167 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-24 22:31:45,167 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-24 22:31:45,167 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-24 22:31:45,167 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-24 22:31:45,167 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-24 22:31:45,167 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-24 22:31:45,167 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-24 22:31:45,230 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8302 states.
[2020-11-24 22:31:45,309 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 22:31:45,309 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 22:31:45,310 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 22:31:45,317 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 22:31:45,317 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 22:31:45,317 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-24 22:31:45,317 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8302 states.
[2020-11-24 22:31:45,352 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 22:31:45,352 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 22:31:45,352 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 22:31:45,354 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 22:31:45,354 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_TokenERC200 := false;
[L2]                 call_transfer_TokenERC200 := false;
[L2]     CALL        call main();
[L7672]              assume null == 0;
[L7673]  CALL        call this := FreshRefGenerator__success();
[L4050]              havoc newRef;
[L4051]              assume Alloc[newRef] == false;
[L4052]              Alloc[newRef] := true;
[L4053]              assume newRef != null;
[L7673]  RET         call this := FreshRefGenerator__success();
[L7674]              assume now >= 0;
[L7675]              assume DType[this] == _0x;
[L7676]              assume msgvalue_MSG == 0;
[L7677]              gas := gas - 53000;
[L7678]  CALL        call _0x__0x__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4186]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4171]              assume msgsender_MSG != null;
[L4172]              Balance[this] := 0;
[L4186]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  COND FALSE  !(revert)
[L4740]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]  COND TRUE   revert
[L7678]  RET         call _0x__0x__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]              assume !revert && gas >= 0;

Loop:
[L7682]  CALL        call CorralChoice__0x(this);
[L7381]              havoc msgsender_MSG;
[L7382]              havoc msgvalue_MSG;
[L7383]              havoc choice;
[L7384]              havoc __ret_0_totalSupply;
[L7385]              havoc tokenOwner_s338;
[L7386]              havoc balance_s338;
[L7387]              havoc tokenOwner_s484;
[L7388]              havoc spender_s484;
[L7389]              havoc remaining_s484;
[L7390]              havoc to_s381;
[L7391]              havoc tokens_s381;
[L7392]              havoc success_s381;
[L7393]              havoc spender_s409;
[L7394]              havoc tokens_s409;
[L7395]              havoc success_s409;
[L7396]              havoc from_s468;
[L7397]              havoc to_s468;
[L7398]              havoc tokens_s468;
[L7399]              havoc success_s468;
[L7400]              havoc __ret_0_owner;
[L7401]              havoc __ret_0_newOwner;
[L7402]              havoc _newOwner_s217;
[L7403]              havoc __ret_0_symbol;
[L7404]              havoc __ret_0_name;
[L7405]              havoc __ret_0_decimals;
[L7406]              havoc spender_s527;
[L7407]              havoc tokens_s527;
[L7408]              havoc data_s527;
[L7409]              havoc success_s527;
[L7410]              havoc __ret_0_aSBlock;
[L7411]              havoc __ret_0_aEBlock;
[L7412]              havoc __ret_0_aCap;
[L7413]              havoc __ret_0_aTot;
[L7414]              havoc __ret_0_aAmt;
[L7415]              havoc __ret_0_sSBlock;
[L7416]              havoc __ret_0_sEBlock;
[L7417]              havoc __ret_0_sCap;
[L7418]              havoc __ret_0_sTot;
[L7419]              havoc __ret_0_sChunk;
[L7420]              havoc __ret_0_sPrice;
[L7421]              havoc _refer_s687;
[L7422]              havoc success_s687;
[L7423]              havoc _refer_s847;
[L7424]              havoc success_s847;
[L7425]              havoc StartBlock_s868;
[L7426]              havoc EndBlock_s868;
[L7427]              havoc DropCap_s868;
[L7428]              havoc DropCount_s868;
[L7429]              havoc DropAmount_s868;
[L7430]              havoc StartBlock_s892;
[L7431]              havoc EndBlock_s892;
[L7432]              havoc SaleCap_s892;
[L7433]              havoc SaleCount_s892;
[L7434]              havoc ChunkSize_s892;
[L7435]              havoc SalePrice_s892;
[L7436]              havoc _aSBlock_s926;
[L7437]              havoc _aEBlock_s926;
[L7438]              havoc _aAmt_s926;
[L7439]              havoc _aCap_s926;
[L7440]              havoc _sSBlock_s966;
[L7441]              havoc _sEBlock_s966;
[L7442]              havoc _sChunk_s966;
[L7443]              havoc _sPrice_s966;
[L7444]              havoc _sCap_s966;
[L7445]              havoc tmpNow;
[L7446]              havoc gas;
[L7447]              assume gas > 4000000 && gas <= 8000000;
[L7448]              tmpNow := now;
[L7449]              havoc now;
[L7450]              assume now > tmpNow;
[L7451]              assume msgsender_MSG != null;
[L7452]              assume DType[msgsender_MSG] != SafeMath;
[L7453]              assume DType[msgsender_MSG] != ERC20Interface;
[L7454]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7455]              assume DType[msgsender_MSG] != Owned;
[L7456]              assume DType[msgsender_MSG] != TokenERC20;
[L7457]              assume DType[msgsender_MSG] != _0x;
[L7458]              Alloc[msgsender_MSG] := true;
[L7459]  COND TRUE   choice == 32
[L7460]              gas := gas - 21000;
[L7461]  COND FALSE  !(gas >= 0)
[L7682]  RET         call CorralChoice__0x(this);

[2020-11-24 22:31:45,367 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 22:31:45,368 INFO  L82        PathProgramCache]: Analyzing trace with hash 1037131338, now seen corresponding path program 1 times
[2020-11-24 22:31:45,371 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 22:31:45,391 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 22:31:45,434 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 22:31:45,436 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 22:31:45,436 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-24 22:31:45,875 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 22:31:45,888 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-24 22:31:45,888 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-24 22:31:45,890 INFO  L87              Difference]: Start difference. First operand 8302 states. Second operand 4 states.
[2020-11-24 22:31:46,795 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 22:31:46,795 INFO  L93              Difference]: Finished difference Result 7020 states and 8361 transitions.
[2020-11-24 22:31:46,795 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-24 22:31:46,796 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7020 states and 8361 transitions.
[2020-11-24 22:31:46,830 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 22:31:46,870 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7020 states to 7020 states and 8361 transitions.
[2020-11-24 22:31:46,871 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-24 22:31:46,872 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 244
[2020-11-24 22:31:46,873 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7020 states and 8361 transitions.
[2020-11-24 22:31:46,886 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 22:31:46,887 INFO  L728         BuchiCegarLoop]: Abstraction has 7020 states and 8361 transitions.
[2020-11-24 22:31:46,906 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7020 states and 8361 transitions.
[2020-11-24 22:31:46,991 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7020 to 7020.
[2020-11-24 22:31:46,992 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7020 states.
[2020-11-24 22:31:47,003 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7020 states to 7020 states and 8361 transitions.
[2020-11-24 22:31:47,004 INFO  L751         BuchiCegarLoop]: Abstraction has 7020 states and 8361 transitions.
[2020-11-24 22:31:47,004 INFO  L631         BuchiCegarLoop]: Abstraction has 7020 states and 8361 transitions.
[2020-11-24 22:31:47,004 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-24 22:31:47,004 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7020 states and 8361 transitions.
[2020-11-24 22:31:47,013 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 22:31:47,013 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 22:31:47,013 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 22:31:47,015 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 22:31:47,015 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_TokenERC200 := false;
[L2]                 call_transfer_TokenERC200 := false;
[L2]     CALL        call main();
[L7672]              assume null == 0;
[L7673]  CALL        call this := FreshRefGenerator__success();
[L4050]              havoc newRef;
[L4051]              assume Alloc[newRef] == false;
[L4052]              Alloc[newRef] := true;
[L4053]              assume newRef != null;
[L7673]  RET         call this := FreshRefGenerator__success();
[L7674]              assume now >= 0;
[L7675]              assume DType[this] == _0x;
[L7676]              assume msgvalue_MSG == 0;
[L7677]              gas := gas - 53000;
[L7678]  CALL        call _0x__0x__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4186]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4171]              assume msgsender_MSG != null;
[L4172]              Balance[this] := 0;
[L4186]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  COND TRUE   revert
[L4740]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]  COND TRUE   revert
[L7678]  RET         call _0x__0x__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]              assume !revert && gas >= 0;
[L7682]  CALL        call CorralChoice__0x(this);
[L7381]              havoc msgsender_MSG;
[L7382]              havoc msgvalue_MSG;
[L7383]              havoc choice;
[L7384]              havoc __ret_0_totalSupply;
[L7385]              havoc tokenOwner_s338;
[L7386]              havoc balance_s338;
[L7387]              havoc tokenOwner_s484;
[L7388]              havoc spender_s484;
[L7389]              havoc remaining_s484;
[L7390]              havoc to_s381;
[L7391]              havoc tokens_s381;
[L7392]              havoc success_s381;
[L7393]              havoc spender_s409;
[L7394]              havoc tokens_s409;
[L7395]              havoc success_s409;
[L7396]              havoc from_s468;
[L7397]              havoc to_s468;
[L7398]              havoc tokens_s468;
[L7399]              havoc success_s468;
[L7400]              havoc __ret_0_owner;
[L7401]              havoc __ret_0_newOwner;
[L7402]              havoc _newOwner_s217;
[L7403]              havoc __ret_0_symbol;
[L7404]              havoc __ret_0_name;
[L7405]              havoc __ret_0_decimals;
[L7406]              havoc spender_s527;
[L7407]              havoc tokens_s527;
[L7408]              havoc data_s527;
[L7409]              havoc success_s527;
[L7410]              havoc __ret_0_aSBlock;
[L7411]              havoc __ret_0_aEBlock;
[L7412]              havoc __ret_0_aCap;
[L7413]              havoc __ret_0_aTot;
[L7414]              havoc __ret_0_aAmt;
[L7415]              havoc __ret_0_sSBlock;
[L7416]              havoc __ret_0_sEBlock;
[L7417]              havoc __ret_0_sCap;
[L7418]              havoc __ret_0_sTot;
[L7419]              havoc __ret_0_sChunk;
[L7420]              havoc __ret_0_sPrice;
[L7421]              havoc _refer_s687;
[L7422]              havoc success_s687;
[L7423]              havoc _refer_s847;
[L7424]              havoc success_s847;
[L7425]              havoc StartBlock_s868;
[L7426]              havoc EndBlock_s868;
[L7427]              havoc DropCap_s868;
[L7428]              havoc DropCount_s868;
[L7429]              havoc DropAmount_s868;
[L7430]              havoc StartBlock_s892;
[L7431]              havoc EndBlock_s892;
[L7432]              havoc SaleCap_s892;
[L7433]              havoc SaleCount_s892;
[L7434]              havoc ChunkSize_s892;
[L7435]              havoc SalePrice_s892;
[L7436]              havoc _aSBlock_s926;
[L7437]              havoc _aEBlock_s926;
[L7438]              havoc _aAmt_s926;
[L7439]              havoc _aCap_s926;
[L7440]              havoc _sSBlock_s966;
[L7441]              havoc _sEBlock_s966;
[L7442]              havoc _sChunk_s966;
[L7443]              havoc _sPrice_s966;
[L7444]              havoc _sCap_s966;
[L7445]              havoc tmpNow;
[L7446]              havoc gas;
[L7447]              assume gas > 4000000 && gas <= 8000000;
[L7448]              tmpNow := now;
[L7449]              havoc now;
[L7450]              assume now > tmpNow;
[L7451]              assume msgsender_MSG != null;
[L7452]              assume DType[msgsender_MSG] != SafeMath;
[L7453]              assume DType[msgsender_MSG] != ERC20Interface;
[L7454]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7455]              assume DType[msgsender_MSG] != Owned;
[L7456]              assume DType[msgsender_MSG] != TokenERC20;
[L7457]              assume DType[msgsender_MSG] != _0x;
[L7458]              Alloc[msgsender_MSG] := true;
[L7459]  COND FALSE  !(choice == 32)
[L7465]  COND FALSE  !(choice == 31)
[L7471]  COND FALSE  !(choice == 30)
[L7477]  COND TRUE   choice == 29
[L7478]              gas := gas - 21000;
[L7479]  COND TRUE   gas >= 0
[L7480]              assume tokens_s381 >= 0 && tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7481]              assume msgvalue_MSG == 0;
[L7482]  CALL        call success_s381 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s381 && tokens_s381 <= balances_TokenERC20[this][msgsender_MSG]) && tokens_s381 >= 0) && tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s381] >= 0) && balances_TokenERC20[this][to_s381] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][msgsender_MSG] >= 0) && balances_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_TokenERC200 := true;
[L2]                 call_transfer_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L978]               havoc __exception;
[L979]               revert := false;
[L980]   COND FALSE  !(__exception)
[L1014]  CALL        call success_s381 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L4478]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4117]  COND TRUE   !(b_s45 <= a_s45)
[L4118]              revert := true;
[L4478]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4479]  COND TRUE   revert
[L1014]  RET         call success_s381 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L1015]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((((((((((((success_s381 == true && _totalSupply_TokenERC20[this] == old(_totalSupply_TokenERC20[this])) && balances_TokenERC20[this] == old(balances_TokenERC20[this])) && allowed_TokenERC20[this] == old(allowed_TokenERC20[this])) && aSBlock__0x[this] == old(aSBlock__0x[this])) && aEBlock__0x[this] == old(aEBlock__0x[this])) && aCap__0x[this] == old(aCap__0x[this])) && aTot__0x[this] == old(aTot__0x[this])) && aAmt__0x[this] == old(aAmt__0x[this])) && sSBlock__0x[this] == old(sSBlock__0x[this])) && sEBlock__0x[this] == old(sEBlock__0x[this])) && sCap__0x[this] == old(sCap__0x[this])) && sTot__0x[this] == old(sTot__0x[this])) && sChunk__0x[this] == old(sChunk__0x[this])) && sPrice__0x[this] == old(sPrice__0x[this])) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this])) && name_TokenERC20[this] == old(name_TokenERC20[this])) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L2]                 revert := revert_hold;
[L7482]  RET         call success_s381 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L7682]  RET         call CorralChoice__0x(this);

Loop:
[L7682]  CALL        call CorralChoice__0x(this);
[L7381]              havoc msgsender_MSG;
[L7382]              havoc msgvalue_MSG;
[L7383]              havoc choice;
[L7384]              havoc __ret_0_totalSupply;
[L7385]              havoc tokenOwner_s338;
[L7386]              havoc balance_s338;
[L7387]              havoc tokenOwner_s484;
[L7388]              havoc spender_s484;
[L7389]              havoc remaining_s484;
[L7390]              havoc to_s381;
[L7391]              havoc tokens_s381;
[L7392]              havoc success_s381;
[L7393]              havoc spender_s409;
[L7394]              havoc tokens_s409;
[L7395]              havoc success_s409;
[L7396]              havoc from_s468;
[L7397]              havoc to_s468;
[L7398]              havoc tokens_s468;
[L7399]              havoc success_s468;
[L7400]              havoc __ret_0_owner;
[L7401]              havoc __ret_0_newOwner;
[L7402]              havoc _newOwner_s217;
[L7403]              havoc __ret_0_symbol;
[L7404]              havoc __ret_0_name;
[L7405]              havoc __ret_0_decimals;
[L7406]              havoc spender_s527;
[L7407]              havoc tokens_s527;
[L7408]              havoc data_s527;
[L7409]              havoc success_s527;
[L7410]              havoc __ret_0_aSBlock;
[L7411]              havoc __ret_0_aEBlock;
[L7412]              havoc __ret_0_aCap;
[L7413]              havoc __ret_0_aTot;
[L7414]              havoc __ret_0_aAmt;
[L7415]              havoc __ret_0_sSBlock;
[L7416]              havoc __ret_0_sEBlock;
[L7417]              havoc __ret_0_sCap;
[L7418]              havoc __ret_0_sTot;
[L7419]              havoc __ret_0_sChunk;
[L7420]              havoc __ret_0_sPrice;
[L7421]              havoc _refer_s687;
[L7422]              havoc success_s687;
[L7423]              havoc _refer_s847;
[L7424]              havoc success_s847;
[L7425]              havoc StartBlock_s868;
[L7426]              havoc EndBlock_s868;
[L7427]              havoc DropCap_s868;
[L7428]              havoc DropCount_s868;
[L7429]              havoc DropAmount_s868;
[L7430]              havoc StartBlock_s892;
[L7431]              havoc EndBlock_s892;
[L7432]              havoc SaleCap_s892;
[L7433]              havoc SaleCount_s892;
[L7434]              havoc ChunkSize_s892;
[L7435]              havoc SalePrice_s892;
[L7436]              havoc _aSBlock_s926;
[L7437]              havoc _aEBlock_s926;
[L7438]              havoc _aAmt_s926;
[L7439]              havoc _aCap_s926;
[L7440]              havoc _sSBlock_s966;
[L7441]              havoc _sEBlock_s966;
[L7442]              havoc _sChunk_s966;
[L7443]              havoc _sPrice_s966;
[L7444]              havoc _sCap_s966;
[L7445]              havoc tmpNow;
[L7446]              havoc gas;
[L7447]              assume gas > 4000000 && gas <= 8000000;
[L7448]              tmpNow := now;
[L7449]              havoc now;
[L7450]              assume now > tmpNow;
[L7451]              assume msgsender_MSG != null;
[L7452]              assume DType[msgsender_MSG] != SafeMath;
[L7453]              assume DType[msgsender_MSG] != ERC20Interface;
[L7454]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7455]              assume DType[msgsender_MSG] != Owned;
[L7456]              assume DType[msgsender_MSG] != TokenERC20;
[L7457]              assume DType[msgsender_MSG] != _0x;
[L7458]              Alloc[msgsender_MSG] := true;
[L7459]  COND FALSE  !(choice == 32)
[L7465]  COND FALSE  !(choice == 31)
[L7471]  COND FALSE  !(choice == 30)
[L7477]  COND TRUE   choice == 29
[L7478]              gas := gas - 21000;
[L7479]  COND TRUE   gas >= 0
[L7480]              assume tokens_s381 >= 0 && tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7481]              assume msgvalue_MSG == 0;
[L7482]  CALL        call success_s381 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s381 && tokens_s381 <= balances_TokenERC20[this][msgsender_MSG]) && tokens_s381 >= 0) && tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s381] >= 0) && balances_TokenERC20[this][to_s381] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][msgsender_MSG] >= 0) && balances_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_TokenERC200 := true;
[L2]                 call_transfer_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L978]               havoc __exception;
[L979]               revert := false;
[L980]   COND FALSE  !(__exception)
[L1014]  CALL        call success_s381 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L4478]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4117]  COND TRUE   !(b_s45 <= a_s45)
[L4118]              revert := true;
[L4478]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4479]  COND TRUE   revert
[L1014]  RET         call success_s381 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L1015]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((((((((((((success_s381 == true && _totalSupply_TokenERC20[this] == old(_totalSupply_TokenERC20[this])) && balances_TokenERC20[this] == old(balances_TokenERC20[this])) && allowed_TokenERC20[this] == old(allowed_TokenERC20[this])) && aSBlock__0x[this] == old(aSBlock__0x[this])) && aEBlock__0x[this] == old(aEBlock__0x[this])) && aCap__0x[this] == old(aCap__0x[this])) && aTot__0x[this] == old(aTot__0x[this])) && aAmt__0x[this] == old(aAmt__0x[this])) && sSBlock__0x[this] == old(sSBlock__0x[this])) && sEBlock__0x[this] == old(sEBlock__0x[this])) && sCap__0x[this] == old(sCap__0x[this])) && sTot__0x[this] == old(sTot__0x[this])) && sChunk__0x[this] == old(sChunk__0x[this])) && sPrice__0x[this] == old(sPrice__0x[this])) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this])) && name_TokenERC20[this] == old(name_TokenERC20[this])) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L2]                 revert := revert_hold;
[L7482]  RET         call success_s381 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L7682]  RET         call CorralChoice__0x(this);

[2020-11-24 22:31:47,020 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 22:31:47,020 INFO  L82        PathProgramCache]: Analyzing trace with hash 1430897349, now seen corresponding path program 1 times
[2020-11-24 22:31:47,021 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 22:31:47,030 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 22:31:47,050 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 22:31:47,050 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 22:31:47,050 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-24 22:31:47,052 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 22:31:47,052 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-24 22:31:47,052 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-24 22:31:47,052 INFO  L87              Difference]: Start difference. First operand 7020 states and 8361 transitions. cyclomatic complexity: 1347 Second operand 3 states.
[2020-11-24 22:31:47,181 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 22:31:47,181 INFO  L93              Difference]: Finished difference Result 8380 states and 10048 transitions.
[2020-11-24 22:31:47,181 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-24 22:31:47,182 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8380 states and 10048 transitions.
[2020-11-24 22:31:47,209 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 22:31:47,252 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8380 states to 8064 states and 9514 transitions.
[2020-11-24 22:31:47,252 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 306
[2020-11-24 22:31:47,253 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 306
[2020-11-24 22:31:47,253 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8064 states and 9514 transitions.
[2020-11-24 22:31:47,261 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 22:31:47,261 INFO  L728         BuchiCegarLoop]: Abstraction has 8064 states and 9514 transitions.
[2020-11-24 22:31:47,269 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8064 states and 9514 transitions.
[2020-11-24 22:31:47,364 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8064 to 7184.
[2020-11-24 22:31:47,364 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7184 states.
[2020-11-24 22:31:47,374 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7184 states to 7184 states and 8412 transitions.
[2020-11-24 22:31:47,374 INFO  L751         BuchiCegarLoop]: Abstraction has 7184 states and 8412 transitions.
[2020-11-24 22:31:47,374 INFO  L631         BuchiCegarLoop]: Abstraction has 7184 states and 8412 transitions.
[2020-11-24 22:31:47,374 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-24 22:31:47,374 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7184 states and 8412 transitions.
[2020-11-24 22:31:47,382 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 22:31:47,382 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 22:31:47,382 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 22:31:47,384 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 22:31:47,385 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_TokenERC200 := false;
[L2]                 call_transfer_TokenERC200 := false;
[L2]     CALL        call main();
[L7672]              assume null == 0;
[L7673]  CALL        call this := FreshRefGenerator__success();
[L4050]              havoc newRef;
[L4051]              assume Alloc[newRef] == false;
[L4052]              Alloc[newRef] := true;
[L4053]              assume newRef != null;
[L7673]  RET         call this := FreshRefGenerator__success();
[L7674]              assume now >= 0;
[L7675]              assume DType[this] == _0x;
[L7676]              assume msgvalue_MSG == 0;
[L7677]              gas := gas - 53000;
[L7678]  CALL        call _0x__0x__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4186]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4171]              assume msgsender_MSG != null;
[L4172]              Balance[this] := 0;
[L4186]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  COND FALSE  !(revert)
[L4740]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]  COND FALSE  !(revert)
[L4744]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4256]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4238]              assume msgsender_MSG != null;
[L4239]              Balance[this] := 0;
[L4240]              owner_Owned[this] := null;
[L4241]              newOwner_Owned[this] := null;
[L4243]              owner_Owned[this] := msgsender_MSG;
[L4256]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  COND FALSE  !(revert)
[L4744]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4745]  COND FALSE  !(revert)
[L4748]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4400]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4186]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4171]              assume msgsender_MSG != null;
[L4172]              Balance[this] := 0;
[L4186]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  COND FALSE  !(revert)
[L4400]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4401]  COND FALSE  !(revert)
[L4404]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4256]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4238]              assume msgsender_MSG != null;
[L4239]              Balance[this] := 0;
[L4240]              owner_Owned[this] := null;
[L4241]              newOwner_Owned[this] := null;
[L4243]              owner_Owned[this] := msgsender_MSG;
[L4256]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  COND FALSE  !(revert)
[L4404]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4405]  COND FALSE  !(revert)
[L4408]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4358]              assume msgsender_MSG != null;
[L4359]              Balance[this] := 0;
[L4360]              symbol_TokenERC20[this] := 1454487515;
[L4361]              name_TokenERC20[this] := 1454487515;
[L4362]              decimals_TokenERC20[this] := 0;
[L4363]              _totalSupply_TokenERC20[this] := 0;
[L4364]              balances_TokenERC20[this] := zeroRefintArr();
[L4365]              sum_balances0[this] := 0;
[L4366]              allowed_TokenERC20[this] := zeroRefRefintArr();
[L4367]              sum_allowed1[this] := 0;
[L4369]              symbol_TokenERC20[this] := 471226056;
[L4370]              name_TokenERC20[this] := -893098295;
[L4371]              decimals_TokenERC20[this] := 8;
[L4372]              __var_2 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4373]              _totalSupply_TokenERC20[this] := nonlinearMul(999880006599780055836170557439878316590346642366426347732992, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4374]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][owner_Owned[this]];
[L4375]              balances_TokenERC20[this][owner_Owned[this]] := _totalSupply_TokenERC20[this];
[L4376]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][owner_Owned[this]];
[L4377]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4408]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4409]  COND FALSE  !(revert)
[L4748]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4749]  COND FALSE  !(revert)
[L4752]  CALL        call _0x__0x_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4702]              assume msgsender_MSG != null;
[L4703]              Balance[this] := 0;
[L4704]              aSBlock__0x[this] := 0;
[L4705]              aEBlock__0x[this] := 0;
[L4706]              aCap__0x[this] := 0;
[L4707]              aTot__0x[this] := 0;
[L4708]              aAmt__0x[this] := 0;
[L4709]              sSBlock__0x[this] := 0;
[L4710]              sEBlock__0x[this] := 0;
[L4711]              sCap__0x[this] := 0;
[L4712]              sTot__0x[this] := 0;
[L4713]              sChunk__0x[this] := 0;
[L4714]              sPrice__0x[this] := 0;
[L4752]  RET         call _0x__0x_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4753]  COND FALSE  !(revert)
[L7678]  RET         call _0x__0x__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]              assume !revert && gas >= 0;
[L7682]  CALL        call CorralChoice__0x(this);
[L7381]              havoc msgsender_MSG;
[L7382]              havoc msgvalue_MSG;
[L7383]              havoc choice;
[L7384]              havoc __ret_0_totalSupply;
[L7385]              havoc tokenOwner_s338;
[L7386]              havoc balance_s338;
[L7387]              havoc tokenOwner_s484;
[L7388]              havoc spender_s484;
[L7389]              havoc remaining_s484;
[L7390]              havoc to_s381;
[L7391]              havoc tokens_s381;
[L7392]              havoc success_s381;
[L7393]              havoc spender_s409;
[L7394]              havoc tokens_s409;
[L7395]              havoc success_s409;
[L7396]              havoc from_s468;
[L7397]              havoc to_s468;
[L7398]              havoc tokens_s468;
[L7399]              havoc success_s468;
[L7400]              havoc __ret_0_owner;
[L7401]              havoc __ret_0_newOwner;
[L7402]              havoc _newOwner_s217;
[L7403]              havoc __ret_0_symbol;
[L7404]              havoc __ret_0_name;
[L7405]              havoc __ret_0_decimals;
[L7406]              havoc spender_s527;
[L7407]              havoc tokens_s527;
[L7408]              havoc data_s527;
[L7409]              havoc success_s527;
[L7410]              havoc __ret_0_aSBlock;
[L7411]              havoc __ret_0_aEBlock;
[L7412]              havoc __ret_0_aCap;
[L7413]              havoc __ret_0_aTot;
[L7414]              havoc __ret_0_aAmt;
[L7415]              havoc __ret_0_sSBlock;
[L7416]              havoc __ret_0_sEBlock;
[L7417]              havoc __ret_0_sCap;
[L7418]              havoc __ret_0_sTot;
[L7419]              havoc __ret_0_sChunk;
[L7420]              havoc __ret_0_sPrice;
[L7421]              havoc _refer_s687;
[L7422]              havoc success_s687;
[L7423]              havoc _refer_s847;
[L7424]              havoc success_s847;
[L7425]              havoc StartBlock_s868;
[L7426]              havoc EndBlock_s868;
[L7427]              havoc DropCap_s868;
[L7428]              havoc DropCount_s868;
[L7429]              havoc DropAmount_s868;
[L7430]              havoc StartBlock_s892;
[L7431]              havoc EndBlock_s892;
[L7432]              havoc SaleCap_s892;
[L7433]              havoc SaleCount_s892;
[L7434]              havoc ChunkSize_s892;
[L7435]              havoc SalePrice_s892;
[L7436]              havoc _aSBlock_s926;
[L7437]              havoc _aEBlock_s926;
[L7438]              havoc _aAmt_s926;
[L7439]              havoc _aCap_s926;
[L7440]              havoc _sSBlock_s966;
[L7441]              havoc _sEBlock_s966;
[L7442]              havoc _sChunk_s966;
[L7443]              havoc _sPrice_s966;
[L7444]              havoc _sCap_s966;
[L7445]              havoc tmpNow;
[L7446]              havoc gas;
[L7447]              assume gas > 4000000 && gas <= 8000000;
[L7448]              tmpNow := now;
[L7449]              havoc now;
[L7450]              assume now > tmpNow;
[L7451]              assume msgsender_MSG != null;
[L7452]              assume DType[msgsender_MSG] != SafeMath;
[L7453]              assume DType[msgsender_MSG] != ERC20Interface;
[L7454]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7455]              assume DType[msgsender_MSG] != Owned;
[L7456]              assume DType[msgsender_MSG] != TokenERC20;
[L7457]              assume DType[msgsender_MSG] != _0x;
[L7458]              Alloc[msgsender_MSG] := true;
[L7459]  COND FALSE  !(choice == 32)
[L7465]  COND FALSE  !(choice == 31)
[L7471]  COND FALSE  !(choice == 30)
[L7477]  COND TRUE   choice == 29
[L7478]              gas := gas - 21000;
[L7479]  COND TRUE   gas >= 0
[L7480]              assume tokens_s381 >= 0 && tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7481]              assume msgvalue_MSG == 0;
[L7482]  CALL        call success_s381 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s381 && tokens_s381 <= balances_TokenERC20[this][msgsender_MSG]) && tokens_s381 >= 0) && tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s381] >= 0) && balances_TokenERC20[this][to_s381] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][msgsender_MSG] >= 0) && balances_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_TokenERC200 := true;
[L2]                 call_transfer_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L978]               havoc __exception;
[L979]               revert := false;
[L980]   COND FALSE  !(__exception)
[L1014]  CALL        call success_s381 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L4478]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4117]  COND FALSE  !(!(b_s45 <= a_s45))
[L4121]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4478]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4479]  COND FALSE  !(revert)
[L4482]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][msgsender_MSG];
[L4483]              balances_TokenERC20[this][msgsender_MSG] := __var_5;
[L4484]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][msgsender_MSG];
[L4485]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s381], tokens_s381);
[L4099]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4100]  COND FALSE  !(!(c_s23 >= a_s23))
[L4485]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s381], tokens_s381);
[L4486]  COND FALSE  !(revert)
[L4489]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][to_s381];
[L4490]              balances_TokenERC20[this][to_s381] := __var_6;
[L4491]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][to_s381];
[L4492]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4493]              success_s381 := true;
[L1014]  RET         call success_s381 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L1015]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((((((((((((success_s381 == true && _totalSupply_TokenERC20[this] == old(_totalSupply_TokenERC20[this])) && balances_TokenERC20[this] == old(balances_TokenERC20[this])) && allowed_TokenERC20[this] == old(allowed_TokenERC20[this])) && aSBlock__0x[this] == old(aSBlock__0x[this])) && aEBlock__0x[this] == old(aEBlock__0x[this])) && aCap__0x[this] == old(aCap__0x[this])) && aTot__0x[this] == old(aTot__0x[this])) && aAmt__0x[this] == old(aAmt__0x[this])) && sSBlock__0x[this] == old(sSBlock__0x[this])) && sEBlock__0x[this] == old(sEBlock__0x[this])) && sCap__0x[this] == old(sCap__0x[this])) && sTot__0x[this] == old(sTot__0x[this])) && sChunk__0x[this] == old(sChunk__0x[this])) && sPrice__0x[this] == old(sPrice__0x[this])) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this])) && name_TokenERC20[this] == old(name_TokenERC20[this])) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L2]                 revert := revert_hold;
[L7482]  RET         call success_s381 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L7682]  RET         call CorralChoice__0x(this);

Loop:
[L7682]  CALL        call CorralChoice__0x(this);
[L7381]              havoc msgsender_MSG;
[L7382]              havoc msgvalue_MSG;
[L7383]              havoc choice;
[L7384]              havoc __ret_0_totalSupply;
[L7385]              havoc tokenOwner_s338;
[L7386]              havoc balance_s338;
[L7387]              havoc tokenOwner_s484;
[L7388]              havoc spender_s484;
[L7389]              havoc remaining_s484;
[L7390]              havoc to_s381;
[L7391]              havoc tokens_s381;
[L7392]              havoc success_s381;
[L7393]              havoc spender_s409;
[L7394]              havoc tokens_s409;
[L7395]              havoc success_s409;
[L7396]              havoc from_s468;
[L7397]              havoc to_s468;
[L7398]              havoc tokens_s468;
[L7399]              havoc success_s468;
[L7400]              havoc __ret_0_owner;
[L7401]              havoc __ret_0_newOwner;
[L7402]              havoc _newOwner_s217;
[L7403]              havoc __ret_0_symbol;
[L7404]              havoc __ret_0_name;
[L7405]              havoc __ret_0_decimals;
[L7406]              havoc spender_s527;
[L7407]              havoc tokens_s527;
[L7408]              havoc data_s527;
[L7409]              havoc success_s527;
[L7410]              havoc __ret_0_aSBlock;
[L7411]              havoc __ret_0_aEBlock;
[L7412]              havoc __ret_0_aCap;
[L7413]              havoc __ret_0_aTot;
[L7414]              havoc __ret_0_aAmt;
[L7415]              havoc __ret_0_sSBlock;
[L7416]              havoc __ret_0_sEBlock;
[L7417]              havoc __ret_0_sCap;
[L7418]              havoc __ret_0_sTot;
[L7419]              havoc __ret_0_sChunk;
[L7420]              havoc __ret_0_sPrice;
[L7421]              havoc _refer_s687;
[L7422]              havoc success_s687;
[L7423]              havoc _refer_s847;
[L7424]              havoc success_s847;
[L7425]              havoc StartBlock_s868;
[L7426]              havoc EndBlock_s868;
[L7427]              havoc DropCap_s868;
[L7428]              havoc DropCount_s868;
[L7429]              havoc DropAmount_s868;
[L7430]              havoc StartBlock_s892;
[L7431]              havoc EndBlock_s892;
[L7432]              havoc SaleCap_s892;
[L7433]              havoc SaleCount_s892;
[L7434]              havoc ChunkSize_s892;
[L7435]              havoc SalePrice_s892;
[L7436]              havoc _aSBlock_s926;
[L7437]              havoc _aEBlock_s926;
[L7438]              havoc _aAmt_s926;
[L7439]              havoc _aCap_s926;
[L7440]              havoc _sSBlock_s966;
[L7441]              havoc _sEBlock_s966;
[L7442]              havoc _sChunk_s966;
[L7443]              havoc _sPrice_s966;
[L7444]              havoc _sCap_s966;
[L7445]              havoc tmpNow;
[L7446]              havoc gas;
[L7447]              assume gas > 4000000 && gas <= 8000000;
[L7448]              tmpNow := now;
[L7449]              havoc now;
[L7450]              assume now > tmpNow;
[L7451]              assume msgsender_MSG != null;
[L7452]              assume DType[msgsender_MSG] != SafeMath;
[L7453]              assume DType[msgsender_MSG] != ERC20Interface;
[L7454]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7455]              assume DType[msgsender_MSG] != Owned;
[L7456]              assume DType[msgsender_MSG] != TokenERC20;
[L7457]              assume DType[msgsender_MSG] != _0x;
[L7458]              Alloc[msgsender_MSG] := true;
[L7459]  COND FALSE  !(choice == 32)
[L7465]  COND FALSE  !(choice == 31)
[L7471]  COND FALSE  !(choice == 30)
[L7477]  COND TRUE   choice == 29
[L7478]              gas := gas - 21000;
[L7479]  COND TRUE   gas >= 0
[L7480]              assume tokens_s381 >= 0 && tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7481]              assume msgvalue_MSG == 0;
[L7482]  CALL        call success_s381 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s381 && tokens_s381 <= balances_TokenERC20[this][msgsender_MSG]) && tokens_s381 >= 0) && tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s381] >= 0) && balances_TokenERC20[this][to_s381] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][msgsender_MSG] >= 0) && balances_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_TokenERC200 := true;
[L2]                 call_transfer_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L978]               havoc __exception;
[L979]               revert := false;
[L980]   COND FALSE  !(__exception)
[L1014]  CALL        call success_s381 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L4478]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4117]  COND FALSE  !(!(b_s45 <= a_s45))
[L4121]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4478]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4479]  COND FALSE  !(revert)
[L4482]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][msgsender_MSG];
[L4483]              balances_TokenERC20[this][msgsender_MSG] := __var_5;
[L4484]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][msgsender_MSG];
[L4485]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s381], tokens_s381);
[L4099]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4100]  COND FALSE  !(!(c_s23 >= a_s23))
[L4485]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s381], tokens_s381);
[L4486]  COND FALSE  !(revert)
[L4489]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][to_s381];
[L4490]              balances_TokenERC20[this][to_s381] := __var_6;
[L4491]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][to_s381];
[L4492]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4493]              success_s381 := true;
[L1014]  RET         call success_s381 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L1015]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((((((((((((success_s381 == true && _totalSupply_TokenERC20[this] == old(_totalSupply_TokenERC20[this])) && balances_TokenERC20[this] == old(balances_TokenERC20[this])) && allowed_TokenERC20[this] == old(allowed_TokenERC20[this])) && aSBlock__0x[this] == old(aSBlock__0x[this])) && aEBlock__0x[this] == old(aEBlock__0x[this])) && aCap__0x[this] == old(aCap__0x[this])) && aTot__0x[this] == old(aTot__0x[this])) && aAmt__0x[this] == old(aAmt__0x[this])) && sSBlock__0x[this] == old(sSBlock__0x[this])) && sEBlock__0x[this] == old(sEBlock__0x[this])) && sCap__0x[this] == old(sCap__0x[this])) && sTot__0x[this] == old(sTot__0x[this])) && sChunk__0x[this] == old(sChunk__0x[this])) && sPrice__0x[this] == old(sPrice__0x[this])) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this])) && name_TokenERC20[this] == old(name_TokenERC20[this])) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L2]                 revert := revert_hold;
[L7482]  RET         call success_s381 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L7682]  RET         call CorralChoice__0x(this);

[2020-11-24 22:31:47,394 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 22:31:47,395 INFO  L82        PathProgramCache]: Analyzing trace with hash -392149776, now seen corresponding path program 1 times
[2020-11-24 22:31:47,395 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 22:31:47,452 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 22:31:48,127 INFO  L134       CoverageAnalysis]: Checked inductivity of 23 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 23 trivial. 0 not checked.
[2020-11-24 22:31:48,127 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 22:31:48,128 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [20] imperfect sequences [] total 20
[2020-11-24 22:31:48,128 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 22:31:48,129 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 21 interpolants.
[2020-11-24 22:31:48,129 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=47, Invalid=373, Unknown=0, NotChecked=0, Total=420
[2020-11-24 22:31:48,129 INFO  L87              Difference]: Start difference. First operand 7184 states and 8412 transitions. cyclomatic complexity: 1234 Second operand 21 states.
[2020-11-24 22:32:02,214 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 22:32:02,215 INFO  L93              Difference]: Finished difference Result 7395 states and 8645 transitions.
[2020-11-24 22:32:02,215 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 21 states. 
[2020-11-24 22:32:02,215 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7395 states and 8645 transitions.
[2020-11-24 22:32:02,228 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-24 22:32:02,248 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7395 states to 7395 states and 8645 transitions.
[2020-11-24 22:32:02,248 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 281
[2020-11-24 22:32:02,249 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 281
[2020-11-24 22:32:02,249 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7395 states and 8645 transitions.
[2020-11-24 22:32:02,255 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 22:32:02,255 INFO  L728         BuchiCegarLoop]: Abstraction has 7395 states and 8645 transitions.
[2020-11-24 22:32:02,261 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7395 states and 8645 transitions.
[2020-11-24 22:32:02,316 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7395 to 7329.
[2020-11-24 22:32:02,316 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7329 states.
[2020-11-24 22:32:02,323 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7329 states to 7329 states and 8573 transitions.
[2020-11-24 22:32:02,324 INFO  L751         BuchiCegarLoop]: Abstraction has 7329 states and 8573 transitions.
[2020-11-24 22:32:02,324 INFO  L631         BuchiCegarLoop]: Abstraction has 7329 states and 8573 transitions.
[2020-11-24 22:32:02,324 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-24 22:32:02,324 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7329 states and 8573 transitions.
[2020-11-24 22:32:02,331 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-24 22:32:02,331 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 22:32:02,331 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 22:32:02,334 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 22:32:02,334 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_TokenERC200 := false;
[L2]                 call_transfer_TokenERC200 := false;
[L2]     CALL        call main();
[L7672]              assume null == 0;
[L7673]  CALL        call this := FreshRefGenerator__success();
[L4050]              havoc newRef;
[L4051]              assume Alloc[newRef] == false;
[L4052]              Alloc[newRef] := true;
[L4053]              assume newRef != null;
[L7673]  RET         call this := FreshRefGenerator__success();
[L7674]              assume now >= 0;
[L7675]              assume DType[this] == _0x;
[L7676]              assume msgvalue_MSG == 0;
[L7677]              gas := gas - 53000;
[L7678]  CALL        call _0x__0x__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4186]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4171]              assume msgsender_MSG != null;
[L4172]              Balance[this] := 0;
[L4186]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  COND FALSE  !(revert)
[L4740]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]  COND FALSE  !(revert)
[L4744]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4256]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4238]              assume msgsender_MSG != null;
[L4239]              Balance[this] := 0;
[L4240]              owner_Owned[this] := null;
[L4241]              newOwner_Owned[this] := null;
[L4243]              owner_Owned[this] := msgsender_MSG;
[L4256]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  COND FALSE  !(revert)
[L4744]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4745]  COND FALSE  !(revert)
[L4748]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4400]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4186]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4171]              assume msgsender_MSG != null;
[L4172]              Balance[this] := 0;
[L4186]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  COND FALSE  !(revert)
[L4400]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4401]  COND FALSE  !(revert)
[L4404]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4256]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4238]              assume msgsender_MSG != null;
[L4239]              Balance[this] := 0;
[L4240]              owner_Owned[this] := null;
[L4241]              newOwner_Owned[this] := null;
[L4243]              owner_Owned[this] := msgsender_MSG;
[L4256]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  COND FALSE  !(revert)
[L4404]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4405]  COND FALSE  !(revert)
[L4408]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4358]              assume msgsender_MSG != null;
[L4359]              Balance[this] := 0;
[L4360]              symbol_TokenERC20[this] := 1454487515;
[L4361]              name_TokenERC20[this] := 1454487515;
[L4362]              decimals_TokenERC20[this] := 0;
[L4363]              _totalSupply_TokenERC20[this] := 0;
[L4364]              balances_TokenERC20[this] := zeroRefintArr();
[L4365]              sum_balances0[this] := 0;
[L4366]              allowed_TokenERC20[this] := zeroRefRefintArr();
[L4367]              sum_allowed1[this] := 0;
[L4369]              symbol_TokenERC20[this] := 471226056;
[L4370]              name_TokenERC20[this] := -893098295;
[L4371]              decimals_TokenERC20[this] := 8;
[L4372]              __var_2 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4373]              _totalSupply_TokenERC20[this] := nonlinearMul(999880006599780055836170557439878316590346642366426347732992, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4374]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][owner_Owned[this]];
[L4375]              balances_TokenERC20[this][owner_Owned[this]] := _totalSupply_TokenERC20[this];
[L4376]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][owner_Owned[this]];
[L4377]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4408]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4409]  COND FALSE  !(revert)
[L4748]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4749]  COND FALSE  !(revert)
[L4752]  CALL        call _0x__0x_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4702]              assume msgsender_MSG != null;
[L4703]              Balance[this] := 0;
[L4704]              aSBlock__0x[this] := 0;
[L4705]              aEBlock__0x[this] := 0;
[L4706]              aCap__0x[this] := 0;
[L4707]              aTot__0x[this] := 0;
[L4708]              aAmt__0x[this] := 0;
[L4709]              sSBlock__0x[this] := 0;
[L4710]              sEBlock__0x[this] := 0;
[L4711]              sCap__0x[this] := 0;
[L4712]              sTot__0x[this] := 0;
[L4713]              sChunk__0x[this] := 0;
[L4714]              sPrice__0x[this] := 0;
[L4752]  RET         call _0x__0x_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4753]  COND FALSE  !(revert)
[L7678]  RET         call _0x__0x__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]              assume !revert && gas >= 0;
[L7682]  CALL        call CorralChoice__0x(this);
[L7381]              havoc msgsender_MSG;
[L7382]              havoc msgvalue_MSG;
[L7383]              havoc choice;
[L7384]              havoc __ret_0_totalSupply;
[L7385]              havoc tokenOwner_s338;
[L7386]              havoc balance_s338;
[L7387]              havoc tokenOwner_s484;
[L7388]              havoc spender_s484;
[L7389]              havoc remaining_s484;
[L7390]              havoc to_s381;
[L7391]              havoc tokens_s381;
[L7392]              havoc success_s381;
[L7393]              havoc spender_s409;
[L7394]              havoc tokens_s409;
[L7395]              havoc success_s409;
[L7396]              havoc from_s468;
[L7397]              havoc to_s468;
[L7398]              havoc tokens_s468;
[L7399]              havoc success_s468;
[L7400]              havoc __ret_0_owner;
[L7401]              havoc __ret_0_newOwner;
[L7402]              havoc _newOwner_s217;
[L7403]              havoc __ret_0_symbol;
[L7404]              havoc __ret_0_name;
[L7405]              havoc __ret_0_decimals;
[L7406]              havoc spender_s527;
[L7407]              havoc tokens_s527;
[L7408]              havoc data_s527;
[L7409]              havoc success_s527;
[L7410]              havoc __ret_0_aSBlock;
[L7411]              havoc __ret_0_aEBlock;
[L7412]              havoc __ret_0_aCap;
[L7413]              havoc __ret_0_aTot;
[L7414]              havoc __ret_0_aAmt;
[L7415]              havoc __ret_0_sSBlock;
[L7416]              havoc __ret_0_sEBlock;
[L7417]              havoc __ret_0_sCap;
[L7418]              havoc __ret_0_sTot;
[L7419]              havoc __ret_0_sChunk;
[L7420]              havoc __ret_0_sPrice;
[L7421]              havoc _refer_s687;
[L7422]              havoc success_s687;
[L7423]              havoc _refer_s847;
[L7424]              havoc success_s847;
[L7425]              havoc StartBlock_s868;
[L7426]              havoc EndBlock_s868;
[L7427]              havoc DropCap_s868;
[L7428]              havoc DropCount_s868;
[L7429]              havoc DropAmount_s868;
[L7430]              havoc StartBlock_s892;
[L7431]              havoc EndBlock_s892;
[L7432]              havoc SaleCap_s892;
[L7433]              havoc SaleCount_s892;
[L7434]              havoc ChunkSize_s892;
[L7435]              havoc SalePrice_s892;
[L7436]              havoc _aSBlock_s926;
[L7437]              havoc _aEBlock_s926;
[L7438]              havoc _aAmt_s926;
[L7439]              havoc _aCap_s926;
[L7440]              havoc _sSBlock_s966;
[L7441]              havoc _sEBlock_s966;
[L7442]              havoc _sChunk_s966;
[L7443]              havoc _sPrice_s966;
[L7444]              havoc _sCap_s966;
[L7445]              havoc tmpNow;
[L7446]              havoc gas;
[L7447]              assume gas > 4000000 && gas <= 8000000;
[L7448]              tmpNow := now;
[L7449]              havoc now;
[L7450]              assume now > tmpNow;
[L7451]              assume msgsender_MSG != null;
[L7452]              assume DType[msgsender_MSG] != SafeMath;
[L7453]              assume DType[msgsender_MSG] != ERC20Interface;
[L7454]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7455]              assume DType[msgsender_MSG] != Owned;
[L7456]              assume DType[msgsender_MSG] != TokenERC20;
[L7457]              assume DType[msgsender_MSG] != _0x;
[L7458]              Alloc[msgsender_MSG] := true;
[L7459]  COND FALSE  !(choice == 32)
[L7465]  COND FALSE  !(choice == 31)
[L7471]  COND FALSE  !(choice == 30)
[L7477]  COND TRUE   choice == 29
[L7478]              gas := gas - 21000;
[L7479]  COND TRUE   gas >= 0
[L7480]              assume tokens_s381 >= 0 && tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7481]              assume msgvalue_MSG == 0;
[L7482]  CALL        call success_s381 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s381 && tokens_s381 <= balances_TokenERC20[this][msgsender_MSG]) && tokens_s381 >= 0) && tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s381] >= 0) && balances_TokenERC20[this][to_s381] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][msgsender_MSG] >= 0) && balances_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_TokenERC200 := true;
[L2]                 call_transfer_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L978]               havoc __exception;
[L979]               revert := false;
[L980]   COND TRUE   __exception
[L981]               __tmp__Balance := Balance;
[L982]               __tmp__DType := DType;
[L983]               __tmp__Alloc := Alloc;
[L984]               __tmp__balance_ADDR := balance_ADDR;
[L985]               __tmp__M_Ref_int := M_Ref_int;
[L986]               __tmp__sum_balances0 := sum_balances0;
[L987]               __tmp__alloc_allowed_TokenERC20_lvl0 := alloc_allowed_TokenERC20_lvl0;
[L988]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L989]               __tmp__sum_allowed1 := sum_allowed1;
[L990]               __tmp__Length := Length;
[L991]               __tmp__now := now;
[L992]               __tmp__owner_Owned := owner_Owned;
[L993]               __tmp__newOwner_Owned := newOwner_Owned;
[L994]               __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L995]               __tmp__name_TokenERC20 := name_TokenERC20;
[L996]               __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L997]               __tmp___totalSupply_TokenERC20 := _totalSupply_TokenERC20;
[L998]               __tmp__balances_TokenERC20 := balances_TokenERC20;
[L999]               __tmp__allowed_TokenERC20 := allowed_TokenERC20;
[L1000]              __tmp__aSBlock__0x := aSBlock__0x;
[L1001]              __tmp__aEBlock__0x := aEBlock__0x;
[L1002]              __tmp__aCap__0x := aCap__0x;
[L1003]              __tmp__aTot__0x := aTot__0x;
[L1004]              __tmp__aAmt__0x := aAmt__0x;
[L1005]              __tmp__sSBlock__0x := sSBlock__0x;
[L1006]              __tmp__sEBlock__0x := sEBlock__0x;
[L1007]              __tmp__sCap__0x := sCap__0x;
[L1008]              __tmp__sTot__0x := sTot__0x;
[L1009]              __tmp__sChunk__0x := sChunk__0x;
[L1010]              __tmp__sPrice__0x := sPrice__0x;
[L1011]  CALL        call success_s381 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L4456]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4108]  COND TRUE   !(b_s45 <= a_s45)
[L4109]              revert := true;
[L4456]  RET         call __var_5 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4457]  COND TRUE   revert
[L1011]  RET         call success_s381 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L1012]              assume revert || gas < 0;
[L7482]  RET         call success_s381 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L7682]  RET         call CorralChoice__0x(this);

Loop:
[L7682]  CALL        call CorralChoice__0x(this);
[L7381]              havoc msgsender_MSG;
[L7382]              havoc msgvalue_MSG;
[L7383]              havoc choice;
[L7384]              havoc __ret_0_totalSupply;
[L7385]              havoc tokenOwner_s338;
[L7386]              havoc balance_s338;
[L7387]              havoc tokenOwner_s484;
[L7388]              havoc spender_s484;
[L7389]              havoc remaining_s484;
[L7390]              havoc to_s381;
[L7391]              havoc tokens_s381;
[L7392]              havoc success_s381;
[L7393]              havoc spender_s409;
[L7394]              havoc tokens_s409;
[L7395]              havoc success_s409;
[L7396]              havoc from_s468;
[L7397]              havoc to_s468;
[L7398]              havoc tokens_s468;
[L7399]              havoc success_s468;
[L7400]              havoc __ret_0_owner;
[L7401]              havoc __ret_0_newOwner;
[L7402]              havoc _newOwner_s217;
[L7403]              havoc __ret_0_symbol;
[L7404]              havoc __ret_0_name;
[L7405]              havoc __ret_0_decimals;
[L7406]              havoc spender_s527;
[L7407]              havoc tokens_s527;
[L7408]              havoc data_s527;
[L7409]              havoc success_s527;
[L7410]              havoc __ret_0_aSBlock;
[L7411]              havoc __ret_0_aEBlock;
[L7412]              havoc __ret_0_aCap;
[L7413]              havoc __ret_0_aTot;
[L7414]              havoc __ret_0_aAmt;
[L7415]              havoc __ret_0_sSBlock;
[L7416]              havoc __ret_0_sEBlock;
[L7417]              havoc __ret_0_sCap;
[L7418]              havoc __ret_0_sTot;
[L7419]              havoc __ret_0_sChunk;
[L7420]              havoc __ret_0_sPrice;
[L7421]              havoc _refer_s687;
[L7422]              havoc success_s687;
[L7423]              havoc _refer_s847;
[L7424]              havoc success_s847;
[L7425]              havoc StartBlock_s868;
[L7426]              havoc EndBlock_s868;
[L7427]              havoc DropCap_s868;
[L7428]              havoc DropCount_s868;
[L7429]              havoc DropAmount_s868;
[L7430]              havoc StartBlock_s892;
[L7431]              havoc EndBlock_s892;
[L7432]              havoc SaleCap_s892;
[L7433]              havoc SaleCount_s892;
[L7434]              havoc ChunkSize_s892;
[L7435]              havoc SalePrice_s892;
[L7436]              havoc _aSBlock_s926;
[L7437]              havoc _aEBlock_s926;
[L7438]              havoc _aAmt_s926;
[L7439]              havoc _aCap_s926;
[L7440]              havoc _sSBlock_s966;
[L7441]              havoc _sEBlock_s966;
[L7442]              havoc _sChunk_s966;
[L7443]              havoc _sPrice_s966;
[L7444]              havoc _sCap_s966;
[L7445]              havoc tmpNow;
[L7446]              havoc gas;
[L7447]              assume gas > 4000000 && gas <= 8000000;
[L7448]              tmpNow := now;
[L7449]              havoc now;
[L7450]              assume now > tmpNow;
[L7451]              assume msgsender_MSG != null;
[L7452]              assume DType[msgsender_MSG] != SafeMath;
[L7453]              assume DType[msgsender_MSG] != ERC20Interface;
[L7454]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7455]              assume DType[msgsender_MSG] != Owned;
[L7456]              assume DType[msgsender_MSG] != TokenERC20;
[L7457]              assume DType[msgsender_MSG] != _0x;
[L7458]              Alloc[msgsender_MSG] := true;
[L7459]  COND FALSE  !(choice == 32)
[L7465]  COND FALSE  !(choice == 31)
[L7471]  COND FALSE  !(choice == 30)
[L7477]  COND TRUE   choice == 29
[L7478]              gas := gas - 21000;
[L7479]  COND TRUE   gas >= 0
[L7480]              assume tokens_s381 >= 0 && tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7481]              assume msgvalue_MSG == 0;
[L7482]  CALL        call success_s381 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s381 && tokens_s381 <= balances_TokenERC20[this][msgsender_MSG]) && tokens_s381 >= 0) && tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s381] >= 0) && balances_TokenERC20[this][to_s381] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][msgsender_MSG] >= 0) && balances_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_TokenERC200 := true;
[L2]                 call_transfer_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L978]               havoc __exception;
[L979]               revert := false;
[L980]   COND TRUE   __exception
[L981]               __tmp__Balance := Balance;
[L982]               __tmp__DType := DType;
[L983]               __tmp__Alloc := Alloc;
[L984]               __tmp__balance_ADDR := balance_ADDR;
[L985]               __tmp__M_Ref_int := M_Ref_int;
[L986]               __tmp__sum_balances0 := sum_balances0;
[L987]               __tmp__alloc_allowed_TokenERC20_lvl0 := alloc_allowed_TokenERC20_lvl0;
[L988]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L989]               __tmp__sum_allowed1 := sum_allowed1;
[L990]               __tmp__Length := Length;
[L991]               __tmp__now := now;
[L992]               __tmp__owner_Owned := owner_Owned;
[L993]               __tmp__newOwner_Owned := newOwner_Owned;
[L994]               __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L995]               __tmp__name_TokenERC20 := name_TokenERC20;
[L996]               __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L997]               __tmp___totalSupply_TokenERC20 := _totalSupply_TokenERC20;
[L998]               __tmp__balances_TokenERC20 := balances_TokenERC20;
[L999]               __tmp__allowed_TokenERC20 := allowed_TokenERC20;
[L1000]              __tmp__aSBlock__0x := aSBlock__0x;
[L1001]              __tmp__aEBlock__0x := aEBlock__0x;
[L1002]              __tmp__aCap__0x := aCap__0x;
[L1003]              __tmp__aTot__0x := aTot__0x;
[L1004]              __tmp__aAmt__0x := aAmt__0x;
[L1005]              __tmp__sSBlock__0x := sSBlock__0x;
[L1006]              __tmp__sEBlock__0x := sEBlock__0x;
[L1007]              __tmp__sCap__0x := sCap__0x;
[L1008]              __tmp__sTot__0x := sTot__0x;
[L1009]              __tmp__sChunk__0x := sChunk__0x;
[L1010]              __tmp__sPrice__0x := sPrice__0x;
[L1011]  CALL        call success_s381 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L4456]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4108]  COND TRUE   !(b_s45 <= a_s45)
[L4109]              revert := true;
[L4456]  RET         call __var_5 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4457]  COND TRUE   revert
[L1011]  RET         call success_s381 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L1012]              assume revert || gas < 0;
[L7482]  RET         call success_s381 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L7682]  RET         call CorralChoice__0x(this);

[2020-11-24 22:32:02,338 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 22:32:02,338 INFO  L82        PathProgramCache]: Analyzing trace with hash -2117109788, now seen corresponding path program 1 times
[2020-11-24 22:32:02,338 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 22:32:02,474 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 22:32:02,525 INFO  L134       CoverageAnalysis]: Checked inductivity of 23 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 23 trivial. 0 not checked.
[2020-11-24 22:32:02,525 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 22:32:02,525 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-24 22:32:02,526 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 22:32:02,526 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-24 22:32:02,526 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-24 22:32:02,526 INFO  L87              Difference]: Start difference. First operand 7329 states and 8573 transitions. cyclomatic complexity: 1252 Second operand 7 states.
[2020-11-24 22:32:04,028 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 22:32:04,028 INFO  L93              Difference]: Finished difference Result 7770 states and 9081 transitions.
[2020-11-24 22:32:04,029 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-24 22:32:04,029 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7770 states and 9081 transitions.
[2020-11-24 22:32:04,045 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-24 22:32:04,063 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7770 states to 7770 states and 9081 transitions.
[2020-11-24 22:32:04,064 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 375
[2020-11-24 22:32:04,064 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 375
[2020-11-24 22:32:04,064 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7770 states and 9081 transitions.
[2020-11-24 22:32:04,069 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 22:32:04,069 INFO  L728         BuchiCegarLoop]: Abstraction has 7770 states and 9081 transitions.
[2020-11-24 22:32:04,075 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7770 states and 9081 transitions.
[2020-11-24 22:32:04,120 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7770 to 7470.
[2020-11-24 22:32:04,121 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7470 states.
[2020-11-24 22:32:04,128 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7470 states to 7470 states and 8722 transitions.
[2020-11-24 22:32:04,128 INFO  L751         BuchiCegarLoop]: Abstraction has 7470 states and 8722 transitions.
[2020-11-24 22:32:04,128 INFO  L631         BuchiCegarLoop]: Abstraction has 7470 states and 8722 transitions.
[2020-11-24 22:32:04,128 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-24 22:32:04,128 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7470 states and 8722 transitions.
[2020-11-24 22:32:04,135 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-24 22:32:04,135 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 22:32:04,135 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 22:32:04,137 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 22:32:04,138 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_TokenERC200 := false;
[L2]                 call_transfer_TokenERC200 := false;
[L2]     CALL        call main();
[L7672]              assume null == 0;
[L7673]  CALL        call this := FreshRefGenerator__success();
[L4050]              havoc newRef;
[L4051]              assume Alloc[newRef] == false;
[L4052]              Alloc[newRef] := true;
[L4053]              assume newRef != null;
[L7673]  RET         call this := FreshRefGenerator__success();
[L7674]              assume now >= 0;
[L7675]              assume DType[this] == _0x;
[L7676]              assume msgvalue_MSG == 0;
[L7677]              gas := gas - 53000;
[L7678]  CALL        call _0x__0x__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4186]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4171]              assume msgsender_MSG != null;
[L4172]              Balance[this] := 0;
[L4186]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  COND FALSE  !(revert)
[L4740]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]  COND FALSE  !(revert)
[L4744]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4256]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4238]              assume msgsender_MSG != null;
[L4239]              Balance[this] := 0;
[L4240]              owner_Owned[this] := null;
[L4241]              newOwner_Owned[this] := null;
[L4243]              owner_Owned[this] := msgsender_MSG;
[L4256]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  COND FALSE  !(revert)
[L4744]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4745]  COND FALSE  !(revert)
[L4748]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4400]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4186]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4171]              assume msgsender_MSG != null;
[L4172]              Balance[this] := 0;
[L4186]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  COND FALSE  !(revert)
[L4400]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4401]  COND FALSE  !(revert)
[L4404]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4256]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4238]              assume msgsender_MSG != null;
[L4239]              Balance[this] := 0;
[L4240]              owner_Owned[this] := null;
[L4241]              newOwner_Owned[this] := null;
[L4243]              owner_Owned[this] := msgsender_MSG;
[L4256]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  COND FALSE  !(revert)
[L4404]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4405]  COND FALSE  !(revert)
[L4408]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4358]              assume msgsender_MSG != null;
[L4359]              Balance[this] := 0;
[L4360]              symbol_TokenERC20[this] := 1454487515;
[L4361]              name_TokenERC20[this] := 1454487515;
[L4362]              decimals_TokenERC20[this] := 0;
[L4363]              _totalSupply_TokenERC20[this] := 0;
[L4364]              balances_TokenERC20[this] := zeroRefintArr();
[L4365]              sum_balances0[this] := 0;
[L4366]              allowed_TokenERC20[this] := zeroRefRefintArr();
[L4367]              sum_allowed1[this] := 0;
[L4369]              symbol_TokenERC20[this] := 471226056;
[L4370]              name_TokenERC20[this] := -893098295;
[L4371]              decimals_TokenERC20[this] := 8;
[L4372]              __var_2 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4373]              _totalSupply_TokenERC20[this] := nonlinearMul(999880006599780055836170557439878316590346642366426347732992, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4374]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][owner_Owned[this]];
[L4375]              balances_TokenERC20[this][owner_Owned[this]] := _totalSupply_TokenERC20[this];
[L4376]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][owner_Owned[this]];
[L4377]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4408]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4409]  COND FALSE  !(revert)
[L4748]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4749]  COND FALSE  !(revert)
[L4752]  CALL        call _0x__0x_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4702]              assume msgsender_MSG != null;
[L4703]              Balance[this] := 0;
[L4704]              aSBlock__0x[this] := 0;
[L4705]              aEBlock__0x[this] := 0;
[L4706]              aCap__0x[this] := 0;
[L4707]              aTot__0x[this] := 0;
[L4708]              aAmt__0x[this] := 0;
[L4709]              sSBlock__0x[this] := 0;
[L4710]              sEBlock__0x[this] := 0;
[L4711]              sCap__0x[this] := 0;
[L4712]              sTot__0x[this] := 0;
[L4713]              sChunk__0x[this] := 0;
[L4714]              sPrice__0x[this] := 0;
[L4752]  RET         call _0x__0x_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4753]  COND FALSE  !(revert)
[L7678]  RET         call _0x__0x__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]              assume !revert && gas >= 0;
[L7682]  CALL        call CorralChoice__0x(this);
[L7381]              havoc msgsender_MSG;
[L7382]              havoc msgvalue_MSG;
[L7383]              havoc choice;
[L7384]              havoc __ret_0_totalSupply;
[L7385]              havoc tokenOwner_s338;
[L7386]              havoc balance_s338;
[L7387]              havoc tokenOwner_s484;
[L7388]              havoc spender_s484;
[L7389]              havoc remaining_s484;
[L7390]              havoc to_s381;
[L7391]              havoc tokens_s381;
[L7392]              havoc success_s381;
[L7393]              havoc spender_s409;
[L7394]              havoc tokens_s409;
[L7395]              havoc success_s409;
[L7396]              havoc from_s468;
[L7397]              havoc to_s468;
[L7398]              havoc tokens_s468;
[L7399]              havoc success_s468;
[L7400]              havoc __ret_0_owner;
[L7401]              havoc __ret_0_newOwner;
[L7402]              havoc _newOwner_s217;
[L7403]              havoc __ret_0_symbol;
[L7404]              havoc __ret_0_name;
[L7405]              havoc __ret_0_decimals;
[L7406]              havoc spender_s527;
[L7407]              havoc tokens_s527;
[L7408]              havoc data_s527;
[L7409]              havoc success_s527;
[L7410]              havoc __ret_0_aSBlock;
[L7411]              havoc __ret_0_aEBlock;
[L7412]              havoc __ret_0_aCap;
[L7413]              havoc __ret_0_aTot;
[L7414]              havoc __ret_0_aAmt;
[L7415]              havoc __ret_0_sSBlock;
[L7416]              havoc __ret_0_sEBlock;
[L7417]              havoc __ret_0_sCap;
[L7418]              havoc __ret_0_sTot;
[L7419]              havoc __ret_0_sChunk;
[L7420]              havoc __ret_0_sPrice;
[L7421]              havoc _refer_s687;
[L7422]              havoc success_s687;
[L7423]              havoc _refer_s847;
[L7424]              havoc success_s847;
[L7425]              havoc StartBlock_s868;
[L7426]              havoc EndBlock_s868;
[L7427]              havoc DropCap_s868;
[L7428]              havoc DropCount_s868;
[L7429]              havoc DropAmount_s868;
[L7430]              havoc StartBlock_s892;
[L7431]              havoc EndBlock_s892;
[L7432]              havoc SaleCap_s892;
[L7433]              havoc SaleCount_s892;
[L7434]              havoc ChunkSize_s892;
[L7435]              havoc SalePrice_s892;
[L7436]              havoc _aSBlock_s926;
[L7437]              havoc _aEBlock_s926;
[L7438]              havoc _aAmt_s926;
[L7439]              havoc _aCap_s926;
[L7440]              havoc _sSBlock_s966;
[L7441]              havoc _sEBlock_s966;
[L7442]              havoc _sChunk_s966;
[L7443]              havoc _sPrice_s966;
[L7444]              havoc _sCap_s966;
[L7445]              havoc tmpNow;
[L7446]              havoc gas;
[L7447]              assume gas > 4000000 && gas <= 8000000;
[L7448]              tmpNow := now;
[L7449]              havoc now;
[L7450]              assume now > tmpNow;
[L7451]              assume msgsender_MSG != null;
[L7452]              assume DType[msgsender_MSG] != SafeMath;
[L7453]              assume DType[msgsender_MSG] != ERC20Interface;
[L7454]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7455]              assume DType[msgsender_MSG] != Owned;
[L7456]              assume DType[msgsender_MSG] != TokenERC20;
[L7457]              assume DType[msgsender_MSG] != _0x;
[L7458]              Alloc[msgsender_MSG] := true;
[L7459]  COND FALSE  !(choice == 32)
[L7465]  COND FALSE  !(choice == 31)
[L7471]  COND FALSE  !(choice == 30)
[L7477]  COND TRUE   choice == 29
[L7478]              gas := gas - 21000;
[L7479]  COND TRUE   gas >= 0
[L7480]              assume tokens_s381 >= 0 && tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7481]              assume msgvalue_MSG == 0;
[L7482]  CALL        call success_s381 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s381 && tokens_s381 <= balances_TokenERC20[this][msgsender_MSG]) && tokens_s381 >= 0) && tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s381] >= 0) && balances_TokenERC20[this][to_s381] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][msgsender_MSG] >= 0) && balances_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_TokenERC200 := true;
[L2]                 call_transfer_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L978]               havoc __exception;
[L979]               revert := false;
[L980]   COND TRUE   __exception
[L981]               __tmp__Balance := Balance;
[L982]               __tmp__DType := DType;
[L983]               __tmp__Alloc := Alloc;
[L984]               __tmp__balance_ADDR := balance_ADDR;
[L985]               __tmp__M_Ref_int := M_Ref_int;
[L986]               __tmp__sum_balances0 := sum_balances0;
[L987]               __tmp__alloc_allowed_TokenERC20_lvl0 := alloc_allowed_TokenERC20_lvl0;
[L988]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L989]               __tmp__sum_allowed1 := sum_allowed1;
[L990]               __tmp__Length := Length;
[L991]               __tmp__now := now;
[L992]               __tmp__owner_Owned := owner_Owned;
[L993]               __tmp__newOwner_Owned := newOwner_Owned;
[L994]               __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L995]               __tmp__name_TokenERC20 := name_TokenERC20;
[L996]               __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L997]               __tmp___totalSupply_TokenERC20 := _totalSupply_TokenERC20;
[L998]               __tmp__balances_TokenERC20 := balances_TokenERC20;
[L999]               __tmp__allowed_TokenERC20 := allowed_TokenERC20;
[L1000]              __tmp__aSBlock__0x := aSBlock__0x;
[L1001]              __tmp__aEBlock__0x := aEBlock__0x;
[L1002]              __tmp__aCap__0x := aCap__0x;
[L1003]              __tmp__aTot__0x := aTot__0x;
[L1004]              __tmp__aAmt__0x := aAmt__0x;
[L1005]              __tmp__sSBlock__0x := sSBlock__0x;
[L1006]              __tmp__sEBlock__0x := sEBlock__0x;
[L1007]              __tmp__sCap__0x := sCap__0x;
[L1008]              __tmp__sTot__0x := sTot__0x;
[L1009]              __tmp__sChunk__0x := sChunk__0x;
[L1010]              __tmp__sPrice__0x := sPrice__0x;
[L1011]  CALL        call success_s381 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L4456]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4108]  COND FALSE  !(!(b_s45 <= a_s45))
[L4112]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4456]  RET         call __var_5 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4457]  COND TRUE   revert
[L1011]  RET         call success_s381 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L1012]              assume revert || gas < 0;
[L7482]  RET         call success_s381 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L7682]  RET         call CorralChoice__0x(this);

Loop:
[L7682]  CALL        call CorralChoice__0x(this);
[L7381]              havoc msgsender_MSG;
[L7382]              havoc msgvalue_MSG;
[L7383]              havoc choice;
[L7384]              havoc __ret_0_totalSupply;
[L7385]              havoc tokenOwner_s338;
[L7386]              havoc balance_s338;
[L7387]              havoc tokenOwner_s484;
[L7388]              havoc spender_s484;
[L7389]              havoc remaining_s484;
[L7390]              havoc to_s381;
[L7391]              havoc tokens_s381;
[L7392]              havoc success_s381;
[L7393]              havoc spender_s409;
[L7394]              havoc tokens_s409;
[L7395]              havoc success_s409;
[L7396]              havoc from_s468;
[L7397]              havoc to_s468;
[L7398]              havoc tokens_s468;
[L7399]              havoc success_s468;
[L7400]              havoc __ret_0_owner;
[L7401]              havoc __ret_0_newOwner;
[L7402]              havoc _newOwner_s217;
[L7403]              havoc __ret_0_symbol;
[L7404]              havoc __ret_0_name;
[L7405]              havoc __ret_0_decimals;
[L7406]              havoc spender_s527;
[L7407]              havoc tokens_s527;
[L7408]              havoc data_s527;
[L7409]              havoc success_s527;
[L7410]              havoc __ret_0_aSBlock;
[L7411]              havoc __ret_0_aEBlock;
[L7412]              havoc __ret_0_aCap;
[L7413]              havoc __ret_0_aTot;
[L7414]              havoc __ret_0_aAmt;
[L7415]              havoc __ret_0_sSBlock;
[L7416]              havoc __ret_0_sEBlock;
[L7417]              havoc __ret_0_sCap;
[L7418]              havoc __ret_0_sTot;
[L7419]              havoc __ret_0_sChunk;
[L7420]              havoc __ret_0_sPrice;
[L7421]              havoc _refer_s687;
[L7422]              havoc success_s687;
[L7423]              havoc _refer_s847;
[L7424]              havoc success_s847;
[L7425]              havoc StartBlock_s868;
[L7426]              havoc EndBlock_s868;
[L7427]              havoc DropCap_s868;
[L7428]              havoc DropCount_s868;
[L7429]              havoc DropAmount_s868;
[L7430]              havoc StartBlock_s892;
[L7431]              havoc EndBlock_s892;
[L7432]              havoc SaleCap_s892;
[L7433]              havoc SaleCount_s892;
[L7434]              havoc ChunkSize_s892;
[L7435]              havoc SalePrice_s892;
[L7436]              havoc _aSBlock_s926;
[L7437]              havoc _aEBlock_s926;
[L7438]              havoc _aAmt_s926;
[L7439]              havoc _aCap_s926;
[L7440]              havoc _sSBlock_s966;
[L7441]              havoc _sEBlock_s966;
[L7442]              havoc _sChunk_s966;
[L7443]              havoc _sPrice_s966;
[L7444]              havoc _sCap_s966;
[L7445]              havoc tmpNow;
[L7446]              havoc gas;
[L7447]              assume gas > 4000000 && gas <= 8000000;
[L7448]              tmpNow := now;
[L7449]              havoc now;
[L7450]              assume now > tmpNow;
[L7451]              assume msgsender_MSG != null;
[L7452]              assume DType[msgsender_MSG] != SafeMath;
[L7453]              assume DType[msgsender_MSG] != ERC20Interface;
[L7454]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7455]              assume DType[msgsender_MSG] != Owned;
[L7456]              assume DType[msgsender_MSG] != TokenERC20;
[L7457]              assume DType[msgsender_MSG] != _0x;
[L7458]              Alloc[msgsender_MSG] := true;
[L7459]  COND FALSE  !(choice == 32)
[L7465]  COND FALSE  !(choice == 31)
[L7471]  COND FALSE  !(choice == 30)
[L7477]  COND TRUE   choice == 29
[L7478]              gas := gas - 21000;
[L7479]  COND TRUE   gas >= 0
[L7480]              assume tokens_s381 >= 0 && tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7481]              assume msgvalue_MSG == 0;
[L7482]  CALL        call success_s381 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s381 && tokens_s381 <= balances_TokenERC20[this][msgsender_MSG]) && tokens_s381 >= 0) && tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s381] >= 0) && balances_TokenERC20[this][to_s381] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][msgsender_MSG] >= 0) && balances_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_TokenERC200 := true;
[L2]                 call_transfer_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L978]               havoc __exception;
[L979]               revert := false;
[L980]   COND TRUE   __exception
[L981]               __tmp__Balance := Balance;
[L982]               __tmp__DType := DType;
[L983]               __tmp__Alloc := Alloc;
[L984]               __tmp__balance_ADDR := balance_ADDR;
[L985]               __tmp__M_Ref_int := M_Ref_int;
[L986]               __tmp__sum_balances0 := sum_balances0;
[L987]               __tmp__alloc_allowed_TokenERC20_lvl0 := alloc_allowed_TokenERC20_lvl0;
[L988]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L989]               __tmp__sum_allowed1 := sum_allowed1;
[L990]               __tmp__Length := Length;
[L991]               __tmp__now := now;
[L992]               __tmp__owner_Owned := owner_Owned;
[L993]               __tmp__newOwner_Owned := newOwner_Owned;
[L994]               __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L995]               __tmp__name_TokenERC20 := name_TokenERC20;
[L996]               __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L997]               __tmp___totalSupply_TokenERC20 := _totalSupply_TokenERC20;
[L998]               __tmp__balances_TokenERC20 := balances_TokenERC20;
[L999]               __tmp__allowed_TokenERC20 := allowed_TokenERC20;
[L1000]              __tmp__aSBlock__0x := aSBlock__0x;
[L1001]              __tmp__aEBlock__0x := aEBlock__0x;
[L1002]              __tmp__aCap__0x := aCap__0x;
[L1003]              __tmp__aTot__0x := aTot__0x;
[L1004]              __tmp__aAmt__0x := aAmt__0x;
[L1005]              __tmp__sSBlock__0x := sSBlock__0x;
[L1006]              __tmp__sEBlock__0x := sEBlock__0x;
[L1007]              __tmp__sCap__0x := sCap__0x;
[L1008]              __tmp__sTot__0x := sTot__0x;
[L1009]              __tmp__sChunk__0x := sChunk__0x;
[L1010]              __tmp__sPrice__0x := sPrice__0x;
[L1011]  CALL        call success_s381 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L4456]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4108]  COND FALSE  !(!(b_s45 <= a_s45))
[L4112]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4456]  RET         call __var_5 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4457]  COND TRUE   revert
[L1011]  RET         call success_s381 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L1012]              assume revert || gas < 0;
[L7482]  RET         call success_s381 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L7682]  RET         call CorralChoice__0x(this);

[2020-11-24 22:32:04,141 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 22:32:04,141 INFO  L82        PathProgramCache]: Analyzing trace with hash -44266082, now seen corresponding path program 1 times
[2020-11-24 22:32:04,142 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 22:32:04,151 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 22:32:04,180 INFO  L134       CoverageAnalysis]: Checked inductivity of 23 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 23 trivial. 0 not checked.
[2020-11-24 22:32:04,180 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 22:32:04,180 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-24 22:32:04,180 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 22:32:04,180 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-24 22:32:04,180 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=11, Unknown=0, NotChecked=0, Total=20
[2020-11-24 22:32:04,181 INFO  L87              Difference]: Start difference. First operand 7470 states and 8722 transitions. cyclomatic complexity: 1260 Second operand 5 states.
[2020-11-24 22:32:05,671 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 22:32:05,671 INFO  L93              Difference]: Finished difference Result 8374 states and 9773 transitions.
[2020-11-24 22:32:05,671 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-24 22:32:05,671 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8374 states and 9773 transitions.
[2020-11-24 22:32:05,688 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-24 22:32:05,706 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8374 states to 8374 states and 9773 transitions.
[2020-11-24 22:32:05,706 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 441
[2020-11-24 22:32:05,707 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 441
[2020-11-24 22:32:05,707 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8374 states and 9773 transitions.
[2020-11-24 22:32:05,712 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 22:32:05,712 INFO  L728         BuchiCegarLoop]: Abstraction has 8374 states and 9773 transitions.
[2020-11-24 22:32:05,718 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8374 states and 9773 transitions.
[2020-11-24 22:32:05,762 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8374 to 7470.
[2020-11-24 22:32:05,762 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7470 states.
[2020-11-24 22:32:05,769 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7470 states to 7470 states and 8578 transitions.
[2020-11-24 22:32:05,769 INFO  L751         BuchiCegarLoop]: Abstraction has 7470 states and 8578 transitions.
[2020-11-24 22:32:05,769 INFO  L631         BuchiCegarLoop]: Abstraction has 7470 states and 8578 transitions.
[2020-11-24 22:32:05,769 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-24 22:32:05,769 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7470 states and 8578 transitions.
[2020-11-24 22:32:05,776 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-24 22:32:05,776 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 22:32:05,776 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 22:32:05,777 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 22:32:05,777 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_TokenERC200 := false;
[L2]                 call_transfer_TokenERC200 := false;
[L2]     CALL        call main();
[L7672]              assume null == 0;
[L7673]  CALL        call this := FreshRefGenerator__success();
[L4050]              havoc newRef;
[L4051]              assume Alloc[newRef] == false;
[L4052]              Alloc[newRef] := true;
[L4053]              assume newRef != null;
[L7673]  RET         call this := FreshRefGenerator__success();
[L7674]              assume now >= 0;
[L7675]              assume DType[this] == _0x;
[L7676]              assume msgvalue_MSG == 0;
[L7677]              gas := gas - 53000;
[L7678]  CALL        call _0x__0x__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4186]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4171]              assume msgsender_MSG != null;
[L4172]              Balance[this] := 0;
[L4186]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  COND FALSE  !(revert)
[L4740]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]  COND FALSE  !(revert)
[L4744]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4256]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4238]              assume msgsender_MSG != null;
[L4239]              Balance[this] := 0;
[L4240]              owner_Owned[this] := null;
[L4241]              newOwner_Owned[this] := null;
[L4243]              owner_Owned[this] := msgsender_MSG;
[L4256]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  COND FALSE  !(revert)
[L4744]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4745]  COND FALSE  !(revert)
[L4748]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4400]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4186]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4171]              assume msgsender_MSG != null;
[L4172]              Balance[this] := 0;
[L4186]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  COND FALSE  !(revert)
[L4400]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4401]  COND FALSE  !(revert)
[L4404]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4256]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4238]              assume msgsender_MSG != null;
[L4239]              Balance[this] := 0;
[L4240]              owner_Owned[this] := null;
[L4241]              newOwner_Owned[this] := null;
[L4243]              owner_Owned[this] := msgsender_MSG;
[L4256]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  COND FALSE  !(revert)
[L4404]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4405]  COND FALSE  !(revert)
[L4408]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4358]              assume msgsender_MSG != null;
[L4359]              Balance[this] := 0;
[L4360]              symbol_TokenERC20[this] := 1454487515;
[L4361]              name_TokenERC20[this] := 1454487515;
[L4362]              decimals_TokenERC20[this] := 0;
[L4363]              _totalSupply_TokenERC20[this] := 0;
[L4364]              balances_TokenERC20[this] := zeroRefintArr();
[L4365]              sum_balances0[this] := 0;
[L4366]              allowed_TokenERC20[this] := zeroRefRefintArr();
[L4367]              sum_allowed1[this] := 0;
[L4369]              symbol_TokenERC20[this] := 471226056;
[L4370]              name_TokenERC20[this] := -893098295;
[L4371]              decimals_TokenERC20[this] := 8;
[L4372]              __var_2 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4373]              _totalSupply_TokenERC20[this] := nonlinearMul(999880006599780055836170557439878316590346642366426347732992, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4374]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][owner_Owned[this]];
[L4375]              balances_TokenERC20[this][owner_Owned[this]] := _totalSupply_TokenERC20[this];
[L4376]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][owner_Owned[this]];
[L4377]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4408]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4409]  COND FALSE  !(revert)
[L4748]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4749]  COND FALSE  !(revert)
[L4752]  CALL        call _0x__0x_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4702]              assume msgsender_MSG != null;
[L4703]              Balance[this] := 0;
[L4704]              aSBlock__0x[this] := 0;
[L4705]              aEBlock__0x[this] := 0;
[L4706]              aCap__0x[this] := 0;
[L4707]              aTot__0x[this] := 0;
[L4708]              aAmt__0x[this] := 0;
[L4709]              sSBlock__0x[this] := 0;
[L4710]              sEBlock__0x[this] := 0;
[L4711]              sCap__0x[this] := 0;
[L4712]              sTot__0x[this] := 0;
[L4713]              sChunk__0x[this] := 0;
[L4714]              sPrice__0x[this] := 0;
[L4752]  RET         call _0x__0x_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4753]  COND FALSE  !(revert)
[L7678]  RET         call _0x__0x__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]              assume !revert && gas >= 0;
[L7682]  CALL        call CorralChoice__0x(this);
[L7381]              havoc msgsender_MSG;
[L7382]              havoc msgvalue_MSG;
[L7383]              havoc choice;
[L7384]              havoc __ret_0_totalSupply;
[L7385]              havoc tokenOwner_s338;
[L7386]              havoc balance_s338;
[L7387]              havoc tokenOwner_s484;
[L7388]              havoc spender_s484;
[L7389]              havoc remaining_s484;
[L7390]              havoc to_s381;
[L7391]              havoc tokens_s381;
[L7392]              havoc success_s381;
[L7393]              havoc spender_s409;
[L7394]              havoc tokens_s409;
[L7395]              havoc success_s409;
[L7396]              havoc from_s468;
[L7397]              havoc to_s468;
[L7398]              havoc tokens_s468;
[L7399]              havoc success_s468;
[L7400]              havoc __ret_0_owner;
[L7401]              havoc __ret_0_newOwner;
[L7402]              havoc _newOwner_s217;
[L7403]              havoc __ret_0_symbol;
[L7404]              havoc __ret_0_name;
[L7405]              havoc __ret_0_decimals;
[L7406]              havoc spender_s527;
[L7407]              havoc tokens_s527;
[L7408]              havoc data_s527;
[L7409]              havoc success_s527;
[L7410]              havoc __ret_0_aSBlock;
[L7411]              havoc __ret_0_aEBlock;
[L7412]              havoc __ret_0_aCap;
[L7413]              havoc __ret_0_aTot;
[L7414]              havoc __ret_0_aAmt;
[L7415]              havoc __ret_0_sSBlock;
[L7416]              havoc __ret_0_sEBlock;
[L7417]              havoc __ret_0_sCap;
[L7418]              havoc __ret_0_sTot;
[L7419]              havoc __ret_0_sChunk;
[L7420]              havoc __ret_0_sPrice;
[L7421]              havoc _refer_s687;
[L7422]              havoc success_s687;
[L7423]              havoc _refer_s847;
[L7424]              havoc success_s847;
[L7425]              havoc StartBlock_s868;
[L7426]              havoc EndBlock_s868;
[L7427]              havoc DropCap_s868;
[L7428]              havoc DropCount_s868;
[L7429]              havoc DropAmount_s868;
[L7430]              havoc StartBlock_s892;
[L7431]              havoc EndBlock_s892;
[L7432]              havoc SaleCap_s892;
[L7433]              havoc SaleCount_s892;
[L7434]              havoc ChunkSize_s892;
[L7435]              havoc SalePrice_s892;
[L7436]              havoc _aSBlock_s926;
[L7437]              havoc _aEBlock_s926;
[L7438]              havoc _aAmt_s926;
[L7439]              havoc _aCap_s926;
[L7440]              havoc _sSBlock_s966;
[L7441]              havoc _sEBlock_s966;
[L7442]              havoc _sChunk_s966;
[L7443]              havoc _sPrice_s966;
[L7444]              havoc _sCap_s966;
[L7445]              havoc tmpNow;
[L7446]              havoc gas;
[L7447]              assume gas > 4000000 && gas <= 8000000;
[L7448]              tmpNow := now;
[L7449]              havoc now;
[L7450]              assume now > tmpNow;
[L7451]              assume msgsender_MSG != null;
[L7452]              assume DType[msgsender_MSG] != SafeMath;
[L7453]              assume DType[msgsender_MSG] != ERC20Interface;
[L7454]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7455]              assume DType[msgsender_MSG] != Owned;
[L7456]              assume DType[msgsender_MSG] != TokenERC20;
[L7457]              assume DType[msgsender_MSG] != _0x;
[L7458]              Alloc[msgsender_MSG] := true;
[L7459]  COND FALSE  !(choice == 32)
[L7465]  COND FALSE  !(choice == 31)
[L7471]  COND FALSE  !(choice == 30)
[L7477]  COND TRUE   choice == 29
[L7478]              gas := gas - 21000;
[L7479]  COND TRUE   gas >= 0
[L7480]              assume tokens_s381 >= 0 && tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7481]              assume msgvalue_MSG == 0;
[L7482]  CALL        call success_s381 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s381 && tokens_s381 <= balances_TokenERC20[this][msgsender_MSG]) && tokens_s381 >= 0) && tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s381] >= 0) && balances_TokenERC20[this][to_s381] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][msgsender_MSG] >= 0) && balances_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_TokenERC200 := true;
[L2]                 call_transfer_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L978]               havoc __exception;
[L979]               revert := false;
[L980]   COND TRUE   __exception
[L981]               __tmp__Balance := Balance;
[L982]               __tmp__DType := DType;
[L983]               __tmp__Alloc := Alloc;
[L984]               __tmp__balance_ADDR := balance_ADDR;
[L985]               __tmp__M_Ref_int := M_Ref_int;
[L986]               __tmp__sum_balances0 := sum_balances0;
[L987]               __tmp__alloc_allowed_TokenERC20_lvl0 := alloc_allowed_TokenERC20_lvl0;
[L988]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L989]               __tmp__sum_allowed1 := sum_allowed1;
[L990]               __tmp__Length := Length;
[L991]               __tmp__now := now;
[L992]               __tmp__owner_Owned := owner_Owned;
[L993]               __tmp__newOwner_Owned := newOwner_Owned;
[L994]               __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L995]               __tmp__name_TokenERC20 := name_TokenERC20;
[L996]               __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L997]               __tmp___totalSupply_TokenERC20 := _totalSupply_TokenERC20;
[L998]               __tmp__balances_TokenERC20 := balances_TokenERC20;
[L999]               __tmp__allowed_TokenERC20 := allowed_TokenERC20;
[L1000]              __tmp__aSBlock__0x := aSBlock__0x;
[L1001]              __tmp__aEBlock__0x := aEBlock__0x;
[L1002]              __tmp__aCap__0x := aCap__0x;
[L1003]              __tmp__aTot__0x := aTot__0x;
[L1004]              __tmp__aAmt__0x := aAmt__0x;
[L1005]              __tmp__sSBlock__0x := sSBlock__0x;
[L1006]              __tmp__sEBlock__0x := sEBlock__0x;
[L1007]              __tmp__sCap__0x := sCap__0x;
[L1008]              __tmp__sTot__0x := sTot__0x;
[L1009]              __tmp__sChunk__0x := sChunk__0x;
[L1010]              __tmp__sPrice__0x := sPrice__0x;
[L1011]  CALL        call success_s381 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L4456]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4108]  COND FALSE  !(!(b_s45 <= a_s45))
[L4112]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4456]  RET         call __var_5 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4457]  COND FALSE  !(revert)
[L4460]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_TokenERC20[this][msgsender_MSG];
[L4461]              __tmp__balances_TokenERC20[this][msgsender_MSG] := __var_5;
[L4462]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_TokenERC20[this][msgsender_MSG];
[L4463]  CALL        call __var_6 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][to_s381], tokens_s381);
[L4090]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4091]  COND TRUE   !(c_s23 >= a_s23)
[L4092]              revert := true;
[L4463]  RET         call __var_6 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][to_s381], tokens_s381);
[L4464]  COND TRUE   revert
[L1011]  RET         call success_s381 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L1012]              assume revert || gas < 0;
[L7482]  RET         call success_s381 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L7682]  RET         call CorralChoice__0x(this);

Loop:
[L7682]  CALL        call CorralChoice__0x(this);
[L7381]              havoc msgsender_MSG;
[L7382]              havoc msgvalue_MSG;
[L7383]              havoc choice;
[L7384]              havoc __ret_0_totalSupply;
[L7385]              havoc tokenOwner_s338;
[L7386]              havoc balance_s338;
[L7387]              havoc tokenOwner_s484;
[L7388]              havoc spender_s484;
[L7389]              havoc remaining_s484;
[L7390]              havoc to_s381;
[L7391]              havoc tokens_s381;
[L7392]              havoc success_s381;
[L7393]              havoc spender_s409;
[L7394]              havoc tokens_s409;
[L7395]              havoc success_s409;
[L7396]              havoc from_s468;
[L7397]              havoc to_s468;
[L7398]              havoc tokens_s468;
[L7399]              havoc success_s468;
[L7400]              havoc __ret_0_owner;
[L7401]              havoc __ret_0_newOwner;
[L7402]              havoc _newOwner_s217;
[L7403]              havoc __ret_0_symbol;
[L7404]              havoc __ret_0_name;
[L7405]              havoc __ret_0_decimals;
[L7406]              havoc spender_s527;
[L7407]              havoc tokens_s527;
[L7408]              havoc data_s527;
[L7409]              havoc success_s527;
[L7410]              havoc __ret_0_aSBlock;
[L7411]              havoc __ret_0_aEBlock;
[L7412]              havoc __ret_0_aCap;
[L7413]              havoc __ret_0_aTot;
[L7414]              havoc __ret_0_aAmt;
[L7415]              havoc __ret_0_sSBlock;
[L7416]              havoc __ret_0_sEBlock;
[L7417]              havoc __ret_0_sCap;
[L7418]              havoc __ret_0_sTot;
[L7419]              havoc __ret_0_sChunk;
[L7420]              havoc __ret_0_sPrice;
[L7421]              havoc _refer_s687;
[L7422]              havoc success_s687;
[L7423]              havoc _refer_s847;
[L7424]              havoc success_s847;
[L7425]              havoc StartBlock_s868;
[L7426]              havoc EndBlock_s868;
[L7427]              havoc DropCap_s868;
[L7428]              havoc DropCount_s868;
[L7429]              havoc DropAmount_s868;
[L7430]              havoc StartBlock_s892;
[L7431]              havoc EndBlock_s892;
[L7432]              havoc SaleCap_s892;
[L7433]              havoc SaleCount_s892;
[L7434]              havoc ChunkSize_s892;
[L7435]              havoc SalePrice_s892;
[L7436]              havoc _aSBlock_s926;
[L7437]              havoc _aEBlock_s926;
[L7438]              havoc _aAmt_s926;
[L7439]              havoc _aCap_s926;
[L7440]              havoc _sSBlock_s966;
[L7441]              havoc _sEBlock_s966;
[L7442]              havoc _sChunk_s966;
[L7443]              havoc _sPrice_s966;
[L7444]              havoc _sCap_s966;
[L7445]              havoc tmpNow;
[L7446]              havoc gas;
[L7447]              assume gas > 4000000 && gas <= 8000000;
[L7448]              tmpNow := now;
[L7449]              havoc now;
[L7450]              assume now > tmpNow;
[L7451]              assume msgsender_MSG != null;
[L7452]              assume DType[msgsender_MSG] != SafeMath;
[L7453]              assume DType[msgsender_MSG] != ERC20Interface;
[L7454]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7455]              assume DType[msgsender_MSG] != Owned;
[L7456]              assume DType[msgsender_MSG] != TokenERC20;
[L7457]              assume DType[msgsender_MSG] != _0x;
[L7458]              Alloc[msgsender_MSG] := true;
[L7459]  COND TRUE   choice == 32
[L7460]              gas := gas - 21000;
[L7461]  COND FALSE  !(gas >= 0)
[L7682]  RET         call CorralChoice__0x(this);

[2020-11-24 22:32:05,781 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 22:32:05,781 INFO  L82        PathProgramCache]: Analyzing trace with hash 777222794, now seen corresponding path program 1 times
[2020-11-24 22:32:05,781 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 22:32:05,792 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 22:32:05,902 INFO  L134       CoverageAnalysis]: Checked inductivity of 23 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 23 trivial. 0 not checked.
[2020-11-24 22:32:05,902 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 22:32:05,902 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [12] imperfect sequences [] total 12
[2020-11-24 22:32:05,902 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 22:32:05,903 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-11-24 22:32:05,903 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=24, Invalid=108, Unknown=0, NotChecked=0, Total=132
[2020-11-24 22:32:05,903 INFO  L87              Difference]: Start difference. First operand 7470 states and 8578 transitions. cyclomatic complexity: 1116 Second operand 12 states.
[2020-11-24 22:32:09,703 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 22:32:09,704 INFO  L93              Difference]: Finished difference Result 7758 states and 8908 transitions.
[2020-11-24 22:32:09,704 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 13 states. 
[2020-11-24 22:32:09,704 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7758 states and 8908 transitions.
[2020-11-24 22:32:09,717 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-24 22:32:09,732 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7758 states to 7758 states and 8908 transitions.
[2020-11-24 22:32:09,732 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 371
[2020-11-24 22:32:09,732 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 371
[2020-11-24 22:32:09,732 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7758 states and 8908 transitions.
[2020-11-24 22:32:09,737 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 22:32:09,737 INFO  L728         BuchiCegarLoop]: Abstraction has 7758 states and 8908 transitions.
[2020-11-24 22:32:09,742 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7758 states and 8908 transitions.
[2020-11-24 22:32:09,778 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7758 to 7466.
[2020-11-24 22:32:09,778 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7466 states.
[2020-11-24 22:32:09,785 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7466 states to 7466 states and 8568 transitions.
[2020-11-24 22:32:09,785 INFO  L751         BuchiCegarLoop]: Abstraction has 7466 states and 8568 transitions.
[2020-11-24 22:32:09,785 INFO  L631         BuchiCegarLoop]: Abstraction has 7466 states and 8568 transitions.
[2020-11-24 22:32:09,785 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-24 22:32:09,785 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7466 states and 8568 transitions.
[2020-11-24 22:32:09,792 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-24 22:32:09,792 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 22:32:09,792 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 22:32:09,793 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 22:32:09,793 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_TokenERC200 := false;
[L2]                 call_transfer_TokenERC200 := false;
[L2]     CALL        call main();
[L7672]              assume null == 0;
[L7673]  CALL        call this := FreshRefGenerator__success();
[L4050]              havoc newRef;
[L4051]              assume Alloc[newRef] == false;
[L4052]              Alloc[newRef] := true;
[L4053]              assume newRef != null;
[L7673]  RET         call this := FreshRefGenerator__success();
[L7674]              assume now >= 0;
[L7675]              assume DType[this] == _0x;
[L7676]              assume msgvalue_MSG == 0;
[L7677]              gas := gas - 53000;
[L7678]  CALL        call _0x__0x__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4186]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4171]              assume msgsender_MSG != null;
[L4172]              Balance[this] := 0;
[L4186]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  COND FALSE  !(revert)
[L4740]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]  COND FALSE  !(revert)
[L4744]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4256]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4238]              assume msgsender_MSG != null;
[L4239]              Balance[this] := 0;
[L4240]              owner_Owned[this] := null;
[L4241]              newOwner_Owned[this] := null;
[L4243]              owner_Owned[this] := msgsender_MSG;
[L4256]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  COND FALSE  !(revert)
[L4744]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4745]  COND FALSE  !(revert)
[L4748]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4400]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4186]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4171]              assume msgsender_MSG != null;
[L4172]              Balance[this] := 0;
[L4186]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  COND FALSE  !(revert)
[L4400]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4401]  COND FALSE  !(revert)
[L4404]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4256]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4238]              assume msgsender_MSG != null;
[L4239]              Balance[this] := 0;
[L4240]              owner_Owned[this] := null;
[L4241]              newOwner_Owned[this] := null;
[L4243]              owner_Owned[this] := msgsender_MSG;
[L4256]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  COND FALSE  !(revert)
[L4404]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4405]  COND FALSE  !(revert)
[L4408]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4358]              assume msgsender_MSG != null;
[L4359]              Balance[this] := 0;
[L4360]              symbol_TokenERC20[this] := 1454487515;
[L4361]              name_TokenERC20[this] := 1454487515;
[L4362]              decimals_TokenERC20[this] := 0;
[L4363]              _totalSupply_TokenERC20[this] := 0;
[L4364]              balances_TokenERC20[this] := zeroRefintArr();
[L4365]              sum_balances0[this] := 0;
[L4366]              allowed_TokenERC20[this] := zeroRefRefintArr();
[L4367]              sum_allowed1[this] := 0;
[L4369]              symbol_TokenERC20[this] := 471226056;
[L4370]              name_TokenERC20[this] := -893098295;
[L4371]              decimals_TokenERC20[this] := 8;
[L4372]              __var_2 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4373]              _totalSupply_TokenERC20[this] := nonlinearMul(999880006599780055836170557439878316590346642366426347732992, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4374]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][owner_Owned[this]];
[L4375]              balances_TokenERC20[this][owner_Owned[this]] := _totalSupply_TokenERC20[this];
[L4376]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][owner_Owned[this]];
[L4377]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4408]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4409]  COND FALSE  !(revert)
[L4748]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4749]  COND FALSE  !(revert)
[L4752]  CALL        call _0x__0x_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4702]              assume msgsender_MSG != null;
[L4703]              Balance[this] := 0;
[L4704]              aSBlock__0x[this] := 0;
[L4705]              aEBlock__0x[this] := 0;
[L4706]              aCap__0x[this] := 0;
[L4707]              aTot__0x[this] := 0;
[L4708]              aAmt__0x[this] := 0;
[L4709]              sSBlock__0x[this] := 0;
[L4710]              sEBlock__0x[this] := 0;
[L4711]              sCap__0x[this] := 0;
[L4712]              sTot__0x[this] := 0;
[L4713]              sChunk__0x[this] := 0;
[L4714]              sPrice__0x[this] := 0;
[L4752]  RET         call _0x__0x_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4753]  COND FALSE  !(revert)
[L7678]  RET         call _0x__0x__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]              assume !revert && gas >= 0;
[L7682]  CALL        call CorralChoice__0x(this);
[L7381]              havoc msgsender_MSG;
[L7382]              havoc msgvalue_MSG;
[L7383]              havoc choice;
[L7384]              havoc __ret_0_totalSupply;
[L7385]              havoc tokenOwner_s338;
[L7386]              havoc balance_s338;
[L7387]              havoc tokenOwner_s484;
[L7388]              havoc spender_s484;
[L7389]              havoc remaining_s484;
[L7390]              havoc to_s381;
[L7391]              havoc tokens_s381;
[L7392]              havoc success_s381;
[L7393]              havoc spender_s409;
[L7394]              havoc tokens_s409;
[L7395]              havoc success_s409;
[L7396]              havoc from_s468;
[L7397]              havoc to_s468;
[L7398]              havoc tokens_s468;
[L7399]              havoc success_s468;
[L7400]              havoc __ret_0_owner;
[L7401]              havoc __ret_0_newOwner;
[L7402]              havoc _newOwner_s217;
[L7403]              havoc __ret_0_symbol;
[L7404]              havoc __ret_0_name;
[L7405]              havoc __ret_0_decimals;
[L7406]              havoc spender_s527;
[L7407]              havoc tokens_s527;
[L7408]              havoc data_s527;
[L7409]              havoc success_s527;
[L7410]              havoc __ret_0_aSBlock;
[L7411]              havoc __ret_0_aEBlock;
[L7412]              havoc __ret_0_aCap;
[L7413]              havoc __ret_0_aTot;
[L7414]              havoc __ret_0_aAmt;
[L7415]              havoc __ret_0_sSBlock;
[L7416]              havoc __ret_0_sEBlock;
[L7417]              havoc __ret_0_sCap;
[L7418]              havoc __ret_0_sTot;
[L7419]              havoc __ret_0_sChunk;
[L7420]              havoc __ret_0_sPrice;
[L7421]              havoc _refer_s687;
[L7422]              havoc success_s687;
[L7423]              havoc _refer_s847;
[L7424]              havoc success_s847;
[L7425]              havoc StartBlock_s868;
[L7426]              havoc EndBlock_s868;
[L7427]              havoc DropCap_s868;
[L7428]              havoc DropCount_s868;
[L7429]              havoc DropAmount_s868;
[L7430]              havoc StartBlock_s892;
[L7431]              havoc EndBlock_s892;
[L7432]              havoc SaleCap_s892;
[L7433]              havoc SaleCount_s892;
[L7434]              havoc ChunkSize_s892;
[L7435]              havoc SalePrice_s892;
[L7436]              havoc _aSBlock_s926;
[L7437]              havoc _aEBlock_s926;
[L7438]              havoc _aAmt_s926;
[L7439]              havoc _aCap_s926;
[L7440]              havoc _sSBlock_s966;
[L7441]              havoc _sEBlock_s966;
[L7442]              havoc _sChunk_s966;
[L7443]              havoc _sPrice_s966;
[L7444]              havoc _sCap_s966;
[L7445]              havoc tmpNow;
[L7446]              havoc gas;
[L7447]              assume gas > 4000000 && gas <= 8000000;
[L7448]              tmpNow := now;
[L7449]              havoc now;
[L7450]              assume now > tmpNow;
[L7451]              assume msgsender_MSG != null;
[L7452]              assume DType[msgsender_MSG] != SafeMath;
[L7453]              assume DType[msgsender_MSG] != ERC20Interface;
[L7454]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7455]              assume DType[msgsender_MSG] != Owned;
[L7456]              assume DType[msgsender_MSG] != TokenERC20;
[L7457]              assume DType[msgsender_MSG] != _0x;
[L7458]              Alloc[msgsender_MSG] := true;
[L7459]  COND FALSE  !(choice == 32)
[L7465]  COND FALSE  !(choice == 31)
[L7471]  COND FALSE  !(choice == 30)
[L7477]  COND TRUE   choice == 29
[L7478]              gas := gas - 21000;
[L7479]  COND TRUE   gas >= 0
[L7480]              assume tokens_s381 >= 0 && tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7481]              assume msgvalue_MSG == 0;
[L7482]  CALL        call success_s381 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s381 && tokens_s381 <= balances_TokenERC20[this][msgsender_MSG]) && tokens_s381 >= 0) && tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s381] >= 0) && balances_TokenERC20[this][to_s381] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][msgsender_MSG] >= 0) && balances_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_TokenERC200 := true;
[L2]                 call_transfer_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L978]               havoc __exception;
[L979]               revert := false;
[L980]   COND TRUE   __exception
[L981]               __tmp__Balance := Balance;
[L982]               __tmp__DType := DType;
[L983]               __tmp__Alloc := Alloc;
[L984]               __tmp__balance_ADDR := balance_ADDR;
[L985]               __tmp__M_Ref_int := M_Ref_int;
[L986]               __tmp__sum_balances0 := sum_balances0;
[L987]               __tmp__alloc_allowed_TokenERC20_lvl0 := alloc_allowed_TokenERC20_lvl0;
[L988]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L989]               __tmp__sum_allowed1 := sum_allowed1;
[L990]               __tmp__Length := Length;
[L991]               __tmp__now := now;
[L992]               __tmp__owner_Owned := owner_Owned;
[L993]               __tmp__newOwner_Owned := newOwner_Owned;
[L994]               __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L995]               __tmp__name_TokenERC20 := name_TokenERC20;
[L996]               __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L997]               __tmp___totalSupply_TokenERC20 := _totalSupply_TokenERC20;
[L998]               __tmp__balances_TokenERC20 := balances_TokenERC20;
[L999]               __tmp__allowed_TokenERC20 := allowed_TokenERC20;
[L1000]              __tmp__aSBlock__0x := aSBlock__0x;
[L1001]              __tmp__aEBlock__0x := aEBlock__0x;
[L1002]              __tmp__aCap__0x := aCap__0x;
[L1003]              __tmp__aTot__0x := aTot__0x;
[L1004]              __tmp__aAmt__0x := aAmt__0x;
[L1005]              __tmp__sSBlock__0x := sSBlock__0x;
[L1006]              __tmp__sEBlock__0x := sEBlock__0x;
[L1007]              __tmp__sCap__0x := sCap__0x;
[L1008]              __tmp__sTot__0x := sTot__0x;
[L1009]              __tmp__sChunk__0x := sChunk__0x;
[L1010]              __tmp__sPrice__0x := sPrice__0x;
[L1011]  CALL        call success_s381 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L4456]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4108]  COND FALSE  !(!(b_s45 <= a_s45))
[L4112]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4456]  RET         call __var_5 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4457]  COND FALSE  !(revert)
[L4460]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_TokenERC20[this][msgsender_MSG];
[L4461]              __tmp__balances_TokenERC20[this][msgsender_MSG] := __var_5;
[L4462]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_TokenERC20[this][msgsender_MSG];
[L4463]  CALL        call __var_6 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][to_s381], tokens_s381);
[L4090]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4091]  COND FALSE  !(!(c_s23 >= a_s23))
[L4463]  RET         call __var_6 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][to_s381], tokens_s381);
[L4464]  COND FALSE  !(revert)
[L4467]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_TokenERC20[this][to_s381];
[L4468]              __tmp__balances_TokenERC20[this][to_s381] := __var_6;
[L4469]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_TokenERC20[this][to_s381];
[L4470]              success_s381 := true;
[L1011]  RET         call success_s381 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L1012]              assume revert || gas < 0;
[L7482]  RET         call success_s381 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L7682]  RET         call CorralChoice__0x(this);

Loop:
[L7682]  CALL        call CorralChoice__0x(this);
[L7381]              havoc msgsender_MSG;
[L7382]              havoc msgvalue_MSG;
[L7383]              havoc choice;
[L7384]              havoc __ret_0_totalSupply;
[L7385]              havoc tokenOwner_s338;
[L7386]              havoc balance_s338;
[L7387]              havoc tokenOwner_s484;
[L7388]              havoc spender_s484;
[L7389]              havoc remaining_s484;
[L7390]              havoc to_s381;
[L7391]              havoc tokens_s381;
[L7392]              havoc success_s381;
[L7393]              havoc spender_s409;
[L7394]              havoc tokens_s409;
[L7395]              havoc success_s409;
[L7396]              havoc from_s468;
[L7397]              havoc to_s468;
[L7398]              havoc tokens_s468;
[L7399]              havoc success_s468;
[L7400]              havoc __ret_0_owner;
[L7401]              havoc __ret_0_newOwner;
[L7402]              havoc _newOwner_s217;
[L7403]              havoc __ret_0_symbol;
[L7404]              havoc __ret_0_name;
[L7405]              havoc __ret_0_decimals;
[L7406]              havoc spender_s527;
[L7407]              havoc tokens_s527;
[L7408]              havoc data_s527;
[L7409]              havoc success_s527;
[L7410]              havoc __ret_0_aSBlock;
[L7411]              havoc __ret_0_aEBlock;
[L7412]              havoc __ret_0_aCap;
[L7413]              havoc __ret_0_aTot;
[L7414]              havoc __ret_0_aAmt;
[L7415]              havoc __ret_0_sSBlock;
[L7416]              havoc __ret_0_sEBlock;
[L7417]              havoc __ret_0_sCap;
[L7418]              havoc __ret_0_sTot;
[L7419]              havoc __ret_0_sChunk;
[L7420]              havoc __ret_0_sPrice;
[L7421]              havoc _refer_s687;
[L7422]              havoc success_s687;
[L7423]              havoc _refer_s847;
[L7424]              havoc success_s847;
[L7425]              havoc StartBlock_s868;
[L7426]              havoc EndBlock_s868;
[L7427]              havoc DropCap_s868;
[L7428]              havoc DropCount_s868;
[L7429]              havoc DropAmount_s868;
[L7430]              havoc StartBlock_s892;
[L7431]              havoc EndBlock_s892;
[L7432]              havoc SaleCap_s892;
[L7433]              havoc SaleCount_s892;
[L7434]              havoc ChunkSize_s892;
[L7435]              havoc SalePrice_s892;
[L7436]              havoc _aSBlock_s926;
[L7437]              havoc _aEBlock_s926;
[L7438]              havoc _aAmt_s926;
[L7439]              havoc _aCap_s926;
[L7440]              havoc _sSBlock_s966;
[L7441]              havoc _sEBlock_s966;
[L7442]              havoc _sChunk_s966;
[L7443]              havoc _sPrice_s966;
[L7444]              havoc _sCap_s966;
[L7445]              havoc tmpNow;
[L7446]              havoc gas;
[L7447]              assume gas > 4000000 && gas <= 8000000;
[L7448]              tmpNow := now;
[L7449]              havoc now;
[L7450]              assume now > tmpNow;
[L7451]              assume msgsender_MSG != null;
[L7452]              assume DType[msgsender_MSG] != SafeMath;
[L7453]              assume DType[msgsender_MSG] != ERC20Interface;
[L7454]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7455]              assume DType[msgsender_MSG] != Owned;
[L7456]              assume DType[msgsender_MSG] != TokenERC20;
[L7457]              assume DType[msgsender_MSG] != _0x;
[L7458]              Alloc[msgsender_MSG] := true;
[L7459]  COND FALSE  !(choice == 32)
[L7465]  COND FALSE  !(choice == 31)
[L7471]  COND FALSE  !(choice == 30)
[L7477]  COND TRUE   choice == 29
[L7478]              gas := gas - 21000;
[L7479]  COND TRUE   gas >= 0
[L7480]              assume tokens_s381 >= 0 && tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7481]              assume msgvalue_MSG == 0;
[L7482]  CALL        call success_s381 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s381 && tokens_s381 <= balances_TokenERC20[this][msgsender_MSG]) && tokens_s381 >= 0) && tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s381] >= 0) && balances_TokenERC20[this][to_s381] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][msgsender_MSG] >= 0) && balances_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_TokenERC200 := true;
[L2]                 call_transfer_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L978]               havoc __exception;
[L979]               revert := false;
[L980]   COND TRUE   __exception
[L981]               __tmp__Balance := Balance;
[L982]               __tmp__DType := DType;
[L983]               __tmp__Alloc := Alloc;
[L984]               __tmp__balance_ADDR := balance_ADDR;
[L985]               __tmp__M_Ref_int := M_Ref_int;
[L986]               __tmp__sum_balances0 := sum_balances0;
[L987]               __tmp__alloc_allowed_TokenERC20_lvl0 := alloc_allowed_TokenERC20_lvl0;
[L988]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L989]               __tmp__sum_allowed1 := sum_allowed1;
[L990]               __tmp__Length := Length;
[L991]               __tmp__now := now;
[L992]               __tmp__owner_Owned := owner_Owned;
[L993]               __tmp__newOwner_Owned := newOwner_Owned;
[L994]               __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L995]               __tmp__name_TokenERC20 := name_TokenERC20;
[L996]               __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L997]               __tmp___totalSupply_TokenERC20 := _totalSupply_TokenERC20;
[L998]               __tmp__balances_TokenERC20 := balances_TokenERC20;
[L999]               __tmp__allowed_TokenERC20 := allowed_TokenERC20;
[L1000]              __tmp__aSBlock__0x := aSBlock__0x;
[L1001]              __tmp__aEBlock__0x := aEBlock__0x;
[L1002]              __tmp__aCap__0x := aCap__0x;
[L1003]              __tmp__aTot__0x := aTot__0x;
[L1004]              __tmp__aAmt__0x := aAmt__0x;
[L1005]              __tmp__sSBlock__0x := sSBlock__0x;
[L1006]              __tmp__sEBlock__0x := sEBlock__0x;
[L1007]              __tmp__sCap__0x := sCap__0x;
[L1008]              __tmp__sTot__0x := sTot__0x;
[L1009]              __tmp__sChunk__0x := sChunk__0x;
[L1010]              __tmp__sPrice__0x := sPrice__0x;
[L1011]  CALL        call success_s381 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L4456]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4108]  COND FALSE  !(!(b_s45 <= a_s45))
[L4112]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4456]  RET         call __var_5 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4457]  COND FALSE  !(revert)
[L4460]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_TokenERC20[this][msgsender_MSG];
[L4461]              __tmp__balances_TokenERC20[this][msgsender_MSG] := __var_5;
[L4462]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_TokenERC20[this][msgsender_MSG];
[L4463]  CALL        call __var_6 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][to_s381], tokens_s381);
[L4090]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4091]  COND FALSE  !(!(c_s23 >= a_s23))
[L4463]  RET         call __var_6 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][to_s381], tokens_s381);
[L4464]  COND FALSE  !(revert)
[L4467]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_TokenERC20[this][to_s381];
[L4468]              __tmp__balances_TokenERC20[this][to_s381] := __var_6;
[L4469]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_TokenERC20[this][to_s381];
[L4470]              success_s381 := true;
[L1011]  RET         call success_s381 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L1012]              assume revert || gas < 0;
[L7482]  RET         call success_s381 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L7682]  RET         call CorralChoice__0x(this);

[2020-11-24 22:32:09,796 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 22:32:09,796 INFO  L82        PathProgramCache]: Analyzing trace with hash -622933765, now seen corresponding path program 1 times
[2020-11-24 22:32:09,797 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 22:32:09,806 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 22:32:09,835 INFO  L134       CoverageAnalysis]: Checked inductivity of 23 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 23 trivial. 0 not checked.
[2020-11-24 22:32:09,835 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 22:32:09,835 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-24 22:32:09,835 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 22:32:09,836 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-24 22:32:09,836 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-11-24 22:32:09,836 INFO  L87              Difference]: Start difference. First operand 7466 states and 8568 transitions. cyclomatic complexity: 1110 Second operand 5 states.
[2020-11-24 22:32:10,896 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 22:32:10,897 INFO  L93              Difference]: Finished difference Result 8793 states and 10127 transitions.
[2020-11-24 22:32:10,897 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-24 22:32:10,897 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8793 states and 10127 transitions.
[2020-11-24 22:32:10,914 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-11-24 22:32:10,932 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8793 states to 7161 states and 8332 transitions.
[2020-11-24 22:32:10,932 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 294
[2020-11-24 22:32:10,933 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 294
[2020-11-24 22:32:10,933 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7161 states and 8332 transitions.
[2020-11-24 22:32:10,938 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 22:32:10,938 INFO  L728         BuchiCegarLoop]: Abstraction has 7161 states and 8332 transitions.
[2020-11-24 22:32:10,942 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7161 states and 8332 transitions.
[2020-11-24 22:32:10,975 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7161 to 5779.
[2020-11-24 22:32:10,976 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5779 states.
[2020-11-24 22:32:10,981 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5779 states to 5779 states and 6645 transitions.
[2020-11-24 22:32:10,981 INFO  L751         BuchiCegarLoop]: Abstraction has 5779 states and 6645 transitions.
[2020-11-24 22:32:10,981 INFO  L631         BuchiCegarLoop]: Abstraction has 5779 states and 6645 transitions.
[2020-11-24 22:32:10,981 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-24 22:32:10,981 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5779 states and 6645 transitions.
[2020-11-24 22:32:10,986 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 22:32:10,986 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 22:32:10,986 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 22:32:10,987 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 22:32:10,987 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_TokenERC200 := false;
[L2]                 call_transfer_TokenERC200 := false;
[L2]     CALL        call main();
[L7672]              assume null == 0;
[L7673]  CALL        call this := FreshRefGenerator__success();
[L4050]              havoc newRef;
[L4051]              assume Alloc[newRef] == false;
[L4052]              Alloc[newRef] := true;
[L4053]              assume newRef != null;
[L7673]  RET         call this := FreshRefGenerator__success();
[L7674]              assume now >= 0;
[L7675]              assume DType[this] == _0x;
[L7676]              assume msgvalue_MSG == 0;
[L7677]              gas := gas - 53000;
[L7678]  CALL        call _0x__0x__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4186]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4171]              assume msgsender_MSG != null;
[L4172]              Balance[this] := 0;
[L4186]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  COND FALSE  !(revert)
[L4740]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]  COND FALSE  !(revert)
[L4744]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4256]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4238]              assume msgsender_MSG != null;
[L4239]              Balance[this] := 0;
[L4240]              owner_Owned[this] := null;
[L4241]              newOwner_Owned[this] := null;
[L4243]              owner_Owned[this] := msgsender_MSG;
[L4256]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  COND FALSE  !(revert)
[L4744]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4745]  COND FALSE  !(revert)
[L4748]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4400]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4186]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4171]              assume msgsender_MSG != null;
[L4172]              Balance[this] := 0;
[L4186]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  COND FALSE  !(revert)
[L4400]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4401]  COND FALSE  !(revert)
[L4404]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4256]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4238]              assume msgsender_MSG != null;
[L4239]              Balance[this] := 0;
[L4240]              owner_Owned[this] := null;
[L4241]              newOwner_Owned[this] := null;
[L4243]              owner_Owned[this] := msgsender_MSG;
[L4256]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  COND FALSE  !(revert)
[L4404]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4405]  COND FALSE  !(revert)
[L4408]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4358]              assume msgsender_MSG != null;
[L4359]              Balance[this] := 0;
[L4360]              symbol_TokenERC20[this] := 1454487515;
[L4361]              name_TokenERC20[this] := 1454487515;
[L4362]              decimals_TokenERC20[this] := 0;
[L4363]              _totalSupply_TokenERC20[this] := 0;
[L4364]              balances_TokenERC20[this] := zeroRefintArr();
[L4365]              sum_balances0[this] := 0;
[L4366]              allowed_TokenERC20[this] := zeroRefRefintArr();
[L4367]              sum_allowed1[this] := 0;
[L4369]              symbol_TokenERC20[this] := 471226056;
[L4370]              name_TokenERC20[this] := -893098295;
[L4371]              decimals_TokenERC20[this] := 8;
[L4372]              __var_2 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4373]              _totalSupply_TokenERC20[this] := nonlinearMul(999880006599780055836170557439878316590346642366426347732992, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4374]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][owner_Owned[this]];
[L4375]              balances_TokenERC20[this][owner_Owned[this]] := _totalSupply_TokenERC20[this];
[L4376]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][owner_Owned[this]];
[L4377]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4408]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4409]  COND FALSE  !(revert)
[L4748]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4749]  COND FALSE  !(revert)
[L4752]  CALL        call _0x__0x_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4702]              assume msgsender_MSG != null;
[L4703]              Balance[this] := 0;
[L4704]              aSBlock__0x[this] := 0;
[L4705]              aEBlock__0x[this] := 0;
[L4706]              aCap__0x[this] := 0;
[L4707]              aTot__0x[this] := 0;
[L4708]              aAmt__0x[this] := 0;
[L4709]              sSBlock__0x[this] := 0;
[L4710]              sEBlock__0x[this] := 0;
[L4711]              sCap__0x[this] := 0;
[L4712]              sTot__0x[this] := 0;
[L4713]              sChunk__0x[this] := 0;
[L4714]              sPrice__0x[this] := 0;
[L4752]  RET         call _0x__0x_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4753]  COND FALSE  !(revert)
[L7678]  RET         call _0x__0x__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]              assume !revert && gas >= 0;
[L7682]  CALL        call CorralChoice__0x(this);
[L7381]              havoc msgsender_MSG;
[L7382]              havoc msgvalue_MSG;
[L7383]              havoc choice;
[L7384]              havoc __ret_0_totalSupply;
[L7385]              havoc tokenOwner_s338;
[L7386]              havoc balance_s338;
[L7387]              havoc tokenOwner_s484;
[L7388]              havoc spender_s484;
[L7389]              havoc remaining_s484;
[L7390]              havoc to_s381;
[L7391]              havoc tokens_s381;
[L7392]              havoc success_s381;
[L7393]              havoc spender_s409;
[L7394]              havoc tokens_s409;
[L7395]              havoc success_s409;
[L7396]              havoc from_s468;
[L7397]              havoc to_s468;
[L7398]              havoc tokens_s468;
[L7399]              havoc success_s468;
[L7400]              havoc __ret_0_owner;
[L7401]              havoc __ret_0_newOwner;
[L7402]              havoc _newOwner_s217;
[L7403]              havoc __ret_0_symbol;
[L7404]              havoc __ret_0_name;
[L7405]              havoc __ret_0_decimals;
[L7406]              havoc spender_s527;
[L7407]              havoc tokens_s527;
[L7408]              havoc data_s527;
[L7409]              havoc success_s527;
[L7410]              havoc __ret_0_aSBlock;
[L7411]              havoc __ret_0_aEBlock;
[L7412]              havoc __ret_0_aCap;
[L7413]              havoc __ret_0_aTot;
[L7414]              havoc __ret_0_aAmt;
[L7415]              havoc __ret_0_sSBlock;
[L7416]              havoc __ret_0_sEBlock;
[L7417]              havoc __ret_0_sCap;
[L7418]              havoc __ret_0_sTot;
[L7419]              havoc __ret_0_sChunk;
[L7420]              havoc __ret_0_sPrice;
[L7421]              havoc _refer_s687;
[L7422]              havoc success_s687;
[L7423]              havoc _refer_s847;
[L7424]              havoc success_s847;
[L7425]              havoc StartBlock_s868;
[L7426]              havoc EndBlock_s868;
[L7427]              havoc DropCap_s868;
[L7428]              havoc DropCount_s868;
[L7429]              havoc DropAmount_s868;
[L7430]              havoc StartBlock_s892;
[L7431]              havoc EndBlock_s892;
[L7432]              havoc SaleCap_s892;
[L7433]              havoc SaleCount_s892;
[L7434]              havoc ChunkSize_s892;
[L7435]              havoc SalePrice_s892;
[L7436]              havoc _aSBlock_s926;
[L7437]              havoc _aEBlock_s926;
[L7438]              havoc _aAmt_s926;
[L7439]              havoc _aCap_s926;
[L7440]              havoc _sSBlock_s966;
[L7441]              havoc _sEBlock_s966;
[L7442]              havoc _sChunk_s966;
[L7443]              havoc _sPrice_s966;
[L7444]              havoc _sCap_s966;
[L7445]              havoc tmpNow;
[L7446]              havoc gas;
[L7447]              assume gas > 4000000 && gas <= 8000000;
[L7448]              tmpNow := now;
[L7449]              havoc now;
[L7450]              assume now > tmpNow;
[L7451]              assume msgsender_MSG != null;
[L7452]              assume DType[msgsender_MSG] != SafeMath;
[L7453]              assume DType[msgsender_MSG] != ERC20Interface;
[L7454]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7455]              assume DType[msgsender_MSG] != Owned;
[L7456]              assume DType[msgsender_MSG] != TokenERC20;
[L7457]              assume DType[msgsender_MSG] != _0x;
[L7458]              Alloc[msgsender_MSG] := true;
[L7459]  COND FALSE  !(choice == 32)
[L7465]  COND FALSE  !(choice == 31)
[L7471]  COND FALSE  !(choice == 30)
[L7477]  COND TRUE   choice == 29
[L7478]              gas := gas - 21000;
[L7479]  COND TRUE   gas >= 0
[L7480]              assume tokens_s381 >= 0 && tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7481]              assume msgvalue_MSG == 0;
[L7482]  CALL        call success_s381 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == to_s381 && tokens_s381 <= balances_TokenERC20[this][msgsender_MSG]) && tokens_s381 >= 0) && tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s381] >= 0) && balances_TokenERC20[this][to_s381] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][msgsender_MSG] >= 0) && balances_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L978]               havoc __exception;
[L979]               revert := false;
[L980]   COND FALSE  !(__exception)
[L1014]  CALL        call success_s381 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L4478]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4117]  COND FALSE  !(!(b_s45 <= a_s45))
[L4121]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4478]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4479]  COND FALSE  !(revert)
[L4482]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][msgsender_MSG];
[L4483]              balances_TokenERC20[this][msgsender_MSG] := __var_5;
[L4484]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][msgsender_MSG];
[L4485]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s381], tokens_s381);
[L4099]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4100]  COND FALSE  !(!(c_s23 >= a_s23))
[L4485]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s381], tokens_s381);
[L4486]  COND FALSE  !(revert)
[L4489]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][to_s381];
[L4490]              balances_TokenERC20[this][to_s381] := __var_6;
[L4491]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][to_s381];
[L4492]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4493]              success_s381 := true;
[L1014]  RET         call success_s381 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L1015]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((((((((((((success_s381 == true && _totalSupply_TokenERC20[this] == old(_totalSupply_TokenERC20[this])) && balances_TokenERC20[this] == old(balances_TokenERC20[this])) && allowed_TokenERC20[this] == old(allowed_TokenERC20[this])) && aSBlock__0x[this] == old(aSBlock__0x[this])) && aEBlock__0x[this] == old(aEBlock__0x[this])) && aCap__0x[this] == old(aCap__0x[this])) && aTot__0x[this] == old(aTot__0x[this])) && aAmt__0x[this] == old(aAmt__0x[this])) && sSBlock__0x[this] == old(sSBlock__0x[this])) && sEBlock__0x[this] == old(sEBlock__0x[this])) && sCap__0x[this] == old(sCap__0x[this])) && sTot__0x[this] == old(sTot__0x[this])) && sChunk__0x[this] == old(sChunk__0x[this])) && sPrice__0x[this] == old(sPrice__0x[this])) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this])) && name_TokenERC20[this] == old(name_TokenERC20[this])) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L2]                 revert := revert_hold;
[L7482]  RET         call success_s381 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L7682]  RET         call CorralChoice__0x(this);
[L7682]  CALL        call CorralChoice__0x(this);
[L7381]              havoc msgsender_MSG;
[L7382]              havoc msgvalue_MSG;
[L7383]              havoc choice;
[L7384]              havoc __ret_0_totalSupply;
[L7385]              havoc tokenOwner_s338;
[L7386]              havoc balance_s338;
[L7387]              havoc tokenOwner_s484;
[L7388]              havoc spender_s484;
[L7389]              havoc remaining_s484;
[L7390]              havoc to_s381;
[L7391]              havoc tokens_s381;
[L7392]              havoc success_s381;
[L7393]              havoc spender_s409;
[L7394]              havoc tokens_s409;
[L7395]              havoc success_s409;
[L7396]              havoc from_s468;
[L7397]              havoc to_s468;
[L7398]              havoc tokens_s468;
[L7399]              havoc success_s468;
[L7400]              havoc __ret_0_owner;
[L7401]              havoc __ret_0_newOwner;
[L7402]              havoc _newOwner_s217;
[L7403]              havoc __ret_0_symbol;
[L7404]              havoc __ret_0_name;
[L7405]              havoc __ret_0_decimals;
[L7406]              havoc spender_s527;
[L7407]              havoc tokens_s527;
[L7408]              havoc data_s527;
[L7409]              havoc success_s527;
[L7410]              havoc __ret_0_aSBlock;
[L7411]              havoc __ret_0_aEBlock;
[L7412]              havoc __ret_0_aCap;
[L7413]              havoc __ret_0_aTot;
[L7414]              havoc __ret_0_aAmt;
[L7415]              havoc __ret_0_sSBlock;
[L7416]              havoc __ret_0_sEBlock;
[L7417]              havoc __ret_0_sCap;
[L7418]              havoc __ret_0_sTot;
[L7419]              havoc __ret_0_sChunk;
[L7420]              havoc __ret_0_sPrice;
[L7421]              havoc _refer_s687;
[L7422]              havoc success_s687;
[L7423]              havoc _refer_s847;
[L7424]              havoc success_s847;
[L7425]              havoc StartBlock_s868;
[L7426]              havoc EndBlock_s868;
[L7427]              havoc DropCap_s868;
[L7428]              havoc DropCount_s868;
[L7429]              havoc DropAmount_s868;
[L7430]              havoc StartBlock_s892;
[L7431]              havoc EndBlock_s892;
[L7432]              havoc SaleCap_s892;
[L7433]              havoc SaleCount_s892;
[L7434]              havoc ChunkSize_s892;
[L7435]              havoc SalePrice_s892;
[L7436]              havoc _aSBlock_s926;
[L7437]              havoc _aEBlock_s926;
[L7438]              havoc _aAmt_s926;
[L7439]              havoc _aCap_s926;
[L7440]              havoc _sSBlock_s966;
[L7441]              havoc _sEBlock_s966;
[L7442]              havoc _sChunk_s966;
[L7443]              havoc _sPrice_s966;
[L7444]              havoc _sCap_s966;
[L7445]              havoc tmpNow;
[L7446]              havoc gas;
[L7447]              assume gas > 4000000 && gas <= 8000000;
[L7448]              tmpNow := now;
[L7449]              havoc now;
[L7450]              assume now > tmpNow;
[L7451]              assume msgsender_MSG != null;
[L7452]              assume DType[msgsender_MSG] != SafeMath;
[L7453]              assume DType[msgsender_MSG] != ERC20Interface;
[L7454]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7455]              assume DType[msgsender_MSG] != Owned;
[L7456]              assume DType[msgsender_MSG] != TokenERC20;
[L7457]              assume DType[msgsender_MSG] != _0x;
[L7458]              Alloc[msgsender_MSG] := true;
[L7459]  COND FALSE  !(choice == 32)
[L7465]  COND FALSE  !(choice == 31)
[L7471]  COND FALSE  !(choice == 30)
[L7477]  COND TRUE   choice == 29
[L7478]              gas := gas - 21000;
[L7479]  COND TRUE   gas >= 0
[L7480]              assume tokens_s381 >= 0 && tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7481]              assume msgvalue_MSG == 0;
[L7482]  CALL        call success_s381 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s381 && tokens_s381 <= balances_TokenERC20[this][msgsender_MSG]) && tokens_s381 >= 0) && tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s381] >= 0) && balances_TokenERC20[this][to_s381] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][msgsender_MSG] >= 0) && balances_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_TokenERC200 := true;
[L2]                 call_transfer_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L978]               havoc __exception;
[L979]               revert := false;
[L980]   COND FALSE  !(__exception)
[L1014]  CALL        call success_s381 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L4478]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4117]  COND FALSE  !(!(b_s45 <= a_s45))
[L4121]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4478]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4479]  COND FALSE  !(revert)
[L4482]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][msgsender_MSG];
[L4483]              balances_TokenERC20[this][msgsender_MSG] := __var_5;
[L4484]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][msgsender_MSG];
[L4485]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s381], tokens_s381);
[L4099]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4100]  COND FALSE  !(!(c_s23 >= a_s23))
[L4485]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s381], tokens_s381);
[L4486]  COND FALSE  !(revert)
[L4489]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][to_s381];
[L4490]              balances_TokenERC20[this][to_s381] := __var_6;
[L4491]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][to_s381];
[L4492]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4493]              success_s381 := true;
[L1014]  RET         call success_s381 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L1015]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((((((((((((success_s381 == true && _totalSupply_TokenERC20[this] == old(_totalSupply_TokenERC20[this])) && balances_TokenERC20[this] == old(balances_TokenERC20[this])) && allowed_TokenERC20[this] == old(allowed_TokenERC20[this])) && aSBlock__0x[this] == old(aSBlock__0x[this])) && aEBlock__0x[this] == old(aEBlock__0x[this])) && aCap__0x[this] == old(aCap__0x[this])) && aTot__0x[this] == old(aTot__0x[this])) && aAmt__0x[this] == old(aAmt__0x[this])) && sSBlock__0x[this] == old(sSBlock__0x[this])) && sEBlock__0x[this] == old(sEBlock__0x[this])) && sCap__0x[this] == old(sCap__0x[this])) && sTot__0x[this] == old(sTot__0x[this])) && sChunk__0x[this] == old(sChunk__0x[this])) && sPrice__0x[this] == old(sPrice__0x[this])) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this])) && name_TokenERC20[this] == old(name_TokenERC20[this])) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L2]                 revert := revert_hold;
[L7482]  RET         call success_s381 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L7682]  RET         call CorralChoice__0x(this);

Loop:
[L7682]  CALL        call CorralChoice__0x(this);
[L7381]              havoc msgsender_MSG;
[L7382]              havoc msgvalue_MSG;
[L7383]              havoc choice;
[L7384]              havoc __ret_0_totalSupply;
[L7385]              havoc tokenOwner_s338;
[L7386]              havoc balance_s338;
[L7387]              havoc tokenOwner_s484;
[L7388]              havoc spender_s484;
[L7389]              havoc remaining_s484;
[L7390]              havoc to_s381;
[L7391]              havoc tokens_s381;
[L7392]              havoc success_s381;
[L7393]              havoc spender_s409;
[L7394]              havoc tokens_s409;
[L7395]              havoc success_s409;
[L7396]              havoc from_s468;
[L7397]              havoc to_s468;
[L7398]              havoc tokens_s468;
[L7399]              havoc success_s468;
[L7400]              havoc __ret_0_owner;
[L7401]              havoc __ret_0_newOwner;
[L7402]              havoc _newOwner_s217;
[L7403]              havoc __ret_0_symbol;
[L7404]              havoc __ret_0_name;
[L7405]              havoc __ret_0_decimals;
[L7406]              havoc spender_s527;
[L7407]              havoc tokens_s527;
[L7408]              havoc data_s527;
[L7409]              havoc success_s527;
[L7410]              havoc __ret_0_aSBlock;
[L7411]              havoc __ret_0_aEBlock;
[L7412]              havoc __ret_0_aCap;
[L7413]              havoc __ret_0_aTot;
[L7414]              havoc __ret_0_aAmt;
[L7415]              havoc __ret_0_sSBlock;
[L7416]              havoc __ret_0_sEBlock;
[L7417]              havoc __ret_0_sCap;
[L7418]              havoc __ret_0_sTot;
[L7419]              havoc __ret_0_sChunk;
[L7420]              havoc __ret_0_sPrice;
[L7421]              havoc _refer_s687;
[L7422]              havoc success_s687;
[L7423]              havoc _refer_s847;
[L7424]              havoc success_s847;
[L7425]              havoc StartBlock_s868;
[L7426]              havoc EndBlock_s868;
[L7427]              havoc DropCap_s868;
[L7428]              havoc DropCount_s868;
[L7429]              havoc DropAmount_s868;
[L7430]              havoc StartBlock_s892;
[L7431]              havoc EndBlock_s892;
[L7432]              havoc SaleCap_s892;
[L7433]              havoc SaleCount_s892;
[L7434]              havoc ChunkSize_s892;
[L7435]              havoc SalePrice_s892;
[L7436]              havoc _aSBlock_s926;
[L7437]              havoc _aEBlock_s926;
[L7438]              havoc _aAmt_s926;
[L7439]              havoc _aCap_s926;
[L7440]              havoc _sSBlock_s966;
[L7441]              havoc _sEBlock_s966;
[L7442]              havoc _sChunk_s966;
[L7443]              havoc _sPrice_s966;
[L7444]              havoc _sCap_s966;
[L7445]              havoc tmpNow;
[L7446]              havoc gas;
[L7447]              assume gas > 4000000 && gas <= 8000000;
[L7448]              tmpNow := now;
[L7449]              havoc now;
[L7450]              assume now > tmpNow;
[L7451]              assume msgsender_MSG != null;
[L7452]              assume DType[msgsender_MSG] != SafeMath;
[L7453]              assume DType[msgsender_MSG] != ERC20Interface;
[L7454]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7455]              assume DType[msgsender_MSG] != Owned;
[L7456]              assume DType[msgsender_MSG] != TokenERC20;
[L7457]              assume DType[msgsender_MSG] != _0x;
[L7458]              Alloc[msgsender_MSG] := true;
[L7459]  COND FALSE  !(choice == 32)
[L7465]  COND FALSE  !(choice == 31)
[L7471]  COND FALSE  !(choice == 30)
[L7477]  COND TRUE   choice == 29
[L7478]              gas := gas - 21000;
[L7479]  COND TRUE   gas >= 0
[L7480]              assume tokens_s381 >= 0 && tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7481]              assume msgvalue_MSG == 0;
[L7482]  CALL        call success_s381 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s381 && tokens_s381 <= balances_TokenERC20[this][msgsender_MSG]) && tokens_s381 >= 0) && tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s381] >= 0) && balances_TokenERC20[this][to_s381] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][msgsender_MSG] >= 0) && balances_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_TokenERC200 := true;
[L2]                 call_transfer_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L978]               havoc __exception;
[L979]               revert := false;
[L980]   COND FALSE  !(__exception)
[L1014]  CALL        call success_s381 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L4478]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4117]  COND FALSE  !(!(b_s45 <= a_s45))
[L4121]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4478]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4479]  COND FALSE  !(revert)
[L4482]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][msgsender_MSG];
[L4483]              balances_TokenERC20[this][msgsender_MSG] := __var_5;
[L4484]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][msgsender_MSG];
[L4485]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s381], tokens_s381);
[L4099]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4100]  COND FALSE  !(!(c_s23 >= a_s23))
[L4485]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s381], tokens_s381);
[L4486]  COND FALSE  !(revert)
[L4489]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][to_s381];
[L4490]              balances_TokenERC20[this][to_s381] := __var_6;
[L4491]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][to_s381];
[L4492]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4493]              success_s381 := true;
[L1014]  RET         call success_s381 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L1015]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((((((((((((success_s381 == true && _totalSupply_TokenERC20[this] == old(_totalSupply_TokenERC20[this])) && balances_TokenERC20[this] == old(balances_TokenERC20[this])) && allowed_TokenERC20[this] == old(allowed_TokenERC20[this])) && aSBlock__0x[this] == old(aSBlock__0x[this])) && aEBlock__0x[this] == old(aEBlock__0x[this])) && aCap__0x[this] == old(aCap__0x[this])) && aTot__0x[this] == old(aTot__0x[this])) && aAmt__0x[this] == old(aAmt__0x[this])) && sSBlock__0x[this] == old(sSBlock__0x[this])) && sEBlock__0x[this] == old(sEBlock__0x[this])) && sCap__0x[this] == old(sCap__0x[this])) && sTot__0x[this] == old(sTot__0x[this])) && sChunk__0x[this] == old(sChunk__0x[this])) && sPrice__0x[this] == old(sPrice__0x[this])) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this])) && name_TokenERC20[this] == old(name_TokenERC20[this])) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L2]                 revert := revert_hold;
[L7482]  RET         call success_s381 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L7682]  RET         call CorralChoice__0x(this);

[2020-11-24 22:32:10,991 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 22:32:10,991 INFO  L82        PathProgramCache]: Analyzing trace with hash -8284012, now seen corresponding path program 1 times
[2020-11-24 22:32:10,992 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 22:32:11,057 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
Received shutdown request...
[2020-11-24 22:46:40,455 FATAL L265        ToolchainWalker]: An unrecoverable error occured during an interaction with an SMT solver:
de.uni_freiburg.informatik.ultimate.logic.SMTLIBException: Timeout exceeded
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator$IntegerInterpolator.interpolate(Interpolator.java:1432)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator$MixedLAInterpolator.convert(Interpolator.java:1288)
	at de.uni_freiburg.informatik.ultimate.logic.TermTransformer.cacheConvert(TermTransformer.java:131)
	at de.uni_freiburg.informatik.ultimate.logic.TermTransformer.access$0(TermTransformer.java:127)
	at de.uni_freiburg.informatik.ultimate.logic.TermTransformer$Convert.walk(TermTransformer.java:79)
	at de.uni_freiburg.informatik.ultimate.logic.NonRecursive.run(NonRecursive.java:122)
	at de.uni_freiburg.informatik.ultimate.logic.NonRecursive.run(NonRecursive.java:113)
	at de.uni_freiburg.informatik.ultimate.logic.TermTransformer.transform(TermTransformer.java:253)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator.mixedPivotLA(Interpolator.java:1478)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator.combine(Interpolator.java:359)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator.access$2(Interpolator.java:328)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator$CombineInterpolants.walk(Interpolator.java:153)
	at de.uni_freiburg.informatik.ultimate.logic.NonRecursive.run(NonRecursive.java:122)
	at de.uni_freiburg.informatik.ultimate.logic.NonRecursive.run(NonRecursive.java:113)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator.interpolate(Interpolator.java:220)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator.getInterpolants(Interpolator.java:201)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.smtlib2.SMTInterpol.getInterpolants(SMTInterpol.java:919)
	at de.uni_freiburg.informatik.ultimate.modelcheckerutils.smt.managedscript.ManagedScript.getInterpolants(ManagedScript.java:200)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.NestedInterpolantsBuilder.computeCraigInterpolants(NestedInterpolantsBuilder.java:303)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.NestedInterpolantsBuilder.<init>(NestedInterpolantsBuilder.java:167)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.NestedInterpolantsBuilder.<init>(NestedInterpolantsBuilder.java:182)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.InterpolatingTraceCheckCraig.computeInterpolantsTree(InterpolatingTraceCheckCraig.java:271)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.InterpolatingTraceCheckCraig.computeInterpolants(InterpolatingTraceCheckCraig.java:207)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.InterpolatingTraceCheckCraig.<init>(InterpolatingTraceCheckCraig.java:109)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.TraceCheckConstructor.constructCraig(TraceCheckConstructor.java:211)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.TraceCheckConstructor.constructTraceCheck(TraceCheckConstructor.java:183)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.TraceCheckConstructor.get(TraceCheckConstructor.java:165)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.FixedRefinementStrategy.getTraceCheck(FixedRefinementStrategy.java:134)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.BaseRefinementStrategy.checkFeasibility(BaseRefinementStrategy.java:223)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.BaseRefinementStrategy.executeStrategy(BaseRefinementStrategy.java:197)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.TraceAbstractionRefinementEngine.<init>(TraceAbstractionRefinementEngine.java:70)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck$LassoCheckResult.checkFeasibilityAndComputeInterpolants(LassoCheck.java:1126)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck$LassoCheckResult.checkStemFeasibility(LassoCheck.java:1080)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck$LassoCheckResult.<init>(LassoCheck.java:994)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck.<init>(LassoCheck.java:276)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiCegarLoop.iterate(BuchiCegarLoop.java:479)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver.doTerminationAnalysis(BuchiAutomizerObserver.java:153)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver.finish(BuchiAutomizerObserver.java:413)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.PluginConnector.runObserver(PluginConnector.java:168)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.PluginConnector.runTool(PluginConnector.java:151)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.PluginConnector.run(PluginConnector.java:128)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.executePluginConnector(ToolchainWalker.java:232)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.processPlugin(ToolchainWalker.java:226)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.walkUnprotected(ToolchainWalker.java:142)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.walk(ToolchainWalker.java:104)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainManager$Toolchain.processToolchain(ToolchainManager.java:317)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.toolchain.DefaultToolchainJob.run(DefaultToolchainJob.java:145)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)
[2020-11-24 22:46:40,456 INFO  L168              Benchmark]: Toolchain (without parser) took 898550.63 ms. Allocated memory was 1.0 GB in the beginning and 6.6 GB in the end (delta: 5.6 GB). Free memory was 935.2 MB in the beginning and 1.5 GB in the end (delta: -568.9 MB). Peak memory consumption was 6.4 GB. Max. memory is 15.3 GB.
[2020-11-24 22:46:40,457 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.16 ms. Allocated memory is still 1.0 GB. Free memory is still 956.7 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-24 22:46:40,457 INFO  L168              Benchmark]: Boogie Preprocessor took 126.05 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 913.7 MB in the end (delta: 21.5 MB). Peak memory consumption was 21.5 MB. Max. memory is 15.3 GB.
[2020-11-24 22:46:40,458 INFO  L168              Benchmark]: UtopiaSpecLang took 77.57 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 903.0 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-24 22:46:40,458 INFO  L168              Benchmark]: Boogie Printer took 20.58 ms. Allocated memory is still 1.0 GB. Free memory was 903.0 MB in the beginning and 897.6 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-24 22:46:40,459 INFO  L168              Benchmark]: RCFGBuilder took 1018.95 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 59.8 MB). Free memory was 897.6 MB in the beginning and 1.0 GB in the end (delta: -104.1 MB). Peak memory consumption was 187.3 MB. Max. memory is 15.3 GB.
[2020-11-24 22:46:40,459 INFO  L168              Benchmark]: UtopiaLTL2Aut took 37.91 ms. Allocated memory is still 1.1 GB. Free memory was 1.0 GB in the beginning and 988.9 MB in the end (delta: 12.8 MB). Peak memory consumption was 12.8 MB. Max. memory is 15.3 GB.
[2020-11-24 22:46:40,459 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1746.91 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 164.6 MB). Free memory was 988.9 MB in the beginning and 909.2 MB in the end (delta: 79.7 MB). Peak memory consumption was 496.3 MB. Max. memory is 15.3 GB.
[2020-11-24 22:46:40,460 INFO  L168              Benchmark]: BlockEncodingV2 took 197.93 ms. Allocated memory is still 1.3 GB. Free memory was 909.2 MB in the beginning and 803.6 MB in the end (delta: 105.6 MB). Peak memory consumption was 105.6 MB. Max. memory is 15.3 GB.
[2020-11-24 22:46:40,460 INFO  L168              Benchmark]: BuchiAutomizer took 895321.78 ms. Allocated memory was 1.3 GB in the beginning and 6.6 GB in the end (delta: 5.4 GB). Free memory was 803.6 MB in the beginning and 1.5 GB in the end (delta: -700.5 MB). Peak memory consumption was 6.1 GB. Max. memory is 15.3 GB.
[2020-11-24 22:46:40,463 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    8358 locations, 14611 edges
  - StatisticsResult: Encoded RCFG
    8302 locations, 14466 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.16 ms. Allocated memory is still 1.0 GB. Free memory is still 956.7 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 126.05 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 913.7 MB in the end (delta: 21.5 MB). Peak memory consumption was 21.5 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 77.57 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 903.0 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 20.58 ms. Allocated memory is still 1.0 GB. Free memory was 903.0 MB in the beginning and 897.6 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 1018.95 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 59.8 MB). Free memory was 897.6 MB in the beginning and 1.0 GB in the end (delta: -104.1 MB). Peak memory consumption was 187.3 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 37.91 ms. Allocated memory is still 1.1 GB. Free memory was 1.0 GB in the beginning and 988.9 MB in the end (delta: 12.8 MB). Peak memory consumption was 12.8 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1746.91 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 164.6 MB). Free memory was 988.9 MB in the beginning and 909.2 MB in the end (delta: 79.7 MB). Peak memory consumption was 496.3 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 197.93 ms. Allocated memory is still 1.3 GB. Free memory was 909.2 MB in the beginning and 803.6 MB in the end (delta: 105.6 MB). Peak memory consumption was 105.6 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 895321.78 ms. Allocated memory was 1.3 GB in the beginning and 6.6 GB in the end (delta: 5.4 GB). Free memory was 803.6 MB in the beginning and 1.5 GB in the end (delta: -700.5 MB). Peak memory consumption was 6.1 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    3566 locations, 4642 edges
  - StatisticsResult: BuchiProgram size
    8358 locations, 14611 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer:
  - ExceptionOrErrorResult: SMTLIBException: Timeout exceeded
    de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer: SMTLIBException: Timeout exceeded: de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator$IntegerInterpolator.interpolate(Interpolator.java:1432)
RESULT: Ultimate could not prove your program: Toolchain returned no result.
Completed graceful shutdown
