This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 14:27:01,377 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 14:27:01,378 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 14:27:01,388 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 14:27:01,389 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 14:27:01,389 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 14:27:01,390 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 14:27:01,392 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 14:27:01,393 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 14:27:01,394 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 14:27:01,394 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 14:27:01,394 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 14:27:01,395 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 14:27:01,396 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 14:27:01,396 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 14:27:01,397 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 14:27:01,398 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 14:27:01,399 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 14:27:01,400 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 14:27:01,401 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 14:27:01,402 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 14:27:01,402 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 14:27:01,404 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 14:27:01,404 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 14:27:01,404 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 14:27:01,405 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 14:27:01,405 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 14:27:01,406 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 14:27:01,406 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 14:27:01,406 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 14:27:01,407 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 14:27:01,407 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 14:27:01,407 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 14:27:01,408 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 14:27:01,409 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 14:27:01,409 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 14:27:01,409 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 14:27:01,409 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 14:27:01,409 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 14:27:01,410 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 14:27:01,411 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 14:27:01,411 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 14:27:01,419 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 14:27:01,419 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 14:27:01,420 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 14:27:01,420 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 14:27:01,420 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 14:27:01,420 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 14:27:01,420 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 14:27:01,420 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 14:27:01,420 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 14:27:01,420 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 14:27:01,421 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 14:27:01,421 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 14:27:01,421 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 14:27:01,421 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 14:27:01,421 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 14:27:01,421 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 14:27:01,421 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 14:27:01,421 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 14:27:01,421 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 14:27:01,421 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 14:27:01,422 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 14:27:01,422 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 14:27:01,422 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 14:27:01,422 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 14:27:01,422 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 14:27:01,422 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 14:27:01,442 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 14:27:01,453 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 14:27:01,456 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 14:27:01,457 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 14:27:01,458 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 14:27:01,458 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_totalsupply.bpl
[2020-11-25 14:27:01,459 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_totalsupply.bpl'
[2020-11-25 14:27:01,542 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 14:27:01,543 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 14:27:01,544 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 14:27:01,544 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 14:27:01,544 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 14:27:01,560 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:27:01" (1/1) ...
[2020-11-25 14:27:01,562 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:27:01" (1/1) ...
[2020-11-25 14:27:01,587 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:27:01" (1/1) ...
[2020-11-25 14:27:01,588 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:27:01" (1/1) ...
[2020-11-25 14:27:01,604 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:27:01" (1/1) ...
[2020-11-25 14:27:01,612 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:27:01" (1/1) ...
[2020-11-25 14:27:01,618 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:27:01" (1/1) ...
[2020-11-25 14:27:01,632 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 14:27:01,632 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 14:27:01,632 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 14:27:01,634 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 14:27:01,638 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:27:01" (1/1) ...
[2020-11-25 14:27:01,653 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(Ducks.totalSupply, _totalSupply_Ducks[this] >= 0 && _totalSupply_Ducks[this] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(Ducks.totalSupply, return == _totalSupply_Ducks[this] && _totalSupply_Ducks[this] == old(_totalSupply_Ducks[this]) && balances_Ducks[this] == old(balances_Ducks[this]) && allowed_Ducks[this] == old(allowed_Ducks[this]) && name_Ducks[this] == old(name_Ducks[this]) && symbol_Ducks[this] == old(symbol_Ducks[this]) && decimals_Ducks[this] == old(decimals_Ducks[this]))))
[2020-11-25 14:27:01,658 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(Ducks.totalSupply, _totalSupply_Ducks[this] >= 0 && _totalSupply_Ducks[this] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(Ducks.totalSupply, return == _totalSupply_Ducks[this] && _totalSupply_Ducks[this] == old(_totalSupply_Ducks[this]) && balances_Ducks[this] == old(balances_Ducks[this]) && allowed_Ducks[this] == old(allowed_Ducks[this]) && name_Ducks[this] == old(name_Ducks[this]) && symbol_Ducks[this] == old(symbol_Ducks[this]) && decimals_Ducks[this] == old(decimals_Ducks[this]))))
[2020-11-25 14:27:01,665 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(Ducks.totalSupply, _totalSupply_Ducks[this] >= 0 && _totalSupply_Ducks[this] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(Ducks.totalSupply, return == _totalSupply_Ducks[this] && _totalSupply_Ducks[this] == old(_totalSupply_Ducks[this]) && balances_Ducks[this] == old(balances_Ducks[this]) && allowed_Ducks[this] == old(allowed_Ducks[this]) && name_Ducks[this] == old(name_Ducks[this]) && symbol_Ducks[this] == old(symbol_Ducks[this]) && decimals_Ducks[this] == old(decimals_Ducks[this]))))
[2020-11-25 14:27:01,670 INFO  L636   opiaSpecLangObserver]: Parsed ( _totalSupply_Ducks[this]>=0 && _totalSupply_Ducks[this]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[COMPGEQ,ArrayAccessExpression[IdentifierExpression[_totalSupply_Ducks,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_Ducks>]]],IntegerLiteral[0]],BinaryExpression[COMPLT,ArrayAccessExpression[IdentifierExpression[_totalSupply_Ducks,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_Ducks>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 14:27:01,673 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( __ret_0_==_totalSupply_Ducks[this] && _totalSupply_Ducks[this]==( old(_totalSupply_Ducks[this]) ) ) && balances_Ducks[this]==( old(balances_Ducks[this]) ) ) && allowed_Ducks[this]==( old(allowed_Ducks[this]) ) ) && name_Ducks[this]==( old(name_Ducks[this]) ) ) && symbol_Ducks[this]==( old(symbol_Ducks[this]) ) ) && decimals_Ducks[this]==( old(decimals_Ducks[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[__ret_0_,<IMPLEMENTATION_OUTPARAM,totalSupply_Ducks>],ArrayAccessExpression[IdentifierExpression[_totalSupply_Ducks,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_Ducks>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_totalSupply_Ducks,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_Ducks>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_totalSupply_Ducks,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_Ducks>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[balances_Ducks,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_Ducks>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[balances_Ducks,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_Ducks>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[allowed_Ducks,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_Ducks>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[allowed_Ducks,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_Ducks>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[name_Ducks,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_Ducks>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[name_Ducks,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_Ducks>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[symbol_Ducks,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_Ducks>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[symbol_Ducks,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_Ducks>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[decimals_Ducks,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_Ducks>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[decimals_Ducks,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_Ducks>]]]]]]
[2020-11-25 14:27:01,676 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(Ducks.totalSupply, _totalSupply_Ducks[this] >= 0 && _totalSupply_Ducks[this] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(Ducks.totalSupply, return == _totalSupply_Ducks[this] && _totalSupply_Ducks[this] == old(_totalSupply_Ducks[this]) && balances_Ducks[this] == old(balances_Ducks[this]) && allowed_Ducks[this] == old(allowed_Ducks[this]) && name_Ducks[this] == old(name_Ducks[this]) && symbol_Ducks[this] == old(symbol_Ducks[this]) && decimals_Ducks[this] == old(decimals_Ducks[this]))))
[2020-11-25 14:27:01,677 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_totalSupply_Ducks0) ==> ( <>AP(success_totalSupply_Ducks0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 14:27:01,683 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:27:01 PropertyContainer
[2020-11-25 14:27:01,684 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 14:27:01,684 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 14:27:01,684 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 14:27:01,684 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 14:27:01,685 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:27:01" (1/2) ...
[2020-11-25 14:27:01,685 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 14:27:01,685 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 14:27:01,696 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:27:01" (2/2) ...
[2020-11-25 14:27:01,696 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 14:27:01,696 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 14:27:01,696 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 14:27:01,696 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 14:27:01,697 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:27:01" (1/2) ...
[2020-11-25 14:27:01,748 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 14:27:01,749 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface_NoBaseCtor__success
[2020-11-25 14:27:01,749 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface
[2020-11-25 14:27:01,749 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface
[2020-11-25 14:27:01,749 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20Interface
[2020-11-25 14:27:01,749 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20Interface
[2020-11-25 14:27:01,749 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20Interface
[2020-11-25 14:27:01,749 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Interface
[2020-11-25 14:27:01,749 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Interface
[2020-11-25 14:27:01,749 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Interface
[2020-11-25 14:27:01,749 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 14:27:01,750 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 14:27:01,750 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 14:27:01,750 INFO  L130     BoogieDeclarations]: Found specification of procedure safeAdd~uint256~uint256_SafeMath
[2020-11-25 14:27:01,750 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeAdd~uint256~uint256_SafeMath
[2020-11-25 14:27:01,750 INFO  L130     BoogieDeclarations]: Found specification of procedure safeSub~uint256~uint256_SafeMath
[2020-11-25 14:27:01,750 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeSub~uint256~uint256_SafeMath
[2020-11-25 14:27:01,750 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMul~uint256~uint256_SafeMath
[2020-11-25 14:27:01,750 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMul~uint256~uint256_SafeMath
[2020-11-25 14:27:01,750 INFO  L130     BoogieDeclarations]: Found specification of procedure safeDiv~uint256~uint256_SafeMath
[2020-11-25 14:27:01,750 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeDiv~uint256~uint256_SafeMath
[2020-11-25 14:27:01,751 INFO  L130     BoogieDeclarations]: Found specification of procedure Ducks_Ducks_NoBaseCtor__success
[2020-11-25 14:27:01,751 INFO  L130     BoogieDeclarations]: Found specification of procedure Ducks_Ducks
[2020-11-25 14:27:01,751 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ducks_Ducks
[2020-11-25 14:27:01,751 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_Ducks
[2020-11-25 14:27:01,751 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_Ducks
[2020-11-25 14:27:01,751 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_Ducks
[2020-11-25 14:27:01,751 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_Ducks
[2020-11-25 14:27:01,751 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_Ducks
[2020-11-25 14:27:01,751 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_Ducks
[2020-11-25 14:27:01,751 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_Ducks
[2020-11-25 14:27:01,751 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_Ducks
[2020-11-25 14:27:01,751 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_Ducks
[2020-11-25 14:27:01,752 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_Ducks
[2020-11-25 14:27:01,752 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_Ducks
[2020-11-25 14:27:01,752 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_Ducks
[2020-11-25 14:27:01,752 INFO  L130     BoogieDeclarations]: Found specification of procedure name_Ducks
[2020-11-25 14:27:01,752 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_Ducks
[2020-11-25 14:27:01,752 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_Ducks
[2020-11-25 14:27:01,752 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_Ducks
[2020-11-25 14:27:01,752 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_Ducks
[2020-11-25 14:27:01,752 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_Ducks
[2020-11-25 14:27:01,752 INFO  L130     BoogieDeclarations]: Found specification of procedure _totalSupply_Ducks
[2020-11-25 14:27:01,752 INFO  L138     BoogieDeclarations]: Found implementation of procedure _totalSupply_Ducks
[2020-11-25 14:27:01,752 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 14:27:01,752 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 14:27:01,753 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 14:27:01,753 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Interface
[2020-11-25 14:27:01,753 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Interface
[2020-11-25 14:27:01,753 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 14:27:01,753 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 14:27:01,753 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Ducks
[2020-11-25 14:27:01,753 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 14:27:01,753 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 14:27:01,753 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface_NoBaseCtor__fail
[2020-11-25 14:27:01,753 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface__success
[2020-11-25 14:27:01,753 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface__fail
[2020-11-25 14:27:01,753 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 14:27:01,753 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 14:27:01,753 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 14:27:01,754 INFO  L130     BoogieDeclarations]: Found specification of procedure safeAdd~uint256~uint256_SafeMath__success
[2020-11-25 14:27:01,754 INFO  L130     BoogieDeclarations]: Found specification of procedure safeAdd~uint256~uint256_SafeMath__fail
[2020-11-25 14:27:01,754 INFO  L130     BoogieDeclarations]: Found specification of procedure safeSub~uint256~uint256_SafeMath__success
[2020-11-25 14:27:01,754 INFO  L130     BoogieDeclarations]: Found specification of procedure safeSub~uint256~uint256_SafeMath__fail
[2020-11-25 14:27:01,754 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMul~uint256~uint256_SafeMath__success
[2020-11-25 14:27:01,754 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMul~uint256~uint256_SafeMath__fail
[2020-11-25 14:27:01,754 INFO  L130     BoogieDeclarations]: Found specification of procedure safeDiv~uint256~uint256_SafeMath__success
[2020-11-25 14:27:01,754 INFO  L130     BoogieDeclarations]: Found specification of procedure safeDiv~uint256~uint256_SafeMath__fail
[2020-11-25 14:27:01,754 INFO  L130     BoogieDeclarations]: Found specification of procedure Ducks_Ducks_NoBaseCtor__fail
[2020-11-25 14:27:01,754 INFO  L130     BoogieDeclarations]: Found specification of procedure Ducks_Ducks__success
[2020-11-25 14:27:01,754 INFO  L130     BoogieDeclarations]: Found specification of procedure Ducks_Ducks__fail
[2020-11-25 14:27:01,754 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_Ducks__success
[2020-11-25 14:27:01,754 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_Ducks__fail
[2020-11-25 14:27:01,755 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_Ducks__success
[2020-11-25 14:27:01,755 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_Ducks__fail
[2020-11-25 14:27:01,755 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_Ducks__success
[2020-11-25 14:27:01,755 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_Ducks__fail
[2020-11-25 14:27:01,755 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_Ducks__success
[2020-11-25 14:27:01,755 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_Ducks__fail
[2020-11-25 14:27:01,755 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_Ducks__success
[2020-11-25 14:27:01,755 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_Ducks__fail
[2020-11-25 14:27:01,755 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_Ducks__success
[2020-11-25 14:27:01,755 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_Ducks__fail
[2020-11-25 14:27:01,755 INFO  L130     BoogieDeclarations]: Found specification of procedure name_Ducks__success
[2020-11-25 14:27:01,755 INFO  L130     BoogieDeclarations]: Found specification of procedure name_Ducks__fail
[2020-11-25 14:27:01,755 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_Ducks__success
[2020-11-25 14:27:01,756 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_Ducks__fail
[2020-11-25 14:27:01,756 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_Ducks__success
[2020-11-25 14:27:01,756 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_Ducks__fail
[2020-11-25 14:27:01,756 INFO  L130     BoogieDeclarations]: Found specification of procedure _totalSupply_Ducks__success
[2020-11-25 14:27:01,756 INFO  L130     BoogieDeclarations]: Found specification of procedure _totalSupply_Ducks__fail
[2020-11-25 14:27:01,756 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 14:27:01,756 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 14:27:01,756 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 14:27:01,756 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 14:27:01,756 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 14:27:01,756 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface_NoBaseCtor__fail
[2020-11-25 14:27:01,756 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface_NoBaseCtor__success
[2020-11-25 14:27:01,756 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface__fail
[2020-11-25 14:27:01,757 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface__success
[2020-11-25 14:27:01,757 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 14:27:01,757 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 14:27:01,757 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 14:27:01,757 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 14:27:01,757 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeAdd~uint256~uint256_SafeMath__fail
[2020-11-25 14:27:01,757 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeAdd~uint256~uint256_SafeMath__success
[2020-11-25 14:27:01,757 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeSub~uint256~uint256_SafeMath__fail
[2020-11-25 14:27:01,757 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeSub~uint256~uint256_SafeMath__success
[2020-11-25 14:27:01,757 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMul~uint256~uint256_SafeMath__fail
[2020-11-25 14:27:01,757 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMul~uint256~uint256_SafeMath__success
[2020-11-25 14:27:01,757 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeDiv~uint256~uint256_SafeMath__fail
[2020-11-25 14:27:01,757 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeDiv~uint256~uint256_SafeMath__success
[2020-11-25 14:27:01,758 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ducks_Ducks_NoBaseCtor__fail
[2020-11-25 14:27:01,758 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ducks_Ducks_NoBaseCtor__success
[2020-11-25 14:27:01,758 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ducks_Ducks__fail
[2020-11-25 14:27:01,758 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ducks_Ducks__success
[2020-11-25 14:27:01,758 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_Ducks__fail
[2020-11-25 14:27:01,758 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_Ducks__success
[2020-11-25 14:27:01,758 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_Ducks__fail
[2020-11-25 14:27:01,758 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_Ducks__success
[2020-11-25 14:27:01,758 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_Ducks__fail
[2020-11-25 14:27:01,758 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_Ducks__success
[2020-11-25 14:27:01,758 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_Ducks__fail
[2020-11-25 14:27:01,758 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_Ducks__success
[2020-11-25 14:27:01,758 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_Ducks__fail
[2020-11-25 14:27:01,759 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_Ducks__success
[2020-11-25 14:27:01,759 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_Ducks__fail
[2020-11-25 14:27:01,759 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_Ducks__success
[2020-11-25 14:27:01,759 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_Ducks__fail
[2020-11-25 14:27:01,759 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_Ducks__success
[2020-11-25 14:27:01,759 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_Ducks__fail
[2020-11-25 14:27:01,759 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_Ducks__success
[2020-11-25 14:27:01,759 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_Ducks__fail
[2020-11-25 14:27:01,759 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_Ducks__success
[2020-11-25 14:27:01,759 INFO  L138     BoogieDeclarations]: Found implementation of procedure _totalSupply_Ducks__fail
[2020-11-25 14:27:01,759 INFO  L138     BoogieDeclarations]: Found implementation of procedure _totalSupply_Ducks__success
[2020-11-25 14:27:01,759 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 14:27:01,760 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 14:27:01,760 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 14:27:01,760 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 14:27:01,760 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 14:27:01,760 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 14:27:01,760 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Interface
[2020-11-25 14:27:01,760 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Interface
[2020-11-25 14:27:01,760 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 14:27:01,760 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 14:27:01,760 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Ducks
[2020-11-25 14:27:01,760 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 14:27:01,760 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 14:27:01,761 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 14:27:02,102 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 14:27:02,102 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 14:27:02,103 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 14:27:02,270 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 14:27:02,270 INFO  L286             CfgBuilder]: Removed 3 assue(true) statements.
[2020-11-25 14:27:02,272 INFO  L202        PluginConnector]: Adding new model Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_totalsupply.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:27:02 BoogieIcfgContainer
[2020-11-25 14:27:02,272 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:27:01" (2/2) ...
[2020-11-25 14:27:02,272 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 14:27:02,273 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@4046601 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:27:02, skipping insertion in model container
[2020-11-25 14:27:02,273 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 14:27:02,273 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 14:27:02,273 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 14:27:02,274 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 14:27:02,275 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:27:01" (1/3) ...
[2020-11-25 14:27:02,275 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@6c334622 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:27:02, skipping insertion in model container
[2020-11-25 14:27:02,275 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:27:01" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 14:27:02,309 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:27:02 NWAContainer
[2020-11-25 14:27:02,309 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 14:27:02,310 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 14:27:02,310 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 14:27:02,311 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 14:27:02,311 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_totalsupply.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:27:02" (3/4) ...
[2020-11-25 14:27:02,312 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@62a90156 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:27:02, skipping insertion in model container
[2020-11-25 14:27:02,312 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:27:02" (4/4) ...
[2020-11-25 14:27:02,315 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 14:27:02,318 INFO  L110   BuchiProductObserver]: Initial RCFG 1049 locations, 1322 edges
[2020-11-25 14:27:02,318 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 14:27:02,327 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 14:27:03,300 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 14:27:03,303 INFO  L110   BuchiProductObserver]: BuchiProgram size 2488 locations, 4278 edges
[2020-11-25 14:27:03,303 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:27:03 BoogieIcfgContainer
[2020-11-25 14:27:03,303 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 14:27:03,304 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 14:27:03,304 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 14:27:03,305 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 14:27:03,306 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:27:03" (1/1) ...
[2020-11-25 14:27:03,376 INFO  L313           BlockEncoder]: Initial Icfg 2488 locations, 4278 edges
[2020-11-25 14:27:03,376 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 14:27:03,377 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 14:27:03,377 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 14:27:03,378 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 14:27:03,389 INFO  L70    emoveInfeasibleEdges]: Removed 66 edges and 9 locations because of local infeasibility
[2020-11-25 14:27:03,397 INFO  L70        RemoveSinkStates]: Removed 32 edges and 21 locations by removing sink states
[2020-11-25 14:27:03,406 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 14:27:03,411 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 14:27:03,414 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 14:27:03,415 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 14:27:03,419 INFO  L313           BlockEncoder]: Encoded RCFG 2444 locations, 4160 edges
[2020-11-25 14:27:03,420 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 02:27:03 BasicIcfg
[2020-11-25 14:27:03,420 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 14:27:03,420 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 14:27:03,420 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 14:27:03,423 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 14:27:03,423 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 14:27:03,423 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:27:01" (1/6) ...
[2020-11-25 14:27:03,425 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@59da926e and model type Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_totalsupply.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 02:27:03, skipping insertion in model container
[2020-11-25 14:27:03,425 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 14:27:03,425 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:27:01" (2/6) ...
[2020-11-25 14:27:03,426 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@59da926e and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 02:27:03, skipping insertion in model container
[2020-11-25 14:27:03,426 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 14:27:03,426 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_totalsupply.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:27:02" (3/6) ...
[2020-11-25 14:27:03,426 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@59da926e and model type Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_totalsupply.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 02:27:03, skipping insertion in model container
[2020-11-25 14:27:03,426 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 14:27:03,426 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:27:02" (4/6) ...
[2020-11-25 14:27:03,426 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@59da926e and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 02:27:03, skipping insertion in model container
[2020-11-25 14:27:03,426 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 14:27:03,427 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:27:03" (5/6) ...
[2020-11-25 14:27:03,427 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@59da926e and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 02:27:03, skipping insertion in model container
[2020-11-25 14:27:03,427 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 14:27:03,427 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 02:27:03" (6/6) ...
[2020-11-25 14:27:03,428 INFO  L404   chiAutomizerObserver]: Analyzing ICFG Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_totalsupply.bpl_BEv2
[2020-11-25 14:27:03,468 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 14:27:03,468 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 14:27:03,468 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 14:27:03,469 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 14:27:03,469 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 14:27:03,469 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 14:27:03,469 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 14:27:03,469 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 14:27:03,469 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 14:27:03,504 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2444 states.
[2020-11-25 14:27:03,556 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:27:03,556 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:27:03,557 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:27:03,570 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:27:03,570 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:27:03,570 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 14:27:03,571 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2444 states.
[2020-11-25 14:27:03,613 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:27:03,613 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:27:03,613 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:27:03,615 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:27:03,615 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_totalSupply_Ducks0 := false;
[L2]                 call_totalSupply_Ducks0 := false;
[L2]     CALL        call main();
[L2853]              assume null == 0;
[L2854]  CALL        call this := FreshRefGenerator__success();
[L1249]              havoc newRef;
[L1250]              assume Alloc[newRef] == false;
[L1251]              Alloc[newRef] := true;
[L1252]              assume newRef != null;
[L2854]  RET         call this := FreshRefGenerator__success();
[L2855]              assume now >= 0;
[L2856]              assume DType[this] == Ducks;
[L2857]              assume msgvalue_MSG == 0;
[L2858]              gas := gas - 53000;
[L2859]  CALL        call Ducks_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L398]               havoc __exception;
[L399]               revert := false;
[L400]   COND FALSE  !(__exception)
[L421]   CALL        call Ducks_Ducks__success(this, msgsender_MSG, msgvalue_MSG);
[L1456]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1281]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1266]              assume msgsender_MSG != null;
[L1267]              Balance[this] := 0;
[L1281]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1282]  COND FALSE  !(revert)
[L1456]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1457]  COND TRUE   revert
[L421]   RET         call Ducks_Ducks__success(this, msgsender_MSG, msgvalue_MSG);
[L422]               assume !revert && gas >= 0;
[L2859]  RET         call Ducks_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L2860]              assume !revert && gas >= 0;

Loop:
[L2863]  CALL        call CorralChoice_Ducks(this);
[L2704]              havoc msgsender_MSG;
[L2705]              havoc msgvalue_MSG;
[L2706]              havoc choice;
[L2707]              havoc __ret_0_totalSupply;
[L2708]              havoc tokenOwner_s247;
[L2709]              havoc balance_s247;
[L2710]              havoc tokenOwner_s263;
[L2711]              havoc spender_s263;
[L2712]              havoc remaining_s263;
[L2713]              havoc to_s334;
[L2714]              havoc tokens_s334;
[L2715]              havoc success_s334;
[L2716]              havoc spender_s291;
[L2717]              havoc tokens_s291;
[L2718]              havoc success_s291;
[L2719]              havoc from_s393;
[L2720]              havoc to_s393;
[L2721]              havoc tokens_s393;
[L2722]              havoc success_s393;
[L2723]              havoc a_s90;
[L2724]              havoc b_s90;
[L2725]              havoc c_s90;
[L2726]              havoc a_s112;
[L2727]              havoc b_s112;
[L2728]              havoc c_s112;
[L2729]              havoc a_s140;
[L2730]              havoc b_s140;
[L2731]              havoc c_s140;
[L2732]              havoc a_s162;
[L2733]              havoc b_s162;
[L2734]              havoc c_s162;
[L2735]              havoc __ret_0_name;
[L2736]              havoc __ret_0_symbol;
[L2737]              havoc __ret_0_decimals;
[L2738]              havoc __ret_0__totalSupply;
[L2739]              havoc tmpNow;
[L2740]              havoc gas;
[L2741]              assume gas > 4000000 && gas <= 8000000;
[L2742]              tmpNow := now;
[L2743]              havoc now;
[L2744]              assume now > tmpNow;
[L2745]              assume msgsender_MSG != null;
[L2746]              assume DType[msgsender_MSG] != ERC20Interface;
[L2747]              assume DType[msgsender_MSG] != SafeMath;
[L2748]              assume DType[msgsender_MSG] != Ducks;
[L2749]              Alloc[msgsender_MSG] := true;
[L2750]  COND TRUE   choice == 14
[L2751]              gas := gas - 21000;
[L2752]  COND FALSE  !(gas >= 0)
[L2863]  RET         call CorralChoice_Ducks(this);

[2020-11-25 14:27:03,641 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:27:03,641 INFO  L82        PathProgramCache]: Analyzing trace with hash 731300628, now seen corresponding path program 1 times
[2020-11-25 14:27:03,646 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:27:03,668 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:27:03,714 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 14:27:03,716 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 14:27:03,716 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 14:27:03,720 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:27:03,858 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 14:27:03,859 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 14:27:03,860 INFO  L87              Difference]: Start difference. First operand 2444 states. Second operand 4 states.
[2020-11-25 14:27:04,148 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:27:04,148 INFO  L93              Difference]: Finished difference Result 1722 states and 1879 transitions.
[2020-11-25 14:27:04,149 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 14:27:04,150 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1722 states and 1879 transitions.
[2020-11-25 14:27:04,160 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:27:04,173 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1722 states to 1722 states and 1879 transitions.
[2020-11-25 14:27:04,174 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-25 14:27:04,176 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 597
[2020-11-25 14:27:04,177 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1722 states and 1879 transitions.
[2020-11-25 14:27:04,182 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:27:04,182 INFO  L728         BuchiCegarLoop]: Abstraction has 1722 states and 1879 transitions.
[2020-11-25 14:27:04,196 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1722 states and 1879 transitions.
[2020-11-25 14:27:04,231 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1722 to 1722.
[2020-11-25 14:27:04,232 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1722 states.
[2020-11-25 14:27:04,239 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1722 states to 1722 states and 1879 transitions.
[2020-11-25 14:27:04,240 INFO  L751         BuchiCegarLoop]: Abstraction has 1722 states and 1879 transitions.
[2020-11-25 14:27:04,240 INFO  L631         BuchiCegarLoop]: Abstraction has 1722 states and 1879 transitions.
[2020-11-25 14:27:04,240 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 14:27:04,241 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1722 states and 1879 transitions.
[2020-11-25 14:27:04,248 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:27:04,248 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:27:04,248 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:27:04,250 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:27:04,250 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_totalSupply_Ducks0 := false;
[L2]                 call_totalSupply_Ducks0 := false;
[L2]     CALL        call main();
[L2853]              assume null == 0;
[L2854]  CALL        call this := FreshRefGenerator__success();
[L1249]              havoc newRef;
[L1250]              assume Alloc[newRef] == false;
[L1251]              Alloc[newRef] := true;
[L1252]              assume newRef != null;
[L2854]  RET         call this := FreshRefGenerator__success();
[L2855]              assume now >= 0;
[L2856]              assume DType[this] == Ducks;
[L2857]              assume msgvalue_MSG == 0;
[L2858]              gas := gas - 53000;
[L2859]  CALL        call Ducks_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L398]               havoc __exception;
[L399]               revert := false;
[L400]   COND FALSE  !(__exception)
[L421]   CALL        call Ducks_Ducks__success(this, msgsender_MSG, msgvalue_MSG);
[L1456]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1281]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1266]              assume msgsender_MSG != null;
[L1267]              Balance[this] := 0;
[L1281]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1282]  COND FALSE  !(revert)
[L1456]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1457]  COND TRUE   revert
[L421]   RET         call Ducks_Ducks__success(this, msgsender_MSG, msgvalue_MSG);
[L422]               assume !revert && gas >= 0;
[L2859]  RET         call Ducks_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L2860]              assume !revert && gas >= 0;
[L2863]  CALL        call CorralChoice_Ducks(this);
[L2704]              havoc msgsender_MSG;
[L2705]              havoc msgvalue_MSG;
[L2706]              havoc choice;
[L2707]              havoc __ret_0_totalSupply;
[L2708]              havoc tokenOwner_s247;
[L2709]              havoc balance_s247;
[L2710]              havoc tokenOwner_s263;
[L2711]              havoc spender_s263;
[L2712]              havoc remaining_s263;
[L2713]              havoc to_s334;
[L2714]              havoc tokens_s334;
[L2715]              havoc success_s334;
[L2716]              havoc spender_s291;
[L2717]              havoc tokens_s291;
[L2718]              havoc success_s291;
[L2719]              havoc from_s393;
[L2720]              havoc to_s393;
[L2721]              havoc tokens_s393;
[L2722]              havoc success_s393;
[L2723]              havoc a_s90;
[L2724]              havoc b_s90;
[L2725]              havoc c_s90;
[L2726]              havoc a_s112;
[L2727]              havoc b_s112;
[L2728]              havoc c_s112;
[L2729]              havoc a_s140;
[L2730]              havoc b_s140;
[L2731]              havoc c_s140;
[L2732]              havoc a_s162;
[L2733]              havoc b_s162;
[L2734]              havoc c_s162;
[L2735]              havoc __ret_0_name;
[L2736]              havoc __ret_0_symbol;
[L2737]              havoc __ret_0_decimals;
[L2738]              havoc __ret_0__totalSupply;
[L2739]              havoc tmpNow;
[L2740]              havoc gas;
[L2741]              assume gas > 4000000 && gas <= 8000000;
[L2742]              tmpNow := now;
[L2743]              havoc now;
[L2744]              assume now > tmpNow;
[L2745]              assume msgsender_MSG != null;
[L2746]              assume DType[msgsender_MSG] != ERC20Interface;
[L2747]              assume DType[msgsender_MSG] != SafeMath;
[L2748]              assume DType[msgsender_MSG] != Ducks;
[L2749]              Alloc[msgsender_MSG] := true;
[L2750]  COND TRUE   choice == 14
[L2751]              gas := gas - 21000;
[L2752]  COND TRUE   gas >= 0
[L2753]              assume msgvalue_MSG == 0;
[L2754]  CALL        call __ret_0_totalSupply := totalSupply_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _totalSupply_Ducks[this] >= 0 && _totalSupply_Ducks[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_totalSupply_Ducks0 := true;
[L2]                 call_totalSupply_Ducks0 := false;
[L2]                 revert := revert_hold;
[L448]               havoc __exception;
[L449]               revert := false;
[L450]   COND FALSE  !(__exception)
[L471]   CALL        call __ret_0_ := totalSupply_Ducks__success(this, msgsender_MSG, msgvalue_MSG);
[L1481]              __var_1 := null;
[L1482]              __ret_0_ := (_totalSupply_Ducks[this] - balances_Ducks[this][null]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L471]   RET         call __ret_0_ := totalSupply_Ducks__success(this, msgsender_MSG, msgvalue_MSG);
[L472]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((__ret_0_ == _totalSupply_Ducks[this] && _totalSupply_Ducks[this] == old(_totalSupply_Ducks[this])) && balances_Ducks[this] == old(balances_Ducks[this])) && allowed_Ducks[this] == old(allowed_Ducks[this])) && name_Ducks[this] == old(name_Ducks[this])) && symbol_Ducks[this] == old(symbol_Ducks[this])) && decimals_Ducks[this] == old(decimals_Ducks[this]));
[L2]                 revert := revert_hold;
[L2754]  RET         call __ret_0_totalSupply := totalSupply_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L2863]  RET         call CorralChoice_Ducks(this);

Loop:
[L2863]  CALL        call CorralChoice_Ducks(this);
[L2704]              havoc msgsender_MSG;
[L2705]              havoc msgvalue_MSG;
[L2706]              havoc choice;
[L2707]              havoc __ret_0_totalSupply;
[L2708]              havoc tokenOwner_s247;
[L2709]              havoc balance_s247;
[L2710]              havoc tokenOwner_s263;
[L2711]              havoc spender_s263;
[L2712]              havoc remaining_s263;
[L2713]              havoc to_s334;
[L2714]              havoc tokens_s334;
[L2715]              havoc success_s334;
[L2716]              havoc spender_s291;
[L2717]              havoc tokens_s291;
[L2718]              havoc success_s291;
[L2719]              havoc from_s393;
[L2720]              havoc to_s393;
[L2721]              havoc tokens_s393;
[L2722]              havoc success_s393;
[L2723]              havoc a_s90;
[L2724]              havoc b_s90;
[L2725]              havoc c_s90;
[L2726]              havoc a_s112;
[L2727]              havoc b_s112;
[L2728]              havoc c_s112;
[L2729]              havoc a_s140;
[L2730]              havoc b_s140;
[L2731]              havoc c_s140;
[L2732]              havoc a_s162;
[L2733]              havoc b_s162;
[L2734]              havoc c_s162;
[L2735]              havoc __ret_0_name;
[L2736]              havoc __ret_0_symbol;
[L2737]              havoc __ret_0_decimals;
[L2738]              havoc __ret_0__totalSupply;
[L2739]              havoc tmpNow;
[L2740]              havoc gas;
[L2741]              assume gas > 4000000 && gas <= 8000000;
[L2742]              tmpNow := now;
[L2743]              havoc now;
[L2744]              assume now > tmpNow;
[L2745]              assume msgsender_MSG != null;
[L2746]              assume DType[msgsender_MSG] != ERC20Interface;
[L2747]              assume DType[msgsender_MSG] != SafeMath;
[L2748]              assume DType[msgsender_MSG] != Ducks;
[L2749]              Alloc[msgsender_MSG] := true;
[L2750]  COND TRUE   choice == 14
[L2751]              gas := gas - 21000;
[L2752]  COND TRUE   gas >= 0
[L2753]              assume msgvalue_MSG == 0;
[L2754]  CALL        call __ret_0_totalSupply := totalSupply_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _totalSupply_Ducks[this] >= 0 && _totalSupply_Ducks[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_totalSupply_Ducks0 := true;
[L2]                 call_totalSupply_Ducks0 := false;
[L2]                 revert := revert_hold;
[L448]               havoc __exception;
[L449]               revert := false;
[L450]   COND FALSE  !(__exception)
[L471]   CALL        call __ret_0_ := totalSupply_Ducks__success(this, msgsender_MSG, msgvalue_MSG);
[L1481]              __var_1 := null;
[L1482]              __ret_0_ := (_totalSupply_Ducks[this] - balances_Ducks[this][null]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L471]   RET         call __ret_0_ := totalSupply_Ducks__success(this, msgsender_MSG, msgvalue_MSG);
[L472]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((__ret_0_ == _totalSupply_Ducks[this] && _totalSupply_Ducks[this] == old(_totalSupply_Ducks[this])) && balances_Ducks[this] == old(balances_Ducks[this])) && allowed_Ducks[this] == old(allowed_Ducks[this])) && name_Ducks[this] == old(name_Ducks[this])) && symbol_Ducks[this] == old(symbol_Ducks[this])) && decimals_Ducks[this] == old(decimals_Ducks[this]));
[L2]                 revert := revert_hold;
[L2754]  RET         call __ret_0_totalSupply := totalSupply_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L2863]  RET         call CorralChoice_Ducks(this);

[2020-11-25 14:27:04,255 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:27:04,255 INFO  L82        PathProgramCache]: Analyzing trace with hash 523550170, now seen corresponding path program 1 times
[2020-11-25 14:27:04,256 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:27:04,265 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:27:04,284 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 14:27:04,285 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 14:27:04,285 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 14:27:04,286 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:27:04,286 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 14:27:04,286 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 14:27:04,286 INFO  L87              Difference]: Start difference. First operand 1722 states and 1879 transitions. cyclomatic complexity: 159 Second operand 4 states.
[2020-11-25 14:27:04,546 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:27:04,547 INFO  L93              Difference]: Finished difference Result 2596 states and 2949 transitions.
[2020-11-25 14:27:04,547 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 14:27:04,547 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2596 states and 2949 transitions.
[2020-11-25 14:27:04,558 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-25 14:27:04,570 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2596 states to 2520 states and 2867 transitions.
[2020-11-25 14:27:04,570 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 833
[2020-11-25 14:27:04,571 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 838
[2020-11-25 14:27:04,571 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2520 states and 2867 transitions.
[2020-11-25 14:27:04,575 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:27:04,575 INFO  L728         BuchiCegarLoop]: Abstraction has 2520 states and 2867 transitions.
[2020-11-25 14:27:04,577 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2520 states and 2867 transitions.
[2020-11-25 14:27:04,603 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2520 to 1873.
[2020-11-25 14:27:04,603 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1873 states.
[2020-11-25 14:27:04,607 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1873 states to 1873 states and 2032 transitions.
[2020-11-25 14:27:04,607 INFO  L751         BuchiCegarLoop]: Abstraction has 1873 states and 2032 transitions.
[2020-11-25 14:27:04,607 INFO  L631         BuchiCegarLoop]: Abstraction has 1873 states and 2032 transitions.
[2020-11-25 14:27:04,607 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 14:27:04,607 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1873 states and 2032 transitions.
[2020-11-25 14:27:04,612 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 14:27:04,612 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:27:04,612 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:27:04,614 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:27:04,614 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_totalSupply_Ducks0 := false;
[L2]                 call_totalSupply_Ducks0 := false;
[L2]     CALL        call main();
[L2853]              assume null == 0;
[L2854]  CALL        call this := FreshRefGenerator__success();
[L1249]              havoc newRef;
[L1250]              assume Alloc[newRef] == false;
[L1251]              Alloc[newRef] := true;
[L1252]              assume newRef != null;
[L2854]  RET         call this := FreshRefGenerator__success();
[L2855]              assume now >= 0;
[L2856]              assume DType[this] == Ducks;
[L2857]              assume msgvalue_MSG == 0;
[L2858]              gas := gas - 53000;
[L2859]  CALL        call Ducks_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L398]               havoc __exception;
[L399]               revert := false;
[L400]   COND FALSE  !(__exception)
[L421]   CALL        call Ducks_Ducks__success(this, msgsender_MSG, msgvalue_MSG);
[L1456]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1281]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1266]              assume msgsender_MSG != null;
[L1267]              Balance[this] := 0;
[L1281]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1282]  COND FALSE  !(revert)
[L1456]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1457]  COND FALSE  !(revert)
[L1460]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1313]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1298]              assume msgsender_MSG != null;
[L1299]              Balance[this] := 0;
[L1313]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1314]  COND FALSE  !(revert)
[L1460]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1461]  COND FALSE  !(revert)
[L1464]  CALL        call Ducks_Ducks_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1417]              assume msgsender_MSG != null;
[L1418]              Balance[this] := 0;
[L1419]              name_Ducks[this] := 560717954;
[L1420]              symbol_Ducks[this] := 560717954;
[L1421]              decimals_Ducks[this] := 0;
[L1422]              _totalSupply_Ducks[this] := 0;
[L1423]              balances_Ducks[this] := zeroRefintArr();
[L1424]              sum_balances0[this] := 0;
[L1425]              allowed_Ducks[this] := zeroRefRefintArr();
[L1426]              sum_allowed1[this] := 0;
[L1428]              name_Ducks[this] := 1576131613;
[L1429]              symbol_Ducks[this] := -1943651461;
[L1430]              decimals_Ducks[this] := 18;
[L1431]              _totalSupply_Ducks[this] := 1500000000000000000000000;
[L1432]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][msgsender_MSG];
[L1433]              balances_Ducks[this][msgsender_MSG] := _totalSupply_Ducks[this];
[L1434]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][msgsender_MSG];
[L1435]              assert { :EventEmitted "Transfer_Ducks" } true;
[L1464]  RET         call Ducks_Ducks_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1465]  COND FALSE  !(revert)
[L421]   RET         call Ducks_Ducks__success(this, msgsender_MSG, msgvalue_MSG);
[L422]               assume !revert && gas >= 0;
[L2859]  RET         call Ducks_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L2860]              assume !revert && gas >= 0;
[L2863]  CALL        call CorralChoice_Ducks(this);
[L2704]              havoc msgsender_MSG;
[L2705]              havoc msgvalue_MSG;
[L2706]              havoc choice;
[L2707]              havoc __ret_0_totalSupply;
[L2708]              havoc tokenOwner_s247;
[L2709]              havoc balance_s247;
[L2710]              havoc tokenOwner_s263;
[L2711]              havoc spender_s263;
[L2712]              havoc remaining_s263;
[L2713]              havoc to_s334;
[L2714]              havoc tokens_s334;
[L2715]              havoc success_s334;
[L2716]              havoc spender_s291;
[L2717]              havoc tokens_s291;
[L2718]              havoc success_s291;
[L2719]              havoc from_s393;
[L2720]              havoc to_s393;
[L2721]              havoc tokens_s393;
[L2722]              havoc success_s393;
[L2723]              havoc a_s90;
[L2724]              havoc b_s90;
[L2725]              havoc c_s90;
[L2726]              havoc a_s112;
[L2727]              havoc b_s112;
[L2728]              havoc c_s112;
[L2729]              havoc a_s140;
[L2730]              havoc b_s140;
[L2731]              havoc c_s140;
[L2732]              havoc a_s162;
[L2733]              havoc b_s162;
[L2734]              havoc c_s162;
[L2735]              havoc __ret_0_name;
[L2736]              havoc __ret_0_symbol;
[L2737]              havoc __ret_0_decimals;
[L2738]              havoc __ret_0__totalSupply;
[L2739]              havoc tmpNow;
[L2740]              havoc gas;
[L2741]              assume gas > 4000000 && gas <= 8000000;
[L2742]              tmpNow := now;
[L2743]              havoc now;
[L2744]              assume now > tmpNow;
[L2745]              assume msgsender_MSG != null;
[L2746]              assume DType[msgsender_MSG] != ERC20Interface;
[L2747]              assume DType[msgsender_MSG] != SafeMath;
[L2748]              assume DType[msgsender_MSG] != Ducks;
[L2749]              Alloc[msgsender_MSG] := true;
[L2750]  COND TRUE   choice == 14
[L2751]              gas := gas - 21000;
[L2752]  COND TRUE   gas >= 0
[L2753]              assume msgvalue_MSG == 0;
[L2754]  CALL        call __ret_0_totalSupply := totalSupply_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _totalSupply_Ducks[this] >= 0 && _totalSupply_Ducks[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_totalSupply_Ducks0 := true;
[L2]                 call_totalSupply_Ducks0 := false;
[L2]                 revert := revert_hold;
[L448]               havoc __exception;
[L449]               revert := false;
[L450]   COND FALSE  !(__exception)
[L471]   CALL        call __ret_0_ := totalSupply_Ducks__success(this, msgsender_MSG, msgvalue_MSG);
[L1481]              __var_1 := null;
[L1482]              __ret_0_ := (_totalSupply_Ducks[this] - balances_Ducks[this][null]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L471]   RET         call __ret_0_ := totalSupply_Ducks__success(this, msgsender_MSG, msgvalue_MSG);
[L472]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((__ret_0_ == _totalSupply_Ducks[this] && _totalSupply_Ducks[this] == old(_totalSupply_Ducks[this])) && balances_Ducks[this] == old(balances_Ducks[this])) && allowed_Ducks[this] == old(allowed_Ducks[this])) && name_Ducks[this] == old(name_Ducks[this])) && symbol_Ducks[this] == old(symbol_Ducks[this])) && decimals_Ducks[this] == old(decimals_Ducks[this]));
[L2]                 revert := revert_hold;
[L2754]  RET         call __ret_0_totalSupply := totalSupply_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L2863]  RET         call CorralChoice_Ducks(this);

Loop:
[L2863]  CALL        call CorralChoice_Ducks(this);
[L2704]              havoc msgsender_MSG;
[L2705]              havoc msgvalue_MSG;
[L2706]              havoc choice;
[L2707]              havoc __ret_0_totalSupply;
[L2708]              havoc tokenOwner_s247;
[L2709]              havoc balance_s247;
[L2710]              havoc tokenOwner_s263;
[L2711]              havoc spender_s263;
[L2712]              havoc remaining_s263;
[L2713]              havoc to_s334;
[L2714]              havoc tokens_s334;
[L2715]              havoc success_s334;
[L2716]              havoc spender_s291;
[L2717]              havoc tokens_s291;
[L2718]              havoc success_s291;
[L2719]              havoc from_s393;
[L2720]              havoc to_s393;
[L2721]              havoc tokens_s393;
[L2722]              havoc success_s393;
[L2723]              havoc a_s90;
[L2724]              havoc b_s90;
[L2725]              havoc c_s90;
[L2726]              havoc a_s112;
[L2727]              havoc b_s112;
[L2728]              havoc c_s112;
[L2729]              havoc a_s140;
[L2730]              havoc b_s140;
[L2731]              havoc c_s140;
[L2732]              havoc a_s162;
[L2733]              havoc b_s162;
[L2734]              havoc c_s162;
[L2735]              havoc __ret_0_name;
[L2736]              havoc __ret_0_symbol;
[L2737]              havoc __ret_0_decimals;
[L2738]              havoc __ret_0__totalSupply;
[L2739]              havoc tmpNow;
[L2740]              havoc gas;
[L2741]              assume gas > 4000000 && gas <= 8000000;
[L2742]              tmpNow := now;
[L2743]              havoc now;
[L2744]              assume now > tmpNow;
[L2745]              assume msgsender_MSG != null;
[L2746]              assume DType[msgsender_MSG] != ERC20Interface;
[L2747]              assume DType[msgsender_MSG] != SafeMath;
[L2748]              assume DType[msgsender_MSG] != Ducks;
[L2749]              Alloc[msgsender_MSG] := true;
[L2750]  COND TRUE   choice == 14
[L2751]              gas := gas - 21000;
[L2752]  COND TRUE   gas >= 0
[L2753]              assume msgvalue_MSG == 0;
[L2754]  CALL        call __ret_0_totalSupply := totalSupply_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _totalSupply_Ducks[this] >= 0 && _totalSupply_Ducks[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_totalSupply_Ducks0 := true;
[L2]                 call_totalSupply_Ducks0 := false;
[L2]                 revert := revert_hold;
[L448]               havoc __exception;
[L449]               revert := false;
[L450]   COND FALSE  !(__exception)
[L471]   CALL        call __ret_0_ := totalSupply_Ducks__success(this, msgsender_MSG, msgvalue_MSG);
[L1481]              __var_1 := null;
[L1482]              __ret_0_ := (_totalSupply_Ducks[this] - balances_Ducks[this][null]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L471]   RET         call __ret_0_ := totalSupply_Ducks__success(this, msgsender_MSG, msgvalue_MSG);
[L472]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((__ret_0_ == _totalSupply_Ducks[this] && _totalSupply_Ducks[this] == old(_totalSupply_Ducks[this])) && balances_Ducks[this] == old(balances_Ducks[this])) && allowed_Ducks[this] == old(allowed_Ducks[this])) && name_Ducks[this] == old(name_Ducks[this])) && symbol_Ducks[this] == old(symbol_Ducks[this])) && decimals_Ducks[this] == old(decimals_Ducks[this]));
[L2]                 revert := revert_hold;
[L2754]  RET         call __ret_0_totalSupply := totalSupply_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L2863]  RET         call CorralChoice_Ducks(this);

[2020-11-25 14:27:04,617 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:27:04,617 INFO  L82        PathProgramCache]: Analyzing trace with hash -720247449, now seen corresponding path program 1 times
[2020-11-25 14:27:04,618 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:27:04,638 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:27:04,810 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 14:27:04,810 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 14:27:04,810 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [14] imperfect sequences [] total 14
[2020-11-25 14:27:04,810 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:27:04,810 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 15 interpolants.
[2020-11-25 14:27:04,810 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=29, Invalid=181, Unknown=0, NotChecked=0, Total=210
[2020-11-25 14:27:04,811 INFO  L87              Difference]: Start difference. First operand 1873 states and 2032 transitions. cyclomatic complexity: 161 Second operand 15 states.
[2020-11-25 14:27:06,308 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:27:06,308 INFO  L93              Difference]: Finished difference Result 1986 states and 2178 transitions.
[2020-11-25 14:27:06,308 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 15 states. 
[2020-11-25 14:27:06,308 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1986 states and 2178 transitions.
[2020-11-25 14:27:06,315 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 12
[2020-11-25 14:27:06,322 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1986 states to 1986 states and 2178 transitions.
[2020-11-25 14:27:06,322 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 733
[2020-11-25 14:27:06,323 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 733
[2020-11-25 14:27:06,323 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1986 states and 2178 transitions.
[2020-11-25 14:27:06,325 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:27:06,325 INFO  L728         BuchiCegarLoop]: Abstraction has 1986 states and 2178 transitions.
[2020-11-25 14:27:06,327 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1986 states and 2178 transitions.
[2020-11-25 14:27:06,346 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1986 to 1966.
[2020-11-25 14:27:06,347 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1966 states.
[2020-11-25 14:27:06,349 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1966 states to 1966 states and 2144 transitions.
[2020-11-25 14:27:06,349 INFO  L751         BuchiCegarLoop]: Abstraction has 1966 states and 2144 transitions.
[2020-11-25 14:27:06,349 INFO  L631         BuchiCegarLoop]: Abstraction has 1966 states and 2144 transitions.
[2020-11-25 14:27:06,349 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 14:27:06,349 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1966 states and 2144 transitions.
[2020-11-25 14:27:06,353 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-25 14:27:06,353 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:27:06,353 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:27:06,354 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:27:06,354 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_totalSupply_Ducks0 := false;
[L2]                 call_totalSupply_Ducks0 := false;
[L2]     CALL        call main();
[L2853]              assume null == 0;
[L2854]  CALL        call this := FreshRefGenerator__success();
[L1249]              havoc newRef;
[L1250]              assume Alloc[newRef] == false;
[L1251]              Alloc[newRef] := true;
[L1252]              assume newRef != null;
[L2854]  RET         call this := FreshRefGenerator__success();
[L2855]              assume now >= 0;
[L2856]              assume DType[this] == Ducks;
[L2857]              assume msgvalue_MSG == 0;
[L2858]              gas := gas - 53000;
[L2859]  CALL        call Ducks_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L398]               havoc __exception;
[L399]               revert := false;
[L400]   COND FALSE  !(__exception)
[L421]   CALL        call Ducks_Ducks__success(this, msgsender_MSG, msgvalue_MSG);
[L1456]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1281]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1266]              assume msgsender_MSG != null;
[L1267]              Balance[this] := 0;
[L1281]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1282]  COND FALSE  !(revert)
[L1456]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1457]  COND FALSE  !(revert)
[L1460]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1313]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1298]              assume msgsender_MSG != null;
[L1299]              Balance[this] := 0;
[L1313]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1314]  COND FALSE  !(revert)
[L1460]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1461]  COND FALSE  !(revert)
[L1464]  CALL        call Ducks_Ducks_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1417]              assume msgsender_MSG != null;
[L1418]              Balance[this] := 0;
[L1419]              name_Ducks[this] := 560717954;
[L1420]              symbol_Ducks[this] := 560717954;
[L1421]              decimals_Ducks[this] := 0;
[L1422]              _totalSupply_Ducks[this] := 0;
[L1423]              balances_Ducks[this] := zeroRefintArr();
[L1424]              sum_balances0[this] := 0;
[L1425]              allowed_Ducks[this] := zeroRefRefintArr();
[L1426]              sum_allowed1[this] := 0;
[L1428]              name_Ducks[this] := 1576131613;
[L1429]              symbol_Ducks[this] := -1943651461;
[L1430]              decimals_Ducks[this] := 18;
[L1431]              _totalSupply_Ducks[this] := 1500000000000000000000000;
[L1432]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][msgsender_MSG];
[L1433]              balances_Ducks[this][msgsender_MSG] := _totalSupply_Ducks[this];
[L1434]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][msgsender_MSG];
[L1435]              assert { :EventEmitted "Transfer_Ducks" } true;
[L1464]  RET         call Ducks_Ducks_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1465]  COND FALSE  !(revert)
[L421]   RET         call Ducks_Ducks__success(this, msgsender_MSG, msgvalue_MSG);
[L422]               assume !revert && gas >= 0;
[L2859]  RET         call Ducks_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L2860]              assume !revert && gas >= 0;
[L2863]  CALL        call CorralChoice_Ducks(this);
[L2704]              havoc msgsender_MSG;
[L2705]              havoc msgvalue_MSG;
[L2706]              havoc choice;
[L2707]              havoc __ret_0_totalSupply;
[L2708]              havoc tokenOwner_s247;
[L2709]              havoc balance_s247;
[L2710]              havoc tokenOwner_s263;
[L2711]              havoc spender_s263;
[L2712]              havoc remaining_s263;
[L2713]              havoc to_s334;
[L2714]              havoc tokens_s334;
[L2715]              havoc success_s334;
[L2716]              havoc spender_s291;
[L2717]              havoc tokens_s291;
[L2718]              havoc success_s291;
[L2719]              havoc from_s393;
[L2720]              havoc to_s393;
[L2721]              havoc tokens_s393;
[L2722]              havoc success_s393;
[L2723]              havoc a_s90;
[L2724]              havoc b_s90;
[L2725]              havoc c_s90;
[L2726]              havoc a_s112;
[L2727]              havoc b_s112;
[L2728]              havoc c_s112;
[L2729]              havoc a_s140;
[L2730]              havoc b_s140;
[L2731]              havoc c_s140;
[L2732]              havoc a_s162;
[L2733]              havoc b_s162;
[L2734]              havoc c_s162;
[L2735]              havoc __ret_0_name;
[L2736]              havoc __ret_0_symbol;
[L2737]              havoc __ret_0_decimals;
[L2738]              havoc __ret_0__totalSupply;
[L2739]              havoc tmpNow;
[L2740]              havoc gas;
[L2741]              assume gas > 4000000 && gas <= 8000000;
[L2742]              tmpNow := now;
[L2743]              havoc now;
[L2744]              assume now > tmpNow;
[L2745]              assume msgsender_MSG != null;
[L2746]              assume DType[msgsender_MSG] != ERC20Interface;
[L2747]              assume DType[msgsender_MSG] != SafeMath;
[L2748]              assume DType[msgsender_MSG] != Ducks;
[L2749]              Alloc[msgsender_MSG] := true;
[L2750]  COND TRUE   choice == 14
[L2751]              gas := gas - 21000;
[L2752]  COND TRUE   gas >= 0
[L2753]              assume msgvalue_MSG == 0;
[L2754]  CALL        call __ret_0_totalSupply := totalSupply_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _totalSupply_Ducks[this] >= 0 && _totalSupply_Ducks[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_totalSupply_Ducks0 := true;
[L2]                 call_totalSupply_Ducks0 := false;
[L2]                 revert := revert_hold;
[L448]               havoc __exception;
[L449]               revert := false;
[L450]   COND TRUE   __exception
[L451]               __tmp__Balance := Balance;
[L452]               __tmp__DType := DType;
[L453]               __tmp__Alloc := Alloc;
[L454]               __tmp__balance_ADDR := balance_ADDR;
[L455]               __tmp__M_Ref_int := M_Ref_int;
[L456]               __tmp__sum_balances0 := sum_balances0;
[L457]               __tmp__alloc_allowed_Ducks_lvl0 := alloc_allowed_Ducks_lvl0;
[L458]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L459]               __tmp__sum_allowed1 := sum_allowed1;
[L460]               __tmp__Length := Length;
[L461]               __tmp__now := now;
[L462]               __tmp__name_Ducks := name_Ducks;
[L463]               __tmp__symbol_Ducks := symbol_Ducks;
[L464]               __tmp__decimals_Ducks := decimals_Ducks;
[L465]               __tmp___totalSupply_Ducks := _totalSupply_Ducks;
[L466]               __tmp__balances_Ducks := balances_Ducks;
[L467]               __tmp__allowed_Ducks := allowed_Ducks;
[L468]   CALL        call __ret_0_ := totalSupply_Ducks__fail(this, msgsender_MSG, msgvalue_MSG);
[L1473]              __var_1 := null;
[L1474]              __ret_0_ := (__tmp___totalSupply_Ducks[this] - __tmp__balances_Ducks[this][null]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L468]   RET         call __ret_0_ := totalSupply_Ducks__fail(this, msgsender_MSG, msgvalue_MSG);
[L469]               assume revert || gas < 0;
[L2754]  RET         call __ret_0_totalSupply := totalSupply_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L2863]  RET         call CorralChoice_Ducks(this);

Loop:
[L2863]  CALL       call CorralChoice_Ducks(this);
[L2704]             havoc msgsender_MSG;
[L2705]             havoc msgvalue_MSG;
[L2706]             havoc choice;
[L2707]             havoc __ret_0_totalSupply;
[L2708]             havoc tokenOwner_s247;
[L2709]             havoc balance_s247;
[L2710]             havoc tokenOwner_s263;
[L2711]             havoc spender_s263;
[L2712]             havoc remaining_s263;
[L2713]             havoc to_s334;
[L2714]             havoc tokens_s334;
[L2715]             havoc success_s334;
[L2716]             havoc spender_s291;
[L2717]             havoc tokens_s291;
[L2718]             havoc success_s291;
[L2719]             havoc from_s393;
[L2720]             havoc to_s393;
[L2721]             havoc tokens_s393;
[L2722]             havoc success_s393;
[L2723]             havoc a_s90;
[L2724]             havoc b_s90;
[L2725]             havoc c_s90;
[L2726]             havoc a_s112;
[L2727]             havoc b_s112;
[L2728]             havoc c_s112;
[L2729]             havoc a_s140;
[L2730]             havoc b_s140;
[L2731]             havoc c_s140;
[L2732]             havoc a_s162;
[L2733]             havoc b_s162;
[L2734]             havoc c_s162;
[L2735]             havoc __ret_0_name;
[L2736]             havoc __ret_0_symbol;
[L2737]             havoc __ret_0_decimals;
[L2738]             havoc __ret_0__totalSupply;
[L2739]             havoc tmpNow;
[L2740]             havoc gas;
[L2741]             assume gas > 4000000 && gas <= 8000000;
[L2742]             tmpNow := now;
[L2743]             havoc now;
[L2744]             assume now > tmpNow;
[L2745]             assume msgsender_MSG != null;
[L2746]             assume DType[msgsender_MSG] != ERC20Interface;
[L2747]             assume DType[msgsender_MSG] != SafeMath;
[L2748]             assume DType[msgsender_MSG] != Ducks;
[L2749]             Alloc[msgsender_MSG] := true;
[L2750]  COND TRUE  choice == 14
[L2751]             gas := gas - 21000;
[L2752]  COND TRUE  gas >= 0
[L2753]             assume msgvalue_MSG == 0;
[L2754]  CALL       call __ret_0_totalSupply := totalSupply_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L2]                revert_hold := revert;
[L2]                revert := false;
[L2]                assume _totalSupply_Ducks[this] >= 0 && _totalSupply_Ducks[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                call_totalSupply_Ducks0 := true;
[L2]                call_totalSupply_Ducks0 := false;
[L2]                revert := revert_hold;
[L448]              havoc __exception;
[L449]              revert := false;
[L450]   COND TRUE  __exception
[L451]              __tmp__Balance := Balance;
[L452]              __tmp__DType := DType;
[L453]              __tmp__Alloc := Alloc;
[L454]              __tmp__balance_ADDR := balance_ADDR;
[L455]              __tmp__M_Ref_int := M_Ref_int;
[L456]              __tmp__sum_balances0 := sum_balances0;
[L457]              __tmp__alloc_allowed_Ducks_lvl0 := alloc_allowed_Ducks_lvl0;
[L458]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L459]              __tmp__sum_allowed1 := sum_allowed1;
[L460]              __tmp__Length := Length;
[L461]              __tmp__now := now;
[L462]              __tmp__name_Ducks := name_Ducks;
[L463]              __tmp__symbol_Ducks := symbol_Ducks;
[L464]              __tmp__decimals_Ducks := decimals_Ducks;
[L465]              __tmp___totalSupply_Ducks := _totalSupply_Ducks;
[L466]              __tmp__balances_Ducks := balances_Ducks;
[L467]              __tmp__allowed_Ducks := allowed_Ducks;
[L468]   CALL       call __ret_0_ := totalSupply_Ducks__fail(this, msgsender_MSG, msgvalue_MSG);
[L1473]             __var_1 := null;
[L1474]             __ret_0_ := (__tmp___totalSupply_Ducks[this] - __tmp__balances_Ducks[this][null]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L468]   RET        call __ret_0_ := totalSupply_Ducks__fail(this, msgsender_MSG, msgvalue_MSG);
[L469]              assume revert || gas < 0;
[L2754]  RET        call __ret_0_totalSupply := totalSupply_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L2863]  RET        call CorralChoice_Ducks(this);

[2020-11-25 14:27:06,357 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:27:06,357 INFO  L82        PathProgramCache]: Analyzing trace with hash -1824629784, now seen corresponding path program 1 times
[2020-11-25 14:27:06,358 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:27:06,364 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:27:06,393 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 14:27:06,393 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 14:27:06,393 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-25 14:27:06,394 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:27:06,394 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-25 14:27:06,394 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-11-25 14:27:06,395 INFO  L87              Difference]: Start difference. First operand 1966 states and 2144 transitions. cyclomatic complexity: 182 Second operand 5 states.
[2020-11-25 14:27:06,602 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:27:06,602 INFO  L93              Difference]: Finished difference Result 2549 states and 2836 transitions.
[2020-11-25 14:27:06,603 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 14:27:06,603 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2549 states and 2836 transitions.
[2020-11-25 14:27:06,610 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 12
[2020-11-25 14:27:06,616 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2549 states to 1969 states and 2254 transitions.
[2020-11-25 14:27:06,616 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 562
[2020-11-25 14:27:06,616 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 562
[2020-11-25 14:27:06,616 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1969 states and 2254 transitions.
[2020-11-25 14:27:06,618 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:27:06,618 INFO  L728         BuchiCegarLoop]: Abstraction has 1969 states and 2254 transitions.
[2020-11-25 14:27:06,619 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1969 states and 2254 transitions.
[2020-11-25 14:27:06,629 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1969 to 1276.
[2020-11-25 14:27:06,629 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1276 states.
[2020-11-25 14:27:06,631 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1276 states to 1276 states and 1380 transitions.
[2020-11-25 14:27:06,631 INFO  L751         BuchiCegarLoop]: Abstraction has 1276 states and 1380 transitions.
[2020-11-25 14:27:06,631 INFO  L631         BuchiCegarLoop]: Abstraction has 1276 states and 1380 transitions.
[2020-11-25 14:27:06,631 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 14:27:06,631 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1276 states and 1380 transitions.
[2020-11-25 14:27:06,633 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:27:06,633 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:27:06,633 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:27:06,634 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:27:06,634 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_totalSupply_Ducks0 := false;
[L2]                 call_totalSupply_Ducks0 := false;
[L2]     CALL        call main();
[L2853]              assume null == 0;
[L2854]  CALL        call this := FreshRefGenerator__success();
[L1249]              havoc newRef;
[L1250]              assume Alloc[newRef] == false;
[L1251]              Alloc[newRef] := true;
[L1252]              assume newRef != null;
[L2854]  RET         call this := FreshRefGenerator__success();
[L2855]              assume now >= 0;
[L2856]              assume DType[this] == Ducks;
[L2857]              assume msgvalue_MSG == 0;
[L2858]              gas := gas - 53000;
[L2859]  CALL        call Ducks_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L398]               havoc __exception;
[L399]               revert := false;
[L400]   COND FALSE  !(__exception)
[L421]   CALL        call Ducks_Ducks__success(this, msgsender_MSG, msgvalue_MSG);
[L1456]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1281]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1266]              assume msgsender_MSG != null;
[L1267]              Balance[this] := 0;
[L1281]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1282]  COND FALSE  !(revert)
[L1456]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1457]  COND FALSE  !(revert)
[L1460]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1313]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1298]              assume msgsender_MSG != null;
[L1299]              Balance[this] := 0;
[L1313]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1314]  COND FALSE  !(revert)
[L1460]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1461]  COND FALSE  !(revert)
[L1464]  CALL        call Ducks_Ducks_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1417]              assume msgsender_MSG != null;
[L1418]              Balance[this] := 0;
[L1419]              name_Ducks[this] := 560717954;
[L1420]              symbol_Ducks[this] := 560717954;
[L1421]              decimals_Ducks[this] := 0;
[L1422]              _totalSupply_Ducks[this] := 0;
[L1423]              balances_Ducks[this] := zeroRefintArr();
[L1424]              sum_balances0[this] := 0;
[L1425]              allowed_Ducks[this] := zeroRefRefintArr();
[L1426]              sum_allowed1[this] := 0;
[L1428]              name_Ducks[this] := 1576131613;
[L1429]              symbol_Ducks[this] := -1943651461;
[L1430]              decimals_Ducks[this] := 18;
[L1431]              _totalSupply_Ducks[this] := 1500000000000000000000000;
[L1432]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][msgsender_MSG];
[L1433]              balances_Ducks[this][msgsender_MSG] := _totalSupply_Ducks[this];
[L1434]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][msgsender_MSG];
[L1435]              assert { :EventEmitted "Transfer_Ducks" } true;
[L1464]  RET         call Ducks_Ducks_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1465]  COND FALSE  !(revert)
[L421]   RET         call Ducks_Ducks__success(this, msgsender_MSG, msgvalue_MSG);
[L422]               assume !revert && gas >= 0;
[L2859]  RET         call Ducks_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L2860]              assume !revert && gas >= 0;
[L2863]  CALL        call CorralChoice_Ducks(this);
[L2704]              havoc msgsender_MSG;
[L2705]              havoc msgvalue_MSG;
[L2706]              havoc choice;
[L2707]              havoc __ret_0_totalSupply;
[L2708]              havoc tokenOwner_s247;
[L2709]              havoc balance_s247;
[L2710]              havoc tokenOwner_s263;
[L2711]              havoc spender_s263;
[L2712]              havoc remaining_s263;
[L2713]              havoc to_s334;
[L2714]              havoc tokens_s334;
[L2715]              havoc success_s334;
[L2716]              havoc spender_s291;
[L2717]              havoc tokens_s291;
[L2718]              havoc success_s291;
[L2719]              havoc from_s393;
[L2720]              havoc to_s393;
[L2721]              havoc tokens_s393;
[L2722]              havoc success_s393;
[L2723]              havoc a_s90;
[L2724]              havoc b_s90;
[L2725]              havoc c_s90;
[L2726]              havoc a_s112;
[L2727]              havoc b_s112;
[L2728]              havoc c_s112;
[L2729]              havoc a_s140;
[L2730]              havoc b_s140;
[L2731]              havoc c_s140;
[L2732]              havoc a_s162;
[L2733]              havoc b_s162;
[L2734]              havoc c_s162;
[L2735]              havoc __ret_0_name;
[L2736]              havoc __ret_0_symbol;
[L2737]              havoc __ret_0_decimals;
[L2738]              havoc __ret_0__totalSupply;
[L2739]              havoc tmpNow;
[L2740]              havoc gas;
[L2741]              assume gas > 4000000 && gas <= 8000000;
[L2742]              tmpNow := now;
[L2743]              havoc now;
[L2744]              assume now > tmpNow;
[L2745]              assume msgsender_MSG != null;
[L2746]              assume DType[msgsender_MSG] != ERC20Interface;
[L2747]              assume DType[msgsender_MSG] != SafeMath;
[L2748]              assume DType[msgsender_MSG] != Ducks;
[L2749]              Alloc[msgsender_MSG] := true;
[L2750]  COND FALSE  !(choice == 14)
[L2756]  COND FALSE  !(choice == 13)
[L2762]  COND FALSE  !(choice == 12)
[L2768]  COND TRUE   choice == 11
[L2769]              gas := gas - 21000;
[L2770]  COND TRUE   gas >= 0
[L2771]              assume tokens_s334 >= 0 && tokens_s334 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2772]              assume msgvalue_MSG == 0;
[L2773]  CALL        call success_s334 := transfer~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L652]               havoc __exception;
[L653]               revert := false;
[L654]   COND FALSE  !(__exception)
[L675]   CALL        call success_s334 := transfer~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L1563]  COND TRUE   DType[this] == Ducks
[L1564]  CALL        call __var_2 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][msgsender_MSG], tokens_s334);
[L1348]  COND FALSE  !(!(b_s112 <= a_s112))
[L1352]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1564]  RET         call __var_2 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][msgsender_MSG], tokens_s334);
[L1565]  COND FALSE  !(revert)
[L1571]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][msgsender_MSG];
[L1572]              balances_Ducks[this][msgsender_MSG] := __var_2;
[L1573]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][msgsender_MSG];
[L1574]  COND TRUE   DType[this] == Ducks
[L1575]  CALL        call __var_3 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][to_s334], tokens_s334);
[L1330]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1331]  COND FALSE  !(!(c_s90 >= a_s90))
[L1575]  RET         call __var_3 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][to_s334], tokens_s334);
[L1576]  COND FALSE  !(revert)
[L1582]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][to_s334];
[L1583]              balances_Ducks[this][to_s334] := __var_3;
[L1584]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][to_s334];
[L1585]              assert { :EventEmitted "Transfer_Ducks" } true;
[L1586]              success_s334 := true;
[L675]   RET         call success_s334 := transfer~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L676]               assume !revert && gas >= 0;
[L2773]  RET         call success_s334 := transfer~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L2863]  RET         call CorralChoice_Ducks(this);
[L2863]  CALL        call CorralChoice_Ducks(this);
[L2704]              havoc msgsender_MSG;
[L2705]              havoc msgvalue_MSG;
[L2706]              havoc choice;
[L2707]              havoc __ret_0_totalSupply;
[L2708]              havoc tokenOwner_s247;
[L2709]              havoc balance_s247;
[L2710]              havoc tokenOwner_s263;
[L2711]              havoc spender_s263;
[L2712]              havoc remaining_s263;
[L2713]              havoc to_s334;
[L2714]              havoc tokens_s334;
[L2715]              havoc success_s334;
[L2716]              havoc spender_s291;
[L2717]              havoc tokens_s291;
[L2718]              havoc success_s291;
[L2719]              havoc from_s393;
[L2720]              havoc to_s393;
[L2721]              havoc tokens_s393;
[L2722]              havoc success_s393;
[L2723]              havoc a_s90;
[L2724]              havoc b_s90;
[L2725]              havoc c_s90;
[L2726]              havoc a_s112;
[L2727]              havoc b_s112;
[L2728]              havoc c_s112;
[L2729]              havoc a_s140;
[L2730]              havoc b_s140;
[L2731]              havoc c_s140;
[L2732]              havoc a_s162;
[L2733]              havoc b_s162;
[L2734]              havoc c_s162;
[L2735]              havoc __ret_0_name;
[L2736]              havoc __ret_0_symbol;
[L2737]              havoc __ret_0_decimals;
[L2738]              havoc __ret_0__totalSupply;
[L2739]              havoc tmpNow;
[L2740]              havoc gas;
[L2741]              assume gas > 4000000 && gas <= 8000000;
[L2742]              tmpNow := now;
[L2743]              havoc now;
[L2744]              assume now > tmpNow;
[L2745]              assume msgsender_MSG != null;
[L2746]              assume DType[msgsender_MSG] != ERC20Interface;
[L2747]              assume DType[msgsender_MSG] != SafeMath;
[L2748]              assume DType[msgsender_MSG] != Ducks;
[L2749]              Alloc[msgsender_MSG] := true;
[L2750]  COND TRUE   choice == 14
[L2751]              gas := gas - 21000;
[L2752]  COND TRUE   gas >= 0
[L2753]              assume msgvalue_MSG == 0;
[L2754]  CALL        call __ret_0_totalSupply := totalSupply_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _totalSupply_Ducks[this] >= 0 && _totalSupply_Ducks[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_totalSupply_Ducks0 := true;
[L2]                 call_totalSupply_Ducks0 := false;
[L2]                 revert := revert_hold;
[L448]               havoc __exception;
[L449]               revert := false;
[L450]   COND FALSE  !(__exception)
[L471]   CALL        call __ret_0_ := totalSupply_Ducks__success(this, msgsender_MSG, msgvalue_MSG);
[L1481]              __var_1 := null;
[L1482]              __ret_0_ := (_totalSupply_Ducks[this] - balances_Ducks[this][null]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L471]   RET         call __ret_0_ := totalSupply_Ducks__success(this, msgsender_MSG, msgvalue_MSG);
[L472]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((__ret_0_ == _totalSupply_Ducks[this] && _totalSupply_Ducks[this] == old(_totalSupply_Ducks[this])) && balances_Ducks[this] == old(balances_Ducks[this])) && allowed_Ducks[this] == old(allowed_Ducks[this])) && name_Ducks[this] == old(name_Ducks[this])) && symbol_Ducks[this] == old(symbol_Ducks[this])) && decimals_Ducks[this] == old(decimals_Ducks[this]));
[L2]                 revert := revert_hold;
[L2754]  RET         call __ret_0_totalSupply := totalSupply_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L2863]  RET         call CorralChoice_Ducks(this);

Loop:
[L2863]  CALL        call CorralChoice_Ducks(this);
[L2704]              havoc msgsender_MSG;
[L2705]              havoc msgvalue_MSG;
[L2706]              havoc choice;
[L2707]              havoc __ret_0_totalSupply;
[L2708]              havoc tokenOwner_s247;
[L2709]              havoc balance_s247;
[L2710]              havoc tokenOwner_s263;
[L2711]              havoc spender_s263;
[L2712]              havoc remaining_s263;
[L2713]              havoc to_s334;
[L2714]              havoc tokens_s334;
[L2715]              havoc success_s334;
[L2716]              havoc spender_s291;
[L2717]              havoc tokens_s291;
[L2718]              havoc success_s291;
[L2719]              havoc from_s393;
[L2720]              havoc to_s393;
[L2721]              havoc tokens_s393;
[L2722]              havoc success_s393;
[L2723]              havoc a_s90;
[L2724]              havoc b_s90;
[L2725]              havoc c_s90;
[L2726]              havoc a_s112;
[L2727]              havoc b_s112;
[L2728]              havoc c_s112;
[L2729]              havoc a_s140;
[L2730]              havoc b_s140;
[L2731]              havoc c_s140;
[L2732]              havoc a_s162;
[L2733]              havoc b_s162;
[L2734]              havoc c_s162;
[L2735]              havoc __ret_0_name;
[L2736]              havoc __ret_0_symbol;
[L2737]              havoc __ret_0_decimals;
[L2738]              havoc __ret_0__totalSupply;
[L2739]              havoc tmpNow;
[L2740]              havoc gas;
[L2741]              assume gas > 4000000 && gas <= 8000000;
[L2742]              tmpNow := now;
[L2743]              havoc now;
[L2744]              assume now > tmpNow;
[L2745]              assume msgsender_MSG != null;
[L2746]              assume DType[msgsender_MSG] != ERC20Interface;
[L2747]              assume DType[msgsender_MSG] != SafeMath;
[L2748]              assume DType[msgsender_MSG] != Ducks;
[L2749]              Alloc[msgsender_MSG] := true;
[L2750]  COND TRUE   choice == 14
[L2751]              gas := gas - 21000;
[L2752]  COND FALSE  !(gas >= 0)
[L2863]  RET         call CorralChoice_Ducks(this);

[2020-11-25 14:27:06,637 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:27:06,637 INFO  L82        PathProgramCache]: Analyzing trace with hash -377533742, now seen corresponding path program 1 times
[2020-11-25 14:27:06,637 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:27:06,653 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 14:27:06,670 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 14:27:06,716 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:27:06,716 INFO  L82        PathProgramCache]: Analyzing trace with hash -989433689, now seen corresponding path program 1 times
[2020-11-25 14:27:06,717 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:27:06,719 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:27:06,723 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 14:27:06,723 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 14:27:06,723 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 14:27:06,723 INFO  L1008  eck$LassoCheckResult]: loop already infeasible
[2020-11-25 14:27:06,723 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 14:27:06,723 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-11-25 14:27:06,724 INFO  L87              Difference]: Start difference. First operand 1276 states and 1380 transitions. cyclomatic complexity: 107 Second operand 4 states.
[2020-11-25 14:27:06,838 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:27:06,838 INFO  L93              Difference]: Finished difference Result 1401 states and 1492 transitions.
[2020-11-25 14:27:06,838 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 14:27:06,838 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1401 states and 1492 transitions.
[2020-11-25 14:27:06,843 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 14:27:06,846 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1401 states to 1401 states and 1492 transitions.
[2020-11-25 14:27:06,847 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 404
[2020-11-25 14:27:06,847 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 404
[2020-11-25 14:27:06,847 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1401 states and 1492 transitions.
[2020-11-25 14:27:06,848 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:27:06,848 INFO  L728         BuchiCegarLoop]: Abstraction has 1401 states and 1492 transitions.
[2020-11-25 14:27:06,849 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1401 states and 1492 transitions.
[2020-11-25 14:27:06,856 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1401 to 1276.
[2020-11-25 14:27:06,856 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1276 states.
[2020-11-25 14:27:06,857 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1276 states to 1276 states and 1352 transitions.
[2020-11-25 14:27:06,857 INFO  L751         BuchiCegarLoop]: Abstraction has 1276 states and 1352 transitions.
[2020-11-25 14:27:06,857 INFO  L631         BuchiCegarLoop]: Abstraction has 1276 states and 1352 transitions.
[2020-11-25 14:27:06,857 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 14:27:06,857 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1276 states and 1352 transitions.
[2020-11-25 14:27:06,860 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:27:06,861 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:27:06,861 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:27:06,862 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:27:06,862 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_totalSupply_Ducks0 := false;
[L2]                 call_totalSupply_Ducks0 := false;
[L2]     CALL        call main();
[L2853]              assume null == 0;
[L2854]  CALL        call this := FreshRefGenerator__success();
[L1249]              havoc newRef;
[L1250]              assume Alloc[newRef] == false;
[L1251]              Alloc[newRef] := true;
[L1252]              assume newRef != null;
[L2854]  RET         call this := FreshRefGenerator__success();
[L2855]              assume now >= 0;
[L2856]              assume DType[this] == Ducks;
[L2857]              assume msgvalue_MSG == 0;
[L2858]              gas := gas - 53000;
[L2859]  CALL        call Ducks_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L398]               havoc __exception;
[L399]               revert := false;
[L400]   COND FALSE  !(__exception)
[L421]   CALL        call Ducks_Ducks__success(this, msgsender_MSG, msgvalue_MSG);
[L1456]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1281]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1266]              assume msgsender_MSG != null;
[L1267]              Balance[this] := 0;
[L1281]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1282]  COND FALSE  !(revert)
[L1456]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1457]  COND FALSE  !(revert)
[L1460]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1313]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1298]              assume msgsender_MSG != null;
[L1299]              Balance[this] := 0;
[L1313]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1314]  COND FALSE  !(revert)
[L1460]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1461]  COND FALSE  !(revert)
[L1464]  CALL        call Ducks_Ducks_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1417]              assume msgsender_MSG != null;
[L1418]              Balance[this] := 0;
[L1419]              name_Ducks[this] := 560717954;
[L1420]              symbol_Ducks[this] := 560717954;
[L1421]              decimals_Ducks[this] := 0;
[L1422]              _totalSupply_Ducks[this] := 0;
[L1423]              balances_Ducks[this] := zeroRefintArr();
[L1424]              sum_balances0[this] := 0;
[L1425]              allowed_Ducks[this] := zeroRefRefintArr();
[L1426]              sum_allowed1[this] := 0;
[L1428]              name_Ducks[this] := 1576131613;
[L1429]              symbol_Ducks[this] := -1943651461;
[L1430]              decimals_Ducks[this] := 18;
[L1431]              _totalSupply_Ducks[this] := 1500000000000000000000000;
[L1432]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][msgsender_MSG];
[L1433]              balances_Ducks[this][msgsender_MSG] := _totalSupply_Ducks[this];
[L1434]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][msgsender_MSG];
[L1435]              assert { :EventEmitted "Transfer_Ducks" } true;
[L1464]  RET         call Ducks_Ducks_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1465]  COND FALSE  !(revert)
[L421]   RET         call Ducks_Ducks__success(this, msgsender_MSG, msgvalue_MSG);
[L422]               assume !revert && gas >= 0;
[L2859]  RET         call Ducks_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L2860]              assume !revert && gas >= 0;
[L2863]  CALL        call CorralChoice_Ducks(this);
[L2704]              havoc msgsender_MSG;
[L2705]              havoc msgvalue_MSG;
[L2706]              havoc choice;
[L2707]              havoc __ret_0_totalSupply;
[L2708]              havoc tokenOwner_s247;
[L2709]              havoc balance_s247;
[L2710]              havoc tokenOwner_s263;
[L2711]              havoc spender_s263;
[L2712]              havoc remaining_s263;
[L2713]              havoc to_s334;
[L2714]              havoc tokens_s334;
[L2715]              havoc success_s334;
[L2716]              havoc spender_s291;
[L2717]              havoc tokens_s291;
[L2718]              havoc success_s291;
[L2719]              havoc from_s393;
[L2720]              havoc to_s393;
[L2721]              havoc tokens_s393;
[L2722]              havoc success_s393;
[L2723]              havoc a_s90;
[L2724]              havoc b_s90;
[L2725]              havoc c_s90;
[L2726]              havoc a_s112;
[L2727]              havoc b_s112;
[L2728]              havoc c_s112;
[L2729]              havoc a_s140;
[L2730]              havoc b_s140;
[L2731]              havoc c_s140;
[L2732]              havoc a_s162;
[L2733]              havoc b_s162;
[L2734]              havoc c_s162;
[L2735]              havoc __ret_0_name;
[L2736]              havoc __ret_0_symbol;
[L2737]              havoc __ret_0_decimals;
[L2738]              havoc __ret_0__totalSupply;
[L2739]              havoc tmpNow;
[L2740]              havoc gas;
[L2741]              assume gas > 4000000 && gas <= 8000000;
[L2742]              tmpNow := now;
[L2743]              havoc now;
[L2744]              assume now > tmpNow;
[L2745]              assume msgsender_MSG != null;
[L2746]              assume DType[msgsender_MSG] != ERC20Interface;
[L2747]              assume DType[msgsender_MSG] != SafeMath;
[L2748]              assume DType[msgsender_MSG] != Ducks;
[L2749]              Alloc[msgsender_MSG] := true;
[L2750]  COND FALSE  !(choice == 14)
[L2756]  COND FALSE  !(choice == 13)
[L2762]  COND FALSE  !(choice == 12)
[L2768]  COND TRUE   choice == 11
[L2769]              gas := gas - 21000;
[L2770]  COND TRUE   gas >= 0
[L2771]              assume tokens_s334 >= 0 && tokens_s334 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2772]              assume msgvalue_MSG == 0;
[L2773]  CALL        call success_s334 := transfer~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L652]               havoc __exception;
[L653]               revert := false;
[L654]   COND FALSE  !(__exception)
[L675]   CALL        call success_s334 := transfer~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L1563]  COND TRUE   DType[this] == Ducks
[L1564]  CALL        call __var_2 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][msgsender_MSG], tokens_s334);
[L1348]  COND FALSE  !(!(b_s112 <= a_s112))
[L1352]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1564]  RET         call __var_2 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][msgsender_MSG], tokens_s334);
[L1565]  COND FALSE  !(revert)
[L1571]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][msgsender_MSG];
[L1572]              balances_Ducks[this][msgsender_MSG] := __var_2;
[L1573]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][msgsender_MSG];
[L1574]  COND TRUE   DType[this] == Ducks
[L1575]  CALL        call __var_3 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][to_s334], tokens_s334);
[L1330]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1331]  COND FALSE  !(!(c_s90 >= a_s90))
[L1575]  RET         call __var_3 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][to_s334], tokens_s334);
[L1576]  COND FALSE  !(revert)
[L1582]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][to_s334];
[L1583]              balances_Ducks[this][to_s334] := __var_3;
[L1584]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][to_s334];
[L1585]              assert { :EventEmitted "Transfer_Ducks" } true;
[L1586]              success_s334 := true;
[L675]   RET         call success_s334 := transfer~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L676]               assume !revert && gas >= 0;
[L2773]  RET         call success_s334 := transfer~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L2863]  RET         call CorralChoice_Ducks(this);
[L2863]  CALL        call CorralChoice_Ducks(this);
[L2704]              havoc msgsender_MSG;
[L2705]              havoc msgvalue_MSG;
[L2706]              havoc choice;
[L2707]              havoc __ret_0_totalSupply;
[L2708]              havoc tokenOwner_s247;
[L2709]              havoc balance_s247;
[L2710]              havoc tokenOwner_s263;
[L2711]              havoc spender_s263;
[L2712]              havoc remaining_s263;
[L2713]              havoc to_s334;
[L2714]              havoc tokens_s334;
[L2715]              havoc success_s334;
[L2716]              havoc spender_s291;
[L2717]              havoc tokens_s291;
[L2718]              havoc success_s291;
[L2719]              havoc from_s393;
[L2720]              havoc to_s393;
[L2721]              havoc tokens_s393;
[L2722]              havoc success_s393;
[L2723]              havoc a_s90;
[L2724]              havoc b_s90;
[L2725]              havoc c_s90;
[L2726]              havoc a_s112;
[L2727]              havoc b_s112;
[L2728]              havoc c_s112;
[L2729]              havoc a_s140;
[L2730]              havoc b_s140;
[L2731]              havoc c_s140;
[L2732]              havoc a_s162;
[L2733]              havoc b_s162;
[L2734]              havoc c_s162;
[L2735]              havoc __ret_0_name;
[L2736]              havoc __ret_0_symbol;
[L2737]              havoc __ret_0_decimals;
[L2738]              havoc __ret_0__totalSupply;
[L2739]              havoc tmpNow;
[L2740]              havoc gas;
[L2741]              assume gas > 4000000 && gas <= 8000000;
[L2742]              tmpNow := now;
[L2743]              havoc now;
[L2744]              assume now > tmpNow;
[L2745]              assume msgsender_MSG != null;
[L2746]              assume DType[msgsender_MSG] != ERC20Interface;
[L2747]              assume DType[msgsender_MSG] != SafeMath;
[L2748]              assume DType[msgsender_MSG] != Ducks;
[L2749]              Alloc[msgsender_MSG] := true;
[L2750]  COND TRUE   choice == 14
[L2751]              gas := gas - 21000;
[L2752]  COND TRUE   gas >= 0
[L2753]              assume msgvalue_MSG == 0;
[L2754]  CALL        call __ret_0_totalSupply := totalSupply_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _totalSupply_Ducks[this] >= 0 && _totalSupply_Ducks[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_totalSupply_Ducks0 := true;
[L2]                 call_totalSupply_Ducks0 := false;
[L2]                 revert := revert_hold;
[L448]               havoc __exception;
[L449]               revert := false;
[L450]   COND FALSE  !(__exception)
[L471]   CALL        call __ret_0_ := totalSupply_Ducks__success(this, msgsender_MSG, msgvalue_MSG);
[L1481]              __var_1 := null;
[L1482]              __ret_0_ := (_totalSupply_Ducks[this] - balances_Ducks[this][null]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L471]   RET         call __ret_0_ := totalSupply_Ducks__success(this, msgsender_MSG, msgvalue_MSG);
[L472]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((__ret_0_ == _totalSupply_Ducks[this] && _totalSupply_Ducks[this] == old(_totalSupply_Ducks[this])) && balances_Ducks[this] == old(balances_Ducks[this])) && allowed_Ducks[this] == old(allowed_Ducks[this])) && name_Ducks[this] == old(name_Ducks[this])) && symbol_Ducks[this] == old(symbol_Ducks[this])) && decimals_Ducks[this] == old(decimals_Ducks[this]));
[L2]                 revert := revert_hold;
[L2754]  RET         call __ret_0_totalSupply := totalSupply_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L2863]  RET         call CorralChoice_Ducks(this);

Loop:
[L2863]  CALL        call CorralChoice_Ducks(this);
[L2704]              havoc msgsender_MSG;
[L2705]              havoc msgvalue_MSG;
[L2706]              havoc choice;
[L2707]              havoc __ret_0_totalSupply;
[L2708]              havoc tokenOwner_s247;
[L2709]              havoc balance_s247;
[L2710]              havoc tokenOwner_s263;
[L2711]              havoc spender_s263;
[L2712]              havoc remaining_s263;
[L2713]              havoc to_s334;
[L2714]              havoc tokens_s334;
[L2715]              havoc success_s334;
[L2716]              havoc spender_s291;
[L2717]              havoc tokens_s291;
[L2718]              havoc success_s291;
[L2719]              havoc from_s393;
[L2720]              havoc to_s393;
[L2721]              havoc tokens_s393;
[L2722]              havoc success_s393;
[L2723]              havoc a_s90;
[L2724]              havoc b_s90;
[L2725]              havoc c_s90;
[L2726]              havoc a_s112;
[L2727]              havoc b_s112;
[L2728]              havoc c_s112;
[L2729]              havoc a_s140;
[L2730]              havoc b_s140;
[L2731]              havoc c_s140;
[L2732]              havoc a_s162;
[L2733]              havoc b_s162;
[L2734]              havoc c_s162;
[L2735]              havoc __ret_0_name;
[L2736]              havoc __ret_0_symbol;
[L2737]              havoc __ret_0_decimals;
[L2738]              havoc __ret_0__totalSupply;
[L2739]              havoc tmpNow;
[L2740]              havoc gas;
[L2741]              assume gas > 4000000 && gas <= 8000000;
[L2742]              tmpNow := now;
[L2743]              havoc now;
[L2744]              assume now > tmpNow;
[L2745]              assume msgsender_MSG != null;
[L2746]              assume DType[msgsender_MSG] != ERC20Interface;
[L2747]              assume DType[msgsender_MSG] != SafeMath;
[L2748]              assume DType[msgsender_MSG] != Ducks;
[L2749]              Alloc[msgsender_MSG] := true;
[L2750]  COND TRUE   choice == 14
[L2751]              gas := gas - 21000;
[L2752]  COND TRUE   gas >= 0
[L2753]              assume msgvalue_MSG == 0;
[L2754]  CALL        call __ret_0_totalSupply := totalSupply_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _totalSupply_Ducks[this] >= 0 && _totalSupply_Ducks[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_totalSupply_Ducks0 := true;
[L2]                 call_totalSupply_Ducks0 := false;
[L2]                 revert := revert_hold;
[L448]               havoc __exception;
[L449]               revert := false;
[L450]   COND FALSE  !(__exception)
[L471]   CALL        call __ret_0_ := totalSupply_Ducks__success(this, msgsender_MSG, msgvalue_MSG);
[L1481]              __var_1 := null;
[L1482]              __ret_0_ := (_totalSupply_Ducks[this] - balances_Ducks[this][null]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L471]   RET         call __ret_0_ := totalSupply_Ducks__success(this, msgsender_MSG, msgvalue_MSG);
[L472]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((__ret_0_ == _totalSupply_Ducks[this] && _totalSupply_Ducks[this] == old(_totalSupply_Ducks[this])) && balances_Ducks[this] == old(balances_Ducks[this])) && allowed_Ducks[this] == old(allowed_Ducks[this])) && name_Ducks[this] == old(name_Ducks[this])) && symbol_Ducks[this] == old(symbol_Ducks[this])) && decimals_Ducks[this] == old(decimals_Ducks[this]));
[L2]                 revert := revert_hold;
[L2754]  RET         call __ret_0_totalSupply := totalSupply_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L2863]  RET         call CorralChoice_Ducks(this);

[2020-11-25 14:27:06,864 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:27:06,865 INFO  L82        PathProgramCache]: Analyzing trace with hash -377533742, now seen corresponding path program 2 times
[2020-11-25 14:27:06,865 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:27:06,878 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 14:27:06,892 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 14:27:06,911 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:27:06,911 INFO  L82        PathProgramCache]: Analyzing trace with hash -1046944899, now seen corresponding path program 1 times
[2020-11-25 14:27:06,912 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:27:06,915 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 14:27:06,918 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 14:27:06,923 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:27:06,923 INFO  L82        PathProgramCache]: Analyzing trace with hash 92175564, now seen corresponding path program 1 times
[2020-11-25 14:27:06,924 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:27:06,940 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 14:27:06,960 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #5: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 883 to 1759
[2020-11-25 14:27:07,360 WARN  L188               SmtUtils]: Spent 164.00 ms on a formula simplification. DAG size of input: 176 DAG size of output: 174
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 2017 to 4027
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 619 to 1237
[2020-11-25 14:27:07,513 WARN  L188               SmtUtils]: Spent 108.00 ms on a formula simplification that was a NOOP. DAG size: 236
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #1: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 2179 to 4357
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
[2020-11-25 14:27:07,627 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 199 to 397
Garbage collection #1: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 443 to 883
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
[2020-11-25 14:27:08,334 WARN  L188               SmtUtils]: Spent 142.00 ms on a formula simplification. DAG size of input: 195 DAG size of output: 185
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
[2020-11-25 14:27:08,478 WARN  L188               SmtUtils]: Spent 111.00 ms on a formula simplification that was a NOOP. DAG size: 248
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #5: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
[2020-11-25 14:27:08,729 WARN  L188               SmtUtils]: Spent 113.00 ms on a formula simplification. DAG size of input: 175 DAG size of output: 174
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
[2020-11-25 14:27:11,286 WARN  L188               SmtUtils]: Spent 2.42 s on a formula simplification. DAG size of input: 516 DAG size of output: 507
Garbage collection #1: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #2: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #3: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #4: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #5: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
Garbage collection #6: 6661 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6661 to 13313
Garbage collection #7: 13313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13313 to 26597
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
[2020-11-25 14:27:11,634 WARN  L188               SmtUtils]: Spent 333.00 ms on a formula simplification that was a NOOP. DAG size: 198
[2020-11-25 14:27:12,165 WARN  L188               SmtUtils]: Spent 519.00 ms on a formula simplification that was a NOOP. DAG size: 267
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 2647 to 5281
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 883 to 1759
[2020-11-25 14:27:12,332 WARN  L188               SmtUtils]: Spent 162.00 ms on a formula simplification that was a NOOP. DAG size: 198
[2020-11-25 14:27:13,267 WARN  L188               SmtUtils]: Spent 934.00 ms on a formula simplification. DAG size of input: 269 DAG size of output: 268
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
[2020-11-25 14:27:13,746 WARN  L188               SmtUtils]: Spent 476.00 ms on a formula simplification that was a NOOP. DAG size: 264
[2020-11-25 14:27:13,762 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 14:27:13,782 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 14:27:13,791 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 02:27:13 BasicIcfg
[2020-11-25 14:27:13,791 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 14:27:13,792 INFO  L168              Benchmark]: Toolchain (without parser) took 12249.33 ms. Allocated memory was 1.0 GB in the beginning and 2.1 GB in the end (delta: 1.1 GB). Free memory was 945.9 MB in the beginning and 1.7 GB in the end (delta: -731.9 MB). Peak memory consumption was 1.1 GB. Max. memory is 15.3 GB.
[2020-11-25 14:27:13,792 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.17 ms. Allocated memory is still 1.0 GB. Free memory is still 956.7 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 14:27:13,792 INFO  L168              Benchmark]: Boogie Preprocessor took 88.26 ms. Allocated memory is still 1.0 GB. Free memory was 945.9 MB in the beginning and 929.8 MB in the end (delta: 16.2 MB). Peak memory consumption was 16.2 MB. Max. memory is 15.3 GB.
[2020-11-25 14:27:13,792 INFO  L168              Benchmark]: UtopiaSpecLang took 51.51 ms. Allocated memory is still 1.0 GB. Free memory is still 929.8 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 14:27:13,793 INFO  L168              Benchmark]: Boogie Printer took 12.01 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 924.4 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 14:27:13,793 INFO  L168              Benchmark]: RCFGBuilder took 576.87 ms. Allocated memory is still 1.0 GB. Free memory was 924.4 MB in the beginning and 849.2 MB in the end (delta: 75.2 MB). Peak memory consumption was 75.2 MB. Max. memory is 15.3 GB.
[2020-11-25 14:27:13,793 INFO  L168              Benchmark]: UtopiaLTL2Aut took 36.38 ms. Allocated memory is still 1.0 GB. Free memory was 849.2 MB in the beginning and 845.7 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
[2020-11-25 14:27:13,794 INFO  L168              Benchmark]: BÃ¼chi Program Product took 993.82 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 49.8 MB). Free memory was 845.7 MB in the beginning and 766.8 MB in the end (delta: 78.8 MB). Peak memory consumption was 131.7 MB. Max. memory is 15.3 GB.
[2020-11-25 14:27:13,794 INFO  L168              Benchmark]: BlockEncodingV2 took 116.24 ms. Allocated memory is still 1.1 GB. Free memory was 766.8 MB in the beginning and 724.5 MB in the end (delta: 42.3 MB). Peak memory consumption was 42.3 MB. Max. memory is 15.3 GB.
[2020-11-25 14:27:13,795 INFO  L168              Benchmark]: BuchiAutomizer took 10370.93 ms. Allocated memory was 1.1 GB in the beginning and 2.1 GB in the end (delta: 1.0 GB). Free memory was 724.5 MB in the beginning and 1.7 GB in the end (delta: -953.4 MB). Peak memory consumption was 854.9 MB. Max. memory is 15.3 GB.
[2020-11-25 14:27:13,798 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    2488 locations, 4278 edges
  - StatisticsResult: Encoded RCFG
    2444 locations, 4160 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.17 ms. Allocated memory is still 1.0 GB. Free memory is still 956.7 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 88.26 ms. Allocated memory is still 1.0 GB. Free memory was 945.9 MB in the beginning and 929.8 MB in the end (delta: 16.2 MB). Peak memory consumption was 16.2 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 51.51 ms. Allocated memory is still 1.0 GB. Free memory is still 929.8 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Printer took 12.01 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 924.4 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 576.87 ms. Allocated memory is still 1.0 GB. Free memory was 924.4 MB in the beginning and 849.2 MB in the end (delta: 75.2 MB). Peak memory consumption was 75.2 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 36.38 ms. Allocated memory is still 1.0 GB. Free memory was 849.2 MB in the beginning and 845.7 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 993.82 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 49.8 MB). Free memory was 845.7 MB in the beginning and 766.8 MB in the end (delta: 78.8 MB). Peak memory consumption was 131.7 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 116.24 ms. Allocated memory is still 1.1 GB. Free memory was 766.8 MB in the beginning and 724.5 MB in the end (delta: 42.3 MB). Peak memory consumption was 42.3 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 10370.93 ms. Allocated memory was 1.1 GB in the beginning and 2.1 GB in the end (delta: 1.0 GB). Free memory was 724.5 MB in the beginning and 1.7 GB in the end (delta: -953.4 MB). Peak memory consumption was 854.9 MB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    1049 locations, 1322 edges
  - StatisticsResult: BuchiProgram size
    2488 locations, 4278 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 5 terminating modules (5 trivial, 0 deterministic, 0 nondeterministic) and one nonterminating remainder module.5 modules have a trivial ranking function, the largest among these consists of 15 locations. The remainder module has 1276 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 10.3s and 6 iterations.  TraceHistogramMax:2. Analysis of lassos took 7.3s. Construction of modules took 1.7s. BÃ¼chi inclusion checks took 0.7s. Highest rank in rank-based complementation 0. Minimization of det autom 5. Minimization of nondet autom 0. Automata minimization 0.1s AutomataMinimizationTime, 5 MinimizatonAttempts, 1485 StatesRemovedByMinimization, 4 NontrivialMinimizations. Non-live state removal took 0.0s Buchi closure took 0.0s. Biggest automaton had 1966 states and ocurred in iteration 3.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 9615 SDtfs, 10539 SDslu, 13528 SDs, 0 SdLazy, 15600 SolverSat, 1795 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 1.7s Time	LassoAnalysisResults: nont1 unkn0 SFLI1 SFLT0 conc0 concLT0 SILN0 SILU4 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - TransactionCounterexample: Violation of LTL property LTL
    Found an infinite, lasso-shaped execution that violates the LTL property LTL.
Stem:
address(1500000000000000000000008) = (new Ducks)({from : 1500000000000000000000003});
[L398]               havoc __exception;
[L399]               revert := false;
[L400]   COND FALSE  !(__exception)
[L421]   CALL        call Ducks_Ducks__success(this, msgsender_MSG, msgvalue_MSG);
[L1456]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1281]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1266]              assume msgsender_MSG != null;
[L1267]              Balance[this] := 0;
[L1281]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1282]  COND FALSE  !(revert)
[L1456]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1457]  COND FALSE  !(revert)
[L1460]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1313]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1298]              assume msgsender_MSG != null;
[L1299]              Balance[this] := 0;
[L1313]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1314]  COND FALSE  !(revert)
[L1460]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1461]  COND FALSE  !(revert)
[L1464]  CALL        call Ducks_Ducks_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1417]              assume msgsender_MSG != null;
[L1418]              Balance[this] := 0;
[L1419]              name_Ducks[this] := 560717954;
[L1420]              symbol_Ducks[this] := 560717954;
[L1421]              decimals_Ducks[this] := 0;
[L1422]              _totalSupply_Ducks[this] := 0;
[L1423]              balances_Ducks[this] := zeroRefintArr();
[L1424]              sum_balances0[this] := 0;
[L1425]              allowed_Ducks[this] := zeroRefRefintArr();
[L1426]              sum_allowed1[this] := 0;
[L1428]              name_Ducks[this] := 1576131613;
[L1429]              symbol_Ducks[this] := -1943651461;
[L1430]              decimals_Ducks[this] := 18;
[L1431]              _totalSupply_Ducks[this] := 1500000000000000000000000;
[L1432]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][msgsender_MSG];
[L1433]              balances_Ducks[this][msgsender_MSG] := _totalSupply_Ducks[this];
[L1434]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][msgsender_MSG];
[L1435]              assert { :EventEmitted "Transfer_Ducks" } true;
[L1464]  RET         call Ducks_Ducks_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1465]  COND FALSE  !(revert)
[L421]   RET         call Ducks_Ducks__success(this, msgsender_MSG, msgvalue_MSG);
[L422]               assume !revert && gas >= 0;
[L2859]  RET         call Ducks_Ducks(this, msgsender_MSG, msgvalue_MSG);
Ducks(1500000000000000000000008).transfer~address~uint256.gas(3979002)({from : 1500000000000000000000003, to : 0, tokens : 6});
[L652]               havoc __exception;
[L653]               revert := false;
[L654]   COND FALSE  !(__exception)
[L675]   CALL        call success_s334 := transfer~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L1563]  COND TRUE   DType[this] == Ducks
[L1564]  CALL        call __var_2 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][msgsender_MSG], tokens_s334);
[L1348]  COND FALSE  !(!(b_s112 <= a_s112))
[L1352]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1564]  RET         call __var_2 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][msgsender_MSG], tokens_s334);
[L1565]  COND FALSE  !(revert)
[L1571]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][msgsender_MSG];
[L1572]              balances_Ducks[this][msgsender_MSG] := __var_2;
[L1573]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][msgsender_MSG];
[L1574]  COND TRUE   DType[this] == Ducks
[L1575]  CALL        call __var_3 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][to_s334], tokens_s334);
[L1330]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1331]  COND FALSE  !(!(c_s90 >= a_s90))
[L1575]  RET         call __var_3 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][to_s334], tokens_s334);
[L1576]  COND FALSE  !(revert)
[L1582]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][to_s334];
[L1583]              balances_Ducks[this][to_s334] := __var_3;
[L1584]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][to_s334];
[L1585]              assert { :EventEmitted "Transfer_Ducks" } true;
[L1586]              success_s334 := true;
[L675]   RET         call success_s334 := transfer~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L676]               assume !revert && gas >= 0;
[L2773]  RET         call success_s334 := transfer~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
Ducks(1500000000000000000000008).totalSupply.gas(3979003)({from : 1500000000000000000000004});
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _totalSupply_Ducks[this] >= 0 && _totalSupply_Ducks[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_totalSupply_Ducks0 := true;
[L2]                 call_totalSupply_Ducks0 := false;
[L2]                 revert := revert_hold;
[L448]               havoc __exception;
[L449]               revert := false;
[L450]   COND FALSE  !(__exception)
[L471]   CALL        call __ret_0_ := totalSupply_Ducks__success(this, msgsender_MSG, msgvalue_MSG);
[L1481]              __var_1 := null;
[L1482]              __ret_0_ := (_totalSupply_Ducks[this] - balances_Ducks[this][null]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L471]   RET         call __ret_0_ := totalSupply_Ducks__success(this, msgsender_MSG, msgvalue_MSG);
[L472]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((__ret_0_ == _totalSupply_Ducks[this] && _totalSupply_Ducks[this] == old(_totalSupply_Ducks[this])) && balances_Ducks[this] == old(balances_Ducks[this])) && allowed_Ducks[this] == old(allowed_Ducks[this])) && name_Ducks[this] == old(name_Ducks[this])) && symbol_Ducks[this] == old(symbol_Ducks[this])) && decimals_Ducks[this] == old(decimals_Ducks[this]));
[L2]                 revert := revert_hold;
[L2754]  RET         call __ret_0_totalSupply := totalSupply_Ducks(this, msgsender_MSG, msgvalue_MSG);

Loop:
Ducks(1500000000000000000000008).totalSupply.gas(3979001)({from : 1500000000000000000000012});
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _totalSupply_Ducks[this] >= 0 && _totalSupply_Ducks[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_totalSupply_Ducks0 := true;
[L2]                 call_totalSupply_Ducks0 := false;
[L2]                 revert := revert_hold;
[L448]               havoc __exception;
[L449]               revert := false;
[L450]   COND FALSE  !(__exception)
[L471]   CALL        call __ret_0_ := totalSupply_Ducks__success(this, msgsender_MSG, msgvalue_MSG);
[L1481]              __var_1 := null;
[L1482]              __ret_0_ := (_totalSupply_Ducks[this] - balances_Ducks[this][null]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L471]   RET         call __ret_0_ := totalSupply_Ducks__success(this, msgsender_MSG, msgvalue_MSG);
[L472]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((__ret_0_ == _totalSupply_Ducks[this] && _totalSupply_Ducks[this] == old(_totalSupply_Ducks[this])) && balances_Ducks[this] == old(balances_Ducks[this])) && allowed_Ducks[this] == old(allowed_Ducks[this])) && name_Ducks[this] == old(name_Ducks[this])) && symbol_Ducks[this] == old(symbol_Ducks[this])) && decimals_Ducks[this] == old(decimals_Ducks[this]));
[L2]                 revert := revert_hold;
[L2754]  RET         call __ret_0_totalSupply := totalSupply_Ducks(this, msgsender_MSG, msgvalue_MSG);

End of lasso representation.
RESULT: Ultimate could not prove your program: Toolchain returned no result.
Received shutdown request...
