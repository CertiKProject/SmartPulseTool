This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 02:33:11,196 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 02:33:11,197 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 02:33:11,209 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 02:33:11,209 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 02:33:11,210 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 02:33:11,211 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 02:33:11,212 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 02:33:11,214 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 02:33:11,214 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 02:33:11,215 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 02:33:11,216 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 02:33:11,216 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 02:33:11,217 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 02:33:11,218 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 02:33:11,219 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 02:33:11,219 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 02:33:11,220 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 02:33:11,222 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 02:33:11,223 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 02:33:11,224 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 02:33:11,225 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 02:33:11,226 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 02:33:11,226 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 02:33:11,227 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 02:33:11,227 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 02:33:11,228 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 02:33:11,228 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 02:33:11,228 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 02:33:11,229 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 02:33:11,229 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 02:33:11,230 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 02:33:11,230 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 02:33:11,231 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 02:33:11,231 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 02:33:11,231 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 02:33:11,232 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 02:33:11,232 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 02:33:11,232 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 02:33:11,233 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 02:33:11,234 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 02:33:11,234 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 02:33:11,242 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 02:33:11,242 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 02:33:11,243 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 02:33:11,243 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 02:33:11,244 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 02:33:11,244 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 02:33:11,244 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 02:33:11,244 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 02:33:11,244 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 02:33:11,244 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 02:33:11,244 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 02:33:11,244 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 02:33:11,245 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 02:33:11,245 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 02:33:11,245 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 02:33:11,245 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 02:33:11,245 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 02:33:11,245 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 02:33:11,245 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 02:33:11,245 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 02:33:11,246 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 02:33:11,246 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 02:33:11,246 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 02:33:11,246 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 02:33:11,246 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 02:33:11,246 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 02:33:11,274 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 02:33:11,289 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 02:33:11,292 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 02:33:11,293 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 02:33:11,294 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 02:33:11,294 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transferfrom-normal.bpl
[2020-11-25 02:33:11,294 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transferfrom-normal.bpl'
[2020-11-25 02:33:11,414 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 02:33:11,415 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 02:33:11,415 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 02:33:11,416 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 02:33:11,416 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 02:33:11,433 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:33:11" (1/1) ...
[2020-11-25 02:33:11,434 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:33:11" (1/1) ...
[2020-11-25 02:33:11,479 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:33:11" (1/1) ...
[2020-11-25 02:33:11,480 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:33:11" (1/1) ...
[2020-11-25 02:33:11,513 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:33:11" (1/1) ...
[2020-11-25 02:33:11,530 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:33:11" (1/1) ...
[2020-11-25 02:33:11,545 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:33:11" (1/1) ...
[2020-11-25 02:33:11,563 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 02:33:11,564 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 02:33:11,564 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 02:33:11,566 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 02:33:11,575 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:33:11" (1/1) ...
[2020-11-25 02:33:11,607 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(ERC20Pausable.transferFrom(from, to, value), p1 != from && p1 != to && (p2 != from || p3 != msg.sender) && from != to && value <= _balances_ERC20[this][from] && value <= _allowed_ERC20[this][from][msg.sender] && _balances_ERC20[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowed_ERC20[this][from][msg.sender] >= 0 && _allowed_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20Pausable.transferFrom(from, to, value), return == true && _balances_ERC20[this][from] == old(_balances_ERC20[this][from]) - value && _balances_ERC20[this][to] == old(_balances_ERC20[this][to]) + value && _allowed_ERC20[this][from][msg.sender] == old(_allowed_ERC20[this][from][msg.sender]) - value && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this][p1] == old(_balances_ERC20[this][p1]) && _allowed_ERC20[this][p2][p3] == old(_allowed_ERC20[this][p2][p3]) && _minters_MinterRole[this] == old(_minters_MinterRole[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]) && _paused_Pausable[this] == old(_paused_Pausable[this]) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]))))
[2020-11-25 02:33:11,613 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(ERC20Pausable.transferFrom(from, to, value), p1 != from && p1 != to && (p2 != from || p3 != msg.sender) && from != to && value <= _balances_ERC20[this][from] && value <= _allowed_ERC20[this][from][msg.sender] && _balances_ERC20[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowed_ERC20[this][from][msg.sender] >= 0 && _allowed_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20Pausable.transferFrom(from, to, value), return == true && _balances_ERC20[this][from] == old(_balances_ERC20[this][from]) - value && _balances_ERC20[this][to] == old(_balances_ERC20[this][to]) + value && _allowed_ERC20[this][from][msg.sender] == old(_allowed_ERC20[this][from][msg.sender]) - value && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this][p1] == old(_balances_ERC20[this][p1]) && _allowed_ERC20[this][p2][p3] == old(_allowed_ERC20[this][p2][p3]) && _minters_MinterRole[this] == old(_minters_MinterRole[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]) && _paused_Pausable[this] == old(_paused_Pausable[this]) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]))))
[2020-11-25 02:33:11,622 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(ERC20Pausable.transferFrom(from, to, value), p1 != from && p1 != to && (p2 != from || p3 != msg.sender) && from != to && value <= _balances_ERC20[this][from] && value <= _allowed_ERC20[this][from][msg.sender] && _balances_ERC20[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowed_ERC20[this][from][msg.sender] >= 0 && _allowed_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20Pausable.transferFrom(from, to, value), return == true && _balances_ERC20[this][from] == old(_balances_ERC20[this][from]) - value && _balances_ERC20[this][to] == old(_balances_ERC20[this][to]) + value && _allowed_ERC20[this][from][msg.sender] == old(_allowed_ERC20[this][from][msg.sender]) - value && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this][p1] == old(_balances_ERC20[this][p1]) && _allowed_ERC20[this][p2][p3] == old(_allowed_ERC20[this][p2][p3]) && _minters_MinterRole[this] == old(_minters_MinterRole[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]) && _paused_Pausable[this] == old(_paused_Pausable[this]) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]))))
[2020-11-25 02:33:11,635 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( ( ( ( ( p1!=from_s937 && p1!=to_s937 ) && ( p2!=from_s937 || p3!=msg.sender ) ) && from_s937!=to_s937 ) && value_s937<=_balances_ERC20[this][from_s937] ) && value_s937<=_allowed_ERC20[this][from_s937][msg.sender] ) && ( _balances_ERC20[this][to_s937] + value_s937 )<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && value_s937>=0 ) && value_s937<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][to_s937]>=0 ) && _balances_ERC20[this][to_s937]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][from_s937]>=0 ) && _balances_ERC20[this][from_s937]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _allowed_ERC20[this][from_s937][msg.sender]>=0 ) && _allowed_ERC20[this][from_s937][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[from_s937,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]],BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[to_s937,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],BinaryExpression[LOGICOR,BinaryExpression[COMPNEQ,IdentifierExpression[p2,GLOBAL],IdentifierExpression[from_s937,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]],BinaryExpression[COMPNEQ,IdentifierExpression[p3,GLOBAL],IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]]],BinaryExpression[COMPNEQ,IdentifierExpression[from_s937,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>],IdentifierExpression[to_s937,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],BinaryExpression[COMPLEQ,IdentifierExpression[value_s937,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[from_s937,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]]]],BinaryExpression[COMPLEQ,IdentifierExpression[value_s937,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>],ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[from_s937,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]]]],BinaryExpression[COMPLT,BinaryExpression[ARITHPLUS,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[to_s937,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],IdentifierExpression[value_s937,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,IdentifierExpression[value_s937,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[value_s937,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[to_s937,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[to_s937,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[from_s937,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[from_s937,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[from_s937,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[from_s937,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 02:33:11,639 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( ( ( __ret_0_==true && _balances_ERC20[this][from_s937]==( ( old(_balances_ERC20[this][from_s937]) ) - value_s937 ) ) && _balances_ERC20[this][to_s937]==( ( old(_balances_ERC20[this][to_s937]) ) + value_s937 ) ) && _allowed_ERC20[this][from_s937][msg.sender]==( ( old(_allowed_ERC20[this][from_s937][msg.sender]) ) - value_s937 ) ) && _totalSupply_ERC20[this]==( old(_totalSupply_ERC20[this]) ) ) && _balances_ERC20[this][p1]==( old(_balances_ERC20[this][p1]) ) ) && _allowed_ERC20[this][p2][p3]==( old(_allowed_ERC20[this][p2][p3]) ) ) && _minters_MinterRole[this]==( old(_minters_MinterRole[this]) ) ) && _name_ERC20Detailed[this]==( old(_name_ERC20Detailed[this]) ) ) && _symbol_ERC20Detailed[this]==( old(_symbol_ERC20Detailed[this]) ) ) && _decimals_ERC20Detailed[this]==( old(_decimals_ERC20Detailed[this]) ) ) && _paused_Pausable[this]==( old(_paused_Pausable[this]) ) ) && _pausers_PauserRole[this]==( old(_pausers_PauserRole[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[__ret_0_,<IMPLEMENTATION_OUTPARAM,transferFrom~address~address~uint256_ERC20Pausable>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[from_s937,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],BinaryExpression[ARITHMINUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[from_s937,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]]],IdentifierExpression[value_s937,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[to_s937,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],BinaryExpression[ARITHPLUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[to_s937,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]]],IdentifierExpression[value_s937,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[from_s937,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],BinaryExpression[ARITHMINUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[from_s937,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]]],IdentifierExpression[value_s937,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[p1,GLOBAL]]],UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[p1,GLOBAL]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[p2,GLOBAL]]],[IdentifierExpression[p3,GLOBAL]]],UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[p2,GLOBAL]]],[IdentifierExpression[p3,GLOBAL]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_minters_MinterRole,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_minters_MinterRole,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_name_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_name_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_symbol_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_symbol_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_decimals_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_decimals_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_paused_Pausable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_paused_Pausable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_pausers_PauserRole,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_pausers_PauserRole,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]]]]]
[2020-11-25 02:33:11,647 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(ERC20Pausable.transferFrom(from, to, value), p1 != from && p1 != to && (p2 != from || p3 != msg.sender) && from != to && value <= _balances_ERC20[this][from] && value <= _allowed_ERC20[this][from][msg.sender] && _balances_ERC20[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowed_ERC20[this][from][msg.sender] >= 0 && _allowed_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20Pausable.transferFrom(from, to, value), return == true && _balances_ERC20[this][from] == old(_balances_ERC20[this][from]) - value && _balances_ERC20[this][to] == old(_balances_ERC20[this][to]) + value && _allowed_ERC20[this][from][msg.sender] == old(_allowed_ERC20[this][from][msg.sender]) - value && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this][p1] == old(_balances_ERC20[this][p1]) && _allowed_ERC20[this][p2][p3] == old(_allowed_ERC20[this][p2][p3]) && _minters_MinterRole[this] == old(_minters_MinterRole[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]) && _paused_Pausable[this] == old(_paused_Pausable[this]) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]))))
[2020-11-25 02:33:11,648 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transferFrom_ERC20Pausable0) ==> ( <>AP(success_transferFrom_ERC20Pausable0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 02:33:11,667 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:33:11 PropertyContainer
[2020-11-25 02:33:11,667 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 02:33:11,667 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 02:33:11,668 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 02:33:11,668 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 02:33:11,669 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:33:11" (1/2) ...
[2020-11-25 02:33:11,669 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 02:33:11,669 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 02:33:11,694 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:33:11" (2/2) ...
[2020-11-25 02:33:11,694 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 02:33:11,695 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 02:33:11,695 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 02:33:11,695 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 02:33:11,696 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:33:11" (1/2) ...
[2020-11-25 02:33:11,754 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 02:33:11,755 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles.Role_ctor__success
[2020-11-25 02:33:11,755 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 02:33:11,755 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-25 02:33:11,755 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-25 02:33:11,755 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-25 02:33:11,755 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-25 02:33:11,755 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-25 02:33:11,755 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-25 02:33:11,755 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-25 02:33:11,756 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-25 02:33:11,756 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 02:33:11,756 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 02:33:11,756 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 02:33:11,756 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 02:33:11,756 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 02:33:11,757 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 02:33:11,757 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 02:33:11,757 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 02:33:11,757 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 02:33:11,757 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 02:33:11,757 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 02:33:11,757 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20
[2020-11-25 02:33:11,758 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20
[2020-11-25 02:33:11,758 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20
[2020-11-25 02:33:11,758 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20
[2020-11-25 02:33:11,758 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 02:33:11,758 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20
[2020-11-25 02:33:11,758 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20
[2020-11-25 02:33:11,758 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20
[2020-11-25 02:33:11,758 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 02:33:11,758 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20
[2020-11-25 02:33:11,758 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 02:33:11,759 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 02:33:11,759 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 02:33:11,759 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 02:33:11,759 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 02:33:11,759 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 02:33:11,759 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 02:33:11,759 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__success
[2020-11-25 02:33:11,759 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__success
[2020-11-25 02:33:11,759 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 02:33:11,759 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles_NoBaseCtor__success
[2020-11-25 02:33:11,760 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles
[2020-11-25 02:33:11,760 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles
[2020-11-25 02:33:11,760 INFO  L130     BoogieDeclarations]: Found specification of procedure add~Role~address_Roles__success
[2020-11-25 02:33:11,760 INFO  L130     BoogieDeclarations]: Found specification of procedure remove~Role~address_Roles__success
[2020-11-25 02:33:11,760 INFO  L130     BoogieDeclarations]: Found specification of procedure has~Role~address_Roles__success
[2020-11-25 02:33:11,760 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole_NoBaseCtor__success
[2020-11-25 02:33:11,760 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole
[2020-11-25 02:33:11,760 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole
[2020-11-25 02:33:11,760 INFO  L130     BoogieDeclarations]: Found specification of procedure isPauser~address_PauserRole
[2020-11-25 02:33:11,761 INFO  L138     BoogieDeclarations]: Found implementation of procedure isPauser~address_PauserRole
[2020-11-25 02:33:11,761 INFO  L130     BoogieDeclarations]: Found specification of procedure addPauser~address_PauserRole
[2020-11-25 02:33:11,761 INFO  L138     BoogieDeclarations]: Found implementation of procedure addPauser~address_PauserRole
[2020-11-25 02:33:11,761 INFO  L130     BoogieDeclarations]: Found specification of procedure renouncePauser_PauserRole
[2020-11-25 02:33:11,761 INFO  L138     BoogieDeclarations]: Found implementation of procedure renouncePauser_PauserRole
[2020-11-25 02:33:11,761 INFO  L130     BoogieDeclarations]: Found specification of procedure _addPauser~address_PauserRole__success
[2020-11-25 02:33:11,761 INFO  L130     BoogieDeclarations]: Found specification of procedure _removePauser~address_PauserRole__success
[2020-11-25 02:33:11,761 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-25 02:33:11,761 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable
[2020-11-25 02:33:11,761 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable
[2020-11-25 02:33:11,761 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable
[2020-11-25 02:33:11,762 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable
[2020-11-25 02:33:11,762 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable
[2020-11-25 02:33:11,762 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable
[2020-11-25 02:33:11,762 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable
[2020-11-25 02:33:11,762 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable
[2020-11-25 02:33:11,762 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__success
[2020-11-25 02:33:11,762 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable
[2020-11-25 02:33:11,762 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable
[2020-11-25 02:33:11,762 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Pausable
[2020-11-25 02:33:11,762 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Pausable
[2020-11-25 02:33:11,763 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Pausable
[2020-11-25 02:33:11,763 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Pausable
[2020-11-25 02:33:11,763 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Pausable
[2020-11-25 02:33:11,763 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20Pausable
[2020-11-25 02:33:11,763 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20Pausable
[2020-11-25 02:33:11,763 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20Pausable
[2020-11-25 02:33:11,763 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20Pausable
[2020-11-25 02:33:11,763 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20Pausable
[2020-11-25 02:33:11,763 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 02:33:11,764 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 02:33:11,764 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 02:33:11,764 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed
[2020-11-25 02:33:11,764 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed
[2020-11-25 02:33:11,764 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed
[2020-11-25 02:33:11,764 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed
[2020-11-25 02:33:11,764 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed
[2020-11-25 02:33:11,764 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed
[2020-11-25 02:33:11,764 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole_NoBaseCtor__success
[2020-11-25 02:33:11,764 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole
[2020-11-25 02:33:11,765 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole
[2020-11-25 02:33:11,765 INFO  L130     BoogieDeclarations]: Found specification of procedure isMinter~address_MinterRole
[2020-11-25 02:33:11,765 INFO  L138     BoogieDeclarations]: Found implementation of procedure isMinter~address_MinterRole
[2020-11-25 02:33:11,765 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_MinterRole
[2020-11-25 02:33:11,765 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_MinterRole
[2020-11-25 02:33:11,765 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceMinter_MinterRole
[2020-11-25 02:33:11,765 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceMinter_MinterRole
[2020-11-25 02:33:11,765 INFO  L130     BoogieDeclarations]: Found specification of procedure _addMinter~address_MinterRole__success
[2020-11-25 02:33:11,765 INFO  L130     BoogieDeclarations]: Found specification of procedure _removeMinter~address_MinterRole__success
[2020-11-25 02:33:11,765 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__success
[2020-11-25 02:33:11,766 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable
[2020-11-25 02:33:11,766 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable
[2020-11-25 02:33:11,766 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ERC20Mintable
[2020-11-25 02:33:11,766 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ERC20Mintable
[2020-11-25 02:33:11,766 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__success
[2020-11-25 02:33:11,766 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable
[2020-11-25 02:33:11,766 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable
[2020-11-25 02:33:11,766 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_ERC20Burnable
[2020-11-25 02:33:11,766 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_ERC20Burnable
[2020-11-25 02:33:11,766 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_ERC20Burnable
[2020-11-25 02:33:11,767 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_ERC20Burnable
[2020-11-25 02:33:11,767 INFO  L130     BoogieDeclarations]: Found specification of procedure OMToken_OMToken_NoBaseCtor__success
[2020-11-25 02:33:11,767 INFO  L130     BoogieDeclarations]: Found specification of procedure OMToken_OMToken
[2020-11-25 02:33:11,767 INFO  L138     BoogieDeclarations]: Found implementation of procedure OMToken_OMToken
[2020-11-25 02:33:11,767 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 02:33:11,767 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 02:33:11,767 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 02:33:11,767 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyPauser_pre__success
[2020-11-25 02:33:11,767 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__success
[2020-11-25 02:33:11,768 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__success
[2020-11-25 02:33:11,768 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyMinter_pre__success
[2020-11-25 02:33:11,768 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-25 02:33:11,768 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-25 02:33:11,768 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 02:33:11,768 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 02:33:11,768 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 02:33:11,768 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 02:33:11,768 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Roles
[2020-11-25 02:33:11,768 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Roles
[2020-11-25 02:33:11,769 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_PauserRole
[2020-11-25 02:33:11,769 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_PauserRole
[2020-11-25 02:33:11,769 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Pausable
[2020-11-25 02:33:11,769 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Pausable
[2020-11-25 02:33:11,769 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Pausable
[2020-11-25 02:33:11,769 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Pausable
[2020-11-25 02:33:11,769 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Detailed
[2020-11-25 02:33:11,769 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Detailed
[2020-11-25 02:33:11,769 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_MinterRole
[2020-11-25 02:33:11,769 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_MinterRole
[2020-11-25 02:33:11,770 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Mintable
[2020-11-25 02:33:11,770 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Mintable
[2020-11-25 02:33:11,770 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Burnable
[2020-11-25 02:33:11,770 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Burnable
[2020-11-25 02:33:11,770 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_OMToken
[2020-11-25 02:33:11,770 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 02:33:11,770 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 02:33:11,770 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles.Role_ctor__fail
[2020-11-25 02:33:11,770 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 02:33:11,771 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-25 02:33:11,771 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-25 02:33:11,771 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 02:33:11,771 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 02:33:11,771 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 02:33:11,771 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 02:33:11,771 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 02:33:11,771 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 02:33:11,771 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 02:33:11,771 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 02:33:11,772 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 02:33:11,772 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 02:33:11,772 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 02:33:11,772 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__success
[2020-11-25 02:33:11,772 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__fail
[2020-11-25 02:33:11,772 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__success
[2020-11-25 02:33:11,772 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__fail
[2020-11-25 02:33:11,772 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__success
[2020-11-25 02:33:11,772 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__fail
[2020-11-25 02:33:11,772 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__success
[2020-11-25 02:33:11,773 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 02:33:11,773 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__success
[2020-11-25 02:33:11,773 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__fail
[2020-11-25 02:33:11,773 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 02:33:11,773 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 02:33:11,773 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 02:33:11,773 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 02:33:11,773 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 02:33:11,773 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 02:33:11,773 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 02:33:11,773 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 02:33:11,774 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 02:33:11,774 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 02:33:11,774 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles_NoBaseCtor__fail
[2020-11-25 02:33:11,774 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles__success
[2020-11-25 02:33:11,774 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles__fail
[2020-11-25 02:33:11,775 INFO  L130     BoogieDeclarations]: Found specification of procedure add~Role~address_Roles__fail
[2020-11-25 02:33:11,775 INFO  L130     BoogieDeclarations]: Found specification of procedure remove~Role~address_Roles__fail
[2020-11-25 02:33:11,775 INFO  L130     BoogieDeclarations]: Found specification of procedure has~Role~address_Roles__fail
[2020-11-25 02:33:11,775 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole_NoBaseCtor__fail
[2020-11-25 02:33:11,775 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole__success
[2020-11-25 02:33:11,776 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole__fail
[2020-11-25 02:33:11,776 INFO  L130     BoogieDeclarations]: Found specification of procedure isPauser~address_PauserRole__success
[2020-11-25 02:33:11,776 INFO  L130     BoogieDeclarations]: Found specification of procedure isPauser~address_PauserRole__fail
[2020-11-25 02:33:11,776 INFO  L130     BoogieDeclarations]: Found specification of procedure addPauser~address_PauserRole__success
[2020-11-25 02:33:11,776 INFO  L130     BoogieDeclarations]: Found specification of procedure addPauser~address_PauserRole__fail
[2020-11-25 02:33:11,776 INFO  L130     BoogieDeclarations]: Found specification of procedure renouncePauser_PauserRole__success
[2020-11-25 02:33:11,776 INFO  L130     BoogieDeclarations]: Found specification of procedure renouncePauser_PauserRole__fail
[2020-11-25 02:33:11,776 INFO  L130     BoogieDeclarations]: Found specification of procedure _addPauser~address_PauserRole__fail
[2020-11-25 02:33:11,777 INFO  L130     BoogieDeclarations]: Found specification of procedure _removePauser~address_PauserRole__fail
[2020-11-25 02:33:11,777 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-25 02:33:11,777 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__success
[2020-11-25 02:33:11,777 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__fail
[2020-11-25 02:33:11,777 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__success
[2020-11-25 02:33:11,777 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__fail
[2020-11-25 02:33:11,777 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__success
[2020-11-25 02:33:11,777 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__fail
[2020-11-25 02:33:11,778 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__success
[2020-11-25 02:33:11,778 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__fail
[2020-11-25 02:33:11,778 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__fail
[2020-11-25 02:33:11,778 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable__success
[2020-11-25 02:33:11,778 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable__fail
[2020-11-25 02:33:11,778 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Pausable__success
[2020-11-25 02:33:11,778 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Pausable__fail
[2020-11-25 02:33:11,778 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Pausable__success
[2020-11-25 02:33:11,779 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Pausable__fail
[2020-11-25 02:33:11,779 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Pausable__success
[2020-11-25 02:33:11,779 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Pausable__fail
[2020-11-25 02:33:11,779 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20Pausable__success
[2020-11-25 02:33:11,779 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20Pausable__fail
[2020-11-25 02:33:11,779 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20Pausable__success
[2020-11-25 02:33:11,779 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20Pausable__fail
[2020-11-25 02:33:11,779 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 02:33:11,780 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 02:33:11,780 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 02:33:11,780 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__success
[2020-11-25 02:33:11,780 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__fail
[2020-11-25 02:33:11,780 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__success
[2020-11-25 02:33:11,780 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__fail
[2020-11-25 02:33:11,780 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__success
[2020-11-25 02:33:11,780 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__fail
[2020-11-25 02:33:11,781 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole_NoBaseCtor__fail
[2020-11-25 02:33:11,781 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole__success
[2020-11-25 02:33:11,781 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole__fail
[2020-11-25 02:33:11,781 INFO  L130     BoogieDeclarations]: Found specification of procedure isMinter~address_MinterRole__success
[2020-11-25 02:33:11,781 INFO  L130     BoogieDeclarations]: Found specification of procedure isMinter~address_MinterRole__fail
[2020-11-25 02:33:11,781 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_MinterRole__success
[2020-11-25 02:33:11,781 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_MinterRole__fail
[2020-11-25 02:33:11,781 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceMinter_MinterRole__success
[2020-11-25 02:33:11,782 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceMinter_MinterRole__fail
[2020-11-25 02:33:11,782 INFO  L130     BoogieDeclarations]: Found specification of procedure _addMinter~address_MinterRole__fail
[2020-11-25 02:33:11,782 INFO  L130     BoogieDeclarations]: Found specification of procedure _removeMinter~address_MinterRole__fail
[2020-11-25 02:33:11,782 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__fail
[2020-11-25 02:33:11,782 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable__success
[2020-11-25 02:33:11,782 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable__fail
[2020-11-25 02:33:11,782 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ERC20Mintable__success
[2020-11-25 02:33:11,782 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ERC20Mintable__fail
[2020-11-25 02:33:11,783 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__fail
[2020-11-25 02:33:11,783 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable__success
[2020-11-25 02:33:11,783 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable__fail
[2020-11-25 02:33:11,783 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_ERC20Burnable__success
[2020-11-25 02:33:11,783 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_ERC20Burnable__fail
[2020-11-25 02:33:11,783 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_ERC20Burnable__success
[2020-11-25 02:33:11,783 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_ERC20Burnable__fail
[2020-11-25 02:33:11,783 INFO  L130     BoogieDeclarations]: Found specification of procedure OMToken_OMToken_NoBaseCtor__fail
[2020-11-25 02:33:11,784 INFO  L130     BoogieDeclarations]: Found specification of procedure OMToken_OMToken__success
[2020-11-25 02:33:11,784 INFO  L130     BoogieDeclarations]: Found specification of procedure OMToken_OMToken__fail
[2020-11-25 02:33:11,784 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 02:33:11,784 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 02:33:11,784 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 02:33:11,784 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyPauser_pre__fail
[2020-11-25 02:33:11,784 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__fail
[2020-11-25 02:33:11,784 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__fail
[2020-11-25 02:33:11,785 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyMinter_pre__fail
[2020-11-25 02:33:11,785 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 02:33:11,785 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 02:33:11,785 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles.Role_ctor__fail
[2020-11-25 02:33:11,785 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles.Role_ctor__success
[2020-11-25 02:33:11,785 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 02:33:11,785 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 02:33:11,785 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-25 02:33:11,786 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-25 02:33:11,786 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 02:33:11,786 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 02:33:11,786 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 02:33:11,786 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 02:33:11,787 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 02:33:11,787 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 02:33:11,787 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 02:33:11,787 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 02:33:11,787 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 02:33:11,787 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 02:33:11,787 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 02:33:11,787 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 02:33:11,787 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 02:33:11,787 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 02:33:11,788 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 02:33:11,788 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 02:33:11,788 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 02:33:11,788 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 02:33:11,788 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__fail
[2020-11-25 02:33:11,788 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__success
[2020-11-25 02:33:11,788 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__fail
[2020-11-25 02:33:11,788 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__success
[2020-11-25 02:33:11,788 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__fail
[2020-11-25 02:33:11,788 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__success
[2020-11-25 02:33:11,788 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 02:33:11,789 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__success
[2020-11-25 02:33:11,789 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__fail
[2020-11-25 02:33:11,789 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__success
[2020-11-25 02:33:11,789 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 02:33:11,789 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 02:33:11,789 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 02:33:11,789 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 02:33:11,789 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 02:33:11,789 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 02:33:11,789 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 02:33:11,789 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 02:33:11,789 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 02:33:11,790 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__success
[2020-11-25 02:33:11,790 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 02:33:11,790 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__success
[2020-11-25 02:33:11,790 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 02:33:11,790 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 02:33:11,790 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles_NoBaseCtor__fail
[2020-11-25 02:33:11,790 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles_NoBaseCtor__success
[2020-11-25 02:33:11,790 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles__fail
[2020-11-25 02:33:11,790 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles__success
[2020-11-25 02:33:11,790 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~Role~address_Roles__fail
[2020-11-25 02:33:11,790 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~Role~address_Roles__success
[2020-11-25 02:33:11,790 INFO  L138     BoogieDeclarations]: Found implementation of procedure remove~Role~address_Roles__fail
[2020-11-25 02:33:11,791 INFO  L138     BoogieDeclarations]: Found implementation of procedure remove~Role~address_Roles__success
[2020-11-25 02:33:11,791 INFO  L138     BoogieDeclarations]: Found implementation of procedure has~Role~address_Roles__fail
[2020-11-25 02:33:11,791 INFO  L138     BoogieDeclarations]: Found implementation of procedure has~Role~address_Roles__success
[2020-11-25 02:33:11,791 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole_NoBaseCtor__fail
[2020-11-25 02:33:11,791 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole_NoBaseCtor__success
[2020-11-25 02:33:11,791 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole__fail
[2020-11-25 02:33:11,791 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole__success
[2020-11-25 02:33:11,791 INFO  L138     BoogieDeclarations]: Found implementation of procedure isPauser~address_PauserRole__fail
[2020-11-25 02:33:11,791 INFO  L138     BoogieDeclarations]: Found implementation of procedure isPauser~address_PauserRole__success
[2020-11-25 02:33:11,791 INFO  L138     BoogieDeclarations]: Found implementation of procedure addPauser~address_PauserRole__fail
[2020-11-25 02:33:11,791 INFO  L138     BoogieDeclarations]: Found implementation of procedure addPauser~address_PauserRole__success
[2020-11-25 02:33:11,791 INFO  L138     BoogieDeclarations]: Found implementation of procedure renouncePauser_PauserRole__fail
[2020-11-25 02:33:11,792 INFO  L138     BoogieDeclarations]: Found implementation of procedure renouncePauser_PauserRole__success
[2020-11-25 02:33:11,792 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addPauser~address_PauserRole__fail
[2020-11-25 02:33:11,792 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addPauser~address_PauserRole__success
[2020-11-25 02:33:11,792 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removePauser~address_PauserRole__fail
[2020-11-25 02:33:11,792 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removePauser~address_PauserRole__success
[2020-11-25 02:33:11,792 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-25 02:33:11,792 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-25 02:33:11,792 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__fail
[2020-11-25 02:33:11,792 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__success
[2020-11-25 02:33:11,792 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__fail
[2020-11-25 02:33:11,792 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__success
[2020-11-25 02:33:11,792 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__fail
[2020-11-25 02:33:11,793 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__success
[2020-11-25 02:33:11,793 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__fail
[2020-11-25 02:33:11,793 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__success
[2020-11-25 02:33:11,793 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__fail
[2020-11-25 02:33:11,793 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__success
[2020-11-25 02:33:11,793 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable__fail
[2020-11-25 02:33:11,793 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable__success
[2020-11-25 02:33:11,793 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Pausable__fail
[2020-11-25 02:33:11,793 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Pausable__success
[2020-11-25 02:33:11,793 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Pausable__fail
[2020-11-25 02:33:11,793 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Pausable__success
[2020-11-25 02:33:11,793 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20Pausable__fail
[2020-11-25 02:33:11,793 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20Pausable__success
[2020-11-25 02:33:11,794 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20Pausable__fail
[2020-11-25 02:33:11,794 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20Pausable__success
[2020-11-25 02:33:11,794 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20Pausable__fail
[2020-11-25 02:33:11,794 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20Pausable__success
[2020-11-25 02:33:11,794 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 02:33:11,794 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 02:33:11,794 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 02:33:11,794 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 02:33:11,794 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__fail
[2020-11-25 02:33:11,794 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__success
[2020-11-25 02:33:11,794 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__fail
[2020-11-25 02:33:11,794 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__success
[2020-11-25 02:33:11,794 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__fail
[2020-11-25 02:33:11,794 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__success
[2020-11-25 02:33:11,795 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole_NoBaseCtor__fail
[2020-11-25 02:33:11,795 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole_NoBaseCtor__success
[2020-11-25 02:33:11,795 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole__fail
[2020-11-25 02:33:11,795 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole__success
[2020-11-25 02:33:11,795 INFO  L138     BoogieDeclarations]: Found implementation of procedure isMinter~address_MinterRole__fail
[2020-11-25 02:33:11,795 INFO  L138     BoogieDeclarations]: Found implementation of procedure isMinter~address_MinterRole__success
[2020-11-25 02:33:11,795 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_MinterRole__fail
[2020-11-25 02:33:11,795 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_MinterRole__success
[2020-11-25 02:33:11,795 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceMinter_MinterRole__fail
[2020-11-25 02:33:11,795 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceMinter_MinterRole__success
[2020-11-25 02:33:11,795 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addMinter~address_MinterRole__fail
[2020-11-25 02:33:11,795 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addMinter~address_MinterRole__success
[2020-11-25 02:33:11,795 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removeMinter~address_MinterRole__fail
[2020-11-25 02:33:11,795 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removeMinter~address_MinterRole__success
[2020-11-25 02:33:11,796 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__fail
[2020-11-25 02:33:11,796 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__success
[2020-11-25 02:33:11,796 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable__fail
[2020-11-25 02:33:11,796 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable__success
[2020-11-25 02:33:11,796 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ERC20Mintable__fail
[2020-11-25 02:33:11,796 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ERC20Mintable__success
[2020-11-25 02:33:11,796 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__fail
[2020-11-25 02:33:11,796 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__success
[2020-11-25 02:33:11,796 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable__fail
[2020-11-25 02:33:11,796 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable__success
[2020-11-25 02:33:11,796 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_ERC20Burnable__fail
[2020-11-25 02:33:11,796 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_ERC20Burnable__success
[2020-11-25 02:33:11,796 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_ERC20Burnable__fail
[2020-11-25 02:33:11,797 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_ERC20Burnable__success
[2020-11-25 02:33:11,797 INFO  L138     BoogieDeclarations]: Found implementation of procedure OMToken_OMToken_NoBaseCtor__fail
[2020-11-25 02:33:11,797 INFO  L138     BoogieDeclarations]: Found implementation of procedure OMToken_OMToken_NoBaseCtor__success
[2020-11-25 02:33:11,797 INFO  L138     BoogieDeclarations]: Found implementation of procedure OMToken_OMToken__fail
[2020-11-25 02:33:11,797 INFO  L138     BoogieDeclarations]: Found implementation of procedure OMToken_OMToken__success
[2020-11-25 02:33:11,797 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 02:33:11,797 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 02:33:11,797 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 02:33:11,797 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 02:33:11,797 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 02:33:11,797 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 02:33:11,797 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyPauser_pre__fail
[2020-11-25 02:33:11,797 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyPauser_pre__success
[2020-11-25 02:33:11,797 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__fail
[2020-11-25 02:33:11,798 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__success
[2020-11-25 02:33:11,798 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__fail
[2020-11-25 02:33:11,798 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__success
[2020-11-25 02:33:11,798 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyMinter_pre__fail
[2020-11-25 02:33:11,798 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyMinter_pre__success
[2020-11-25 02:33:11,798 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-25 02:33:11,798 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-25 02:33:11,798 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 02:33:11,798 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 02:33:11,798 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 02:33:11,798 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 02:33:11,798 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Roles
[2020-11-25 02:33:11,798 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Roles
[2020-11-25 02:33:11,798 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_PauserRole
[2020-11-25 02:33:11,799 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_PauserRole
[2020-11-25 02:33:11,799 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Pausable
[2020-11-25 02:33:11,799 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Pausable
[2020-11-25 02:33:11,799 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Pausable
[2020-11-25 02:33:11,799 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Pausable
[2020-11-25 02:33:11,799 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Detailed
[2020-11-25 02:33:11,799 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Detailed
[2020-11-25 02:33:11,799 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_MinterRole
[2020-11-25 02:33:11,799 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_MinterRole
[2020-11-25 02:33:11,799 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Mintable
[2020-11-25 02:33:11,799 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Mintable
[2020-11-25 02:33:11,799 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Burnable
[2020-11-25 02:33:11,799 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Burnable
[2020-11-25 02:33:11,799 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_OMToken
[2020-11-25 02:33:11,800 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 02:33:11,800 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 02:33:11,800 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 02:33:12,405 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 02:33:12,406 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 02:33:12,406 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 02:33:12,881 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 02:33:13,091 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 02:33:13,091 INFO  L286             CfgBuilder]: Removed 12 assue(true) statements.
[2020-11-25 02:33:13,094 INFO  L202        PluginConnector]: Adding new model OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:33:13 BoogieIcfgContainer
[2020-11-25 02:33:13,094 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:33:11" (2/2) ...
[2020-11-25 02:33:13,094 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 02:33:13,094 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@594ea49c and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:33:13, skipping insertion in model container
[2020-11-25 02:33:13,094 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 02:33:13,094 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 02:33:13,094 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 02:33:13,095 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 02:33:13,095 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:33:11" (1/3) ...
[2020-11-25 02:33:13,096 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@799961e4 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:33:13, skipping insertion in model container
[2020-11-25 02:33:13,096 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:33:11" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 02:33:13,129 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:33:13 NWAContainer
[2020-11-25 02:33:13,129 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 02:33:13,129 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 02:33:13,129 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 02:33:13,130 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 02:33:13,131 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:33:13" (3/4) ...
[2020-11-25 02:33:13,131 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@7c14893b and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:33:13, skipping insertion in model container
[2020-11-25 02:33:13,131 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:33:13" (4/4) ...
[2020-11-25 02:33:13,134 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 02:33:13,139 INFO  L110   BuchiProductObserver]: Initial RCFG 3606 locations, 5219 edges
[2020-11-25 02:33:13,139 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 02:33:13,156 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 02:33:16,150 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 02:33:16,162 INFO  L110   BuchiProductObserver]: BuchiProgram size 9268 locations, 17164 edges
[2020-11-25 02:33:16,162 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:33:16 BoogieIcfgContainer
[2020-11-25 02:33:16,162 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 02:33:16,163 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 02:33:16,163 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 02:33:16,164 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 02:33:16,164 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:33:16" (1/1) ...
[2020-11-25 02:33:16,326 INFO  L313           BlockEncoder]: Initial Icfg 9268 locations, 17164 edges
[2020-11-25 02:33:16,326 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 02:33:16,327 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 02:33:16,327 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 02:33:16,327 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 02:33:16,345 INFO  L70    emoveInfeasibleEdges]: Removed 234 edges and 27 locations because of local infeasibility
[2020-11-25 02:33:16,361 INFO  L70        RemoveSinkStates]: Removed 116 edges and 77 locations by removing sink states
[2020-11-25 02:33:16,387 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 02:33:16,394 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 02:33:16,402 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 02:33:16,403 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 02:33:16,408 INFO  L313           BlockEncoder]: Encoded RCFG 9112 locations, 16737 edges
[2020-11-25 02:33:16,408 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 02:33:16 BasicIcfg
[2020-11-25 02:33:16,408 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 02:33:16,409 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 02:33:16,409 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 02:33:16,411 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 02:33:16,411 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 02:33:16,411 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:33:11" (1/6) ...
[2020-11-25 02:33:16,413 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@62df8e6e and model type OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 02:33:16, skipping insertion in model container
[2020-11-25 02:33:16,413 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 02:33:16,413 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:33:11" (2/6) ...
[2020-11-25 02:33:16,413 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@62df8e6e and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 02:33:16, skipping insertion in model container
[2020-11-25 02:33:16,413 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 02:33:16,414 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:33:13" (3/6) ...
[2020-11-25 02:33:16,414 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@62df8e6e and model type OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 02:33:16, skipping insertion in model container
[2020-11-25 02:33:16,414 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 02:33:16,414 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:33:13" (4/6) ...
[2020-11-25 02:33:16,414 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@62df8e6e and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 02:33:16, skipping insertion in model container
[2020-11-25 02:33:16,414 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 02:33:16,414 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:33:16" (5/6) ...
[2020-11-25 02:33:16,415 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@62df8e6e and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 02:33:16, skipping insertion in model container
[2020-11-25 02:33:16,415 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 02:33:16,415 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 02:33:16" (6/6) ...
[2020-11-25 02:33:16,416 INFO  L404   chiAutomizerObserver]: Analyzing ICFG OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transferfrom-normal.bpl_BEv2
[2020-11-25 02:33:16,454 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 02:33:16,454 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 02:33:16,454 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 02:33:16,454 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 02:33:16,454 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 02:33:16,454 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 02:33:16,454 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 02:33:16,454 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 02:33:16,455 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 02:33:16,528 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9112 states.
[2020-11-25 02:33:16,612 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:33:16,612 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:33:16,612 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:33:16,622 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:33:16,622 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:33:16,622 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 02:33:16,622 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9112 states.
[2020-11-25 02:33:16,664 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:33:16,664 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:33:16,664 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:33:16,667 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:33:16,667 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_ERC20Pausable0 := false;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L9914]              assume null == 0;
[L9915]  CALL        call this := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L9915]  RET         call this := FreshRefGenerator__success();
[L9916]              assume now >= 0;
[L9917]              assume DType[this] == OMToken;
[L9918]              assume msgvalue_MSG == 0;
[L9919]              gas := gas - 53000;
[L9920]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2715]              havoc __exception;
[L2716]              revert := false;
[L2717]  COND FALSE  !(__exception)
[L2744]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6181]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L6181]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6182]  COND TRUE   revert
[L2744]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2745]              assume !revert && gas >= 0;
[L9920]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9921]              assume !revert && gas >= 0;

Loop:
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND TRUE   choice == 23
[L9758]              gas := gas - 21000;
[L9759]  COND FALSE  !(gas >= 0)
[L9924]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:33:16,685 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:33:16,685 INFO  L82        PathProgramCache]: Analyzing trace with hash -1072228602, now seen corresponding path program 1 times
[2020-11-25 02:33:16,691 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:33:16,715 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:33:16,761 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 02:33:16,763 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:33:16,763 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 02:33:17,103 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:33:17,115 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 02:33:17,115 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 02:33:17,117 INFO  L87              Difference]: Start difference. First operand 9112 states. Second operand 4 states.
[2020-11-25 02:33:17,960 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:33:17,960 INFO  L93              Difference]: Finished difference Result 5022 states and 6074 transitions.
[2020-11-25 02:33:17,960 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 02:33:17,961 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5022 states and 6074 transitions.
[2020-11-25 02:33:17,987 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:33:18,031 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5022 states to 5022 states and 6074 transitions.
[2020-11-25 02:33:18,032 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-25 02:33:18,035 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 956
[2020-11-25 02:33:18,035 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5022 states and 6074 transitions.
[2020-11-25 02:33:18,053 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:33:18,053 INFO  L728         BuchiCegarLoop]: Abstraction has 5022 states and 6074 transitions.
[2020-11-25 02:33:18,070 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5022 states and 6074 transitions.
[2020-11-25 02:33:18,136 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5022 to 5022.
[2020-11-25 02:33:18,137 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5022 states.
[2020-11-25 02:33:18,143 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5022 states to 5022 states and 6074 transitions.
[2020-11-25 02:33:18,144 INFO  L751         BuchiCegarLoop]: Abstraction has 5022 states and 6074 transitions.
[2020-11-25 02:33:18,144 INFO  L631         BuchiCegarLoop]: Abstraction has 5022 states and 6074 transitions.
[2020-11-25 02:33:18,144 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 02:33:18,144 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5022 states and 6074 transitions.
[2020-11-25 02:33:18,155 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:33:18,155 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:33:18,155 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:33:18,157 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:33:18,157 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_ERC20Pausable0 := false;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L9914]              assume null == 0;
[L9915]  CALL        call this := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L9915]  RET         call this := FreshRefGenerator__success();
[L9916]              assume now >= 0;
[L9917]              assume DType[this] == OMToken;
[L9918]              assume msgvalue_MSG == 0;
[L9919]              gas := gas - 53000;
[L9920]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2715]              havoc __exception;
[L2716]              revert := false;
[L2717]  COND FALSE  !(__exception)
[L2744]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6181]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L6181]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6182]  COND TRUE   revert
[L2744]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2745]              assume !revert && gas >= 0;
[L9920]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9921]              assume !revert && gas >= 0;
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND FALSE  !(choice == 23)
[L9764]  COND FALSE  !(choice == 22)
[L9771]  COND TRUE   choice == 21
[L9772]              gas := gas - 21000;
[L9773]  COND TRUE   gas >= 0
[L9774]              assume value_s937 >= 0 && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9775]              assume msgvalue_MSG == 0;
[L9776]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s937 && p1 != to_s937) && (p2 != from_s937 || p3 != msgsender_MSG)) && from_s937 != to_s937) && value_s937 <= _balances_ERC20[this][from_s937]) && value_s937 <= _allowed_ERC20[this][from_s937][msgsender_MSG]) && _balances_ERC20[this][to_s937] + value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s937 >= 0) && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s937] >= 0) && _balances_ERC20[this][to_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s937] >= 0) && _balances_ERC20[this][from_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s937][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s937][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC20Pausable0 := true;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1578]              havoc __exception;
[L1579]              revert := false;
[L1580]  COND FALSE  !(__exception)
[L1607]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5406]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8321]  COND FALSE  !(!!_paused_Pausable[this])
[L5406]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5407]  COND TRUE   revert
[L1607]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L1608]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((__ret_0_ == true && _balances_ERC20[this][from_s937] == old(_balances_ERC20[this][from_s937]) - value_s937) && _balances_ERC20[this][to_s937] == old(_balances_ERC20[this][to_s937]) + value_s937) && _allowed_ERC20[this][from_s937][msgsender_MSG] == old(_allowed_ERC20[this][from_s937][msgsender_MSG]) - value_s937) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this][p1] == old(_balances_ERC20[this][p1])) && _allowed_ERC20[this][p2][p3] == old(_allowed_ERC20[this][p2][p3])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]));
[L3]                 revert := revert_hold;
[L9776]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L9924]  RET         call CorralChoice_OMToken(this);

Loop:
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND FALSE  !(choice == 23)
[L9764]  COND FALSE  !(choice == 22)
[L9771]  COND TRUE   choice == 21
[L9772]              gas := gas - 21000;
[L9773]  COND TRUE   gas >= 0
[L9774]              assume value_s937 >= 0 && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9775]              assume msgvalue_MSG == 0;
[L9776]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s937 && p1 != to_s937) && (p2 != from_s937 || p3 != msgsender_MSG)) && from_s937 != to_s937) && value_s937 <= _balances_ERC20[this][from_s937]) && value_s937 <= _allowed_ERC20[this][from_s937][msgsender_MSG]) && _balances_ERC20[this][to_s937] + value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s937 >= 0) && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s937] >= 0) && _balances_ERC20[this][to_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s937] >= 0) && _balances_ERC20[this][from_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s937][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s937][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC20Pausable0 := true;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1578]              havoc __exception;
[L1579]              revert := false;
[L1580]  COND FALSE  !(__exception)
[L1607]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5406]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8321]  COND FALSE  !(!!_paused_Pausable[this])
[L5406]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5407]  COND TRUE   revert
[L1607]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L1608]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((__ret_0_ == true && _balances_ERC20[this][from_s937] == old(_balances_ERC20[this][from_s937]) - value_s937) && _balances_ERC20[this][to_s937] == old(_balances_ERC20[this][to_s937]) + value_s937) && _allowed_ERC20[this][from_s937][msgsender_MSG] == old(_allowed_ERC20[this][from_s937][msgsender_MSG]) - value_s937) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this][p1] == old(_balances_ERC20[this][p1])) && _allowed_ERC20[this][p2][p3] == old(_allowed_ERC20[this][p2][p3])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]));
[L3]                 revert := revert_hold;
[L9776]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L9924]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:33:18,161 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:33:18,162 INFO  L82        PathProgramCache]: Analyzing trace with hash 1587039187, now seen corresponding path program 1 times
[2020-11-25 02:33:18,163 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:33:18,174 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:33:18,200 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 02:33:18,201 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:33:18,201 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 02:33:18,202 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:33:18,202 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 02:33:18,202 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 02:33:18,202 INFO  L87              Difference]: Start difference. First operand 5022 states and 6074 transitions. cyclomatic complexity: 1054 Second operand 3 states.
[2020-11-25 02:33:18,382 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:33:18,382 INFO  L93              Difference]: Finished difference Result 6852 states and 8301 transitions.
[2020-11-25 02:33:18,382 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 02:33:18,382 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6852 states and 8301 transitions.
[2020-11-25 02:33:18,401 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:33:18,428 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6852 states to 6852 states and 8301 transitions.
[2020-11-25 02:33:18,428 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1489
[2020-11-25 02:33:18,430 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1489
[2020-11-25 02:33:18,430 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6852 states and 8301 transitions.
[2020-11-25 02:33:18,437 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:33:18,437 INFO  L728         BuchiCegarLoop]: Abstraction has 6852 states and 8301 transitions.
[2020-11-25 02:33:18,443 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6852 states and 8301 transitions.
[2020-11-25 02:33:18,506 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6852 to 5976.
[2020-11-25 02:33:18,507 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5976 states.
[2020-11-25 02:33:18,515 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5976 states to 5976 states and 7245 transitions.
[2020-11-25 02:33:18,515 INFO  L751         BuchiCegarLoop]: Abstraction has 5976 states and 7245 transitions.
[2020-11-25 02:33:18,515 INFO  L631         BuchiCegarLoop]: Abstraction has 5976 states and 7245 transitions.
[2020-11-25 02:33:18,515 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 02:33:18,515 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5976 states and 7245 transitions.
[2020-11-25 02:33:18,524 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:33:18,524 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:33:18,524 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:33:18,526 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:33:18,526 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_ERC20Pausable0 := false;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L9914]              assume null == 0;
[L9915]  CALL        call this := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L9915]  RET         call this := FreshRefGenerator__success();
[L9916]              assume now >= 0;
[L9917]              assume DType[this] == OMToken;
[L9918]              assume msgvalue_MSG == 0;
[L9919]              gas := gas - 53000;
[L9920]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2715]              havoc __exception;
[L2716]              revert := false;
[L2717]  COND FALSE  !(__exception)
[L2744]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6181]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L6181]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6182]  COND FALSE  !(revert)
[L6185]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L6185]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6186]  COND FALSE  !(revert)
[L6189]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND FALSE  !(DType[this] == OMToken)
[L4943]  COND TRUE   DType[this] == ERC20Pausable
[L4944]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND TRUE   !(account_s659 != null)
[L4809]              revert := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND TRUE   revert
[L4944]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4945]  COND TRUE   revert
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND TRUE   revert
[L6189]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]  COND TRUE   revert
[L2744]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2745]              assume !revert && gas >= 0;
[L9920]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9921]              assume !revert && gas >= 0;
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND FALSE  !(choice == 23)
[L9764]  COND FALSE  !(choice == 22)
[L9771]  COND TRUE   choice == 21
[L9772]              gas := gas - 21000;
[L9773]  COND TRUE   gas >= 0
[L9774]              assume value_s937 >= 0 && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9775]              assume msgvalue_MSG == 0;
[L9776]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s937 && p1 != to_s937) && (p2 != from_s937 || p3 != msgsender_MSG)) && from_s937 != to_s937) && value_s937 <= _balances_ERC20[this][from_s937]) && value_s937 <= _allowed_ERC20[this][from_s937][msgsender_MSG]) && _balances_ERC20[this][to_s937] + value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s937 >= 0) && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s937] >= 0) && _balances_ERC20[this][to_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s937] >= 0) && _balances_ERC20[this][from_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s937][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s937][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC20Pausable0 := true;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1578]              havoc __exception;
[L1579]              revert := false;
[L1580]  COND FALSE  !(__exception)
[L1607]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5406]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8321]  COND TRUE   !!_paused_Pausable[this]
[L8322]              revert := true;
[L5406]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5407]  COND TRUE   revert
[L1607]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L1608]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((__ret_0_ == true && _balances_ERC20[this][from_s937] == old(_balances_ERC20[this][from_s937]) - value_s937) && _balances_ERC20[this][to_s937] == old(_balances_ERC20[this][to_s937]) + value_s937) && _allowed_ERC20[this][from_s937][msgsender_MSG] == old(_allowed_ERC20[this][from_s937][msgsender_MSG]) - value_s937) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this][p1] == old(_balances_ERC20[this][p1])) && _allowed_ERC20[this][p2][p3] == old(_allowed_ERC20[this][p2][p3])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]));
[L3]                 revert := revert_hold;
[L9776]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L9924]  RET         call CorralChoice_OMToken(this);

Loop:
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND FALSE  !(choice == 23)
[L9764]  COND FALSE  !(choice == 22)
[L9771]  COND TRUE   choice == 21
[L9772]              gas := gas - 21000;
[L9773]  COND TRUE   gas >= 0
[L9774]              assume value_s937 >= 0 && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9775]              assume msgvalue_MSG == 0;
[L9776]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s937 && p1 != to_s937) && (p2 != from_s937 || p3 != msgsender_MSG)) && from_s937 != to_s937) && value_s937 <= _balances_ERC20[this][from_s937]) && value_s937 <= _allowed_ERC20[this][from_s937][msgsender_MSG]) && _balances_ERC20[this][to_s937] + value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s937 >= 0) && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s937] >= 0) && _balances_ERC20[this][to_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s937] >= 0) && _balances_ERC20[this][from_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s937][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s937][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC20Pausable0 := true;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1578]              havoc __exception;
[L1579]              revert := false;
[L1580]  COND FALSE  !(__exception)
[L1607]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5406]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8321]  COND TRUE   !!_paused_Pausable[this]
[L8322]              revert := true;
[L5406]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5407]  COND TRUE   revert
[L1607]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L1608]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((__ret_0_ == true && _balances_ERC20[this][from_s937] == old(_balances_ERC20[this][from_s937]) - value_s937) && _balances_ERC20[this][to_s937] == old(_balances_ERC20[this][to_s937]) + value_s937) && _allowed_ERC20[this][from_s937][msgsender_MSG] == old(_allowed_ERC20[this][from_s937][msgsender_MSG]) - value_s937) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this][p1] == old(_balances_ERC20[this][p1])) && _allowed_ERC20[this][p2][p3] == old(_allowed_ERC20[this][p2][p3])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]));
[L3]                 revert := revert_hold;
[L9776]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L9924]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:33:18,529 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:33:18,530 INFO  L82        PathProgramCache]: Analyzing trace with hash 1478745540, now seen corresponding path program 1 times
[2020-11-25 02:33:18,531 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:33:18,539 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:33:18,621 INFO  L134       CoverageAnalysis]: Checked inductivity of 16 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 16 trivial. 0 not checked.
[2020-11-25 02:33:18,621 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:33:18,622 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 02:33:18,623 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:33:18,623 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 02:33:18,623 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 02:33:18,624 INFO  L87              Difference]: Start difference. First operand 5976 states and 7245 transitions. cyclomatic complexity: 1271 Second operand 7 states.
[2020-11-25 02:33:18,936 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:33:18,937 INFO  L93              Difference]: Finished difference Result 6027 states and 7316 transitions.
[2020-11-25 02:33:18,937 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 02:33:18,937 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6027 states and 7316 transitions.
[2020-11-25 02:33:18,974 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:33:18,994 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6027 states to 5988 states and 7260 transitions.
[2020-11-25 02:33:18,994 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1260
[2020-11-25 02:33:18,995 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1260
[2020-11-25 02:33:18,995 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5988 states and 7260 transitions.
[2020-11-25 02:33:19,000 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:33:19,000 INFO  L728         BuchiCegarLoop]: Abstraction has 5988 states and 7260 transitions.
[2020-11-25 02:33:19,005 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5988 states and 7260 transitions.
[2020-11-25 02:33:19,045 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5988 to 5988.
[2020-11-25 02:33:19,045 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5988 states.
[2020-11-25 02:33:19,052 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5988 states to 5988 states and 7260 transitions.
[2020-11-25 02:33:19,052 INFO  L751         BuchiCegarLoop]: Abstraction has 5988 states and 7260 transitions.
[2020-11-25 02:33:19,052 INFO  L631         BuchiCegarLoop]: Abstraction has 5988 states and 7260 transitions.
[2020-11-25 02:33:19,052 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 02:33:19,053 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5988 states and 7260 transitions.
[2020-11-25 02:33:19,060 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:33:19,061 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:33:19,061 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:33:19,062 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:33:19,062 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_ERC20Pausable0 := false;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L9914]              assume null == 0;
[L9915]  CALL        call this := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L9915]  RET         call this := FreshRefGenerator__success();
[L9916]              assume now >= 0;
[L9917]              assume DType[this] == OMToken;
[L9918]              assume msgvalue_MSG == 0;
[L9919]              gas := gas - 53000;
[L9920]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2715]              havoc __exception;
[L2716]              revert := false;
[L2717]  COND FALSE  !(__exception)
[L2744]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6181]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L6181]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6182]  COND FALSE  !(revert)
[L6185]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L6185]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6186]  COND FALSE  !(revert)
[L6189]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND TRUE   !(account_s659 != null)
[L4809]              revert := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND TRUE   revert
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND TRUE   revert
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND TRUE   revert
[L6189]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]  COND TRUE   revert
[L2744]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2745]              assume !revert && gas >= 0;
[L9920]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9921]              assume !revert && gas >= 0;
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND FALSE  !(choice == 23)
[L9764]  COND FALSE  !(choice == 22)
[L9771]  COND TRUE   choice == 21
[L9772]              gas := gas - 21000;
[L9773]  COND TRUE   gas >= 0
[L9774]              assume value_s937 >= 0 && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9775]              assume msgvalue_MSG == 0;
[L9776]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s937 && p1 != to_s937) && (p2 != from_s937 || p3 != msgsender_MSG)) && from_s937 != to_s937) && value_s937 <= _balances_ERC20[this][from_s937]) && value_s937 <= _allowed_ERC20[this][from_s937][msgsender_MSG]) && _balances_ERC20[this][to_s937] + value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s937 >= 0) && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s937] >= 0) && _balances_ERC20[this][to_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s937] >= 0) && _balances_ERC20[this][from_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s937][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s937][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC20Pausable0 := true;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1578]              havoc __exception;
[L1579]              revert := false;
[L1580]  COND FALSE  !(__exception)
[L1607]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5406]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8321]  COND TRUE   !!_paused_Pausable[this]
[L8322]              revert := true;
[L5406]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5407]  COND TRUE   revert
[L1607]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L1608]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((__ret_0_ == true && _balances_ERC20[this][from_s937] == old(_balances_ERC20[this][from_s937]) - value_s937) && _balances_ERC20[this][to_s937] == old(_balances_ERC20[this][to_s937]) + value_s937) && _allowed_ERC20[this][from_s937][msgsender_MSG] == old(_allowed_ERC20[this][from_s937][msgsender_MSG]) - value_s937) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this][p1] == old(_balances_ERC20[this][p1])) && _allowed_ERC20[this][p2][p3] == old(_allowed_ERC20[this][p2][p3])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]));
[L3]                 revert := revert_hold;
[L9776]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L9924]  RET         call CorralChoice_OMToken(this);

Loop:
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND FALSE  !(choice == 23)
[L9764]  COND FALSE  !(choice == 22)
[L9771]  COND TRUE   choice == 21
[L9772]              gas := gas - 21000;
[L9773]  COND TRUE   gas >= 0
[L9774]              assume value_s937 >= 0 && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9775]              assume msgvalue_MSG == 0;
[L9776]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s937 && p1 != to_s937) && (p2 != from_s937 || p3 != msgsender_MSG)) && from_s937 != to_s937) && value_s937 <= _balances_ERC20[this][from_s937]) && value_s937 <= _allowed_ERC20[this][from_s937][msgsender_MSG]) && _balances_ERC20[this][to_s937] + value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s937 >= 0) && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s937] >= 0) && _balances_ERC20[this][to_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s937] >= 0) && _balances_ERC20[this][from_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s937][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s937][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC20Pausable0 := true;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1578]              havoc __exception;
[L1579]              revert := false;
[L1580]  COND FALSE  !(__exception)
[L1607]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5406]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8321]  COND TRUE   !!_paused_Pausable[this]
[L8322]              revert := true;
[L5406]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5407]  COND TRUE   revert
[L1607]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L1608]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((__ret_0_ == true && _balances_ERC20[this][from_s937] == old(_balances_ERC20[this][from_s937]) - value_s937) && _balances_ERC20[this][to_s937] == old(_balances_ERC20[this][to_s937]) + value_s937) && _allowed_ERC20[this][from_s937][msgsender_MSG] == old(_allowed_ERC20[this][from_s937][msgsender_MSG]) - value_s937) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this][p1] == old(_balances_ERC20[this][p1])) && _allowed_ERC20[this][p2][p3] == old(_allowed_ERC20[this][p2][p3])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]));
[L3]                 revert := revert_hold;
[L9776]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L9924]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:33:19,073 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:33:19,073 INFO  L82        PathProgramCache]: Analyzing trace with hash -2062997582, now seen corresponding path program 1 times
[2020-11-25 02:33:19,074 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:33:19,082 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:33:19,114 INFO  L134       CoverageAnalysis]: Checked inductivity of 16 backedges. 0 proven. 7 refuted. 0 times theorem prover too weak. 9 trivial. 0 not checked.
[2020-11-25 02:33:19,114 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:33:19,114 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [9] total 9
[2020-11-25 02:33:19,115 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:33:19,115 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 02:33:19,115 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=15, Invalid=57, Unknown=0, NotChecked=0, Total=72
[2020-11-25 02:33:19,115 INFO  L87              Difference]: Start difference. First operand 5988 states and 7260 transitions. cyclomatic complexity: 1274 Second operand 9 states.
[2020-11-25 02:33:19,188 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:33:19,188 INFO  L93              Difference]: Finished difference Result 6046 states and 7352 transitions.
[2020-11-25 02:33:19,188 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 02:33:19,188 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6046 states and 7352 transitions.
[2020-11-25 02:33:19,201 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:33:19,217 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6046 states to 6046 states and 7352 transitions.
[2020-11-25 02:33:19,217 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1269
[2020-11-25 02:33:19,218 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1269
[2020-11-25 02:33:19,218 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6046 states and 7352 transitions.
[2020-11-25 02:33:19,225 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:33:19,225 INFO  L728         BuchiCegarLoop]: Abstraction has 6046 states and 7352 transitions.
[2020-11-25 02:33:19,230 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6046 states and 7352 transitions.
[2020-11-25 02:33:19,273 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6046 to 6009.
[2020-11-25 02:33:19,273 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6009 states.
[2020-11-25 02:33:19,280 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6009 states to 6009 states and 7300 transitions.
[2020-11-25 02:33:19,280 INFO  L751         BuchiCegarLoop]: Abstraction has 6009 states and 7300 transitions.
[2020-11-25 02:33:19,280 INFO  L631         BuchiCegarLoop]: Abstraction has 6009 states and 7300 transitions.
[2020-11-25 02:33:19,280 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 02:33:19,280 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6009 states and 7300 transitions.
[2020-11-25 02:33:19,287 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:33:19,287 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:33:19,287 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:33:19,288 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:33:19,288 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_ERC20Pausable0 := false;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L9914]              assume null == 0;
[L9915]  CALL        call this := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L9915]  RET         call this := FreshRefGenerator__success();
[L9916]              assume now >= 0;
[L9917]              assume DType[this] == OMToken;
[L9918]              assume msgvalue_MSG == 0;
[L9919]              gas := gas - 53000;
[L9920]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2715]              havoc __exception;
[L2716]              revert := false;
[L2717]  COND FALSE  !(__exception)
[L2744]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6181]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L6181]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6182]  COND FALSE  !(revert)
[L6185]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L6185]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6186]  COND FALSE  !(revert)
[L6189]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND FALSE  !(DType[this] == OMToken)
[L4943]  COND FALSE  !(DType[this] == ERC20Pausable)
[L4948]  COND TRUE   DType[this] == Pausable
[L4949]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND TRUE   !(account_s713 != null)
[L4880]              revert := true;
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND TRUE   revert
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND TRUE   revert
[L4949]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4950]  COND TRUE   revert
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND TRUE   revert
[L6189]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]  COND TRUE   revert
[L2744]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2745]              assume !revert && gas >= 0;
[L9920]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9921]              assume !revert && gas >= 0;
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND FALSE  !(choice == 23)
[L9764]  COND FALSE  !(choice == 22)
[L9771]  COND TRUE   choice == 21
[L9772]              gas := gas - 21000;
[L9773]  COND TRUE   gas >= 0
[L9774]              assume value_s937 >= 0 && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9775]              assume msgvalue_MSG == 0;
[L9776]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s937 && p1 != to_s937) && (p2 != from_s937 || p3 != msgsender_MSG)) && from_s937 != to_s937) && value_s937 <= _balances_ERC20[this][from_s937]) && value_s937 <= _allowed_ERC20[this][from_s937][msgsender_MSG]) && _balances_ERC20[this][to_s937] + value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s937 >= 0) && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s937] >= 0) && _balances_ERC20[this][to_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s937] >= 0) && _balances_ERC20[this][from_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s937][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s937][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC20Pausable0 := true;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1578]              havoc __exception;
[L1579]              revert := false;
[L1580]  COND FALSE  !(__exception)
[L1607]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5406]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8321]  COND TRUE   !!_paused_Pausable[this]
[L8322]              revert := true;
[L5406]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5407]  COND TRUE   revert
[L1607]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L1608]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((__ret_0_ == true && _balances_ERC20[this][from_s937] == old(_balances_ERC20[this][from_s937]) - value_s937) && _balances_ERC20[this][to_s937] == old(_balances_ERC20[this][to_s937]) + value_s937) && _allowed_ERC20[this][from_s937][msgsender_MSG] == old(_allowed_ERC20[this][from_s937][msgsender_MSG]) - value_s937) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this][p1] == old(_balances_ERC20[this][p1])) && _allowed_ERC20[this][p2][p3] == old(_allowed_ERC20[this][p2][p3])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]));
[L3]                 revert := revert_hold;
[L9776]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L9924]  RET         call CorralChoice_OMToken(this);

Loop:
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND FALSE  !(choice == 23)
[L9764]  COND FALSE  !(choice == 22)
[L9771]  COND TRUE   choice == 21
[L9772]              gas := gas - 21000;
[L9773]  COND TRUE   gas >= 0
[L9774]              assume value_s937 >= 0 && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9775]              assume msgvalue_MSG == 0;
[L9776]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s937 && p1 != to_s937) && (p2 != from_s937 || p3 != msgsender_MSG)) && from_s937 != to_s937) && value_s937 <= _balances_ERC20[this][from_s937]) && value_s937 <= _allowed_ERC20[this][from_s937][msgsender_MSG]) && _balances_ERC20[this][to_s937] + value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s937 >= 0) && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s937] >= 0) && _balances_ERC20[this][to_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s937] >= 0) && _balances_ERC20[this][from_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s937][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s937][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC20Pausable0 := true;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1578]              havoc __exception;
[L1579]              revert := false;
[L1580]  COND FALSE  !(__exception)
[L1607]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5406]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8321]  COND TRUE   !!_paused_Pausable[this]
[L8322]              revert := true;
[L5406]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5407]  COND TRUE   revert
[L1607]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L1608]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((__ret_0_ == true && _balances_ERC20[this][from_s937] == old(_balances_ERC20[this][from_s937]) - value_s937) && _balances_ERC20[this][to_s937] == old(_balances_ERC20[this][to_s937]) + value_s937) && _allowed_ERC20[this][from_s937][msgsender_MSG] == old(_allowed_ERC20[this][from_s937][msgsender_MSG]) - value_s937) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this][p1] == old(_balances_ERC20[this][p1])) && _allowed_ERC20[this][p2][p3] == old(_allowed_ERC20[this][p2][p3])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]));
[L3]                 revert := revert_hold;
[L9776]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L9924]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:33:19,291 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:33:19,292 INFO  L82        PathProgramCache]: Analyzing trace with hash 594299796, now seen corresponding path program 1 times
[2020-11-25 02:33:19,292 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:33:19,299 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:33:19,331 INFO  L134       CoverageAnalysis]: Checked inductivity of 16 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 16 trivial. 0 not checked.
[2020-11-25 02:33:19,331 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:33:19,331 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 02:33:19,332 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:33:19,332 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 02:33:19,332 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 02:33:19,332 INFO  L87              Difference]: Start difference. First operand 6009 states and 7300 transitions. cyclomatic complexity: 1293 Second operand 7 states.
[2020-11-25 02:33:19,460 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:33:19,461 INFO  L93              Difference]: Finished difference Result 6072 states and 7386 transitions.
[2020-11-25 02:33:19,461 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 02:33:19,461 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6072 states and 7386 transitions.
[2020-11-25 02:33:19,472 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:33:19,484 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6072 states to 6033 states and 7330 transitions.
[2020-11-25 02:33:19,485 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1260
[2020-11-25 02:33:19,485 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1260
[2020-11-25 02:33:19,485 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6033 states and 7330 transitions.
[2020-11-25 02:33:19,489 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:33:19,489 INFO  L728         BuchiCegarLoop]: Abstraction has 6033 states and 7330 transitions.
[2020-11-25 02:33:19,493 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6033 states and 7330 transitions.
[2020-11-25 02:33:19,525 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6033 to 6001.
[2020-11-25 02:33:19,525 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6001 states.
[2020-11-25 02:33:19,531 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6001 states to 6001 states and 7290 transitions.
[2020-11-25 02:33:19,531 INFO  L751         BuchiCegarLoop]: Abstraction has 6001 states and 7290 transitions.
[2020-11-25 02:33:19,531 INFO  L631         BuchiCegarLoop]: Abstraction has 6001 states and 7290 transitions.
[2020-11-25 02:33:19,531 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 02:33:19,531 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6001 states and 7290 transitions.
[2020-11-25 02:33:19,537 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:33:19,537 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:33:19,537 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:33:19,538 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:33:19,538 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_ERC20Pausable0 := false;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L9914]              assume null == 0;
[L9915]  CALL        call this := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L9915]  RET         call this := FreshRefGenerator__success();
[L9916]              assume now >= 0;
[L9917]              assume DType[this] == OMToken;
[L9918]              assume msgvalue_MSG == 0;
[L9919]              gas := gas - 53000;
[L9920]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2715]              havoc __exception;
[L2716]              revert := false;
[L2717]  COND FALSE  !(__exception)
[L2744]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6181]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L6181]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6182]  COND FALSE  !(revert)
[L6185]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L6185]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6186]  COND FALSE  !(revert)
[L6189]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND TRUE   !(account_s713 != null)
[L4880]              revert := true;
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND TRUE   revert
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND TRUE   revert
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND TRUE   revert
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND TRUE   revert
[L6189]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]  COND TRUE   revert
[L2744]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2745]              assume !revert && gas >= 0;
[L9920]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9921]              assume !revert && gas >= 0;
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND FALSE  !(choice == 23)
[L9764]  COND FALSE  !(choice == 22)
[L9771]  COND TRUE   choice == 21
[L9772]              gas := gas - 21000;
[L9773]  COND TRUE   gas >= 0
[L9774]              assume value_s937 >= 0 && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9775]              assume msgvalue_MSG == 0;
[L9776]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s937 && p1 != to_s937) && (p2 != from_s937 || p3 != msgsender_MSG)) && from_s937 != to_s937) && value_s937 <= _balances_ERC20[this][from_s937]) && value_s937 <= _allowed_ERC20[this][from_s937][msgsender_MSG]) && _balances_ERC20[this][to_s937] + value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s937 >= 0) && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s937] >= 0) && _balances_ERC20[this][to_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s937] >= 0) && _balances_ERC20[this][from_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s937][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s937][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC20Pausable0 := true;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1578]              havoc __exception;
[L1579]              revert := false;
[L1580]  COND FALSE  !(__exception)
[L1607]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5406]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8321]  COND TRUE   !!_paused_Pausable[this]
[L8322]              revert := true;
[L5406]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5407]  COND TRUE   revert
[L1607]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L1608]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((__ret_0_ == true && _balances_ERC20[this][from_s937] == old(_balances_ERC20[this][from_s937]) - value_s937) && _balances_ERC20[this][to_s937] == old(_balances_ERC20[this][to_s937]) + value_s937) && _allowed_ERC20[this][from_s937][msgsender_MSG] == old(_allowed_ERC20[this][from_s937][msgsender_MSG]) - value_s937) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this][p1] == old(_balances_ERC20[this][p1])) && _allowed_ERC20[this][p2][p3] == old(_allowed_ERC20[this][p2][p3])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]));
[L3]                 revert := revert_hold;
[L9776]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L9924]  RET         call CorralChoice_OMToken(this);

Loop:
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND FALSE  !(choice == 23)
[L9764]  COND FALSE  !(choice == 22)
[L9771]  COND TRUE   choice == 21
[L9772]              gas := gas - 21000;
[L9773]  COND TRUE   gas >= 0
[L9774]              assume value_s937 >= 0 && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9775]              assume msgvalue_MSG == 0;
[L9776]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s937 && p1 != to_s937) && (p2 != from_s937 || p3 != msgsender_MSG)) && from_s937 != to_s937) && value_s937 <= _balances_ERC20[this][from_s937]) && value_s937 <= _allowed_ERC20[this][from_s937][msgsender_MSG]) && _balances_ERC20[this][to_s937] + value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s937 >= 0) && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s937] >= 0) && _balances_ERC20[this][to_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s937] >= 0) && _balances_ERC20[this][from_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s937][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s937][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC20Pausable0 := true;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1578]              havoc __exception;
[L1579]              revert := false;
[L1580]  COND FALSE  !(__exception)
[L1607]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5406]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8321]  COND TRUE   !!_paused_Pausable[this]
[L8322]              revert := true;
[L5406]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5407]  COND TRUE   revert
[L1607]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L1608]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((__ret_0_ == true && _balances_ERC20[this][from_s937] == old(_balances_ERC20[this][from_s937]) - value_s937) && _balances_ERC20[this][to_s937] == old(_balances_ERC20[this][to_s937]) + value_s937) && _allowed_ERC20[this][from_s937][msgsender_MSG] == old(_allowed_ERC20[this][from_s937][msgsender_MSG]) - value_s937) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this][p1] == old(_balances_ERC20[this][p1])) && _allowed_ERC20[this][p2][p3] == old(_allowed_ERC20[this][p2][p3])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]));
[L3]                 revert := revert_hold;
[L9776]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L9924]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:33:19,541 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:33:19,541 INFO  L82        PathProgramCache]: Analyzing trace with hash -1977913179, now seen corresponding path program 1 times
[2020-11-25 02:33:19,542 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:33:19,549 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:33:19,580 INFO  L134       CoverageAnalysis]: Checked inductivity of 16 backedges. 0 proven. 7 refuted. 0 times theorem prover too weak. 9 trivial. 0 not checked.
[2020-11-25 02:33:19,580 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:33:19,580 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [10] total 10
[2020-11-25 02:33:19,580 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:33:19,580 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 10 interpolants.
[2020-11-25 02:33:19,580 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=17, Invalid=73, Unknown=0, NotChecked=0, Total=90
[2020-11-25 02:33:19,581 INFO  L87              Difference]: Start difference. First operand 6001 states and 7290 transitions. cyclomatic complexity: 1291 Second operand 10 states.
[2020-11-25 02:33:19,671 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:33:19,671 INFO  L93              Difference]: Finished difference Result 6073 states and 7400 transitions.
[2020-11-25 02:33:19,671 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-11-25 02:33:19,671 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6073 states and 7400 transitions.
[2020-11-25 02:33:19,682 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:33:19,693 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6073 states to 6073 states and 7400 transitions.
[2020-11-25 02:33:19,694 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1276
[2020-11-25 02:33:19,694 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1276
[2020-11-25 02:33:19,694 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6073 states and 7400 transitions.
[2020-11-25 02:33:19,698 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:33:19,698 INFO  L728         BuchiCegarLoop]: Abstraction has 6073 states and 7400 transitions.
[2020-11-25 02:33:19,703 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6073 states and 7400 transitions.
[2020-11-25 02:33:19,730 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6073 to 6008.
[2020-11-25 02:33:19,730 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6008 states.
[2020-11-25 02:33:19,736 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6008 states to 6008 states and 7299 transitions.
[2020-11-25 02:33:19,736 INFO  L751         BuchiCegarLoop]: Abstraction has 6008 states and 7299 transitions.
[2020-11-25 02:33:19,736 INFO  L631         BuchiCegarLoop]: Abstraction has 6008 states and 7299 transitions.
[2020-11-25 02:33:19,736 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 02:33:19,736 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6008 states and 7299 transitions.
[2020-11-25 02:33:19,742 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:33:19,742 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:33:19,742 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:33:19,743 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:33:19,743 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_ERC20Pausable0 := false;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L9914]              assume null == 0;
[L9915]  CALL        call this := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L9915]  RET         call this := FreshRefGenerator__success();
[L9916]              assume now >= 0;
[L9917]              assume DType[this] == OMToken;
[L9918]              assume msgvalue_MSG == 0;
[L9919]              gas := gas - 53000;
[L9920]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2715]              havoc __exception;
[L2716]              revert := false;
[L2717]  COND FALSE  !(__exception)
[L2744]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6181]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L6181]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6182]  COND FALSE  !(revert)
[L6185]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L6185]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6186]  COND FALSE  !(revert)
[L6189]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND TRUE   !!__var_18
[L4817]              revert := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND TRUE   revert
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND TRUE   revert
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND TRUE   revert
[L6189]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]  COND TRUE   revert
[L2744]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2745]              assume !revert && gas >= 0;
[L9920]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9921]              assume !revert && gas >= 0;
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND FALSE  !(choice == 23)
[L9764]  COND FALSE  !(choice == 22)
[L9771]  COND TRUE   choice == 21
[L9772]              gas := gas - 21000;
[L9773]  COND TRUE   gas >= 0
[L9774]              assume value_s937 >= 0 && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9775]              assume msgvalue_MSG == 0;
[L9776]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s937 && p1 != to_s937) && (p2 != from_s937 || p3 != msgsender_MSG)) && from_s937 != to_s937) && value_s937 <= _balances_ERC20[this][from_s937]) && value_s937 <= _allowed_ERC20[this][from_s937][msgsender_MSG]) && _balances_ERC20[this][to_s937] + value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s937 >= 0) && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s937] >= 0) && _balances_ERC20[this][to_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s937] >= 0) && _balances_ERC20[this][from_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s937][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s937][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC20Pausable0 := true;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1578]              havoc __exception;
[L1579]              revert := false;
[L1580]  COND FALSE  !(__exception)
[L1607]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5406]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8321]  COND TRUE   !!_paused_Pausable[this]
[L8322]              revert := true;
[L5406]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5407]  COND TRUE   revert
[L1607]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L1608]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((__ret_0_ == true && _balances_ERC20[this][from_s937] == old(_balances_ERC20[this][from_s937]) - value_s937) && _balances_ERC20[this][to_s937] == old(_balances_ERC20[this][to_s937]) + value_s937) && _allowed_ERC20[this][from_s937][msgsender_MSG] == old(_allowed_ERC20[this][from_s937][msgsender_MSG]) - value_s937) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this][p1] == old(_balances_ERC20[this][p1])) && _allowed_ERC20[this][p2][p3] == old(_allowed_ERC20[this][p2][p3])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]));
[L3]                 revert := revert_hold;
[L9776]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L9924]  RET         call CorralChoice_OMToken(this);

Loop:
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND FALSE  !(choice == 23)
[L9764]  COND FALSE  !(choice == 22)
[L9771]  COND TRUE   choice == 21
[L9772]              gas := gas - 21000;
[L9773]  COND TRUE   gas >= 0
[L9774]              assume value_s937 >= 0 && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9775]              assume msgvalue_MSG == 0;
[L9776]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s937 && p1 != to_s937) && (p2 != from_s937 || p3 != msgsender_MSG)) && from_s937 != to_s937) && value_s937 <= _balances_ERC20[this][from_s937]) && value_s937 <= _allowed_ERC20[this][from_s937][msgsender_MSG]) && _balances_ERC20[this][to_s937] + value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s937 >= 0) && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s937] >= 0) && _balances_ERC20[this][to_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s937] >= 0) && _balances_ERC20[this][from_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s937][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s937][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC20Pausable0 := true;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1578]              havoc __exception;
[L1579]              revert := false;
[L1580]  COND FALSE  !(__exception)
[L1607]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5406]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8321]  COND TRUE   !!_paused_Pausable[this]
[L8322]              revert := true;
[L5406]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5407]  COND TRUE   revert
[L1607]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L1608]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((__ret_0_ == true && _balances_ERC20[this][from_s937] == old(_balances_ERC20[this][from_s937]) - value_s937) && _balances_ERC20[this][to_s937] == old(_balances_ERC20[this][to_s937]) + value_s937) && _allowed_ERC20[this][from_s937][msgsender_MSG] == old(_allowed_ERC20[this][from_s937][msgsender_MSG]) - value_s937) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this][p1] == old(_balances_ERC20[this][p1])) && _allowed_ERC20[this][p2][p3] == old(_allowed_ERC20[this][p2][p3])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]));
[L3]                 revert := revert_hold;
[L9776]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L9924]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:33:19,746 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:33:19,746 INFO  L82        PathProgramCache]: Analyzing trace with hash 2145280288, now seen corresponding path program 1 times
[2020-11-25 02:33:19,747 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:33:19,754 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:33:19,775 INFO  L134       CoverageAnalysis]: Checked inductivity of 16 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 16 trivial. 0 not checked.
[2020-11-25 02:33:19,775 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:33:19,775 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 02:33:19,775 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:33:19,776 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 02:33:19,776 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 02:33:19,776 INFO  L87              Difference]: Start difference. First operand 6008 states and 7299 transitions. cyclomatic complexity: 1293 Second operand 3 states.
[2020-11-25 02:33:19,888 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:33:19,888 INFO  L93              Difference]: Finished difference Result 6872 states and 7933 transitions.
[2020-11-25 02:33:19,888 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 02:33:19,888 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6872 states and 7933 transitions.
[2020-11-25 02:33:19,903 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:33:19,919 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6872 states to 6168 states and 7078 transitions.
[2020-11-25 02:33:19,919 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1266
[2020-11-25 02:33:19,920 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1332
[2020-11-25 02:33:19,920 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6168 states and 7078 transitions.
[2020-11-25 02:33:19,923 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:33:19,923 INFO  L728         BuchiCegarLoop]: Abstraction has 6168 states and 7078 transitions.
[2020-11-25 02:33:19,928 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6168 states and 7078 transitions.
[2020-11-25 02:33:19,957 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6168 to 5424.
[2020-11-25 02:33:19,957 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5424 states.
[2020-11-25 02:33:19,963 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5424 states to 5424 states and 6154 transitions.
[2020-11-25 02:33:19,963 INFO  L751         BuchiCegarLoop]: Abstraction has 5424 states and 6154 transitions.
[2020-11-25 02:33:19,963 INFO  L631         BuchiCegarLoop]: Abstraction has 5424 states and 6154 transitions.
[2020-11-25 02:33:19,963 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 02:33:19,963 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5424 states and 6154 transitions.
[2020-11-25 02:33:19,970 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:33:19,970 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:33:19,970 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:33:19,973 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:33:19,973 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_ERC20Pausable0 := false;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L9914]              assume null == 0;
[L9915]  CALL        call this := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L9915]  RET         call this := FreshRefGenerator__success();
[L9916]              assume now >= 0;
[L9917]              assume DType[this] == OMToken;
[L9918]              assume msgvalue_MSG == 0;
[L9919]              gas := gas - 53000;
[L9920]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2715]              havoc __exception;
[L2716]              revert := false;
[L2717]  COND FALSE  !(__exception)
[L2744]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6181]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L6181]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6182]  COND FALSE  !(revert)
[L6185]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L6185]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6186]  COND FALSE  !(revert)
[L6189]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L6189]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]  COND FALSE  !(revert)
[L6193]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND FALSE  !(DType[this] == OMToken)
[L4943]  COND TRUE   DType[this] == ERC20Pausable
[L4944]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4944]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4945]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5187]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]  COND FALSE  !(revert)
[L5191]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5166]              assume msgsender_MSG != null;
[L5167]              Balance[this] := 0;
[L5168]              _paused_Pausable[this] := false;
[L5170]              _paused_Pausable[this] := false;
[L5191]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5192]  COND FALSE  !(revert)
[L6193]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6194]  COND FALSE  !(revert)
[L6197]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5305]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5305]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5306]  COND FALSE  !(revert)
[L5309]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L5309]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5310]  COND FALSE  !(revert)
[L5313]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND FALSE  !(DType[this] == OMToken)
[L4943]  COND TRUE   DType[this] == ERC20Pausable
[L4944]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4944]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4945]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5313]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5314]  COND FALSE  !(revert)
[L5317]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND FALSE  !(DType[this] == OMToken)
[L4943]  COND TRUE   DType[this] == ERC20Pausable
[L4944]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4944]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4945]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5187]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]  COND FALSE  !(revert)
[L5191]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5166]              assume msgsender_MSG != null;
[L5167]              Balance[this] := 0;
[L5168]              _paused_Pausable[this] := false;
[L5170]              _paused_Pausable[this] := false;
[L5191]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5192]  COND FALSE  !(revert)
[L5317]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5318]  COND FALSE  !(revert)
[L5321]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5274]              assume msgsender_MSG != null;
[L5275]              Balance[this] := 0;
[L5321]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5322]  COND FALSE  !(revert)
[L6197]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6198]  COND FALSE  !(revert)
[L6201]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L5619]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5619]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5620]  COND FALSE  !(revert)
[L5623]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5594]              assume msgsender_MSG != null;
[L5595]              Balance[this] := 0;
[L5596]              _name_ERC20Detailed[this] := -1676908070;
[L5597]              _symbol_ERC20Detailed[this] := -1676908070;
[L5598]              _decimals_ERC20Detailed[this] := 0;
[L5600]              _name_ERC20Detailed[this] := name_s1022;
[L5601]              _symbol_ERC20Detailed[this] := symbol_s1022;
[L5602]              _decimals_ERC20Detailed[this] := decimals_s1022;
[L5623]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5624]  COND FALSE  !(revert)
[L6201]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6202]  COND FALSE  !(revert)
[L6205]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5702]              assume msgsender_MSG != null;
[L5703]              Balance[this] := 0;
[L5705]  CALL        call __var_35 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L5705]  RET         call __var_35 := FreshRefGenerator__success();
[L5706]  COND FALSE  !(revert)
[L5709]              _minters_MinterRole[this] := __var_35;
[L5711]  COND FALSE  !(DType[this] == OMToken)
[L5716]  COND TRUE   DType[this] == ERC20Mintable
[L5717]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5877]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5877]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5878]  COND FALSE  !(revert)
[L5881]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5717]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5718]  COND FALSE  !(revert)
[L5743]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5744]  COND FALSE  !(revert)
[L6205]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6206]  COND FALSE  !(revert)
[L6209]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5939]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5939]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5940]  COND FALSE  !(revert)
[L5943]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L5943]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5944]  COND FALSE  !(revert)
[L5947]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5702]              assume msgsender_MSG != null;
[L5703]              Balance[this] := 0;
[L5705]  CALL        call __var_35 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L5705]  RET         call __var_35 := FreshRefGenerator__success();
[L5706]  COND FALSE  !(revert)
[L5709]              _minters_MinterRole[this] := __var_35;
[L5711]  COND FALSE  !(DType[this] == OMToken)
[L5716]  COND TRUE   DType[this] == ERC20Mintable
[L5717]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5877]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5877]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5878]  COND FALSE  !(revert)
[L5881]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5717]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5718]  COND FALSE  !(revert)
[L5743]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5744]  COND FALSE  !(revert)
[L5947]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5948]  COND FALSE  !(revert)
[L5951]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5912]              assume msgsender_MSG != null;
[L5913]              Balance[this] := 0;
[L5951]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]  COND FALSE  !(revert)
[L6209]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6210]  COND FALSE  !(revert)
[L6213]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6037]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L6037]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6038]  COND FALSE  !(revert)
[L6041]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L6041]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6042]  COND FALSE  !(revert)
[L6045]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6014]              assume msgsender_MSG != null;
[L6015]              Balance[this] := 0;
[L6045]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6046]  COND FALSE  !(revert)
[L6213]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6214]  COND FALSE  !(revert)
[L6217]  CALL        call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6130]              assume msgsender_MSG != null;
[L6131]              Balance[this] := 0;
[L6217]  RET         call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6218]  COND FALSE  !(revert)
[L2744]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2745]              assume !revert && gas >= 0;
[L9920]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9921]              assume !revert && gas >= 0;
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND FALSE  !(choice == 23)
[L9764]  COND FALSE  !(choice == 22)
[L9771]  COND TRUE   choice == 21
[L9772]              gas := gas - 21000;
[L9773]  COND TRUE   gas >= 0
[L9774]              assume value_s937 >= 0 && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9775]              assume msgvalue_MSG == 0;
[L9776]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s937 && p1 != to_s937) && (p2 != from_s937 || p3 != msgsender_MSG)) && from_s937 != to_s937) && value_s937 <= _balances_ERC20[this][from_s937]) && value_s937 <= _allowed_ERC20[this][from_s937][msgsender_MSG]) && _balances_ERC20[this][to_s937] + value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s937 >= 0) && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s937] >= 0) && _balances_ERC20[this][to_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s937] >= 0) && _balances_ERC20[this][from_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s937][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s937][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC20Pausable0 := true;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1578]              havoc __exception;
[L1579]              revert := false;
[L1580]  COND TRUE   __exception
[L1581]              __tmp__Balance := Balance;
[L1582]              __tmp__DType := DType;
[L1583]              __tmp__Alloc := Alloc;
[L1584]              __tmp__balance_ADDR := balance_ADDR;
[L1585]              __tmp__M_Ref_int := M_Ref_int;
[L1586]              __tmp__sum__balances0 := sum__balances0;
[L1587]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1588]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1589]              __tmp__sum__allowed1 := sum__allowed1;
[L1590]              __tmp__M_Ref_bool := M_Ref_bool;
[L1591]              __tmp__sum := sum;
[L1592]              __tmp__Length := Length;
[L1593]              __tmp__now := now;
[L1594]              __tmp___balances_ERC20 := _balances_ERC20;
[L1595]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L1596]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1597]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1598]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1599]              __tmp___paused_Pausable := _paused_Pausable;
[L1600]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1601]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1602]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1603]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1604]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5381]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8313]  COND TRUE   !!__tmp___paused_Pausable[this]
[L8314]              revert := true;
[L5381]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5382]  COND TRUE   revert
[L1604]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L1605]              assume revert || gas < 0;
[L9776]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L9924]  RET         call CorralChoice_OMToken(this);

Loop:
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND FALSE  !(choice == 23)
[L9764]  COND FALSE  !(choice == 22)
[L9771]  COND TRUE   choice == 21
[L9772]              gas := gas - 21000;
[L9773]  COND TRUE   gas >= 0
[L9774]              assume value_s937 >= 0 && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9775]              assume msgvalue_MSG == 0;
[L9776]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s937 && p1 != to_s937) && (p2 != from_s937 || p3 != msgsender_MSG)) && from_s937 != to_s937) && value_s937 <= _balances_ERC20[this][from_s937]) && value_s937 <= _allowed_ERC20[this][from_s937][msgsender_MSG]) && _balances_ERC20[this][to_s937] + value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s937 >= 0) && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s937] >= 0) && _balances_ERC20[this][to_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s937] >= 0) && _balances_ERC20[this][from_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s937][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s937][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC20Pausable0 := true;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1578]              havoc __exception;
[L1579]              revert := false;
[L1580]  COND TRUE   __exception
[L1581]              __tmp__Balance := Balance;
[L1582]              __tmp__DType := DType;
[L1583]              __tmp__Alloc := Alloc;
[L1584]              __tmp__balance_ADDR := balance_ADDR;
[L1585]              __tmp__M_Ref_int := M_Ref_int;
[L1586]              __tmp__sum__balances0 := sum__balances0;
[L1587]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1588]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1589]              __tmp__sum__allowed1 := sum__allowed1;
[L1590]              __tmp__M_Ref_bool := M_Ref_bool;
[L1591]              __tmp__sum := sum;
[L1592]              __tmp__Length := Length;
[L1593]              __tmp__now := now;
[L1594]              __tmp___balances_ERC20 := _balances_ERC20;
[L1595]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L1596]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1597]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1598]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1599]              __tmp___paused_Pausable := _paused_Pausable;
[L1600]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1601]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1602]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1603]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1604]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5381]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8313]  COND TRUE   !!__tmp___paused_Pausable[this]
[L8314]              revert := true;
[L5381]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5382]  COND TRUE   revert
[L1604]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L1605]              assume revert || gas < 0;
[L9776]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L9924]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:33:19,979 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:33:19,979 INFO  L82        PathProgramCache]: Analyzing trace with hash -791564848, now seen corresponding path program 1 times
[2020-11-25 02:33:19,980 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:33:20,010 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:33:20,171 INFO  L134       CoverageAnalysis]: Checked inductivity of 1022 backedges. 6 proven. 25 refuted. 0 times theorem prover too weak. 991 trivial. 0 not checked.
[2020-11-25 02:33:20,171 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:33:20,171 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [8] total 8
[2020-11-25 02:33:20,172 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:33:20,172 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 02:33:20,172 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 02:33:20,172 INFO  L87              Difference]: Start difference. First operand 5424 states and 6154 transitions. cyclomatic complexity: 732 Second operand 8 states.
[2020-11-25 02:33:20,303 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:33:20,303 INFO  L93              Difference]: Finished difference Result 5463 states and 6201 transitions.
[2020-11-25 02:33:20,303 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 02:33:20,303 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5463 states and 6201 transitions.
[2020-11-25 02:33:20,311 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:33:20,321 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5463 states to 5437 states and 6169 transitions.
[2020-11-25 02:33:20,321 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1163
[2020-11-25 02:33:20,322 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1163
[2020-11-25 02:33:20,322 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5437 states and 6169 transitions.
[2020-11-25 02:33:20,325 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:33:20,325 INFO  L728         BuchiCegarLoop]: Abstraction has 5437 states and 6169 transitions.
[2020-11-25 02:33:20,329 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5437 states and 6169 transitions.
[2020-11-25 02:33:20,354 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5437 to 5437.
[2020-11-25 02:33:20,354 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5437 states.
[2020-11-25 02:33:20,359 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5437 states to 5437 states and 6169 transitions.
[2020-11-25 02:33:20,359 INFO  L751         BuchiCegarLoop]: Abstraction has 5437 states and 6169 transitions.
[2020-11-25 02:33:20,359 INFO  L631         BuchiCegarLoop]: Abstraction has 5437 states and 6169 transitions.
[2020-11-25 02:33:20,359 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 02:33:20,359 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5437 states and 6169 transitions.
[2020-11-25 02:33:20,365 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:33:20,365 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:33:20,365 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:33:20,367 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:33:20,367 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_ERC20Pausable0 := false;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L9914]              assume null == 0;
[L9915]  CALL        call this := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L9915]  RET         call this := FreshRefGenerator__success();
[L9916]              assume now >= 0;
[L9917]              assume DType[this] == OMToken;
[L9918]              assume msgvalue_MSG == 0;
[L9919]              gas := gas - 53000;
[L9920]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2715]              havoc __exception;
[L2716]              revert := false;
[L2717]  COND TRUE   __exception
[L2718]              __tmp__Balance := Balance;
[L2719]              __tmp__DType := DType;
[L2720]              __tmp__Alloc := Alloc;
[L2721]              __tmp__balance_ADDR := balance_ADDR;
[L2722]              __tmp__M_Ref_int := M_Ref_int;
[L2723]              __tmp__sum__balances0 := sum__balances0;
[L2724]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L2725]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L2726]              __tmp__sum__allowed1 := sum__allowed1;
[L2727]              __tmp__M_Ref_bool := M_Ref_bool;
[L2728]              __tmp__sum := sum;
[L2729]              __tmp__Length := Length;
[L2730]              __tmp__now := now;
[L2731]              __tmp___balances_ERC20 := _balances_ERC20;
[L2732]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L2733]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2734]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2735]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2736]              __tmp___paused_Pausable := _paused_Pausable;
[L2737]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2738]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2739]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2740]              __tmp___minters_MinterRole := _minters_MinterRole;
[L2741]  CALL        call OMToken_OMToken__fail(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6137]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3982]              assume msgsender_MSG != null;
[L3983]              __tmp__Balance[this] := 0;
[L3997]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3998]  COND FALSE  !(revert)
[L6137]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6138]  COND FALSE  !(revert)
[L6141]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4195]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3982]              assume msgsender_MSG != null;
[L3983]              __tmp__Balance[this] := 0;
[L3997]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3998]  COND FALSE  !(revert)
[L4195]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4196]  COND FALSE  !(revert)
[L4199]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4170]              assume msgsender_MSG != null;
[L4171]              __tmp__Balance[this] := 0;
[L4172]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L4173]              __tmp__sum__balances0[this] := 0;
[L4174]              __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L4175]              __tmp__sum__allowed1[this] := 0;
[L4176]              __tmp___totalSupply_ERC20[this] := 0;
[L4199]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4200]  COND FALSE  !(revert)
[L6141]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6142]  COND FALSE  !(revert)
[L6145]  CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4966]  CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4891]              assume msgsender_MSG != null;
[L4892]              __tmp__Balance[this] := 0;
[L4894]  CALL        call __var_22 := FreshRefGenerator__fail();
[L3955]              havoc newRef;
[L3956]              assume __tmp__Alloc[newRef] == false;
[L3957]              __tmp__Alloc[newRef] := true;
[L3958]              assume newRef != null;
[L4894]  RET         call __var_22 := FreshRefGenerator__fail();
[L4895]  COND FALSE  !(revert)
[L4898]              __tmp___pausers_PauserRole[this] := __var_22;
[L4900]  COND TRUE   __tmp__DType[this] == OMToken
[L4901]  CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5121]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L4787]              __var_17 := null;
[L4788]  COND FALSE  !(!(account_s659 != null))
[L4792]  CALL        call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4866]              __var_21 := null;
[L4867]  COND FALSE  !(!(account_s713 != null))
[L4871]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s713]][account_s713];
[L4792]  RET         call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4793]  COND FALSE  !(revert)
[L4796]  COND FALSE  !(!!__var_18)
[L4800]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s659]][account_s659] := true;
[L5121]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L5122]  COND FALSE  !(revert)
[L4901]  RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4902]  COND FALSE  !(revert)
[L4966]  RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4967]  COND FALSE  !(revert)
[L6145]  RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6146]  COND FALSE  !(revert)
[L6149]  CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5175]  CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4966]  CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4891]              assume msgsender_MSG != null;
[L4892]              __tmp__Balance[this] := 0;
[L4894]  CALL        call __var_22 := FreshRefGenerator__fail();
[L3955]              havoc newRef;
[L3956]              assume __tmp__Alloc[newRef] == false;
[L3957]              __tmp__Alloc[newRef] := true;
[L3958]              assume newRef != null;
[L4894]  RET         call __var_22 := FreshRefGenerator__fail();
[L4895]  COND FALSE  !(revert)
[L4898]              __tmp___pausers_PauserRole[this] := __var_22;
[L4900]  COND TRUE   __tmp__DType[this] == OMToken
[L4901]  CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5121]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L4787]              __var_17 := null;
[L4788]  COND FALSE  !(!(account_s659 != null))
[L4792]  CALL        call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4866]              __var_21 := null;
[L4867]  COND FALSE  !(!(account_s713 != null))
[L4871]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s713]][account_s713];
[L4792]  RET         call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4793]  COND FALSE  !(revert)
[L4796]  COND FALSE  !(!!__var_18)
[L4800]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s659]][account_s659] := true;
[L5121]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L5122]  COND FALSE  !(revert)
[L4901]  RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4902]  COND FALSE  !(revert)
[L4966]  RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4967]  COND FALSE  !(revert)
[L5175]  RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5176]  COND FALSE  !(revert)
[L5179]  CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5156]              assume msgsender_MSG != null;
[L5157]              __tmp__Balance[this] := 0;
[L5158]              __tmp___paused_Pausable[this] := false;
[L5160]              __tmp___paused_Pausable[this] := false;
[L5179]  RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5180]  COND FALSE  !(revert)
[L6149]  RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6150]  COND FALSE  !(revert)
[L6153]  CALL        call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5281]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3982]              assume msgsender_MSG != null;
[L3983]              __tmp__Balance[this] := 0;
[L3997]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3998]  COND FALSE  !(revert)
[L5281]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5282]  COND FALSE  !(revert)
[L5285]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4195]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3982]              assume msgsender_MSG != null;
[L3983]              __tmp__Balance[this] := 0;
[L3997]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3998]  COND FALSE  !(revert)
[L4195]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4196]  COND FALSE  !(revert)
[L4199]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4170]              assume msgsender_MSG != null;
[L4171]              __tmp__Balance[this] := 0;
[L4172]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L4173]              __tmp__sum__balances0[this] := 0;
[L4174]              __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L4175]              __tmp__sum__allowed1[this] := 0;
[L4176]              __tmp___totalSupply_ERC20[this] := 0;
[L4199]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4200]  COND FALSE  !(revert)
[L5285]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5286]  COND FALSE  !(revert)
[L5289]  CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4966]  CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4891]              assume msgsender_MSG != null;
[L4892]              __tmp__Balance[this] := 0;
[L4894]  CALL        call __var_22 := FreshRefGenerator__fail();
[L3955]              havoc newRef;
[L3956]              assume __tmp__Alloc[newRef] == false;
[L3957]              __tmp__Alloc[newRef] := true;
[L3958]              assume newRef != null;
[L4894]  RET         call __var_22 := FreshRefGenerator__fail();
[L4895]  COND FALSE  !(revert)
[L4898]              __tmp___pausers_PauserRole[this] := __var_22;
[L4900]  COND TRUE   __tmp__DType[this] == OMToken
[L4901]  CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5121]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L4787]              __var_17 := null;
[L4788]  COND FALSE  !(!(account_s659 != null))
[L4792]  CALL        call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4866]              __var_21 := null;
[L4867]  COND FALSE  !(!(account_s713 != null))
[L4871]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s713]][account_s713];
[L4792]  RET         call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4793]  COND FALSE  !(revert)
[L4796]  COND FALSE  !(!!__var_18)
[L4800]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s659]][account_s659] := true;
[L5121]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L5122]  COND FALSE  !(revert)
[L4901]  RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4902]  COND FALSE  !(revert)
[L4966]  RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4967]  COND FALSE  !(revert)
[L5289]  RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5290]  COND FALSE  !(revert)
[L5293]  CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5175]  CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4966]  CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4891]              assume msgsender_MSG != null;
[L4892]              __tmp__Balance[this] := 0;
[L4894]  CALL        call __var_22 := FreshRefGenerator__fail();
[L3955]              havoc newRef;
[L3956]              assume __tmp__Alloc[newRef] == false;
[L3957]              __tmp__Alloc[newRef] := true;
[L3958]              assume newRef != null;
[L4894]  RET         call __var_22 := FreshRefGenerator__fail();
[L4895]  COND FALSE  !(revert)
[L4898]              __tmp___pausers_PauserRole[this] := __var_22;
[L4900]  COND TRUE   __tmp__DType[this] == OMToken
[L4901]  CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5121]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L4787]              __var_17 := null;
[L4788]  COND FALSE  !(!(account_s659 != null))
[L4792]  CALL        call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4866]              __var_21 := null;
[L4867]  COND FALSE  !(!(account_s713 != null))
[L4871]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s713]][account_s713];
[L4792]  RET         call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4793]  COND FALSE  !(revert)
[L4796]  COND FALSE  !(!!__var_18)
[L4800]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s659]][account_s659] := true;
[L5121]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L5122]  COND FALSE  !(revert)
[L4901]  RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4902]  COND FALSE  !(revert)
[L4966]  RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4967]  COND FALSE  !(revert)
[L5175]  RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5176]  COND FALSE  !(revert)
[L5179]  CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5156]              assume msgsender_MSG != null;
[L5157]              __tmp__Balance[this] := 0;
[L5158]              __tmp___paused_Pausable[this] := false;
[L5160]              __tmp___paused_Pausable[this] := false;
[L5179]  RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5180]  COND FALSE  !(revert)
[L5293]  RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5294]  COND FALSE  !(revert)
[L5297]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5266]              assume msgsender_MSG != null;
[L5267]              __tmp__Balance[this] := 0;
[L5297]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5298]  COND FALSE  !(revert)
[L6153]  RET         call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6154]  COND FALSE  !(revert)
[L6157]  CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L5607]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3982]              assume msgsender_MSG != null;
[L3983]              __tmp__Balance[this] := 0;
[L3997]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3998]  COND FALSE  !(revert)
[L5607]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5608]  COND FALSE  !(revert)
[L5611]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5580]              assume msgsender_MSG != null;
[L5581]              __tmp__Balance[this] := 0;
[L5582]              __tmp___name_ERC20Detailed[this] := -1676908070;
[L5583]              __tmp___symbol_ERC20Detailed[this] := -1676908070;
[L5584]              __tmp___decimals_ERC20Detailed[this] := 0;
[L5586]              __tmp___name_ERC20Detailed[this] := name_s1022;
[L5587]              __tmp___symbol_ERC20Detailed[this] := symbol_s1022;
[L5588]              __tmp___decimals_ERC20Detailed[this] := decimals_s1022;
[L5611]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5612]  COND FALSE  !(revert)
[L6157]  RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6158]  COND FALSE  !(revert)
[L6161]  CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5734]  CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5669]              assume msgsender_MSG != null;
[L5670]              __tmp__Balance[this] := 0;
[L5672]  CALL        call __var_35 := FreshRefGenerator__fail();
[L3955]              havoc newRef;
[L3956]              assume __tmp__Alloc[newRef] == false;
[L3957]              __tmp__Alloc[newRef] := true;
[L3958]              assume newRef != null;
[L5672]  RET         call __var_35 := FreshRefGenerator__fail();
[L5673]  COND FALSE  !(revert)
[L5676]              __tmp___minters_MinterRole[this] := __var_35;
[L5678]  COND TRUE   __tmp__DType[this] == OMToken
[L5679]  CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5869]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1130);
[L4787]              __var_17 := null;
[L4788]  COND FALSE  !(!(account_s659 != null))
[L4792]  CALL        call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4866]              __var_21 := null;
[L4867]  COND FALSE  !(!(account_s713 != null))
[L4871]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s713]][account_s713];
[L4792]  RET         call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4793]  COND FALSE  !(revert)
[L4796]  COND FALSE  !(!!__var_18)
[L4800]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s659]][account_s659] := true;
[L5869]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1130);
[L5870]  COND FALSE  !(revert)
[L5679]  RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5680]  COND FALSE  !(revert)
[L5734]  RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5735]  COND FALSE  !(revert)
[L6161]  RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6162]  COND FALSE  !(revert)
[L6165]  CALL        call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5919]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3982]              assume msgsender_MSG != null;
[L3983]              __tmp__Balance[this] := 0;
[L3997]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3998]  COND FALSE  !(revert)
[L5919]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5920]  COND FALSE  !(revert)
[L5923]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4195]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3982]              assume msgsender_MSG != null;
[L3983]              __tmp__Balance[this] := 0;
[L3997]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3998]  COND FALSE  !(revert)
[L4195]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4196]  COND FALSE  !(revert)
[L4199]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4170]              assume msgsender_MSG != null;
[L4171]              __tmp__Balance[this] := 0;
[L4172]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L4173]              __tmp__sum__balances0[this] := 0;
[L4174]              __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L4175]              __tmp__sum__allowed1[this] := 0;
[L4176]              __tmp___totalSupply_ERC20[this] := 0;
[L4199]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4200]  COND FALSE  !(revert)
[L5923]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5924]  COND FALSE  !(revert)
[L5927]  CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5734]  CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5669]              assume msgsender_MSG != null;
[L5670]              __tmp__Balance[this] := 0;
[L5672]  CALL        call __var_35 := FreshRefGenerator__fail();
[L3955]              havoc newRef;
[L3956]              assume __tmp__Alloc[newRef] == false;
[L3957]              __tmp__Alloc[newRef] := true;
[L3958]              assume newRef != null;
[L5672]  RET         call __var_35 := FreshRefGenerator__fail();
[L5673]  COND FALSE  !(revert)
[L5676]              __tmp___minters_MinterRole[this] := __var_35;
[L5678]  COND TRUE   __tmp__DType[this] == OMToken
[L5679]  CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5869]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1130);
[L4787]              __var_17 := null;
[L4788]  COND FALSE  !(!(account_s659 != null))
[L4792]  CALL        call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4866]              __var_21 := null;
[L4867]  COND FALSE  !(!(account_s713 != null))
[L4871]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s713]][account_s713];
[L4792]  RET         call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4793]  COND FALSE  !(revert)
[L4796]  COND FALSE  !(!!__var_18)
[L4800]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s659]][account_s659] := true;
[L5869]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1130);
[L5870]  COND FALSE  !(revert)
[L5679]  RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5680]  COND FALSE  !(revert)
[L5734]  RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5735]  COND FALSE  !(revert)
[L5927]  RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5928]  COND FALSE  !(revert)
[L5931]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5904]              assume msgsender_MSG != null;
[L5905]              __tmp__Balance[this] := 0;
[L5931]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5932]  COND FALSE  !(revert)
[L6165]  RET         call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6166]  COND FALSE  !(revert)
[L6169]  CALL        call ERC20Burnable_ERC20Burnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6021]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3982]              assume msgsender_MSG != null;
[L3983]              __tmp__Balance[this] := 0;
[L3997]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3998]  COND FALSE  !(revert)
[L6021]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6022]  COND FALSE  !(revert)
[L6025]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4195]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3982]              assume msgsender_MSG != null;
[L3983]              __tmp__Balance[this] := 0;
[L3997]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3998]  COND FALSE  !(revert)
[L4195]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4196]  COND FALSE  !(revert)
[L4199]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4170]              assume msgsender_MSG != null;
[L4171]              __tmp__Balance[this] := 0;
[L4172]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L4173]              __tmp__sum__balances0[this] := 0;
[L4174]              __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L4175]              __tmp__sum__allowed1[this] := 0;
[L4176]              __tmp___totalSupply_ERC20[this] := 0;
[L4199]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4200]  COND FALSE  !(revert)
[L6025]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6026]  COND FALSE  !(revert)
[L6029]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6006]              assume msgsender_MSG != null;
[L6007]              __tmp__Balance[this] := 0;
[L6029]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6030]  COND FALSE  !(revert)
[L6169]  RET         call ERC20Burnable_ERC20Burnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6170]  COND FALSE  !(revert)
[L6173]  CALL        call OMToken_OMToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6122]              assume msgsender_MSG != null;
[L6123]              __tmp__Balance[this] := 0;
[L6173]  RET         call OMToken_OMToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6174]  COND FALSE  !(revert)
[L2741]  RET         call OMToken_OMToken__fail(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2742]              assume revert || gas < 0;
[L9920]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9921]              assume !revert && gas >= 0;
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND FALSE  !(choice == 23)
[L9764]  COND FALSE  !(choice == 22)
[L9771]  COND TRUE   choice == 21
[L9772]              gas := gas - 21000;
[L9773]  COND TRUE   gas >= 0
[L9774]              assume value_s937 >= 0 && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9775]              assume msgvalue_MSG == 0;
[L9776]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s937 && p1 != to_s937) && (p2 != from_s937 || p3 != msgsender_MSG)) && from_s937 != to_s937) && value_s937 <= _balances_ERC20[this][from_s937]) && value_s937 <= _allowed_ERC20[this][from_s937][msgsender_MSG]) && _balances_ERC20[this][to_s937] + value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s937 >= 0) && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s937] >= 0) && _balances_ERC20[this][to_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s937] >= 0) && _balances_ERC20[this][from_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s937][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s937][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC20Pausable0 := true;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1578]              havoc __exception;
[L1579]              revert := false;
[L1580]  COND TRUE   __exception
[L1581]              __tmp__Balance := Balance;
[L1582]              __tmp__DType := DType;
[L1583]              __tmp__Alloc := Alloc;
[L1584]              __tmp__balance_ADDR := balance_ADDR;
[L1585]              __tmp__M_Ref_int := M_Ref_int;
[L1586]              __tmp__sum__balances0 := sum__balances0;
[L1587]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1588]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1589]              __tmp__sum__allowed1 := sum__allowed1;
[L1590]              __tmp__M_Ref_bool := M_Ref_bool;
[L1591]              __tmp__sum := sum;
[L1592]              __tmp__Length := Length;
[L1593]              __tmp__now := now;
[L1594]              __tmp___balances_ERC20 := _balances_ERC20;
[L1595]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L1596]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1597]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1598]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1599]              __tmp___paused_Pausable := _paused_Pausable;
[L1600]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1601]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1602]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1603]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1604]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5381]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8313]  COND TRUE   !!__tmp___paused_Pausable[this]
[L8314]              revert := true;
[L5381]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5382]  COND TRUE   revert
[L1604]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L1605]              assume revert || gas < 0;
[L9776]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L9924]  RET         call CorralChoice_OMToken(this);

Loop:
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND FALSE  !(choice == 23)
[L9764]  COND FALSE  !(choice == 22)
[L9771]  COND TRUE   choice == 21
[L9772]              gas := gas - 21000;
[L9773]  COND TRUE   gas >= 0
[L9774]              assume value_s937 >= 0 && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9775]              assume msgvalue_MSG == 0;
[L9776]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s937 && p1 != to_s937) && (p2 != from_s937 || p3 != msgsender_MSG)) && from_s937 != to_s937) && value_s937 <= _balances_ERC20[this][from_s937]) && value_s937 <= _allowed_ERC20[this][from_s937][msgsender_MSG]) && _balances_ERC20[this][to_s937] + value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s937 >= 0) && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s937] >= 0) && _balances_ERC20[this][to_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s937] >= 0) && _balances_ERC20[this][from_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s937][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s937][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC20Pausable0 := true;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1578]              havoc __exception;
[L1579]              revert := false;
[L1580]  COND TRUE   __exception
[L1581]              __tmp__Balance := Balance;
[L1582]              __tmp__DType := DType;
[L1583]              __tmp__Alloc := Alloc;
[L1584]              __tmp__balance_ADDR := balance_ADDR;
[L1585]              __tmp__M_Ref_int := M_Ref_int;
[L1586]              __tmp__sum__balances0 := sum__balances0;
[L1587]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1588]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1589]              __tmp__sum__allowed1 := sum__allowed1;
[L1590]              __tmp__M_Ref_bool := M_Ref_bool;
[L1591]              __tmp__sum := sum;
[L1592]              __tmp__Length := Length;
[L1593]              __tmp__now := now;
[L1594]              __tmp___balances_ERC20 := _balances_ERC20;
[L1595]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L1596]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1597]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1598]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1599]              __tmp___paused_Pausable := _paused_Pausable;
[L1600]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1601]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1602]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1603]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1604]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5381]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8313]  COND TRUE   !!__tmp___paused_Pausable[this]
[L8314]              revert := true;
[L5381]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5382]  COND TRUE   revert
[L1604]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L1605]              assume revert || gas < 0;
[L9776]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L9924]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:33:20,372 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:33:20,372 INFO  L82        PathProgramCache]: Analyzing trace with hash 1785673644, now seen corresponding path program 1 times
[2020-11-25 02:33:20,373 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:33:20,406 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:33:20,655 INFO  L134       CoverageAnalysis]: Checked inductivity of 987 backedges. 32 proven. 0 refuted. 0 times theorem prover too weak. 955 trivial. 0 not checked.
[2020-11-25 02:33:20,655 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:33:20,655 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 02:33:20,656 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:33:20,656 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 02:33:20,656 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-11-25 02:33:20,656 INFO  L87              Difference]: Start difference. First operand 5437 states and 6169 transitions. cyclomatic complexity: 734 Second operand 4 states.
[2020-11-25 02:33:21,296 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:33:21,296 INFO  L93              Difference]: Finished difference Result 6425 states and 7390 transitions.
[2020-11-25 02:33:21,297 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 02:33:21,297 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6425 states and 7390 transitions.
[2020-11-25 02:33:21,321 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-25 02:33:21,340 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6425 states to 6146 states and 7086 transitions.
[2020-11-25 02:33:21,340 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1402
[2020-11-25 02:33:21,341 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1402
[2020-11-25 02:33:21,341 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6146 states and 7086 transitions.
[2020-11-25 02:33:21,347 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:33:21,347 INFO  L728         BuchiCegarLoop]: Abstraction has 6146 states and 7086 transitions.
[2020-11-25 02:33:21,352 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6146 states and 7086 transitions.
[2020-11-25 02:33:21,391 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6146 to 5479.
[2020-11-25 02:33:21,391 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5479 states.
[2020-11-25 02:33:21,399 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5479 states to 5479 states and 6236 transitions.
[2020-11-25 02:33:21,399 INFO  L751         BuchiCegarLoop]: Abstraction has 5479 states and 6236 transitions.
[2020-11-25 02:33:21,399 INFO  L631         BuchiCegarLoop]: Abstraction has 5479 states and 6236 transitions.
[2020-11-25 02:33:21,399 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 02:33:21,399 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5479 states and 6236 transitions.
[2020-11-25 02:33:21,409 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:33:21,410 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:33:21,410 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:33:21,414 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:33:21,414 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_ERC20Pausable0 := false;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L9914]              assume null == 0;
[L9915]  CALL        call this := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L9915]  RET         call this := FreshRefGenerator__success();
[L9916]              assume now >= 0;
[L9917]              assume DType[this] == OMToken;
[L9918]              assume msgvalue_MSG == 0;
[L9919]              gas := gas - 53000;
[L9920]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2715]              havoc __exception;
[L2716]              revert := false;
[L2717]  COND FALSE  !(__exception)
[L2744]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6181]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L6181]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6182]  COND FALSE  !(revert)
[L6185]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L6185]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6186]  COND FALSE  !(revert)
[L6189]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L6189]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]  COND FALSE  !(revert)
[L6193]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND FALSE  !(DType[this] == OMToken)
[L4943]  COND FALSE  !(DType[this] == ERC20Pausable)
[L4948]  COND TRUE   DType[this] == Pausable
[L4949]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4949]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4950]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5187]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]  COND FALSE  !(revert)
[L5191]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5166]              assume msgsender_MSG != null;
[L5167]              Balance[this] := 0;
[L5168]              _paused_Pausable[this] := false;
[L5170]              _paused_Pausable[this] := false;
[L5191]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5192]  COND FALSE  !(revert)
[L6193]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6194]  COND FALSE  !(revert)
[L6197]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5305]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5305]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5306]  COND FALSE  !(revert)
[L5309]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L5309]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5310]  COND FALSE  !(revert)
[L5313]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND FALSE  !(DType[this] == OMToken)
[L4943]  COND FALSE  !(DType[this] == ERC20Pausable)
[L4948]  COND TRUE   DType[this] == Pausable
[L4949]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4949]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4950]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5313]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5314]  COND FALSE  !(revert)
[L5317]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND FALSE  !(DType[this] == OMToken)
[L4943]  COND TRUE   DType[this] == ERC20Pausable
[L4944]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4944]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4945]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5187]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]  COND FALSE  !(revert)
[L5191]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5166]              assume msgsender_MSG != null;
[L5167]              Balance[this] := 0;
[L5168]              _paused_Pausable[this] := false;
[L5170]              _paused_Pausable[this] := false;
[L5191]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5192]  COND FALSE  !(revert)
[L5317]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5318]  COND FALSE  !(revert)
[L5321]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5274]              assume msgsender_MSG != null;
[L5275]              Balance[this] := 0;
[L5321]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5322]  COND FALSE  !(revert)
[L6197]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6198]  COND FALSE  !(revert)
[L6201]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L5619]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5619]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5620]  COND FALSE  !(revert)
[L5623]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5594]              assume msgsender_MSG != null;
[L5595]              Balance[this] := 0;
[L5596]              _name_ERC20Detailed[this] := -1676908070;
[L5597]              _symbol_ERC20Detailed[this] := -1676908070;
[L5598]              _decimals_ERC20Detailed[this] := 0;
[L5600]              _name_ERC20Detailed[this] := name_s1022;
[L5601]              _symbol_ERC20Detailed[this] := symbol_s1022;
[L5602]              _decimals_ERC20Detailed[this] := decimals_s1022;
[L5623]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5624]  COND FALSE  !(revert)
[L6201]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6202]  COND FALSE  !(revert)
[L6205]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5702]              assume msgsender_MSG != null;
[L5703]              Balance[this] := 0;
[L5705]  CALL        call __var_35 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L5705]  RET         call __var_35 := FreshRefGenerator__success();
[L5706]  COND FALSE  !(revert)
[L5709]              _minters_MinterRole[this] := __var_35;
[L5711]  COND FALSE  !(DType[this] == OMToken)
[L5716]  COND FALSE  !(DType[this] == ERC20Mintable)
[L5721]  COND TRUE   DType[this] == MinterRole
[L5722]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5877]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5877]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5878]  COND FALSE  !(revert)
[L5881]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5722]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5723]  COND FALSE  !(revert)
[L5743]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5744]  COND FALSE  !(revert)
[L6205]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6206]  COND FALSE  !(revert)
[L6209]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5939]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5939]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5940]  COND FALSE  !(revert)
[L5943]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L5943]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5944]  COND FALSE  !(revert)
[L5947]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5702]              assume msgsender_MSG != null;
[L5703]              Balance[this] := 0;
[L5705]  CALL        call __var_35 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L5705]  RET         call __var_35 := FreshRefGenerator__success();
[L5706]  COND FALSE  !(revert)
[L5709]              _minters_MinterRole[this] := __var_35;
[L5711]  COND FALSE  !(DType[this] == OMToken)
[L5716]  COND FALSE  !(DType[this] == ERC20Mintable)
[L5721]  COND TRUE   DType[this] == MinterRole
[L5722]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5877]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5877]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5878]  COND FALSE  !(revert)
[L5881]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5722]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5723]  COND FALSE  !(revert)
[L5743]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5744]  COND FALSE  !(revert)
[L5947]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5948]  COND FALSE  !(revert)
[L5951]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5912]              assume msgsender_MSG != null;
[L5913]              Balance[this] := 0;
[L5951]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]  COND FALSE  !(revert)
[L6209]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6210]  COND FALSE  !(revert)
[L6213]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6037]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L6037]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6038]  COND FALSE  !(revert)
[L6041]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L6041]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6042]  COND FALSE  !(revert)
[L6045]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6014]              assume msgsender_MSG != null;
[L6015]              Balance[this] := 0;
[L6045]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6046]  COND FALSE  !(revert)
[L6213]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6214]  COND FALSE  !(revert)
[L6217]  CALL        call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6130]              assume msgsender_MSG != null;
[L6131]              Balance[this] := 0;
[L6217]  RET         call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6218]  COND FALSE  !(revert)
[L2744]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2745]              assume !revert && gas >= 0;
[L9920]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9921]              assume !revert && gas >= 0;
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND FALSE  !(choice == 23)
[L9764]  COND FALSE  !(choice == 22)
[L9771]  COND TRUE   choice == 21
[L9772]              gas := gas - 21000;
[L9773]  COND TRUE   gas >= 0
[L9774]              assume value_s937 >= 0 && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9775]              assume msgvalue_MSG == 0;
[L9776]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s937 && p1 != to_s937) && (p2 != from_s937 || p3 != msgsender_MSG)) && from_s937 != to_s937) && value_s937 <= _balances_ERC20[this][from_s937]) && value_s937 <= _allowed_ERC20[this][from_s937][msgsender_MSG]) && _balances_ERC20[this][to_s937] + value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s937 >= 0) && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s937] >= 0) && _balances_ERC20[this][to_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s937] >= 0) && _balances_ERC20[this][from_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s937][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s937][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC20Pausable0 := true;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1578]              havoc __exception;
[L1579]              revert := false;
[L1580]  COND TRUE   __exception
[L1581]              __tmp__Balance := Balance;
[L1582]              __tmp__DType := DType;
[L1583]              __tmp__Alloc := Alloc;
[L1584]              __tmp__balance_ADDR := balance_ADDR;
[L1585]              __tmp__M_Ref_int := M_Ref_int;
[L1586]              __tmp__sum__balances0 := sum__balances0;
[L1587]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1588]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1589]              __tmp__sum__allowed1 := sum__allowed1;
[L1590]              __tmp__M_Ref_bool := M_Ref_bool;
[L1591]              __tmp__sum := sum;
[L1592]              __tmp__Length := Length;
[L1593]              __tmp__now := now;
[L1594]              __tmp___balances_ERC20 := _balances_ERC20;
[L1595]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L1596]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1597]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1598]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1599]              __tmp___paused_Pausable := _paused_Pausable;
[L1600]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1601]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1602]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1603]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1604]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5381]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8313]  COND TRUE   !!__tmp___paused_Pausable[this]
[L8314]              revert := true;
[L5381]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5382]  COND TRUE   revert
[L1604]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L1605]              assume revert || gas < 0;
[L9776]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L9924]  RET         call CorralChoice_OMToken(this);

Loop:
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND FALSE  !(choice == 23)
[L9764]  COND FALSE  !(choice == 22)
[L9771]  COND TRUE   choice == 21
[L9772]              gas := gas - 21000;
[L9773]  COND TRUE   gas >= 0
[L9774]              assume value_s937 >= 0 && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9775]              assume msgvalue_MSG == 0;
[L9776]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s937 && p1 != to_s937) && (p2 != from_s937 || p3 != msgsender_MSG)) && from_s937 != to_s937) && value_s937 <= _balances_ERC20[this][from_s937]) && value_s937 <= _allowed_ERC20[this][from_s937][msgsender_MSG]) && _balances_ERC20[this][to_s937] + value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s937 >= 0) && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s937] >= 0) && _balances_ERC20[this][to_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s937] >= 0) && _balances_ERC20[this][from_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s937][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s937][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC20Pausable0 := true;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1578]              havoc __exception;
[L1579]              revert := false;
[L1580]  COND TRUE   __exception
[L1581]              __tmp__Balance := Balance;
[L1582]              __tmp__DType := DType;
[L1583]              __tmp__Alloc := Alloc;
[L1584]              __tmp__balance_ADDR := balance_ADDR;
[L1585]              __tmp__M_Ref_int := M_Ref_int;
[L1586]              __tmp__sum__balances0 := sum__balances0;
[L1587]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1588]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1589]              __tmp__sum__allowed1 := sum__allowed1;
[L1590]              __tmp__M_Ref_bool := M_Ref_bool;
[L1591]              __tmp__sum := sum;
[L1592]              __tmp__Length := Length;
[L1593]              __tmp__now := now;
[L1594]              __tmp___balances_ERC20 := _balances_ERC20;
[L1595]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L1596]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1597]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1598]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1599]              __tmp___paused_Pausable := _paused_Pausable;
[L1600]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1601]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1602]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1603]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1604]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5381]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8313]  COND TRUE   !!__tmp___paused_Pausable[this]
[L8314]              revert := true;
[L5381]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5382]  COND TRUE   revert
[L1604]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L1605]              assume revert || gas < 0;
[L9776]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L9924]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:33:21,422 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:33:21,422 INFO  L82        PathProgramCache]: Analyzing trace with hash 2143478910, now seen corresponding path program 1 times
[2020-11-25 02:33:21,423 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:33:21,444 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:33:21,665 INFO  L134       CoverageAnalysis]: Checked inductivity of 1016 backedges. 6 proven. 25 refuted. 0 times theorem prover too weak. 985 trivial. 0 not checked.
[2020-11-25 02:33:21,665 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:33:21,666 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [8] total 8
[2020-11-25 02:33:21,666 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:33:21,666 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 02:33:21,666 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 02:33:21,666 INFO  L87              Difference]: Start difference. First operand 5479 states and 6236 transitions. cyclomatic complexity: 759 Second operand 8 states.
[2020-11-25 02:33:21,812 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:33:21,813 INFO  L93              Difference]: Finished difference Result 5512 states and 6276 transitions.
[2020-11-25 02:33:21,813 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 02:33:21,813 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5512 states and 6276 transitions.
[2020-11-25 02:33:21,824 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:33:21,835 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5512 states to 5486 states and 6244 transitions.
[2020-11-25 02:33:21,835 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1359
[2020-11-25 02:33:21,836 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1359
[2020-11-25 02:33:21,836 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5486 states and 6244 transitions.
[2020-11-25 02:33:21,839 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:33:21,839 INFO  L728         BuchiCegarLoop]: Abstraction has 5486 states and 6244 transitions.
[2020-11-25 02:33:21,843 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5486 states and 6244 transitions.
[2020-11-25 02:33:21,868 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5486 to 5473.
[2020-11-25 02:33:21,868 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5473 states.
[2020-11-25 02:33:21,873 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5473 states to 5473 states and 6229 transitions.
[2020-11-25 02:33:21,874 INFO  L751         BuchiCegarLoop]: Abstraction has 5473 states and 6229 transitions.
[2020-11-25 02:33:21,874 INFO  L631         BuchiCegarLoop]: Abstraction has 5473 states and 6229 transitions.
[2020-11-25 02:33:21,874 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-25 02:33:21,874 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5473 states and 6229 transitions.
[2020-11-25 02:33:21,879 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:33:21,879 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:33:21,880 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:33:21,881 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:33:21,881 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_ERC20Pausable0 := false;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L9914]              assume null == 0;
[L9915]  CALL        call this := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L9915]  RET         call this := FreshRefGenerator__success();
[L9916]              assume now >= 0;
[L9917]              assume DType[this] == OMToken;
[L9918]              assume msgvalue_MSG == 0;
[L9919]              gas := gas - 53000;
[L9920]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2715]              havoc __exception;
[L2716]              revert := false;
[L2717]  COND FALSE  !(__exception)
[L2744]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6181]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L6181]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6182]  COND FALSE  !(revert)
[L6185]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L6185]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6186]  COND FALSE  !(revert)
[L6189]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L6189]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]  COND FALSE  !(revert)
[L6193]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5187]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]  COND FALSE  !(revert)
[L5191]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5166]              assume msgsender_MSG != null;
[L5167]              Balance[this] := 0;
[L5168]              _paused_Pausable[this] := false;
[L5170]              _paused_Pausable[this] := false;
[L5191]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5192]  COND FALSE  !(revert)
[L6193]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6194]  COND FALSE  !(revert)
[L6197]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5305]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5305]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5306]  COND FALSE  !(revert)
[L5309]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L5309]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5310]  COND FALSE  !(revert)
[L5313]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND FALSE  !(DType[this] == OMToken)
[L4943]  COND FALSE  !(DType[this] == ERC20Pausable)
[L4948]  COND TRUE   DType[this] == Pausable
[L4949]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4949]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4950]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5313]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5314]  COND FALSE  !(revert)
[L5317]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5187]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]  COND FALSE  !(revert)
[L5191]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5166]              assume msgsender_MSG != null;
[L5167]              Balance[this] := 0;
[L5168]              _paused_Pausable[this] := false;
[L5170]              _paused_Pausable[this] := false;
[L5191]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5192]  COND FALSE  !(revert)
[L5317]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5318]  COND FALSE  !(revert)
[L5321]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5274]              assume msgsender_MSG != null;
[L5275]              Balance[this] := 0;
[L5321]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5322]  COND FALSE  !(revert)
[L6197]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6198]  COND FALSE  !(revert)
[L6201]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L5619]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5619]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5620]  COND FALSE  !(revert)
[L5623]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5594]              assume msgsender_MSG != null;
[L5595]              Balance[this] := 0;
[L5596]              _name_ERC20Detailed[this] := -1676908070;
[L5597]              _symbol_ERC20Detailed[this] := -1676908070;
[L5598]              _decimals_ERC20Detailed[this] := 0;
[L5600]              _name_ERC20Detailed[this] := name_s1022;
[L5601]              _symbol_ERC20Detailed[this] := symbol_s1022;
[L5602]              _decimals_ERC20Detailed[this] := decimals_s1022;
[L5623]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5624]  COND FALSE  !(revert)
[L6201]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6202]  COND FALSE  !(revert)
[L6205]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5702]              assume msgsender_MSG != null;
[L5703]              Balance[this] := 0;
[L5705]  CALL        call __var_35 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L5705]  RET         call __var_35 := FreshRefGenerator__success();
[L5706]  COND FALSE  !(revert)
[L5709]              _minters_MinterRole[this] := __var_35;
[L5711]  COND FALSE  !(DType[this] == OMToken)
[L5716]  COND FALSE  !(DType[this] == ERC20Mintable)
[L5721]  COND TRUE   DType[this] == MinterRole
[L5722]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5877]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5877]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5878]  COND FALSE  !(revert)
[L5881]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5722]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5723]  COND FALSE  !(revert)
[L5743]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5744]  COND FALSE  !(revert)
[L6205]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6206]  COND FALSE  !(revert)
[L6209]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5939]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5939]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5940]  COND FALSE  !(revert)
[L5943]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L5943]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5944]  COND FALSE  !(revert)
[L5947]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5702]              assume msgsender_MSG != null;
[L5703]              Balance[this] := 0;
[L5705]  CALL        call __var_35 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L5705]  RET         call __var_35 := FreshRefGenerator__success();
[L5706]  COND FALSE  !(revert)
[L5709]              _minters_MinterRole[this] := __var_35;
[L5711]  COND FALSE  !(DType[this] == OMToken)
[L5716]  COND FALSE  !(DType[this] == ERC20Mintable)
[L5721]  COND TRUE   DType[this] == MinterRole
[L5722]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5877]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5877]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5878]  COND FALSE  !(revert)
[L5881]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5722]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5723]  COND FALSE  !(revert)
[L5743]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5744]  COND FALSE  !(revert)
[L5947]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5948]  COND FALSE  !(revert)
[L5951]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5912]              assume msgsender_MSG != null;
[L5913]              Balance[this] := 0;
[L5951]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]  COND FALSE  !(revert)
[L6209]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6210]  COND FALSE  !(revert)
[L6213]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6037]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L6037]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6038]  COND FALSE  !(revert)
[L6041]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L6041]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6042]  COND FALSE  !(revert)
[L6045]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6014]              assume msgsender_MSG != null;
[L6015]              Balance[this] := 0;
[L6045]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6046]  COND FALSE  !(revert)
[L6213]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6214]  COND FALSE  !(revert)
[L6217]  CALL        call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6130]              assume msgsender_MSG != null;
[L6131]              Balance[this] := 0;
[L6217]  RET         call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6218]  COND FALSE  !(revert)
[L2744]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2745]              assume !revert && gas >= 0;
[L9920]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9921]              assume !revert && gas >= 0;
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND FALSE  !(choice == 23)
[L9764]  COND FALSE  !(choice == 22)
[L9771]  COND TRUE   choice == 21
[L9772]              gas := gas - 21000;
[L9773]  COND TRUE   gas >= 0
[L9774]              assume value_s937 >= 0 && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9775]              assume msgvalue_MSG == 0;
[L9776]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s937 && p1 != to_s937) && (p2 != from_s937 || p3 != msgsender_MSG)) && from_s937 != to_s937) && value_s937 <= _balances_ERC20[this][from_s937]) && value_s937 <= _allowed_ERC20[this][from_s937][msgsender_MSG]) && _balances_ERC20[this][to_s937] + value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s937 >= 0) && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s937] >= 0) && _balances_ERC20[this][to_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s937] >= 0) && _balances_ERC20[this][from_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s937][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s937][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC20Pausable0 := true;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1578]              havoc __exception;
[L1579]              revert := false;
[L1580]  COND TRUE   __exception
[L1581]              __tmp__Balance := Balance;
[L1582]              __tmp__DType := DType;
[L1583]              __tmp__Alloc := Alloc;
[L1584]              __tmp__balance_ADDR := balance_ADDR;
[L1585]              __tmp__M_Ref_int := M_Ref_int;
[L1586]              __tmp__sum__balances0 := sum__balances0;
[L1587]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1588]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1589]              __tmp__sum__allowed1 := sum__allowed1;
[L1590]              __tmp__M_Ref_bool := M_Ref_bool;
[L1591]              __tmp__sum := sum;
[L1592]              __tmp__Length := Length;
[L1593]              __tmp__now := now;
[L1594]              __tmp___balances_ERC20 := _balances_ERC20;
[L1595]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L1596]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1597]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1598]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1599]              __tmp___paused_Pausable := _paused_Pausable;
[L1600]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1601]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1602]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1603]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1604]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5381]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8313]  COND TRUE   !!__tmp___paused_Pausable[this]
[L8314]              revert := true;
[L5381]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5382]  COND TRUE   revert
[L1604]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L1605]              assume revert || gas < 0;
[L9776]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L9924]  RET         call CorralChoice_OMToken(this);

Loop:
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND FALSE  !(choice == 23)
[L9764]  COND FALSE  !(choice == 22)
[L9771]  COND TRUE   choice == 21
[L9772]              gas := gas - 21000;
[L9773]  COND TRUE   gas >= 0
[L9774]              assume value_s937 >= 0 && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9775]              assume msgvalue_MSG == 0;
[L9776]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s937 && p1 != to_s937) && (p2 != from_s937 || p3 != msgsender_MSG)) && from_s937 != to_s937) && value_s937 <= _balances_ERC20[this][from_s937]) && value_s937 <= _allowed_ERC20[this][from_s937][msgsender_MSG]) && _balances_ERC20[this][to_s937] + value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s937 >= 0) && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s937] >= 0) && _balances_ERC20[this][to_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s937] >= 0) && _balances_ERC20[this][from_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s937][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s937][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC20Pausable0 := true;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1578]              havoc __exception;
[L1579]              revert := false;
[L1580]  COND TRUE   __exception
[L1581]              __tmp__Balance := Balance;
[L1582]              __tmp__DType := DType;
[L1583]              __tmp__Alloc := Alloc;
[L1584]              __tmp__balance_ADDR := balance_ADDR;
[L1585]              __tmp__M_Ref_int := M_Ref_int;
[L1586]              __tmp__sum__balances0 := sum__balances0;
[L1587]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1588]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1589]              __tmp__sum__allowed1 := sum__allowed1;
[L1590]              __tmp__M_Ref_bool := M_Ref_bool;
[L1591]              __tmp__sum := sum;
[L1592]              __tmp__Length := Length;
[L1593]              __tmp__now := now;
[L1594]              __tmp___balances_ERC20 := _balances_ERC20;
[L1595]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L1596]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1597]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1598]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1599]              __tmp___paused_Pausable := _paused_Pausable;
[L1600]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1601]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1602]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1603]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1604]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5381]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8313]  COND TRUE   !!__tmp___paused_Pausable[this]
[L8314]              revert := true;
[L5381]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5382]  COND TRUE   revert
[L1604]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L1605]              assume revert || gas < 0;
[L9776]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L9924]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:33:21,886 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:33:21,886 INFO  L82        PathProgramCache]: Analyzing trace with hash 10460969, now seen corresponding path program 1 times
[2020-11-25 02:33:21,887 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:33:21,901 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:33:22,080 INFO  L134       CoverageAnalysis]: Checked inductivity of 1020 backedges. 12 proven. 6 refuted. 0 times theorem prover too weak. 1002 trivial. 0 not checked.
[2020-11-25 02:33:22,080 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:33:22,080 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [8] total 8
[2020-11-25 02:33:22,080 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:33:22,080 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 02:33:22,081 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 02:33:22,081 INFO  L87              Difference]: Start difference. First operand 5473 states and 6229 transitions. cyclomatic complexity: 758 Second operand 8 states.
[2020-11-25 02:33:22,214 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:33:22,214 INFO  L93              Difference]: Finished difference Result 5506 states and 6269 transitions.
[2020-11-25 02:33:22,214 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 02:33:22,214 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5506 states and 6269 transitions.
[2020-11-25 02:33:22,224 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:33:22,233 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5506 states to 5473 states and 6228 transitions.
[2020-11-25 02:33:22,233 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1359
[2020-11-25 02:33:22,234 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1359
[2020-11-25 02:33:22,234 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5473 states and 6228 transitions.
[2020-11-25 02:33:22,237 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:33:22,237 INFO  L728         BuchiCegarLoop]: Abstraction has 5473 states and 6228 transitions.
[2020-11-25 02:33:22,240 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5473 states and 6228 transitions.
[2020-11-25 02:33:22,265 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5473 to 5473.
[2020-11-25 02:33:22,265 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5473 states.
[2020-11-25 02:33:22,270 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5473 states to 5473 states and 6228 transitions.
[2020-11-25 02:33:22,270 INFO  L751         BuchiCegarLoop]: Abstraction has 5473 states and 6228 transitions.
[2020-11-25 02:33:22,270 INFO  L631         BuchiCegarLoop]: Abstraction has 5473 states and 6228 transitions.
[2020-11-25 02:33:22,270 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-11-25 02:33:22,270 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5473 states and 6228 transitions.
[2020-11-25 02:33:22,276 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:33:22,276 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:33:22,276 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:33:22,278 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:33:22,278 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_ERC20Pausable0 := false;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L9914]              assume null == 0;
[L9915]  CALL        call this := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L9915]  RET         call this := FreshRefGenerator__success();
[L9916]              assume now >= 0;
[L9917]              assume DType[this] == OMToken;
[L9918]              assume msgvalue_MSG == 0;
[L9919]              gas := gas - 53000;
[L9920]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2715]              havoc __exception;
[L2716]              revert := false;
[L2717]  COND FALSE  !(__exception)
[L2744]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6181]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L6181]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6182]  COND FALSE  !(revert)
[L6185]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L6185]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6186]  COND FALSE  !(revert)
[L6189]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L6189]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]  COND FALSE  !(revert)
[L6193]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5187]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]  COND FALSE  !(revert)
[L5191]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5166]              assume msgsender_MSG != null;
[L5167]              Balance[this] := 0;
[L5168]              _paused_Pausable[this] := false;
[L5170]              _paused_Pausable[this] := false;
[L5191]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5192]  COND FALSE  !(revert)
[L6193]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6194]  COND FALSE  !(revert)
[L6197]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5305]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5305]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5306]  COND FALSE  !(revert)
[L5309]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L5309]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5310]  COND FALSE  !(revert)
[L5313]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5313]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5314]  COND FALSE  !(revert)
[L5317]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND FALSE  !(DType[this] == OMToken)
[L4943]  COND FALSE  !(DType[this] == ERC20Pausable)
[L4948]  COND TRUE   DType[this] == Pausable
[L4949]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4949]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4950]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5187]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]  COND FALSE  !(revert)
[L5191]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5166]              assume msgsender_MSG != null;
[L5167]              Balance[this] := 0;
[L5168]              _paused_Pausable[this] := false;
[L5170]              _paused_Pausable[this] := false;
[L5191]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5192]  COND FALSE  !(revert)
[L5317]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5318]  COND FALSE  !(revert)
[L5321]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5274]              assume msgsender_MSG != null;
[L5275]              Balance[this] := 0;
[L5321]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5322]  COND FALSE  !(revert)
[L6197]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6198]  COND FALSE  !(revert)
[L6201]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L5619]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5619]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5620]  COND FALSE  !(revert)
[L5623]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5594]              assume msgsender_MSG != null;
[L5595]              Balance[this] := 0;
[L5596]              _name_ERC20Detailed[this] := -1676908070;
[L5597]              _symbol_ERC20Detailed[this] := -1676908070;
[L5598]              _decimals_ERC20Detailed[this] := 0;
[L5600]              _name_ERC20Detailed[this] := name_s1022;
[L5601]              _symbol_ERC20Detailed[this] := symbol_s1022;
[L5602]              _decimals_ERC20Detailed[this] := decimals_s1022;
[L5623]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5624]  COND FALSE  !(revert)
[L6201]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6202]  COND FALSE  !(revert)
[L6205]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5702]              assume msgsender_MSG != null;
[L5703]              Balance[this] := 0;
[L5705]  CALL        call __var_35 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L5705]  RET         call __var_35 := FreshRefGenerator__success();
[L5706]  COND FALSE  !(revert)
[L5709]              _minters_MinterRole[this] := __var_35;
[L5711]  COND TRUE   DType[this] == OMToken
[L5712]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5877]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5877]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5878]  COND FALSE  !(revert)
[L5881]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5712]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5713]  COND FALSE  !(revert)
[L5743]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5744]  COND FALSE  !(revert)
[L6205]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6206]  COND FALSE  !(revert)
[L6209]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5939]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5939]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5940]  COND FALSE  !(revert)
[L5943]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L5943]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5944]  COND FALSE  !(revert)
[L5947]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5702]              assume msgsender_MSG != null;
[L5703]              Balance[this] := 0;
[L5705]  CALL        call __var_35 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L5705]  RET         call __var_35 := FreshRefGenerator__success();
[L5706]  COND FALSE  !(revert)
[L5709]              _minters_MinterRole[this] := __var_35;
[L5711]  COND TRUE   DType[this] == OMToken
[L5712]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5877]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5877]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5878]  COND FALSE  !(revert)
[L5881]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5712]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5713]  COND FALSE  !(revert)
[L5743]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5744]  COND FALSE  !(revert)
[L5947]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5948]  COND FALSE  !(revert)
[L5951]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5912]              assume msgsender_MSG != null;
[L5913]              Balance[this] := 0;
[L5951]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]  COND FALSE  !(revert)
[L6209]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6210]  COND FALSE  !(revert)
[L6213]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6037]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L6037]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6038]  COND FALSE  !(revert)
[L6041]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L6041]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6042]  COND FALSE  !(revert)
[L6045]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6014]              assume msgsender_MSG != null;
[L6015]              Balance[this] := 0;
[L6045]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6046]  COND FALSE  !(revert)
[L6213]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6214]  COND FALSE  !(revert)
[L6217]  CALL        call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6130]              assume msgsender_MSG != null;
[L6131]              Balance[this] := 0;
[L6217]  RET         call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6218]  COND FALSE  !(revert)
[L2744]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2745]              assume !revert && gas >= 0;
[L9920]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9921]              assume !revert && gas >= 0;
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND FALSE  !(choice == 23)
[L9764]  COND FALSE  !(choice == 22)
[L9771]  COND TRUE   choice == 21
[L9772]              gas := gas - 21000;
[L9773]  COND TRUE   gas >= 0
[L9774]              assume value_s937 >= 0 && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9775]              assume msgvalue_MSG == 0;
[L9776]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s937 && p1 != to_s937) && (p2 != from_s937 || p3 != msgsender_MSG)) && from_s937 != to_s937) && value_s937 <= _balances_ERC20[this][from_s937]) && value_s937 <= _allowed_ERC20[this][from_s937][msgsender_MSG]) && _balances_ERC20[this][to_s937] + value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s937 >= 0) && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s937] >= 0) && _balances_ERC20[this][to_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s937] >= 0) && _balances_ERC20[this][from_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s937][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s937][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC20Pausable0 := true;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1578]              havoc __exception;
[L1579]              revert := false;
[L1580]  COND TRUE   __exception
[L1581]              __tmp__Balance := Balance;
[L1582]              __tmp__DType := DType;
[L1583]              __tmp__Alloc := Alloc;
[L1584]              __tmp__balance_ADDR := balance_ADDR;
[L1585]              __tmp__M_Ref_int := M_Ref_int;
[L1586]              __tmp__sum__balances0 := sum__balances0;
[L1587]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1588]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1589]              __tmp__sum__allowed1 := sum__allowed1;
[L1590]              __tmp__M_Ref_bool := M_Ref_bool;
[L1591]              __tmp__sum := sum;
[L1592]              __tmp__Length := Length;
[L1593]              __tmp__now := now;
[L1594]              __tmp___balances_ERC20 := _balances_ERC20;
[L1595]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L1596]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1597]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1598]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1599]              __tmp___paused_Pausable := _paused_Pausable;
[L1600]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1601]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1602]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1603]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1604]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5381]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8313]  COND TRUE   !!__tmp___paused_Pausable[this]
[L8314]              revert := true;
[L5381]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5382]  COND TRUE   revert
[L1604]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L1605]              assume revert || gas < 0;
[L9776]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L9924]  RET         call CorralChoice_OMToken(this);

Loop:
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND FALSE  !(choice == 23)
[L9764]  COND FALSE  !(choice == 22)
[L9771]  COND TRUE   choice == 21
[L9772]              gas := gas - 21000;
[L9773]  COND TRUE   gas >= 0
[L9774]              assume value_s937 >= 0 && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9775]              assume msgvalue_MSG == 0;
[L9776]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s937 && p1 != to_s937) && (p2 != from_s937 || p3 != msgsender_MSG)) && from_s937 != to_s937) && value_s937 <= _balances_ERC20[this][from_s937]) && value_s937 <= _allowed_ERC20[this][from_s937][msgsender_MSG]) && _balances_ERC20[this][to_s937] + value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s937 >= 0) && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s937] >= 0) && _balances_ERC20[this][to_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s937] >= 0) && _balances_ERC20[this][from_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s937][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s937][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC20Pausable0 := true;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1578]              havoc __exception;
[L1579]              revert := false;
[L1580]  COND TRUE   __exception
[L1581]              __tmp__Balance := Balance;
[L1582]              __tmp__DType := DType;
[L1583]              __tmp__Alloc := Alloc;
[L1584]              __tmp__balance_ADDR := balance_ADDR;
[L1585]              __tmp__M_Ref_int := M_Ref_int;
[L1586]              __tmp__sum__balances0 := sum__balances0;
[L1587]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1588]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1589]              __tmp__sum__allowed1 := sum__allowed1;
[L1590]              __tmp__M_Ref_bool := M_Ref_bool;
[L1591]              __tmp__sum := sum;
[L1592]              __tmp__Length := Length;
[L1593]              __tmp__now := now;
[L1594]              __tmp___balances_ERC20 := _balances_ERC20;
[L1595]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L1596]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1597]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1598]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1599]              __tmp___paused_Pausable := _paused_Pausable;
[L1600]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1601]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1602]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1603]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1604]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5381]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8313]  COND TRUE   !!__tmp___paused_Pausable[this]
[L8314]              revert := true;
[L5381]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5382]  COND TRUE   revert
[L1604]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L1605]              assume revert || gas < 0;
[L9776]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L9924]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:33:22,283 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:33:22,283 INFO  L82        PathProgramCache]: Analyzing trace with hash -1014290391, now seen corresponding path program 1 times
[2020-11-25 02:33:22,284 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:33:22,297 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:33:22,472 INFO  L134       CoverageAnalysis]: Checked inductivity of 1018 backedges. 25 proven. 0 refuted. 0 times theorem prover too weak. 993 trivial. 0 not checked.
[2020-11-25 02:33:22,473 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:33:22,473 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [9] imperfect sequences [] total 9
[2020-11-25 02:33:22,473 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:33:22,473 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 02:33:22,473 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=15, Invalid=57, Unknown=0, NotChecked=0, Total=72
[2020-11-25 02:33:22,474 INFO  L87              Difference]: Start difference. First operand 5473 states and 6228 transitions. cyclomatic complexity: 757 Second operand 9 states.
[2020-11-25 02:33:22,654 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:33:22,654 INFO  L93              Difference]: Finished difference Result 5503 states and 6263 transitions.
[2020-11-25 02:33:22,654 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 02:33:22,654 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5503 states and 6263 transitions.
[2020-11-25 02:33:22,667 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:33:22,677 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5503 states to 5445 states and 6193 transitions.
[2020-11-25 02:33:22,678 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1359
[2020-11-25 02:33:22,678 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1359
[2020-11-25 02:33:22,678 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5445 states and 6193 transitions.
[2020-11-25 02:33:22,681 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:33:22,681 INFO  L728         BuchiCegarLoop]: Abstraction has 5445 states and 6193 transitions.
[2020-11-25 02:33:22,685 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5445 states and 6193 transitions.
[2020-11-25 02:33:22,725 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5445 to 5445.
[2020-11-25 02:33:22,725 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5445 states.
[2020-11-25 02:33:22,735 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5445 states to 5445 states and 6193 transitions.
[2020-11-25 02:33:22,735 INFO  L751         BuchiCegarLoop]: Abstraction has 5445 states and 6193 transitions.
[2020-11-25 02:33:22,735 INFO  L631         BuchiCegarLoop]: Abstraction has 5445 states and 6193 transitions.
[2020-11-25 02:33:22,735 INFO  L445         BuchiCegarLoop]: ======== Iteration 13============
[2020-11-25 02:33:22,735 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5445 states and 6193 transitions.
[2020-11-25 02:33:22,743 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:33:22,743 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:33:22,743 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:33:22,744 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:33:22,744 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_ERC20Pausable0 := false;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L9914]              assume null == 0;
[L9915]  CALL        call this := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L9915]  RET         call this := FreshRefGenerator__success();
[L9916]              assume now >= 0;
[L9917]              assume DType[this] == OMToken;
[L9918]              assume msgvalue_MSG == 0;
[L9919]              gas := gas - 53000;
[L9920]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2715]              havoc __exception;
[L2716]              revert := false;
[L2717]  COND FALSE  !(__exception)
[L2744]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6181]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L6181]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6182]  COND FALSE  !(revert)
[L6185]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L6185]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6186]  COND FALSE  !(revert)
[L6189]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L6189]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]  COND FALSE  !(revert)
[L6193]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5187]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]  COND FALSE  !(revert)
[L5191]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5166]              assume msgsender_MSG != null;
[L5167]              Balance[this] := 0;
[L5168]              _paused_Pausable[this] := false;
[L5170]              _paused_Pausable[this] := false;
[L5191]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5192]  COND FALSE  !(revert)
[L6193]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6194]  COND FALSE  !(revert)
[L6197]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5305]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5305]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5306]  COND FALSE  !(revert)
[L5309]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L5309]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5310]  COND FALSE  !(revert)
[L5313]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5313]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5314]  COND FALSE  !(revert)
[L5317]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5187]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]  COND FALSE  !(revert)
[L5191]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5166]              assume msgsender_MSG != null;
[L5167]              Balance[this] := 0;
[L5168]              _paused_Pausable[this] := false;
[L5170]              _paused_Pausable[this] := false;
[L5191]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5192]  COND FALSE  !(revert)
[L5317]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5318]  COND FALSE  !(revert)
[L5321]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5274]              assume msgsender_MSG != null;
[L5275]              Balance[this] := 0;
[L5321]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5322]  COND FALSE  !(revert)
[L6197]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6198]  COND FALSE  !(revert)
[L6201]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L5619]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5619]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5620]  COND FALSE  !(revert)
[L5623]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5594]              assume msgsender_MSG != null;
[L5595]              Balance[this] := 0;
[L5596]              _name_ERC20Detailed[this] := -1676908070;
[L5597]              _symbol_ERC20Detailed[this] := -1676908070;
[L5598]              _decimals_ERC20Detailed[this] := 0;
[L5600]              _name_ERC20Detailed[this] := name_s1022;
[L5601]              _symbol_ERC20Detailed[this] := symbol_s1022;
[L5602]              _decimals_ERC20Detailed[this] := decimals_s1022;
[L5623]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5624]  COND FALSE  !(revert)
[L6201]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6202]  COND FALSE  !(revert)
[L6205]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5702]              assume msgsender_MSG != null;
[L5703]              Balance[this] := 0;
[L5705]  CALL        call __var_35 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L5705]  RET         call __var_35 := FreshRefGenerator__success();
[L5706]  COND FALSE  !(revert)
[L5709]              _minters_MinterRole[this] := __var_35;
[L5711]  COND FALSE  !(DType[this] == OMToken)
[L5716]  COND FALSE  !(DType[this] == ERC20Mintable)
[L5721]  COND TRUE   DType[this] == MinterRole
[L5722]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5877]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5877]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5878]  COND FALSE  !(revert)
[L5881]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5722]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5723]  COND FALSE  !(revert)
[L5743]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5744]  COND FALSE  !(revert)
[L6205]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6206]  COND FALSE  !(revert)
[L6209]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5939]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5939]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5940]  COND FALSE  !(revert)
[L5943]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L5943]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5944]  COND FALSE  !(revert)
[L5947]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5702]              assume msgsender_MSG != null;
[L5703]              Balance[this] := 0;
[L5705]  CALL        call __var_35 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L5705]  RET         call __var_35 := FreshRefGenerator__success();
[L5706]  COND FALSE  !(revert)
[L5709]              _minters_MinterRole[this] := __var_35;
[L5711]  COND FALSE  !(DType[this] == OMToken)
[L5716]  COND FALSE  !(DType[this] == ERC20Mintable)
[L5721]  COND TRUE   DType[this] == MinterRole
[L5722]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5877]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5877]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5878]  COND FALSE  !(revert)
[L5881]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5722]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5723]  COND FALSE  !(revert)
[L5743]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5744]  COND FALSE  !(revert)
[L5947]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5948]  COND FALSE  !(revert)
[L5951]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5912]              assume msgsender_MSG != null;
[L5913]              Balance[this] := 0;
[L5951]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]  COND FALSE  !(revert)
[L6209]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6210]  COND FALSE  !(revert)
[L6213]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6037]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L6037]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6038]  COND FALSE  !(revert)
[L6041]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L6041]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6042]  COND FALSE  !(revert)
[L6045]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6014]              assume msgsender_MSG != null;
[L6015]              Balance[this] := 0;
[L6045]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6046]  COND FALSE  !(revert)
[L6213]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6214]  COND FALSE  !(revert)
[L6217]  CALL        call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6130]              assume msgsender_MSG != null;
[L6131]              Balance[this] := 0;
[L6217]  RET         call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6218]  COND FALSE  !(revert)
[L2744]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2745]              assume !revert && gas >= 0;
[L9920]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9921]              assume !revert && gas >= 0;
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND FALSE  !(choice == 23)
[L9764]  COND FALSE  !(choice == 22)
[L9771]  COND TRUE   choice == 21
[L9772]              gas := gas - 21000;
[L9773]  COND TRUE   gas >= 0
[L9774]              assume value_s937 >= 0 && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9775]              assume msgvalue_MSG == 0;
[L9776]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s937 && p1 != to_s937) && (p2 != from_s937 || p3 != msgsender_MSG)) && from_s937 != to_s937) && value_s937 <= _balances_ERC20[this][from_s937]) && value_s937 <= _allowed_ERC20[this][from_s937][msgsender_MSG]) && _balances_ERC20[this][to_s937] + value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s937 >= 0) && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s937] >= 0) && _balances_ERC20[this][to_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s937] >= 0) && _balances_ERC20[this][from_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s937][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s937][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC20Pausable0 := true;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1578]              havoc __exception;
[L1579]              revert := false;
[L1580]  COND TRUE   __exception
[L1581]              __tmp__Balance := Balance;
[L1582]              __tmp__DType := DType;
[L1583]              __tmp__Alloc := Alloc;
[L1584]              __tmp__balance_ADDR := balance_ADDR;
[L1585]              __tmp__M_Ref_int := M_Ref_int;
[L1586]              __tmp__sum__balances0 := sum__balances0;
[L1587]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1588]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1589]              __tmp__sum__allowed1 := sum__allowed1;
[L1590]              __tmp__M_Ref_bool := M_Ref_bool;
[L1591]              __tmp__sum := sum;
[L1592]              __tmp__Length := Length;
[L1593]              __tmp__now := now;
[L1594]              __tmp___balances_ERC20 := _balances_ERC20;
[L1595]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L1596]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1597]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1598]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1599]              __tmp___paused_Pausable := _paused_Pausable;
[L1600]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1601]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1602]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1603]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1604]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5381]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8313]  COND TRUE   !!__tmp___paused_Pausable[this]
[L8314]              revert := true;
[L5381]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5382]  COND TRUE   revert
[L1604]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L1605]              assume revert || gas < 0;
[L9776]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L9924]  RET         call CorralChoice_OMToken(this);

Loop:
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND FALSE  !(choice == 23)
[L9764]  COND FALSE  !(choice == 22)
[L9771]  COND TRUE   choice == 21
[L9772]              gas := gas - 21000;
[L9773]  COND TRUE   gas >= 0
[L9774]              assume value_s937 >= 0 && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9775]              assume msgvalue_MSG == 0;
[L9776]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s937 && p1 != to_s937) && (p2 != from_s937 || p3 != msgsender_MSG)) && from_s937 != to_s937) && value_s937 <= _balances_ERC20[this][from_s937]) && value_s937 <= _allowed_ERC20[this][from_s937][msgsender_MSG]) && _balances_ERC20[this][to_s937] + value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s937 >= 0) && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s937] >= 0) && _balances_ERC20[this][to_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s937] >= 0) && _balances_ERC20[this][from_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s937][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s937][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC20Pausable0 := true;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1578]              havoc __exception;
[L1579]              revert := false;
[L1580]  COND TRUE   __exception
[L1581]              __tmp__Balance := Balance;
[L1582]              __tmp__DType := DType;
[L1583]              __tmp__Alloc := Alloc;
[L1584]              __tmp__balance_ADDR := balance_ADDR;
[L1585]              __tmp__M_Ref_int := M_Ref_int;
[L1586]              __tmp__sum__balances0 := sum__balances0;
[L1587]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1588]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1589]              __tmp__sum__allowed1 := sum__allowed1;
[L1590]              __tmp__M_Ref_bool := M_Ref_bool;
[L1591]              __tmp__sum := sum;
[L1592]              __tmp__Length := Length;
[L1593]              __tmp__now := now;
[L1594]              __tmp___balances_ERC20 := _balances_ERC20;
[L1595]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L1596]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1597]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1598]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1599]              __tmp___paused_Pausable := _paused_Pausable;
[L1600]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1601]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1602]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1603]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1604]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5381]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8313]  COND TRUE   !!__tmp___paused_Pausable[this]
[L8314]              revert := true;
[L5381]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5382]  COND TRUE   revert
[L1604]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L1605]              assume revert || gas < 0;
[L9776]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L9924]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:33:22,749 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:33:22,749 INFO  L82        PathProgramCache]: Analyzing trace with hash -51753188, now seen corresponding path program 1 times
[2020-11-25 02:33:22,750 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:33:22,767 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:33:22,921 INFO  L134       CoverageAnalysis]: Checked inductivity of 1032 backedges. 0 proven. 9 refuted. 0 times theorem prover too weak. 1023 trivial. 0 not checked.
[2020-11-25 02:33:22,922 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:33:22,922 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-11-25 02:33:22,922 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:33:22,922 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 02:33:22,922 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 02:33:22,923 INFO  L87              Difference]: Start difference. First operand 5445 states and 6193 transitions. cyclomatic complexity: 750 Second operand 7 states.
[2020-11-25 02:33:23,030 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:33:23,030 INFO  L93              Difference]: Finished difference Result 5468 states and 6219 transitions.
[2020-11-25 02:33:23,030 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 02:33:23,030 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5468 states and 6219 transitions.
[2020-11-25 02:33:23,039 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:33:23,048 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5468 states to 5451 states and 6199 transitions.
[2020-11-25 02:33:23,048 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1359
[2020-11-25 02:33:23,048 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1359
[2020-11-25 02:33:23,048 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5451 states and 6199 transitions.
[2020-11-25 02:33:23,051 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:33:23,051 INFO  L728         BuchiCegarLoop]: Abstraction has 5451 states and 6199 transitions.
[2020-11-25 02:33:23,054 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5451 states and 6199 transitions.
[2020-11-25 02:33:23,075 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5451 to 5451.
[2020-11-25 02:33:23,075 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5451 states.
[2020-11-25 02:33:23,079 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5451 states to 5451 states and 6199 transitions.
[2020-11-25 02:33:23,079 INFO  L751         BuchiCegarLoop]: Abstraction has 5451 states and 6199 transitions.
[2020-11-25 02:33:23,080 INFO  L631         BuchiCegarLoop]: Abstraction has 5451 states and 6199 transitions.
[2020-11-25 02:33:23,080 INFO  L445         BuchiCegarLoop]: ======== Iteration 14============
[2020-11-25 02:33:23,080 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5451 states and 6199 transitions.
[2020-11-25 02:33:23,085 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:33:23,085 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:33:23,085 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:33:23,086 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:33:23,086 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_ERC20Pausable0 := false;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L9914]              assume null == 0;
[L9915]  CALL        call this := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L9915]  RET         call this := FreshRefGenerator__success();
[L9916]              assume now >= 0;
[L9917]              assume DType[this] == OMToken;
[L9918]              assume msgvalue_MSG == 0;
[L9919]              gas := gas - 53000;
[L9920]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2715]              havoc __exception;
[L2716]              revert := false;
[L2717]  COND FALSE  !(__exception)
[L2744]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6181]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L6181]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6182]  COND FALSE  !(revert)
[L6185]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L6185]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6186]  COND FALSE  !(revert)
[L6189]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L6189]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]  COND FALSE  !(revert)
[L6193]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5187]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]  COND FALSE  !(revert)
[L5191]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5166]              assume msgsender_MSG != null;
[L5167]              Balance[this] := 0;
[L5168]              _paused_Pausable[this] := false;
[L5170]              _paused_Pausable[this] := false;
[L5191]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5192]  COND FALSE  !(revert)
[L6193]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6194]  COND FALSE  !(revert)
[L6197]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5305]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5305]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5306]  COND FALSE  !(revert)
[L5309]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L5309]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5310]  COND FALSE  !(revert)
[L5313]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5313]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5314]  COND FALSE  !(revert)
[L5317]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5187]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]  COND FALSE  !(revert)
[L5191]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5166]              assume msgsender_MSG != null;
[L5167]              Balance[this] := 0;
[L5168]              _paused_Pausable[this] := false;
[L5170]              _paused_Pausable[this] := false;
[L5191]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5192]  COND FALSE  !(revert)
[L5317]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5318]  COND FALSE  !(revert)
[L5321]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5274]              assume msgsender_MSG != null;
[L5275]              Balance[this] := 0;
[L5321]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5322]  COND FALSE  !(revert)
[L6197]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6198]  COND FALSE  !(revert)
[L6201]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L5619]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5619]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5620]  COND FALSE  !(revert)
[L5623]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5594]              assume msgsender_MSG != null;
[L5595]              Balance[this] := 0;
[L5596]              _name_ERC20Detailed[this] := -1676908070;
[L5597]              _symbol_ERC20Detailed[this] := -1676908070;
[L5598]              _decimals_ERC20Detailed[this] := 0;
[L5600]              _name_ERC20Detailed[this] := name_s1022;
[L5601]              _symbol_ERC20Detailed[this] := symbol_s1022;
[L5602]              _decimals_ERC20Detailed[this] := decimals_s1022;
[L5623]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5624]  COND FALSE  !(revert)
[L6201]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6202]  COND FALSE  !(revert)
[L6205]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5702]              assume msgsender_MSG != null;
[L5703]              Balance[this] := 0;
[L5705]  CALL        call __var_35 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L5705]  RET         call __var_35 := FreshRefGenerator__success();
[L5706]  COND FALSE  !(revert)
[L5709]              _minters_MinterRole[this] := __var_35;
[L5711]  COND FALSE  !(DType[this] == OMToken)
[L5716]  COND TRUE   DType[this] == ERC20Mintable
[L5717]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5877]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5877]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5878]  COND FALSE  !(revert)
[L5881]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5717]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5718]  COND FALSE  !(revert)
[L5743]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5744]  COND FALSE  !(revert)
[L6205]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6206]  COND FALSE  !(revert)
[L6209]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5939]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5939]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5940]  COND FALSE  !(revert)
[L5943]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L5943]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5944]  COND FALSE  !(revert)
[L5947]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5702]              assume msgsender_MSG != null;
[L5703]              Balance[this] := 0;
[L5705]  CALL        call __var_35 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L5705]  RET         call __var_35 := FreshRefGenerator__success();
[L5706]  COND FALSE  !(revert)
[L5709]              _minters_MinterRole[this] := __var_35;
[L5711]  COND FALSE  !(DType[this] == OMToken)
[L5716]  COND FALSE  !(DType[this] == ERC20Mintable)
[L5721]  COND TRUE   DType[this] == MinterRole
[L5722]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5877]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5877]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5878]  COND FALSE  !(revert)
[L5881]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5722]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5723]  COND FALSE  !(revert)
[L5743]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5744]  COND FALSE  !(revert)
[L5947]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5948]  COND FALSE  !(revert)
[L5951]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5912]              assume msgsender_MSG != null;
[L5913]              Balance[this] := 0;
[L5951]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]  COND FALSE  !(revert)
[L6209]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6210]  COND FALSE  !(revert)
[L6213]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6037]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L6037]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6038]  COND FALSE  !(revert)
[L6041]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L6041]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6042]  COND FALSE  !(revert)
[L6045]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6014]              assume msgsender_MSG != null;
[L6015]              Balance[this] := 0;
[L6045]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6046]  COND FALSE  !(revert)
[L6213]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6214]  COND FALSE  !(revert)
[L6217]  CALL        call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6130]              assume msgsender_MSG != null;
[L6131]              Balance[this] := 0;
[L6217]  RET         call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6218]  COND FALSE  !(revert)
[L2744]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2745]              assume !revert && gas >= 0;
[L9920]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9921]              assume !revert && gas >= 0;
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND FALSE  !(choice == 23)
[L9764]  COND FALSE  !(choice == 22)
[L9771]  COND TRUE   choice == 21
[L9772]              gas := gas - 21000;
[L9773]  COND TRUE   gas >= 0
[L9774]              assume value_s937 >= 0 && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9775]              assume msgvalue_MSG == 0;
[L9776]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s937 && p1 != to_s937) && (p2 != from_s937 || p3 != msgsender_MSG)) && from_s937 != to_s937) && value_s937 <= _balances_ERC20[this][from_s937]) && value_s937 <= _allowed_ERC20[this][from_s937][msgsender_MSG]) && _balances_ERC20[this][to_s937] + value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s937 >= 0) && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s937] >= 0) && _balances_ERC20[this][to_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s937] >= 0) && _balances_ERC20[this][from_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s937][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s937][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC20Pausable0 := true;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1578]              havoc __exception;
[L1579]              revert := false;
[L1580]  COND TRUE   __exception
[L1581]              __tmp__Balance := Balance;
[L1582]              __tmp__DType := DType;
[L1583]              __tmp__Alloc := Alloc;
[L1584]              __tmp__balance_ADDR := balance_ADDR;
[L1585]              __tmp__M_Ref_int := M_Ref_int;
[L1586]              __tmp__sum__balances0 := sum__balances0;
[L1587]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1588]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1589]              __tmp__sum__allowed1 := sum__allowed1;
[L1590]              __tmp__M_Ref_bool := M_Ref_bool;
[L1591]              __tmp__sum := sum;
[L1592]              __tmp__Length := Length;
[L1593]              __tmp__now := now;
[L1594]              __tmp___balances_ERC20 := _balances_ERC20;
[L1595]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L1596]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1597]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1598]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1599]              __tmp___paused_Pausable := _paused_Pausable;
[L1600]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1601]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1602]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1603]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1604]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5381]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8313]  COND TRUE   !!__tmp___paused_Pausable[this]
[L8314]              revert := true;
[L5381]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5382]  COND TRUE   revert
[L1604]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L1605]              assume revert || gas < 0;
[L9776]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L9924]  RET         call CorralChoice_OMToken(this);

Loop:
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND FALSE  !(choice == 23)
[L9764]  COND FALSE  !(choice == 22)
[L9771]  COND TRUE   choice == 21
[L9772]              gas := gas - 21000;
[L9773]  COND TRUE   gas >= 0
[L9774]              assume value_s937 >= 0 && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9775]              assume msgvalue_MSG == 0;
[L9776]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s937 && p1 != to_s937) && (p2 != from_s937 || p3 != msgsender_MSG)) && from_s937 != to_s937) && value_s937 <= _balances_ERC20[this][from_s937]) && value_s937 <= _allowed_ERC20[this][from_s937][msgsender_MSG]) && _balances_ERC20[this][to_s937] + value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s937 >= 0) && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s937] >= 0) && _balances_ERC20[this][to_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s937] >= 0) && _balances_ERC20[this][from_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s937][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s937][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC20Pausable0 := true;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1578]              havoc __exception;
[L1579]              revert := false;
[L1580]  COND TRUE   __exception
[L1581]              __tmp__Balance := Balance;
[L1582]              __tmp__DType := DType;
[L1583]              __tmp__Alloc := Alloc;
[L1584]              __tmp__balance_ADDR := balance_ADDR;
[L1585]              __tmp__M_Ref_int := M_Ref_int;
[L1586]              __tmp__sum__balances0 := sum__balances0;
[L1587]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1588]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1589]              __tmp__sum__allowed1 := sum__allowed1;
[L1590]              __tmp__M_Ref_bool := M_Ref_bool;
[L1591]              __tmp__sum := sum;
[L1592]              __tmp__Length := Length;
[L1593]              __tmp__now := now;
[L1594]              __tmp___balances_ERC20 := _balances_ERC20;
[L1595]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L1596]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1597]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1598]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1599]              __tmp___paused_Pausable := _paused_Pausable;
[L1600]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1601]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1602]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1603]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1604]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5381]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8313]  COND TRUE   !!__tmp___paused_Pausable[this]
[L8314]              revert := true;
[L5381]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5382]  COND TRUE   revert
[L1604]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L1605]              assume revert || gas < 0;
[L9776]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L9924]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:33:23,090 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:33:23,090 INFO  L82        PathProgramCache]: Analyzing trace with hash 669964006, now seen corresponding path program 1 times
[2020-11-25 02:33:23,091 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:33:23,108 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:33:23,278 INFO  L134       CoverageAnalysis]: Checked inductivity of 1027 backedges. 0 proven. 6 refuted. 0 times theorem prover too weak. 1021 trivial. 0 not checked.
[2020-11-25 02:33:23,279 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:33:23,279 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-11-25 02:33:23,279 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:33:23,279 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 02:33:23,279 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 02:33:23,280 INFO  L87              Difference]: Start difference. First operand 5451 states and 6199 transitions. cyclomatic complexity: 750 Second operand 7 states.
[2020-11-25 02:33:23,383 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:33:23,383 INFO  L93              Difference]: Finished difference Result 5474 states and 6225 transitions.
[2020-11-25 02:33:23,384 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 02:33:23,384 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5474 states and 6225 transitions.
[2020-11-25 02:33:23,392 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:33:23,400 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5474 states to 5457 states and 6205 transitions.
[2020-11-25 02:33:23,400 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1359
[2020-11-25 02:33:23,401 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1359
[2020-11-25 02:33:23,401 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5457 states and 6205 transitions.
[2020-11-25 02:33:23,404 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:33:23,404 INFO  L728         BuchiCegarLoop]: Abstraction has 5457 states and 6205 transitions.
[2020-11-25 02:33:23,407 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5457 states and 6205 transitions.
[2020-11-25 02:33:23,427 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5457 to 5451.
[2020-11-25 02:33:23,427 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5451 states.
[2020-11-25 02:33:23,432 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5451 states to 5451 states and 6199 transitions.
[2020-11-25 02:33:23,432 INFO  L751         BuchiCegarLoop]: Abstraction has 5451 states and 6199 transitions.
[2020-11-25 02:33:23,432 INFO  L631         BuchiCegarLoop]: Abstraction has 5451 states and 6199 transitions.
[2020-11-25 02:33:23,432 INFO  L445         BuchiCegarLoop]: ======== Iteration 15============
[2020-11-25 02:33:23,432 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5451 states and 6199 transitions.
[2020-11-25 02:33:23,437 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:33:23,437 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:33:23,437 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:33:23,438 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:33:23,438 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_ERC20Pausable0 := false;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L9914]              assume null == 0;
[L9915]  CALL        call this := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L9915]  RET         call this := FreshRefGenerator__success();
[L9916]              assume now >= 0;
[L9917]              assume DType[this] == OMToken;
[L9918]              assume msgvalue_MSG == 0;
[L9919]              gas := gas - 53000;
[L9920]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2715]              havoc __exception;
[L2716]              revert := false;
[L2717]  COND FALSE  !(__exception)
[L2744]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6181]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L6181]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6182]  COND FALSE  !(revert)
[L6185]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L6185]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6186]  COND FALSE  !(revert)
[L6189]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L6189]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]  COND FALSE  !(revert)
[L6193]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5187]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]  COND FALSE  !(revert)
[L5191]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5166]              assume msgsender_MSG != null;
[L5167]              Balance[this] := 0;
[L5168]              _paused_Pausable[this] := false;
[L5170]              _paused_Pausable[this] := false;
[L5191]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5192]  COND FALSE  !(revert)
[L6193]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6194]  COND FALSE  !(revert)
[L6197]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5305]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5305]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5306]  COND FALSE  !(revert)
[L5309]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L5309]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5310]  COND FALSE  !(revert)
[L5313]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5313]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5314]  COND FALSE  !(revert)
[L5317]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5187]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]  COND FALSE  !(revert)
[L5191]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5166]              assume msgsender_MSG != null;
[L5167]              Balance[this] := 0;
[L5168]              _paused_Pausable[this] := false;
[L5170]              _paused_Pausable[this] := false;
[L5191]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5192]  COND FALSE  !(revert)
[L5317]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5318]  COND FALSE  !(revert)
[L5321]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5274]              assume msgsender_MSG != null;
[L5275]              Balance[this] := 0;
[L5321]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5322]  COND FALSE  !(revert)
[L6197]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6198]  COND FALSE  !(revert)
[L6201]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L5619]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5619]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5620]  COND FALSE  !(revert)
[L5623]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5594]              assume msgsender_MSG != null;
[L5595]              Balance[this] := 0;
[L5596]              _name_ERC20Detailed[this] := -1676908070;
[L5597]              _symbol_ERC20Detailed[this] := -1676908070;
[L5598]              _decimals_ERC20Detailed[this] := 0;
[L5600]              _name_ERC20Detailed[this] := name_s1022;
[L5601]              _symbol_ERC20Detailed[this] := symbol_s1022;
[L5602]              _decimals_ERC20Detailed[this] := decimals_s1022;
[L5623]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5624]  COND FALSE  !(revert)
[L6201]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6202]  COND FALSE  !(revert)
[L6205]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5702]              assume msgsender_MSG != null;
[L5703]              Balance[this] := 0;
[L5705]  CALL        call __var_35 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L5705]  RET         call __var_35 := FreshRefGenerator__success();
[L5706]  COND FALSE  !(revert)
[L5709]              _minters_MinterRole[this] := __var_35;
[L5711]  COND TRUE   DType[this] == OMToken
[L5712]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5877]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5877]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5878]  COND FALSE  !(revert)
[L5881]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5712]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5713]  COND FALSE  !(revert)
[L5743]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5744]  COND FALSE  !(revert)
[L6205]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6206]  COND FALSE  !(revert)
[L6209]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5939]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5939]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5940]  COND FALSE  !(revert)
[L5943]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L5943]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5944]  COND FALSE  !(revert)
[L5947]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5702]              assume msgsender_MSG != null;
[L5703]              Balance[this] := 0;
[L5705]  CALL        call __var_35 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L5705]  RET         call __var_35 := FreshRefGenerator__success();
[L5706]  COND FALSE  !(revert)
[L5709]              _minters_MinterRole[this] := __var_35;
[L5711]  COND TRUE   DType[this] == OMToken
[L5712]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5877]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5877]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5878]  COND FALSE  !(revert)
[L5881]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5712]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5713]  COND FALSE  !(revert)
[L5743]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5744]  COND FALSE  !(revert)
[L5947]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5948]  COND FALSE  !(revert)
[L5951]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5912]              assume msgsender_MSG != null;
[L5913]              Balance[this] := 0;
[L5951]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]  COND FALSE  !(revert)
[L6209]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6210]  COND FALSE  !(revert)
[L6213]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6037]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L6037]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6038]  COND FALSE  !(revert)
[L6041]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L6041]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6042]  COND FALSE  !(revert)
[L6045]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6014]              assume msgsender_MSG != null;
[L6015]              Balance[this] := 0;
[L6045]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6046]  COND FALSE  !(revert)
[L6213]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6214]  COND FALSE  !(revert)
[L6217]  CALL        call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6130]              assume msgsender_MSG != null;
[L6131]              Balance[this] := 0;
[L6217]  RET         call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6218]  COND FALSE  !(revert)
[L2744]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2745]              assume !revert && gas >= 0;
[L9920]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9921]              assume !revert && gas >= 0;
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND FALSE  !(choice == 23)
[L9764]  COND FALSE  !(choice == 22)
[L9771]  COND TRUE   choice == 21
[L9772]              gas := gas - 21000;
[L9773]  COND TRUE   gas >= 0
[L9774]              assume value_s937 >= 0 && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9775]              assume msgvalue_MSG == 0;
[L9776]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s937 && p1 != to_s937) && (p2 != from_s937 || p3 != msgsender_MSG)) && from_s937 != to_s937) && value_s937 <= _balances_ERC20[this][from_s937]) && value_s937 <= _allowed_ERC20[this][from_s937][msgsender_MSG]) && _balances_ERC20[this][to_s937] + value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s937 >= 0) && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s937] >= 0) && _balances_ERC20[this][to_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s937] >= 0) && _balances_ERC20[this][from_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s937][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s937][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC20Pausable0 := true;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1578]              havoc __exception;
[L1579]              revert := false;
[L1580]  COND TRUE   __exception
[L1581]              __tmp__Balance := Balance;
[L1582]              __tmp__DType := DType;
[L1583]              __tmp__Alloc := Alloc;
[L1584]              __tmp__balance_ADDR := balance_ADDR;
[L1585]              __tmp__M_Ref_int := M_Ref_int;
[L1586]              __tmp__sum__balances0 := sum__balances0;
[L1587]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1588]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1589]              __tmp__sum__allowed1 := sum__allowed1;
[L1590]              __tmp__M_Ref_bool := M_Ref_bool;
[L1591]              __tmp__sum := sum;
[L1592]              __tmp__Length := Length;
[L1593]              __tmp__now := now;
[L1594]              __tmp___balances_ERC20 := _balances_ERC20;
[L1595]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L1596]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1597]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1598]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1599]              __tmp___paused_Pausable := _paused_Pausable;
[L1600]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1601]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1602]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1603]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1604]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5381]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8313]  COND TRUE   !!__tmp___paused_Pausable[this]
[L8314]              revert := true;
[L5381]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5382]  COND TRUE   revert
[L1604]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L1605]              assume revert || gas < 0;
[L9776]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L9924]  RET         call CorralChoice_OMToken(this);

Loop:
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND FALSE  !(choice == 23)
[L9764]  COND FALSE  !(choice == 22)
[L9771]  COND TRUE   choice == 21
[L9772]              gas := gas - 21000;
[L9773]  COND TRUE   gas >= 0
[L9774]              assume value_s937 >= 0 && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9775]              assume msgvalue_MSG == 0;
[L9776]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s937 && p1 != to_s937) && (p2 != from_s937 || p3 != msgsender_MSG)) && from_s937 != to_s937) && value_s937 <= _balances_ERC20[this][from_s937]) && value_s937 <= _allowed_ERC20[this][from_s937][msgsender_MSG]) && _balances_ERC20[this][to_s937] + value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s937 >= 0) && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s937] >= 0) && _balances_ERC20[this][to_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s937] >= 0) && _balances_ERC20[this][from_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s937][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s937][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC20Pausable0 := true;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1578]              havoc __exception;
[L1579]              revert := false;
[L1580]  COND TRUE   __exception
[L1581]              __tmp__Balance := Balance;
[L1582]              __tmp__DType := DType;
[L1583]              __tmp__Alloc := Alloc;
[L1584]              __tmp__balance_ADDR := balance_ADDR;
[L1585]              __tmp__M_Ref_int := M_Ref_int;
[L1586]              __tmp__sum__balances0 := sum__balances0;
[L1587]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1588]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1589]              __tmp__sum__allowed1 := sum__allowed1;
[L1590]              __tmp__M_Ref_bool := M_Ref_bool;
[L1591]              __tmp__sum := sum;
[L1592]              __tmp__Length := Length;
[L1593]              __tmp__now := now;
[L1594]              __tmp___balances_ERC20 := _balances_ERC20;
[L1595]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L1596]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1597]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1598]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1599]              __tmp___paused_Pausable := _paused_Pausable;
[L1600]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1601]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1602]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1603]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1604]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5381]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8313]  COND TRUE   !!__tmp___paused_Pausable[this]
[L8314]              revert := true;
[L5381]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5382]  COND TRUE   revert
[L1604]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L1605]              assume revert || gas < 0;
[L9776]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L9924]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:33:23,443 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:33:23,443 INFO  L82        PathProgramCache]: Analyzing trace with hash 1716492956, now seen corresponding path program 1 times
[2020-11-25 02:33:23,444 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:33:23,460 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:33:23,647 INFO  L134       CoverageAnalysis]: Checked inductivity of 1030 backedges. 6 proven. 0 refuted. 0 times theorem prover too weak. 1024 trivial. 0 not checked.
[2020-11-25 02:33:23,647 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:33:23,647 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [13] imperfect sequences [] total 13
[2020-11-25 02:33:23,648 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:33:23,648 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-11-25 02:33:23,648 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=25, Invalid=157, Unknown=0, NotChecked=0, Total=182
[2020-11-25 02:33:23,648 INFO  L87              Difference]: Start difference. First operand 5451 states and 6199 transitions. cyclomatic complexity: 750 Second operand 14 states.
[2020-11-25 02:33:29,041 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:33:29,042 INFO  L93              Difference]: Finished difference Result 8559 states and 9821 transitions.
[2020-11-25 02:33:29,042 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 18 states. 
[2020-11-25 02:33:29,042 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8559 states and 9821 transitions.
[2020-11-25 02:33:29,058 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 16
[2020-11-25 02:33:29,073 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8559 states to 8559 states and 9821 transitions.
[2020-11-25 02:33:29,073 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1983
[2020-11-25 02:33:29,074 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1983
[2020-11-25 02:33:29,074 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8559 states and 9821 transitions.
[2020-11-25 02:33:29,079 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:33:29,079 INFO  L728         BuchiCegarLoop]: Abstraction has 8559 states and 9821 transitions.
[2020-11-25 02:33:29,083 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8559 states and 9821 transitions.
[2020-11-25 02:33:29,120 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8559 to 7659.
[2020-11-25 02:33:29,120 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7659 states.
[2020-11-25 02:33:29,129 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7659 states to 7659 states and 8921 transitions.
[2020-11-25 02:33:29,129 INFO  L751         BuchiCegarLoop]: Abstraction has 7659 states and 8921 transitions.
[2020-11-25 02:33:29,129 INFO  L631         BuchiCegarLoop]: Abstraction has 7659 states and 8921 transitions.
[2020-11-25 02:33:29,129 INFO  L445         BuchiCegarLoop]: ======== Iteration 16============
[2020-11-25 02:33:29,129 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7659 states and 8921 transitions.
[2020-11-25 02:33:29,138 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 16
[2020-11-25 02:33:29,138 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:33:29,138 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:33:29,139 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:33:29,139 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_ERC20Pausable0 := false;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L9914]              assume null == 0;
[L9915]  CALL        call this := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L9915]  RET         call this := FreshRefGenerator__success();
[L9916]              assume now >= 0;
[L9917]              assume DType[this] == OMToken;
[L9918]              assume msgvalue_MSG == 0;
[L9919]              gas := gas - 53000;
[L9920]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2715]              havoc __exception;
[L2716]              revert := false;
[L2717]  COND FALSE  !(__exception)
[L2744]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6181]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L6181]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6182]  COND FALSE  !(revert)
[L6185]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L6185]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6186]  COND FALSE  !(revert)
[L6189]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L6189]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]  COND FALSE  !(revert)
[L6193]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5187]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]  COND FALSE  !(revert)
[L5191]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5166]              assume msgsender_MSG != null;
[L5167]              Balance[this] := 0;
[L5168]              _paused_Pausable[this] := false;
[L5170]              _paused_Pausable[this] := false;
[L5191]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5192]  COND FALSE  !(revert)
[L6193]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6194]  COND FALSE  !(revert)
[L6197]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5305]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5305]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5306]  COND FALSE  !(revert)
[L5309]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L5309]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5310]  COND FALSE  !(revert)
[L5313]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5313]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5314]  COND FALSE  !(revert)
[L5317]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5187]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]  COND FALSE  !(revert)
[L5191]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5166]              assume msgsender_MSG != null;
[L5167]              Balance[this] := 0;
[L5168]              _paused_Pausable[this] := false;
[L5170]              _paused_Pausable[this] := false;
[L5191]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5192]  COND FALSE  !(revert)
[L5317]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5318]  COND FALSE  !(revert)
[L5321]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5274]              assume msgsender_MSG != null;
[L5275]              Balance[this] := 0;
[L5321]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5322]  COND FALSE  !(revert)
[L6197]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6198]  COND FALSE  !(revert)
[L6201]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L5619]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5619]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5620]  COND FALSE  !(revert)
[L5623]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5594]              assume msgsender_MSG != null;
[L5595]              Balance[this] := 0;
[L5596]              _name_ERC20Detailed[this] := -1676908070;
[L5597]              _symbol_ERC20Detailed[this] := -1676908070;
[L5598]              _decimals_ERC20Detailed[this] := 0;
[L5600]              _name_ERC20Detailed[this] := name_s1022;
[L5601]              _symbol_ERC20Detailed[this] := symbol_s1022;
[L5602]              _decimals_ERC20Detailed[this] := decimals_s1022;
[L5623]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5624]  COND FALSE  !(revert)
[L6201]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6202]  COND FALSE  !(revert)
[L6205]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5702]              assume msgsender_MSG != null;
[L5703]              Balance[this] := 0;
[L5705]  CALL        call __var_35 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L5705]  RET         call __var_35 := FreshRefGenerator__success();
[L5706]  COND FALSE  !(revert)
[L5709]              _minters_MinterRole[this] := __var_35;
[L5711]  COND TRUE   DType[this] == OMToken
[L5712]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5877]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5877]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5878]  COND FALSE  !(revert)
[L5881]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5712]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5713]  COND FALSE  !(revert)
[L5743]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5744]  COND FALSE  !(revert)
[L6205]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6206]  COND FALSE  !(revert)
[L6209]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5939]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5939]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5940]  COND FALSE  !(revert)
[L5943]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L5943]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5944]  COND FALSE  !(revert)
[L5947]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5702]              assume msgsender_MSG != null;
[L5703]              Balance[this] := 0;
[L5705]  CALL        call __var_35 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L5705]  RET         call __var_35 := FreshRefGenerator__success();
[L5706]  COND FALSE  !(revert)
[L5709]              _minters_MinterRole[this] := __var_35;
[L5711]  COND TRUE   DType[this] == OMToken
[L5712]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5877]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5877]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5878]  COND FALSE  !(revert)
[L5881]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5712]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5713]  COND FALSE  !(revert)
[L5743]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5744]  COND FALSE  !(revert)
[L5947]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5948]  COND FALSE  !(revert)
[L5951]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5912]              assume msgsender_MSG != null;
[L5913]              Balance[this] := 0;
[L5951]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]  COND FALSE  !(revert)
[L6209]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6210]  COND FALSE  !(revert)
[L6213]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6037]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L6037]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6038]  COND FALSE  !(revert)
[L6041]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L6041]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6042]  COND FALSE  !(revert)
[L6045]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6014]              assume msgsender_MSG != null;
[L6015]              Balance[this] := 0;
[L6045]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6046]  COND FALSE  !(revert)
[L6213]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6214]  COND FALSE  !(revert)
[L6217]  CALL        call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6130]              assume msgsender_MSG != null;
[L6131]              Balance[this] := 0;
[L6217]  RET         call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6218]  COND FALSE  !(revert)
[L2744]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2745]              assume !revert && gas >= 0;
[L9920]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9921]              assume !revert && gas >= 0;
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND FALSE  !(choice == 23)
[L9764]  COND FALSE  !(choice == 22)
[L9771]  COND TRUE   choice == 21
[L9772]              gas := gas - 21000;
[L9773]  COND TRUE   gas >= 0
[L9774]              assume value_s937 >= 0 && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9775]              assume msgvalue_MSG == 0;
[L9776]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s937 && p1 != to_s937) && (p2 != from_s937 || p3 != msgsender_MSG)) && from_s937 != to_s937) && value_s937 <= _balances_ERC20[this][from_s937]) && value_s937 <= _allowed_ERC20[this][from_s937][msgsender_MSG]) && _balances_ERC20[this][to_s937] + value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s937 >= 0) && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s937] >= 0) && _balances_ERC20[this][to_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s937] >= 0) && _balances_ERC20[this][from_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s937][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s937][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC20Pausable0 := true;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1578]              havoc __exception;
[L1579]              revert := false;
[L1580]  COND TRUE   __exception
[L1581]              __tmp__Balance := Balance;
[L1582]              __tmp__DType := DType;
[L1583]              __tmp__Alloc := Alloc;
[L1584]              __tmp__balance_ADDR := balance_ADDR;
[L1585]              __tmp__M_Ref_int := M_Ref_int;
[L1586]              __tmp__sum__balances0 := sum__balances0;
[L1587]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1588]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1589]              __tmp__sum__allowed1 := sum__allowed1;
[L1590]              __tmp__M_Ref_bool := M_Ref_bool;
[L1591]              __tmp__sum := sum;
[L1592]              __tmp__Length := Length;
[L1593]              __tmp__now := now;
[L1594]              __tmp___balances_ERC20 := _balances_ERC20;
[L1595]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L1596]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1597]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1598]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1599]              __tmp___paused_Pausable := _paused_Pausable;
[L1600]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1601]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1602]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1603]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1604]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5381]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8313]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L5381]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5382]  COND FALSE  !(revert)
[L5385]  COND FALSE  !(__tmp__DType[this] == OMToken)
[L5390]  COND TRUE   __tmp__DType[this] == ERC20Pausable
[L5391]  CALL        call __var_27 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L4355]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___allowed_ERC20[this][from_s351][msgsender_MSG], value_s351);
[L4102]  COND TRUE   !(b_s149 <= a_s149)
[L4103]              revert := true;
[L4355]  RET         call __var_2 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___allowed_ERC20[this][from_s351][msgsender_MSG], value_s351);
[L4356]  COND TRUE   revert
[L5391]  RET         call __var_27 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5392]  COND TRUE   revert
[L1604]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L1605]              assume revert || gas < 0;
[L9776]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L9924]  RET         call CorralChoice_OMToken(this);

Loop:
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND FALSE  !(choice == 23)
[L9764]  COND FALSE  !(choice == 22)
[L9771]  COND TRUE   choice == 21
[L9772]              gas := gas - 21000;
[L9773]  COND TRUE   gas >= 0
[L9774]              assume value_s937 >= 0 && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9775]              assume msgvalue_MSG == 0;
[L9776]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s937 && p1 != to_s937) && (p2 != from_s937 || p3 != msgsender_MSG)) && from_s937 != to_s937) && value_s937 <= _balances_ERC20[this][from_s937]) && value_s937 <= _allowed_ERC20[this][from_s937][msgsender_MSG]) && _balances_ERC20[this][to_s937] + value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s937 >= 0) && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s937] >= 0) && _balances_ERC20[this][to_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s937] >= 0) && _balances_ERC20[this][from_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s937][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s937][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC20Pausable0 := true;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1578]              havoc __exception;
[L1579]              revert := false;
[L1580]  COND TRUE   __exception
[L1581]              __tmp__Balance := Balance;
[L1582]              __tmp__DType := DType;
[L1583]              __tmp__Alloc := Alloc;
[L1584]              __tmp__balance_ADDR := balance_ADDR;
[L1585]              __tmp__M_Ref_int := M_Ref_int;
[L1586]              __tmp__sum__balances0 := sum__balances0;
[L1587]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1588]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1589]              __tmp__sum__allowed1 := sum__allowed1;
[L1590]              __tmp__M_Ref_bool := M_Ref_bool;
[L1591]              __tmp__sum := sum;
[L1592]              __tmp__Length := Length;
[L1593]              __tmp__now := now;
[L1594]              __tmp___balances_ERC20 := _balances_ERC20;
[L1595]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L1596]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1597]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1598]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1599]              __tmp___paused_Pausable := _paused_Pausable;
[L1600]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1601]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1602]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1603]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1604]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5381]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8313]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L5381]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5382]  COND FALSE  !(revert)
[L5385]  COND FALSE  !(__tmp__DType[this] == OMToken)
[L5390]  COND TRUE   __tmp__DType[this] == ERC20Pausable
[L5391]  CALL        call __var_27 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L4355]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___allowed_ERC20[this][from_s351][msgsender_MSG], value_s351);
[L4102]  COND TRUE   !(b_s149 <= a_s149)
[L4103]              revert := true;
[L4355]  RET         call __var_2 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___allowed_ERC20[this][from_s351][msgsender_MSG], value_s351);
[L4356]  COND TRUE   revert
[L5391]  RET         call __var_27 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5392]  COND TRUE   revert
[L1604]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L1605]              assume revert || gas < 0;
[L9776]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L9924]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:33:29,143 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:33:29,144 INFO  L82        PathProgramCache]: Analyzing trace with hash 1416080980, now seen corresponding path program 1 times
[2020-11-25 02:33:29,144 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:33:29,162 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:33:29,374 INFO  L134       CoverageAnalysis]: Checked inductivity of 1030 backedges. 9 proven. 0 refuted. 0 times theorem prover too weak. 1021 trivial. 0 not checked.
[2020-11-25 02:33:29,375 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:33:29,375 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [11] imperfect sequences [] total 11
[2020-11-25 02:33:29,375 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:33:29,375 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-11-25 02:33:29,376 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=21, Invalid=111, Unknown=0, NotChecked=0, Total=132
[2020-11-25 02:33:29,376 INFO  L87              Difference]: Start difference. First operand 7659 states and 8921 transitions. cyclomatic complexity: 1266 Second operand 12 states.
[2020-11-25 02:33:31,052 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:33:31,053 INFO  L93              Difference]: Finished difference Result 9971 states and 11724 transitions.
[2020-11-25 02:33:31,053 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 13 states. 
[2020-11-25 02:33:31,053 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9971 states and 11724 transitions.
[2020-11-25 02:33:31,074 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 24
[2020-11-25 02:33:31,094 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9971 states to 9928 states and 11666 transitions.
[2020-11-25 02:33:31,094 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2341
[2020-11-25 02:33:31,095 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2341
[2020-11-25 02:33:31,095 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9928 states and 11666 transitions.
[2020-11-25 02:33:31,100 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:33:31,100 INFO  L728         BuchiCegarLoop]: Abstraction has 9928 states and 11666 transitions.
[2020-11-25 02:33:31,104 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9928 states and 11666 transitions.
[2020-11-25 02:33:31,149 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9928 to 9836.
[2020-11-25 02:33:31,149 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9836 states.
[2020-11-25 02:33:31,160 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9836 states to 9836 states and 11574 transitions.
[2020-11-25 02:33:31,161 INFO  L751         BuchiCegarLoop]: Abstraction has 9836 states and 11574 transitions.
[2020-11-25 02:33:31,161 INFO  L631         BuchiCegarLoop]: Abstraction has 9836 states and 11574 transitions.
[2020-11-25 02:33:31,161 INFO  L445         BuchiCegarLoop]: ======== Iteration 17============
[2020-11-25 02:33:31,161 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9836 states and 11574 transitions.
[2020-11-25 02:33:31,171 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 24
[2020-11-25 02:33:31,171 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:33:31,171 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:33:31,172 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:33:31,173 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_ERC20Pausable0 := false;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L9914]              assume null == 0;
[L9915]  CALL        call this := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L9915]  RET         call this := FreshRefGenerator__success();
[L9916]              assume now >= 0;
[L9917]              assume DType[this] == OMToken;
[L9918]              assume msgvalue_MSG == 0;
[L9919]              gas := gas - 53000;
[L9920]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2715]              havoc __exception;
[L2716]              revert := false;
[L2717]  COND FALSE  !(__exception)
[L2744]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6181]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L6181]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6182]  COND FALSE  !(revert)
[L6185]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L6185]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6186]  COND FALSE  !(revert)
[L6189]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L6189]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]  COND FALSE  !(revert)
[L6193]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5187]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]  COND FALSE  !(revert)
[L5191]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5166]              assume msgsender_MSG != null;
[L5167]              Balance[this] := 0;
[L5168]              _paused_Pausable[this] := false;
[L5170]              _paused_Pausable[this] := false;
[L5191]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5192]  COND FALSE  !(revert)
[L6193]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6194]  COND FALSE  !(revert)
[L6197]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5305]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5305]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5306]  COND FALSE  !(revert)
[L5309]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L5309]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5310]  COND FALSE  !(revert)
[L5313]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5313]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5314]  COND FALSE  !(revert)
[L5317]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5187]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]  COND FALSE  !(revert)
[L5191]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5166]              assume msgsender_MSG != null;
[L5167]              Balance[this] := 0;
[L5168]              _paused_Pausable[this] := false;
[L5170]              _paused_Pausable[this] := false;
[L5191]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5192]  COND FALSE  !(revert)
[L5317]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5318]  COND FALSE  !(revert)
[L5321]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5274]              assume msgsender_MSG != null;
[L5275]              Balance[this] := 0;
[L5321]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5322]  COND FALSE  !(revert)
[L6197]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6198]  COND FALSE  !(revert)
[L6201]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L5619]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5619]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5620]  COND FALSE  !(revert)
[L5623]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5594]              assume msgsender_MSG != null;
[L5595]              Balance[this] := 0;
[L5596]              _name_ERC20Detailed[this] := -1676908070;
[L5597]              _symbol_ERC20Detailed[this] := -1676908070;
[L5598]              _decimals_ERC20Detailed[this] := 0;
[L5600]              _name_ERC20Detailed[this] := name_s1022;
[L5601]              _symbol_ERC20Detailed[this] := symbol_s1022;
[L5602]              _decimals_ERC20Detailed[this] := decimals_s1022;
[L5623]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5624]  COND FALSE  !(revert)
[L6201]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6202]  COND FALSE  !(revert)
[L6205]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5702]              assume msgsender_MSG != null;
[L5703]              Balance[this] := 0;
[L5705]  CALL        call __var_35 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L5705]  RET         call __var_35 := FreshRefGenerator__success();
[L5706]  COND FALSE  !(revert)
[L5709]              _minters_MinterRole[this] := __var_35;
[L5711]  COND TRUE   DType[this] == OMToken
[L5712]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5877]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5877]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5878]  COND FALSE  !(revert)
[L5881]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5712]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5713]  COND FALSE  !(revert)
[L5743]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5744]  COND FALSE  !(revert)
[L6205]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6206]  COND FALSE  !(revert)
[L6209]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5939]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5939]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5940]  COND FALSE  !(revert)
[L5943]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L5943]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5944]  COND FALSE  !(revert)
[L5947]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5702]              assume msgsender_MSG != null;
[L5703]              Balance[this] := 0;
[L5705]  CALL        call __var_35 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L5705]  RET         call __var_35 := FreshRefGenerator__success();
[L5706]  COND FALSE  !(revert)
[L5709]              _minters_MinterRole[this] := __var_35;
[L5711]  COND TRUE   DType[this] == OMToken
[L5712]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5877]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5877]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5878]  COND FALSE  !(revert)
[L5881]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5712]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5713]  COND FALSE  !(revert)
[L5743]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5744]  COND FALSE  !(revert)
[L5947]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5948]  COND FALSE  !(revert)
[L5951]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5912]              assume msgsender_MSG != null;
[L5913]              Balance[this] := 0;
[L5951]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]  COND FALSE  !(revert)
[L6209]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6210]  COND FALSE  !(revert)
[L6213]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6037]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L6037]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6038]  COND FALSE  !(revert)
[L6041]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L6041]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6042]  COND FALSE  !(revert)
[L6045]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6014]              assume msgsender_MSG != null;
[L6015]              Balance[this] := 0;
[L6045]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6046]  COND FALSE  !(revert)
[L6213]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6214]  COND FALSE  !(revert)
[L6217]  CALL        call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6130]              assume msgsender_MSG != null;
[L6131]              Balance[this] := 0;
[L6217]  RET         call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6218]  COND FALSE  !(revert)
[L2744]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2745]              assume !revert && gas >= 0;
[L9920]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9921]              assume !revert && gas >= 0;
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND FALSE  !(choice == 23)
[L9764]  COND FALSE  !(choice == 22)
[L9771]  COND TRUE   choice == 21
[L9772]              gas := gas - 21000;
[L9773]  COND TRUE   gas >= 0
[L9774]              assume value_s937 >= 0 && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9775]              assume msgvalue_MSG == 0;
[L9776]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s937 && p1 != to_s937) && (p2 != from_s937 || p3 != msgsender_MSG)) && from_s937 != to_s937) && value_s937 <= _balances_ERC20[this][from_s937]) && value_s937 <= _allowed_ERC20[this][from_s937][msgsender_MSG]) && _balances_ERC20[this][to_s937] + value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s937 >= 0) && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s937] >= 0) && _balances_ERC20[this][to_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s937] >= 0) && _balances_ERC20[this][from_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s937][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s937][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC20Pausable0 := true;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1578]              havoc __exception;
[L1579]              revert := false;
[L1580]  COND TRUE   __exception
[L1581]              __tmp__Balance := Balance;
[L1582]              __tmp__DType := DType;
[L1583]              __tmp__Alloc := Alloc;
[L1584]              __tmp__balance_ADDR := balance_ADDR;
[L1585]              __tmp__M_Ref_int := M_Ref_int;
[L1586]              __tmp__sum__balances0 := sum__balances0;
[L1587]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1588]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1589]              __tmp__sum__allowed1 := sum__allowed1;
[L1590]              __tmp__M_Ref_bool := M_Ref_bool;
[L1591]              __tmp__sum := sum;
[L1592]              __tmp__Length := Length;
[L1593]              __tmp__now := now;
[L1594]              __tmp___balances_ERC20 := _balances_ERC20;
[L1595]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L1596]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1597]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1598]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1599]              __tmp___paused_Pausable := _paused_Pausable;
[L1600]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1601]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1602]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1603]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1604]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5381]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8313]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L5381]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5382]  COND FALSE  !(revert)
[L5385]  COND TRUE   __tmp__DType[this] == OMToken
[L5386]  CALL        call __var_27 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L4355]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___allowed_ERC20[this][from_s351][msgsender_MSG], value_s351);
[L4102]  COND TRUE   !(b_s149 <= a_s149)
[L4103]              revert := true;
[L4355]  RET         call __var_2 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___allowed_ERC20[this][from_s351][msgsender_MSG], value_s351);
[L4356]  COND TRUE   revert
[L5386]  RET         call __var_27 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5387]  COND TRUE   revert
[L1604]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L1605]              assume revert || gas < 0;
[L9776]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L9924]  RET         call CorralChoice_OMToken(this);

Loop:
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND FALSE  !(choice == 23)
[L9764]  COND FALSE  !(choice == 22)
[L9771]  COND TRUE   choice == 21
[L9772]              gas := gas - 21000;
[L9773]  COND TRUE   gas >= 0
[L9774]              assume value_s937 >= 0 && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9775]              assume msgvalue_MSG == 0;
[L9776]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s937 && p1 != to_s937) && (p2 != from_s937 || p3 != msgsender_MSG)) && from_s937 != to_s937) && value_s937 <= _balances_ERC20[this][from_s937]) && value_s937 <= _allowed_ERC20[this][from_s937][msgsender_MSG]) && _balances_ERC20[this][to_s937] + value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s937 >= 0) && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s937] >= 0) && _balances_ERC20[this][to_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s937] >= 0) && _balances_ERC20[this][from_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s937][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s937][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC20Pausable0 := true;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1578]              havoc __exception;
[L1579]              revert := false;
[L1580]  COND TRUE   __exception
[L1581]              __tmp__Balance := Balance;
[L1582]              __tmp__DType := DType;
[L1583]              __tmp__Alloc := Alloc;
[L1584]              __tmp__balance_ADDR := balance_ADDR;
[L1585]              __tmp__M_Ref_int := M_Ref_int;
[L1586]              __tmp__sum__balances0 := sum__balances0;
[L1587]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1588]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1589]              __tmp__sum__allowed1 := sum__allowed1;
[L1590]              __tmp__M_Ref_bool := M_Ref_bool;
[L1591]              __tmp__sum := sum;
[L1592]              __tmp__Length := Length;
[L1593]              __tmp__now := now;
[L1594]              __tmp___balances_ERC20 := _balances_ERC20;
[L1595]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L1596]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1597]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1598]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1599]              __tmp___paused_Pausable := _paused_Pausable;
[L1600]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1601]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1602]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1603]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1604]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5381]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8313]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L5381]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5382]  COND FALSE  !(revert)
[L5385]  COND TRUE   __tmp__DType[this] == OMToken
[L5386]  CALL        call __var_27 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L4355]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___allowed_ERC20[this][from_s351][msgsender_MSG], value_s351);
[L4102]  COND TRUE   !(b_s149 <= a_s149)
[L4103]              revert := true;
[L4355]  RET         call __var_2 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___allowed_ERC20[this][from_s351][msgsender_MSG], value_s351);
[L4356]  COND TRUE   revert
[L5386]  RET         call __var_27 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5387]  COND TRUE   revert
[L1604]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L1605]              assume revert || gas < 0;
[L9776]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L9924]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:33:31,177 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:33:31,177 INFO  L82        PathProgramCache]: Analyzing trace with hash -1571650186, now seen corresponding path program 1 times
[2020-11-25 02:33:31,178 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:33:31,195 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:33:31,388 INFO  L134       CoverageAnalysis]: Checked inductivity of 1030 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1030 trivial. 0 not checked.
[2020-11-25 02:33:31,388 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:33:31,388 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [8] imperfect sequences [] total 8
[2020-11-25 02:33:31,388 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:33:31,389 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 02:33:31,389 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 02:33:31,389 INFO  L87              Difference]: Start difference. First operand 9836 states and 11574 transitions. cyclomatic complexity: 1746 Second operand 8 states.
[2020-11-25 02:33:33,230 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:33:33,230 INFO  L93              Difference]: Finished difference Result 10044 states and 11821 transitions.
[2020-11-25 02:33:33,230 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 02:33:33,230 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 10044 states and 11821 transitions.
[2020-11-25 02:33:33,250 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 24
[2020-11-25 02:33:33,270 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 10044 states to 10044 states and 11821 transitions.
[2020-11-25 02:33:33,270 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2365
[2020-11-25 02:33:33,271 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2365
[2020-11-25 02:33:33,271 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 10044 states and 11821 transitions.
[2020-11-25 02:33:33,277 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:33:33,277 INFO  L728         BuchiCegarLoop]: Abstraction has 10044 states and 11821 transitions.
[2020-11-25 02:33:33,281 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 10044 states and 11821 transitions.
[2020-11-25 02:33:33,325 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 10044 to 7839.
[2020-11-25 02:33:33,325 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7839 states.
[2020-11-25 02:33:33,335 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7839 states to 7839 states and 9098 transitions.
[2020-11-25 02:33:33,335 INFO  L751         BuchiCegarLoop]: Abstraction has 7839 states and 9098 transitions.
[2020-11-25 02:33:33,335 INFO  L631         BuchiCegarLoop]: Abstraction has 7839 states and 9098 transitions.
[2020-11-25 02:33:33,335 INFO  L445         BuchiCegarLoop]: ======== Iteration 18============
[2020-11-25 02:33:33,335 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7839 states and 9098 transitions.
[2020-11-25 02:33:33,343 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 16
[2020-11-25 02:33:33,343 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:33:33,343 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:33:33,345 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:33:33,345 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_ERC20Pausable0 := false;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L9914]              assume null == 0;
[L9915]  CALL        call this := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L9915]  RET         call this := FreshRefGenerator__success();
[L9916]              assume now >= 0;
[L9917]              assume DType[this] == OMToken;
[L9918]              assume msgvalue_MSG == 0;
[L9919]              gas := gas - 53000;
[L9920]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2715]              havoc __exception;
[L2716]              revert := false;
[L2717]  COND FALSE  !(__exception)
[L2744]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6181]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L6181]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6182]  COND FALSE  !(revert)
[L6185]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L6185]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6186]  COND FALSE  !(revert)
[L6189]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L6189]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]  COND FALSE  !(revert)
[L6193]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5187]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]  COND FALSE  !(revert)
[L5191]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5166]              assume msgsender_MSG != null;
[L5167]              Balance[this] := 0;
[L5168]              _paused_Pausable[this] := false;
[L5170]              _paused_Pausable[this] := false;
[L5191]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5192]  COND FALSE  !(revert)
[L6193]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6194]  COND FALSE  !(revert)
[L6197]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5305]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5305]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5306]  COND FALSE  !(revert)
[L5309]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L5309]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5310]  COND FALSE  !(revert)
[L5313]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5313]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5314]  COND FALSE  !(revert)
[L5317]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5187]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]  COND FALSE  !(revert)
[L5191]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5166]              assume msgsender_MSG != null;
[L5167]              Balance[this] := 0;
[L5168]              _paused_Pausable[this] := false;
[L5170]              _paused_Pausable[this] := false;
[L5191]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5192]  COND FALSE  !(revert)
[L5317]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5318]  COND FALSE  !(revert)
[L5321]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5274]              assume msgsender_MSG != null;
[L5275]              Balance[this] := 0;
[L5321]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5322]  COND FALSE  !(revert)
[L6197]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6198]  COND FALSE  !(revert)
[L6201]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L5619]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5619]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5620]  COND FALSE  !(revert)
[L5623]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5594]              assume msgsender_MSG != null;
[L5595]              Balance[this] := 0;
[L5596]              _name_ERC20Detailed[this] := -1676908070;
[L5597]              _symbol_ERC20Detailed[this] := -1676908070;
[L5598]              _decimals_ERC20Detailed[this] := 0;
[L5600]              _name_ERC20Detailed[this] := name_s1022;
[L5601]              _symbol_ERC20Detailed[this] := symbol_s1022;
[L5602]              _decimals_ERC20Detailed[this] := decimals_s1022;
[L5623]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5624]  COND FALSE  !(revert)
[L6201]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6202]  COND FALSE  !(revert)
[L6205]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5702]              assume msgsender_MSG != null;
[L5703]              Balance[this] := 0;
[L5705]  CALL        call __var_35 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L5705]  RET         call __var_35 := FreshRefGenerator__success();
[L5706]  COND FALSE  !(revert)
[L5709]              _minters_MinterRole[this] := __var_35;
[L5711]  COND TRUE   DType[this] == OMToken
[L5712]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5877]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5877]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5878]  COND FALSE  !(revert)
[L5881]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5712]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5713]  COND FALSE  !(revert)
[L5743]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5744]  COND FALSE  !(revert)
[L6205]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6206]  COND FALSE  !(revert)
[L6209]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5939]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5939]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5940]  COND FALSE  !(revert)
[L5943]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L5943]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5944]  COND FALSE  !(revert)
[L5947]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5702]              assume msgsender_MSG != null;
[L5703]              Balance[this] := 0;
[L5705]  CALL        call __var_35 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L5705]  RET         call __var_35 := FreshRefGenerator__success();
[L5706]  COND FALSE  !(revert)
[L5709]              _minters_MinterRole[this] := __var_35;
[L5711]  COND TRUE   DType[this] == OMToken
[L5712]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5877]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5877]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5878]  COND FALSE  !(revert)
[L5881]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5712]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5713]  COND FALSE  !(revert)
[L5743]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5744]  COND FALSE  !(revert)
[L5947]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5948]  COND FALSE  !(revert)
[L5951]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5912]              assume msgsender_MSG != null;
[L5913]              Balance[this] := 0;
[L5951]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]  COND FALSE  !(revert)
[L6209]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6210]  COND FALSE  !(revert)
[L6213]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6037]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L6037]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6038]  COND FALSE  !(revert)
[L6041]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L6041]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6042]  COND FALSE  !(revert)
[L6045]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6014]              assume msgsender_MSG != null;
[L6015]              Balance[this] := 0;
[L6045]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6046]  COND FALSE  !(revert)
[L6213]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6214]  COND FALSE  !(revert)
[L6217]  CALL        call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6130]              assume msgsender_MSG != null;
[L6131]              Balance[this] := 0;
[L6217]  RET         call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6218]  COND FALSE  !(revert)
[L2744]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2745]              assume !revert && gas >= 0;
[L9920]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9921]              assume !revert && gas >= 0;
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND FALSE  !(choice == 23)
[L9764]  COND FALSE  !(choice == 22)
[L9771]  COND TRUE   choice == 21
[L9772]              gas := gas - 21000;
[L9773]  COND TRUE   gas >= 0
[L9774]              assume value_s937 >= 0 && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9775]              assume msgvalue_MSG == 0;
[L9776]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s937 && p1 != to_s937) && (p2 != from_s937 || p3 != msgsender_MSG)) && from_s937 != to_s937) && value_s937 <= _balances_ERC20[this][from_s937]) && value_s937 <= _allowed_ERC20[this][from_s937][msgsender_MSG]) && _balances_ERC20[this][to_s937] + value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s937 >= 0) && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s937] >= 0) && _balances_ERC20[this][to_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s937] >= 0) && _balances_ERC20[this][from_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s937][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s937][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC20Pausable0 := true;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1578]              havoc __exception;
[L1579]              revert := false;
[L1580]  COND TRUE   __exception
[L1581]              __tmp__Balance := Balance;
[L1582]              __tmp__DType := DType;
[L1583]              __tmp__Alloc := Alloc;
[L1584]              __tmp__balance_ADDR := balance_ADDR;
[L1585]              __tmp__M_Ref_int := M_Ref_int;
[L1586]              __tmp__sum__balances0 := sum__balances0;
[L1587]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1588]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1589]              __tmp__sum__allowed1 := sum__allowed1;
[L1590]              __tmp__M_Ref_bool := M_Ref_bool;
[L1591]              __tmp__sum := sum;
[L1592]              __tmp__Length := Length;
[L1593]              __tmp__now := now;
[L1594]              __tmp___balances_ERC20 := _balances_ERC20;
[L1595]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L1596]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1597]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1598]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1599]              __tmp___paused_Pausable := _paused_Pausable;
[L1600]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1601]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1602]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1603]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1604]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5381]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8313]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L5381]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5382]  COND FALSE  !(revert)
[L5385]  COND TRUE   __tmp__DType[this] == OMToken
[L5386]  CALL        call __var_27 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L4355]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___allowed_ERC20[this][from_s351][msgsender_MSG], value_s351);
[L4102]  COND FALSE  !(!(b_s149 <= a_s149))
[L4106]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4107]              __ret_0_ := c_s149;
[L4355]  RET         call __var_2 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___allowed_ERC20[this][from_s351][msgsender_MSG], value_s351);
[L4356]  COND FALSE  !(revert)
[L4359]              __tmp__sum__allowed1[from_s351] := __tmp__sum__allowed1[from_s351] - __tmp___allowed_ERC20[this][from_s351][msgsender_MSG];
[L4360]              __tmp___allowed_ERC20[this][from_s351][msgsender_MSG] := __var_2;
[L4361]              __tmp__sum__allowed1[from_s351] := __tmp__sum__allowed1[from_s351] + __tmp___allowed_ERC20[this][from_s351][msgsender_MSG];
[L4362]  COND TRUE   __tmp__DType[this] == OMToken
[L4363]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s351, to_s351, value_s351);
[L4524]              __var_7 := null;
[L4525]  COND TRUE   !(to_s495 != null)
[L4526]              revert := true;
[L4363]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s351, to_s351, value_s351);
[L4364]  COND TRUE   revert
[L5386]  RET         call __var_27 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5387]  COND TRUE   revert
[L1604]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L1605]              assume revert || gas < 0;
[L9776]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L9924]  RET         call CorralChoice_OMToken(this);

Loop:
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND TRUE   choice == 23
[L9758]              gas := gas - 21000;
[L9759]  COND FALSE  !(gas >= 0)
[L9924]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:33:33,349 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:33:33,349 INFO  L82        PathProgramCache]: Analyzing trace with hash -210512629, now seen corresponding path program 1 times
[2020-11-25 02:33:33,350 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:33:33,372 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:33:33,397 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:33:33,557 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:33:33,557 INFO  L82        PathProgramCache]: Analyzing trace with hash 1215146801, now seen corresponding path program 1 times
[2020-11-25 02:33:33,557 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:33:33,559 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:33:33,566 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 02:33:33,566 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:33:33,566 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 02:33:33,566 INFO  L1008  eck$LassoCheckResult]: loop already infeasible
[2020-11-25 02:33:33,566 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 02:33:33,566 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-11-25 02:33:33,566 INFO  L87              Difference]: Start difference. First operand 7839 states and 9098 transitions. cyclomatic complexity: 1267 Second operand 4 states.
[2020-11-25 02:33:34,344 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:33:34,344 INFO  L93              Difference]: Finished difference Result 8251 states and 9474 transitions.
[2020-11-25 02:33:34,345 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 02:33:34,346 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8251 states and 9474 transitions.
[2020-11-25 02:33:34,390 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 32
[2020-11-25 02:33:34,418 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8251 states to 8251 states and 9474 transitions.
[2020-11-25 02:33:34,418 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1913
[2020-11-25 02:33:34,419 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1913
[2020-11-25 02:33:34,419 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8251 states and 9474 transitions.
[2020-11-25 02:33:34,426 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:33:34,426 INFO  L728         BuchiCegarLoop]: Abstraction has 8251 states and 9474 transitions.
[2020-11-25 02:33:34,433 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8251 states and 9474 transitions.
[2020-11-25 02:33:34,484 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8251 to 5338.
[2020-11-25 02:33:34,484 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5338 states.
[2020-11-25 02:33:34,492 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5338 states to 5338 states and 5992 transitions.
[2020-11-25 02:33:34,492 INFO  L751         BuchiCegarLoop]: Abstraction has 5338 states and 5992 transitions.
[2020-11-25 02:33:34,492 INFO  L631         BuchiCegarLoop]: Abstraction has 5338 states and 5992 transitions.
[2020-11-25 02:33:34,492 INFO  L445         BuchiCegarLoop]: ======== Iteration 19============
[2020-11-25 02:33:34,492 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5338 states and 5992 transitions.
[2020-11-25 02:33:34,502 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 02:33:34,502 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:33:34,502 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:33:34,504 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:33:34,504 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_ERC20Pausable0 := false;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L9914]              assume null == 0;
[L9915]  CALL        call this := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L9915]  RET         call this := FreshRefGenerator__success();
[L9916]              assume now >= 0;
[L9917]              assume DType[this] == OMToken;
[L9918]              assume msgvalue_MSG == 0;
[L9919]              gas := gas - 53000;
[L9920]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2715]              havoc __exception;
[L2716]              revert := false;
[L2717]  COND FALSE  !(__exception)
[L2744]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6181]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L6181]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6182]  COND FALSE  !(revert)
[L6185]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L6185]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6186]  COND FALSE  !(revert)
[L6189]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L6189]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]  COND FALSE  !(revert)
[L6193]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5187]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]  COND FALSE  !(revert)
[L5191]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5166]              assume msgsender_MSG != null;
[L5167]              Balance[this] := 0;
[L5168]              _paused_Pausable[this] := false;
[L5170]              _paused_Pausable[this] := false;
[L5191]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5192]  COND FALSE  !(revert)
[L6193]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6194]  COND FALSE  !(revert)
[L6197]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5305]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5305]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5306]  COND FALSE  !(revert)
[L5309]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L5309]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5310]  COND FALSE  !(revert)
[L5313]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5313]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5314]  COND FALSE  !(revert)
[L5317]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5187]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]  COND FALSE  !(revert)
[L5191]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5166]              assume msgsender_MSG != null;
[L5167]              Balance[this] := 0;
[L5168]              _paused_Pausable[this] := false;
[L5170]              _paused_Pausable[this] := false;
[L5191]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5192]  COND FALSE  !(revert)
[L5317]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5318]  COND FALSE  !(revert)
[L5321]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5274]              assume msgsender_MSG != null;
[L5275]              Balance[this] := 0;
[L5321]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5322]  COND FALSE  !(revert)
[L6197]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6198]  COND FALSE  !(revert)
[L6201]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L5619]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5619]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5620]  COND FALSE  !(revert)
[L5623]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5594]              assume msgsender_MSG != null;
[L5595]              Balance[this] := 0;
[L5596]              _name_ERC20Detailed[this] := -1676908070;
[L5597]              _symbol_ERC20Detailed[this] := -1676908070;
[L5598]              _decimals_ERC20Detailed[this] := 0;
[L5600]              _name_ERC20Detailed[this] := name_s1022;
[L5601]              _symbol_ERC20Detailed[this] := symbol_s1022;
[L5602]              _decimals_ERC20Detailed[this] := decimals_s1022;
[L5623]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5624]  COND FALSE  !(revert)
[L6201]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6202]  COND FALSE  !(revert)
[L6205]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5702]              assume msgsender_MSG != null;
[L5703]              Balance[this] := 0;
[L5705]  CALL        call __var_35 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L5705]  RET         call __var_35 := FreshRefGenerator__success();
[L5706]  COND FALSE  !(revert)
[L5709]              _minters_MinterRole[this] := __var_35;
[L5711]  COND TRUE   DType[this] == OMToken
[L5712]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5877]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5877]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5878]  COND FALSE  !(revert)
[L5881]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5712]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5713]  COND FALSE  !(revert)
[L5743]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5744]  COND FALSE  !(revert)
[L6205]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6206]  COND FALSE  !(revert)
[L6209]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5939]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5939]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5940]  COND FALSE  !(revert)
[L5943]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L5943]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5944]  COND FALSE  !(revert)
[L5947]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5702]              assume msgsender_MSG != null;
[L5703]              Balance[this] := 0;
[L5705]  CALL        call __var_35 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L5705]  RET         call __var_35 := FreshRefGenerator__success();
[L5706]  COND FALSE  !(revert)
[L5709]              _minters_MinterRole[this] := __var_35;
[L5711]  COND TRUE   DType[this] == OMToken
[L5712]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5877]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5877]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5878]  COND FALSE  !(revert)
[L5881]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5712]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5713]  COND FALSE  !(revert)
[L5743]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5744]  COND FALSE  !(revert)
[L5947]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5948]  COND FALSE  !(revert)
[L5951]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5912]              assume msgsender_MSG != null;
[L5913]              Balance[this] := 0;
[L5951]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]  COND FALSE  !(revert)
[L6209]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6210]  COND FALSE  !(revert)
[L6213]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6037]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L6037]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6038]  COND FALSE  !(revert)
[L6041]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L6041]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6042]  COND FALSE  !(revert)
[L6045]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6014]              assume msgsender_MSG != null;
[L6015]              Balance[this] := 0;
[L6045]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6046]  COND FALSE  !(revert)
[L6213]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6214]  COND FALSE  !(revert)
[L6217]  CALL        call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6130]              assume msgsender_MSG != null;
[L6131]              Balance[this] := 0;
[L6217]  RET         call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6218]  COND FALSE  !(revert)
[L2744]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2745]              assume !revert && gas >= 0;
[L9920]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9921]              assume !revert && gas >= 0;
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND FALSE  !(choice == 23)
[L9764]  COND FALSE  !(choice == 22)
[L9771]  COND TRUE   choice == 21
[L9772]              gas := gas - 21000;
[L9773]  COND TRUE   gas >= 0
[L9774]              assume value_s937 >= 0 && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9775]              assume msgvalue_MSG == 0;
[L9776]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s937 && p1 != to_s937) && (p2 != from_s937 || p3 != msgsender_MSG)) && from_s937 != to_s937) && value_s937 <= _balances_ERC20[this][from_s937]) && value_s937 <= _allowed_ERC20[this][from_s937][msgsender_MSG]) && _balances_ERC20[this][to_s937] + value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s937 >= 0) && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s937] >= 0) && _balances_ERC20[this][to_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s937] >= 0) && _balances_ERC20[this][from_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s937][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s937][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC20Pausable0 := true;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1578]              havoc __exception;
[L1579]              revert := false;
[L1580]  COND TRUE   __exception
[L1581]              __tmp__Balance := Balance;
[L1582]              __tmp__DType := DType;
[L1583]              __tmp__Alloc := Alloc;
[L1584]              __tmp__balance_ADDR := balance_ADDR;
[L1585]              __tmp__M_Ref_int := M_Ref_int;
[L1586]              __tmp__sum__balances0 := sum__balances0;
[L1587]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1588]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1589]              __tmp__sum__allowed1 := sum__allowed1;
[L1590]              __tmp__M_Ref_bool := M_Ref_bool;
[L1591]              __tmp__sum := sum;
[L1592]              __tmp__Length := Length;
[L1593]              __tmp__now := now;
[L1594]              __tmp___balances_ERC20 := _balances_ERC20;
[L1595]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L1596]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1597]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1598]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1599]              __tmp___paused_Pausable := _paused_Pausable;
[L1600]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1601]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1602]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1603]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1604]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5381]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8313]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L5381]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5382]  COND FALSE  !(revert)
[L5385]  COND TRUE   __tmp__DType[this] == OMToken
[L5386]  CALL        call __var_27 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L4355]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___allowed_ERC20[this][from_s351][msgsender_MSG], value_s351);
[L4102]  COND FALSE  !(!(b_s149 <= a_s149))
[L4106]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4107]              __ret_0_ := c_s149;
[L4355]  RET         call __var_2 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___allowed_ERC20[this][from_s351][msgsender_MSG], value_s351);
[L4356]  COND FALSE  !(revert)
[L4359]              __tmp__sum__allowed1[from_s351] := __tmp__sum__allowed1[from_s351] - __tmp___allowed_ERC20[this][from_s351][msgsender_MSG];
[L4360]              __tmp___allowed_ERC20[this][from_s351][msgsender_MSG] := __var_2;
[L4361]              __tmp__sum__allowed1[from_s351] := __tmp__sum__allowed1[from_s351] + __tmp___allowed_ERC20[this][from_s351][msgsender_MSG];
[L4362]  COND TRUE   __tmp__DType[this] == OMToken
[L4363]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s351, to_s351, value_s351);
[L4524]              __var_7 := null;
[L4525]  COND TRUE   !(to_s495 != null)
[L4526]              revert := true;
[L4363]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s351, to_s351, value_s351);
[L4364]  COND TRUE   revert
[L5386]  RET         call __var_27 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5387]  COND TRUE   revert
[L1604]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L1605]              assume revert || gas < 0;
[L9776]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L9924]  RET         call CorralChoice_OMToken(this);

Loop:
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND FALSE  !(choice == 23)
[L9764]  COND FALSE  !(choice == 22)
[L9771]  COND TRUE   choice == 21
[L9772]              gas := gas - 21000;
[L9773]  COND TRUE   gas >= 0
[L9774]              assume value_s937 >= 0 && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9775]              assume msgvalue_MSG == 0;
[L9776]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s937 && p1 != to_s937) && (p2 != from_s937 || p3 != msgsender_MSG)) && from_s937 != to_s937) && value_s937 <= _balances_ERC20[this][from_s937]) && value_s937 <= _allowed_ERC20[this][from_s937][msgsender_MSG]) && _balances_ERC20[this][to_s937] + value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s937 >= 0) && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s937] >= 0) && _balances_ERC20[this][to_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s937] >= 0) && _balances_ERC20[this][from_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s937][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s937][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC20Pausable0 := true;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1578]              havoc __exception;
[L1579]              revert := false;
[L1580]  COND TRUE   __exception
[L1581]              __tmp__Balance := Balance;
[L1582]              __tmp__DType := DType;
[L1583]              __tmp__Alloc := Alloc;
[L1584]              __tmp__balance_ADDR := balance_ADDR;
[L1585]              __tmp__M_Ref_int := M_Ref_int;
[L1586]              __tmp__sum__balances0 := sum__balances0;
[L1587]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1588]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1589]              __tmp__sum__allowed1 := sum__allowed1;
[L1590]              __tmp__M_Ref_bool := M_Ref_bool;
[L1591]              __tmp__sum := sum;
[L1592]              __tmp__Length := Length;
[L1593]              __tmp__now := now;
[L1594]              __tmp___balances_ERC20 := _balances_ERC20;
[L1595]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L1596]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1597]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1598]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1599]              __tmp___paused_Pausable := _paused_Pausable;
[L1600]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1601]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1602]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1603]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1604]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5381]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8313]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L5381]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5382]  COND FALSE  !(revert)
[L5385]  COND TRUE   __tmp__DType[this] == OMToken
[L5386]  CALL        call __var_27 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L4355]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___allowed_ERC20[this][from_s351][msgsender_MSG], value_s351);
[L4102]  COND FALSE  !(!(b_s149 <= a_s149))
[L4106]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4107]              __ret_0_ := c_s149;
[L4355]  RET         call __var_2 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___allowed_ERC20[this][from_s351][msgsender_MSG], value_s351);
[L4356]  COND FALSE  !(revert)
[L4359]              __tmp__sum__allowed1[from_s351] := __tmp__sum__allowed1[from_s351] - __tmp___allowed_ERC20[this][from_s351][msgsender_MSG];
[L4360]              __tmp___allowed_ERC20[this][from_s351][msgsender_MSG] := __var_2;
[L4361]              __tmp__sum__allowed1[from_s351] := __tmp__sum__allowed1[from_s351] + __tmp___allowed_ERC20[this][from_s351][msgsender_MSG];
[L4362]  COND TRUE   __tmp__DType[this] == OMToken
[L4363]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s351, to_s351, value_s351);
[L4524]              __var_7 := null;
[L4525]  COND TRUE   !(to_s495 != null)
[L4526]              revert := true;
[L4363]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s351, to_s351, value_s351);
[L4364]  COND TRUE   revert
[L5386]  RET         call __var_27 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5387]  COND TRUE   revert
[L1604]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L1605]              assume revert || gas < 0;
[L9776]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L9924]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:33:34,510 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:33:34,511 INFO  L82        PathProgramCache]: Analyzing trace with hash -210512629, now seen corresponding path program 2 times
[2020-11-25 02:33:34,512 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:33:34,547 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:33:34,575 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:33:34,659 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:33:34,659 INFO  L82        PathProgramCache]: Analyzing trace with hash -2132179374, now seen corresponding path program 1 times
[2020-11-25 02:33:34,660 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:33:34,664 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:33:34,670 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:33:34,681 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:33:34,681 INFO  L82        PathProgramCache]: Analyzing trace with hash 944754140, now seen corresponding path program 1 times
[2020-11-25 02:33:34,682 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:33:34,706 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:33:34,735 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 443 to 883
[2020-11-25 02:33:35,136 WARN  L188               SmtUtils]: Spent 106.00 ms on a formula simplification. DAG size of input: 97 DAG size of output: 94
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 547 to 1093
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
[2020-11-25 02:33:35,511 WARN  L188               SmtUtils]: Spent 246.00 ms on a formula simplification. DAG size of input: 200 DAG size of output: 191
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 2017 to 4027
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #6: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #7: 3137 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 3137 to 6271
Garbage collection #8: 6271 nodes / 0 free / 0.002s / 0.003s total
Resizing node table from 6271 to 12541
[2020-11-25 02:33:35,792 WARN  L188               SmtUtils]: Spent 251.00 ms on a formula simplification. DAG size of input: 146 DAG size of output: 140
[2020-11-25 02:33:36,179 WARN  L188               SmtUtils]: Spent 384.00 ms on a formula simplification that was a NOOP. DAG size: 310
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 3967 to 7933
[2020-11-25 02:33:37,241 WARN  L188               SmtUtils]: Spent 1.05 s on a formula simplification. DAG size of input: 258 DAG size of output: 258
[2020-11-25 02:33:38,865 WARN  L188               SmtUtils]: Spent 1.62 s on a formula simplification. DAG size of input: 328 DAG size of output: 318
Garbage collection #1: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #2: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #3: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #4: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #5: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #6: 3517 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3517 to 7027
Garbage collection #7: 7027 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 7027 to 14051
Garbage collection #8: 14051 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 14051 to 28099
Garbage collection #1: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
Garbage collection #7: 4357 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4357 to 8713
Garbage collection #8: 8713 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8713 to 17419
[2020-11-25 02:33:39,424 WARN  L188               SmtUtils]: Spent 511.00 ms on a formula simplification. DAG size of input: 211 DAG size of output: 205
[2020-11-25 02:33:39,923 WARN  L188               SmtUtils]: Spent 496.00 ms on a formula simplification that was a NOOP. DAG size: 382
Garbage collection #1: 149 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 149 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4591 to 9181
[2020-11-25 02:33:40,910 WARN  L188               SmtUtils]: Spent 976.00 ms on a formula simplification. DAG size of input: 313 DAG size of output: 313
[2020-11-25 02:33:41,393 WARN  L188               SmtUtils]: Spent 481.00 ms on a formula simplification that was a NOOP. DAG size: 313
Garbage collection #1: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #2: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #3: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #4: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #5: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #6: 3517 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3517 to 7027
Garbage collection #7: 7027 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7027 to 14051
Garbage collection #8: 14051 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 14051 to 28099
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
Garbage collection #7: 5281 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5281 to 10559
[2020-11-25 02:33:44,830 WARN  L188               SmtUtils]: Spent 3.42 s on a formula simplification. DAG size of input: 286 DAG size of output: 247
[2020-11-25 02:33:44,843 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #5: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #5: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 163 to 317
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #5: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
[2020-11-25 02:33:46,877 WARN  L188               SmtUtils]: Spent 967.00 ms on a formula simplification. DAG size of input: 476 DAG size of output: 445
Garbage collection #1: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #2: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #3: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #4: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #5: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
Garbage collection #6: 5281 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5281 to 10559
Garbage collection #7: 10559 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 10559 to 21107
Garbage collection #1: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #2: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #3: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #4: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #5: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #6: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #1: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #6: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
[2020-11-25 02:33:47,225 WARN  L188               SmtUtils]: Spent 105.00 ms on a formula simplification that was a NOOP. DAG size: 342
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #1: 107 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 107 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
[2020-11-25 02:33:47,716 WARN  L188               SmtUtils]: Spent 177.00 ms on a formula simplification. DAG size of input: 200 DAG size of output: 191
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #6: 1571 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 1571 to 3137
Garbage collection #7: 3137 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 3137 to 6271
Garbage collection #8: 6271 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 6271 to 12541
[2020-11-25 02:33:47,939 WARN  L188               SmtUtils]: Spent 211.00 ms on a formula simplification. DAG size of input: 146 DAG size of output: 140
[2020-11-25 02:33:48,148 WARN  L188               SmtUtils]: Spent 208.00 ms on a formula simplification that was a NOOP. DAG size: 310
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
[2020-11-25 02:33:49,292 WARN  L188               SmtUtils]: Spent 1.14 s on a formula simplification. DAG size of input: 258 DAG size of output: 258
[2020-11-25 02:33:51,008 WARN  L188               SmtUtils]: Spent 1.71 s on a formula simplification. DAG size of input: 327 DAG size of output: 318
Garbage collection #1: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #2: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #3: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #4: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #5: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #6: 3517 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3517 to 7027
Garbage collection #7: 7027 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7027 to 14051
Garbage collection #8: 14051 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 14051 to 28099
Garbage collection #1: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
Garbage collection #7: 4357 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4357 to 8713
Garbage collection #8: 8713 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8713 to 17419
[2020-11-25 02:33:51,597 WARN  L188               SmtUtils]: Spent 561.00 ms on a formula simplification. DAG size of input: 211 DAG size of output: 205
[2020-11-25 02:33:52,026 WARN  L188               SmtUtils]: Spent 427.00 ms on a formula simplification that was a NOOP. DAG size: 382
Garbage collection #1: 149 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 149 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4591 to 9181
Garbage collection #7: 9181 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9181 to 18353
[2020-11-25 02:33:52,939 WARN  L188               SmtUtils]: Spent 904.00 ms on a formula simplification. DAG size of input: 313 DAG size of output: 313
[2020-11-25 02:33:54,780 WARN  L188               SmtUtils]: Spent 1.84 s on a formula simplification. DAG size of input: 599 DAG size of output: 581
Garbage collection #1: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #2: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #3: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #4: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #5: 3517 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3517 to 7027
Garbage collection #6: 7027 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7027 to 14051
Garbage collection #7: 14051 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 14051 to 28099
Garbage collection #1: 101 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 101 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
Garbage collection #7: 6271 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 6271 to 12541
[2020-11-25 02:33:56,144 WARN  L188               SmtUtils]: Spent 1.34 s on a formula simplification. DAG size of input: 334 DAG size of output: 319
[2020-11-25 02:33:56,983 WARN  L188               SmtUtils]: Spent 816.00 ms on a formula simplification that was a NOOP. DAG size: 441
Garbage collection #1: 149 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 149 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4591 to 9181
Garbage collection #7: 9181 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9181 to 18353
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 3967 to 7933
Garbage collection #7: 7933 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 7933 to 15859
Garbage collection #8: 15859 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 15859 to 31699
[2020-11-25 02:34:04,067 WARN  L188               SmtUtils]: Spent 7.03 s on a formula simplification. DAG size of input: 471 DAG size of output: 362
[2020-11-25 02:34:07,597 WARN  L188               SmtUtils]: Spent 3.53 s on a formula simplification. DAG size of input: 486 DAG size of output: 485
Garbage collection #1: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #2: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #3: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #4: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #5: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
Garbage collection #6: 5003 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5003 to 9973
Garbage collection #7: 9973 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9973 to 19937
Garbage collection #8: 19937 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 19937 to 39869
Garbage collection #1: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #2: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #3: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #4: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #5: 2647 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 2647 to 5281
Garbage collection #6: 5281 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 5281 to 10559
Garbage collection #7: 10559 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 10559 to 21107
Garbage collection #8: 21107 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 21107 to 42209
Garbage collection #9: 42209 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 42209 to 84407
Garbage collection #10: 84407 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 84407 to 134401
Garbage collection #11: 134401 nodes / 0 free / 0.002s / 0.004s total
Resizing node table from 134401 to 184369
Garbage collection #12: 184369 nodes / 0 free / 0.004s / 0.008s total
Resizing node table from 184369 to 234361
Garbage collection #13: 234361 nodes / 0 free / 0.004s / 0.012s total
Resizing node table from 234361 to 284357
Garbage collection #14: 284357 nodes / 0 free / 0.004s / 0.016s total
Resizing node table from 284357 to 334349
Garbage collection #15: 334349 nodes / 0 free / 0.006s / 0.022s total
Resizing node table from 334349 to 384343
Garbage collection #16: 384343 nodes / 0 free / 0.007s / 0.029s total
Resizing node table from 384343 to 434323
Garbage collection #17: 434323 nodes / 0 free / 0.008s / 0.037s total
Resizing node table from 434323 to 484303
Garbage collection #18: 484303 nodes / 0 free / 0.009s / 0.046s total
Resizing node table from 484303 to 534301
Garbage collection #19: 534301 nodes / 0 free / 0.01s / 0.056s total
Resizing node table from 534301 to 584281
Garbage collection #20: 584281 nodes / 0 free / 0.011s / 0.067s total
Resizing node table from 584281 to 634279
Garbage collection #21: 634279 nodes / 0 free / 0.012s / 0.079s total
Resizing node table from 634279 to 684269
Garbage collection #22: 684269 nodes / 0 free / 0.014s / 0.093s total
Resizing node table from 684269 to 734267
Garbage collection #23: 734267 nodes / 0 free / 0.015s / 0.108s total
Resizing node table from 734267 to 784249
Garbage collection #24: 784249 nodes / 0 free / 0.015s / 0.123s total
Resizing node table from 784249 to 834221
[2020-11-25 02:34:17,724 WARN  L188               SmtUtils]: Spent 9.59 s on a formula simplification. DAG size of input: 702 DAG size of output: 464
[2020-11-25 02:34:17,759 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:34:17,790 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:34:17,802 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 02:34:17 BasicIcfg
[2020-11-25 02:34:17,802 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 02:34:17,803 INFO  L168              Benchmark]: Toolchain (without parser) took 66388.35 ms. Allocated memory was 1.0 GB in the beginning and 4.4 GB in the end (delta: 3.3 GB). Free memory was 929.8 MB in the beginning and 2.1 GB in the end (delta: -1.1 GB). Peak memory consumption was 3.4 GB. Max. memory is 15.3 GB.
[2020-11-25 02:34:17,803 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.20 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 02:34:17,803 INFO  L168              Benchmark]: Boogie Preprocessor took 148.15 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 908.4 MB in the end (delta: 21.5 MB). Peak memory consumption was 21.5 MB. Max. memory is 15.3 GB.
[2020-11-25 02:34:17,804 INFO  L168              Benchmark]: UtopiaSpecLang took 103.25 ms. Allocated memory is still 1.0 GB. Free memory was 908.4 MB in the beginning and 897.6 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 02:34:17,804 INFO  L168              Benchmark]: Boogie Printer took 27.15 ms. Allocated memory is still 1.0 GB. Free memory was 897.6 MB in the beginning and 892.2 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 02:34:17,804 INFO  L168              Benchmark]: RCFGBuilder took 1399.17 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 69.7 MB). Free memory was 892.2 MB in the beginning and 841.3 MB in the end (delta: 51.0 MB). Peak memory consumption was 181.6 MB. Max. memory is 15.3 GB.
[2020-11-25 02:34:17,804 INFO  L168              Benchmark]: UtopiaLTL2Aut took 34.62 ms. Allocated memory is still 1.1 GB. Free memory was 841.3 MB in the beginning and 837.3 MB in the end (delta: 4.0 MB). Peak memory consumption was 4.0 MB. Max. memory is 15.3 GB.
[2020-11-25 02:34:17,805 INFO  L168              Benchmark]: BÃ¼chi Program Product took 3033.35 ms. Allocated memory was 1.1 GB in the beginning and 1.5 GB in the end (delta: 433.6 MB). Free memory was 837.3 MB in the beginning and 1.3 GB in the end (delta: -441.5 MB). Peak memory consumption was 411.1 MB. Max. memory is 15.3 GB.
[2020-11-25 02:34:17,805 INFO  L168              Benchmark]: BlockEncodingV2 took 245.93 ms. Allocated memory is still 1.5 GB. Free memory was 1.3 GB in the beginning and 1.1 GB in the end (delta: 140.2 MB). Peak memory consumption was 140.2 MB. Max. memory is 15.3 GB.
[2020-11-25 02:34:17,805 INFO  L168              Benchmark]: BuchiAutomizer took 61393.63 ms. Allocated memory was 1.5 GB in the beginning and 4.4 GB in the end (delta: 2.8 GB). Free memory was 1.1 GB in the beginning and 2.1 GB in the end (delta: -917.0 MB). Peak memory consumption was 3.1 GB. Max. memory is 15.3 GB.
[2020-11-25 02:34:17,808 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    9268 locations, 17164 edges
  - StatisticsResult: Encoded RCFG
    9112 locations, 16737 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.20 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 148.15 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 908.4 MB in the end (delta: 21.5 MB). Peak memory consumption was 21.5 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 103.25 ms. Allocated memory is still 1.0 GB. Free memory was 908.4 MB in the beginning and 897.6 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 27.15 ms. Allocated memory is still 1.0 GB. Free memory was 897.6 MB in the beginning and 892.2 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 1399.17 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 69.7 MB). Free memory was 892.2 MB in the beginning and 841.3 MB in the end (delta: 51.0 MB). Peak memory consumption was 181.6 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 34.62 ms. Allocated memory is still 1.1 GB. Free memory was 841.3 MB in the beginning and 837.3 MB in the end (delta: 4.0 MB). Peak memory consumption was 4.0 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 3033.35 ms. Allocated memory was 1.1 GB in the beginning and 1.5 GB in the end (delta: 433.6 MB). Free memory was 837.3 MB in the beginning and 1.3 GB in the end (delta: -441.5 MB). Peak memory consumption was 411.1 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 245.93 ms. Allocated memory is still 1.5 GB. Free memory was 1.3 GB in the beginning and 1.1 GB in the end (delta: 140.2 MB). Peak memory consumption was 140.2 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 61393.63 ms. Allocated memory was 1.5 GB in the beginning and 4.4 GB in the end (delta: 2.8 GB). Free memory was 1.1 GB in the beginning and 2.1 GB in the end (delta: -917.0 MB). Peak memory consumption was 3.1 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    3606 locations, 5219 edges
  - StatisticsResult: BuchiProgram size
    9268 locations, 17164 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 18 terminating modules (18 trivial, 0 deterministic, 0 nondeterministic) and one nonterminating remainder module.18 modules have a trivial ranking function, the largest among these consists of 14 locations. The remainder module has 5338 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 61.3s and 19 iterations.  TraceHistogramMax:9. Analysis of lassos took 46.3s. Construction of modules took 9.3s. BÃ¼chi inclusion checks took 3.5s. Highest rank in rank-based complementation 0. Minimization of det autom 18. Minimization of nondet autom 0. Automata minimization 0.8s AutomataMinimizationTime, 18 MinimizatonAttempts, 8550 StatesRemovedByMinimization, 12 NontrivialMinimizations. Non-live state removal took 0.6s Buchi closure took 0.0s. Biggest automaton had 9836 states and ocurred in iteration 16.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 106364 SDtfs, 43401 SDslu, 427824 SDs, 0 SdLazy, 116590 SolverSat, 6976 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 9.3s Time	LassoAnalysisResults: nont1 unkn0 SFLI1 SFLT0 conc0 concLT0 SILN0 SILU17 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - TransactionCounterexample: Violation of LTL property LTL
    Found an infinite, lasso-shaped execution that violates the LTL property LTL.
Stem:
address(3979036) = (new OMToken)({from : 3979028, name : 3979031, symbol : 3979015, decimals : 3979034});
[L2715]              havoc __exception;
[L2716]              revert := false;
[L2717]  COND FALSE  !(__exception)
[L2744]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6181]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L6181]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6182]  COND FALSE  !(revert)
[L6185]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L6185]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6186]  COND FALSE  !(revert)
[L6189]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L6189]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]  COND FALSE  !(revert)
[L6193]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5187]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]  COND FALSE  !(revert)
[L5191]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5166]              assume msgsender_MSG != null;
[L5167]              Balance[this] := 0;
[L5168]              _paused_Pausable[this] := false;
[L5170]              _paused_Pausable[this] := false;
[L5191]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5192]  COND FALSE  !(revert)
[L6193]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6194]  COND FALSE  !(revert)
[L6197]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5305]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5305]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5306]  COND FALSE  !(revert)
[L5309]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L5309]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5310]  COND FALSE  !(revert)
[L5313]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5313]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5314]  COND FALSE  !(revert)
[L5317]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5187]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]  COND FALSE  !(revert)
[L5191]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5166]              assume msgsender_MSG != null;
[L5167]              Balance[this] := 0;
[L5168]              _paused_Pausable[this] := false;
[L5170]              _paused_Pausable[this] := false;
[L5191]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5192]  COND FALSE  !(revert)
[L5317]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5318]  COND FALSE  !(revert)
[L5321]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5274]              assume msgsender_MSG != null;
[L5275]              Balance[this] := 0;
[L5321]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5322]  COND FALSE  !(revert)
[L6197]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6198]  COND FALSE  !(revert)
[L6201]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L5619]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5619]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5620]  COND FALSE  !(revert)
[L5623]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5594]              assume msgsender_MSG != null;
[L5595]              Balance[this] := 0;
[L5596]              _name_ERC20Detailed[this] := -1676908070;
[L5597]              _symbol_ERC20Detailed[this] := -1676908070;
[L5598]              _decimals_ERC20Detailed[this] := 0;
[L5600]              _name_ERC20Detailed[this] := name_s1022;
[L5601]              _symbol_ERC20Detailed[this] := symbol_s1022;
[L5602]              _decimals_ERC20Detailed[this] := decimals_s1022;
[L5623]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5624]  COND FALSE  !(revert)
[L6201]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6202]  COND FALSE  !(revert)
[L6205]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5702]              assume msgsender_MSG != null;
[L5703]              Balance[this] := 0;
[L5705]  CALL        call __var_35 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L5705]  RET         call __var_35 := FreshRefGenerator__success();
[L5706]  COND FALSE  !(revert)
[L5709]              _minters_MinterRole[this] := __var_35;
[L5711]  COND TRUE   DType[this] == OMToken
[L5712]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5877]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5877]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5878]  COND FALSE  !(revert)
[L5881]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5712]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5713]  COND FALSE  !(revert)
[L5743]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5744]  COND FALSE  !(revert)
[L6205]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6206]  COND FALSE  !(revert)
[L6209]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5939]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5939]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5940]  COND FALSE  !(revert)
[L5943]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L5943]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5944]  COND FALSE  !(revert)
[L5947]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5702]              assume msgsender_MSG != null;
[L5703]              Balance[this] := 0;
[L5705]  CALL        call __var_35 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L5705]  RET         call __var_35 := FreshRefGenerator__success();
[L5706]  COND FALSE  !(revert)
[L5709]              _minters_MinterRole[this] := __var_35;
[L5711]  COND TRUE   DType[this] == OMToken
[L5712]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5877]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5877]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5878]  COND FALSE  !(revert)
[L5881]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5712]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5713]  COND FALSE  !(revert)
[L5743]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5744]  COND FALSE  !(revert)
[L5947]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5948]  COND FALSE  !(revert)
[L5951]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5912]              assume msgsender_MSG != null;
[L5913]              Balance[this] := 0;
[L5951]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]  COND FALSE  !(revert)
[L6209]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6210]  COND FALSE  !(revert)
[L6213]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6037]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L6037]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6038]  COND FALSE  !(revert)
[L6041]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L6041]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6042]  COND FALSE  !(revert)
[L6045]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6014]              assume msgsender_MSG != null;
[L6015]              Balance[this] := 0;
[L6045]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6046]  COND FALSE  !(revert)
[L6213]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6214]  COND FALSE  !(revert)
[L6217]  CALL        call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6130]              assume msgsender_MSG != null;
[L6131]              Balance[this] := 0;
[L6217]  RET         call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6218]  COND FALSE  !(revert)
[L2744]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2745]              assume !revert && gas >= 0;
[L9920]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
ERC20Pausable(3979036).transferFrom~address~address~uint256.gas(3979002)({from : 3979025, from : 3979019, to : 0, value : 0});
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s937 && p1 != to_s937) && (p2 != from_s937 || p3 != msgsender_MSG)) && from_s937 != to_s937) && value_s937 <= _balances_ERC20[this][from_s937]) && value_s937 <= _allowed_ERC20[this][from_s937][msgsender_MSG]) && _balances_ERC20[this][to_s937] + value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s937 >= 0) && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s937] >= 0) && _balances_ERC20[this][to_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s937] >= 0) && _balances_ERC20[this][from_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s937][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s937][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC20Pausable0 := true;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1578]              havoc __exception;
[L1579]              revert := false;
[L1580]  COND TRUE   __exception
[L1581]              __tmp__Balance := Balance;
[L1582]              __tmp__DType := DType;
[L1583]              __tmp__Alloc := Alloc;
[L1584]              __tmp__balance_ADDR := balance_ADDR;
[L1585]              __tmp__M_Ref_int := M_Ref_int;
[L1586]              __tmp__sum__balances0 := sum__balances0;
[L1587]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1588]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1589]              __tmp__sum__allowed1 := sum__allowed1;
[L1590]              __tmp__M_Ref_bool := M_Ref_bool;
[L1591]              __tmp__sum := sum;
[L1592]              __tmp__Length := Length;
[L1593]              __tmp__now := now;
[L1594]              __tmp___balances_ERC20 := _balances_ERC20;
[L1595]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L1596]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1597]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1598]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1599]              __tmp___paused_Pausable := _paused_Pausable;
[L1600]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1601]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1602]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1603]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1604]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5381]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8313]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L5381]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5382]  COND FALSE  !(revert)
[L5385]  COND TRUE   __tmp__DType[this] == OMToken
[L5386]  CALL        call __var_27 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L4355]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___allowed_ERC20[this][from_s351][msgsender_MSG], value_s351);
[L4102]  COND FALSE  !(!(b_s149 <= a_s149))
[L4106]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4107]              __ret_0_ := c_s149;
[L4355]  RET         call __var_2 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___allowed_ERC20[this][from_s351][msgsender_MSG], value_s351);
[L4356]  COND FALSE  !(revert)
[L4359]              __tmp__sum__allowed1[from_s351] := __tmp__sum__allowed1[from_s351] - __tmp___allowed_ERC20[this][from_s351][msgsender_MSG];
[L4360]              __tmp___allowed_ERC20[this][from_s351][msgsender_MSG] := __var_2;
[L4361]              __tmp__sum__allowed1[from_s351] := __tmp__sum__allowed1[from_s351] + __tmp___allowed_ERC20[this][from_s351][msgsender_MSG];
[L4362]  COND TRUE   __tmp__DType[this] == OMToken
[L4363]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s351, to_s351, value_s351);
[L4524]              __var_7 := null;
[L4525]  COND TRUE   !(to_s495 != null)
[L4526]              revert := true;
[L4363]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s351, to_s351, value_s351);
[L4364]  COND TRUE   revert
[L5386]  RET         call __var_27 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5387]  COND TRUE   revert
[L1604]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L1605]              assume revert || gas < 0;
[L9776]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);

Loop:
ERC20Pausable(3979036).transferFrom~address~address~uint256.gas(3979001)({from : 3979003, from : 3979019, to : 0, value : 0});
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s937 && p1 != to_s937) && (p2 != from_s937 || p3 != msgsender_MSG)) && from_s937 != to_s937) && value_s937 <= _balances_ERC20[this][from_s937]) && value_s937 <= _allowed_ERC20[this][from_s937][msgsender_MSG]) && _balances_ERC20[this][to_s937] + value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s937 >= 0) && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s937] >= 0) && _balances_ERC20[this][to_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s937] >= 0) && _balances_ERC20[this][from_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s937][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s937][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC20Pausable0 := true;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1578]              havoc __exception;
[L1579]              revert := false;
[L1580]  COND TRUE   __exception
[L1581]              __tmp__Balance := Balance;
[L1582]              __tmp__DType := DType;
[L1583]              __tmp__Alloc := Alloc;
[L1584]              __tmp__balance_ADDR := balance_ADDR;
[L1585]              __tmp__M_Ref_int := M_Ref_int;
[L1586]              __tmp__sum__balances0 := sum__balances0;
[L1587]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1588]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1589]              __tmp__sum__allowed1 := sum__allowed1;
[L1590]              __tmp__M_Ref_bool := M_Ref_bool;
[L1591]              __tmp__sum := sum;
[L1592]              __tmp__Length := Length;
[L1593]              __tmp__now := now;
[L1594]              __tmp___balances_ERC20 := _balances_ERC20;
[L1595]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L1596]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1597]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1598]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1599]              __tmp___paused_Pausable := _paused_Pausable;
[L1600]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1601]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1602]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1603]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1604]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5381]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8313]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L5381]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5382]  COND FALSE  !(revert)
[L5385]  COND TRUE   __tmp__DType[this] == OMToken
[L5386]  CALL        call __var_27 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L4355]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___allowed_ERC20[this][from_s351][msgsender_MSG], value_s351);
[L4102]  COND FALSE  !(!(b_s149 <= a_s149))
[L4106]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4107]              __ret_0_ := c_s149;
[L4355]  RET         call __var_2 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___allowed_ERC20[this][from_s351][msgsender_MSG], value_s351);
[L4356]  COND FALSE  !(revert)
[L4359]              __tmp__sum__allowed1[from_s351] := __tmp__sum__allowed1[from_s351] - __tmp___allowed_ERC20[this][from_s351][msgsender_MSG];
[L4360]              __tmp___allowed_ERC20[this][from_s351][msgsender_MSG] := __var_2;
[L4361]              __tmp__sum__allowed1[from_s351] := __tmp__sum__allowed1[from_s351] + __tmp___allowed_ERC20[this][from_s351][msgsender_MSG];
[L4362]  COND TRUE   __tmp__DType[this] == OMToken
[L4363]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s351, to_s351, value_s351);
[L4524]              __var_7 := null;
[L4525]  COND TRUE   !(to_s495 != null)
[L4526]              revert := true;
[L4363]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s351, to_s351, value_s351);
[L4364]  COND TRUE   revert
[L5386]  RET         call __var_27 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5387]  COND TRUE   revert
[L1604]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L1605]              assume revert || gas < 0;
[L9776]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);

End of lasso representation.
RESULT: Ultimate could not prove your program: Toolchain returned no result.
Received shutdown request...
