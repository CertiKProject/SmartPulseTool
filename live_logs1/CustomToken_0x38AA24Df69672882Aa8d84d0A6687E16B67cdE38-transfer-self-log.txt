This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 12:57:03,870 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 12:57:03,872 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 12:57:03,882 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 12:57:03,882 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 12:57:03,883 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 12:57:03,883 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 12:57:03,885 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 12:57:03,886 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 12:57:03,887 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 12:57:03,888 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 12:57:03,888 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 12:57:03,888 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 12:57:03,889 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 12:57:03,890 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 12:57:03,890 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 12:57:03,891 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 12:57:03,892 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 12:57:03,893 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 12:57:03,895 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 12:57:03,895 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 12:57:03,896 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 12:57:03,898 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 12:57:03,898 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 12:57:03,898 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 12:57:03,898 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 12:57:03,899 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 12:57:03,899 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 12:57:03,899 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 12:57:03,900 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 12:57:03,900 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 12:57:03,901 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 12:57:03,901 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 12:57:03,901 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 12:57:03,902 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 12:57:03,902 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 12:57:03,903 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 12:57:03,903 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 12:57:03,903 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 12:57:03,904 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 12:57:03,904 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 12:57:03,904 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 12:57:03,912 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 12:57:03,912 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 12:57:03,913 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 12:57:03,913 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 12:57:03,913 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 12:57:03,913 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 12:57:03,913 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 12:57:03,913 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 12:57:03,914 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 12:57:03,914 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 12:57:03,914 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 12:57:03,914 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 12:57:03,914 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 12:57:03,914 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 12:57:03,914 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 12:57:03,914 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 12:57:03,915 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 12:57:03,915 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 12:57:03,915 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 12:57:03,915 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 12:57:03,915 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 12:57:03,915 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 12:57:03,915 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 12:57:03,915 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 12:57:03,916 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 12:57:03,916 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 12:57:03,938 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 12:57:03,949 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 12:57:03,951 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 12:57:03,952 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 12:57:03,953 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 12:57:03,953 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/CustomToken_0x38AA24Df69672882Aa8d84d0A6687E16B67cdE38_transfer-self.bpl
[2020-11-25 12:57:03,953 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/CustomToken_0x38AA24Df69672882Aa8d84d0A6687E16B67cdE38_transfer-self.bpl'
[2020-11-25 12:57:04,026 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 12:57:04,027 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 12:57:04,027 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 12:57:04,027 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 12:57:04,027 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 12:57:04,044 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "CustomToken_0x38AA24Df69672882Aa8d84d0A6687E16B67cdE38_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:57:04" (1/1) ...
[2020-11-25 12:57:04,046 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "CustomToken_0x38AA24Df69672882Aa8d84d0A6687E16B67cdE38_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:57:04" (1/1) ...
[2020-11-25 12:57:04,071 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "CustomToken_0x38AA24Df69672882Aa8d84d0A6687E16B67cdE38_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:57:04" (1/1) ...
[2020-11-25 12:57:04,072 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "CustomToken_0x38AA24Df69672882Aa8d84d0A6687E16B67cdE38_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:57:04" (1/1) ...
[2020-11-25 12:57:04,088 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "CustomToken_0x38AA24Df69672882Aa8d84d0A6687E16B67cdE38_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:57:04" (1/1) ...
[2020-11-25 12:57:04,096 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "CustomToken_0x38AA24Df69672882Aa8d84d0A6687E16B67cdE38_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:57:04" (1/1) ...
[2020-11-25 12:57:04,102 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "CustomToken_0x38AA24Df69672882Aa8d84d0A6687E16B67cdE38_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:57:04" (1/1) ...
[2020-11-25 12:57:04,110 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 12:57:04,110 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 12:57:04,110 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 12:57:04,112 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 12:57:04,116 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "CustomToken_0x38AA24Df69672882Aa8d84d0A6687E16B67cdE38_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:57:04" (1/1) ...
[2020-11-25 12:57:04,132 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(BaseToken.transfer(to, value), msg.sender == to && value <= balanceOf_BaseToken[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_BaseToken[this][to] >= 0 && balanceOf_BaseToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_BaseToken[this][msg.sender] >= 0 &&  balanceOf_BaseToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(BaseToken.transfer(to, value), return == true && totalSupply_BaseToken[this] == old(totalSupply_BaseToken[this]) && balanceOf_BaseToken[this] == old(balanceOf_BaseToken[this]) && allowance_BaseToken[this] == old(allowance_BaseToken[this]))))
[2020-11-25 12:57:04,137 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(BaseToken.transfer(to, value), msg.sender == to && value <= balanceOf_BaseToken[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_BaseToken[this][to] >= 0 && balanceOf_BaseToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_BaseToken[this][msg.sender] >= 0 &&  balanceOf_BaseToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(BaseToken.transfer(to, value), return == true && totalSupply_BaseToken[this] == old(totalSupply_BaseToken[this]) && balanceOf_BaseToken[this] == old(balanceOf_BaseToken[this]) && allowance_BaseToken[this] == old(allowance_BaseToken[this]))))
[2020-11-25 12:57:04,144 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(BaseToken.transfer(to, value), msg.sender == to && value <= balanceOf_BaseToken[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_BaseToken[this][to] >= 0 && balanceOf_BaseToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_BaseToken[this][msg.sender] >= 0 &&  balanceOf_BaseToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(BaseToken.transfer(to, value), return == true && totalSupply_BaseToken[this] == old(totalSupply_BaseToken[this]) && balanceOf_BaseToken[this] == old(balanceOf_BaseToken[this]) && allowance_BaseToken[this] == old(allowance_BaseToken[this]))))
[2020-11-25 12:57:04,149 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( msg.sender==to_s284 && value_s284<=balanceOf_BaseToken[this][msg.sender] ) && value_s284>=0 ) && value_s284<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balanceOf_BaseToken[this][to_s284]>=0 ) && balanceOf_BaseToken[this][to_s284]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balanceOf_BaseToken[this][msg.sender]>=0 ) && balanceOf_BaseToken[this][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BaseToken>],IdentifierExpression[to_s284,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BaseToken>]],BinaryExpression[COMPLEQ,IdentifierExpression[value_s284,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BaseToken>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_BaseToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BaseToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BaseToken>]]]]],BinaryExpression[COMPGEQ,IdentifierExpression[value_s284,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BaseToken>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[value_s284,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BaseToken>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_BaseToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BaseToken>]]],[IdentifierExpression[to_s284,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BaseToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_BaseToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BaseToken>]]],[IdentifierExpression[to_s284,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BaseToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_BaseToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BaseToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BaseToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_BaseToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BaseToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BaseToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 12:57:04,151 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( __ret_0_==true && totalSupply_BaseToken[this]==( old(totalSupply_BaseToken[this]) ) ) && balanceOf_BaseToken[this]==( old(balanceOf_BaseToken[this]) ) ) && allowance_BaseToken[this]==( old(allowance_BaseToken[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[__ret_0_,<IMPLEMENTATION_OUTPARAM,transfer~address~uint256_BaseToken>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[totalSupply_BaseToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BaseToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[totalSupply_BaseToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BaseToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[balanceOf_BaseToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BaseToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[balanceOf_BaseToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BaseToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[allowance_BaseToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BaseToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[allowance_BaseToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BaseToken>]]]]]]
[2020-11-25 12:57:04,156 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(BaseToken.transfer(to, value), msg.sender == to && value <= balanceOf_BaseToken[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_BaseToken[this][to] >= 0 && balanceOf_BaseToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_BaseToken[this][msg.sender] >= 0 &&  balanceOf_BaseToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(BaseToken.transfer(to, value), return == true && totalSupply_BaseToken[this] == old(totalSupply_BaseToken[this]) && balanceOf_BaseToken[this] == old(balanceOf_BaseToken[this]) && allowance_BaseToken[this] == old(allowance_BaseToken[this]))))
[2020-11-25 12:57:04,156 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transfer_BaseToken0) ==> ( <>AP(success_transfer_BaseToken0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 12:57:04,162 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 12:57:04 PropertyContainer
[2020-11-25 12:57:04,162 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 12:57:04,163 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 12:57:04,163 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 12:57:04,163 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 12:57:04,163 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "CustomToken_0x38AA24Df69672882Aa8d84d0A6687E16B67cdE38_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:57:04" (1/2) ...
[2020-11-25 12:57:04,164 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 12:57:04,164 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 12:57:04,175 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 12:57:04" (2/2) ...
[2020-11-25 12:57:04,175 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 12:57:04,175 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 12:57:04,176 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 12:57:04,176 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 12:57:04,176 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "CustomToken_0x38AA24Df69672882Aa8d84d0A6687E16B67cdE38_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:57:04" (1/2) ...
[2020-11-25 12:57:04,227 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 12:57:04,227 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 12:57:04,227 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 12:57:04,227 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 12:57:04,228 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 12:57:04,228 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 12:57:04,228 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 12:57:04,228 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 12:57:04,228 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 12:57:04,228 INFO  L130     BoogieDeclarations]: Found specification of procedure BaseToken_BaseToken_NoBaseCtor__success
[2020-11-25 12:57:04,228 INFO  L130     BoogieDeclarations]: Found specification of procedure BaseToken_BaseToken
[2020-11-25 12:57:04,228 INFO  L138     BoogieDeclarations]: Found implementation of procedure BaseToken_BaseToken
[2020-11-25 12:57:04,228 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_BaseToken__success
[2020-11-25 12:57:04,228 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_BaseToken__success
[2020-11-25 12:57:04,228 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BaseToken
[2020-11-25 12:57:04,229 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BaseToken
[2020-11-25 12:57:04,229 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_BaseToken
[2020-11-25 12:57:04,229 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_BaseToken
[2020-11-25 12:57:04,229 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_BaseToken
[2020-11-25 12:57:04,229 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_BaseToken
[2020-11-25 12:57:04,229 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_BaseToken
[2020-11-25 12:57:04,229 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_BaseToken
[2020-11-25 12:57:04,229 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_BaseToken
[2020-11-25 12:57:04,229 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_BaseToken
[2020-11-25 12:57:04,230 INFO  L130     BoogieDeclarations]: Found specification of procedure name_BaseToken
[2020-11-25 12:57:04,230 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_BaseToken
[2020-11-25 12:57:04,230 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_BaseToken
[2020-11-25 12:57:04,230 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_BaseToken
[2020-11-25 12:57:04,230 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_BaseToken
[2020-11-25 12:57:04,230 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_BaseToken
[2020-11-25 12:57:04,230 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BaseToken
[2020-11-25 12:57:04,230 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BaseToken
[2020-11-25 12:57:04,230 INFO  L130     BoogieDeclarations]: Found specification of procedure _totalLimit_BaseToken
[2020-11-25 12:57:04,230 INFO  L138     BoogieDeclarations]: Found implementation of procedure _totalLimit_BaseToken
[2020-11-25 12:57:04,230 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BaseToken
[2020-11-25 12:57:04,230 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BaseToken
[2020-11-25 12:57:04,230 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_BaseToken
[2020-11-25 12:57:04,231 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_BaseToken
[2020-11-25 12:57:04,231 INFO  L130     BoogieDeclarations]: Found specification of procedure CustomToken_CustomToken_NoBaseCtor__success
[2020-11-25 12:57:04,231 INFO  L130     BoogieDeclarations]: Found specification of procedure CustomToken_CustomToken
[2020-11-25 12:57:04,231 INFO  L138     BoogieDeclarations]: Found implementation of procedure CustomToken_CustomToken
[2020-11-25 12:57:04,231 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 12:57:04,231 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 12:57:04,231 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 12:57:04,231 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 12:57:04,231 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 12:57:04,231 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_BaseToken
[2020-11-25 12:57:04,231 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_BaseToken
[2020-11-25 12:57:04,231 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_CustomToken
[2020-11-25 12:57:04,231 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 12:57:04,232 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 12:57:04,232 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 12:57:04,232 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 12:57:04,232 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 12:57:04,232 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 12:57:04,232 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 12:57:04,232 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 12:57:04,232 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 12:57:04,232 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 12:57:04,232 INFO  L130     BoogieDeclarations]: Found specification of procedure BaseToken_BaseToken_NoBaseCtor__fail
[2020-11-25 12:57:04,232 INFO  L130     BoogieDeclarations]: Found specification of procedure BaseToken_BaseToken__success
[2020-11-25 12:57:04,232 INFO  L130     BoogieDeclarations]: Found specification of procedure BaseToken_BaseToken__fail
[2020-11-25 12:57:04,232 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_BaseToken__fail
[2020-11-25 12:57:04,233 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_BaseToken__fail
[2020-11-25 12:57:04,233 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BaseToken__success
[2020-11-25 12:57:04,233 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BaseToken__fail
[2020-11-25 12:57:04,233 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_BaseToken__success
[2020-11-25 12:57:04,233 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_BaseToken__fail
[2020-11-25 12:57:04,233 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_BaseToken__success
[2020-11-25 12:57:04,233 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_BaseToken__fail
[2020-11-25 12:57:04,233 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_BaseToken__success
[2020-11-25 12:57:04,233 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_BaseToken__fail
[2020-11-25 12:57:04,233 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_BaseToken__success
[2020-11-25 12:57:04,233 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_BaseToken__fail
[2020-11-25 12:57:04,233 INFO  L130     BoogieDeclarations]: Found specification of procedure name_BaseToken__success
[2020-11-25 12:57:04,233 INFO  L130     BoogieDeclarations]: Found specification of procedure name_BaseToken__fail
[2020-11-25 12:57:04,234 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_BaseToken__success
[2020-11-25 12:57:04,234 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_BaseToken__fail
[2020-11-25 12:57:04,234 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_BaseToken__success
[2020-11-25 12:57:04,234 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_BaseToken__fail
[2020-11-25 12:57:04,234 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BaseToken__success
[2020-11-25 12:57:04,234 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BaseToken__fail
[2020-11-25 12:57:04,234 INFO  L130     BoogieDeclarations]: Found specification of procedure _totalLimit_BaseToken__success
[2020-11-25 12:57:04,234 INFO  L130     BoogieDeclarations]: Found specification of procedure _totalLimit_BaseToken__fail
[2020-11-25 12:57:04,234 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BaseToken__success
[2020-11-25 12:57:04,234 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BaseToken__fail
[2020-11-25 12:57:04,234 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_BaseToken__success
[2020-11-25 12:57:04,234 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_BaseToken__fail
[2020-11-25 12:57:04,235 INFO  L130     BoogieDeclarations]: Found specification of procedure CustomToken_CustomToken_NoBaseCtor__fail
[2020-11-25 12:57:04,235 INFO  L130     BoogieDeclarations]: Found specification of procedure CustomToken_CustomToken__success
[2020-11-25 12:57:04,235 INFO  L130     BoogieDeclarations]: Found specification of procedure CustomToken_CustomToken__fail
[2020-11-25 12:57:04,235 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 12:57:04,235 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 12:57:04,235 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 12:57:04,235 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 12:57:04,235 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 12:57:04,235 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 12:57:04,235 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 12:57:04,235 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 12:57:04,235 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 12:57:04,235 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 12:57:04,235 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 12:57:04,236 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 12:57:04,236 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 12:57:04,236 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 12:57:04,236 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 12:57:04,236 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 12:57:04,236 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 12:57:04,236 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 12:57:04,236 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 12:57:04,236 INFO  L138     BoogieDeclarations]: Found implementation of procedure BaseToken_BaseToken_NoBaseCtor__fail
[2020-11-25 12:57:04,236 INFO  L138     BoogieDeclarations]: Found implementation of procedure BaseToken_BaseToken_NoBaseCtor__success
[2020-11-25 12:57:04,236 INFO  L138     BoogieDeclarations]: Found implementation of procedure BaseToken_BaseToken__fail
[2020-11-25 12:57:04,236 INFO  L138     BoogieDeclarations]: Found implementation of procedure BaseToken_BaseToken__success
[2020-11-25 12:57:04,237 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_BaseToken__fail
[2020-11-25 12:57:04,237 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_BaseToken__success
[2020-11-25 12:57:04,237 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_BaseToken__fail
[2020-11-25 12:57:04,237 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_BaseToken__success
[2020-11-25 12:57:04,237 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BaseToken__fail
[2020-11-25 12:57:04,237 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BaseToken__success
[2020-11-25 12:57:04,237 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_BaseToken__fail
[2020-11-25 12:57:04,237 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_BaseToken__success
[2020-11-25 12:57:04,237 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_BaseToken__fail
[2020-11-25 12:57:04,237 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_BaseToken__success
[2020-11-25 12:57:04,237 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_BaseToken__fail
[2020-11-25 12:57:04,238 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_BaseToken__success
[2020-11-25 12:57:04,238 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_BaseToken__fail
[2020-11-25 12:57:04,238 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_BaseToken__success
[2020-11-25 12:57:04,238 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_BaseToken__fail
[2020-11-25 12:57:04,238 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_BaseToken__success
[2020-11-25 12:57:04,238 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_BaseToken__fail
[2020-11-25 12:57:04,238 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_BaseToken__success
[2020-11-25 12:57:04,238 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_BaseToken__fail
[2020-11-25 12:57:04,238 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_BaseToken__success
[2020-11-25 12:57:04,238 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BaseToken__fail
[2020-11-25 12:57:04,238 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BaseToken__success
[2020-11-25 12:57:04,238 INFO  L138     BoogieDeclarations]: Found implementation of procedure _totalLimit_BaseToken__fail
[2020-11-25 12:57:04,238 INFO  L138     BoogieDeclarations]: Found implementation of procedure _totalLimit_BaseToken__success
[2020-11-25 12:57:04,238 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BaseToken__fail
[2020-11-25 12:57:04,239 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BaseToken__success
[2020-11-25 12:57:04,239 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_BaseToken__fail
[2020-11-25 12:57:04,239 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_BaseToken__success
[2020-11-25 12:57:04,239 INFO  L138     BoogieDeclarations]: Found implementation of procedure CustomToken_CustomToken_NoBaseCtor__fail
[2020-11-25 12:57:04,239 INFO  L138     BoogieDeclarations]: Found implementation of procedure CustomToken_CustomToken_NoBaseCtor__success
[2020-11-25 12:57:04,239 INFO  L138     BoogieDeclarations]: Found implementation of procedure CustomToken_CustomToken__fail
[2020-11-25 12:57:04,239 INFO  L138     BoogieDeclarations]: Found implementation of procedure CustomToken_CustomToken__success
[2020-11-25 12:57:04,239 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 12:57:04,239 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 12:57:04,239 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 12:57:04,239 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 12:57:04,239 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 12:57:04,240 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 12:57:04,240 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 12:57:04,240 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 12:57:04,240 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_BaseToken
[2020-11-25 12:57:04,240 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_BaseToken
[2020-11-25 12:57:04,240 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_CustomToken
[2020-11-25 12:57:04,240 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 12:57:04,240 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 12:57:04,240 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 12:57:04,535 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 12:57:04,536 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 12:57:04,536 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 12:57:04,776 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 12:57:04,777 INFO  L286             CfgBuilder]: Removed 3 assue(true) statements.
[2020-11-25 12:57:04,779 INFO  L202        PluginConnector]: Adding new model CustomToken_0x38AA24Df69672882Aa8d84d0A6687E16B67cdE38_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 12:57:04 BoogieIcfgContainer
[2020-11-25 12:57:04,779 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 12:57:04" (2/2) ...
[2020-11-25 12:57:04,779 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 12:57:04,779 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@ea871f2 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 12:57:04, skipping insertion in model container
[2020-11-25 12:57:04,779 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 12:57:04,779 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 12:57:04,780 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 12:57:04,781 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 12:57:04,781 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "CustomToken_0x38AA24Df69672882Aa8d84d0A6687E16B67cdE38_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:57:04" (1/3) ...
[2020-11-25 12:57:04,781 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@1217c0 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 12:57:04, skipping insertion in model container
[2020-11-25 12:57:04,782 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 12:57:04" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 12:57:04,818 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 12:57:04 NWAContainer
[2020-11-25 12:57:04,818 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 12:57:04,819 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 12:57:04,819 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 12:57:04,819 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 12:57:04,820 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "CustomToken_0x38AA24Df69672882Aa8d84d0A6687E16B67cdE38_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 12:57:04" (3/4) ...
[2020-11-25 12:57:04,821 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@4d58c62 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 12:57:04, skipping insertion in model container
[2020-11-25 12:57:04,821 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 12:57:04" (4/4) ...
[2020-11-25 12:57:04,824 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 12:57:04,826 INFO  L110   BuchiProductObserver]: Initial RCFG 1042 locations, 1369 edges
[2020-11-25 12:57:04,827 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 12:57:04,836 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 12:57:05,821 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 12:57:05,824 INFO  L110   BuchiProductObserver]: BuchiProgram size 2536 locations, 4488 edges
[2020-11-25 12:57:05,825 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 12:57:05 BoogieIcfgContainer
[2020-11-25 12:57:05,825 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 12:57:05,825 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 12:57:05,825 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 12:57:05,826 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 12:57:05,827 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 12:57:05" (1/1) ...
[2020-11-25 12:57:05,906 INFO  L313           BlockEncoder]: Initial Icfg 2536 locations, 4488 edges
[2020-11-25 12:57:05,907 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 12:57:05,907 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 12:57:05,907 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 12:57:05,908 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 12:57:05,918 INFO  L70    emoveInfeasibleEdges]: Removed 54 edges and 9 locations because of local infeasibility
[2020-11-25 12:57:05,926 INFO  L70        RemoveSinkStates]: Removed 14 edges and 9 locations by removing sink states
[2020-11-25 12:57:05,936 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 12:57:05,939 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 12:57:05,942 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 12:57:05,943 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 12:57:05,947 INFO  L313           BlockEncoder]: Encoded RCFG 2500 locations, 4394 edges
[2020-11-25 12:57:05,948 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 12:57:05 BasicIcfg
[2020-11-25 12:57:05,948 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 12:57:05,948 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 12:57:05,948 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 12:57:05,951 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 12:57:05,951 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 12:57:05,951 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "CustomToken_0x38AA24Df69672882Aa8d84d0A6687E16B67cdE38_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:57:04" (1/6) ...
[2020-11-25 12:57:05,953 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4acb7ab3 and model type CustomToken_0x38AA24Df69672882Aa8d84d0A6687E16B67cdE38_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 12:57:05, skipping insertion in model container
[2020-11-25 12:57:05,953 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 12:57:05,953 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 12:57:04" (2/6) ...
[2020-11-25 12:57:05,954 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4acb7ab3 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 12:57:05, skipping insertion in model container
[2020-11-25 12:57:05,954 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 12:57:05,954 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "CustomToken_0x38AA24Df69672882Aa8d84d0A6687E16B67cdE38_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 12:57:04" (3/6) ...
[2020-11-25 12:57:05,954 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4acb7ab3 and model type CustomToken_0x38AA24Df69672882Aa8d84d0A6687E16B67cdE38_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 12:57:05, skipping insertion in model container
[2020-11-25 12:57:05,954 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 12:57:05,954 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 12:57:04" (4/6) ...
[2020-11-25 12:57:05,955 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4acb7ab3 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 12:57:05, skipping insertion in model container
[2020-11-25 12:57:05,955 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 12:57:05,955 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 12:57:05" (5/6) ...
[2020-11-25 12:57:05,955 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4acb7ab3 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 12:57:05, skipping insertion in model container
[2020-11-25 12:57:05,955 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 12:57:05,955 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 12:57:05" (6/6) ...
[2020-11-25 12:57:05,956 INFO  L404   chiAutomizerObserver]: Analyzing ICFG CustomToken_0x38AA24Df69672882Aa8d84d0A6687E16B67cdE38_transfer-self.bpl_BEv2
[2020-11-25 12:57:05,996 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 12:57:05,997 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 12:57:05,997 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 12:57:05,997 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 12:57:05,997 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 12:57:05,997 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 12:57:05,997 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 12:57:05,997 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 12:57:05,997 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 12:57:06,029 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2500 states.
[2020-11-25 12:57:06,079 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:57:06,079 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:57:06,079 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:57:06,089 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:57:06,089 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:57:06,089 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 12:57:06,089 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2500 states.
[2020-11-25 12:57:06,104 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:57:06,104 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:57:06,104 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:57:06,106 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:57:06,106 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_BaseToken0 := false;
[L2]                 call_transfer_BaseToken0 := false;
[L2]     CALL        call main();
[L3006]              assume null == 0;
[L3007]  CALL        call this := FreshRefGenerator__success();
[L1275]              havoc newRef;
[L1276]              assume Alloc[newRef] == false;
[L1277]              Alloc[newRef] := true;
[L1278]              assume newRef != null;
[L3007]  RET         call this := FreshRefGenerator__success();
[L3008]              assume now >= 0;
[L3009]              assume DType[this] == CustomToken;
[L3010]              assume msgvalue_MSG == 0;
[L3011]              gas := gas - 53000;
[L3012]  CALL        call CustomToken_CustomToken(this, msgsender_MSG, msgvalue_MSG);
[L866]               havoc __exception;
[L867]               revert := false;
[L868]   COND FALSE  !(__exception)
[L890]   CALL        call CustomToken_CustomToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1929]  CALL        call BaseToken_BaseToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1481]  CALL        call BaseToken_BaseToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1457]              assume msgsender_MSG != null;
[L1458]              Balance[this] := 0;
[L1459]              name_BaseToken[this] := 1657376191;
[L1460]              symbol_BaseToken[this] := -853092303;
[L1461]              decimals_BaseToken[this] := 18;
[L1462]              totalSupply_BaseToken[this] := 525600000000000000000000000;
[L1463]              _totalLimit_BaseToken[this] := 100000000000000000000000000000000;
[L1464]              balanceOf_BaseToken[this] := zeroRefintArr();
[L1465]              sum_balanceOf0[this] := 0;
[L1466]              allowance_BaseToken[this] := zeroRefRefintArr();
[L1467]              sum_allowance1[this] := 0;
[L1481]  RET         call BaseToken_BaseToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1482]  COND FALSE  !(revert)
[L1929]  RET         call BaseToken_BaseToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1930]  COND TRUE   revert
[L890]   RET         call CustomToken_CustomToken__success(this, msgsender_MSG, msgvalue_MSG);
[L891]               assume !revert && gas >= 0;
[L3012]  RET         call CustomToken_CustomToken(this, msgsender_MSG, msgvalue_MSG);
[L3013]              assume !revert && gas >= 0;

Loop:
[L3016]  CALL        call CorralChoice_CustomToken(this);
[L2881]              havoc msgsender_MSG;
[L2882]              havoc msgvalue_MSG;
[L2883]              havoc choice;
[L2884]              havoc __ret_0_name;
[L2885]              havoc __ret_0_symbol;
[L2886]              havoc __ret_0_decimals;
[L2887]              havoc __ret_0_totalSupply;
[L2888]              havoc __ret_0__totalLimit;
[L2889]              havoc arg483_s0;
[L2890]              havoc __ret_0_balanceOf;
[L2891]              havoc arg484_s0;
[L2892]              havoc arg485_s0;
[L2893]              havoc __ret_0_allowance;
[L2894]              havoc to_s284;
[L2895]              havoc value_s284;
[L2896]              havoc __ret_0_transfer;
[L2897]              havoc from_s321;
[L2898]              havoc to_s321;
[L2899]              havoc value_s321;
[L2900]              havoc __ret_0_transferFrom;
[L2901]              havoc spender_s357;
[L2902]              havoc value_s357;
[L2903]              havoc __ret_0_approve;
[L2904]              havoc spender_s406;
[L2905]              havoc addedValue_s406;
[L2906]              havoc __ret_0_increaseAllowance;
[L2907]              havoc spender_s455;
[L2908]              havoc subtractedValue_s455;
[L2909]              havoc __ret_0_decreaseAllowance;
[L2910]              havoc tmpNow;
[L2911]              havoc gas;
[L2912]              assume gas > 4000000 && gas <= 8000000;
[L2913]              tmpNow := now;
[L2914]              havoc now;
[L2915]              assume now > tmpNow;
[L2916]              assume msgsender_MSG != null;
[L2917]              assume DType[msgsender_MSG] != SafeMath;
[L2918]              assume DType[msgsender_MSG] != BaseToken;
[L2919]              assume DType[msgsender_MSG] != CustomToken;
[L2920]              Alloc[msgsender_MSG] := true;
[L2921]  COND TRUE   choice == 12
[L2922]              gas := gas - 21000;
[L2923]  COND FALSE  !(gas >= 0)
[L3016]  RET         call CorralChoice_CustomToken(this);

[2020-11-25 12:57:06,120 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:57:06,120 INFO  L82        PathProgramCache]: Analyzing trace with hash -494814748, now seen corresponding path program 1 times
[2020-11-25 12:57:06,124 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:57:06,178 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:57:06,224 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 12:57:06,226 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 12:57:06,227 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 12:57:06,230 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 12:57:06,375 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 12:57:06,376 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 12:57:06,377 INFO  L87              Difference]: Start difference. First operand 2500 states. Second operand 4 states.
[2020-11-25 12:57:06,602 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:57:06,603 INFO  L93              Difference]: Finished difference Result 1649 states and 1826 transitions.
[2020-11-25 12:57:06,603 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 12:57:06,604 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1649 states and 1826 transitions.
[2020-11-25 12:57:06,612 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:57:06,623 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1649 states to 1649 states and 1826 transitions.
[2020-11-25 12:57:06,624 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-25 12:57:06,626 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 554
[2020-11-25 12:57:06,626 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1649 states and 1826 transitions.
[2020-11-25 12:57:06,631 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:57:06,631 INFO  L728         BuchiCegarLoop]: Abstraction has 1649 states and 1826 transitions.
[2020-11-25 12:57:06,644 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1649 states and 1826 transitions.
[2020-11-25 12:57:06,674 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1649 to 1649.
[2020-11-25 12:57:06,675 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1649 states.
[2020-11-25 12:57:06,678 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1649 states to 1649 states and 1826 transitions.
[2020-11-25 12:57:06,679 INFO  L751         BuchiCegarLoop]: Abstraction has 1649 states and 1826 transitions.
[2020-11-25 12:57:06,679 INFO  L631         BuchiCegarLoop]: Abstraction has 1649 states and 1826 transitions.
[2020-11-25 12:57:06,679 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 12:57:06,679 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1649 states and 1826 transitions.
[2020-11-25 12:57:06,683 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:57:06,683 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:57:06,683 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:57:06,685 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:57:06,685 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_BaseToken0 := false;
[L2]                 call_transfer_BaseToken0 := false;
[L2]     CALL        call main();
[L3006]              assume null == 0;
[L3007]  CALL        call this := FreshRefGenerator__success();
[L1275]              havoc newRef;
[L1276]              assume Alloc[newRef] == false;
[L1277]              Alloc[newRef] := true;
[L1278]              assume newRef != null;
[L3007]  RET         call this := FreshRefGenerator__success();
[L3008]              assume now >= 0;
[L3009]              assume DType[this] == CustomToken;
[L3010]              assume msgvalue_MSG == 0;
[L3011]              gas := gas - 53000;
[L3012]  CALL        call CustomToken_CustomToken(this, msgsender_MSG, msgvalue_MSG);
[L866]               havoc __exception;
[L867]               revert := false;
[L868]   COND FALSE  !(__exception)
[L890]   CALL        call CustomToken_CustomToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1929]  CALL        call BaseToken_BaseToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1481]  CALL        call BaseToken_BaseToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1457]              assume msgsender_MSG != null;
[L1458]              Balance[this] := 0;
[L1459]              name_BaseToken[this] := 1657376191;
[L1460]              symbol_BaseToken[this] := -853092303;
[L1461]              decimals_BaseToken[this] := 18;
[L1462]              totalSupply_BaseToken[this] := 525600000000000000000000000;
[L1463]              _totalLimit_BaseToken[this] := 100000000000000000000000000000000;
[L1464]              balanceOf_BaseToken[this] := zeroRefintArr();
[L1465]              sum_balanceOf0[this] := 0;
[L1466]              allowance_BaseToken[this] := zeroRefRefintArr();
[L1467]              sum_allowance1[this] := 0;
[L1481]  RET         call BaseToken_BaseToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1482]  COND TRUE   revert
[L1929]  RET         call BaseToken_BaseToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1930]  COND TRUE   revert
[L890]   RET         call CustomToken_CustomToken__success(this, msgsender_MSG, msgvalue_MSG);
[L891]               assume !revert && gas >= 0;
[L3012]  RET         call CustomToken_CustomToken(this, msgsender_MSG, msgvalue_MSG);
[L3013]              assume !revert && gas >= 0;
[L3016]  CALL        call CorralChoice_CustomToken(this);
[L2881]              havoc msgsender_MSG;
[L2882]              havoc msgvalue_MSG;
[L2883]              havoc choice;
[L2884]              havoc __ret_0_name;
[L2885]              havoc __ret_0_symbol;
[L2886]              havoc __ret_0_decimals;
[L2887]              havoc __ret_0_totalSupply;
[L2888]              havoc __ret_0__totalLimit;
[L2889]              havoc arg483_s0;
[L2890]              havoc __ret_0_balanceOf;
[L2891]              havoc arg484_s0;
[L2892]              havoc arg485_s0;
[L2893]              havoc __ret_0_allowance;
[L2894]              havoc to_s284;
[L2895]              havoc value_s284;
[L2896]              havoc __ret_0_transfer;
[L2897]              havoc from_s321;
[L2898]              havoc to_s321;
[L2899]              havoc value_s321;
[L2900]              havoc __ret_0_transferFrom;
[L2901]              havoc spender_s357;
[L2902]              havoc value_s357;
[L2903]              havoc __ret_0_approve;
[L2904]              havoc spender_s406;
[L2905]              havoc addedValue_s406;
[L2906]              havoc __ret_0_increaseAllowance;
[L2907]              havoc spender_s455;
[L2908]              havoc subtractedValue_s455;
[L2909]              havoc __ret_0_decreaseAllowance;
[L2910]              havoc tmpNow;
[L2911]              havoc gas;
[L2912]              assume gas > 4000000 && gas <= 8000000;
[L2913]              tmpNow := now;
[L2914]              havoc now;
[L2915]              assume now > tmpNow;
[L2916]              assume msgsender_MSG != null;
[L2917]              assume DType[msgsender_MSG] != SafeMath;
[L2918]              assume DType[msgsender_MSG] != BaseToken;
[L2919]              assume DType[msgsender_MSG] != CustomToken;
[L2920]              Alloc[msgsender_MSG] := true;
[L2921]  COND FALSE  !(choice == 12)
[L2927]  COND FALSE  !(choice == 11)
[L2933]  COND FALSE  !(choice == 10)
[L2939]  COND FALSE  !(choice == 9)
[L2945]  COND FALSE  !(choice == 8)
[L2951]  COND FALSE  !(choice == 7)
[L2957]  COND FALSE  !(choice == 6)
[L2963]  COND TRUE   choice == 5
[L2964]              gas := gas - 21000;
[L2965]  COND TRUE   gas >= 0
[L2966]              assume value_s284 >= 0 && value_s284 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2967]              assume msgvalue_MSG == 0;
[L2968]  CALL        call __ret_0_transfer := transfer~address~uint256_BaseToken(this, msgsender_MSG, msgvalue_MSG, to_s284, value_s284);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s284 && value_s284 <= balanceOf_BaseToken[this][msgsender_MSG]) && value_s284 >= 0) && value_s284 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_BaseToken[this][to_s284] >= 0) && balanceOf_BaseToken[this][to_s284] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_BaseToken[this][msgsender_MSG] >= 0) && balanceOf_BaseToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BaseToken0 := true;
[L2]                 call_transfer_BaseToken0 := false;
[L2]                 revert := revert_hold;
[L218]               havoc __exception;
[L219]               revert := false;
[L220]   COND FALSE  !(__exception)
[L242]   CALL        call __ret_0_ := transfer~address~uint256_BaseToken__success(this, msgsender_MSG, msgvalue_MSG, to_s284, value_s284);
[L1618]  COND TRUE   DType[this] == CustomToken
[L1619]  CALL        call _transfer~address~address~uint256_BaseToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s284, value_s284);
[L1518]              __var_1 := null;
[L1519]  COND TRUE   !(to_s217 != null)
[L1520]              revert := true;
[L1619]  RET         call _transfer~address~address~uint256_BaseToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s284, value_s284);
[L1620]  COND TRUE   revert
[L242]   RET         call __ret_0_ := transfer~address~uint256_BaseToken__success(this, msgsender_MSG, msgvalue_MSG, to_s284, value_s284);
[L243]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((__ret_0_ == true && totalSupply_BaseToken[this] == old(totalSupply_BaseToken[this])) && balanceOf_BaseToken[this] == old(balanceOf_BaseToken[this])) && allowance_BaseToken[this] == old(allowance_BaseToken[this]));
[L2]                 revert := revert_hold;
[L2968]  RET         call __ret_0_transfer := transfer~address~uint256_BaseToken(this, msgsender_MSG, msgvalue_MSG, to_s284, value_s284);
[L3016]  RET         call CorralChoice_CustomToken(this);

Loop:
[L3016]  CALL        call CorralChoice_CustomToken(this);
[L2881]              havoc msgsender_MSG;
[L2882]              havoc msgvalue_MSG;
[L2883]              havoc choice;
[L2884]              havoc __ret_0_name;
[L2885]              havoc __ret_0_symbol;
[L2886]              havoc __ret_0_decimals;
[L2887]              havoc __ret_0_totalSupply;
[L2888]              havoc __ret_0__totalLimit;
[L2889]              havoc arg483_s0;
[L2890]              havoc __ret_0_balanceOf;
[L2891]              havoc arg484_s0;
[L2892]              havoc arg485_s0;
[L2893]              havoc __ret_0_allowance;
[L2894]              havoc to_s284;
[L2895]              havoc value_s284;
[L2896]              havoc __ret_0_transfer;
[L2897]              havoc from_s321;
[L2898]              havoc to_s321;
[L2899]              havoc value_s321;
[L2900]              havoc __ret_0_transferFrom;
[L2901]              havoc spender_s357;
[L2902]              havoc value_s357;
[L2903]              havoc __ret_0_approve;
[L2904]              havoc spender_s406;
[L2905]              havoc addedValue_s406;
[L2906]              havoc __ret_0_increaseAllowance;
[L2907]              havoc spender_s455;
[L2908]              havoc subtractedValue_s455;
[L2909]              havoc __ret_0_decreaseAllowance;
[L2910]              havoc tmpNow;
[L2911]              havoc gas;
[L2912]              assume gas > 4000000 && gas <= 8000000;
[L2913]              tmpNow := now;
[L2914]              havoc now;
[L2915]              assume now > tmpNow;
[L2916]              assume msgsender_MSG != null;
[L2917]              assume DType[msgsender_MSG] != SafeMath;
[L2918]              assume DType[msgsender_MSG] != BaseToken;
[L2919]              assume DType[msgsender_MSG] != CustomToken;
[L2920]              Alloc[msgsender_MSG] := true;
[L2921]  COND FALSE  !(choice == 12)
[L2927]  COND FALSE  !(choice == 11)
[L2933]  COND FALSE  !(choice == 10)
[L2939]  COND FALSE  !(choice == 9)
[L2945]  COND FALSE  !(choice == 8)
[L2951]  COND FALSE  !(choice == 7)
[L2957]  COND FALSE  !(choice == 6)
[L2963]  COND TRUE   choice == 5
[L2964]              gas := gas - 21000;
[L2965]  COND TRUE   gas >= 0
[L2966]              assume value_s284 >= 0 && value_s284 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2967]              assume msgvalue_MSG == 0;
[L2968]  CALL        call __ret_0_transfer := transfer~address~uint256_BaseToken(this, msgsender_MSG, msgvalue_MSG, to_s284, value_s284);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s284 && value_s284 <= balanceOf_BaseToken[this][msgsender_MSG]) && value_s284 >= 0) && value_s284 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_BaseToken[this][to_s284] >= 0) && balanceOf_BaseToken[this][to_s284] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_BaseToken[this][msgsender_MSG] >= 0) && balanceOf_BaseToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BaseToken0 := true;
[L2]                 call_transfer_BaseToken0 := false;
[L2]                 revert := revert_hold;
[L218]               havoc __exception;
[L219]               revert := false;
[L220]   COND FALSE  !(__exception)
[L242]   CALL        call __ret_0_ := transfer~address~uint256_BaseToken__success(this, msgsender_MSG, msgvalue_MSG, to_s284, value_s284);
[L1618]  COND TRUE   DType[this] == CustomToken
[L1619]  CALL        call _transfer~address~address~uint256_BaseToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s284, value_s284);
[L1518]              __var_1 := null;
[L1519]  COND TRUE   !(to_s217 != null)
[L1520]              revert := true;
[L1619]  RET         call _transfer~address~address~uint256_BaseToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s284, value_s284);
[L1620]  COND TRUE   revert
[L242]   RET         call __ret_0_ := transfer~address~uint256_BaseToken__success(this, msgsender_MSG, msgvalue_MSG, to_s284, value_s284);
[L243]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((__ret_0_ == true && totalSupply_BaseToken[this] == old(totalSupply_BaseToken[this])) && balanceOf_BaseToken[this] == old(balanceOf_BaseToken[this])) && allowance_BaseToken[this] == old(allowance_BaseToken[this]));
[L2]                 revert := revert_hold;
[L2968]  RET         call __ret_0_transfer := transfer~address~uint256_BaseToken(this, msgsender_MSG, msgvalue_MSG, to_s284, value_s284);
[L3016]  RET         call CorralChoice_CustomToken(this);

[2020-11-25 12:57:06,689 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:57:06,689 INFO  L82        PathProgramCache]: Analyzing trace with hash 1746862894, now seen corresponding path program 1 times
[2020-11-25 12:57:06,690 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:57:06,698 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:57:06,721 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 12:57:06,721 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 12:57:06,722 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 12:57:06,723 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 12:57:06,723 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 12:57:06,723 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 12:57:06,723 INFO  L87              Difference]: Start difference. First operand 1649 states and 1826 transitions. cyclomatic complexity: 179 Second operand 4 states.
[2020-11-25 12:57:07,022 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:57:07,022 INFO  L93              Difference]: Finished difference Result 2445 states and 2790 transitions.
[2020-11-25 12:57:07,022 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 12:57:07,023 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2445 states and 2790 transitions.
[2020-11-25 12:57:07,034 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-25 12:57:07,046 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2445 states to 2345 states and 2676 transitions.
[2020-11-25 12:57:07,046 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 761
[2020-11-25 12:57:07,047 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 766
[2020-11-25 12:57:07,047 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2345 states and 2676 transitions.
[2020-11-25 12:57:07,051 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:57:07,051 INFO  L728         BuchiCegarLoop]: Abstraction has 2345 states and 2676 transitions.
[2020-11-25 12:57:07,053 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2345 states and 2676 transitions.
[2020-11-25 12:57:07,073 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2345 to 1685.
[2020-11-25 12:57:07,073 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1685 states.
[2020-11-25 12:57:07,076 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1685 states to 1685 states and 1820 transitions.
[2020-11-25 12:57:07,076 INFO  L751         BuchiCegarLoop]: Abstraction has 1685 states and 1820 transitions.
[2020-11-25 12:57:07,076 INFO  L631         BuchiCegarLoop]: Abstraction has 1685 states and 1820 transitions.
[2020-11-25 12:57:07,076 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 12:57:07,076 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1685 states and 1820 transitions.
[2020-11-25 12:57:07,080 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:57:07,080 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:57:07,080 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:57:07,082 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:57:07,082 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_BaseToken0 := false;
[L2]                 call_transfer_BaseToken0 := false;
[L2]     CALL        call main();
[L3006]              assume null == 0;
[L3007]  CALL        call this := FreshRefGenerator__success();
[L1275]              havoc newRef;
[L1276]              assume Alloc[newRef] == false;
[L1277]              Alloc[newRef] := true;
[L1278]              assume newRef != null;
[L3007]  RET         call this := FreshRefGenerator__success();
[L3008]              assume now >= 0;
[L3009]              assume DType[this] == CustomToken;
[L3010]              assume msgvalue_MSG == 0;
[L3011]              gas := gas - 53000;
[L3012]  CALL        call CustomToken_CustomToken(this, msgsender_MSG, msgvalue_MSG);
[L866]               havoc __exception;
[L867]               revert := false;
[L868]   COND FALSE  !(__exception)
[L890]   CALL        call CustomToken_CustomToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1929]  CALL        call BaseToken_BaseToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1481]  CALL        call BaseToken_BaseToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1457]              assume msgsender_MSG != null;
[L1458]              Balance[this] := 0;
[L1459]              name_BaseToken[this] := 1657376191;
[L1460]              symbol_BaseToken[this] := -853092303;
[L1461]              decimals_BaseToken[this] := 18;
[L1462]              totalSupply_BaseToken[this] := 525600000000000000000000000;
[L1463]              _totalLimit_BaseToken[this] := 100000000000000000000000000000000;
[L1464]              balanceOf_BaseToken[this] := zeroRefintArr();
[L1465]              sum_balanceOf0[this] := 0;
[L1466]              allowance_BaseToken[this] := zeroRefRefintArr();
[L1467]              sum_allowance1[this] := 0;
[L1481]  RET         call BaseToken_BaseToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1482]  COND FALSE  !(revert)
[L1929]  RET         call BaseToken_BaseToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1930]  COND FALSE  !(revert)
[L1933]  CALL        call CustomToken_CustomToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1903]              assume msgsender_MSG != null;
[L1904]              Balance[this] := 0;
[L1906]              __var_13 := ConstantToRef(506935249641133462427988555867660131141316463944);
[L1907]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_BaseToken[this][ConstantToRef(506935249641133462427988555867660131141316463944)];
[L1908]              balanceOf_BaseToken[this][ConstantToRef(506935249641133462427988555867660131141316463944)] := totalSupply_BaseToken[this];
[L1909]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_BaseToken[this][ConstantToRef(506935249641133462427988555867660131141316463944)];
[L1910]              assert { :EventEmitted "Transfer_CustomToken" } true;
[L1933]  RET         call CustomToken_CustomToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1934]  COND FALSE  !(revert)
[L890]   RET         call CustomToken_CustomToken__success(this, msgsender_MSG, msgvalue_MSG);
[L891]               assume !revert && gas >= 0;
[L3012]  RET         call CustomToken_CustomToken(this, msgsender_MSG, msgvalue_MSG);
[L3013]              assume !revert && gas >= 0;
[L3016]  CALL        call CorralChoice_CustomToken(this);
[L2881]              havoc msgsender_MSG;
[L2882]              havoc msgvalue_MSG;
[L2883]              havoc choice;
[L2884]              havoc __ret_0_name;
[L2885]              havoc __ret_0_symbol;
[L2886]              havoc __ret_0_decimals;
[L2887]              havoc __ret_0_totalSupply;
[L2888]              havoc __ret_0__totalLimit;
[L2889]              havoc arg483_s0;
[L2890]              havoc __ret_0_balanceOf;
[L2891]              havoc arg484_s0;
[L2892]              havoc arg485_s0;
[L2893]              havoc __ret_0_allowance;
[L2894]              havoc to_s284;
[L2895]              havoc value_s284;
[L2896]              havoc __ret_0_transfer;
[L2897]              havoc from_s321;
[L2898]              havoc to_s321;
[L2899]              havoc value_s321;
[L2900]              havoc __ret_0_transferFrom;
[L2901]              havoc spender_s357;
[L2902]              havoc value_s357;
[L2903]              havoc __ret_0_approve;
[L2904]              havoc spender_s406;
[L2905]              havoc addedValue_s406;
[L2906]              havoc __ret_0_increaseAllowance;
[L2907]              havoc spender_s455;
[L2908]              havoc subtractedValue_s455;
[L2909]              havoc __ret_0_decreaseAllowance;
[L2910]              havoc tmpNow;
[L2911]              havoc gas;
[L2912]              assume gas > 4000000 && gas <= 8000000;
[L2913]              tmpNow := now;
[L2914]              havoc now;
[L2915]              assume now > tmpNow;
[L2916]              assume msgsender_MSG != null;
[L2917]              assume DType[msgsender_MSG] != SafeMath;
[L2918]              assume DType[msgsender_MSG] != BaseToken;
[L2919]              assume DType[msgsender_MSG] != CustomToken;
[L2920]              Alloc[msgsender_MSG] := true;
[L2921]  COND FALSE  !(choice == 12)
[L2927]  COND FALSE  !(choice == 11)
[L2933]  COND FALSE  !(choice == 10)
[L2939]  COND FALSE  !(choice == 9)
[L2945]  COND FALSE  !(choice == 8)
[L2951]  COND FALSE  !(choice == 7)
[L2957]  COND FALSE  !(choice == 6)
[L2963]  COND TRUE   choice == 5
[L2964]              gas := gas - 21000;
[L2965]  COND TRUE   gas >= 0
[L2966]              assume value_s284 >= 0 && value_s284 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2967]              assume msgvalue_MSG == 0;
[L2968]  CALL        call __ret_0_transfer := transfer~address~uint256_BaseToken(this, msgsender_MSG, msgvalue_MSG, to_s284, value_s284);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s284 && value_s284 <= balanceOf_BaseToken[this][msgsender_MSG]) && value_s284 >= 0) && value_s284 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_BaseToken[this][to_s284] >= 0) && balanceOf_BaseToken[this][to_s284] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_BaseToken[this][msgsender_MSG] >= 0) && balanceOf_BaseToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BaseToken0 := true;
[L2]                 call_transfer_BaseToken0 := false;
[L2]                 revert := revert_hold;
[L218]               havoc __exception;
[L219]               revert := false;
[L220]   COND TRUE   __exception
[L221]               __tmp__Balance := Balance;
[L222]               __tmp__DType := DType;
[L223]               __tmp__Alloc := Alloc;
[L224]               __tmp__balance_ADDR := balance_ADDR;
[L225]               __tmp__M_Ref_int := M_Ref_int;
[L226]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L227]               __tmp__alloc_allowance_BaseToken_lvl0 := alloc_allowance_BaseToken_lvl0;
[L228]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L229]               __tmp__sum_allowance1 := sum_allowance1;
[L230]               __tmp__Length := Length;
[L231]               __tmp__now := now;
[L232]               __tmp__name_BaseToken := name_BaseToken;
[L233]               __tmp__symbol_BaseToken := symbol_BaseToken;
[L234]               __tmp__decimals_BaseToken := decimals_BaseToken;
[L235]               __tmp__totalSupply_BaseToken := totalSupply_BaseToken;
[L236]               __tmp___totalLimit_BaseToken := _totalLimit_BaseToken;
[L237]               __tmp__balanceOf_BaseToken := balanceOf_BaseToken;
[L238]               __tmp__allowance_BaseToken := allowance_BaseToken;
[L239]   CALL        call __ret_0_ := transfer~address~uint256_BaseToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s284, value_s284);
[L1599]  COND TRUE   __tmp__DType[this] == CustomToken
[L1600]  CALL        call _transfer~address~address~uint256_BaseToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s284, value_s284);
[L1492]              __var_1 := null;
[L1493]  COND TRUE   !(to_s217 != null)
[L1494]              revert := true;
[L1600]  RET         call _transfer~address~address~uint256_BaseToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s284, value_s284);
[L1601]  COND TRUE   revert
[L239]   RET         call __ret_0_ := transfer~address~uint256_BaseToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s284, value_s284);
[L240]               assume revert || gas < 0;
[L2968]  RET         call __ret_0_transfer := transfer~address~uint256_BaseToken(this, msgsender_MSG, msgvalue_MSG, to_s284, value_s284);
[L3016]  RET         call CorralChoice_CustomToken(this);

Loop:
[L3016]  CALL        call CorralChoice_CustomToken(this);
[L2881]              havoc msgsender_MSG;
[L2882]              havoc msgvalue_MSG;
[L2883]              havoc choice;
[L2884]              havoc __ret_0_name;
[L2885]              havoc __ret_0_symbol;
[L2886]              havoc __ret_0_decimals;
[L2887]              havoc __ret_0_totalSupply;
[L2888]              havoc __ret_0__totalLimit;
[L2889]              havoc arg483_s0;
[L2890]              havoc __ret_0_balanceOf;
[L2891]              havoc arg484_s0;
[L2892]              havoc arg485_s0;
[L2893]              havoc __ret_0_allowance;
[L2894]              havoc to_s284;
[L2895]              havoc value_s284;
[L2896]              havoc __ret_0_transfer;
[L2897]              havoc from_s321;
[L2898]              havoc to_s321;
[L2899]              havoc value_s321;
[L2900]              havoc __ret_0_transferFrom;
[L2901]              havoc spender_s357;
[L2902]              havoc value_s357;
[L2903]              havoc __ret_0_approve;
[L2904]              havoc spender_s406;
[L2905]              havoc addedValue_s406;
[L2906]              havoc __ret_0_increaseAllowance;
[L2907]              havoc spender_s455;
[L2908]              havoc subtractedValue_s455;
[L2909]              havoc __ret_0_decreaseAllowance;
[L2910]              havoc tmpNow;
[L2911]              havoc gas;
[L2912]              assume gas > 4000000 && gas <= 8000000;
[L2913]              tmpNow := now;
[L2914]              havoc now;
[L2915]              assume now > tmpNow;
[L2916]              assume msgsender_MSG != null;
[L2917]              assume DType[msgsender_MSG] != SafeMath;
[L2918]              assume DType[msgsender_MSG] != BaseToken;
[L2919]              assume DType[msgsender_MSG] != CustomToken;
[L2920]              Alloc[msgsender_MSG] := true;
[L2921]  COND FALSE  !(choice == 12)
[L2927]  COND FALSE  !(choice == 11)
[L2933]  COND FALSE  !(choice == 10)
[L2939]  COND FALSE  !(choice == 9)
[L2945]  COND FALSE  !(choice == 8)
[L2951]  COND FALSE  !(choice == 7)
[L2957]  COND FALSE  !(choice == 6)
[L2963]  COND TRUE   choice == 5
[L2964]              gas := gas - 21000;
[L2965]  COND TRUE   gas >= 0
[L2966]              assume value_s284 >= 0 && value_s284 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2967]              assume msgvalue_MSG == 0;
[L2968]  CALL        call __ret_0_transfer := transfer~address~uint256_BaseToken(this, msgsender_MSG, msgvalue_MSG, to_s284, value_s284);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s284 && value_s284 <= balanceOf_BaseToken[this][msgsender_MSG]) && value_s284 >= 0) && value_s284 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_BaseToken[this][to_s284] >= 0) && balanceOf_BaseToken[this][to_s284] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_BaseToken[this][msgsender_MSG] >= 0) && balanceOf_BaseToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BaseToken0 := true;
[L2]                 call_transfer_BaseToken0 := false;
[L2]                 revert := revert_hold;
[L218]               havoc __exception;
[L219]               revert := false;
[L220]   COND TRUE   __exception
[L221]               __tmp__Balance := Balance;
[L222]               __tmp__DType := DType;
[L223]               __tmp__Alloc := Alloc;
[L224]               __tmp__balance_ADDR := balance_ADDR;
[L225]               __tmp__M_Ref_int := M_Ref_int;
[L226]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L227]               __tmp__alloc_allowance_BaseToken_lvl0 := alloc_allowance_BaseToken_lvl0;
[L228]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L229]               __tmp__sum_allowance1 := sum_allowance1;
[L230]               __tmp__Length := Length;
[L231]               __tmp__now := now;
[L232]               __tmp__name_BaseToken := name_BaseToken;
[L233]               __tmp__symbol_BaseToken := symbol_BaseToken;
[L234]               __tmp__decimals_BaseToken := decimals_BaseToken;
[L235]               __tmp__totalSupply_BaseToken := totalSupply_BaseToken;
[L236]               __tmp___totalLimit_BaseToken := _totalLimit_BaseToken;
[L237]               __tmp__balanceOf_BaseToken := balanceOf_BaseToken;
[L238]               __tmp__allowance_BaseToken := allowance_BaseToken;
[L239]   CALL        call __ret_0_ := transfer~address~uint256_BaseToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s284, value_s284);
[L1599]  COND TRUE   __tmp__DType[this] == CustomToken
[L1600]  CALL        call _transfer~address~address~uint256_BaseToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s284, value_s284);
[L1492]              __var_1 := null;
[L1493]  COND TRUE   !(to_s217 != null)
[L1494]              revert := true;
[L1600]  RET         call _transfer~address~address~uint256_BaseToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s284, value_s284);
[L1601]  COND TRUE   revert
[L239]   RET         call __ret_0_ := transfer~address~uint256_BaseToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s284, value_s284);
[L240]               assume revert || gas < 0;
[L2968]  RET         call __ret_0_transfer := transfer~address~uint256_BaseToken(this, msgsender_MSG, msgvalue_MSG, to_s284, value_s284);
[L3016]  RET         call CorralChoice_CustomToken(this);

[2020-11-25 12:57:07,085 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:57:07,085 INFO  L82        PathProgramCache]: Analyzing trace with hash 1044689757, now seen corresponding path program 1 times
[2020-11-25 12:57:07,086 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:57:07,097 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:57:07,129 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 12:57:07,129 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 12:57:07,129 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 12:57:07,129 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 12:57:07,130 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 12:57:07,130 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 12:57:07,130 INFO  L87              Difference]: Start difference. First operand 1685 states and 1820 transitions. cyclomatic complexity: 137 Second operand 7 states.
[2020-11-25 12:57:07,196 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:57:07,196 INFO  L93              Difference]: Finished difference Result 1779 states and 1927 transitions.
[2020-11-25 12:57:07,197 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 12:57:07,197 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1779 states and 1927 transitions.
[2020-11-25 12:57:07,203 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:57:07,210 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1779 states to 1771 states and 1919 transitions.
[2020-11-25 12:57:07,210 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 593
[2020-11-25 12:57:07,210 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 593
[2020-11-25 12:57:07,210 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1771 states and 1919 transitions.
[2020-11-25 12:57:07,212 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:57:07,212 INFO  L728         BuchiCegarLoop]: Abstraction has 1771 states and 1919 transitions.
[2020-11-25 12:57:07,214 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1771 states and 1919 transitions.
[2020-11-25 12:57:07,229 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1771 to 1758.
[2020-11-25 12:57:07,229 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1758 states.
[2020-11-25 12:57:07,232 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1758 states to 1758 states and 1904 transitions.
[2020-11-25 12:57:07,232 INFO  L751         BuchiCegarLoop]: Abstraction has 1758 states and 1904 transitions.
[2020-11-25 12:57:07,232 INFO  L631         BuchiCegarLoop]: Abstraction has 1758 states and 1904 transitions.
[2020-11-25 12:57:07,232 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 12:57:07,232 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1758 states and 1904 transitions.
[2020-11-25 12:57:07,236 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:57:07,236 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:57:07,236 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:57:07,238 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:57:07,238 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_BaseToken0 := false;
[L2]                 call_transfer_BaseToken0 := false;
[L2]     CALL        call main();
[L3006]              assume null == 0;
[L3007]  CALL        call this := FreshRefGenerator__success();
[L1275]              havoc newRef;
[L1276]              assume Alloc[newRef] == false;
[L1277]              Alloc[newRef] := true;
[L1278]              assume newRef != null;
[L3007]  RET         call this := FreshRefGenerator__success();
[L3008]              assume now >= 0;
[L3009]              assume DType[this] == CustomToken;
[L3010]              assume msgvalue_MSG == 0;
[L3011]              gas := gas - 53000;
[L3012]  CALL        call CustomToken_CustomToken(this, msgsender_MSG, msgvalue_MSG);
[L866]               havoc __exception;
[L867]               revert := false;
[L868]   COND FALSE  !(__exception)
[L890]   CALL        call CustomToken_CustomToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1929]  CALL        call BaseToken_BaseToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1481]  CALL        call BaseToken_BaseToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1457]              assume msgsender_MSG != null;
[L1458]              Balance[this] := 0;
[L1459]              name_BaseToken[this] := 1657376191;
[L1460]              symbol_BaseToken[this] := -853092303;
[L1461]              decimals_BaseToken[this] := 18;
[L1462]              totalSupply_BaseToken[this] := 525600000000000000000000000;
[L1463]              _totalLimit_BaseToken[this] := 100000000000000000000000000000000;
[L1464]              balanceOf_BaseToken[this] := zeroRefintArr();
[L1465]              sum_balanceOf0[this] := 0;
[L1466]              allowance_BaseToken[this] := zeroRefRefintArr();
[L1467]              sum_allowance1[this] := 0;
[L1481]  RET         call BaseToken_BaseToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1482]  COND FALSE  !(revert)
[L1929]  RET         call BaseToken_BaseToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1930]  COND FALSE  !(revert)
[L1933]  CALL        call CustomToken_CustomToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1903]              assume msgsender_MSG != null;
[L1904]              Balance[this] := 0;
[L1906]              __var_13 := ConstantToRef(506935249641133462427988555867660131141316463944);
[L1907]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_BaseToken[this][ConstantToRef(506935249641133462427988555867660131141316463944)];
[L1908]              balanceOf_BaseToken[this][ConstantToRef(506935249641133462427988555867660131141316463944)] := totalSupply_BaseToken[this];
[L1909]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_BaseToken[this][ConstantToRef(506935249641133462427988555867660131141316463944)];
[L1910]              assert { :EventEmitted "Transfer_CustomToken" } true;
[L1933]  RET         call CustomToken_CustomToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1934]  COND FALSE  !(revert)
[L890]   RET         call CustomToken_CustomToken__success(this, msgsender_MSG, msgvalue_MSG);
[L891]               assume !revert && gas >= 0;
[L3012]  RET         call CustomToken_CustomToken(this, msgsender_MSG, msgvalue_MSG);
[L3013]              assume !revert && gas >= 0;
[L3016]  CALL        call CorralChoice_CustomToken(this);
[L2881]              havoc msgsender_MSG;
[L2882]              havoc msgvalue_MSG;
[L2883]              havoc choice;
[L2884]              havoc __ret_0_name;
[L2885]              havoc __ret_0_symbol;
[L2886]              havoc __ret_0_decimals;
[L2887]              havoc __ret_0_totalSupply;
[L2888]              havoc __ret_0__totalLimit;
[L2889]              havoc arg483_s0;
[L2890]              havoc __ret_0_balanceOf;
[L2891]              havoc arg484_s0;
[L2892]              havoc arg485_s0;
[L2893]              havoc __ret_0_allowance;
[L2894]              havoc to_s284;
[L2895]              havoc value_s284;
[L2896]              havoc __ret_0_transfer;
[L2897]              havoc from_s321;
[L2898]              havoc to_s321;
[L2899]              havoc value_s321;
[L2900]              havoc __ret_0_transferFrom;
[L2901]              havoc spender_s357;
[L2902]              havoc value_s357;
[L2903]              havoc __ret_0_approve;
[L2904]              havoc spender_s406;
[L2905]              havoc addedValue_s406;
[L2906]              havoc __ret_0_increaseAllowance;
[L2907]              havoc spender_s455;
[L2908]              havoc subtractedValue_s455;
[L2909]              havoc __ret_0_decreaseAllowance;
[L2910]              havoc tmpNow;
[L2911]              havoc gas;
[L2912]              assume gas > 4000000 && gas <= 8000000;
[L2913]              tmpNow := now;
[L2914]              havoc now;
[L2915]              assume now > tmpNow;
[L2916]              assume msgsender_MSG != null;
[L2917]              assume DType[msgsender_MSG] != SafeMath;
[L2918]              assume DType[msgsender_MSG] != BaseToken;
[L2919]              assume DType[msgsender_MSG] != CustomToken;
[L2920]              Alloc[msgsender_MSG] := true;
[L2921]  COND FALSE  !(choice == 12)
[L2927]  COND FALSE  !(choice == 11)
[L2933]  COND FALSE  !(choice == 10)
[L2939]  COND FALSE  !(choice == 9)
[L2945]  COND FALSE  !(choice == 8)
[L2951]  COND FALSE  !(choice == 7)
[L2957]  COND FALSE  !(choice == 6)
[L2963]  COND TRUE   choice == 5
[L2964]              gas := gas - 21000;
[L2965]  COND TRUE   gas >= 0
[L2966]              assume value_s284 >= 0 && value_s284 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2967]              assume msgvalue_MSG == 0;
[L2968]  CALL        call __ret_0_transfer := transfer~address~uint256_BaseToken(this, msgsender_MSG, msgvalue_MSG, to_s284, value_s284);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s284 && value_s284 <= balanceOf_BaseToken[this][msgsender_MSG]) && value_s284 >= 0) && value_s284 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_BaseToken[this][to_s284] >= 0) && balanceOf_BaseToken[this][to_s284] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_BaseToken[this][msgsender_MSG] >= 0) && balanceOf_BaseToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BaseToken0 := true;
[L2]                 call_transfer_BaseToken0 := false;
[L2]                 revert := revert_hold;
[L218]               havoc __exception;
[L219]               revert := false;
[L220]   COND TRUE   __exception
[L221]               __tmp__Balance := Balance;
[L222]               __tmp__DType := DType;
[L223]               __tmp__Alloc := Alloc;
[L224]               __tmp__balance_ADDR := balance_ADDR;
[L225]               __tmp__M_Ref_int := M_Ref_int;
[L226]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L227]               __tmp__alloc_allowance_BaseToken_lvl0 := alloc_allowance_BaseToken_lvl0;
[L228]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L229]               __tmp__sum_allowance1 := sum_allowance1;
[L230]               __tmp__Length := Length;
[L231]               __tmp__now := now;
[L232]               __tmp__name_BaseToken := name_BaseToken;
[L233]               __tmp__symbol_BaseToken := symbol_BaseToken;
[L234]               __tmp__decimals_BaseToken := decimals_BaseToken;
[L235]               __tmp__totalSupply_BaseToken := totalSupply_BaseToken;
[L236]               __tmp___totalLimit_BaseToken := _totalLimit_BaseToken;
[L237]               __tmp__balanceOf_BaseToken := balanceOf_BaseToken;
[L238]               __tmp__allowance_BaseToken := allowance_BaseToken;
[L239]   CALL        call __ret_0_ := transfer~address~uint256_BaseToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s284, value_s284);
[L1599]  COND TRUE   __tmp__DType[this] == CustomToken
[L1600]  CALL        call _transfer~address~address~uint256_BaseToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s284, value_s284);
[L1492]              __var_1 := null;
[L1493]  COND FALSE  !(!(to_s217 != null))
[L1497]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balanceOf_BaseToken[this][from_s217], value_s217);
[L1372]  COND TRUE   !(b_s82 <= a_s82)
[L1373]              revert := true;
[L1497]  RET         call __var_2 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balanceOf_BaseToken[this][from_s217], value_s217);
[L1498]  COND TRUE   revert
[L1600]  RET         call _transfer~address~address~uint256_BaseToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s284, value_s284);
[L1601]  COND TRUE   revert
[L239]   RET         call __ret_0_ := transfer~address~uint256_BaseToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s284, value_s284);
[L240]               assume revert || gas < 0;
[L2968]  RET         call __ret_0_transfer := transfer~address~uint256_BaseToken(this, msgsender_MSG, msgvalue_MSG, to_s284, value_s284);
[L3016]  RET         call CorralChoice_CustomToken(this);

Loop:
[L3016]  CALL        call CorralChoice_CustomToken(this);
[L2881]              havoc msgsender_MSG;
[L2882]              havoc msgvalue_MSG;
[L2883]              havoc choice;
[L2884]              havoc __ret_0_name;
[L2885]              havoc __ret_0_symbol;
[L2886]              havoc __ret_0_decimals;
[L2887]              havoc __ret_0_totalSupply;
[L2888]              havoc __ret_0__totalLimit;
[L2889]              havoc arg483_s0;
[L2890]              havoc __ret_0_balanceOf;
[L2891]              havoc arg484_s0;
[L2892]              havoc arg485_s0;
[L2893]              havoc __ret_0_allowance;
[L2894]              havoc to_s284;
[L2895]              havoc value_s284;
[L2896]              havoc __ret_0_transfer;
[L2897]              havoc from_s321;
[L2898]              havoc to_s321;
[L2899]              havoc value_s321;
[L2900]              havoc __ret_0_transferFrom;
[L2901]              havoc spender_s357;
[L2902]              havoc value_s357;
[L2903]              havoc __ret_0_approve;
[L2904]              havoc spender_s406;
[L2905]              havoc addedValue_s406;
[L2906]              havoc __ret_0_increaseAllowance;
[L2907]              havoc spender_s455;
[L2908]              havoc subtractedValue_s455;
[L2909]              havoc __ret_0_decreaseAllowance;
[L2910]              havoc tmpNow;
[L2911]              havoc gas;
[L2912]              assume gas > 4000000 && gas <= 8000000;
[L2913]              tmpNow := now;
[L2914]              havoc now;
[L2915]              assume now > tmpNow;
[L2916]              assume msgsender_MSG != null;
[L2917]              assume DType[msgsender_MSG] != SafeMath;
[L2918]              assume DType[msgsender_MSG] != BaseToken;
[L2919]              assume DType[msgsender_MSG] != CustomToken;
[L2920]              Alloc[msgsender_MSG] := true;
[L2921]  COND FALSE  !(choice == 12)
[L2927]  COND FALSE  !(choice == 11)
[L2933]  COND FALSE  !(choice == 10)
[L2939]  COND FALSE  !(choice == 9)
[L2945]  COND FALSE  !(choice == 8)
[L2951]  COND FALSE  !(choice == 7)
[L2957]  COND FALSE  !(choice == 6)
[L2963]  COND TRUE   choice == 5
[L2964]              gas := gas - 21000;
[L2965]  COND TRUE   gas >= 0
[L2966]              assume value_s284 >= 0 && value_s284 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2967]              assume msgvalue_MSG == 0;
[L2968]  CALL        call __ret_0_transfer := transfer~address~uint256_BaseToken(this, msgsender_MSG, msgvalue_MSG, to_s284, value_s284);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s284 && value_s284 <= balanceOf_BaseToken[this][msgsender_MSG]) && value_s284 >= 0) && value_s284 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_BaseToken[this][to_s284] >= 0) && balanceOf_BaseToken[this][to_s284] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_BaseToken[this][msgsender_MSG] >= 0) && balanceOf_BaseToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BaseToken0 := true;
[L2]                 call_transfer_BaseToken0 := false;
[L2]                 revert := revert_hold;
[L218]               havoc __exception;
[L219]               revert := false;
[L220]   COND TRUE   __exception
[L221]               __tmp__Balance := Balance;
[L222]               __tmp__DType := DType;
[L223]               __tmp__Alloc := Alloc;
[L224]               __tmp__balance_ADDR := balance_ADDR;
[L225]               __tmp__M_Ref_int := M_Ref_int;
[L226]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L227]               __tmp__alloc_allowance_BaseToken_lvl0 := alloc_allowance_BaseToken_lvl0;
[L228]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L229]               __tmp__sum_allowance1 := sum_allowance1;
[L230]               __tmp__Length := Length;
[L231]               __tmp__now := now;
[L232]               __tmp__name_BaseToken := name_BaseToken;
[L233]               __tmp__symbol_BaseToken := symbol_BaseToken;
[L234]               __tmp__decimals_BaseToken := decimals_BaseToken;
[L235]               __tmp__totalSupply_BaseToken := totalSupply_BaseToken;
[L236]               __tmp___totalLimit_BaseToken := _totalLimit_BaseToken;
[L237]               __tmp__balanceOf_BaseToken := balanceOf_BaseToken;
[L238]               __tmp__allowance_BaseToken := allowance_BaseToken;
[L239]   CALL        call __ret_0_ := transfer~address~uint256_BaseToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s284, value_s284);
[L1599]  COND TRUE   __tmp__DType[this] == CustomToken
[L1600]  CALL        call _transfer~address~address~uint256_BaseToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s284, value_s284);
[L1492]              __var_1 := null;
[L1493]  COND FALSE  !(!(to_s217 != null))
[L1497]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balanceOf_BaseToken[this][from_s217], value_s217);
[L1372]  COND TRUE   !(b_s82 <= a_s82)
[L1373]              revert := true;
[L1497]  RET         call __var_2 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balanceOf_BaseToken[this][from_s217], value_s217);
[L1498]  COND TRUE   revert
[L1600]  RET         call _transfer~address~address~uint256_BaseToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s284, value_s284);
[L1601]  COND TRUE   revert
[L239]   RET         call __ret_0_ := transfer~address~uint256_BaseToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s284, value_s284);
[L240]               assume revert || gas < 0;
[L2968]  RET         call __ret_0_transfer := transfer~address~uint256_BaseToken(this, msgsender_MSG, msgvalue_MSG, to_s284, value_s284);
[L3016]  RET         call CorralChoice_CustomToken(this);

[2020-11-25 12:57:07,241 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:57:07,241 INFO  L82        PathProgramCache]: Analyzing trace with hash -1468798796, now seen corresponding path program 1 times
[2020-11-25 12:57:07,241 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:57:07,250 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:57:07,346 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 12:57:07,347 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 12:57:07,347 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [8] imperfect sequences [] total 8
[2020-11-25 12:57:07,348 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 12:57:07,348 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 12:57:07,348 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 12:57:07,348 INFO  L87              Difference]: Start difference. First operand 1758 states and 1904 transitions. cyclomatic complexity: 148 Second operand 8 states.
[2020-11-25 12:57:08,109 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:57:08,109 INFO  L93              Difference]: Finished difference Result 1877 states and 2038 transitions.
[2020-11-25 12:57:08,110 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 12:57:08,110 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1877 states and 2038 transitions.
[2020-11-25 12:57:08,115 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 12:57:08,119 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1877 states to 1877 states and 2038 transitions.
[2020-11-25 12:57:08,120 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 649
[2020-11-25 12:57:08,120 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 649
[2020-11-25 12:57:08,120 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1877 states and 2038 transitions.
[2020-11-25 12:57:08,122 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:57:08,122 INFO  L728         BuchiCegarLoop]: Abstraction has 1877 states and 2038 transitions.
[2020-11-25 12:57:08,123 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1877 states and 2038 transitions.
[2020-11-25 12:57:08,135 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1877 to 1758.
[2020-11-25 12:57:08,136 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1758 states.
[2020-11-25 12:57:08,137 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1758 states to 1758 states and 1904 transitions.
[2020-11-25 12:57:08,137 INFO  L751         BuchiCegarLoop]: Abstraction has 1758 states and 1904 transitions.
[2020-11-25 12:57:08,137 INFO  L631         BuchiCegarLoop]: Abstraction has 1758 states and 1904 transitions.
[2020-11-25 12:57:08,138 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 12:57:08,138 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1758 states and 1904 transitions.
[2020-11-25 12:57:08,140 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:57:08,141 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:57:08,141 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:57:08,142 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:57:08,142 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_BaseToken0 := false;
[L2]                 call_transfer_BaseToken0 := false;
[L2]     CALL        call main();
[L3006]              assume null == 0;
[L3007]  CALL        call this := FreshRefGenerator__success();
[L1275]              havoc newRef;
[L1276]              assume Alloc[newRef] == false;
[L1277]              Alloc[newRef] := true;
[L1278]              assume newRef != null;
[L3007]  RET         call this := FreshRefGenerator__success();
[L3008]              assume now >= 0;
[L3009]              assume DType[this] == CustomToken;
[L3010]              assume msgvalue_MSG == 0;
[L3011]              gas := gas - 53000;
[L3012]  CALL        call CustomToken_CustomToken(this, msgsender_MSG, msgvalue_MSG);
[L866]               havoc __exception;
[L867]               revert := false;
[L868]   COND FALSE  !(__exception)
[L890]   CALL        call CustomToken_CustomToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1929]  CALL        call BaseToken_BaseToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1481]  CALL        call BaseToken_BaseToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1457]              assume msgsender_MSG != null;
[L1458]              Balance[this] := 0;
[L1459]              name_BaseToken[this] := 1657376191;
[L1460]              symbol_BaseToken[this] := -853092303;
[L1461]              decimals_BaseToken[this] := 18;
[L1462]              totalSupply_BaseToken[this] := 525600000000000000000000000;
[L1463]              _totalLimit_BaseToken[this] := 100000000000000000000000000000000;
[L1464]              balanceOf_BaseToken[this] := zeroRefintArr();
[L1465]              sum_balanceOf0[this] := 0;
[L1466]              allowance_BaseToken[this] := zeroRefRefintArr();
[L1467]              sum_allowance1[this] := 0;
[L1481]  RET         call BaseToken_BaseToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1482]  COND FALSE  !(revert)
[L1929]  RET         call BaseToken_BaseToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1930]  COND FALSE  !(revert)
[L1933]  CALL        call CustomToken_CustomToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1903]              assume msgsender_MSG != null;
[L1904]              Balance[this] := 0;
[L1906]              __var_13 := ConstantToRef(506935249641133462427988555867660131141316463944);
[L1907]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_BaseToken[this][ConstantToRef(506935249641133462427988555867660131141316463944)];
[L1908]              balanceOf_BaseToken[this][ConstantToRef(506935249641133462427988555867660131141316463944)] := totalSupply_BaseToken[this];
[L1909]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_BaseToken[this][ConstantToRef(506935249641133462427988555867660131141316463944)];
[L1910]              assert { :EventEmitted "Transfer_CustomToken" } true;
[L1933]  RET         call CustomToken_CustomToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1934]  COND FALSE  !(revert)
[L890]   RET         call CustomToken_CustomToken__success(this, msgsender_MSG, msgvalue_MSG);
[L891]               assume !revert && gas >= 0;
[L3012]  RET         call CustomToken_CustomToken(this, msgsender_MSG, msgvalue_MSG);
[L3013]              assume !revert && gas >= 0;
[L3016]  CALL        call CorralChoice_CustomToken(this);
[L2881]              havoc msgsender_MSG;
[L2882]              havoc msgvalue_MSG;
[L2883]              havoc choice;
[L2884]              havoc __ret_0_name;
[L2885]              havoc __ret_0_symbol;
[L2886]              havoc __ret_0_decimals;
[L2887]              havoc __ret_0_totalSupply;
[L2888]              havoc __ret_0__totalLimit;
[L2889]              havoc arg483_s0;
[L2890]              havoc __ret_0_balanceOf;
[L2891]              havoc arg484_s0;
[L2892]              havoc arg485_s0;
[L2893]              havoc __ret_0_allowance;
[L2894]              havoc to_s284;
[L2895]              havoc value_s284;
[L2896]              havoc __ret_0_transfer;
[L2897]              havoc from_s321;
[L2898]              havoc to_s321;
[L2899]              havoc value_s321;
[L2900]              havoc __ret_0_transferFrom;
[L2901]              havoc spender_s357;
[L2902]              havoc value_s357;
[L2903]              havoc __ret_0_approve;
[L2904]              havoc spender_s406;
[L2905]              havoc addedValue_s406;
[L2906]              havoc __ret_0_increaseAllowance;
[L2907]              havoc spender_s455;
[L2908]              havoc subtractedValue_s455;
[L2909]              havoc __ret_0_decreaseAllowance;
[L2910]              havoc tmpNow;
[L2911]              havoc gas;
[L2912]              assume gas > 4000000 && gas <= 8000000;
[L2913]              tmpNow := now;
[L2914]              havoc now;
[L2915]              assume now > tmpNow;
[L2916]              assume msgsender_MSG != null;
[L2917]              assume DType[msgsender_MSG] != SafeMath;
[L2918]              assume DType[msgsender_MSG] != BaseToken;
[L2919]              assume DType[msgsender_MSG] != CustomToken;
[L2920]              Alloc[msgsender_MSG] := true;
[L2921]  COND FALSE  !(choice == 12)
[L2927]  COND FALSE  !(choice == 11)
[L2933]  COND FALSE  !(choice == 10)
[L2939]  COND FALSE  !(choice == 9)
[L2945]  COND FALSE  !(choice == 8)
[L2951]  COND FALSE  !(choice == 7)
[L2957]  COND FALSE  !(choice == 6)
[L2963]  COND TRUE   choice == 5
[L2964]              gas := gas - 21000;
[L2965]  COND TRUE   gas >= 0
[L2966]              assume value_s284 >= 0 && value_s284 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2967]              assume msgvalue_MSG == 0;
[L2968]  CALL        call __ret_0_transfer := transfer~address~uint256_BaseToken(this, msgsender_MSG, msgvalue_MSG, to_s284, value_s284);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s284 && value_s284 <= balanceOf_BaseToken[this][msgsender_MSG]) && value_s284 >= 0) && value_s284 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_BaseToken[this][to_s284] >= 0) && balanceOf_BaseToken[this][to_s284] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_BaseToken[this][msgsender_MSG] >= 0) && balanceOf_BaseToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BaseToken0 := true;
[L2]                 call_transfer_BaseToken0 := false;
[L2]                 revert := revert_hold;
[L218]               havoc __exception;
[L219]               revert := false;
[L220]   COND FALSE  !(__exception)
[L242]   CALL        call __ret_0_ := transfer~address~uint256_BaseToken__success(this, msgsender_MSG, msgvalue_MSG, to_s284, value_s284);
[L1618]  COND TRUE   DType[this] == CustomToken
[L1619]  CALL        call _transfer~address~address~uint256_BaseToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s284, value_s284);
[L1518]              __var_1 := null;
[L1519]  COND FALSE  !(!(to_s217 != null))
[L1523]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_BaseToken[this][from_s217], value_s217);
[L1384]  COND FALSE  !(!(b_s82 <= a_s82))
[L1388]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1389]              __ret_0_ := c_s82;
[L1523]  RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_BaseToken[this][from_s217], value_s217);
[L1524]  COND FALSE  !(revert)
[L1527]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_BaseToken[this][from_s217];
[L1528]              balanceOf_BaseToken[this][from_s217] := __var_2;
[L1529]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_BaseToken[this][from_s217];
[L1530]  CALL        call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_BaseToken[this][to_s217], value_s217);
[L1408]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1409]  COND FALSE  !(!(c_s106 >= a_s106))
[L1413]              __ret_0_ := c_s106;
[L1530]  RET         call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_BaseToken[this][to_s217], value_s217);
[L1531]  COND FALSE  !(revert)
[L1534]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_BaseToken[this][to_s217];
[L1535]              balanceOf_BaseToken[this][to_s217] := __var_3;
[L1536]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_BaseToken[this][to_s217];
[L1537]              assert { :EventEmitted "Transfer_BaseToken" } true;
[L1619]  RET         call _transfer~address~address~uint256_BaseToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s284, value_s284);
[L1620]  COND FALSE  !(revert)
[L1631]              __ret_0_ := true;
[L242]   RET         call __ret_0_ := transfer~address~uint256_BaseToken__success(this, msgsender_MSG, msgvalue_MSG, to_s284, value_s284);
[L243]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((__ret_0_ == true && totalSupply_BaseToken[this] == old(totalSupply_BaseToken[this])) && balanceOf_BaseToken[this] == old(balanceOf_BaseToken[this])) && allowance_BaseToken[this] == old(allowance_BaseToken[this]));
[L2]                 revert := revert_hold;
[L2968]  RET         call __ret_0_transfer := transfer~address~uint256_BaseToken(this, msgsender_MSG, msgvalue_MSG, to_s284, value_s284);
[L3016]  RET         call CorralChoice_CustomToken(this);

Loop:
[L3016]  CALL        call CorralChoice_CustomToken(this);
[L2881]              havoc msgsender_MSG;
[L2882]              havoc msgvalue_MSG;
[L2883]              havoc choice;
[L2884]              havoc __ret_0_name;
[L2885]              havoc __ret_0_symbol;
[L2886]              havoc __ret_0_decimals;
[L2887]              havoc __ret_0_totalSupply;
[L2888]              havoc __ret_0__totalLimit;
[L2889]              havoc arg483_s0;
[L2890]              havoc __ret_0_balanceOf;
[L2891]              havoc arg484_s0;
[L2892]              havoc arg485_s0;
[L2893]              havoc __ret_0_allowance;
[L2894]              havoc to_s284;
[L2895]              havoc value_s284;
[L2896]              havoc __ret_0_transfer;
[L2897]              havoc from_s321;
[L2898]              havoc to_s321;
[L2899]              havoc value_s321;
[L2900]              havoc __ret_0_transferFrom;
[L2901]              havoc spender_s357;
[L2902]              havoc value_s357;
[L2903]              havoc __ret_0_approve;
[L2904]              havoc spender_s406;
[L2905]              havoc addedValue_s406;
[L2906]              havoc __ret_0_increaseAllowance;
[L2907]              havoc spender_s455;
[L2908]              havoc subtractedValue_s455;
[L2909]              havoc __ret_0_decreaseAllowance;
[L2910]              havoc tmpNow;
[L2911]              havoc gas;
[L2912]              assume gas > 4000000 && gas <= 8000000;
[L2913]              tmpNow := now;
[L2914]              havoc now;
[L2915]              assume now > tmpNow;
[L2916]              assume msgsender_MSG != null;
[L2917]              assume DType[msgsender_MSG] != SafeMath;
[L2918]              assume DType[msgsender_MSG] != BaseToken;
[L2919]              assume DType[msgsender_MSG] != CustomToken;
[L2920]              Alloc[msgsender_MSG] := true;
[L2921]  COND FALSE  !(choice == 12)
[L2927]  COND FALSE  !(choice == 11)
[L2933]  COND FALSE  !(choice == 10)
[L2939]  COND FALSE  !(choice == 9)
[L2945]  COND FALSE  !(choice == 8)
[L2951]  COND FALSE  !(choice == 7)
[L2957]  COND FALSE  !(choice == 6)
[L2963]  COND TRUE   choice == 5
[L2964]              gas := gas - 21000;
[L2965]  COND TRUE   gas >= 0
[L2966]              assume value_s284 >= 0 && value_s284 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2967]              assume msgvalue_MSG == 0;
[L2968]  CALL        call __ret_0_transfer := transfer~address~uint256_BaseToken(this, msgsender_MSG, msgvalue_MSG, to_s284, value_s284);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s284 && value_s284 <= balanceOf_BaseToken[this][msgsender_MSG]) && value_s284 >= 0) && value_s284 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_BaseToken[this][to_s284] >= 0) && balanceOf_BaseToken[this][to_s284] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_BaseToken[this][msgsender_MSG] >= 0) && balanceOf_BaseToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BaseToken0 := true;
[L2]                 call_transfer_BaseToken0 := false;
[L2]                 revert := revert_hold;
[L218]               havoc __exception;
[L219]               revert := false;
[L220]   COND FALSE  !(__exception)
[L242]   CALL        call __ret_0_ := transfer~address~uint256_BaseToken__success(this, msgsender_MSG, msgvalue_MSG, to_s284, value_s284);
[L1618]  COND TRUE   DType[this] == CustomToken
[L1619]  CALL        call _transfer~address~address~uint256_BaseToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s284, value_s284);
[L1518]              __var_1 := null;
[L1519]  COND FALSE  !(!(to_s217 != null))
[L1523]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_BaseToken[this][from_s217], value_s217);
[L1384]  COND FALSE  !(!(b_s82 <= a_s82))
[L1388]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1389]              __ret_0_ := c_s82;
[L1523]  RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_BaseToken[this][from_s217], value_s217);
[L1524]  COND FALSE  !(revert)
[L1527]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_BaseToken[this][from_s217];
[L1528]              balanceOf_BaseToken[this][from_s217] := __var_2;
[L1529]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_BaseToken[this][from_s217];
[L1530]  CALL        call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_BaseToken[this][to_s217], value_s217);
[L1408]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1409]  COND FALSE  !(!(c_s106 >= a_s106))
[L1413]              __ret_0_ := c_s106;
[L1530]  RET         call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_BaseToken[this][to_s217], value_s217);
[L1531]  COND FALSE  !(revert)
[L1534]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_BaseToken[this][to_s217];
[L1535]              balanceOf_BaseToken[this][to_s217] := __var_3;
[L1536]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_BaseToken[this][to_s217];
[L1537]              assert { :EventEmitted "Transfer_BaseToken" } true;
[L1619]  RET         call _transfer~address~address~uint256_BaseToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s284, value_s284);
[L1620]  COND FALSE  !(revert)
[L1631]              __ret_0_ := true;
[L242]   RET         call __ret_0_ := transfer~address~uint256_BaseToken__success(this, msgsender_MSG, msgvalue_MSG, to_s284, value_s284);
[L243]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((__ret_0_ == true && totalSupply_BaseToken[this] == old(totalSupply_BaseToken[this])) && balanceOf_BaseToken[this] == old(balanceOf_BaseToken[this])) && allowance_BaseToken[this] == old(allowance_BaseToken[this]));
[L2]                 revert := revert_hold;
[L2968]  RET         call __ret_0_transfer := transfer~address~uint256_BaseToken(this, msgsender_MSG, msgvalue_MSG, to_s284, value_s284);
[L3016]  RET         call CorralChoice_CustomToken(this);

[2020-11-25 12:57:08,145 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:57:08,145 INFO  L82        PathProgramCache]: Analyzing trace with hash 61988858, now seen corresponding path program 1 times
[2020-11-25 12:57:08,146 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:57:08,181 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:57:09,278 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 12:57:09,279 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 12:57:09,279 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [31] imperfect sequences [] total 31
[2020-11-25 12:57:09,279 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 12:57:09,279 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 32 interpolants.
[2020-11-25 12:57:09,280 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=87, Invalid=905, Unknown=0, NotChecked=0, Total=992
[2020-11-25 12:57:09,280 INFO  L87              Difference]: Start difference. First operand 1758 states and 1904 transitions. cyclomatic complexity: 148 Second operand 32 states.
[2020-11-25 12:57:14,730 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:57:14,730 INFO  L93              Difference]: Finished difference Result 1810 states and 1973 transitions.
[2020-11-25 12:57:14,730 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 32 states. 
[2020-11-25 12:57:14,730 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1810 states and 1973 transitions.
[2020-11-25 12:57:14,735 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 12:57:14,739 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1810 states to 1810 states and 1973 transitions.
[2020-11-25 12:57:14,739 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 610
[2020-11-25 12:57:14,740 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 610
[2020-11-25 12:57:14,740 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1810 states and 1973 transitions.
[2020-11-25 12:57:14,741 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:57:14,742 INFO  L728         BuchiCegarLoop]: Abstraction has 1810 states and 1973 transitions.
[2020-11-25 12:57:14,743 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1810 states and 1973 transitions.
[2020-11-25 12:57:14,755 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1810 to 1799.
[2020-11-25 12:57:14,756 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1799 states.
[2020-11-25 12:57:14,757 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1799 states to 1799 states and 1954 transitions.
[2020-11-25 12:57:14,758 INFO  L751         BuchiCegarLoop]: Abstraction has 1799 states and 1954 transitions.
[2020-11-25 12:57:14,758 INFO  L631         BuchiCegarLoop]: Abstraction has 1799 states and 1954 transitions.
[2020-11-25 12:57:14,758 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 12:57:14,758 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1799 states and 1954 transitions.
[2020-11-25 12:57:14,761 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 12:57:14,761 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:57:14,761 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:57:14,762 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:57:14,763 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_BaseToken0 := false;
[L2]                 call_transfer_BaseToken0 := false;
[L2]     CALL        call main();
[L3006]              assume null == 0;
[L3007]  CALL        call this := FreshRefGenerator__success();
[L1275]              havoc newRef;
[L1276]              assume Alloc[newRef] == false;
[L1277]              Alloc[newRef] := true;
[L1278]              assume newRef != null;
[L3007]  RET         call this := FreshRefGenerator__success();
[L3008]              assume now >= 0;
[L3009]              assume DType[this] == CustomToken;
[L3010]              assume msgvalue_MSG == 0;
[L3011]              gas := gas - 53000;
[L3012]  CALL        call CustomToken_CustomToken(this, msgsender_MSG, msgvalue_MSG);
[L866]               havoc __exception;
[L867]               revert := false;
[L868]   COND FALSE  !(__exception)
[L890]   CALL        call CustomToken_CustomToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1929]  CALL        call BaseToken_BaseToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1481]  CALL        call BaseToken_BaseToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1457]              assume msgsender_MSG != null;
[L1458]              Balance[this] := 0;
[L1459]              name_BaseToken[this] := 1657376191;
[L1460]              symbol_BaseToken[this] := -853092303;
[L1461]              decimals_BaseToken[this] := 18;
[L1462]              totalSupply_BaseToken[this] := 525600000000000000000000000;
[L1463]              _totalLimit_BaseToken[this] := 100000000000000000000000000000000;
[L1464]              balanceOf_BaseToken[this] := zeroRefintArr();
[L1465]              sum_balanceOf0[this] := 0;
[L1466]              allowance_BaseToken[this] := zeroRefRefintArr();
[L1467]              sum_allowance1[this] := 0;
[L1481]  RET         call BaseToken_BaseToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1482]  COND FALSE  !(revert)
[L1929]  RET         call BaseToken_BaseToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1930]  COND FALSE  !(revert)
[L1933]  CALL        call CustomToken_CustomToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1903]              assume msgsender_MSG != null;
[L1904]              Balance[this] := 0;
[L1906]              __var_13 := ConstantToRef(506935249641133462427988555867660131141316463944);
[L1907]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_BaseToken[this][ConstantToRef(506935249641133462427988555867660131141316463944)];
[L1908]              balanceOf_BaseToken[this][ConstantToRef(506935249641133462427988555867660131141316463944)] := totalSupply_BaseToken[this];
[L1909]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_BaseToken[this][ConstantToRef(506935249641133462427988555867660131141316463944)];
[L1910]              assert { :EventEmitted "Transfer_CustomToken" } true;
[L1933]  RET         call CustomToken_CustomToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1934]  COND FALSE  !(revert)
[L890]   RET         call CustomToken_CustomToken__success(this, msgsender_MSG, msgvalue_MSG);
[L891]               assume !revert && gas >= 0;
[L3012]  RET         call CustomToken_CustomToken(this, msgsender_MSG, msgvalue_MSG);
[L3013]              assume !revert && gas >= 0;
[L3016]  CALL        call CorralChoice_CustomToken(this);
[L2881]              havoc msgsender_MSG;
[L2882]              havoc msgvalue_MSG;
[L2883]              havoc choice;
[L2884]              havoc __ret_0_name;
[L2885]              havoc __ret_0_symbol;
[L2886]              havoc __ret_0_decimals;
[L2887]              havoc __ret_0_totalSupply;
[L2888]              havoc __ret_0__totalLimit;
[L2889]              havoc arg483_s0;
[L2890]              havoc __ret_0_balanceOf;
[L2891]              havoc arg484_s0;
[L2892]              havoc arg485_s0;
[L2893]              havoc __ret_0_allowance;
[L2894]              havoc to_s284;
[L2895]              havoc value_s284;
[L2896]              havoc __ret_0_transfer;
[L2897]              havoc from_s321;
[L2898]              havoc to_s321;
[L2899]              havoc value_s321;
[L2900]              havoc __ret_0_transferFrom;
[L2901]              havoc spender_s357;
[L2902]              havoc value_s357;
[L2903]              havoc __ret_0_approve;
[L2904]              havoc spender_s406;
[L2905]              havoc addedValue_s406;
[L2906]              havoc __ret_0_increaseAllowance;
[L2907]              havoc spender_s455;
[L2908]              havoc subtractedValue_s455;
[L2909]              havoc __ret_0_decreaseAllowance;
[L2910]              havoc tmpNow;
[L2911]              havoc gas;
[L2912]              assume gas > 4000000 && gas <= 8000000;
[L2913]              tmpNow := now;
[L2914]              havoc now;
[L2915]              assume now > tmpNow;
[L2916]              assume msgsender_MSG != null;
[L2917]              assume DType[msgsender_MSG] != SafeMath;
[L2918]              assume DType[msgsender_MSG] != BaseToken;
[L2919]              assume DType[msgsender_MSG] != CustomToken;
[L2920]              Alloc[msgsender_MSG] := true;
[L2921]  COND FALSE  !(choice == 12)
[L2927]  COND FALSE  !(choice == 11)
[L2933]  COND FALSE  !(choice == 10)
[L2939]  COND FALSE  !(choice == 9)
[L2945]  COND FALSE  !(choice == 8)
[L2951]  COND FALSE  !(choice == 7)
[L2957]  COND FALSE  !(choice == 6)
[L2963]  COND TRUE   choice == 5
[L2964]              gas := gas - 21000;
[L2965]  COND TRUE   gas >= 0
[L2966]              assume value_s284 >= 0 && value_s284 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2967]              assume msgvalue_MSG == 0;
[L2968]  CALL        call __ret_0_transfer := transfer~address~uint256_BaseToken(this, msgsender_MSG, msgvalue_MSG, to_s284, value_s284);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s284 && value_s284 <= balanceOf_BaseToken[this][msgsender_MSG]) && value_s284 >= 0) && value_s284 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_BaseToken[this][to_s284] >= 0) && balanceOf_BaseToken[this][to_s284] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_BaseToken[this][msgsender_MSG] >= 0) && balanceOf_BaseToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BaseToken0 := true;
[L2]                 call_transfer_BaseToken0 := false;
[L2]                 revert := revert_hold;
[L218]               havoc __exception;
[L219]               revert := false;
[L220]   COND TRUE   __exception
[L221]               __tmp__Balance := Balance;
[L222]               __tmp__DType := DType;
[L223]               __tmp__Alloc := Alloc;
[L224]               __tmp__balance_ADDR := balance_ADDR;
[L225]               __tmp__M_Ref_int := M_Ref_int;
[L226]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L227]               __tmp__alloc_allowance_BaseToken_lvl0 := alloc_allowance_BaseToken_lvl0;
[L228]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L229]               __tmp__sum_allowance1 := sum_allowance1;
[L230]               __tmp__Length := Length;
[L231]               __tmp__now := now;
[L232]               __tmp__name_BaseToken := name_BaseToken;
[L233]               __tmp__symbol_BaseToken := symbol_BaseToken;
[L234]               __tmp__decimals_BaseToken := decimals_BaseToken;
[L235]               __tmp__totalSupply_BaseToken := totalSupply_BaseToken;
[L236]               __tmp___totalLimit_BaseToken := _totalLimit_BaseToken;
[L237]               __tmp__balanceOf_BaseToken := balanceOf_BaseToken;
[L238]               __tmp__allowance_BaseToken := allowance_BaseToken;
[L239]   CALL        call __ret_0_ := transfer~address~uint256_BaseToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s284, value_s284);
[L1599]  COND TRUE   __tmp__DType[this] == CustomToken
[L1600]  CALL        call _transfer~address~address~uint256_BaseToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s284, value_s284);
[L1492]              __var_1 := null;
[L1493]  COND FALSE  !(!(to_s217 != null))
[L1497]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balanceOf_BaseToken[this][from_s217], value_s217);
[L1372]  COND FALSE  !(!(b_s82 <= a_s82))
[L1376]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1377]              __ret_0_ := c_s82;
[L1497]  RET         call __var_2 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balanceOf_BaseToken[this][from_s217], value_s217);
[L1498]  COND FALSE  !(revert)
[L1501]              __tmp__sum_balanceOf0[this] := __tmp__sum_balanceOf0[this] - __tmp__balanceOf_BaseToken[this][from_s217];
[L1502]              __tmp__balanceOf_BaseToken[this][from_s217] := __var_2;
[L1503]              __tmp__sum_balanceOf0[this] := __tmp__sum_balanceOf0[this] + __tmp__balanceOf_BaseToken[this][from_s217];
[L1504]  CALL        call __var_3 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balanceOf_BaseToken[this][to_s217], value_s217);
[L1396]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1397]  COND TRUE   !(c_s106 >= a_s106)
[L1398]              revert := true;
[L1504]  RET         call __var_3 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balanceOf_BaseToken[this][to_s217], value_s217);
[L1505]  COND TRUE   revert
[L1600]  RET         call _transfer~address~address~uint256_BaseToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s284, value_s284);
[L1601]  COND TRUE   revert
[L239]   RET         call __ret_0_ := transfer~address~uint256_BaseToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s284, value_s284);
[L240]               assume revert || gas < 0;
[L2968]  RET         call __ret_0_transfer := transfer~address~uint256_BaseToken(this, msgsender_MSG, msgvalue_MSG, to_s284, value_s284);
[L3016]  RET         call CorralChoice_CustomToken(this);

Loop:
[L3016]  CALL        call CorralChoice_CustomToken(this);
[L2881]              havoc msgsender_MSG;
[L2882]              havoc msgvalue_MSG;
[L2883]              havoc choice;
[L2884]              havoc __ret_0_name;
[L2885]              havoc __ret_0_symbol;
[L2886]              havoc __ret_0_decimals;
[L2887]              havoc __ret_0_totalSupply;
[L2888]              havoc __ret_0__totalLimit;
[L2889]              havoc arg483_s0;
[L2890]              havoc __ret_0_balanceOf;
[L2891]              havoc arg484_s0;
[L2892]              havoc arg485_s0;
[L2893]              havoc __ret_0_allowance;
[L2894]              havoc to_s284;
[L2895]              havoc value_s284;
[L2896]              havoc __ret_0_transfer;
[L2897]              havoc from_s321;
[L2898]              havoc to_s321;
[L2899]              havoc value_s321;
[L2900]              havoc __ret_0_transferFrom;
[L2901]              havoc spender_s357;
[L2902]              havoc value_s357;
[L2903]              havoc __ret_0_approve;
[L2904]              havoc spender_s406;
[L2905]              havoc addedValue_s406;
[L2906]              havoc __ret_0_increaseAllowance;
[L2907]              havoc spender_s455;
[L2908]              havoc subtractedValue_s455;
[L2909]              havoc __ret_0_decreaseAllowance;
[L2910]              havoc tmpNow;
[L2911]              havoc gas;
[L2912]              assume gas > 4000000 && gas <= 8000000;
[L2913]              tmpNow := now;
[L2914]              havoc now;
[L2915]              assume now > tmpNow;
[L2916]              assume msgsender_MSG != null;
[L2917]              assume DType[msgsender_MSG] != SafeMath;
[L2918]              assume DType[msgsender_MSG] != BaseToken;
[L2919]              assume DType[msgsender_MSG] != CustomToken;
[L2920]              Alloc[msgsender_MSG] := true;
[L2921]  COND FALSE  !(choice == 12)
[L2927]  COND FALSE  !(choice == 11)
[L2933]  COND FALSE  !(choice == 10)
[L2939]  COND FALSE  !(choice == 9)
[L2945]  COND FALSE  !(choice == 8)
[L2951]  COND FALSE  !(choice == 7)
[L2957]  COND FALSE  !(choice == 6)
[L2963]  COND TRUE   choice == 5
[L2964]              gas := gas - 21000;
[L2965]  COND TRUE   gas >= 0
[L2966]              assume value_s284 >= 0 && value_s284 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2967]              assume msgvalue_MSG == 0;
[L2968]  CALL        call __ret_0_transfer := transfer~address~uint256_BaseToken(this, msgsender_MSG, msgvalue_MSG, to_s284, value_s284);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s284 && value_s284 <= balanceOf_BaseToken[this][msgsender_MSG]) && value_s284 >= 0) && value_s284 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_BaseToken[this][to_s284] >= 0) && balanceOf_BaseToken[this][to_s284] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_BaseToken[this][msgsender_MSG] >= 0) && balanceOf_BaseToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BaseToken0 := true;
[L2]                 call_transfer_BaseToken0 := false;
[L2]                 revert := revert_hold;
[L218]               havoc __exception;
[L219]               revert := false;
[L220]   COND TRUE   __exception
[L221]               __tmp__Balance := Balance;
[L222]               __tmp__DType := DType;
[L223]               __tmp__Alloc := Alloc;
[L224]               __tmp__balance_ADDR := balance_ADDR;
[L225]               __tmp__M_Ref_int := M_Ref_int;
[L226]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L227]               __tmp__alloc_allowance_BaseToken_lvl0 := alloc_allowance_BaseToken_lvl0;
[L228]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L229]               __tmp__sum_allowance1 := sum_allowance1;
[L230]               __tmp__Length := Length;
[L231]               __tmp__now := now;
[L232]               __tmp__name_BaseToken := name_BaseToken;
[L233]               __tmp__symbol_BaseToken := symbol_BaseToken;
[L234]               __tmp__decimals_BaseToken := decimals_BaseToken;
[L235]               __tmp__totalSupply_BaseToken := totalSupply_BaseToken;
[L236]               __tmp___totalLimit_BaseToken := _totalLimit_BaseToken;
[L237]               __tmp__balanceOf_BaseToken := balanceOf_BaseToken;
[L238]               __tmp__allowance_BaseToken := allowance_BaseToken;
[L239]   CALL        call __ret_0_ := transfer~address~uint256_BaseToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s284, value_s284);
[L1599]  COND TRUE   __tmp__DType[this] == CustomToken
[L1600]  CALL        call _transfer~address~address~uint256_BaseToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s284, value_s284);
[L1492]              __var_1 := null;
[L1493]  COND FALSE  !(!(to_s217 != null))
[L1497]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balanceOf_BaseToken[this][from_s217], value_s217);
[L1372]  COND FALSE  !(!(b_s82 <= a_s82))
[L1376]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1377]              __ret_0_ := c_s82;
[L1497]  RET         call __var_2 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balanceOf_BaseToken[this][from_s217], value_s217);
[L1498]  COND FALSE  !(revert)
[L1501]              __tmp__sum_balanceOf0[this] := __tmp__sum_balanceOf0[this] - __tmp__balanceOf_BaseToken[this][from_s217];
[L1502]              __tmp__balanceOf_BaseToken[this][from_s217] := __var_2;
[L1503]              __tmp__sum_balanceOf0[this] := __tmp__sum_balanceOf0[this] + __tmp__balanceOf_BaseToken[this][from_s217];
[L1504]  CALL        call __var_3 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balanceOf_BaseToken[this][to_s217], value_s217);
[L1396]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1397]  COND TRUE   !(c_s106 >= a_s106)
[L1398]              revert := true;
[L1504]  RET         call __var_3 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balanceOf_BaseToken[this][to_s217], value_s217);
[L1505]  COND TRUE   revert
[L1600]  RET         call _transfer~address~address~uint256_BaseToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s284, value_s284);
[L1601]  COND TRUE   revert
[L239]   RET         call __ret_0_ := transfer~address~uint256_BaseToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s284, value_s284);
[L240]               assume revert || gas < 0;
[L2968]  RET         call __ret_0_transfer := transfer~address~uint256_BaseToken(this, msgsender_MSG, msgvalue_MSG, to_s284, value_s284);
[L3016]  RET         call CorralChoice_CustomToken(this);

[2020-11-25 12:57:14,765 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:57:14,765 INFO  L82        PathProgramCache]: Analyzing trace with hash 1041437114, now seen corresponding path program 1 times
[2020-11-25 12:57:14,766 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:57:14,774 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:57:14,830 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 12:57:14,830 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 12:57:14,830 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [14] imperfect sequences [] total 14
[2020-11-25 12:57:14,831 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 12:57:14,831 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-11-25 12:57:14,831 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=28, Invalid=154, Unknown=0, NotChecked=0, Total=182
[2020-11-25 12:57:14,831 INFO  L87              Difference]: Start difference. First operand 1799 states and 1954 transitions. cyclomatic complexity: 159 Second operand 14 states.
[2020-11-25 12:57:15,507 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:57:15,508 INFO  L93              Difference]: Finished difference Result 1889 states and 2060 transitions.
[2020-11-25 12:57:15,508 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 15 states. 
[2020-11-25 12:57:15,508 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1889 states and 2060 transitions.
[2020-11-25 12:57:15,512 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 12:57:15,517 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1889 states to 1889 states and 2060 transitions.
[2020-11-25 12:57:15,517 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 650
[2020-11-25 12:57:15,517 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 650
[2020-11-25 12:57:15,517 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1889 states and 2060 transitions.
[2020-11-25 12:57:15,519 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:57:15,519 INFO  L728         BuchiCegarLoop]: Abstraction has 1889 states and 2060 transitions.
[2020-11-25 12:57:15,520 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1889 states and 2060 transitions.
[2020-11-25 12:57:15,532 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1889 to 1819.
[2020-11-25 12:57:15,532 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1819 states.
[2020-11-25 12:57:15,534 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1819 states to 1819 states and 1969 transitions.
[2020-11-25 12:57:15,534 INFO  L751         BuchiCegarLoop]: Abstraction has 1819 states and 1969 transitions.
[2020-11-25 12:57:15,534 INFO  L631         BuchiCegarLoop]: Abstraction has 1819 states and 1969 transitions.
[2020-11-25 12:57:15,534 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 12:57:15,534 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1819 states and 1969 transitions.
[2020-11-25 12:57:15,536 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 12:57:15,536 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:57:15,536 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:57:15,537 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:57:15,537 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_BaseToken0 := false;
[L2]                 call_transfer_BaseToken0 := false;
[L2]     CALL        call main();
[L3006]              assume null == 0;
[L3007]  CALL        call this := FreshRefGenerator__success();
[L1275]              havoc newRef;
[L1276]              assume Alloc[newRef] == false;
[L1277]              Alloc[newRef] := true;
[L1278]              assume newRef != null;
[L3007]  RET         call this := FreshRefGenerator__success();
[L3008]              assume now >= 0;
[L3009]              assume DType[this] == CustomToken;
[L3010]              assume msgvalue_MSG == 0;
[L3011]              gas := gas - 53000;
[L3012]  CALL        call CustomToken_CustomToken(this, msgsender_MSG, msgvalue_MSG);
[L866]               havoc __exception;
[L867]               revert := false;
[L868]   COND FALSE  !(__exception)
[L890]   CALL        call CustomToken_CustomToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1929]  CALL        call BaseToken_BaseToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1481]  CALL        call BaseToken_BaseToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1457]              assume msgsender_MSG != null;
[L1458]              Balance[this] := 0;
[L1459]              name_BaseToken[this] := 1657376191;
[L1460]              symbol_BaseToken[this] := -853092303;
[L1461]              decimals_BaseToken[this] := 18;
[L1462]              totalSupply_BaseToken[this] := 525600000000000000000000000;
[L1463]              _totalLimit_BaseToken[this] := 100000000000000000000000000000000;
[L1464]              balanceOf_BaseToken[this] := zeroRefintArr();
[L1465]              sum_balanceOf0[this] := 0;
[L1466]              allowance_BaseToken[this] := zeroRefRefintArr();
[L1467]              sum_allowance1[this] := 0;
[L1481]  RET         call BaseToken_BaseToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1482]  COND FALSE  !(revert)
[L1929]  RET         call BaseToken_BaseToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1930]  COND FALSE  !(revert)
[L1933]  CALL        call CustomToken_CustomToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1903]              assume msgsender_MSG != null;
[L1904]              Balance[this] := 0;
[L1906]              __var_13 := ConstantToRef(506935249641133462427988555867660131141316463944);
[L1907]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_BaseToken[this][ConstantToRef(506935249641133462427988555867660131141316463944)];
[L1908]              balanceOf_BaseToken[this][ConstantToRef(506935249641133462427988555867660131141316463944)] := totalSupply_BaseToken[this];
[L1909]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_BaseToken[this][ConstantToRef(506935249641133462427988555867660131141316463944)];
[L1910]              assert { :EventEmitted "Transfer_CustomToken" } true;
[L1933]  RET         call CustomToken_CustomToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1934]  COND FALSE  !(revert)
[L890]   RET         call CustomToken_CustomToken__success(this, msgsender_MSG, msgvalue_MSG);
[L891]               assume !revert && gas >= 0;
[L3012]  RET         call CustomToken_CustomToken(this, msgsender_MSG, msgvalue_MSG);
[L3013]              assume !revert && gas >= 0;
[L3016]  CALL        call CorralChoice_CustomToken(this);
[L2881]              havoc msgsender_MSG;
[L2882]              havoc msgvalue_MSG;
[L2883]              havoc choice;
[L2884]              havoc __ret_0_name;
[L2885]              havoc __ret_0_symbol;
[L2886]              havoc __ret_0_decimals;
[L2887]              havoc __ret_0_totalSupply;
[L2888]              havoc __ret_0__totalLimit;
[L2889]              havoc arg483_s0;
[L2890]              havoc __ret_0_balanceOf;
[L2891]              havoc arg484_s0;
[L2892]              havoc arg485_s0;
[L2893]              havoc __ret_0_allowance;
[L2894]              havoc to_s284;
[L2895]              havoc value_s284;
[L2896]              havoc __ret_0_transfer;
[L2897]              havoc from_s321;
[L2898]              havoc to_s321;
[L2899]              havoc value_s321;
[L2900]              havoc __ret_0_transferFrom;
[L2901]              havoc spender_s357;
[L2902]              havoc value_s357;
[L2903]              havoc __ret_0_approve;
[L2904]              havoc spender_s406;
[L2905]              havoc addedValue_s406;
[L2906]              havoc __ret_0_increaseAllowance;
[L2907]              havoc spender_s455;
[L2908]              havoc subtractedValue_s455;
[L2909]              havoc __ret_0_decreaseAllowance;
[L2910]              havoc tmpNow;
[L2911]              havoc gas;
[L2912]              assume gas > 4000000 && gas <= 8000000;
[L2913]              tmpNow := now;
[L2914]              havoc now;
[L2915]              assume now > tmpNow;
[L2916]              assume msgsender_MSG != null;
[L2917]              assume DType[msgsender_MSG] != SafeMath;
[L2918]              assume DType[msgsender_MSG] != BaseToken;
[L2919]              assume DType[msgsender_MSG] != CustomToken;
[L2920]              Alloc[msgsender_MSG] := true;
[L2921]  COND FALSE  !(choice == 12)
[L2927]  COND FALSE  !(choice == 11)
[L2933]  COND FALSE  !(choice == 10)
[L2939]  COND FALSE  !(choice == 9)
[L2945]  COND FALSE  !(choice == 8)
[L2951]  COND FALSE  !(choice == 7)
[L2957]  COND FALSE  !(choice == 6)
[L2963]  COND TRUE   choice == 5
[L2964]              gas := gas - 21000;
[L2965]  COND TRUE   gas >= 0
[L2966]              assume value_s284 >= 0 && value_s284 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2967]              assume msgvalue_MSG == 0;
[L2968]  CALL        call __ret_0_transfer := transfer~address~uint256_BaseToken(this, msgsender_MSG, msgvalue_MSG, to_s284, value_s284);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s284 && value_s284 <= balanceOf_BaseToken[this][msgsender_MSG]) && value_s284 >= 0) && value_s284 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_BaseToken[this][to_s284] >= 0) && balanceOf_BaseToken[this][to_s284] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_BaseToken[this][msgsender_MSG] >= 0) && balanceOf_BaseToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BaseToken0 := true;
[L2]                 call_transfer_BaseToken0 := false;
[L2]                 revert := revert_hold;
[L218]               havoc __exception;
[L219]               revert := false;
[L220]   COND TRUE   __exception
[L221]               __tmp__Balance := Balance;
[L222]               __tmp__DType := DType;
[L223]               __tmp__Alloc := Alloc;
[L224]               __tmp__balance_ADDR := balance_ADDR;
[L225]               __tmp__M_Ref_int := M_Ref_int;
[L226]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L227]               __tmp__alloc_allowance_BaseToken_lvl0 := alloc_allowance_BaseToken_lvl0;
[L228]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L229]               __tmp__sum_allowance1 := sum_allowance1;
[L230]               __tmp__Length := Length;
[L231]               __tmp__now := now;
[L232]               __tmp__name_BaseToken := name_BaseToken;
[L233]               __tmp__symbol_BaseToken := symbol_BaseToken;
[L234]               __tmp__decimals_BaseToken := decimals_BaseToken;
[L235]               __tmp__totalSupply_BaseToken := totalSupply_BaseToken;
[L236]               __tmp___totalLimit_BaseToken := _totalLimit_BaseToken;
[L237]               __tmp__balanceOf_BaseToken := balanceOf_BaseToken;
[L238]               __tmp__allowance_BaseToken := allowance_BaseToken;
[L239]   CALL        call __ret_0_ := transfer~address~uint256_BaseToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s284, value_s284);
[L1599]  COND TRUE   __tmp__DType[this] == CustomToken
[L1600]  CALL        call _transfer~address~address~uint256_BaseToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s284, value_s284);
[L1492]              __var_1 := null;
[L1493]  COND FALSE  !(!(to_s217 != null))
[L1497]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balanceOf_BaseToken[this][from_s217], value_s217);
[L1372]  COND FALSE  !(!(b_s82 <= a_s82))
[L1376]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1377]              __ret_0_ := c_s82;
[L1497]  RET         call __var_2 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balanceOf_BaseToken[this][from_s217], value_s217);
[L1498]  COND FALSE  !(revert)
[L1501]              __tmp__sum_balanceOf0[this] := __tmp__sum_balanceOf0[this] - __tmp__balanceOf_BaseToken[this][from_s217];
[L1502]              __tmp__balanceOf_BaseToken[this][from_s217] := __var_2;
[L1503]              __tmp__sum_balanceOf0[this] := __tmp__sum_balanceOf0[this] + __tmp__balanceOf_BaseToken[this][from_s217];
[L1504]  CALL        call __var_3 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balanceOf_BaseToken[this][to_s217], value_s217);
[L1396]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1397]  COND FALSE  !(!(c_s106 >= a_s106))
[L1401]              __ret_0_ := c_s106;
[L1504]  RET         call __var_3 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balanceOf_BaseToken[this][to_s217], value_s217);
[L1505]  COND FALSE  !(revert)
[L1508]              __tmp__sum_balanceOf0[this] := __tmp__sum_balanceOf0[this] - __tmp__balanceOf_BaseToken[this][to_s217];
[L1509]              __tmp__balanceOf_BaseToken[this][to_s217] := __var_3;
[L1510]              __tmp__sum_balanceOf0[this] := __tmp__sum_balanceOf0[this] + __tmp__balanceOf_BaseToken[this][to_s217];
[L1600]  RET         call _transfer~address~address~uint256_BaseToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s284, value_s284);
[L1601]  COND FALSE  !(revert)
[L1612]              __ret_0_ := true;
[L239]   RET         call __ret_0_ := transfer~address~uint256_BaseToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s284, value_s284);
[L240]               assume revert || gas < 0;
[L2968]  RET         call __ret_0_transfer := transfer~address~uint256_BaseToken(this, msgsender_MSG, msgvalue_MSG, to_s284, value_s284);
[L3016]  RET         call CorralChoice_CustomToken(this);

Loop:
[L3016]  CALL        call CorralChoice_CustomToken(this);
[L2881]              havoc msgsender_MSG;
[L2882]              havoc msgvalue_MSG;
[L2883]              havoc choice;
[L2884]              havoc __ret_0_name;
[L2885]              havoc __ret_0_symbol;
[L2886]              havoc __ret_0_decimals;
[L2887]              havoc __ret_0_totalSupply;
[L2888]              havoc __ret_0__totalLimit;
[L2889]              havoc arg483_s0;
[L2890]              havoc __ret_0_balanceOf;
[L2891]              havoc arg484_s0;
[L2892]              havoc arg485_s0;
[L2893]              havoc __ret_0_allowance;
[L2894]              havoc to_s284;
[L2895]              havoc value_s284;
[L2896]              havoc __ret_0_transfer;
[L2897]              havoc from_s321;
[L2898]              havoc to_s321;
[L2899]              havoc value_s321;
[L2900]              havoc __ret_0_transferFrom;
[L2901]              havoc spender_s357;
[L2902]              havoc value_s357;
[L2903]              havoc __ret_0_approve;
[L2904]              havoc spender_s406;
[L2905]              havoc addedValue_s406;
[L2906]              havoc __ret_0_increaseAllowance;
[L2907]              havoc spender_s455;
[L2908]              havoc subtractedValue_s455;
[L2909]              havoc __ret_0_decreaseAllowance;
[L2910]              havoc tmpNow;
[L2911]              havoc gas;
[L2912]              assume gas > 4000000 && gas <= 8000000;
[L2913]              tmpNow := now;
[L2914]              havoc now;
[L2915]              assume now > tmpNow;
[L2916]              assume msgsender_MSG != null;
[L2917]              assume DType[msgsender_MSG] != SafeMath;
[L2918]              assume DType[msgsender_MSG] != BaseToken;
[L2919]              assume DType[msgsender_MSG] != CustomToken;
[L2920]              Alloc[msgsender_MSG] := true;
[L2921]  COND FALSE  !(choice == 12)
[L2927]  COND FALSE  !(choice == 11)
[L2933]  COND FALSE  !(choice == 10)
[L2939]  COND FALSE  !(choice == 9)
[L2945]  COND FALSE  !(choice == 8)
[L2951]  COND FALSE  !(choice == 7)
[L2957]  COND FALSE  !(choice == 6)
[L2963]  COND TRUE   choice == 5
[L2964]              gas := gas - 21000;
[L2965]  COND TRUE   gas >= 0
[L2966]              assume value_s284 >= 0 && value_s284 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2967]              assume msgvalue_MSG == 0;
[L2968]  CALL        call __ret_0_transfer := transfer~address~uint256_BaseToken(this, msgsender_MSG, msgvalue_MSG, to_s284, value_s284);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s284 && value_s284 <= balanceOf_BaseToken[this][msgsender_MSG]) && value_s284 >= 0) && value_s284 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_BaseToken[this][to_s284] >= 0) && balanceOf_BaseToken[this][to_s284] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_BaseToken[this][msgsender_MSG] >= 0) && balanceOf_BaseToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BaseToken0 := true;
[L2]                 call_transfer_BaseToken0 := false;
[L2]                 revert := revert_hold;
[L218]               havoc __exception;
[L219]               revert := false;
[L220]   COND TRUE   __exception
[L221]               __tmp__Balance := Balance;
[L222]               __tmp__DType := DType;
[L223]               __tmp__Alloc := Alloc;
[L224]               __tmp__balance_ADDR := balance_ADDR;
[L225]               __tmp__M_Ref_int := M_Ref_int;
[L226]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L227]               __tmp__alloc_allowance_BaseToken_lvl0 := alloc_allowance_BaseToken_lvl0;
[L228]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L229]               __tmp__sum_allowance1 := sum_allowance1;
[L230]               __tmp__Length := Length;
[L231]               __tmp__now := now;
[L232]               __tmp__name_BaseToken := name_BaseToken;
[L233]               __tmp__symbol_BaseToken := symbol_BaseToken;
[L234]               __tmp__decimals_BaseToken := decimals_BaseToken;
[L235]               __tmp__totalSupply_BaseToken := totalSupply_BaseToken;
[L236]               __tmp___totalLimit_BaseToken := _totalLimit_BaseToken;
[L237]               __tmp__balanceOf_BaseToken := balanceOf_BaseToken;
[L238]               __tmp__allowance_BaseToken := allowance_BaseToken;
[L239]   CALL        call __ret_0_ := transfer~address~uint256_BaseToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s284, value_s284);
[L1599]  COND TRUE   __tmp__DType[this] == CustomToken
[L1600]  CALL        call _transfer~address~address~uint256_BaseToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s284, value_s284);
[L1492]              __var_1 := null;
[L1493]  COND FALSE  !(!(to_s217 != null))
[L1497]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balanceOf_BaseToken[this][from_s217], value_s217);
[L1372]  COND FALSE  !(!(b_s82 <= a_s82))
[L1376]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1377]              __ret_0_ := c_s82;
[L1497]  RET         call __var_2 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balanceOf_BaseToken[this][from_s217], value_s217);
[L1498]  COND FALSE  !(revert)
[L1501]              __tmp__sum_balanceOf0[this] := __tmp__sum_balanceOf0[this] - __tmp__balanceOf_BaseToken[this][from_s217];
[L1502]              __tmp__balanceOf_BaseToken[this][from_s217] := __var_2;
[L1503]              __tmp__sum_balanceOf0[this] := __tmp__sum_balanceOf0[this] + __tmp__balanceOf_BaseToken[this][from_s217];
[L1504]  CALL        call __var_3 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balanceOf_BaseToken[this][to_s217], value_s217);
[L1396]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1397]  COND FALSE  !(!(c_s106 >= a_s106))
[L1401]              __ret_0_ := c_s106;
[L1504]  RET         call __var_3 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balanceOf_BaseToken[this][to_s217], value_s217);
[L1505]  COND FALSE  !(revert)
[L1508]              __tmp__sum_balanceOf0[this] := __tmp__sum_balanceOf0[this] - __tmp__balanceOf_BaseToken[this][to_s217];
[L1509]              __tmp__balanceOf_BaseToken[this][to_s217] := __var_3;
[L1510]              __tmp__sum_balanceOf0[this] := __tmp__sum_balanceOf0[this] + __tmp__balanceOf_BaseToken[this][to_s217];
[L1600]  RET         call _transfer~address~address~uint256_BaseToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s284, value_s284);
[L1601]  COND FALSE  !(revert)
[L1612]              __ret_0_ := true;
[L239]   RET         call __ret_0_ := transfer~address~uint256_BaseToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s284, value_s284);
[L240]               assume revert || gas < 0;
[L2968]  RET         call __ret_0_transfer := transfer~address~uint256_BaseToken(this, msgsender_MSG, msgvalue_MSG, to_s284, value_s284);
[L3016]  RET         call CorralChoice_CustomToken(this);

[2020-11-25 12:57:15,540 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:57:15,541 INFO  L82        PathProgramCache]: Analyzing trace with hash -530564859, now seen corresponding path program 1 times
[2020-11-25 12:57:15,541 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:57:15,548 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:57:15,565 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 12:57:15,566 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 12:57:15,566 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-25 12:57:15,566 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 12:57:15,566 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-25 12:57:15,566 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-11-25 12:57:15,566 INFO  L87              Difference]: Start difference. First operand 1819 states and 1969 transitions. cyclomatic complexity: 154 Second operand 5 states.
[2020-11-25 12:57:15,807 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:57:15,807 INFO  L93              Difference]: Finished difference Result 2285 states and 2544 transitions.
[2020-11-25 12:57:15,807 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 12:57:15,807 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2285 states and 2544 transitions.
[2020-11-25 12:57:15,813 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-11-25 12:57:15,818 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2285 states to 1720 states and 1972 transitions.
[2020-11-25 12:57:15,818 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 481
[2020-11-25 12:57:15,818 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 481
[2020-11-25 12:57:15,818 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1720 states and 1972 transitions.
[2020-11-25 12:57:15,820 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:57:15,820 INFO  L728         BuchiCegarLoop]: Abstraction has 1720 states and 1972 transitions.
[2020-11-25 12:57:15,821 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1720 states and 1972 transitions.
[2020-11-25 12:57:15,828 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1720 to 1246.
[2020-11-25 12:57:15,828 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1246 states.
[2020-11-25 12:57:15,829 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1246 states to 1246 states and 1357 transitions.
[2020-11-25 12:57:15,829 INFO  L751         BuchiCegarLoop]: Abstraction has 1246 states and 1357 transitions.
[2020-11-25 12:57:15,829 INFO  L631         BuchiCegarLoop]: Abstraction has 1246 states and 1357 transitions.
[2020-11-25 12:57:15,829 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 12:57:15,829 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1246 states and 1357 transitions.
[2020-11-25 12:57:15,831 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:57:15,831 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:57:15,831 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:57:15,832 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:57:15,832 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_BaseToken0 := false;
[L2]                 call_transfer_BaseToken0 := false;
[L2]     CALL        call main();
[L3006]              assume null == 0;
[L3007]  CALL        call this := FreshRefGenerator__success();
[L1275]              havoc newRef;
[L1276]              assume Alloc[newRef] == false;
[L1277]              Alloc[newRef] := true;
[L1278]              assume newRef != null;
[L3007]  RET         call this := FreshRefGenerator__success();
[L3008]              assume now >= 0;
[L3009]              assume DType[this] == CustomToken;
[L3010]              assume msgvalue_MSG == 0;
[L3011]              gas := gas - 53000;
[L3012]  CALL        call CustomToken_CustomToken(this, msgsender_MSG, msgvalue_MSG);
[L866]               havoc __exception;
[L867]               revert := false;
[L868]   COND FALSE  !(__exception)
[L890]   CALL        call CustomToken_CustomToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1929]  CALL        call BaseToken_BaseToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1481]  CALL        call BaseToken_BaseToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1457]              assume msgsender_MSG != null;
[L1458]              Balance[this] := 0;
[L1459]              name_BaseToken[this] := 1657376191;
[L1460]              symbol_BaseToken[this] := -853092303;
[L1461]              decimals_BaseToken[this] := 18;
[L1462]              totalSupply_BaseToken[this] := 525600000000000000000000000;
[L1463]              _totalLimit_BaseToken[this] := 100000000000000000000000000000000;
[L1464]              balanceOf_BaseToken[this] := zeroRefintArr();
[L1465]              sum_balanceOf0[this] := 0;
[L1466]              allowance_BaseToken[this] := zeroRefRefintArr();
[L1467]              sum_allowance1[this] := 0;
[L1481]  RET         call BaseToken_BaseToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1482]  COND FALSE  !(revert)
[L1929]  RET         call BaseToken_BaseToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1930]  COND FALSE  !(revert)
[L1933]  CALL        call CustomToken_CustomToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1903]              assume msgsender_MSG != null;
[L1904]              Balance[this] := 0;
[L1906]              __var_13 := ConstantToRef(506935249641133462427988555867660131141316463944);
[L1907]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_BaseToken[this][ConstantToRef(506935249641133462427988555867660131141316463944)];
[L1908]              balanceOf_BaseToken[this][ConstantToRef(506935249641133462427988555867660131141316463944)] := totalSupply_BaseToken[this];
[L1909]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_BaseToken[this][ConstantToRef(506935249641133462427988555867660131141316463944)];
[L1910]              assert { :EventEmitted "Transfer_CustomToken" } true;
[L1933]  RET         call CustomToken_CustomToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1934]  COND FALSE  !(revert)
[L890]   RET         call CustomToken_CustomToken__success(this, msgsender_MSG, msgvalue_MSG);
[L891]               assume !revert && gas >= 0;
[L3012]  RET         call CustomToken_CustomToken(this, msgsender_MSG, msgvalue_MSG);
[L3013]              assume !revert && gas >= 0;
[L3016]  CALL        call CorralChoice_CustomToken(this);
[L2881]              havoc msgsender_MSG;
[L2882]              havoc msgvalue_MSG;
[L2883]              havoc choice;
[L2884]              havoc __ret_0_name;
[L2885]              havoc __ret_0_symbol;
[L2886]              havoc __ret_0_decimals;
[L2887]              havoc __ret_0_totalSupply;
[L2888]              havoc __ret_0__totalLimit;
[L2889]              havoc arg483_s0;
[L2890]              havoc __ret_0_balanceOf;
[L2891]              havoc arg484_s0;
[L2892]              havoc arg485_s0;
[L2893]              havoc __ret_0_allowance;
[L2894]              havoc to_s284;
[L2895]              havoc value_s284;
[L2896]              havoc __ret_0_transfer;
[L2897]              havoc from_s321;
[L2898]              havoc to_s321;
[L2899]              havoc value_s321;
[L2900]              havoc __ret_0_transferFrom;
[L2901]              havoc spender_s357;
[L2902]              havoc value_s357;
[L2903]              havoc __ret_0_approve;
[L2904]              havoc spender_s406;
[L2905]              havoc addedValue_s406;
[L2906]              havoc __ret_0_increaseAllowance;
[L2907]              havoc spender_s455;
[L2908]              havoc subtractedValue_s455;
[L2909]              havoc __ret_0_decreaseAllowance;
[L2910]              havoc tmpNow;
[L2911]              havoc gas;
[L2912]              assume gas > 4000000 && gas <= 8000000;
[L2913]              tmpNow := now;
[L2914]              havoc now;
[L2915]              assume now > tmpNow;
[L2916]              assume msgsender_MSG != null;
[L2917]              assume DType[msgsender_MSG] != SafeMath;
[L2918]              assume DType[msgsender_MSG] != BaseToken;
[L2919]              assume DType[msgsender_MSG] != CustomToken;
[L2920]              Alloc[msgsender_MSG] := true;
[L2921]  COND FALSE  !(choice == 12)
[L2927]  COND FALSE  !(choice == 11)
[L2933]  COND FALSE  !(choice == 10)
[L2939]  COND FALSE  !(choice == 9)
[L2945]  COND FALSE  !(choice == 8)
[L2951]  COND FALSE  !(choice == 7)
[L2957]  COND FALSE  !(choice == 6)
[L2963]  COND FALSE  !(choice == 5)
[L2970]  COND TRUE   choice == 4
[L2971]              gas := gas - 21000;
[L2972]  COND TRUE   gas >= 0
[L2973]              assume value_s321 >= 0 && value_s321 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2974]              assume msgvalue_MSG == 0;
[L2975]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BaseToken(this, msgsender_MSG, msgvalue_MSG, from_s321, to_s321, value_s321);
[L274]               havoc __exception;
[L275]               revert := false;
[L276]   COND FALSE  !(__exception)
[L298]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BaseToken__success(this, msgsender_MSG, msgvalue_MSG, from_s321, to_s321, value_s321);
[L1665]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowance_BaseToken[this][from_s321][msgsender_MSG], value_s321);
[L1384]  COND FALSE  !(!(b_s82 <= a_s82))
[L1388]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1389]              __ret_0_ := c_s82;
[L1665]  RET         call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowance_BaseToken[this][from_s321][msgsender_MSG], value_s321);
[L1666]  COND FALSE  !(revert)
[L1669]              sum_allowance1[from_s321] := sum_allowance1[from_s321] - allowance_BaseToken[this][from_s321][msgsender_MSG];
[L1670]              allowance_BaseToken[this][from_s321][msgsender_MSG] := __var_7;
[L1671]              sum_allowance1[from_s321] := sum_allowance1[from_s321] + allowance_BaseToken[this][from_s321][msgsender_MSG];
[L1672]  COND FALSE  !(DType[this] == CustomToken)
[L1677]  COND TRUE   DType[this] == BaseToken
[L1678]  CALL        call _transfer~address~address~uint256_BaseToken__success(this, msgsender_MSG, msgvalue_MSG, from_s321, to_s321, value_s321);
[L1518]              __var_1 := null;
[L1519]  COND FALSE  !(!(to_s217 != null))
[L1523]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_BaseToken[this][from_s217], value_s217);
[L1384]  COND FALSE  !(!(b_s82 <= a_s82))
[L1388]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1389]              __ret_0_ := c_s82;
[L1523]  RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_BaseToken[this][from_s217], value_s217);
[L1524]  COND FALSE  !(revert)
[L1527]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_BaseToken[this][from_s217];
[L1528]              balanceOf_BaseToken[this][from_s217] := __var_2;
[L1529]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_BaseToken[this][from_s217];
[L1530]  CALL        call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_BaseToken[this][to_s217], value_s217);
[L1408]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1409]  COND FALSE  !(!(c_s106 >= a_s106))
[L1413]              __ret_0_ := c_s106;
[L1530]  RET         call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_BaseToken[this][to_s217], value_s217);
[L1531]  COND FALSE  !(revert)
[L1534]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_BaseToken[this][to_s217];
[L1535]              balanceOf_BaseToken[this][to_s217] := __var_3;
[L1536]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_BaseToken[this][to_s217];
[L1537]              assert { :EventEmitted "Transfer_BaseToken" } true;
[L1678]  RET         call _transfer~address~address~uint256_BaseToken__success(this, msgsender_MSG, msgvalue_MSG, from_s321, to_s321, value_s321);
[L1679]  COND FALSE  !(revert)
[L1685]              __ret_0_ := true;
[L298]   RET         call __ret_0_ := transferFrom~address~address~uint256_BaseToken__success(this, msgsender_MSG, msgvalue_MSG, from_s321, to_s321, value_s321);
[L299]               assume !revert && gas >= 0;
[L2975]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BaseToken(this, msgsender_MSG, msgvalue_MSG, from_s321, to_s321, value_s321);
[L3016]  RET         call CorralChoice_CustomToken(this);
[L3016]  CALL        call CorralChoice_CustomToken(this);
[L2881]              havoc msgsender_MSG;
[L2882]              havoc msgvalue_MSG;
[L2883]              havoc choice;
[L2884]              havoc __ret_0_name;
[L2885]              havoc __ret_0_symbol;
[L2886]              havoc __ret_0_decimals;
[L2887]              havoc __ret_0_totalSupply;
[L2888]              havoc __ret_0__totalLimit;
[L2889]              havoc arg483_s0;
[L2890]              havoc __ret_0_balanceOf;
[L2891]              havoc arg484_s0;
[L2892]              havoc arg485_s0;
[L2893]              havoc __ret_0_allowance;
[L2894]              havoc to_s284;
[L2895]              havoc value_s284;
[L2896]              havoc __ret_0_transfer;
[L2897]              havoc from_s321;
[L2898]              havoc to_s321;
[L2899]              havoc value_s321;
[L2900]              havoc __ret_0_transferFrom;
[L2901]              havoc spender_s357;
[L2902]              havoc value_s357;
[L2903]              havoc __ret_0_approve;
[L2904]              havoc spender_s406;
[L2905]              havoc addedValue_s406;
[L2906]              havoc __ret_0_increaseAllowance;
[L2907]              havoc spender_s455;
[L2908]              havoc subtractedValue_s455;
[L2909]              havoc __ret_0_decreaseAllowance;
[L2910]              havoc tmpNow;
[L2911]              havoc gas;
[L2912]              assume gas > 4000000 && gas <= 8000000;
[L2913]              tmpNow := now;
[L2914]              havoc now;
[L2915]              assume now > tmpNow;
[L2916]              assume msgsender_MSG != null;
[L2917]              assume DType[msgsender_MSG] != SafeMath;
[L2918]              assume DType[msgsender_MSG] != BaseToken;
[L2919]              assume DType[msgsender_MSG] != CustomToken;
[L2920]              Alloc[msgsender_MSG] := true;
[L2921]  COND FALSE  !(choice == 12)
[L2927]  COND FALSE  !(choice == 11)
[L2933]  COND FALSE  !(choice == 10)
[L2939]  COND FALSE  !(choice == 9)
[L2945]  COND FALSE  !(choice == 8)
[L2951]  COND FALSE  !(choice == 7)
[L2957]  COND FALSE  !(choice == 6)
[L2963]  COND TRUE   choice == 5
[L2964]              gas := gas - 21000;
[L2965]  COND TRUE   gas >= 0
[L2966]              assume value_s284 >= 0 && value_s284 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2967]              assume msgvalue_MSG == 0;
[L2968]  CALL        call __ret_0_transfer := transfer~address~uint256_BaseToken(this, msgsender_MSG, msgvalue_MSG, to_s284, value_s284);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s284 && value_s284 <= balanceOf_BaseToken[this][msgsender_MSG]) && value_s284 >= 0) && value_s284 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_BaseToken[this][to_s284] >= 0) && balanceOf_BaseToken[this][to_s284] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_BaseToken[this][msgsender_MSG] >= 0) && balanceOf_BaseToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BaseToken0 := true;
[L2]                 call_transfer_BaseToken0 := false;
[L2]                 revert := revert_hold;
[L218]               havoc __exception;
[L219]               revert := false;
[L220]   COND FALSE  !(__exception)
[L242]   CALL        call __ret_0_ := transfer~address~uint256_BaseToken__success(this, msgsender_MSG, msgvalue_MSG, to_s284, value_s284);
[L1618]  COND TRUE   DType[this] == CustomToken
[L1619]  CALL        call _transfer~address~address~uint256_BaseToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s284, value_s284);
[L1518]              __var_1 := null;
[L1519]  COND FALSE  !(!(to_s217 != null))
[L1523]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_BaseToken[this][from_s217], value_s217);
[L1384]  COND FALSE  !(!(b_s82 <= a_s82))
[L1388]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1389]              __ret_0_ := c_s82;
[L1523]  RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_BaseToken[this][from_s217], value_s217);
[L1524]  COND FALSE  !(revert)
[L1527]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_BaseToken[this][from_s217];
[L1528]              balanceOf_BaseToken[this][from_s217] := __var_2;
[L1529]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_BaseToken[this][from_s217];
[L1530]  CALL        call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_BaseToken[this][to_s217], value_s217);
[L1408]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1409]  COND FALSE  !(!(c_s106 >= a_s106))
[L1413]              __ret_0_ := c_s106;
[L1530]  RET         call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_BaseToken[this][to_s217], value_s217);
[L1531]  COND FALSE  !(revert)
[L1534]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_BaseToken[this][to_s217];
[L1535]              balanceOf_BaseToken[this][to_s217] := __var_3;
[L1536]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_BaseToken[this][to_s217];
[L1537]              assert { :EventEmitted "Transfer_BaseToken" } true;
[L1619]  RET         call _transfer~address~address~uint256_BaseToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s284, value_s284);
[L1620]  COND FALSE  !(revert)
[L1631]              __ret_0_ := true;
[L242]   RET         call __ret_0_ := transfer~address~uint256_BaseToken__success(this, msgsender_MSG, msgvalue_MSG, to_s284, value_s284);
[L243]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((__ret_0_ == true && totalSupply_BaseToken[this] == old(totalSupply_BaseToken[this])) && balanceOf_BaseToken[this] == old(balanceOf_BaseToken[this])) && allowance_BaseToken[this] == old(allowance_BaseToken[this]));
[L2]                 revert := revert_hold;
[L2968]  RET         call __ret_0_transfer := transfer~address~uint256_BaseToken(this, msgsender_MSG, msgvalue_MSG, to_s284, value_s284);
[L3016]  RET         call CorralChoice_CustomToken(this);

Loop:
[L3016]  CALL        call CorralChoice_CustomToken(this);
[L2881]              havoc msgsender_MSG;
[L2882]              havoc msgvalue_MSG;
[L2883]              havoc choice;
[L2884]              havoc __ret_0_name;
[L2885]              havoc __ret_0_symbol;
[L2886]              havoc __ret_0_decimals;
[L2887]              havoc __ret_0_totalSupply;
[L2888]              havoc __ret_0__totalLimit;
[L2889]              havoc arg483_s0;
[L2890]              havoc __ret_0_balanceOf;
[L2891]              havoc arg484_s0;
[L2892]              havoc arg485_s0;
[L2893]              havoc __ret_0_allowance;
[L2894]              havoc to_s284;
[L2895]              havoc value_s284;
[L2896]              havoc __ret_0_transfer;
[L2897]              havoc from_s321;
[L2898]              havoc to_s321;
[L2899]              havoc value_s321;
[L2900]              havoc __ret_0_transferFrom;
[L2901]              havoc spender_s357;
[L2902]              havoc value_s357;
[L2903]              havoc __ret_0_approve;
[L2904]              havoc spender_s406;
[L2905]              havoc addedValue_s406;
[L2906]              havoc __ret_0_increaseAllowance;
[L2907]              havoc spender_s455;
[L2908]              havoc subtractedValue_s455;
[L2909]              havoc __ret_0_decreaseAllowance;
[L2910]              havoc tmpNow;
[L2911]              havoc gas;
[L2912]              assume gas > 4000000 && gas <= 8000000;
[L2913]              tmpNow := now;
[L2914]              havoc now;
[L2915]              assume now > tmpNow;
[L2916]              assume msgsender_MSG != null;
[L2917]              assume DType[msgsender_MSG] != SafeMath;
[L2918]              assume DType[msgsender_MSG] != BaseToken;
[L2919]              assume DType[msgsender_MSG] != CustomToken;
[L2920]              Alloc[msgsender_MSG] := true;
[L2921]  COND TRUE   choice == 12
[L2922]              gas := gas - 21000;
[L2923]  COND FALSE  !(gas >= 0)
[L3016]  RET         call CorralChoice_CustomToken(this);

[2020-11-25 12:57:15,835 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:57:15,835 INFO  L82        PathProgramCache]: Analyzing trace with hash -165937285, now seen corresponding path program 1 times
[2020-11-25 12:57:15,835 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:57:15,844 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:57:15,877 INFO  L134       CoverageAnalysis]: Checked inductivity of 55 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 54 trivial. 0 not checked.
[2020-11-25 12:57:15,877 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 12:57:15,877 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 12:57:15,877 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 12:57:15,878 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 12:57:15,878 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-25 12:57:15,878 INFO  L87              Difference]: Start difference. First operand 1246 states and 1357 transitions. cyclomatic complexity: 114 Second operand 6 states.
[2020-11-25 12:57:15,912 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:57:15,912 INFO  L93              Difference]: Finished difference Result 1266 states and 1375 transitions.
[2020-11-25 12:57:15,912 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-11-25 12:57:15,913 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1266 states and 1375 transitions.
[2020-11-25 12:57:15,915 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:57:15,917 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1266 states to 1236 states and 1343 transitions.
[2020-11-25 12:57:15,917 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 373
[2020-11-25 12:57:15,917 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 373
[2020-11-25 12:57:15,918 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1236 states and 1343 transitions.
[2020-11-25 12:57:15,918 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:57:15,918 INFO  L728         BuchiCegarLoop]: Abstraction has 1236 states and 1343 transitions.
[2020-11-25 12:57:15,919 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1236 states and 1343 transitions.
[2020-11-25 12:57:15,924 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1236 to 1236.
[2020-11-25 12:57:15,924 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1236 states.
[2020-11-25 12:57:15,925 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1236 states to 1236 states and 1343 transitions.
[2020-11-25 12:57:15,926 INFO  L751         BuchiCegarLoop]: Abstraction has 1236 states and 1343 transitions.
[2020-11-25 12:57:15,926 INFO  L631         BuchiCegarLoop]: Abstraction has 1236 states and 1343 transitions.
[2020-11-25 12:57:15,926 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 12:57:15,926 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1236 states and 1343 transitions.
[2020-11-25 12:57:15,927 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:57:15,927 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:57:15,927 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:57:15,928 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:57:15,928 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_BaseToken0 := false;
[L2]                 call_transfer_BaseToken0 := false;
[L2]     CALL        call main();
[L3006]              assume null == 0;
[L3007]  CALL        call this := FreshRefGenerator__success();
[L1275]              havoc newRef;
[L1276]              assume Alloc[newRef] == false;
[L1277]              Alloc[newRef] := true;
[L1278]              assume newRef != null;
[L3007]  RET         call this := FreshRefGenerator__success();
[L3008]              assume now >= 0;
[L3009]              assume DType[this] == CustomToken;
[L3010]              assume msgvalue_MSG == 0;
[L3011]              gas := gas - 53000;
[L3012]  CALL        call CustomToken_CustomToken(this, msgsender_MSG, msgvalue_MSG);
[L866]               havoc __exception;
[L867]               revert := false;
[L868]   COND FALSE  !(__exception)
[L890]   CALL        call CustomToken_CustomToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1929]  CALL        call BaseToken_BaseToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1481]  CALL        call BaseToken_BaseToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1457]              assume msgsender_MSG != null;
[L1458]              Balance[this] := 0;
[L1459]              name_BaseToken[this] := 1657376191;
[L1460]              symbol_BaseToken[this] := -853092303;
[L1461]              decimals_BaseToken[this] := 18;
[L1462]              totalSupply_BaseToken[this] := 525600000000000000000000000;
[L1463]              _totalLimit_BaseToken[this] := 100000000000000000000000000000000;
[L1464]              balanceOf_BaseToken[this] := zeroRefintArr();
[L1465]              sum_balanceOf0[this] := 0;
[L1466]              allowance_BaseToken[this] := zeroRefRefintArr();
[L1467]              sum_allowance1[this] := 0;
[L1481]  RET         call BaseToken_BaseToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1482]  COND FALSE  !(revert)
[L1929]  RET         call BaseToken_BaseToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1930]  COND FALSE  !(revert)
[L1933]  CALL        call CustomToken_CustomToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1903]              assume msgsender_MSG != null;
[L1904]              Balance[this] := 0;
[L1906]              __var_13 := ConstantToRef(506935249641133462427988555867660131141316463944);
[L1907]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_BaseToken[this][ConstantToRef(506935249641133462427988555867660131141316463944)];
[L1908]              balanceOf_BaseToken[this][ConstantToRef(506935249641133462427988555867660131141316463944)] := totalSupply_BaseToken[this];
[L1909]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_BaseToken[this][ConstantToRef(506935249641133462427988555867660131141316463944)];
[L1910]              assert { :EventEmitted "Transfer_CustomToken" } true;
[L1933]  RET         call CustomToken_CustomToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1934]  COND FALSE  !(revert)
[L890]   RET         call CustomToken_CustomToken__success(this, msgsender_MSG, msgvalue_MSG);
[L891]               assume !revert && gas >= 0;
[L3012]  RET         call CustomToken_CustomToken(this, msgsender_MSG, msgvalue_MSG);
[L3013]              assume !revert && gas >= 0;
[L3016]  CALL        call CorralChoice_CustomToken(this);
[L2881]              havoc msgsender_MSG;
[L2882]              havoc msgvalue_MSG;
[L2883]              havoc choice;
[L2884]              havoc __ret_0_name;
[L2885]              havoc __ret_0_symbol;
[L2886]              havoc __ret_0_decimals;
[L2887]              havoc __ret_0_totalSupply;
[L2888]              havoc __ret_0__totalLimit;
[L2889]              havoc arg483_s0;
[L2890]              havoc __ret_0_balanceOf;
[L2891]              havoc arg484_s0;
[L2892]              havoc arg485_s0;
[L2893]              havoc __ret_0_allowance;
[L2894]              havoc to_s284;
[L2895]              havoc value_s284;
[L2896]              havoc __ret_0_transfer;
[L2897]              havoc from_s321;
[L2898]              havoc to_s321;
[L2899]              havoc value_s321;
[L2900]              havoc __ret_0_transferFrom;
[L2901]              havoc spender_s357;
[L2902]              havoc value_s357;
[L2903]              havoc __ret_0_approve;
[L2904]              havoc spender_s406;
[L2905]              havoc addedValue_s406;
[L2906]              havoc __ret_0_increaseAllowance;
[L2907]              havoc spender_s455;
[L2908]              havoc subtractedValue_s455;
[L2909]              havoc __ret_0_decreaseAllowance;
[L2910]              havoc tmpNow;
[L2911]              havoc gas;
[L2912]              assume gas > 4000000 && gas <= 8000000;
[L2913]              tmpNow := now;
[L2914]              havoc now;
[L2915]              assume now > tmpNow;
[L2916]              assume msgsender_MSG != null;
[L2917]              assume DType[msgsender_MSG] != SafeMath;
[L2918]              assume DType[msgsender_MSG] != BaseToken;
[L2919]              assume DType[msgsender_MSG] != CustomToken;
[L2920]              Alloc[msgsender_MSG] := true;
[L2921]  COND FALSE  !(choice == 12)
[L2927]  COND FALSE  !(choice == 11)
[L2933]  COND FALSE  !(choice == 10)
[L2939]  COND FALSE  !(choice == 9)
[L2945]  COND FALSE  !(choice == 8)
[L2951]  COND FALSE  !(choice == 7)
[L2957]  COND FALSE  !(choice == 6)
[L2963]  COND FALSE  !(choice == 5)
[L2970]  COND TRUE   choice == 4
[L2971]              gas := gas - 21000;
[L2972]  COND TRUE   gas >= 0
[L2973]              assume value_s321 >= 0 && value_s321 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2974]              assume msgvalue_MSG == 0;
[L2975]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BaseToken(this, msgsender_MSG, msgvalue_MSG, from_s321, to_s321, value_s321);
[L274]               havoc __exception;
[L275]               revert := false;
[L276]   COND FALSE  !(__exception)
[L298]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BaseToken__success(this, msgsender_MSG, msgvalue_MSG, from_s321, to_s321, value_s321);
[L1665]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowance_BaseToken[this][from_s321][msgsender_MSG], value_s321);
[L1384]  COND FALSE  !(!(b_s82 <= a_s82))
[L1388]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1389]              __ret_0_ := c_s82;
[L1665]  RET         call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowance_BaseToken[this][from_s321][msgsender_MSG], value_s321);
[L1666]  COND FALSE  !(revert)
[L1669]              sum_allowance1[from_s321] := sum_allowance1[from_s321] - allowance_BaseToken[this][from_s321][msgsender_MSG];
[L1670]              allowance_BaseToken[this][from_s321][msgsender_MSG] := __var_7;
[L1671]              sum_allowance1[from_s321] := sum_allowance1[from_s321] + allowance_BaseToken[this][from_s321][msgsender_MSG];
[L1672]  COND TRUE   DType[this] == CustomToken
[L1673]  CALL        call _transfer~address~address~uint256_BaseToken__success(this, msgsender_MSG, msgvalue_MSG, from_s321, to_s321, value_s321);
[L1518]              __var_1 := null;
[L1519]  COND FALSE  !(!(to_s217 != null))
[L1523]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_BaseToken[this][from_s217], value_s217);
[L1384]  COND FALSE  !(!(b_s82 <= a_s82))
[L1388]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1389]              __ret_0_ := c_s82;
[L1523]  RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_BaseToken[this][from_s217], value_s217);
[L1524]  COND FALSE  !(revert)
[L1527]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_BaseToken[this][from_s217];
[L1528]              balanceOf_BaseToken[this][from_s217] := __var_2;
[L1529]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_BaseToken[this][from_s217];
[L1530]  CALL        call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_BaseToken[this][to_s217], value_s217);
[L1408]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1409]  COND FALSE  !(!(c_s106 >= a_s106))
[L1413]              __ret_0_ := c_s106;
[L1530]  RET         call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_BaseToken[this][to_s217], value_s217);
[L1531]  COND FALSE  !(revert)
[L1534]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_BaseToken[this][to_s217];
[L1535]              balanceOf_BaseToken[this][to_s217] := __var_3;
[L1536]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_BaseToken[this][to_s217];
[L1537]              assert { :EventEmitted "Transfer_BaseToken" } true;
[L1673]  RET         call _transfer~address~address~uint256_BaseToken__success(this, msgsender_MSG, msgvalue_MSG, from_s321, to_s321, value_s321);
[L1674]  COND FALSE  !(revert)
[L1685]              __ret_0_ := true;
[L298]   RET         call __ret_0_ := transferFrom~address~address~uint256_BaseToken__success(this, msgsender_MSG, msgvalue_MSG, from_s321, to_s321, value_s321);
[L299]               assume !revert && gas >= 0;
[L2975]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BaseToken(this, msgsender_MSG, msgvalue_MSG, from_s321, to_s321, value_s321);
[L3016]  RET         call CorralChoice_CustomToken(this);
[L3016]  CALL        call CorralChoice_CustomToken(this);
[L2881]              havoc msgsender_MSG;
[L2882]              havoc msgvalue_MSG;
[L2883]              havoc choice;
[L2884]              havoc __ret_0_name;
[L2885]              havoc __ret_0_symbol;
[L2886]              havoc __ret_0_decimals;
[L2887]              havoc __ret_0_totalSupply;
[L2888]              havoc __ret_0__totalLimit;
[L2889]              havoc arg483_s0;
[L2890]              havoc __ret_0_balanceOf;
[L2891]              havoc arg484_s0;
[L2892]              havoc arg485_s0;
[L2893]              havoc __ret_0_allowance;
[L2894]              havoc to_s284;
[L2895]              havoc value_s284;
[L2896]              havoc __ret_0_transfer;
[L2897]              havoc from_s321;
[L2898]              havoc to_s321;
[L2899]              havoc value_s321;
[L2900]              havoc __ret_0_transferFrom;
[L2901]              havoc spender_s357;
[L2902]              havoc value_s357;
[L2903]              havoc __ret_0_approve;
[L2904]              havoc spender_s406;
[L2905]              havoc addedValue_s406;
[L2906]              havoc __ret_0_increaseAllowance;
[L2907]              havoc spender_s455;
[L2908]              havoc subtractedValue_s455;
[L2909]              havoc __ret_0_decreaseAllowance;
[L2910]              havoc tmpNow;
[L2911]              havoc gas;
[L2912]              assume gas > 4000000 && gas <= 8000000;
[L2913]              tmpNow := now;
[L2914]              havoc now;
[L2915]              assume now > tmpNow;
[L2916]              assume msgsender_MSG != null;
[L2917]              assume DType[msgsender_MSG] != SafeMath;
[L2918]              assume DType[msgsender_MSG] != BaseToken;
[L2919]              assume DType[msgsender_MSG] != CustomToken;
[L2920]              Alloc[msgsender_MSG] := true;
[L2921]  COND FALSE  !(choice == 12)
[L2927]  COND FALSE  !(choice == 11)
[L2933]  COND FALSE  !(choice == 10)
[L2939]  COND FALSE  !(choice == 9)
[L2945]  COND FALSE  !(choice == 8)
[L2951]  COND FALSE  !(choice == 7)
[L2957]  COND FALSE  !(choice == 6)
[L2963]  COND TRUE   choice == 5
[L2964]              gas := gas - 21000;
[L2965]  COND TRUE   gas >= 0
[L2966]              assume value_s284 >= 0 && value_s284 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2967]              assume msgvalue_MSG == 0;
[L2968]  CALL        call __ret_0_transfer := transfer~address~uint256_BaseToken(this, msgsender_MSG, msgvalue_MSG, to_s284, value_s284);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s284 && value_s284 <= balanceOf_BaseToken[this][msgsender_MSG]) && value_s284 >= 0) && value_s284 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_BaseToken[this][to_s284] >= 0) && balanceOf_BaseToken[this][to_s284] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_BaseToken[this][msgsender_MSG] >= 0) && balanceOf_BaseToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BaseToken0 := true;
[L2]                 call_transfer_BaseToken0 := false;
[L2]                 revert := revert_hold;
[L218]               havoc __exception;
[L219]               revert := false;
[L220]   COND FALSE  !(__exception)
[L242]   CALL        call __ret_0_ := transfer~address~uint256_BaseToken__success(this, msgsender_MSG, msgvalue_MSG, to_s284, value_s284);
[L1618]  COND TRUE   DType[this] == CustomToken
[L1619]  CALL        call _transfer~address~address~uint256_BaseToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s284, value_s284);
[L1518]              __var_1 := null;
[L1519]  COND FALSE  !(!(to_s217 != null))
[L1523]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_BaseToken[this][from_s217], value_s217);
[L1384]  COND FALSE  !(!(b_s82 <= a_s82))
[L1388]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1389]              __ret_0_ := c_s82;
[L1523]  RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_BaseToken[this][from_s217], value_s217);
[L1524]  COND FALSE  !(revert)
[L1527]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_BaseToken[this][from_s217];
[L1528]              balanceOf_BaseToken[this][from_s217] := __var_2;
[L1529]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_BaseToken[this][from_s217];
[L1530]  CALL        call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_BaseToken[this][to_s217], value_s217);
[L1408]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1409]  COND FALSE  !(!(c_s106 >= a_s106))
[L1413]              __ret_0_ := c_s106;
[L1530]  RET         call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_BaseToken[this][to_s217], value_s217);
[L1531]  COND FALSE  !(revert)
[L1534]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_BaseToken[this][to_s217];
[L1535]              balanceOf_BaseToken[this][to_s217] := __var_3;
[L1536]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_BaseToken[this][to_s217];
[L1537]              assert { :EventEmitted "Transfer_BaseToken" } true;
[L1619]  RET         call _transfer~address~address~uint256_BaseToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s284, value_s284);
[L1620]  COND FALSE  !(revert)
[L1631]              __ret_0_ := true;
[L242]   RET         call __ret_0_ := transfer~address~uint256_BaseToken__success(this, msgsender_MSG, msgvalue_MSG, to_s284, value_s284);
[L243]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((__ret_0_ == true && totalSupply_BaseToken[this] == old(totalSupply_BaseToken[this])) && balanceOf_BaseToken[this] == old(balanceOf_BaseToken[this])) && allowance_BaseToken[this] == old(allowance_BaseToken[this]));
[L2]                 revert := revert_hold;
[L2968]  RET         call __ret_0_transfer := transfer~address~uint256_BaseToken(this, msgsender_MSG, msgvalue_MSG, to_s284, value_s284);
[L3016]  RET         call CorralChoice_CustomToken(this);

Loop:
[L3016]  CALL        call CorralChoice_CustomToken(this);
[L2881]              havoc msgsender_MSG;
[L2882]              havoc msgvalue_MSG;
[L2883]              havoc choice;
[L2884]              havoc __ret_0_name;
[L2885]              havoc __ret_0_symbol;
[L2886]              havoc __ret_0_decimals;
[L2887]              havoc __ret_0_totalSupply;
[L2888]              havoc __ret_0__totalLimit;
[L2889]              havoc arg483_s0;
[L2890]              havoc __ret_0_balanceOf;
[L2891]              havoc arg484_s0;
[L2892]              havoc arg485_s0;
[L2893]              havoc __ret_0_allowance;
[L2894]              havoc to_s284;
[L2895]              havoc value_s284;
[L2896]              havoc __ret_0_transfer;
[L2897]              havoc from_s321;
[L2898]              havoc to_s321;
[L2899]              havoc value_s321;
[L2900]              havoc __ret_0_transferFrom;
[L2901]              havoc spender_s357;
[L2902]              havoc value_s357;
[L2903]              havoc __ret_0_approve;
[L2904]              havoc spender_s406;
[L2905]              havoc addedValue_s406;
[L2906]              havoc __ret_0_increaseAllowance;
[L2907]              havoc spender_s455;
[L2908]              havoc subtractedValue_s455;
[L2909]              havoc __ret_0_decreaseAllowance;
[L2910]              havoc tmpNow;
[L2911]              havoc gas;
[L2912]              assume gas > 4000000 && gas <= 8000000;
[L2913]              tmpNow := now;
[L2914]              havoc now;
[L2915]              assume now > tmpNow;
[L2916]              assume msgsender_MSG != null;
[L2917]              assume DType[msgsender_MSG] != SafeMath;
[L2918]              assume DType[msgsender_MSG] != BaseToken;
[L2919]              assume DType[msgsender_MSG] != CustomToken;
[L2920]              Alloc[msgsender_MSG] := true;
[L2921]  COND TRUE   choice == 12
[L2922]              gas := gas - 21000;
[L2923]  COND FALSE  !(gas >= 0)
[L3016]  RET         call CorralChoice_CustomToken(this);

[2020-11-25 12:57:15,930 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:57:15,931 INFO  L82        PathProgramCache]: Analyzing trace with hash -1958588878, now seen corresponding path program 1 times
[2020-11-25 12:57:15,931 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:57:15,993 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:57:17,361 WARN  L188               SmtUtils]: Spent 140.00 ms on a formula simplification. DAG size of input: 185 DAG size of output: 60
[2020-11-25 12:57:17,610 WARN  L188               SmtUtils]: Spent 178.00 ms on a formula simplification. DAG size of input: 194 DAG size of output: 73
[2020-11-25 12:57:18,306 WARN  L188               SmtUtils]: Spent 499.00 ms on a formula simplification. DAG size of input: 288 DAG size of output: 108
[2020-11-25 12:57:19,559 WARN  L188               SmtUtils]: Spent 716.00 ms on a formula simplification. DAG size of input: 370 DAG size of output: 111
[2020-11-25 12:57:20,626 WARN  L188               SmtUtils]: Spent 353.00 ms on a formula simplification. DAG size of input: 337 DAG size of output: 98
[2020-11-25 12:57:21,344 WARN  L188               SmtUtils]: Spent 273.00 ms on a formula simplification. DAG size of input: 278 DAG size of output: 74
[2020-11-25 12:57:21,814 WARN  L188               SmtUtils]: Spent 321.00 ms on a formula simplification. DAG size of input: 277 DAG size of output: 73
[2020-11-25 12:57:22,544 WARN  L188               SmtUtils]: Spent 325.00 ms on a formula simplification. DAG size of input: 283 DAG size of output: 71
[2020-11-25 12:57:23,264 WARN  L188               SmtUtils]: Spent 395.00 ms on a formula simplification. DAG size of input: 236 DAG size of output: 54
[2020-11-25 12:57:23,816 WARN  L250   erpolLogProxyWrapper]: Already inconsistent.
[2020-11-25 12:57:23,876 WARN  L188               SmtUtils]: Spent 148.00 ms on a formula simplification. DAG size of input: 155 DAG size of output: 78
[2020-11-25 12:57:24,213 WARN  L188               SmtUtils]: Spent 203.00 ms on a formula simplification. DAG size of input: 181 DAG size of output: 88
[2020-11-25 12:57:24,766 WARN  L188               SmtUtils]: Spent 319.00 ms on a formula simplification. DAG size of input: 224 DAG size of output: 108
[2020-11-25 12:57:25,014 WARN  L188               SmtUtils]: Spent 100.00 ms on a formula simplification. DAG size of input: 208 DAG size of output: 44
[2020-11-25 12:57:26,244 WARN  L188               SmtUtils]: Spent 740.00 ms on a formula simplification. DAG size of input: 289 DAG size of output: 79
[2020-11-25 12:57:27,787 WARN  L188               SmtUtils]: Spent 744.00 ms on a formula simplification. DAG size of input: 291 DAG size of output: 81
[2020-11-25 12:57:28,872 WARN  L188               SmtUtils]: Spent 398.00 ms on a formula simplification. DAG size of input: 261 DAG size of output: 62
[2020-11-25 12:57:29,831 WARN  L188               SmtUtils]: Spent 358.00 ms on a formula simplification. DAG size of input: 246 DAG size of output: 57
[2020-11-25 12:57:30,674 WARN  L188               SmtUtils]: Spent 276.00 ms on a formula simplification. DAG size of input: 246 DAG size of output: 60
[2020-11-25 12:57:31,061 INFO  L134       CoverageAnalysis]: Checked inductivity of 55 backedges. 0 proven. 54 refuted. 0 times theorem prover too weak. 1 trivial. 0 not checked.
[2020-11-25 12:57:31,061 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 12:57:31,061 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [55] total 55
[2020-11-25 12:57:31,062 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 12:57:31,062 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 56 interpolants.
[2020-11-25 12:57:31,062 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=210, Invalid=2870, Unknown=0, NotChecked=0, Total=3080
[2020-11-25 12:57:31,063 INFO  L87              Difference]: Start difference. First operand 1236 states and 1343 transitions. cyclomatic complexity: 110 Second operand 56 states.
[2020-11-25 12:57:31,599 WARN  L188               SmtUtils]: Spent 289.00 ms on a formula simplification that was a NOOP. DAG size: 191
[2020-11-25 12:57:32,001 WARN  L188               SmtUtils]: Spent 278.00 ms on a formula simplification that was a NOOP. DAG size: 194
[2020-11-25 12:57:32,466 WARN  L188               SmtUtils]: Spent 329.00 ms on a formula simplification that was a NOOP. DAG size: 197
[2020-11-25 12:57:36,214 WARN  L188               SmtUtils]: Spent 231.00 ms on a formula simplification. DAG size of input: 122 DAG size of output: 96
[2020-11-25 12:57:36,897 WARN  L188               SmtUtils]: Spent 383.00 ms on a formula simplification. DAG size of input: 145 DAG size of output: 120
[2020-11-25 12:57:37,555 WARN  L188               SmtUtils]: Spent 471.00 ms on a formula simplification. DAG size of input: 161 DAG size of output: 142
[2020-11-25 12:57:41,531 WARN  L188               SmtUtils]: Spent 2.92 s on a formula simplification. DAG size of input: 274 DAG size of output: 230
[2020-11-25 12:57:42,234 WARN  L188               SmtUtils]: Spent 167.00 ms on a formula simplification. DAG size of input: 110 DAG size of output: 106
[2020-11-25 12:57:50,004 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:57:50,004 INFO  L93              Difference]: Finished difference Result 1419 states and 1589 transitions.
[2020-11-25 12:57:50,004 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 46 states. 
[2020-11-25 12:57:50,004 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1419 states and 1589 transitions.
[2020-11-25 12:57:50,007 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 12:57:50,010 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1419 states to 1419 states and 1589 transitions.
[2020-11-25 12:57:50,010 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 468
[2020-11-25 12:57:50,010 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 468
[2020-11-25 12:57:50,011 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1419 states and 1589 transitions.
[2020-11-25 12:57:50,012 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:57:50,012 INFO  L728         BuchiCegarLoop]: Abstraction has 1419 states and 1589 transitions.
[2020-11-25 12:57:50,013 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1419 states and 1589 transitions.
[2020-11-25 12:57:50,019 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1419 to 1384.
[2020-11-25 12:57:50,019 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1384 states.
[2020-11-25 12:57:50,020 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1384 states to 1384 states and 1542 transitions.
[2020-11-25 12:57:50,020 INFO  L751         BuchiCegarLoop]: Abstraction has 1384 states and 1542 transitions.
[2020-11-25 12:57:50,020 INFO  L631         BuchiCegarLoop]: Abstraction has 1384 states and 1542 transitions.
[2020-11-25 12:57:50,020 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 12:57:50,020 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1384 states and 1542 transitions.
[2020-11-25 12:57:50,022 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 12:57:50,022 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:57:50,022 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:57:50,023 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:57:50,023 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_BaseToken0 := false;
[L2]                 call_transfer_BaseToken0 := false;
[L2]     CALL        call main();
[L3006]              assume null == 0;
[L3007]  CALL        call this := FreshRefGenerator__success();
[L1275]              havoc newRef;
[L1276]              assume Alloc[newRef] == false;
[L1277]              Alloc[newRef] := true;
[L1278]              assume newRef != null;
[L3007]  RET         call this := FreshRefGenerator__success();
[L3008]              assume now >= 0;
[L3009]              assume DType[this] == CustomToken;
[L3010]              assume msgvalue_MSG == 0;
[L3011]              gas := gas - 53000;
[L3012]  CALL        call CustomToken_CustomToken(this, msgsender_MSG, msgvalue_MSG);
[L866]               havoc __exception;
[L867]               revert := false;
[L868]   COND FALSE  !(__exception)
[L890]   CALL        call CustomToken_CustomToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1929]  CALL        call BaseToken_BaseToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1481]  CALL        call BaseToken_BaseToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1457]              assume msgsender_MSG != null;
[L1458]              Balance[this] := 0;
[L1459]              name_BaseToken[this] := 1657376191;
[L1460]              symbol_BaseToken[this] := -853092303;
[L1461]              decimals_BaseToken[this] := 18;
[L1462]              totalSupply_BaseToken[this] := 525600000000000000000000000;
[L1463]              _totalLimit_BaseToken[this] := 100000000000000000000000000000000;
[L1464]              balanceOf_BaseToken[this] := zeroRefintArr();
[L1465]              sum_balanceOf0[this] := 0;
[L1466]              allowance_BaseToken[this] := zeroRefRefintArr();
[L1467]              sum_allowance1[this] := 0;
[L1481]  RET         call BaseToken_BaseToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1482]  COND FALSE  !(revert)
[L1929]  RET         call BaseToken_BaseToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1930]  COND FALSE  !(revert)
[L1933]  CALL        call CustomToken_CustomToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1903]              assume msgsender_MSG != null;
[L1904]              Balance[this] := 0;
[L1906]              __var_13 := ConstantToRef(506935249641133462427988555867660131141316463944);
[L1907]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_BaseToken[this][ConstantToRef(506935249641133462427988555867660131141316463944)];
[L1908]              balanceOf_BaseToken[this][ConstantToRef(506935249641133462427988555867660131141316463944)] := totalSupply_BaseToken[this];
[L1909]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_BaseToken[this][ConstantToRef(506935249641133462427988555867660131141316463944)];
[L1910]              assert { :EventEmitted "Transfer_CustomToken" } true;
[L1933]  RET         call CustomToken_CustomToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1934]  COND FALSE  !(revert)
[L890]   RET         call CustomToken_CustomToken__success(this, msgsender_MSG, msgvalue_MSG);
[L891]               assume !revert && gas >= 0;
[L3012]  RET         call CustomToken_CustomToken(this, msgsender_MSG, msgvalue_MSG);
[L3013]              assume !revert && gas >= 0;
[L3016]  CALL        call CorralChoice_CustomToken(this);
[L2881]              havoc msgsender_MSG;
[L2882]              havoc msgvalue_MSG;
[L2883]              havoc choice;
[L2884]              havoc __ret_0_name;
[L2885]              havoc __ret_0_symbol;
[L2886]              havoc __ret_0_decimals;
[L2887]              havoc __ret_0_totalSupply;
[L2888]              havoc __ret_0__totalLimit;
[L2889]              havoc arg483_s0;
[L2890]              havoc __ret_0_balanceOf;
[L2891]              havoc arg484_s0;
[L2892]              havoc arg485_s0;
[L2893]              havoc __ret_0_allowance;
[L2894]              havoc to_s284;
[L2895]              havoc value_s284;
[L2896]              havoc __ret_0_transfer;
[L2897]              havoc from_s321;
[L2898]              havoc to_s321;
[L2899]              havoc value_s321;
[L2900]              havoc __ret_0_transferFrom;
[L2901]              havoc spender_s357;
[L2902]              havoc value_s357;
[L2903]              havoc __ret_0_approve;
[L2904]              havoc spender_s406;
[L2905]              havoc addedValue_s406;
[L2906]              havoc __ret_0_increaseAllowance;
[L2907]              havoc spender_s455;
[L2908]              havoc subtractedValue_s455;
[L2909]              havoc __ret_0_decreaseAllowance;
[L2910]              havoc tmpNow;
[L2911]              havoc gas;
[L2912]              assume gas > 4000000 && gas <= 8000000;
[L2913]              tmpNow := now;
[L2914]              havoc now;
[L2915]              assume now > tmpNow;
[L2916]              assume msgsender_MSG != null;
[L2917]              assume DType[msgsender_MSG] != SafeMath;
[L2918]              assume DType[msgsender_MSG] != BaseToken;
[L2919]              assume DType[msgsender_MSG] != CustomToken;
[L2920]              Alloc[msgsender_MSG] := true;
[L2921]  COND FALSE  !(choice == 12)
[L2927]  COND FALSE  !(choice == 11)
[L2933]  COND FALSE  !(choice == 10)
[L2939]  COND FALSE  !(choice == 9)
[L2945]  COND FALSE  !(choice == 8)
[L2951]  COND FALSE  !(choice == 7)
[L2957]  COND FALSE  !(choice == 6)
[L2963]  COND TRUE   choice == 5
[L2964]              gas := gas - 21000;
[L2965]  COND TRUE   gas >= 0
[L2966]              assume value_s284 >= 0 && value_s284 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2967]              assume msgvalue_MSG == 0;
[L2968]  CALL        call __ret_0_transfer := transfer~address~uint256_BaseToken(this, msgsender_MSG, msgvalue_MSG, to_s284, value_s284);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == to_s284 && value_s284 <= balanceOf_BaseToken[this][msgsender_MSG]) && value_s284 >= 0) && value_s284 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_BaseToken[this][to_s284] >= 0) && balanceOf_BaseToken[this][to_s284] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_BaseToken[this][msgsender_MSG] >= 0) && balanceOf_BaseToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L218]               havoc __exception;
[L219]               revert := false;
[L220]   COND FALSE  !(__exception)
[L242]   CALL        call __ret_0_ := transfer~address~uint256_BaseToken__success(this, msgsender_MSG, msgvalue_MSG, to_s284, value_s284);
[L1618]  COND FALSE  !(DType[this] == CustomToken)
[L1623]  COND TRUE   DType[this] == BaseToken
[L1624]  CALL        call _transfer~address~address~uint256_BaseToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s284, value_s284);
[L1518]              __var_1 := null;
[L1519]  COND FALSE  !(!(to_s217 != null))
[L1523]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_BaseToken[this][from_s217], value_s217);
[L1384]  COND FALSE  !(!(b_s82 <= a_s82))
[L1388]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1389]              __ret_0_ := c_s82;
[L1523]  RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_BaseToken[this][from_s217], value_s217);
[L1524]  COND FALSE  !(revert)
[L1527]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_BaseToken[this][from_s217];
[L1528]              balanceOf_BaseToken[this][from_s217] := __var_2;
[L1529]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_BaseToken[this][from_s217];
[L1530]  CALL        call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_BaseToken[this][to_s217], value_s217);
[L1408]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1409]  COND FALSE  !(!(c_s106 >= a_s106))
[L1413]              __ret_0_ := c_s106;
[L1530]  RET         call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_BaseToken[this][to_s217], value_s217);
[L1531]  COND FALSE  !(revert)
[L1534]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_BaseToken[this][to_s217];
[L1535]              balanceOf_BaseToken[this][to_s217] := __var_3;
[L1536]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_BaseToken[this][to_s217];
[L1537]              assert { :EventEmitted "Transfer_BaseToken" } true;
[L1624]  RET         call _transfer~address~address~uint256_BaseToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s284, value_s284);
[L1625]  COND FALSE  !(revert)
[L1631]              __ret_0_ := true;
[L242]   RET         call __ret_0_ := transfer~address~uint256_BaseToken__success(this, msgsender_MSG, msgvalue_MSG, to_s284, value_s284);
[L243]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((__ret_0_ == true && totalSupply_BaseToken[this] == old(totalSupply_BaseToken[this])) && balanceOf_BaseToken[this] == old(balanceOf_BaseToken[this])) && allowance_BaseToken[this] == old(allowance_BaseToken[this]));
[L2]                 revert := revert_hold;
[L2968]  RET         call __ret_0_transfer := transfer~address~uint256_BaseToken(this, msgsender_MSG, msgvalue_MSG, to_s284, value_s284);
[L3016]  RET         call CorralChoice_CustomToken(this);
[L3016]  CALL        call CorralChoice_CustomToken(this);
[L2881]              havoc msgsender_MSG;
[L2882]              havoc msgvalue_MSG;
[L2883]              havoc choice;
[L2884]              havoc __ret_0_name;
[L2885]              havoc __ret_0_symbol;
[L2886]              havoc __ret_0_decimals;
[L2887]              havoc __ret_0_totalSupply;
[L2888]              havoc __ret_0__totalLimit;
[L2889]              havoc arg483_s0;
[L2890]              havoc __ret_0_balanceOf;
[L2891]              havoc arg484_s0;
[L2892]              havoc arg485_s0;
[L2893]              havoc __ret_0_allowance;
[L2894]              havoc to_s284;
[L2895]              havoc value_s284;
[L2896]              havoc __ret_0_transfer;
[L2897]              havoc from_s321;
[L2898]              havoc to_s321;
[L2899]              havoc value_s321;
[L2900]              havoc __ret_0_transferFrom;
[L2901]              havoc spender_s357;
[L2902]              havoc value_s357;
[L2903]              havoc __ret_0_approve;
[L2904]              havoc spender_s406;
[L2905]              havoc addedValue_s406;
[L2906]              havoc __ret_0_increaseAllowance;
[L2907]              havoc spender_s455;
[L2908]              havoc subtractedValue_s455;
[L2909]              havoc __ret_0_decreaseAllowance;
[L2910]              havoc tmpNow;
[L2911]              havoc gas;
[L2912]              assume gas > 4000000 && gas <= 8000000;
[L2913]              tmpNow := now;
[L2914]              havoc now;
[L2915]              assume now > tmpNow;
[L2916]              assume msgsender_MSG != null;
[L2917]              assume DType[msgsender_MSG] != SafeMath;
[L2918]              assume DType[msgsender_MSG] != BaseToken;
[L2919]              assume DType[msgsender_MSG] != CustomToken;
[L2920]              Alloc[msgsender_MSG] := true;
[L2921]  COND FALSE  !(choice == 12)
[L2927]  COND FALSE  !(choice == 11)
[L2933]  COND FALSE  !(choice == 10)
[L2939]  COND FALSE  !(choice == 9)
[L2945]  COND FALSE  !(choice == 8)
[L2951]  COND FALSE  !(choice == 7)
[L2957]  COND FALSE  !(choice == 6)
[L2963]  COND TRUE   choice == 5
[L2964]              gas := gas - 21000;
[L2965]  COND TRUE   gas >= 0
[L2966]              assume value_s284 >= 0 && value_s284 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2967]              assume msgvalue_MSG == 0;
[L2968]  CALL        call __ret_0_transfer := transfer~address~uint256_BaseToken(this, msgsender_MSG, msgvalue_MSG, to_s284, value_s284);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s284 && value_s284 <= balanceOf_BaseToken[this][msgsender_MSG]) && value_s284 >= 0) && value_s284 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_BaseToken[this][to_s284] >= 0) && balanceOf_BaseToken[this][to_s284] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_BaseToken[this][msgsender_MSG] >= 0) && balanceOf_BaseToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BaseToken0 := true;
[L2]                 call_transfer_BaseToken0 := false;
[L2]                 revert := revert_hold;
[L218]               havoc __exception;
[L219]               revert := false;
[L220]   COND FALSE  !(__exception)
[L242]   CALL        call __ret_0_ := transfer~address~uint256_BaseToken__success(this, msgsender_MSG, msgvalue_MSG, to_s284, value_s284);
[L1618]  COND TRUE   DType[this] == CustomToken
[L1619]  CALL        call _transfer~address~address~uint256_BaseToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s284, value_s284);
[L1518]              __var_1 := null;
[L1519]  COND FALSE  !(!(to_s217 != null))
[L1523]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_BaseToken[this][from_s217], value_s217);
[L1384]  COND FALSE  !(!(b_s82 <= a_s82))
[L1388]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1389]              __ret_0_ := c_s82;
[L1523]  RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_BaseToken[this][from_s217], value_s217);
[L1524]  COND FALSE  !(revert)
[L1527]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_BaseToken[this][from_s217];
[L1528]              balanceOf_BaseToken[this][from_s217] := __var_2;
[L1529]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_BaseToken[this][from_s217];
[L1530]  CALL        call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_BaseToken[this][to_s217], value_s217);
[L1408]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1409]  COND FALSE  !(!(c_s106 >= a_s106))
[L1413]              __ret_0_ := c_s106;
[L1530]  RET         call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_BaseToken[this][to_s217], value_s217);
[L1531]  COND FALSE  !(revert)
[L1534]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_BaseToken[this][to_s217];
[L1535]              balanceOf_BaseToken[this][to_s217] := __var_3;
[L1536]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_BaseToken[this][to_s217];
[L1537]              assert { :EventEmitted "Transfer_BaseToken" } true;
[L1619]  RET         call _transfer~address~address~uint256_BaseToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s284, value_s284);
[L1620]  COND FALSE  !(revert)
[L1631]              __ret_0_ := true;
[L242]   RET         call __ret_0_ := transfer~address~uint256_BaseToken__success(this, msgsender_MSG, msgvalue_MSG, to_s284, value_s284);
[L243]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((__ret_0_ == true && totalSupply_BaseToken[this] == old(totalSupply_BaseToken[this])) && balanceOf_BaseToken[this] == old(balanceOf_BaseToken[this])) && allowance_BaseToken[this] == old(allowance_BaseToken[this]));
[L2]                 revert := revert_hold;
[L2968]  RET         call __ret_0_transfer := transfer~address~uint256_BaseToken(this, msgsender_MSG, msgvalue_MSG, to_s284, value_s284);
[L3016]  RET         call CorralChoice_CustomToken(this);

Loop:
[L3016]  CALL        call CorralChoice_CustomToken(this);
[L2881]              havoc msgsender_MSG;
[L2882]              havoc msgvalue_MSG;
[L2883]              havoc choice;
[L2884]              havoc __ret_0_name;
[L2885]              havoc __ret_0_symbol;
[L2886]              havoc __ret_0_decimals;
[L2887]              havoc __ret_0_totalSupply;
[L2888]              havoc __ret_0__totalLimit;
[L2889]              havoc arg483_s0;
[L2890]              havoc __ret_0_balanceOf;
[L2891]              havoc arg484_s0;
[L2892]              havoc arg485_s0;
[L2893]              havoc __ret_0_allowance;
[L2894]              havoc to_s284;
[L2895]              havoc value_s284;
[L2896]              havoc __ret_0_transfer;
[L2897]              havoc from_s321;
[L2898]              havoc to_s321;
[L2899]              havoc value_s321;
[L2900]              havoc __ret_0_transferFrom;
[L2901]              havoc spender_s357;
[L2902]              havoc value_s357;
[L2903]              havoc __ret_0_approve;
[L2904]              havoc spender_s406;
[L2905]              havoc addedValue_s406;
[L2906]              havoc __ret_0_increaseAllowance;
[L2907]              havoc spender_s455;
[L2908]              havoc subtractedValue_s455;
[L2909]              havoc __ret_0_decreaseAllowance;
[L2910]              havoc tmpNow;
[L2911]              havoc gas;
[L2912]              assume gas > 4000000 && gas <= 8000000;
[L2913]              tmpNow := now;
[L2914]              havoc now;
[L2915]              assume now > tmpNow;
[L2916]              assume msgsender_MSG != null;
[L2917]              assume DType[msgsender_MSG] != SafeMath;
[L2918]              assume DType[msgsender_MSG] != BaseToken;
[L2919]              assume DType[msgsender_MSG] != CustomToken;
[L2920]              Alloc[msgsender_MSG] := true;
[L2921]  COND TRUE   choice == 12
[L2922]              gas := gas - 21000;
[L2923]  COND FALSE  !(gas >= 0)
[L3016]  RET         call CorralChoice_CustomToken(this);

[2020-11-25 12:57:50,025 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:57:50,025 INFO  L82        PathProgramCache]: Analyzing trace with hash -1125768620, now seen corresponding path program 1 times
[2020-11-25 12:57:50,026 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:57:50,034 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:57:50,080 INFO  L134       CoverageAnalysis]: Checked inductivity of 59 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 58 trivial. 0 not checked.
[2020-11-25 12:57:50,080 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 12:57:50,080 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 12:57:50,081 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 12:57:50,081 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 12:57:50,081 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-25 12:57:50,081 INFO  L87              Difference]: Start difference. First operand 1384 states and 1542 transitions. cyclomatic complexity: 164 Second operand 6 states.
[2020-11-25 12:57:50,100 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:57:50,101 INFO  L93              Difference]: Finished difference Result 1445 states and 1604 transitions.
[2020-11-25 12:57:50,101 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-11-25 12:57:50,101 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1445 states and 1604 transitions.
[2020-11-25 12:57:50,103 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 12:57:50,106 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1445 states to 1374 states and 1528 transitions.
[2020-11-25 12:57:50,106 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 435
[2020-11-25 12:57:50,107 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 435
[2020-11-25 12:57:50,107 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1374 states and 1528 transitions.
[2020-11-25 12:57:50,108 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:57:50,108 INFO  L728         BuchiCegarLoop]: Abstraction has 1374 states and 1528 transitions.
[2020-11-25 12:57:50,108 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1374 states and 1528 transitions.
[2020-11-25 12:57:50,114 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1374 to 1374.
[2020-11-25 12:57:50,115 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1374 states.
[2020-11-25 12:57:50,116 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1374 states to 1374 states and 1528 transitions.
[2020-11-25 12:57:50,116 INFO  L751         BuchiCegarLoop]: Abstraction has 1374 states and 1528 transitions.
[2020-11-25 12:57:50,116 INFO  L631         BuchiCegarLoop]: Abstraction has 1374 states and 1528 transitions.
[2020-11-25 12:57:50,116 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-25 12:57:50,116 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1374 states and 1528 transitions.
[2020-11-25 12:57:50,118 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 12:57:50,118 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:57:50,118 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:57:50,119 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:57:50,119 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_BaseToken0 := false;
[L2]                 call_transfer_BaseToken0 := false;
[L2]     CALL        call main();
[L3006]              assume null == 0;
[L3007]  CALL        call this := FreshRefGenerator__success();
[L1275]              havoc newRef;
[L1276]              assume Alloc[newRef] == false;
[L1277]              Alloc[newRef] := true;
[L1278]              assume newRef != null;
[L3007]  RET         call this := FreshRefGenerator__success();
[L3008]              assume now >= 0;
[L3009]              assume DType[this] == CustomToken;
[L3010]              assume msgvalue_MSG == 0;
[L3011]              gas := gas - 53000;
[L3012]  CALL        call CustomToken_CustomToken(this, msgsender_MSG, msgvalue_MSG);
[L866]               havoc __exception;
[L867]               revert := false;
[L868]   COND FALSE  !(__exception)
[L890]   CALL        call CustomToken_CustomToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1929]  CALL        call BaseToken_BaseToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1481]  CALL        call BaseToken_BaseToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1457]              assume msgsender_MSG != null;
[L1458]              Balance[this] := 0;
[L1459]              name_BaseToken[this] := 1657376191;
[L1460]              symbol_BaseToken[this] := -853092303;
[L1461]              decimals_BaseToken[this] := 18;
[L1462]              totalSupply_BaseToken[this] := 525600000000000000000000000;
[L1463]              _totalLimit_BaseToken[this] := 100000000000000000000000000000000;
[L1464]              balanceOf_BaseToken[this] := zeroRefintArr();
[L1465]              sum_balanceOf0[this] := 0;
[L1466]              allowance_BaseToken[this] := zeroRefRefintArr();
[L1467]              sum_allowance1[this] := 0;
[L1481]  RET         call BaseToken_BaseToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1482]  COND FALSE  !(revert)
[L1929]  RET         call BaseToken_BaseToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1930]  COND FALSE  !(revert)
[L1933]  CALL        call CustomToken_CustomToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1903]              assume msgsender_MSG != null;
[L1904]              Balance[this] := 0;
[L1906]              __var_13 := ConstantToRef(506935249641133462427988555867660131141316463944);
[L1907]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_BaseToken[this][ConstantToRef(506935249641133462427988555867660131141316463944)];
[L1908]              balanceOf_BaseToken[this][ConstantToRef(506935249641133462427988555867660131141316463944)] := totalSupply_BaseToken[this];
[L1909]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_BaseToken[this][ConstantToRef(506935249641133462427988555867660131141316463944)];
[L1910]              assert { :EventEmitted "Transfer_CustomToken" } true;
[L1933]  RET         call CustomToken_CustomToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1934]  COND FALSE  !(revert)
[L890]   RET         call CustomToken_CustomToken__success(this, msgsender_MSG, msgvalue_MSG);
[L891]               assume !revert && gas >= 0;
[L3012]  RET         call CustomToken_CustomToken(this, msgsender_MSG, msgvalue_MSG);
[L3013]              assume !revert && gas >= 0;
[L3016]  CALL        call CorralChoice_CustomToken(this);
[L2881]              havoc msgsender_MSG;
[L2882]              havoc msgvalue_MSG;
[L2883]              havoc choice;
[L2884]              havoc __ret_0_name;
[L2885]              havoc __ret_0_symbol;
[L2886]              havoc __ret_0_decimals;
[L2887]              havoc __ret_0_totalSupply;
[L2888]              havoc __ret_0__totalLimit;
[L2889]              havoc arg483_s0;
[L2890]              havoc __ret_0_balanceOf;
[L2891]              havoc arg484_s0;
[L2892]              havoc arg485_s0;
[L2893]              havoc __ret_0_allowance;
[L2894]              havoc to_s284;
[L2895]              havoc value_s284;
[L2896]              havoc __ret_0_transfer;
[L2897]              havoc from_s321;
[L2898]              havoc to_s321;
[L2899]              havoc value_s321;
[L2900]              havoc __ret_0_transferFrom;
[L2901]              havoc spender_s357;
[L2902]              havoc value_s357;
[L2903]              havoc __ret_0_approve;
[L2904]              havoc spender_s406;
[L2905]              havoc addedValue_s406;
[L2906]              havoc __ret_0_increaseAllowance;
[L2907]              havoc spender_s455;
[L2908]              havoc subtractedValue_s455;
[L2909]              havoc __ret_0_decreaseAllowance;
[L2910]              havoc tmpNow;
[L2911]              havoc gas;
[L2912]              assume gas > 4000000 && gas <= 8000000;
[L2913]              tmpNow := now;
[L2914]              havoc now;
[L2915]              assume now > tmpNow;
[L2916]              assume msgsender_MSG != null;
[L2917]              assume DType[msgsender_MSG] != SafeMath;
[L2918]              assume DType[msgsender_MSG] != BaseToken;
[L2919]              assume DType[msgsender_MSG] != CustomToken;
[L2920]              Alloc[msgsender_MSG] := true;
[L2921]  COND FALSE  !(choice == 12)
[L2927]  COND FALSE  !(choice == 11)
[L2933]  COND FALSE  !(choice == 10)
[L2939]  COND FALSE  !(choice == 9)
[L2945]  COND FALSE  !(choice == 8)
[L2951]  COND FALSE  !(choice == 7)
[L2957]  COND FALSE  !(choice == 6)
[L2963]  COND TRUE   choice == 5
[L2964]              gas := gas - 21000;
[L2965]  COND TRUE   gas >= 0
[L2966]              assume value_s284 >= 0 && value_s284 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2967]              assume msgvalue_MSG == 0;
[L2968]  CALL        call __ret_0_transfer := transfer~address~uint256_BaseToken(this, msgsender_MSG, msgvalue_MSG, to_s284, value_s284);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == to_s284 && value_s284 <= balanceOf_BaseToken[this][msgsender_MSG]) && value_s284 >= 0) && value_s284 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_BaseToken[this][to_s284] >= 0) && balanceOf_BaseToken[this][to_s284] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_BaseToken[this][msgsender_MSG] >= 0) && balanceOf_BaseToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L218]               havoc __exception;
[L219]               revert := false;
[L220]   COND FALSE  !(__exception)
[L242]   CALL        call __ret_0_ := transfer~address~uint256_BaseToken__success(this, msgsender_MSG, msgvalue_MSG, to_s284, value_s284);
[L1618]  COND TRUE   DType[this] == CustomToken
[L1619]  CALL        call _transfer~address~address~uint256_BaseToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s284, value_s284);
[L1518]              __var_1 := null;
[L1519]  COND FALSE  !(!(to_s217 != null))
[L1523]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_BaseToken[this][from_s217], value_s217);
[L1384]  COND FALSE  !(!(b_s82 <= a_s82))
[L1388]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1389]              __ret_0_ := c_s82;
[L1523]  RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_BaseToken[this][from_s217], value_s217);
[L1524]  COND FALSE  !(revert)
[L1527]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_BaseToken[this][from_s217];
[L1528]              balanceOf_BaseToken[this][from_s217] := __var_2;
[L1529]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_BaseToken[this][from_s217];
[L1530]  CALL        call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_BaseToken[this][to_s217], value_s217);
[L1408]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1409]  COND FALSE  !(!(c_s106 >= a_s106))
[L1413]              __ret_0_ := c_s106;
[L1530]  RET         call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_BaseToken[this][to_s217], value_s217);
[L1531]  COND FALSE  !(revert)
[L1534]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_BaseToken[this][to_s217];
[L1535]              balanceOf_BaseToken[this][to_s217] := __var_3;
[L1536]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_BaseToken[this][to_s217];
[L1537]              assert { :EventEmitted "Transfer_BaseToken" } true;
[L1619]  RET         call _transfer~address~address~uint256_BaseToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s284, value_s284);
[L1620]  COND FALSE  !(revert)
[L1631]              __ret_0_ := true;
[L242]   RET         call __ret_0_ := transfer~address~uint256_BaseToken__success(this, msgsender_MSG, msgvalue_MSG, to_s284, value_s284);
[L243]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((__ret_0_ == true && totalSupply_BaseToken[this] == old(totalSupply_BaseToken[this])) && balanceOf_BaseToken[this] == old(balanceOf_BaseToken[this])) && allowance_BaseToken[this] == old(allowance_BaseToken[this]));
[L2]                 revert := revert_hold;
[L2968]  RET         call __ret_0_transfer := transfer~address~uint256_BaseToken(this, msgsender_MSG, msgvalue_MSG, to_s284, value_s284);
[L3016]  RET         call CorralChoice_CustomToken(this);
[L3016]  CALL        call CorralChoice_CustomToken(this);
[L2881]              havoc msgsender_MSG;
[L2882]              havoc msgvalue_MSG;
[L2883]              havoc choice;
[L2884]              havoc __ret_0_name;
[L2885]              havoc __ret_0_symbol;
[L2886]              havoc __ret_0_decimals;
[L2887]              havoc __ret_0_totalSupply;
[L2888]              havoc __ret_0__totalLimit;
[L2889]              havoc arg483_s0;
[L2890]              havoc __ret_0_balanceOf;
[L2891]              havoc arg484_s0;
[L2892]              havoc arg485_s0;
[L2893]              havoc __ret_0_allowance;
[L2894]              havoc to_s284;
[L2895]              havoc value_s284;
[L2896]              havoc __ret_0_transfer;
[L2897]              havoc from_s321;
[L2898]              havoc to_s321;
[L2899]              havoc value_s321;
[L2900]              havoc __ret_0_transferFrom;
[L2901]              havoc spender_s357;
[L2902]              havoc value_s357;
[L2903]              havoc __ret_0_approve;
[L2904]              havoc spender_s406;
[L2905]              havoc addedValue_s406;
[L2906]              havoc __ret_0_increaseAllowance;
[L2907]              havoc spender_s455;
[L2908]              havoc subtractedValue_s455;
[L2909]              havoc __ret_0_decreaseAllowance;
[L2910]              havoc tmpNow;
[L2911]              havoc gas;
[L2912]              assume gas > 4000000 && gas <= 8000000;
[L2913]              tmpNow := now;
[L2914]              havoc now;
[L2915]              assume now > tmpNow;
[L2916]              assume msgsender_MSG != null;
[L2917]              assume DType[msgsender_MSG] != SafeMath;
[L2918]              assume DType[msgsender_MSG] != BaseToken;
[L2919]              assume DType[msgsender_MSG] != CustomToken;
[L2920]              Alloc[msgsender_MSG] := true;
[L2921]  COND FALSE  !(choice == 12)
[L2927]  COND FALSE  !(choice == 11)
[L2933]  COND FALSE  !(choice == 10)
[L2939]  COND FALSE  !(choice == 9)
[L2945]  COND FALSE  !(choice == 8)
[L2951]  COND FALSE  !(choice == 7)
[L2957]  COND FALSE  !(choice == 6)
[L2963]  COND TRUE   choice == 5
[L2964]              gas := gas - 21000;
[L2965]  COND TRUE   gas >= 0
[L2966]              assume value_s284 >= 0 && value_s284 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2967]              assume msgvalue_MSG == 0;
[L2968]  CALL        call __ret_0_transfer := transfer~address~uint256_BaseToken(this, msgsender_MSG, msgvalue_MSG, to_s284, value_s284);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s284 && value_s284 <= balanceOf_BaseToken[this][msgsender_MSG]) && value_s284 >= 0) && value_s284 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_BaseToken[this][to_s284] >= 0) && balanceOf_BaseToken[this][to_s284] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_BaseToken[this][msgsender_MSG] >= 0) && balanceOf_BaseToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BaseToken0 := true;
[L2]                 call_transfer_BaseToken0 := false;
[L2]                 revert := revert_hold;
[L218]               havoc __exception;
[L219]               revert := false;
[L220]   COND FALSE  !(__exception)
[L242]   CALL        call __ret_0_ := transfer~address~uint256_BaseToken__success(this, msgsender_MSG, msgvalue_MSG, to_s284, value_s284);
[L1618]  COND TRUE   DType[this] == CustomToken
[L1619]  CALL        call _transfer~address~address~uint256_BaseToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s284, value_s284);
[L1518]              __var_1 := null;
[L1519]  COND FALSE  !(!(to_s217 != null))
[L1523]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_BaseToken[this][from_s217], value_s217);
[L1384]  COND FALSE  !(!(b_s82 <= a_s82))
[L1388]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1389]              __ret_0_ := c_s82;
[L1523]  RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_BaseToken[this][from_s217], value_s217);
[L1524]  COND FALSE  !(revert)
[L1527]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_BaseToken[this][from_s217];
[L1528]              balanceOf_BaseToken[this][from_s217] := __var_2;
[L1529]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_BaseToken[this][from_s217];
[L1530]  CALL        call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_BaseToken[this][to_s217], value_s217);
[L1408]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1409]  COND FALSE  !(!(c_s106 >= a_s106))
[L1413]              __ret_0_ := c_s106;
[L1530]  RET         call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_BaseToken[this][to_s217], value_s217);
[L1531]  COND FALSE  !(revert)
[L1534]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_BaseToken[this][to_s217];
[L1535]              balanceOf_BaseToken[this][to_s217] := __var_3;
[L1536]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_BaseToken[this][to_s217];
[L1537]              assert { :EventEmitted "Transfer_BaseToken" } true;
[L1619]  RET         call _transfer~address~address~uint256_BaseToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s284, value_s284);
[L1620]  COND FALSE  !(revert)
[L1631]              __ret_0_ := true;
[L242]   RET         call __ret_0_ := transfer~address~uint256_BaseToken__success(this, msgsender_MSG, msgvalue_MSG, to_s284, value_s284);
[L243]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((__ret_0_ == true && totalSupply_BaseToken[this] == old(totalSupply_BaseToken[this])) && balanceOf_BaseToken[this] == old(balanceOf_BaseToken[this])) && allowance_BaseToken[this] == old(allowance_BaseToken[this]));
[L2]                 revert := revert_hold;
[L2968]  RET         call __ret_0_transfer := transfer~address~uint256_BaseToken(this, msgsender_MSG, msgvalue_MSG, to_s284, value_s284);
[L3016]  RET         call CorralChoice_CustomToken(this);

Loop:
[L3016]  CALL        call CorralChoice_CustomToken(this);
[L2881]              havoc msgsender_MSG;
[L2882]              havoc msgvalue_MSG;
[L2883]              havoc choice;
[L2884]              havoc __ret_0_name;
[L2885]              havoc __ret_0_symbol;
[L2886]              havoc __ret_0_decimals;
[L2887]              havoc __ret_0_totalSupply;
[L2888]              havoc __ret_0__totalLimit;
[L2889]              havoc arg483_s0;
[L2890]              havoc __ret_0_balanceOf;
[L2891]              havoc arg484_s0;
[L2892]              havoc arg485_s0;
[L2893]              havoc __ret_0_allowance;
[L2894]              havoc to_s284;
[L2895]              havoc value_s284;
[L2896]              havoc __ret_0_transfer;
[L2897]              havoc from_s321;
[L2898]              havoc to_s321;
[L2899]              havoc value_s321;
[L2900]              havoc __ret_0_transferFrom;
[L2901]              havoc spender_s357;
[L2902]              havoc value_s357;
[L2903]              havoc __ret_0_approve;
[L2904]              havoc spender_s406;
[L2905]              havoc addedValue_s406;
[L2906]              havoc __ret_0_increaseAllowance;
[L2907]              havoc spender_s455;
[L2908]              havoc subtractedValue_s455;
[L2909]              havoc __ret_0_decreaseAllowance;
[L2910]              havoc tmpNow;
[L2911]              havoc gas;
[L2912]              assume gas > 4000000 && gas <= 8000000;
[L2913]              tmpNow := now;
[L2914]              havoc now;
[L2915]              assume now > tmpNow;
[L2916]              assume msgsender_MSG != null;
[L2917]              assume DType[msgsender_MSG] != SafeMath;
[L2918]              assume DType[msgsender_MSG] != BaseToken;
[L2919]              assume DType[msgsender_MSG] != CustomToken;
[L2920]              Alloc[msgsender_MSG] := true;
[L2921]  COND FALSE  !(choice == 12)
[L2927]  COND FALSE  !(choice == 11)
[L2933]  COND FALSE  !(choice == 10)
[L2939]  COND FALSE  !(choice == 9)
[L2945]  COND FALSE  !(choice == 8)
[L2951]  COND FALSE  !(choice == 7)
[L2957]  COND FALSE  !(choice == 6)
[L2963]  COND TRUE   choice == 5
[L2964]              gas := gas - 21000;
[L2965]  COND TRUE   gas >= 0
[L2966]              assume value_s284 >= 0 && value_s284 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2967]              assume msgvalue_MSG == 0;
[L2968]  CALL        call __ret_0_transfer := transfer~address~uint256_BaseToken(this, msgsender_MSG, msgvalue_MSG, to_s284, value_s284);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == to_s284 && value_s284 <= balanceOf_BaseToken[this][msgsender_MSG]) && value_s284 >= 0) && value_s284 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_BaseToken[this][to_s284] >= 0) && balanceOf_BaseToken[this][to_s284] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_BaseToken[this][msgsender_MSG] >= 0) && balanceOf_BaseToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L218]               havoc __exception;
[L219]               revert := false;
[L220]   COND FALSE  !(__exception)
[L242]   CALL        call __ret_0_ := transfer~address~uint256_BaseToken__success(this, msgsender_MSG, msgvalue_MSG, to_s284, value_s284);
[L1618]  COND TRUE   DType[this] == CustomToken
[L1619]  CALL        call _transfer~address~address~uint256_BaseToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s284, value_s284);
[L1518]              __var_1 := null;
[L1519]  COND FALSE  !(!(to_s217 != null))
[L1523]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_BaseToken[this][from_s217], value_s217);
[L1384]  COND FALSE  !(!(b_s82 <= a_s82))
[L1388]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1389]              __ret_0_ := c_s82;
[L1523]  RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_BaseToken[this][from_s217], value_s217);
[L1524]  COND FALSE  !(revert)
[L1527]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_BaseToken[this][from_s217];
[L1528]              balanceOf_BaseToken[this][from_s217] := __var_2;
[L1529]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_BaseToken[this][from_s217];
[L1530]  CALL        call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_BaseToken[this][to_s217], value_s217);
[L1408]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1409]  COND FALSE  !(!(c_s106 >= a_s106))
[L1413]              __ret_0_ := c_s106;
[L1530]  RET         call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_BaseToken[this][to_s217], value_s217);
[L1531]  COND FALSE  !(revert)
[L1534]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_BaseToken[this][to_s217];
[L1535]              balanceOf_BaseToken[this][to_s217] := __var_3;
[L1536]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_BaseToken[this][to_s217];
[L1537]              assert { :EventEmitted "Transfer_BaseToken" } true;
[L1619]  RET         call _transfer~address~address~uint256_BaseToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s284, value_s284);
[L1620]  COND FALSE  !(revert)
[L1631]              __ret_0_ := true;
[L242]   RET         call __ret_0_ := transfer~address~uint256_BaseToken__success(this, msgsender_MSG, msgvalue_MSG, to_s284, value_s284);
[L243]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((__ret_0_ == true && totalSupply_BaseToken[this] == old(totalSupply_BaseToken[this])) && balanceOf_BaseToken[this] == old(balanceOf_BaseToken[this])) && allowance_BaseToken[this] == old(allowance_BaseToken[this]));
[L2]                 revert := revert_hold;
[L2968]  RET         call __ret_0_transfer := transfer~address~uint256_BaseToken(this, msgsender_MSG, msgvalue_MSG, to_s284, value_s284);
[L3016]  RET         call CorralChoice_CustomToken(this);

[2020-11-25 12:57:50,122 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:57:50,122 INFO  L82        PathProgramCache]: Analyzing trace with hash -1639156513, now seen corresponding path program 1 times
[2020-11-25 12:57:50,122 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:57:50,156 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:57:50,309 INFO  L134       CoverageAnalysis]: Checked inductivity of 59 backedges. 58 proven. 0 refuted. 0 times theorem prover too weak. 1 trivial. 0 not checked.
[2020-11-25 12:57:50,309 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 12:57:50,309 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [16] imperfect sequences [] total 16
[2020-11-25 12:57:50,310 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 12:57:50,310 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 16 interpolants.
[2020-11-25 12:57:50,310 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=38, Invalid=202, Unknown=0, NotChecked=0, Total=240
[2020-11-25 12:57:50,310 INFO  L87              Difference]: Start difference. First operand 1374 states and 1528 transitions. cyclomatic complexity: 160 Second operand 16 states.
[2020-11-25 12:57:51,165 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:57:51,165 INFO  L93              Difference]: Finished difference Result 717 states and 778 transitions.
[2020-11-25 12:57:51,165 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 16 states. 
[2020-11-25 12:57:51,165 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 717 states and 778 transitions.
[2020-11-25 12:57:51,167 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 12:57:51,167 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 717 states to 0 states and 0 transitions.
[2020-11-25 12:57:51,167 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-25 12:57:51,167 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-25 12:57:51,167 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-25 12:57:51,167 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:57:51,167 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 12:57:51,167 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 12:57:51,167 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 12:57:51,167 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-11-25 12:57:51,167 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-25 12:57:51,167 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 12:57:51,167 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-25 12:57:51,170 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 12:57:51 BasicIcfg
[2020-11-25 12:57:51,170 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 12:57:51,171 INFO  L168              Benchmark]: Toolchain (without parser) took 47144.49 ms. Allocated memory was 1.0 GB in the beginning and 3.3 GB in the end (delta: 2.2 GB). Free memory was 940.6 MB in the beginning and 1.7 GB in the end (delta: -741.7 MB). Peak memory consumption was 1.5 GB. Max. memory is 15.3 GB.
[2020-11-25 12:57:51,171 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 12:57:51,171 INFO  L168              Benchmark]: Boogie Preprocessor took 82.84 ms. Allocated memory is still 1.0 GB. Free memory was 940.6 MB in the beginning and 929.8 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 12:57:51,171 INFO  L168              Benchmark]: UtopiaSpecLang took 52.14 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 924.5 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 12:57:51,172 INFO  L168              Benchmark]: Boogie Printer took 12.68 ms. Allocated memory is still 1.0 GB. Free memory is still 924.5 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 12:57:51,172 INFO  L168              Benchmark]: RCFGBuilder took 603.78 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 843.9 MB in the end (delta: 80.5 MB). Peak memory consumption was 80.5 MB. Max. memory is 15.3 GB.
[2020-11-25 12:57:51,172 INFO  L168              Benchmark]: UtopiaLTL2Aut took 38.99 ms. Allocated memory is still 1.0 GB. Free memory was 843.9 MB in the beginning and 840.3 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
[2020-11-25 12:57:51,172 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1006.22 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 61.3 MB). Free memory was 840.3 MB in the beginning and 769.8 MB in the end (delta: 70.6 MB). Peak memory consumption was 131.9 MB. Max. memory is 15.3 GB.
[2020-11-25 12:57:51,173 INFO  L168              Benchmark]: BlockEncodingV2 took 123.01 ms. Allocated memory is still 1.1 GB. Free memory was 769.8 MB in the beginning and 726.2 MB in the end (delta: 43.5 MB). Peak memory consumption was 43.5 MB. Max. memory is 15.3 GB.
[2020-11-25 12:57:51,173 INFO  L168              Benchmark]: BuchiAutomizer took 45221.85 ms. Allocated memory was 1.1 GB in the beginning and 3.3 GB in the end (delta: 2.2 GB). Free memory was 726.2 MB in the beginning and 1.7 GB in the end (delta: -956.0 MB). Peak memory consumption was 1.2 GB. Max. memory is 15.3 GB.
[2020-11-25 12:57:51,175 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    2536 locations, 4488 edges
  - StatisticsResult: Encoded RCFG
    2500 locations, 4394 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 82.84 ms. Allocated memory is still 1.0 GB. Free memory was 940.6 MB in the beginning and 929.8 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 52.14 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 924.5 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 12.68 ms. Allocated memory is still 1.0 GB. Free memory is still 924.5 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * RCFGBuilder took 603.78 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 843.9 MB in the end (delta: 80.5 MB). Peak memory consumption was 80.5 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 38.99 ms. Allocated memory is still 1.0 GB. Free memory was 843.9 MB in the beginning and 840.3 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1006.22 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 61.3 MB). Free memory was 840.3 MB in the beginning and 769.8 MB in the end (delta: 70.6 MB). Peak memory consumption was 131.9 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 123.01 ms. Allocated memory is still 1.1 GB. Free memory was 769.8 MB in the beginning and 726.2 MB in the end (delta: 43.5 MB). Peak memory consumption was 43.5 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 45221.85 ms. Allocated memory was 1.1 GB in the beginning and 3.3 GB in the end (delta: 2.2 GB). Free memory was 726.2 MB in the beginning and 1.7 GB in the end (delta: -956.0 MB). Peak memory consumption was 1.2 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    1042 locations, 1369 edges
  - StatisticsResult: BuchiProgram size
    2536 locations, 4488 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 11 terminating modules (11 trivial, 0 deterministic, 0 nondeterministic). 11 modules have a trivial ranking function, the largest among these consists of 56 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 45.1s and 12 iterations.  TraceHistogramMax:2. Analysis of lassos took 16.9s. Construction of modules took 18.2s. BÃ¼chi inclusion checks took 9.5s. Highest rank in rank-based complementation 0. Minimization of det autom 11. Minimization of nondet autom 0. Automata minimization 0.1s AutomataMinimizationTime, 10 MinimizatonAttempts, 1382 StatesRemovedByMinimization, 7 NontrivialMinimizations. Non-live state removal took 0.1s Buchi closure took 0.0s. Biggest automaton had 1819 states and ocurred in iteration 6.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 17563 SDtfs, 19358 SDslu, 77944 SDs, 0 SdLazy, 74674 SolverSat, 3321 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 18.2s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU11 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_transfer_(success_transfer_BaseToken0)aseToken0) ==> ( <>(success_transfer_BaseToken0) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
