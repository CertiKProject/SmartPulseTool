This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 14:20:56,355 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 14:20:56,356 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 14:20:56,364 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 14:20:56,364 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 14:20:56,365 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 14:20:56,365 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 14:20:56,366 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 14:20:56,367 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 14:20:56,368 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 14:20:56,368 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 14:20:56,369 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 14:20:56,369 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 14:20:56,370 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 14:20:56,370 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 14:20:56,371 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 14:20:56,371 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 14:20:56,372 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 14:20:56,373 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 14:20:56,374 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 14:20:56,374 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 14:20:56,375 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 14:20:56,376 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 14:20:56,376 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 14:20:56,376 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 14:20:56,377 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 14:20:56,377 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 14:20:56,378 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 14:20:56,378 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 14:20:56,378 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 14:20:56,378 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 14:20:56,379 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 14:20:56,379 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 14:20:56,379 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 14:20:56,380 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 14:20:56,380 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 14:20:56,380 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 14:20:56,380 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 14:20:56,380 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 14:20:56,381 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 14:20:56,381 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 14:20:56,381 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 14:20:56,387 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 14:20:56,387 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 14:20:56,388 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 14:20:56,388 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 14:20:56,388 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 14:20:56,388 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 14:20:56,388 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 14:20:56,388 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 14:20:56,388 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 14:20:56,388 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 14:20:56,388 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 14:20:56,388 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 14:20:56,389 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 14:20:56,389 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 14:20:56,389 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 14:20:56,389 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 14:20:56,389 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 14:20:56,389 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 14:20:56,389 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 14:20:56,389 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 14:20:56,389 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 14:20:56,389 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 14:20:56,389 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 14:20:56,389 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 14:20:56,389 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 14:20:56,389 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 14:20:56,407 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 14:20:56,420 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 14:20:56,423 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 14:20:56,424 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 14:20:56,425 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 14:20:56,425 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/DplatformToken_0x2e4d380052c2db43cbed951e511db84aaa1b3c6e_transfer-self.bpl
[2020-11-25 14:20:56,425 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/DplatformToken_0x2e4d380052c2db43cbed951e511db84aaa1b3c6e_transfer-self.bpl'
[2020-11-25 14:20:56,513 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 14:20:56,514 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 14:20:56,514 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 14:20:56,515 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 14:20:56,515 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 14:20:56,531 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "DplatformToken_0x2e4d380052c2db43cbed951e511db84aaa1b3c6e_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:20:56" (1/1) ...
[2020-11-25 14:20:56,533 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "DplatformToken_0x2e4d380052c2db43cbed951e511db84aaa1b3c6e_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:20:56" (1/1) ...
[2020-11-25 14:20:56,564 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "DplatformToken_0x2e4d380052c2db43cbed951e511db84aaa1b3c6e_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:20:56" (1/1) ...
[2020-11-25 14:20:56,565 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "DplatformToken_0x2e4d380052c2db43cbed951e511db84aaa1b3c6e_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:20:56" (1/1) ...
[2020-11-25 14:20:56,593 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "DplatformToken_0x2e4d380052c2db43cbed951e511db84aaa1b3c6e_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:20:56" (1/1) ...
[2020-11-25 14:20:56,603 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "DplatformToken_0x2e4d380052c2db43cbed951e511db84aaa1b3c6e_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:20:56" (1/1) ...
[2020-11-25 14:20:56,612 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "DplatformToken_0x2e4d380052c2db43cbed951e511db84aaa1b3c6e_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:20:56" (1/1) ...
[2020-11-25 14:20:56,623 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 14:20:56,623 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 14:20:56,623 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 14:20:56,625 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 14:20:56,629 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "DplatformToken_0x2e4d380052c2db43cbed951e511db84aaa1b3c6e_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:20:56" (1/1) ...
[2020-11-25 14:20:56,649 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(ERC20.transfer(to, value), msg.sender == to && value <= _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.transfer(to, value), return == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowed_ERC20[this] == old(_allowed_ERC20[this]) && quantity_DplatformToken[this] == old(quantity_DplatformToken[this]) && balances_DplatformToken[this] == old(balances_DplatformToken[this]) && owner_DplatformToken[this] == old(owner_DplatformToken[this]) && startTime_DplatformToken[this] == old(startTime_DplatformToken[this]) && monthsTimestamp_DplatformToken[this] == old(monthsTimestamp_DplatformToken[this]) && fibseries_DplatformToken[this] == old(fibseries_DplatformToken[this]) && operatingTime_DplatformToken[this] == old(operatingTime_DplatformToken[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 14:20:56,654 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(ERC20.transfer(to, value), msg.sender == to && value <= _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.transfer(to, value), return == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowed_ERC20[this] == old(_allowed_ERC20[this]) && quantity_DplatformToken[this] == old(quantity_DplatformToken[this]) && balances_DplatformToken[this] == old(balances_DplatformToken[this]) && owner_DplatformToken[this] == old(owner_DplatformToken[this]) && startTime_DplatformToken[this] == old(startTime_DplatformToken[this]) && monthsTimestamp_DplatformToken[this] == old(monthsTimestamp_DplatformToken[this]) && fibseries_DplatformToken[this] == old(fibseries_DplatformToken[this]) && operatingTime_DplatformToken[this] == old(operatingTime_DplatformToken[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 14:20:56,662 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(ERC20.transfer(to, value), msg.sender == to && value <= _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.transfer(to, value), return == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowed_ERC20[this] == old(_allowed_ERC20[this]) && quantity_DplatformToken[this] == old(quantity_DplatformToken[this]) && balances_DplatformToken[this] == old(balances_DplatformToken[this]) && owner_DplatformToken[this] == old(owner_DplatformToken[this]) && startTime_DplatformToken[this] == old(startTime_DplatformToken[this]) && monthsTimestamp_DplatformToken[this] == old(monthsTimestamp_DplatformToken[this]) && fibseries_DplatformToken[this] == old(fibseries_DplatformToken[this]) && operatingTime_DplatformToken[this] == old(operatingTime_DplatformToken[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 14:20:56,668 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( msg.sender==to_s266 && value_s266<=_balances_ERC20[this][msg.sender] ) && value_s266>=0 ) && value_s266<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][to_s266]>=0 ) && _balances_ERC20[this][to_s266]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][msg.sender]>=0 ) && _balances_ERC20[this][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>],IdentifierExpression[to_s266,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]],BinaryExpression[COMPLEQ,IdentifierExpression[value_s266,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]],BinaryExpression[COMPGEQ,IdentifierExpression[value_s266,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[value_s266,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[to_s266,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[to_s266,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 14:20:56,672 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( ( ( ( __ret_0_==true && _totalSupply_ERC20[this]==( old(_totalSupply_ERC20[this]) ) ) && _balances_ERC20[this]==( old(_balances_ERC20[this]) ) ) && _allowed_ERC20[this]==( old(_allowed_ERC20[this]) ) ) && quantity_DplatformToken[this]==( old(quantity_DplatformToken[this]) ) ) && balances_DplatformToken[this]==( old(balances_DplatformToken[this]) ) ) && owner_DplatformToken[this]==( old(owner_DplatformToken[this]) ) ) && startTime_DplatformToken[this]==( old(startTime_DplatformToken[this]) ) ) && monthsTimestamp_DplatformToken[this]==( old(monthsTimestamp_DplatformToken[this]) ) ) && fibseries_DplatformToken[this]==( old(fibseries_DplatformToken[this]) ) ) && operatingTime_DplatformToken[this]==( old(operatingTime_DplatformToken[this]) ) ) && _name_ERC20Detailed[this]==( old(_name_ERC20Detailed[this]) ) ) && _symbol_ERC20Detailed[this]==( old(_symbol_ERC20Detailed[this]) ) ) && _decimals_ERC20Detailed[this]==( old(_decimals_ERC20Detailed[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[__ret_0_,<IMPLEMENTATION_OUTPARAM,transfer~address~uint256_ERC20>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_allowed_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_allowed_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[quantity_DplatformToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[quantity_DplatformToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[balances_DplatformToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[balances_DplatformToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[owner_DplatformToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[owner_DplatformToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[startTime_DplatformToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[startTime_DplatformToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[monthsTimestamp_DplatformToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[monthsTimestamp_DplatformToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[fibseries_DplatformToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[fibseries_DplatformToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[operatingTime_DplatformToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[operatingTime_DplatformToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_name_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_name_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_symbol_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_symbol_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_decimals_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_decimals_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]]
[2020-11-25 14:20:56,679 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(ERC20.transfer(to, value), msg.sender == to && value <= _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.transfer(to, value), return == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowed_ERC20[this] == old(_allowed_ERC20[this]) && quantity_DplatformToken[this] == old(quantity_DplatformToken[this]) && balances_DplatformToken[this] == old(balances_DplatformToken[this]) && owner_DplatformToken[this] == old(owner_DplatformToken[this]) && startTime_DplatformToken[this] == old(startTime_DplatformToken[this]) && monthsTimestamp_DplatformToken[this] == old(monthsTimestamp_DplatformToken[this]) && fibseries_DplatformToken[this] == old(fibseries_DplatformToken[this]) && operatingTime_DplatformToken[this] == old(operatingTime_DplatformToken[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 14:20:56,679 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transfer_ERC200) ==> ( <>AP(success_transfer_ERC200) ) ) )
Executed UtopiaSpecLang
[2020-11-25 14:20:56,691 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:20:56 PropertyContainer
[2020-11-25 14:20:56,692 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 14:20:56,692 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 14:20:56,692 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 14:20:56,692 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 14:20:56,693 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "DplatformToken_0x2e4d380052c2db43cbed951e511db84aaa1b3c6e_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:20:56" (1/2) ...
[2020-11-25 14:20:56,693 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 14:20:56,693 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 14:20:56,709 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:20:56" (2/2) ...
[2020-11-25 14:20:56,709 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 14:20:56,710 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 14:20:56,710 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 14:20:56,710 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 14:20:56,711 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "DplatformToken_0x2e4d380052c2db43cbed951e511db84aaa1b3c6e_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:20:56" (1/2) ...
[2020-11-25 14:20:56,761 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 14:20:56,761 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 14:20:56,762 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-25 14:20:56,762 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-25 14:20:56,762 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-25 14:20:56,762 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-25 14:20:56,762 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-25 14:20:56,762 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-25 14:20:56,762 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-25 14:20:56,762 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-25 14:20:56,762 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 14:20:56,762 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 14:20:56,762 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 14:20:56,762 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 14:20:56,763 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 14:20:56,763 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 14:20:56,763 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 14:20:56,763 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 14:20:56,763 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 14:20:56,763 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 14:20:56,763 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 14:20:56,763 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20
[2020-11-25 14:20:56,764 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20
[2020-11-25 14:20:56,764 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20
[2020-11-25 14:20:56,764 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20
[2020-11-25 14:20:56,764 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 14:20:56,764 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20
[2020-11-25 14:20:56,764 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20
[2020-11-25 14:20:56,764 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20
[2020-11-25 14:20:56,764 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 14:20:56,764 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20
[2020-11-25 14:20:56,764 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 14:20:56,764 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 14:20:56,765 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 14:20:56,765 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 14:20:56,765 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 14:20:56,765 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 14:20:56,765 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 14:20:56,765 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__success
[2020-11-25 14:20:56,765 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__success
[2020-11-25 14:20:56,765 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 14:20:56,765 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 14:20:56,765 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 14:20:56,766 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 14:20:56,766 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed
[2020-11-25 14:20:56,766 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed
[2020-11-25 14:20:56,766 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed
[2020-11-25 14:20:56,766 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed
[2020-11-25 14:20:56,766 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed
[2020-11-25 14:20:56,766 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed
[2020-11-25 14:20:56,766 INFO  L130     BoogieDeclarations]: Found specification of procedure DplatformToken_DplatformToken_NoBaseCtor__success
[2020-11-25 14:20:56,766 INFO  L130     BoogieDeclarations]: Found specification of procedure DplatformToken_DplatformToken
[2020-11-25 14:20:56,766 INFO  L138     BoogieDeclarations]: Found implementation of procedure DplatformToken_DplatformToken
[2020-11-25 14:20:56,766 INFO  L130     BoogieDeclarations]: Found specification of procedure runQuantityDPOM~address_DplatformToken
[2020-11-25 14:20:56,767 INFO  L138     BoogieDeclarations]: Found implementation of procedure runQuantityDPOM~address_DplatformToken
[2020-11-25 14:20:56,767 INFO  L130     BoogieDeclarations]: Found specification of procedure quantity_DplatformToken
[2020-11-25 14:20:56,767 INFO  L138     BoogieDeclarations]: Found implementation of procedure quantity_DplatformToken
[2020-11-25 14:20:56,767 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_DplatformToken
[2020-11-25 14:20:56,767 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_DplatformToken
[2020-11-25 14:20:56,767 INFO  L130     BoogieDeclarations]: Found specification of procedure startTime_DplatformToken
[2020-11-25 14:20:56,767 INFO  L138     BoogieDeclarations]: Found implementation of procedure startTime_DplatformToken
[2020-11-25 14:20:56,767 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 14:20:56,767 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 14:20:56,767 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 14:20:56,768 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-25 14:20:56,768 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-25 14:20:56,768 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 14:20:56,768 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 14:20:56,768 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 14:20:56,768 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 14:20:56,768 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Detailed
[2020-11-25 14:20:56,768 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Detailed
[2020-11-25 14:20:56,768 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_DplatformToken
[2020-11-25 14:20:56,768 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 14:20:56,769 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 14:20:56,769 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 14:20:56,769 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-25 14:20:56,769 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-25 14:20:56,769 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 14:20:56,769 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 14:20:56,769 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 14:20:56,769 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 14:20:56,769 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 14:20:56,769 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 14:20:56,770 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 14:20:56,770 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 14:20:56,770 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 14:20:56,770 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 14:20:56,770 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 14:20:56,770 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__success
[2020-11-25 14:20:56,770 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__fail
[2020-11-25 14:20:56,770 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__success
[2020-11-25 14:20:56,770 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__fail
[2020-11-25 14:20:56,770 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__success
[2020-11-25 14:20:56,770 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__fail
[2020-11-25 14:20:56,771 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__success
[2020-11-25 14:20:56,771 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 14:20:56,771 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__success
[2020-11-25 14:20:56,771 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__fail
[2020-11-25 14:20:56,771 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 14:20:56,771 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 14:20:56,771 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 14:20:56,771 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 14:20:56,771 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 14:20:56,771 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 14:20:56,772 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 14:20:56,772 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 14:20:56,772 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 14:20:56,772 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 14:20:56,772 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 14:20:56,772 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 14:20:56,772 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 14:20:56,772 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__success
[2020-11-25 14:20:56,772 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__fail
[2020-11-25 14:20:56,772 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__success
[2020-11-25 14:20:56,773 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__fail
[2020-11-25 14:20:56,773 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__success
[2020-11-25 14:20:56,773 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__fail
[2020-11-25 14:20:56,773 INFO  L130     BoogieDeclarations]: Found specification of procedure DplatformToken_DplatformToken_NoBaseCtor__fail
[2020-11-25 14:20:56,773 INFO  L130     BoogieDeclarations]: Found specification of procedure DplatformToken_DplatformToken__success
[2020-11-25 14:20:56,773 INFO  L130     BoogieDeclarations]: Found specification of procedure DplatformToken_DplatformToken__fail
[2020-11-25 14:20:56,773 INFO  L130     BoogieDeclarations]: Found specification of procedure runQuantityDPOM~address_DplatformToken__success
[2020-11-25 14:20:56,773 INFO  L130     BoogieDeclarations]: Found specification of procedure runQuantityDPOM~address_DplatformToken__fail
[2020-11-25 14:20:56,773 INFO  L130     BoogieDeclarations]: Found specification of procedure quantity_DplatformToken__success
[2020-11-25 14:20:56,773 INFO  L130     BoogieDeclarations]: Found specification of procedure quantity_DplatformToken__fail
[2020-11-25 14:20:56,773 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_DplatformToken__success
[2020-11-25 14:20:56,774 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_DplatformToken__fail
[2020-11-25 14:20:56,774 INFO  L130     BoogieDeclarations]: Found specification of procedure startTime_DplatformToken__success
[2020-11-25 14:20:56,774 INFO  L130     BoogieDeclarations]: Found specification of procedure startTime_DplatformToken__fail
[2020-11-25 14:20:56,774 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 14:20:56,774 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 14:20:56,774 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 14:20:56,774 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 14:20:56,774 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 14:20:56,774 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 14:20:56,775 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 14:20:56,775 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-25 14:20:56,775 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-25 14:20:56,775 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 14:20:56,775 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 14:20:56,775 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 14:20:56,775 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 14:20:56,775 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 14:20:56,775 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 14:20:56,776 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 14:20:56,776 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 14:20:56,776 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 14:20:56,776 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 14:20:56,776 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 14:20:56,776 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 14:20:56,776 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 14:20:56,776 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 14:20:56,776 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 14:20:56,776 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 14:20:56,777 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 14:20:56,777 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 14:20:56,777 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__fail
[2020-11-25 14:20:56,777 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__success
[2020-11-25 14:20:56,777 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__fail
[2020-11-25 14:20:56,777 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__success
[2020-11-25 14:20:56,777 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__fail
[2020-11-25 14:20:56,777 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__success
[2020-11-25 14:20:56,777 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 14:20:56,777 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__success
[2020-11-25 14:20:56,777 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__fail
[2020-11-25 14:20:56,778 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__success
[2020-11-25 14:20:56,778 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 14:20:56,778 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 14:20:56,778 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 14:20:56,778 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 14:20:56,778 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 14:20:56,778 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 14:20:56,778 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 14:20:56,778 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 14:20:56,778 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 14:20:56,778 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__success
[2020-11-25 14:20:56,779 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 14:20:56,779 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__success
[2020-11-25 14:20:56,779 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 14:20:56,779 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 14:20:56,779 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 14:20:56,779 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 14:20:56,779 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 14:20:56,779 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 14:20:56,779 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__fail
[2020-11-25 14:20:56,779 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__success
[2020-11-25 14:20:56,779 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__fail
[2020-11-25 14:20:56,779 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__success
[2020-11-25 14:20:56,780 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__fail
[2020-11-25 14:20:56,780 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__success
[2020-11-25 14:20:56,780 INFO  L138     BoogieDeclarations]: Found implementation of procedure DplatformToken_DplatformToken_NoBaseCtor__fail
[2020-11-25 14:20:56,780 INFO  L138     BoogieDeclarations]: Found implementation of procedure DplatformToken_DplatformToken_NoBaseCtor__success
[2020-11-25 14:20:56,780 INFO  L138     BoogieDeclarations]: Found implementation of procedure DplatformToken_DplatformToken__fail
[2020-11-25 14:20:56,780 INFO  L138     BoogieDeclarations]: Found implementation of procedure DplatformToken_DplatformToken__success
[2020-11-25 14:20:56,780 INFO  L138     BoogieDeclarations]: Found implementation of procedure runQuantityDPOM~address_DplatformToken__fail
[2020-11-25 14:20:56,780 INFO  L138     BoogieDeclarations]: Found implementation of procedure runQuantityDPOM~address_DplatformToken__success
[2020-11-25 14:20:56,780 INFO  L138     BoogieDeclarations]: Found implementation of procedure quantity_DplatformToken__fail
[2020-11-25 14:20:56,780 INFO  L138     BoogieDeclarations]: Found implementation of procedure quantity_DplatformToken__success
[2020-11-25 14:20:56,780 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_DplatformToken__fail
[2020-11-25 14:20:56,780 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_DplatformToken__success
[2020-11-25 14:20:56,781 INFO  L138     BoogieDeclarations]: Found implementation of procedure startTime_DplatformToken__fail
[2020-11-25 14:20:56,781 INFO  L138     BoogieDeclarations]: Found implementation of procedure startTime_DplatformToken__success
[2020-11-25 14:20:56,781 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 14:20:56,781 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 14:20:56,781 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 14:20:56,781 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 14:20:56,781 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 14:20:56,781 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 14:20:56,781 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-25 14:20:56,781 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-25 14:20:56,781 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 14:20:56,782 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 14:20:56,782 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 14:20:56,782 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 14:20:56,782 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Detailed
[2020-11-25 14:20:56,782 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Detailed
[2020-11-25 14:20:56,782 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_DplatformToken
[2020-11-25 14:20:56,782 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 14:20:56,782 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 14:20:56,782 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 14:20:56,983 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 14:20:56,983 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 14:20:56,984 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 14:20:57,511 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 14:20:57,512 INFO  L286             CfgBuilder]: Removed 5 assue(true) statements.
[2020-11-25 14:20:57,514 INFO  L202        PluginConnector]: Adding new model DplatformToken_0x2e4d380052c2db43cbed951e511db84aaa1b3c6e_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:20:57 BoogieIcfgContainer
[2020-11-25 14:20:57,515 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:20:56" (2/2) ...
[2020-11-25 14:20:57,515 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 14:20:57,515 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@77cccdd2 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:20:57, skipping insertion in model container
[2020-11-25 14:20:57,515 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 14:20:57,515 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 14:20:57,515 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 14:20:57,517 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 14:20:57,517 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "DplatformToken_0x2e4d380052c2db43cbed951e511db84aaa1b3c6e_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:20:56" (1/3) ...
[2020-11-25 14:20:57,518 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@5463f7a6 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:20:57, skipping insertion in model container
[2020-11-25 14:20:57,518 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:20:56" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 14:20:57,552 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:20:57 NWAContainer
[2020-11-25 14:20:57,553 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 14:20:57,553 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 14:20:57,553 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 14:20:57,554 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 14:20:57,554 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "DplatformToken_0x2e4d380052c2db43cbed951e511db84aaa1b3c6e_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:20:57" (3/4) ...
[2020-11-25 14:20:57,555 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@4bfc3dd3 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:20:57, skipping insertion in model container
[2020-11-25 14:20:57,555 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:20:57" (4/4) ...
[2020-11-25 14:20:57,558 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 14:20:57,562 INFO  L110   BuchiProductObserver]: Initial RCFG 1959 locations, 2477 edges
[2020-11-25 14:20:57,562 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 14:20:57,573 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 14:20:58,959 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 14:20:58,965 INFO  L110   BuchiProductObserver]: BuchiProgram size 4578 locations, 7947 edges
[2020-11-25 14:20:58,965 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:20:58 BoogieIcfgContainer
[2020-11-25 14:20:58,965 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 14:20:58,966 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 14:20:58,966 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 14:20:58,967 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 14:20:58,967 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:20:58" (1/1) ...
[2020-11-25 14:20:59,055 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_16 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][account_s621][msgsender_MSG], value_s621);
[2020-11-25 14:20:59,058 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_16 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___allowed_ERC20[this][account_s621][msgsender_MSG], value_s621);
[2020-11-25 14:20:59,070 INFO  L313           BlockEncoder]: Initial Icfg 4578 locations, 7947 edges
[2020-11-25 14:20:59,070 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 14:20:59,071 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 14:20:59,071 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 14:20:59,072 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 14:20:59,084 INFO  L70    emoveInfeasibleEdges]: Removed 102 edges and 13 locations because of local infeasibility
[2020-11-25 14:20:59,092 INFO  L70        RemoveSinkStates]: Removed 44 edges and 29 locations by removing sink states
[2020-11-25 14:20:59,104 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 14:20:59,108 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 14:20:59,112 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 14:20:59,112 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 14:20:59,117 INFO  L313           BlockEncoder]: Encoded RCFG 4510 locations, 7763 edges
[2020-11-25 14:20:59,118 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 02:20:59 BasicIcfg
[2020-11-25 14:20:59,118 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 14:20:59,118 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 14:20:59,118 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 14:20:59,121 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 14:20:59,121 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 14:20:59,121 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "DplatformToken_0x2e4d380052c2db43cbed951e511db84aaa1b3c6e_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:20:56" (1/6) ...
[2020-11-25 14:20:59,123 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@77f59082 and model type DplatformToken_0x2e4d380052c2db43cbed951e511db84aaa1b3c6e_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 02:20:59, skipping insertion in model container
[2020-11-25 14:20:59,123 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 14:20:59,123 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:20:56" (2/6) ...
[2020-11-25 14:20:59,123 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@77f59082 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 02:20:59, skipping insertion in model container
[2020-11-25 14:20:59,123 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 14:20:59,123 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "DplatformToken_0x2e4d380052c2db43cbed951e511db84aaa1b3c6e_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:20:57" (3/6) ...
[2020-11-25 14:20:59,123 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@77f59082 and model type DplatformToken_0x2e4d380052c2db43cbed951e511db84aaa1b3c6e_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 02:20:59, skipping insertion in model container
[2020-11-25 14:20:59,123 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 14:20:59,123 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:20:57" (4/6) ...
[2020-11-25 14:20:59,124 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@77f59082 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 02:20:59, skipping insertion in model container
[2020-11-25 14:20:59,124 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 14:20:59,124 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:20:58" (5/6) ...
[2020-11-25 14:20:59,124 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@77f59082 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 02:20:59, skipping insertion in model container
[2020-11-25 14:20:59,124 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 14:20:59,124 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 02:20:59" (6/6) ...
[2020-11-25 14:20:59,125 INFO  L404   chiAutomizerObserver]: Analyzing ICFG DplatformToken_0x2e4d380052c2db43cbed951e511db84aaa1b3c6e_transfer-self.bpl_BEv2
[2020-11-25 14:20:59,152 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 14:20:59,152 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 14:20:59,153 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 14:20:59,153 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 14:20:59,153 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 14:20:59,153 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 14:20:59,153 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 14:20:59,153 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 14:20:59,153 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 14:20:59,190 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4510 states.
[2020-11-25 14:20:59,237 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:20:59,237 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:20:59,237 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:20:59,244 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:20:59,244 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:20:59,244 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 14:20:59,244 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4510 states.
[2020-11-25 14:20:59,267 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:20:59,267 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:20:59,267 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:20:59,268 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:20:59,269 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L5422]              assume null == 0;
[L5423]  CALL        call this := FreshRefGenerator__success();
[L2696]              havoc newRef;
[L2697]              assume Alloc[newRef] == false;
[L2698]              Alloc[newRef] := true;
[L2699]              assume newRef != null;
[L5423]  RET         call this := FreshRefGenerator__success();
[L5424]              assume now >= 0;
[L5425]              assume DType[this] == DplatformToken;
[L5426]              assume msgvalue_MSG == 0;
[L5427]              gas := gas - 53000;
[L5428]  CALL        call DplatformToken_DplatformToken(this, msgsender_MSG, msgvalue_MSG);
[L1556]              havoc __exception;
[L1557]              revert := false;
[L1558]  COND FALSE  !(__exception)
[L1598]  CALL        call DplatformToken_DplatformToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3574]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2728]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2713]              assume msgsender_MSG != null;
[L2714]              Balance[this] := 0;
[L2728]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2729]  COND FALSE  !(revert)
[L3574]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3575]  COND TRUE   revert
[L1598]  RET         call DplatformToken_DplatformToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1599]              assume !revert && gas >= 0;
[L5428]  RET         call DplatformToken_DplatformToken(this, msgsender_MSG, msgvalue_MSG);
[L5429]              assume !revert && gas >= 0;

Loop:
[L5432]  CALL        call CorralChoice_DplatformToken(this);
[L5271]              havoc msgsender_MSG;
[L5272]              havoc msgvalue_MSG;
[L5273]              havoc choice;
[L5274]              havoc to_s266;
[L5275]              havoc value_s266;
[L5276]              havoc __ret_0_transfer;
[L5277]              havoc spender_s302;
[L5278]              havoc value_s302;
[L5279]              havoc __ret_0_approve;
[L5280]              havoc from_s351;
[L5281]              havoc to_s351;
[L5282]              havoc value_s351;
[L5283]              havoc __ret_0_transferFrom;
[L5284]              havoc __ret_0_totalSupply;
[L5285]              havoc owner_s231;
[L5286]              havoc __ret_0_balanceOf;
[L5287]              havoc owner_s247;
[L5288]              havoc spender_s247;
[L5289]              havoc __ret_0_allowance;
[L5290]              havoc spender_s400;
[L5291]              havoc addedValue_s400;
[L5292]              havoc __ret_0_increaseAllowance;
[L5293]              havoc spender_s449;
[L5294]              havoc subtractedValue_s449;
[L5295]              havoc __ret_0_decreaseAllowance;
[L5296]              havoc name_s652;
[L5297]              havoc symbol_s652;
[L5298]              havoc decimals_s652;
[L5299]              havoc __ret_0_name;
[L5300]              havoc __ret_0_symbol;
[L5301]              havoc __ret_0_decimals;
[L5302]              havoc __ret_0_quantity;
[L5303]              havoc __ret_0_owner;
[L5304]              havoc __ret_0_startTime;
[L5305]              havoc _to_s1165;
[L5306]              havoc tmpNow;
[L5307]              havoc gas;
[L5308]              assume gas > 4000000 && gas <= 8000000;
[L5309]              tmpNow := now;
[L5310]              havoc now;
[L5311]              assume now > tmpNow;
[L5312]              assume msgsender_MSG != null;
[L5313]              assume DType[msgsender_MSG] != IERC20;
[L5314]              assume DType[msgsender_MSG] != SafeMath;
[L5315]              assume DType[msgsender_MSG] != ERC20;
[L5316]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5317]              assume DType[msgsender_MSG] != DplatformToken;
[L5318]              Alloc[msgsender_MSG] := true;
[L5319]  COND TRUE   choice == 15
[L5320]              gas := gas - 21000;
[L5321]  COND FALSE  !(gas >= 0)
[L5432]  RET         call CorralChoice_DplatformToken(this);

[2020-11-25 14:20:59,282 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:20:59,282 INFO  L82        PathProgramCache]: Analyzing trace with hash 1803500936, now seen corresponding path program 1 times
[2020-11-25 14:20:59,285 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:20:59,310 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:20:59,348 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 14:20:59,350 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 14:20:59,350 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 14:20:59,657 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:20:59,665 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 14:20:59,666 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 14:20:59,667 INFO  L87              Difference]: Start difference. First operand 4510 states. Second operand 4 states.
[2020-11-25 14:21:00,081 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:21:00,081 INFO  L93              Difference]: Finished difference Result 3021 states and 3364 transitions.
[2020-11-25 14:21:00,081 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 14:21:00,082 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3021 states and 3364 transitions.
[2020-11-25 14:21:00,097 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:21:00,118 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3021 states to 3021 states and 3364 transitions.
[2020-11-25 14:21:00,119 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-25 14:21:00,121 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 766
[2020-11-25 14:21:00,122 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3021 states and 3364 transitions.
[2020-11-25 14:21:00,129 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:21:00,129 INFO  L728         BuchiCegarLoop]: Abstraction has 3021 states and 3364 transitions.
[2020-11-25 14:21:00,147 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3021 states and 3364 transitions.
[2020-11-25 14:21:00,193 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3021 to 3021.
[2020-11-25 14:21:00,194 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3021 states.
[2020-11-25 14:21:00,198 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3021 states to 3021 states and 3364 transitions.
[2020-11-25 14:21:00,199 INFO  L751         BuchiCegarLoop]: Abstraction has 3021 states and 3364 transitions.
[2020-11-25 14:21:00,199 INFO  L631         BuchiCegarLoop]: Abstraction has 3021 states and 3364 transitions.
[2020-11-25 14:21:00,199 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 14:21:00,199 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3021 states and 3364 transitions.
[2020-11-25 14:21:00,208 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:21:00,208 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:21:00,208 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:21:00,211 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:21:00,211 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L5422]              assume null == 0;
[L5423]  CALL        call this := FreshRefGenerator__success();
[L2696]              havoc newRef;
[L2697]              assume Alloc[newRef] == false;
[L2698]              Alloc[newRef] := true;
[L2699]              assume newRef != null;
[L5423]  RET         call this := FreshRefGenerator__success();
[L5424]              assume now >= 0;
[L5425]              assume DType[this] == DplatformToken;
[L5426]              assume msgvalue_MSG == 0;
[L5427]              gas := gas - 53000;
[L5428]  CALL        call DplatformToken_DplatformToken(this, msgsender_MSG, msgvalue_MSG);
[L1556]              havoc __exception;
[L1557]              revert := false;
[L1558]  COND FALSE  !(__exception)
[L1598]  CALL        call DplatformToken_DplatformToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3574]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2728]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2713]              assume msgsender_MSG != null;
[L2714]              Balance[this] := 0;
[L2728]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2729]  COND FALSE  !(revert)
[L3574]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3575]  COND TRUE   revert
[L1598]  RET         call DplatformToken_DplatformToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1599]              assume !revert && gas >= 0;
[L5428]  RET         call DplatformToken_DplatformToken(this, msgsender_MSG, msgvalue_MSG);
[L5429]              assume !revert && gas >= 0;
[L5432]  CALL        call CorralChoice_DplatformToken(this);
[L5271]              havoc msgsender_MSG;
[L5272]              havoc msgvalue_MSG;
[L5273]              havoc choice;
[L5274]              havoc to_s266;
[L5275]              havoc value_s266;
[L5276]              havoc __ret_0_transfer;
[L5277]              havoc spender_s302;
[L5278]              havoc value_s302;
[L5279]              havoc __ret_0_approve;
[L5280]              havoc from_s351;
[L5281]              havoc to_s351;
[L5282]              havoc value_s351;
[L5283]              havoc __ret_0_transferFrom;
[L5284]              havoc __ret_0_totalSupply;
[L5285]              havoc owner_s231;
[L5286]              havoc __ret_0_balanceOf;
[L5287]              havoc owner_s247;
[L5288]              havoc spender_s247;
[L5289]              havoc __ret_0_allowance;
[L5290]              havoc spender_s400;
[L5291]              havoc addedValue_s400;
[L5292]              havoc __ret_0_increaseAllowance;
[L5293]              havoc spender_s449;
[L5294]              havoc subtractedValue_s449;
[L5295]              havoc __ret_0_decreaseAllowance;
[L5296]              havoc name_s652;
[L5297]              havoc symbol_s652;
[L5298]              havoc decimals_s652;
[L5299]              havoc __ret_0_name;
[L5300]              havoc __ret_0_symbol;
[L5301]              havoc __ret_0_decimals;
[L5302]              havoc __ret_0_quantity;
[L5303]              havoc __ret_0_owner;
[L5304]              havoc __ret_0_startTime;
[L5305]              havoc _to_s1165;
[L5306]              havoc tmpNow;
[L5307]              havoc gas;
[L5308]              assume gas > 4000000 && gas <= 8000000;
[L5309]              tmpNow := now;
[L5310]              havoc now;
[L5311]              assume now > tmpNow;
[L5312]              assume msgsender_MSG != null;
[L5313]              assume DType[msgsender_MSG] != IERC20;
[L5314]              assume DType[msgsender_MSG] != SafeMath;
[L5315]              assume DType[msgsender_MSG] != ERC20;
[L5316]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5317]              assume DType[msgsender_MSG] != DplatformToken;
[L5318]              Alloc[msgsender_MSG] := true;
[L5319]  COND TRUE   choice == 15
[L5320]              gas := gas - 21000;
[L5321]  COND TRUE   gas >= 0
[L5322]              assume value_s266 >= 0 && value_s266 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5323]              assume msgvalue_MSG == 0;
[L5324]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s266, value_s266);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s266 && value_s266 <= _balances_ERC20[this][msgsender_MSG]) && value_s266 >= 0) && value_s266 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s266] >= 0) && _balances_ERC20[this][to_s266] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L655]               havoc __exception;
[L656]               revert := false;
[L657]   COND FALSE  !(__exception)
[L697]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s266, value_s266);
[L2997]  COND TRUE   DType[this] == DplatformToken
[L2998]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L3213]              __var_7 := null;
[L3214]  COND TRUE   !(to_s495 != null)
[L3215]              revert := true;
[L2998]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L2999]  COND TRUE   revert
[L697]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s266, value_s266);
[L698]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && quantity_DplatformToken[this] == old(quantity_DplatformToken[this])) && balances_DplatformToken[this] == old(balances_DplatformToken[this])) && owner_DplatformToken[this] == old(owner_DplatformToken[this])) && startTime_DplatformToken[this] == old(startTime_DplatformToken[this])) && monthsTimestamp_DplatformToken[this] == old(monthsTimestamp_DplatformToken[this])) && fibseries_DplatformToken[this] == old(fibseries_DplatformToken[this])) && operatingTime_DplatformToken[this] == old(operatingTime_DplatformToken[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L5324]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s266, value_s266);
[L5432]  RET         call CorralChoice_DplatformToken(this);

Loop:
[L5432]  CALL        call CorralChoice_DplatformToken(this);
[L5271]              havoc msgsender_MSG;
[L5272]              havoc msgvalue_MSG;
[L5273]              havoc choice;
[L5274]              havoc to_s266;
[L5275]              havoc value_s266;
[L5276]              havoc __ret_0_transfer;
[L5277]              havoc spender_s302;
[L5278]              havoc value_s302;
[L5279]              havoc __ret_0_approve;
[L5280]              havoc from_s351;
[L5281]              havoc to_s351;
[L5282]              havoc value_s351;
[L5283]              havoc __ret_0_transferFrom;
[L5284]              havoc __ret_0_totalSupply;
[L5285]              havoc owner_s231;
[L5286]              havoc __ret_0_balanceOf;
[L5287]              havoc owner_s247;
[L5288]              havoc spender_s247;
[L5289]              havoc __ret_0_allowance;
[L5290]              havoc spender_s400;
[L5291]              havoc addedValue_s400;
[L5292]              havoc __ret_0_increaseAllowance;
[L5293]              havoc spender_s449;
[L5294]              havoc subtractedValue_s449;
[L5295]              havoc __ret_0_decreaseAllowance;
[L5296]              havoc name_s652;
[L5297]              havoc symbol_s652;
[L5298]              havoc decimals_s652;
[L5299]              havoc __ret_0_name;
[L5300]              havoc __ret_0_symbol;
[L5301]              havoc __ret_0_decimals;
[L5302]              havoc __ret_0_quantity;
[L5303]              havoc __ret_0_owner;
[L5304]              havoc __ret_0_startTime;
[L5305]              havoc _to_s1165;
[L5306]              havoc tmpNow;
[L5307]              havoc gas;
[L5308]              assume gas > 4000000 && gas <= 8000000;
[L5309]              tmpNow := now;
[L5310]              havoc now;
[L5311]              assume now > tmpNow;
[L5312]              assume msgsender_MSG != null;
[L5313]              assume DType[msgsender_MSG] != IERC20;
[L5314]              assume DType[msgsender_MSG] != SafeMath;
[L5315]              assume DType[msgsender_MSG] != ERC20;
[L5316]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5317]              assume DType[msgsender_MSG] != DplatformToken;
[L5318]              Alloc[msgsender_MSG] := true;
[L5319]  COND TRUE   choice == 15
[L5320]              gas := gas - 21000;
[L5321]  COND TRUE   gas >= 0
[L5322]              assume value_s266 >= 0 && value_s266 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5323]              assume msgvalue_MSG == 0;
[L5324]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s266, value_s266);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s266 && value_s266 <= _balances_ERC20[this][msgsender_MSG]) && value_s266 >= 0) && value_s266 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s266] >= 0) && _balances_ERC20[this][to_s266] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L655]               havoc __exception;
[L656]               revert := false;
[L657]   COND FALSE  !(__exception)
[L697]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s266, value_s266);
[L2997]  COND TRUE   DType[this] == DplatformToken
[L2998]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L3213]              __var_7 := null;
[L3214]  COND TRUE   !(to_s495 != null)
[L3215]              revert := true;
[L2998]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L2999]  COND TRUE   revert
[L697]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s266, value_s266);
[L698]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && quantity_DplatformToken[this] == old(quantity_DplatformToken[this])) && balances_DplatformToken[this] == old(balances_DplatformToken[this])) && owner_DplatformToken[this] == old(owner_DplatformToken[this])) && startTime_DplatformToken[this] == old(startTime_DplatformToken[this])) && monthsTimestamp_DplatformToken[this] == old(monthsTimestamp_DplatformToken[this])) && fibseries_DplatformToken[this] == old(fibseries_DplatformToken[this])) && operatingTime_DplatformToken[this] == old(operatingTime_DplatformToken[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L5324]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s266, value_s266);
[L5432]  RET         call CorralChoice_DplatformToken(this);

[2020-11-25 14:21:00,215 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:21:00,216 INFO  L82        PathProgramCache]: Analyzing trace with hash 786129578, now seen corresponding path program 1 times
[2020-11-25 14:21:00,217 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:21:00,231 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:21:00,250 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 14:21:00,251 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 14:21:00,251 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 14:21:00,252 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:21:00,252 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 14:21:00,252 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 14:21:00,253 INFO  L87              Difference]: Start difference. First operand 3021 states and 3364 transitions. cyclomatic complexity: 353 Second operand 3 states.
[2020-11-25 14:21:00,327 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:21:00,327 INFO  L93              Difference]: Finished difference Result 3681 states and 4168 transitions.
[2020-11-25 14:21:00,327 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 14:21:00,328 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3681 states and 4168 transitions.
[2020-11-25 14:21:00,346 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 14:21:00,363 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3681 states to 3681 states and 4168 transitions.
[2020-11-25 14:21:00,363 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 935
[2020-11-25 14:21:00,364 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 935
[2020-11-25 14:21:00,364 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3681 states and 4168 transitions.
[2020-11-25 14:21:00,372 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:21:00,372 INFO  L728         BuchiCegarLoop]: Abstraction has 3681 states and 4168 transitions.
[2020-11-25 14:21:00,376 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3681 states and 4168 transitions.
[2020-11-25 14:21:00,412 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3681 to 3189.
[2020-11-25 14:21:00,412 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3189 states.
[2020-11-25 14:21:00,417 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3189 states to 3189 states and 3564 transitions.
[2020-11-25 14:21:00,417 INFO  L751         BuchiCegarLoop]: Abstraction has 3189 states and 3564 transitions.
[2020-11-25 14:21:00,417 INFO  L631         BuchiCegarLoop]: Abstraction has 3189 states and 3564 transitions.
[2020-11-25 14:21:00,417 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 14:21:00,417 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3189 states and 3564 transitions.
[2020-11-25 14:21:00,425 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:21:00,425 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:21:00,425 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:21:00,428 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:21:00,428 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L5422]              assume null == 0;
[L5423]  CALL        call this := FreshRefGenerator__success();
[L2696]              havoc newRef;
[L2697]              assume Alloc[newRef] == false;
[L2698]              Alloc[newRef] := true;
[L2699]              assume newRef != null;
[L5423]  RET         call this := FreshRefGenerator__success();
[L5424]              assume now >= 0;
[L5425]              assume DType[this] == DplatformToken;
[L5426]              assume msgvalue_MSG == 0;
[L5427]              gas := gas - 53000;
[L5428]  CALL        call DplatformToken_DplatformToken(this, msgsender_MSG, msgvalue_MSG);
[L1556]              havoc __exception;
[L1557]              revert := false;
[L1558]  COND FALSE  !(__exception)
[L1598]  CALL        call DplatformToken_DplatformToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3574]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2728]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2713]              assume msgsender_MSG != null;
[L2714]              Balance[this] := 0;
[L2728]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2729]  COND FALSE  !(revert)
[L3574]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3575]  COND FALSE  !(revert)
[L3578]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2930]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2728]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2713]              assume msgsender_MSG != null;
[L2714]              Balance[this] := 0;
[L2728]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2729]  COND FALSE  !(revert)
[L2930]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2931]  COND FALSE  !(revert)
[L2934]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2906]              assume msgsender_MSG != null;
[L2907]              Balance[this] := 0;
[L2908]              _balances_ERC20[this] := zeroRefintArr();
[L2909]              sum__balances0[this] := 0;
[L2910]              _allowed_ERC20[this] := zeroRefRefintArr();
[L2911]              sum__allowed1[this] := 0;
[L2912]              _totalSupply_ERC20[this] := 0;
[L2934]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2935]  COND FALSE  !(revert)
[L3578]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3579]  COND FALSE  !(revert)
[L3582]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1224663797, 727433945, 18);
[L3426]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2728]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2713]              assume msgsender_MSG != null;
[L2714]              Balance[this] := 0;
[L2728]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2729]  COND FALSE  !(revert)
[L3426]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3427]  COND FALSE  !(revert)
[L3430]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s652, symbol_s652, decimals_s652);
[L3401]              assume msgsender_MSG != null;
[L3402]              Balance[this] := 0;
[L3403]              _name_ERC20Detailed[this] := -1774930639;
[L3404]              _symbol_ERC20Detailed[this] := -1774930639;
[L3405]              _decimals_ERC20Detailed[this] := 0;
[L3407]              _name_ERC20Detailed[this] := name_s652;
[L3408]              _symbol_ERC20Detailed[this] := symbol_s652;
[L3409]              _decimals_ERC20Detailed[this] := decimals_s652;
[L3430]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s652, symbol_s652, decimals_s652);
[L3431]  COND FALSE  !(revert)
[L3582]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1224663797, 727433945, 18);
[L3583]  COND FALSE  !(revert)
[L3586]  CALL        call DplatformToken_DplatformToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3515]              assume msgsender_MSG != null;
[L3516]              Balance[this] := 0;
[L3517]              totalDPOM_DplatformToken[this] := 390000000 * (1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3518]              INITIAL_SUPPLY_DplatformToken[this] := 30000000 * (1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3519]              FIRST_YEAR_PERCENTAGE_DplatformToken[this] := 110;
[L3520]              SECOND_YEAR_PERCENTAGE_DplatformToken[this] := 106;
[L3521]              THIRD_YEAR_PERCENTAGE_DplatformToken[this] := 103;
[L3522]              FOURTH_YEAR_PERCENTAGE_DplatformToken[this] := 103;
[L3523]              FIFTH_YEAR_PERCENTAGE_DplatformToken[this] := 103;
[L3524]              quantity_DplatformToken[this] := 0;
[L3525]              balances_DplatformToken[this] := zeroRefintArr();
[L3526]              sum_balances2[this] := 0;
[L3527]              owner_DplatformToken[this] := null;
[L3528]              startTime_DplatformToken[this] := 0;
[L3529]              monthsTimestamp_DplatformToken[this] := zerointintArr();
[L3530]              sum_monthsTimestamp3[this] := 0;
[L3531]              Length_fibseries_DplatformToken_lvl0[this] := 0;
[L3532]              fibseries_DplatformToken[this] := zerointintArr();
[L3533]              sum_fibseries4[this] := 0;
[L3534]              operatingTime_DplatformToken[this] := 0;
[L3536]  COND TRUE   DType[this] == DplatformToken
[L3537]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, totalDPOM_DplatformToken[this]);
[L3264]              __var_10 := null;
[L3265]  COND TRUE   !(account_s537 != null)
[L3266]              revert := true;
[L3537]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, totalDPOM_DplatformToken[this]);
[L3538]  COND TRUE   revert
[L3586]  RET         call DplatformToken_DplatformToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3587]  COND FALSE  !(revert)
[L1598]  RET         call DplatformToken_DplatformToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1599]              assume !revert && gas >= 0;
[L5428]  RET         call DplatformToken_DplatformToken(this, msgsender_MSG, msgvalue_MSG);
[L5429]              assume !revert && gas >= 0;
[L5432]  CALL        call CorralChoice_DplatformToken(this);
[L5271]              havoc msgsender_MSG;
[L5272]              havoc msgvalue_MSG;
[L5273]              havoc choice;
[L5274]              havoc to_s266;
[L5275]              havoc value_s266;
[L5276]              havoc __ret_0_transfer;
[L5277]              havoc spender_s302;
[L5278]              havoc value_s302;
[L5279]              havoc __ret_0_approve;
[L5280]              havoc from_s351;
[L5281]              havoc to_s351;
[L5282]              havoc value_s351;
[L5283]              havoc __ret_0_transferFrom;
[L5284]              havoc __ret_0_totalSupply;
[L5285]              havoc owner_s231;
[L5286]              havoc __ret_0_balanceOf;
[L5287]              havoc owner_s247;
[L5288]              havoc spender_s247;
[L5289]              havoc __ret_0_allowance;
[L5290]              havoc spender_s400;
[L5291]              havoc addedValue_s400;
[L5292]              havoc __ret_0_increaseAllowance;
[L5293]              havoc spender_s449;
[L5294]              havoc subtractedValue_s449;
[L5295]              havoc __ret_0_decreaseAllowance;
[L5296]              havoc name_s652;
[L5297]              havoc symbol_s652;
[L5298]              havoc decimals_s652;
[L5299]              havoc __ret_0_name;
[L5300]              havoc __ret_0_symbol;
[L5301]              havoc __ret_0_decimals;
[L5302]              havoc __ret_0_quantity;
[L5303]              havoc __ret_0_owner;
[L5304]              havoc __ret_0_startTime;
[L5305]              havoc _to_s1165;
[L5306]              havoc tmpNow;
[L5307]              havoc gas;
[L5308]              assume gas > 4000000 && gas <= 8000000;
[L5309]              tmpNow := now;
[L5310]              havoc now;
[L5311]              assume now > tmpNow;
[L5312]              assume msgsender_MSG != null;
[L5313]              assume DType[msgsender_MSG] != IERC20;
[L5314]              assume DType[msgsender_MSG] != SafeMath;
[L5315]              assume DType[msgsender_MSG] != ERC20;
[L5316]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5317]              assume DType[msgsender_MSG] != DplatformToken;
[L5318]              Alloc[msgsender_MSG] := true;
[L5319]  COND TRUE   choice == 15
[L5320]              gas := gas - 21000;
[L5321]  COND TRUE   gas >= 0
[L5322]              assume value_s266 >= 0 && value_s266 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5323]              assume msgvalue_MSG == 0;
[L5324]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s266, value_s266);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s266 && value_s266 <= _balances_ERC20[this][msgsender_MSG]) && value_s266 >= 0) && value_s266 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s266] >= 0) && _balances_ERC20[this][to_s266] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L655]               havoc __exception;
[L656]               revert := false;
[L657]   COND FALSE  !(__exception)
[L697]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s266, value_s266);
[L2997]  COND TRUE   DType[this] == DplatformToken
[L2998]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L3213]              __var_7 := null;
[L3214]  COND TRUE   !(to_s495 != null)
[L3215]              revert := true;
[L2998]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L2999]  COND TRUE   revert
[L697]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s266, value_s266);
[L698]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && quantity_DplatformToken[this] == old(quantity_DplatformToken[this])) && balances_DplatformToken[this] == old(balances_DplatformToken[this])) && owner_DplatformToken[this] == old(owner_DplatformToken[this])) && startTime_DplatformToken[this] == old(startTime_DplatformToken[this])) && monthsTimestamp_DplatformToken[this] == old(monthsTimestamp_DplatformToken[this])) && fibseries_DplatformToken[this] == old(fibseries_DplatformToken[this])) && operatingTime_DplatformToken[this] == old(operatingTime_DplatformToken[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L5324]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s266, value_s266);
[L5432]  RET         call CorralChoice_DplatformToken(this);

Loop:
[L5432]  CALL        call CorralChoice_DplatformToken(this);
[L5271]              havoc msgsender_MSG;
[L5272]              havoc msgvalue_MSG;
[L5273]              havoc choice;
[L5274]              havoc to_s266;
[L5275]              havoc value_s266;
[L5276]              havoc __ret_0_transfer;
[L5277]              havoc spender_s302;
[L5278]              havoc value_s302;
[L5279]              havoc __ret_0_approve;
[L5280]              havoc from_s351;
[L5281]              havoc to_s351;
[L5282]              havoc value_s351;
[L5283]              havoc __ret_0_transferFrom;
[L5284]              havoc __ret_0_totalSupply;
[L5285]              havoc owner_s231;
[L5286]              havoc __ret_0_balanceOf;
[L5287]              havoc owner_s247;
[L5288]              havoc spender_s247;
[L5289]              havoc __ret_0_allowance;
[L5290]              havoc spender_s400;
[L5291]              havoc addedValue_s400;
[L5292]              havoc __ret_0_increaseAllowance;
[L5293]              havoc spender_s449;
[L5294]              havoc subtractedValue_s449;
[L5295]              havoc __ret_0_decreaseAllowance;
[L5296]              havoc name_s652;
[L5297]              havoc symbol_s652;
[L5298]              havoc decimals_s652;
[L5299]              havoc __ret_0_name;
[L5300]              havoc __ret_0_symbol;
[L5301]              havoc __ret_0_decimals;
[L5302]              havoc __ret_0_quantity;
[L5303]              havoc __ret_0_owner;
[L5304]              havoc __ret_0_startTime;
[L5305]              havoc _to_s1165;
[L5306]              havoc tmpNow;
[L5307]              havoc gas;
[L5308]              assume gas > 4000000 && gas <= 8000000;
[L5309]              tmpNow := now;
[L5310]              havoc now;
[L5311]              assume now > tmpNow;
[L5312]              assume msgsender_MSG != null;
[L5313]              assume DType[msgsender_MSG] != IERC20;
[L5314]              assume DType[msgsender_MSG] != SafeMath;
[L5315]              assume DType[msgsender_MSG] != ERC20;
[L5316]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5317]              assume DType[msgsender_MSG] != DplatformToken;
[L5318]              Alloc[msgsender_MSG] := true;
[L5319]  COND TRUE   choice == 15
[L5320]              gas := gas - 21000;
[L5321]  COND TRUE   gas >= 0
[L5322]              assume value_s266 >= 0 && value_s266 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5323]              assume msgvalue_MSG == 0;
[L5324]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s266, value_s266);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s266 && value_s266 <= _balances_ERC20[this][msgsender_MSG]) && value_s266 >= 0) && value_s266 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s266] >= 0) && _balances_ERC20[this][to_s266] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L655]               havoc __exception;
[L656]               revert := false;
[L657]   COND FALSE  !(__exception)
[L697]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s266, value_s266);
[L2997]  COND TRUE   DType[this] == DplatformToken
[L2998]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L3213]              __var_7 := null;
[L3214]  COND TRUE   !(to_s495 != null)
[L3215]              revert := true;
[L2998]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L2999]  COND TRUE   revert
[L697]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s266, value_s266);
[L698]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && quantity_DplatformToken[this] == old(quantity_DplatformToken[this])) && balances_DplatformToken[this] == old(balances_DplatformToken[this])) && owner_DplatformToken[this] == old(owner_DplatformToken[this])) && startTime_DplatformToken[this] == old(startTime_DplatformToken[this])) && monthsTimestamp_DplatformToken[this] == old(monthsTimestamp_DplatformToken[this])) && fibseries_DplatformToken[this] == old(fibseries_DplatformToken[this])) && operatingTime_DplatformToken[this] == old(operatingTime_DplatformToken[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L5324]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s266, value_s266);
[L5432]  RET         call CorralChoice_DplatformToken(this);

[2020-11-25 14:21:00,432 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:21:00,433 INFO  L82        PathProgramCache]: Analyzing trace with hash 1397921864, now seen corresponding path program 1 times
[2020-11-25 14:21:00,433 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:21:00,451 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:21:00,496 INFO  L134       CoverageAnalysis]: Checked inductivity of 30 backedges. 0 proven. 14 refuted. 0 times theorem prover too weak. 16 trivial. 0 not checked.
[2020-11-25 14:21:00,496 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 14:21:00,496 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-11-25 14:21:00,497 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:21:00,497 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 14:21:00,497 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 14:21:00,497 INFO  L87              Difference]: Start difference. First operand 3189 states and 3564 transitions. cyclomatic complexity: 385 Second operand 7 states.
[2020-11-25 14:21:00,548 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:21:00,548 INFO  L93              Difference]: Finished difference Result 3203 states and 3577 transitions.
[2020-11-25 14:21:00,548 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 14:21:00,548 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3203 states and 3577 transitions.
[2020-11-25 14:21:00,556 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:21:00,565 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3203 states to 3188 states and 3562 transitions.
[2020-11-25 14:21:00,565 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 790
[2020-11-25 14:21:00,566 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 790
[2020-11-25 14:21:00,566 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3188 states and 3562 transitions.
[2020-11-25 14:21:00,568 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:21:00,568 INFO  L728         BuchiCegarLoop]: Abstraction has 3188 states and 3562 transitions.
[2020-11-25 14:21:00,571 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3188 states and 3562 transitions.
[2020-11-25 14:21:00,594 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3188 to 3188.
[2020-11-25 14:21:00,594 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3188 states.
[2020-11-25 14:21:00,597 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3188 states to 3188 states and 3562 transitions.
[2020-11-25 14:21:00,597 INFO  L751         BuchiCegarLoop]: Abstraction has 3188 states and 3562 transitions.
[2020-11-25 14:21:00,597 INFO  L631         BuchiCegarLoop]: Abstraction has 3188 states and 3562 transitions.
[2020-11-25 14:21:00,597 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 14:21:00,597 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3188 states and 3562 transitions.
[2020-11-25 14:21:00,601 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:21:00,601 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:21:00,601 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:21:00,602 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:21:00,602 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L5422]              assume null == 0;
[L5423]  CALL        call this := FreshRefGenerator__success();
[L2696]              havoc newRef;
[L2697]              assume Alloc[newRef] == false;
[L2698]              Alloc[newRef] := true;
[L2699]              assume newRef != null;
[L5423]  RET         call this := FreshRefGenerator__success();
[L5424]              assume now >= 0;
[L5425]              assume DType[this] == DplatformToken;
[L5426]              assume msgvalue_MSG == 0;
[L5427]              gas := gas - 53000;
[L5428]  CALL        call DplatformToken_DplatformToken(this, msgsender_MSG, msgvalue_MSG);
[L1556]              havoc __exception;
[L1557]              revert := false;
[L1558]  COND FALSE  !(__exception)
[L1598]  CALL        call DplatformToken_DplatformToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3574]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2728]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2713]              assume msgsender_MSG != null;
[L2714]              Balance[this] := 0;
[L2728]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2729]  COND FALSE  !(revert)
[L3574]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3575]  COND FALSE  !(revert)
[L3578]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2930]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2728]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2713]              assume msgsender_MSG != null;
[L2714]              Balance[this] := 0;
[L2728]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2729]  COND FALSE  !(revert)
[L2930]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2931]  COND FALSE  !(revert)
[L2934]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2906]              assume msgsender_MSG != null;
[L2907]              Balance[this] := 0;
[L2908]              _balances_ERC20[this] := zeroRefintArr();
[L2909]              sum__balances0[this] := 0;
[L2910]              _allowed_ERC20[this] := zeroRefRefintArr();
[L2911]              sum__allowed1[this] := 0;
[L2912]              _totalSupply_ERC20[this] := 0;
[L2934]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2935]  COND FALSE  !(revert)
[L3578]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3579]  COND FALSE  !(revert)
[L3582]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1224663797, 727433945, 18);
[L3426]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2728]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2713]              assume msgsender_MSG != null;
[L2714]              Balance[this] := 0;
[L2728]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2729]  COND FALSE  !(revert)
[L3426]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3427]  COND FALSE  !(revert)
[L3430]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s652, symbol_s652, decimals_s652);
[L3401]              assume msgsender_MSG != null;
[L3402]              Balance[this] := 0;
[L3403]              _name_ERC20Detailed[this] := -1774930639;
[L3404]              _symbol_ERC20Detailed[this] := -1774930639;
[L3405]              _decimals_ERC20Detailed[this] := 0;
[L3407]              _name_ERC20Detailed[this] := name_s652;
[L3408]              _symbol_ERC20Detailed[this] := symbol_s652;
[L3409]              _decimals_ERC20Detailed[this] := decimals_s652;
[L3430]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s652, symbol_s652, decimals_s652);
[L3431]  COND FALSE  !(revert)
[L3582]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1224663797, 727433945, 18);
[L3583]  COND FALSE  !(revert)
[L3586]  CALL        call DplatformToken_DplatformToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3515]              assume msgsender_MSG != null;
[L3516]              Balance[this] := 0;
[L3517]              totalDPOM_DplatformToken[this] := 390000000 * (1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3518]              INITIAL_SUPPLY_DplatformToken[this] := 30000000 * (1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3519]              FIRST_YEAR_PERCENTAGE_DplatformToken[this] := 110;
[L3520]              SECOND_YEAR_PERCENTAGE_DplatformToken[this] := 106;
[L3521]              THIRD_YEAR_PERCENTAGE_DplatformToken[this] := 103;
[L3522]              FOURTH_YEAR_PERCENTAGE_DplatformToken[this] := 103;
[L3523]              FIFTH_YEAR_PERCENTAGE_DplatformToken[this] := 103;
[L3524]              quantity_DplatformToken[this] := 0;
[L3525]              balances_DplatformToken[this] := zeroRefintArr();
[L3526]              sum_balances2[this] := 0;
[L3527]              owner_DplatformToken[this] := null;
[L3528]              startTime_DplatformToken[this] := 0;
[L3529]              monthsTimestamp_DplatformToken[this] := zerointintArr();
[L3530]              sum_monthsTimestamp3[this] := 0;
[L3531]              Length_fibseries_DplatformToken_lvl0[this] := 0;
[L3532]              fibseries_DplatformToken[this] := zerointintArr();
[L3533]              sum_fibseries4[this] := 0;
[L3534]              operatingTime_DplatformToken[this] := 0;
[L3536]  COND TRUE   DType[this] == DplatformToken
[L3537]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, totalDPOM_DplatformToken[this]);
[L3264]              __var_10 := null;
[L3265]  COND FALSE  !(!(account_s537 != null))
[L3269]  CALL        call __var_11 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s537);
[L2861]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2862]  COND TRUE   !(c_s173 >= a_s173)
[L2863]              revert := true;
[L3269]  RET         call __var_11 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s537);
[L3270]  COND TRUE   revert
[L3537]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, totalDPOM_DplatformToken[this]);
[L3538]  COND TRUE   revert
[L3586]  RET         call DplatformToken_DplatformToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3587]  COND FALSE  !(revert)
[L1598]  RET         call DplatformToken_DplatformToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1599]              assume !revert && gas >= 0;
[L5428]  RET         call DplatformToken_DplatformToken(this, msgsender_MSG, msgvalue_MSG);
[L5429]              assume !revert && gas >= 0;
[L5432]  CALL        call CorralChoice_DplatformToken(this);
[L5271]              havoc msgsender_MSG;
[L5272]              havoc msgvalue_MSG;
[L5273]              havoc choice;
[L5274]              havoc to_s266;
[L5275]              havoc value_s266;
[L5276]              havoc __ret_0_transfer;
[L5277]              havoc spender_s302;
[L5278]              havoc value_s302;
[L5279]              havoc __ret_0_approve;
[L5280]              havoc from_s351;
[L5281]              havoc to_s351;
[L5282]              havoc value_s351;
[L5283]              havoc __ret_0_transferFrom;
[L5284]              havoc __ret_0_totalSupply;
[L5285]              havoc owner_s231;
[L5286]              havoc __ret_0_balanceOf;
[L5287]              havoc owner_s247;
[L5288]              havoc spender_s247;
[L5289]              havoc __ret_0_allowance;
[L5290]              havoc spender_s400;
[L5291]              havoc addedValue_s400;
[L5292]              havoc __ret_0_increaseAllowance;
[L5293]              havoc spender_s449;
[L5294]              havoc subtractedValue_s449;
[L5295]              havoc __ret_0_decreaseAllowance;
[L5296]              havoc name_s652;
[L5297]              havoc symbol_s652;
[L5298]              havoc decimals_s652;
[L5299]              havoc __ret_0_name;
[L5300]              havoc __ret_0_symbol;
[L5301]              havoc __ret_0_decimals;
[L5302]              havoc __ret_0_quantity;
[L5303]              havoc __ret_0_owner;
[L5304]              havoc __ret_0_startTime;
[L5305]              havoc _to_s1165;
[L5306]              havoc tmpNow;
[L5307]              havoc gas;
[L5308]              assume gas > 4000000 && gas <= 8000000;
[L5309]              tmpNow := now;
[L5310]              havoc now;
[L5311]              assume now > tmpNow;
[L5312]              assume msgsender_MSG != null;
[L5313]              assume DType[msgsender_MSG] != IERC20;
[L5314]              assume DType[msgsender_MSG] != SafeMath;
[L5315]              assume DType[msgsender_MSG] != ERC20;
[L5316]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5317]              assume DType[msgsender_MSG] != DplatformToken;
[L5318]              Alloc[msgsender_MSG] := true;
[L5319]  COND TRUE   choice == 15
[L5320]              gas := gas - 21000;
[L5321]  COND TRUE   gas >= 0
[L5322]              assume value_s266 >= 0 && value_s266 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5323]              assume msgvalue_MSG == 0;
[L5324]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s266, value_s266);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s266 && value_s266 <= _balances_ERC20[this][msgsender_MSG]) && value_s266 >= 0) && value_s266 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s266] >= 0) && _balances_ERC20[this][to_s266] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L655]               havoc __exception;
[L656]               revert := false;
[L657]   COND FALSE  !(__exception)
[L697]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s266, value_s266);
[L2997]  COND TRUE   DType[this] == DplatformToken
[L2998]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L3213]              __var_7 := null;
[L3214]  COND TRUE   !(to_s495 != null)
[L3215]              revert := true;
[L2998]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L2999]  COND TRUE   revert
[L697]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s266, value_s266);
[L698]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && quantity_DplatformToken[this] == old(quantity_DplatformToken[this])) && balances_DplatformToken[this] == old(balances_DplatformToken[this])) && owner_DplatformToken[this] == old(owner_DplatformToken[this])) && startTime_DplatformToken[this] == old(startTime_DplatformToken[this])) && monthsTimestamp_DplatformToken[this] == old(monthsTimestamp_DplatformToken[this])) && fibseries_DplatformToken[this] == old(fibseries_DplatformToken[this])) && operatingTime_DplatformToken[this] == old(operatingTime_DplatformToken[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L5324]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s266, value_s266);
[L5432]  RET         call CorralChoice_DplatformToken(this);

Loop:
[L5432]  CALL        call CorralChoice_DplatformToken(this);
[L5271]              havoc msgsender_MSG;
[L5272]              havoc msgvalue_MSG;
[L5273]              havoc choice;
[L5274]              havoc to_s266;
[L5275]              havoc value_s266;
[L5276]              havoc __ret_0_transfer;
[L5277]              havoc spender_s302;
[L5278]              havoc value_s302;
[L5279]              havoc __ret_0_approve;
[L5280]              havoc from_s351;
[L5281]              havoc to_s351;
[L5282]              havoc value_s351;
[L5283]              havoc __ret_0_transferFrom;
[L5284]              havoc __ret_0_totalSupply;
[L5285]              havoc owner_s231;
[L5286]              havoc __ret_0_balanceOf;
[L5287]              havoc owner_s247;
[L5288]              havoc spender_s247;
[L5289]              havoc __ret_0_allowance;
[L5290]              havoc spender_s400;
[L5291]              havoc addedValue_s400;
[L5292]              havoc __ret_0_increaseAllowance;
[L5293]              havoc spender_s449;
[L5294]              havoc subtractedValue_s449;
[L5295]              havoc __ret_0_decreaseAllowance;
[L5296]              havoc name_s652;
[L5297]              havoc symbol_s652;
[L5298]              havoc decimals_s652;
[L5299]              havoc __ret_0_name;
[L5300]              havoc __ret_0_symbol;
[L5301]              havoc __ret_0_decimals;
[L5302]              havoc __ret_0_quantity;
[L5303]              havoc __ret_0_owner;
[L5304]              havoc __ret_0_startTime;
[L5305]              havoc _to_s1165;
[L5306]              havoc tmpNow;
[L5307]              havoc gas;
[L5308]              assume gas > 4000000 && gas <= 8000000;
[L5309]              tmpNow := now;
[L5310]              havoc now;
[L5311]              assume now > tmpNow;
[L5312]              assume msgsender_MSG != null;
[L5313]              assume DType[msgsender_MSG] != IERC20;
[L5314]              assume DType[msgsender_MSG] != SafeMath;
[L5315]              assume DType[msgsender_MSG] != ERC20;
[L5316]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5317]              assume DType[msgsender_MSG] != DplatformToken;
[L5318]              Alloc[msgsender_MSG] := true;
[L5319]  COND TRUE   choice == 15
[L5320]              gas := gas - 21000;
[L5321]  COND TRUE   gas >= 0
[L5322]              assume value_s266 >= 0 && value_s266 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5323]              assume msgvalue_MSG == 0;
[L5324]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s266, value_s266);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s266 && value_s266 <= _balances_ERC20[this][msgsender_MSG]) && value_s266 >= 0) && value_s266 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s266] >= 0) && _balances_ERC20[this][to_s266] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L655]               havoc __exception;
[L656]               revert := false;
[L657]   COND FALSE  !(__exception)
[L697]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s266, value_s266);
[L2997]  COND TRUE   DType[this] == DplatformToken
[L2998]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L3213]              __var_7 := null;
[L3214]  COND TRUE   !(to_s495 != null)
[L3215]              revert := true;
[L2998]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L2999]  COND TRUE   revert
[L697]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s266, value_s266);
[L698]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && quantity_DplatformToken[this] == old(quantity_DplatformToken[this])) && balances_DplatformToken[this] == old(balances_DplatformToken[this])) && owner_DplatformToken[this] == old(owner_DplatformToken[this])) && startTime_DplatformToken[this] == old(startTime_DplatformToken[this])) && monthsTimestamp_DplatformToken[this] == old(monthsTimestamp_DplatformToken[this])) && fibseries_DplatformToken[this] == old(fibseries_DplatformToken[this])) && operatingTime_DplatformToken[this] == old(operatingTime_DplatformToken[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L5324]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s266, value_s266);
[L5432]  RET         call CorralChoice_DplatformToken(this);

[2020-11-25 14:21:00,605 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:21:00,606 INFO  L82        PathProgramCache]: Analyzing trace with hash -408339896, now seen corresponding path program 1 times
[2020-11-25 14:21:00,606 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:21:00,617 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:21:00,657 INFO  L134       CoverageAnalysis]: Checked inductivity of 30 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 30 trivial. 0 not checked.
[2020-11-25 14:21:00,657 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 14:21:00,657 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 14:21:00,658 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:21:00,658 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 14:21:00,658 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 14:21:00,658 INFO  L87              Difference]: Start difference. First operand 3188 states and 3562 transitions. cyclomatic complexity: 384 Second operand 3 states.
[2020-11-25 14:21:00,738 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:21:00,738 INFO  L93              Difference]: Finished difference Result 3680 states and 4088 transitions.
[2020-11-25 14:21:00,738 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 14:21:00,738 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3680 states and 4088 transitions.
[2020-11-25 14:21:00,752 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 14:21:00,770 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3680 states to 3511 states and 3890 transitions.
[2020-11-25 14:21:00,770 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 896
[2020-11-25 14:21:00,771 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 923
[2020-11-25 14:21:00,771 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3511 states and 3890 transitions.
[2020-11-25 14:21:00,775 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:21:00,775 INFO  L728         BuchiCegarLoop]: Abstraction has 3511 states and 3890 transitions.
[2020-11-25 14:21:00,778 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3511 states and 3890 transitions.
[2020-11-25 14:21:00,808 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3511 to 3075.
[2020-11-25 14:21:00,808 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3075 states.
[2020-11-25 14:21:00,813 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3075 states to 3075 states and 3342 transitions.
[2020-11-25 14:21:00,813 INFO  L751         BuchiCegarLoop]: Abstraction has 3075 states and 3342 transitions.
[2020-11-25 14:21:00,813 INFO  L631         BuchiCegarLoop]: Abstraction has 3075 states and 3342 transitions.
[2020-11-25 14:21:00,813 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 14:21:00,813 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3075 states and 3342 transitions.
[2020-11-25 14:21:00,819 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:21:00,819 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:21:00,819 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:21:00,821 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:21:00,822 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L5422]              assume null == 0;
[L5423]  CALL        call this := FreshRefGenerator__success();
[L2696]              havoc newRef;
[L2697]              assume Alloc[newRef] == false;
[L2698]              Alloc[newRef] := true;
[L2699]              assume newRef != null;
[L5423]  RET         call this := FreshRefGenerator__success();
[L5424]              assume now >= 0;
[L5425]              assume DType[this] == DplatformToken;
[L5426]              assume msgvalue_MSG == 0;
[L5427]              gas := gas - 53000;
[L5428]  CALL        call DplatformToken_DplatformToken(this, msgsender_MSG, msgvalue_MSG);
[L1556]              havoc __exception;
[L1557]              revert := false;
[L1558]  COND FALSE  !(__exception)
[L1598]  CALL        call DplatformToken_DplatformToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3574]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2728]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2713]              assume msgsender_MSG != null;
[L2714]              Balance[this] := 0;
[L2728]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2729]  COND FALSE  !(revert)
[L3574]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3575]  COND FALSE  !(revert)
[L3578]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2930]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2728]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2713]              assume msgsender_MSG != null;
[L2714]              Balance[this] := 0;
[L2728]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2729]  COND FALSE  !(revert)
[L2930]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2931]  COND FALSE  !(revert)
[L2934]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2906]              assume msgsender_MSG != null;
[L2907]              Balance[this] := 0;
[L2908]              _balances_ERC20[this] := zeroRefintArr();
[L2909]              sum__balances0[this] := 0;
[L2910]              _allowed_ERC20[this] := zeroRefRefintArr();
[L2911]              sum__allowed1[this] := 0;
[L2912]              _totalSupply_ERC20[this] := 0;
[L2934]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2935]  COND FALSE  !(revert)
[L3578]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3579]  COND FALSE  !(revert)
[L3582]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1224663797, 727433945, 18);
[L3426]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2728]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2713]              assume msgsender_MSG != null;
[L2714]              Balance[this] := 0;
[L2728]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2729]  COND FALSE  !(revert)
[L3426]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3427]  COND FALSE  !(revert)
[L3430]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s652, symbol_s652, decimals_s652);
[L3401]              assume msgsender_MSG != null;
[L3402]              Balance[this] := 0;
[L3403]              _name_ERC20Detailed[this] := -1774930639;
[L3404]              _symbol_ERC20Detailed[this] := -1774930639;
[L3405]              _decimals_ERC20Detailed[this] := 0;
[L3407]              _name_ERC20Detailed[this] := name_s652;
[L3408]              _symbol_ERC20Detailed[this] := symbol_s652;
[L3409]              _decimals_ERC20Detailed[this] := decimals_s652;
[L3430]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s652, symbol_s652, decimals_s652);
[L3431]  COND FALSE  !(revert)
[L3582]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1224663797, 727433945, 18);
[L3583]  COND FALSE  !(revert)
[L3586]  CALL        call DplatformToken_DplatformToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3515]              assume msgsender_MSG != null;
[L3516]              Balance[this] := 0;
[L3517]              totalDPOM_DplatformToken[this] := 390000000 * (1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3518]              INITIAL_SUPPLY_DplatformToken[this] := 30000000 * (1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3519]              FIRST_YEAR_PERCENTAGE_DplatformToken[this] := 110;
[L3520]              SECOND_YEAR_PERCENTAGE_DplatformToken[this] := 106;
[L3521]              THIRD_YEAR_PERCENTAGE_DplatformToken[this] := 103;
[L3522]              FOURTH_YEAR_PERCENTAGE_DplatformToken[this] := 103;
[L3523]              FIFTH_YEAR_PERCENTAGE_DplatformToken[this] := 103;
[L3524]              quantity_DplatformToken[this] := 0;
[L3525]              balances_DplatformToken[this] := zeroRefintArr();
[L3526]              sum_balances2[this] := 0;
[L3527]              owner_DplatformToken[this] := null;
[L3528]              startTime_DplatformToken[this] := 0;
[L3529]              monthsTimestamp_DplatformToken[this] := zerointintArr();
[L3530]              sum_monthsTimestamp3[this] := 0;
[L3531]              Length_fibseries_DplatformToken_lvl0[this] := 0;
[L3532]              fibseries_DplatformToken[this] := zerointintArr();
[L3533]              sum_fibseries4[this] := 0;
[L3534]              operatingTime_DplatformToken[this] := 0;
[L3536]  COND TRUE   DType[this] == DplatformToken
[L3537]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, totalDPOM_DplatformToken[this]);
[L3264]              __var_10 := null;
[L3265]  COND FALSE  !(!(account_s537 != null))
[L3269]  CALL        call __var_11 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s537);
[L2861]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2862]  COND FALSE  !(!(c_s173 >= a_s173))
[L2866]              __ret_0_ := c_s173;
[L3269]  RET         call __var_11 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s537);
[L3270]  COND FALSE  !(revert)
[L3273]              _totalSupply_ERC20[this] := __var_11;
[L3274]  CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s537], value_s537);
[L2861]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2862]  COND FALSE  !(!(c_s173 >= a_s173))
[L2866]              __ret_0_ := c_s173;
[L3274]  RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s537], value_s537);
[L3275]  COND FALSE  !(revert)
[L3278]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s537];
[L3279]              _balances_ERC20[this][account_s537] := __var_12;
[L3280]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s537];
[L3281]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3537]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, totalDPOM_DplatformToken[this]);
[L3538]  COND FALSE  !(revert)
[L3544]              owner_DplatformToken[this] := msgsender_MSG;
[L3545]              sum_balances2[this] := sum_balances2[this] - balances_DplatformToken[this][owner_DplatformToken[this]];
[L3546]              balances_DplatformToken[this][owner_DplatformToken[this]] := totalDPOM_DplatformToken[this];
[L3547]              sum_balances2[this] := sum_balances2[this] + balances_DplatformToken[this][owner_DplatformToken[this]];
[L3548]              quantity_DplatformToken[this] := 0;
[L3549]              startTime_DplatformToken[this] := 1556647200;
[L3586]  RET         call DplatformToken_DplatformToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3587]  COND FALSE  !(revert)
[L1598]  RET         call DplatformToken_DplatformToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1599]              assume !revert && gas >= 0;
[L5428]  RET         call DplatformToken_DplatformToken(this, msgsender_MSG, msgvalue_MSG);
[L5429]              assume !revert && gas >= 0;
[L5432]  CALL        call CorralChoice_DplatformToken(this);
[L5271]              havoc msgsender_MSG;
[L5272]              havoc msgvalue_MSG;
[L5273]              havoc choice;
[L5274]              havoc to_s266;
[L5275]              havoc value_s266;
[L5276]              havoc __ret_0_transfer;
[L5277]              havoc spender_s302;
[L5278]              havoc value_s302;
[L5279]              havoc __ret_0_approve;
[L5280]              havoc from_s351;
[L5281]              havoc to_s351;
[L5282]              havoc value_s351;
[L5283]              havoc __ret_0_transferFrom;
[L5284]              havoc __ret_0_totalSupply;
[L5285]              havoc owner_s231;
[L5286]              havoc __ret_0_balanceOf;
[L5287]              havoc owner_s247;
[L5288]              havoc spender_s247;
[L5289]              havoc __ret_0_allowance;
[L5290]              havoc spender_s400;
[L5291]              havoc addedValue_s400;
[L5292]              havoc __ret_0_increaseAllowance;
[L5293]              havoc spender_s449;
[L5294]              havoc subtractedValue_s449;
[L5295]              havoc __ret_0_decreaseAllowance;
[L5296]              havoc name_s652;
[L5297]              havoc symbol_s652;
[L5298]              havoc decimals_s652;
[L5299]              havoc __ret_0_name;
[L5300]              havoc __ret_0_symbol;
[L5301]              havoc __ret_0_decimals;
[L5302]              havoc __ret_0_quantity;
[L5303]              havoc __ret_0_owner;
[L5304]              havoc __ret_0_startTime;
[L5305]              havoc _to_s1165;
[L5306]              havoc tmpNow;
[L5307]              havoc gas;
[L5308]              assume gas > 4000000 && gas <= 8000000;
[L5309]              tmpNow := now;
[L5310]              havoc now;
[L5311]              assume now > tmpNow;
[L5312]              assume msgsender_MSG != null;
[L5313]              assume DType[msgsender_MSG] != IERC20;
[L5314]              assume DType[msgsender_MSG] != SafeMath;
[L5315]              assume DType[msgsender_MSG] != ERC20;
[L5316]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5317]              assume DType[msgsender_MSG] != DplatformToken;
[L5318]              Alloc[msgsender_MSG] := true;
[L5319]  COND TRUE   choice == 15
[L5320]              gas := gas - 21000;
[L5321]  COND TRUE   gas >= 0
[L5322]              assume value_s266 >= 0 && value_s266 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5323]              assume msgvalue_MSG == 0;
[L5324]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s266, value_s266);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s266 && value_s266 <= _balances_ERC20[this][msgsender_MSG]) && value_s266 >= 0) && value_s266 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s266] >= 0) && _balances_ERC20[this][to_s266] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L655]               havoc __exception;
[L656]               revert := false;
[L657]   COND FALSE  !(__exception)
[L697]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s266, value_s266);
[L2997]  COND TRUE   DType[this] == DplatformToken
[L2998]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L3213]              __var_7 := null;
[L3214]  COND FALSE  !(!(to_s495 != null))
[L3218]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L2837]  COND FALSE  !(!(b_s149 <= a_s149))
[L2841]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2842]              __ret_0_ := c_s149;
[L3218]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L3219]  COND FALSE  !(revert)
[L3222]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s495];
[L3223]              _balances_ERC20[this][from_s495] := __var_8;
[L3224]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s495];
[L3225]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L2861]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2862]  COND FALSE  !(!(c_s173 >= a_s173))
[L2866]              __ret_0_ := c_s173;
[L3225]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L3226]  COND FALSE  !(revert)
[L3229]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s495];
[L3230]              _balances_ERC20[this][to_s495] := __var_9;
[L3231]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s495];
[L3232]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2998]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L2999]  COND FALSE  !(revert)
[L3010]              __ret_0_ := true;
[L697]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s266, value_s266);
[L698]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && quantity_DplatformToken[this] == old(quantity_DplatformToken[this])) && balances_DplatformToken[this] == old(balances_DplatformToken[this])) && owner_DplatformToken[this] == old(owner_DplatformToken[this])) && startTime_DplatformToken[this] == old(startTime_DplatformToken[this])) && monthsTimestamp_DplatformToken[this] == old(monthsTimestamp_DplatformToken[this])) && fibseries_DplatformToken[this] == old(fibseries_DplatformToken[this])) && operatingTime_DplatformToken[this] == old(operatingTime_DplatformToken[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L5324]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s266, value_s266);
[L5432]  RET         call CorralChoice_DplatformToken(this);

Loop:
[L5432]  CALL        call CorralChoice_DplatformToken(this);
[L5271]              havoc msgsender_MSG;
[L5272]              havoc msgvalue_MSG;
[L5273]              havoc choice;
[L5274]              havoc to_s266;
[L5275]              havoc value_s266;
[L5276]              havoc __ret_0_transfer;
[L5277]              havoc spender_s302;
[L5278]              havoc value_s302;
[L5279]              havoc __ret_0_approve;
[L5280]              havoc from_s351;
[L5281]              havoc to_s351;
[L5282]              havoc value_s351;
[L5283]              havoc __ret_0_transferFrom;
[L5284]              havoc __ret_0_totalSupply;
[L5285]              havoc owner_s231;
[L5286]              havoc __ret_0_balanceOf;
[L5287]              havoc owner_s247;
[L5288]              havoc spender_s247;
[L5289]              havoc __ret_0_allowance;
[L5290]              havoc spender_s400;
[L5291]              havoc addedValue_s400;
[L5292]              havoc __ret_0_increaseAllowance;
[L5293]              havoc spender_s449;
[L5294]              havoc subtractedValue_s449;
[L5295]              havoc __ret_0_decreaseAllowance;
[L5296]              havoc name_s652;
[L5297]              havoc symbol_s652;
[L5298]              havoc decimals_s652;
[L5299]              havoc __ret_0_name;
[L5300]              havoc __ret_0_symbol;
[L5301]              havoc __ret_0_decimals;
[L5302]              havoc __ret_0_quantity;
[L5303]              havoc __ret_0_owner;
[L5304]              havoc __ret_0_startTime;
[L5305]              havoc _to_s1165;
[L5306]              havoc tmpNow;
[L5307]              havoc gas;
[L5308]              assume gas > 4000000 && gas <= 8000000;
[L5309]              tmpNow := now;
[L5310]              havoc now;
[L5311]              assume now > tmpNow;
[L5312]              assume msgsender_MSG != null;
[L5313]              assume DType[msgsender_MSG] != IERC20;
[L5314]              assume DType[msgsender_MSG] != SafeMath;
[L5315]              assume DType[msgsender_MSG] != ERC20;
[L5316]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5317]              assume DType[msgsender_MSG] != DplatformToken;
[L5318]              Alloc[msgsender_MSG] := true;
[L5319]  COND TRUE   choice == 15
[L5320]              gas := gas - 21000;
[L5321]  COND TRUE   gas >= 0
[L5322]              assume value_s266 >= 0 && value_s266 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5323]              assume msgvalue_MSG == 0;
[L5324]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s266, value_s266);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s266 && value_s266 <= _balances_ERC20[this][msgsender_MSG]) && value_s266 >= 0) && value_s266 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s266] >= 0) && _balances_ERC20[this][to_s266] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L655]               havoc __exception;
[L656]               revert := false;
[L657]   COND FALSE  !(__exception)
[L697]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s266, value_s266);
[L2997]  COND TRUE   DType[this] == DplatformToken
[L2998]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L3213]              __var_7 := null;
[L3214]  COND FALSE  !(!(to_s495 != null))
[L3218]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L2837]  COND FALSE  !(!(b_s149 <= a_s149))
[L2841]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2842]              __ret_0_ := c_s149;
[L3218]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L3219]  COND FALSE  !(revert)
[L3222]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s495];
[L3223]              _balances_ERC20[this][from_s495] := __var_8;
[L3224]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s495];
[L3225]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L2861]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2862]  COND FALSE  !(!(c_s173 >= a_s173))
[L2866]              __ret_0_ := c_s173;
[L3225]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L3226]  COND FALSE  !(revert)
[L3229]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s495];
[L3230]              _balances_ERC20[this][to_s495] := __var_9;
[L3231]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s495];
[L3232]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2998]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L2999]  COND FALSE  !(revert)
[L3010]              __ret_0_ := true;
[L697]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s266, value_s266);
[L698]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && quantity_DplatformToken[this] == old(quantity_DplatformToken[this])) && balances_DplatformToken[this] == old(balances_DplatformToken[this])) && owner_DplatformToken[this] == old(owner_DplatformToken[this])) && startTime_DplatformToken[this] == old(startTime_DplatformToken[this])) && monthsTimestamp_DplatformToken[this] == old(monthsTimestamp_DplatformToken[this])) && fibseries_DplatformToken[this] == old(fibseries_DplatformToken[this])) && operatingTime_DplatformToken[this] == old(operatingTime_DplatformToken[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L5324]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s266, value_s266);
[L5432]  RET         call CorralChoice_DplatformToken(this);

[2020-11-25 14:21:00,828 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:21:00,829 INFO  L82        PathProgramCache]: Analyzing trace with hash -2049163421, now seen corresponding path program 1 times
[2020-11-25 14:21:00,830 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:21:00,895 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:21:02,157 INFO  L134       CoverageAnalysis]: Checked inductivity of 35 backedges. 4 proven. 0 refuted. 0 times theorem prover too weak. 31 trivial. 0 not checked.
[2020-11-25 14:21:02,157 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 14:21:02,157 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [35] imperfect sequences [] total 35
[2020-11-25 14:21:02,158 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:21:02,158 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 36 interpolants.
[2020-11-25 14:21:02,158 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=124, Invalid=1136, Unknown=0, NotChecked=0, Total=1260
[2020-11-25 14:21:02,158 INFO  L87              Difference]: Start difference. First operand 3075 states and 3342 transitions. cyclomatic complexity: 277 Second operand 36 states.
[2020-11-25 14:21:07,752 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:21:07,752 INFO  L93              Difference]: Finished difference Result 3340 states and 3677 transitions.
[2020-11-25 14:21:07,752 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 34 states. 
[2020-11-25 14:21:07,752 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3340 states and 3677 transitions.
[2020-11-25 14:21:07,759 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 14:21:07,768 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3340 states to 3340 states and 3677 transitions.
[2020-11-25 14:21:07,769 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 837
[2020-11-25 14:21:07,769 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 837
[2020-11-25 14:21:07,769 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3340 states and 3677 transitions.
[2020-11-25 14:21:07,772 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:21:07,772 INFO  L728         BuchiCegarLoop]: Abstraction has 3340 states and 3677 transitions.
[2020-11-25 14:21:07,774 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3340 states and 3677 transitions.
[2020-11-25 14:21:07,797 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3340 to 3278.
[2020-11-25 14:21:07,797 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3278 states.
[2020-11-25 14:21:07,800 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3278 states to 3278 states and 3593 transitions.
[2020-11-25 14:21:07,800 INFO  L751         BuchiCegarLoop]: Abstraction has 3278 states and 3593 transitions.
[2020-11-25 14:21:07,800 INFO  L631         BuchiCegarLoop]: Abstraction has 3278 states and 3593 transitions.
[2020-11-25 14:21:07,800 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 14:21:07,800 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3278 states and 3593 transitions.
[2020-11-25 14:21:07,804 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 14:21:07,804 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:21:07,804 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:21:07,806 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:21:07,806 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L5422]              assume null == 0;
[L5423]  CALL        call this := FreshRefGenerator__success();
[L2696]              havoc newRef;
[L2697]              assume Alloc[newRef] == false;
[L2698]              Alloc[newRef] := true;
[L2699]              assume newRef != null;
[L5423]  RET         call this := FreshRefGenerator__success();
[L5424]              assume now >= 0;
[L5425]              assume DType[this] == DplatformToken;
[L5426]              assume msgvalue_MSG == 0;
[L5427]              gas := gas - 53000;
[L5428]  CALL        call DplatformToken_DplatformToken(this, msgsender_MSG, msgvalue_MSG);
[L1556]              havoc __exception;
[L1557]              revert := false;
[L1558]  COND FALSE  !(__exception)
[L1598]  CALL        call DplatformToken_DplatformToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3574]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2728]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2713]              assume msgsender_MSG != null;
[L2714]              Balance[this] := 0;
[L2728]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2729]  COND FALSE  !(revert)
[L3574]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3575]  COND FALSE  !(revert)
[L3578]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2930]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2728]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2713]              assume msgsender_MSG != null;
[L2714]              Balance[this] := 0;
[L2728]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2729]  COND FALSE  !(revert)
[L2930]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2931]  COND FALSE  !(revert)
[L2934]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2906]              assume msgsender_MSG != null;
[L2907]              Balance[this] := 0;
[L2908]              _balances_ERC20[this] := zeroRefintArr();
[L2909]              sum__balances0[this] := 0;
[L2910]              _allowed_ERC20[this] := zeroRefRefintArr();
[L2911]              sum__allowed1[this] := 0;
[L2912]              _totalSupply_ERC20[this] := 0;
[L2934]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2935]  COND FALSE  !(revert)
[L3578]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3579]  COND FALSE  !(revert)
[L3582]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1224663797, 727433945, 18);
[L3426]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2728]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2713]              assume msgsender_MSG != null;
[L2714]              Balance[this] := 0;
[L2728]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2729]  COND FALSE  !(revert)
[L3426]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3427]  COND FALSE  !(revert)
[L3430]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s652, symbol_s652, decimals_s652);
[L3401]              assume msgsender_MSG != null;
[L3402]              Balance[this] := 0;
[L3403]              _name_ERC20Detailed[this] := -1774930639;
[L3404]              _symbol_ERC20Detailed[this] := -1774930639;
[L3405]              _decimals_ERC20Detailed[this] := 0;
[L3407]              _name_ERC20Detailed[this] := name_s652;
[L3408]              _symbol_ERC20Detailed[this] := symbol_s652;
[L3409]              _decimals_ERC20Detailed[this] := decimals_s652;
[L3430]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s652, symbol_s652, decimals_s652);
[L3431]  COND FALSE  !(revert)
[L3582]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1224663797, 727433945, 18);
[L3583]  COND FALSE  !(revert)
[L3586]  CALL        call DplatformToken_DplatformToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3515]              assume msgsender_MSG != null;
[L3516]              Balance[this] := 0;
[L3517]              totalDPOM_DplatformToken[this] := 390000000 * (1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3518]              INITIAL_SUPPLY_DplatformToken[this] := 30000000 * (1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3519]              FIRST_YEAR_PERCENTAGE_DplatformToken[this] := 110;
[L3520]              SECOND_YEAR_PERCENTAGE_DplatformToken[this] := 106;
[L3521]              THIRD_YEAR_PERCENTAGE_DplatformToken[this] := 103;
[L3522]              FOURTH_YEAR_PERCENTAGE_DplatformToken[this] := 103;
[L3523]              FIFTH_YEAR_PERCENTAGE_DplatformToken[this] := 103;
[L3524]              quantity_DplatformToken[this] := 0;
[L3525]              balances_DplatformToken[this] := zeroRefintArr();
[L3526]              sum_balances2[this] := 0;
[L3527]              owner_DplatformToken[this] := null;
[L3528]              startTime_DplatformToken[this] := 0;
[L3529]              monthsTimestamp_DplatformToken[this] := zerointintArr();
[L3530]              sum_monthsTimestamp3[this] := 0;
[L3531]              Length_fibseries_DplatformToken_lvl0[this] := 0;
[L3532]              fibseries_DplatformToken[this] := zerointintArr();
[L3533]              sum_fibseries4[this] := 0;
[L3534]              operatingTime_DplatformToken[this] := 0;
[L3536]  COND TRUE   DType[this] == DplatformToken
[L3537]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, totalDPOM_DplatformToken[this]);
[L3264]              __var_10 := null;
[L3265]  COND FALSE  !(!(account_s537 != null))
[L3269]  CALL        call __var_11 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s537);
[L2861]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2862]  COND FALSE  !(!(c_s173 >= a_s173))
[L2866]              __ret_0_ := c_s173;
[L3269]  RET         call __var_11 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s537);
[L3270]  COND FALSE  !(revert)
[L3273]              _totalSupply_ERC20[this] := __var_11;
[L3274]  CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s537], value_s537);
[L2861]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2862]  COND FALSE  !(!(c_s173 >= a_s173))
[L2866]              __ret_0_ := c_s173;
[L3274]  RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s537], value_s537);
[L3275]  COND FALSE  !(revert)
[L3278]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s537];
[L3279]              _balances_ERC20[this][account_s537] := __var_12;
[L3280]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s537];
[L3281]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3537]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, totalDPOM_DplatformToken[this]);
[L3538]  COND FALSE  !(revert)
[L3544]              owner_DplatformToken[this] := msgsender_MSG;
[L3545]              sum_balances2[this] := sum_balances2[this] - balances_DplatformToken[this][owner_DplatformToken[this]];
[L3546]              balances_DplatformToken[this][owner_DplatformToken[this]] := totalDPOM_DplatformToken[this];
[L3547]              sum_balances2[this] := sum_balances2[this] + balances_DplatformToken[this][owner_DplatformToken[this]];
[L3548]              quantity_DplatformToken[this] := 0;
[L3549]              startTime_DplatformToken[this] := 1556647200;
[L3586]  RET         call DplatformToken_DplatformToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3587]  COND FALSE  !(revert)
[L1598]  RET         call DplatformToken_DplatformToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1599]              assume !revert && gas >= 0;
[L5428]  RET         call DplatformToken_DplatformToken(this, msgsender_MSG, msgvalue_MSG);
[L5429]              assume !revert && gas >= 0;
[L5432]  CALL        call CorralChoice_DplatformToken(this);
[L5271]              havoc msgsender_MSG;
[L5272]              havoc msgvalue_MSG;
[L5273]              havoc choice;
[L5274]              havoc to_s266;
[L5275]              havoc value_s266;
[L5276]              havoc __ret_0_transfer;
[L5277]              havoc spender_s302;
[L5278]              havoc value_s302;
[L5279]              havoc __ret_0_approve;
[L5280]              havoc from_s351;
[L5281]              havoc to_s351;
[L5282]              havoc value_s351;
[L5283]              havoc __ret_0_transferFrom;
[L5284]              havoc __ret_0_totalSupply;
[L5285]              havoc owner_s231;
[L5286]              havoc __ret_0_balanceOf;
[L5287]              havoc owner_s247;
[L5288]              havoc spender_s247;
[L5289]              havoc __ret_0_allowance;
[L5290]              havoc spender_s400;
[L5291]              havoc addedValue_s400;
[L5292]              havoc __ret_0_increaseAllowance;
[L5293]              havoc spender_s449;
[L5294]              havoc subtractedValue_s449;
[L5295]              havoc __ret_0_decreaseAllowance;
[L5296]              havoc name_s652;
[L5297]              havoc symbol_s652;
[L5298]              havoc decimals_s652;
[L5299]              havoc __ret_0_name;
[L5300]              havoc __ret_0_symbol;
[L5301]              havoc __ret_0_decimals;
[L5302]              havoc __ret_0_quantity;
[L5303]              havoc __ret_0_owner;
[L5304]              havoc __ret_0_startTime;
[L5305]              havoc _to_s1165;
[L5306]              havoc tmpNow;
[L5307]              havoc gas;
[L5308]              assume gas > 4000000 && gas <= 8000000;
[L5309]              tmpNow := now;
[L5310]              havoc now;
[L5311]              assume now > tmpNow;
[L5312]              assume msgsender_MSG != null;
[L5313]              assume DType[msgsender_MSG] != IERC20;
[L5314]              assume DType[msgsender_MSG] != SafeMath;
[L5315]              assume DType[msgsender_MSG] != ERC20;
[L5316]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5317]              assume DType[msgsender_MSG] != DplatformToken;
[L5318]              Alloc[msgsender_MSG] := true;
[L5319]  COND TRUE   choice == 15
[L5320]              gas := gas - 21000;
[L5321]  COND TRUE   gas >= 0
[L5322]              assume value_s266 >= 0 && value_s266 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5323]              assume msgvalue_MSG == 0;
[L5324]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s266, value_s266);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s266 && value_s266 <= _balances_ERC20[this][msgsender_MSG]) && value_s266 >= 0) && value_s266 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s266] >= 0) && _balances_ERC20[this][to_s266] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L655]               havoc __exception;
[L656]               revert := false;
[L657]   COND TRUE   __exception
[L658]               __tmp__Balance := Balance;
[L659]               __tmp__DType := DType;
[L660]               __tmp__Alloc := Alloc;
[L661]               __tmp__balance_ADDR := balance_ADDR;
[L662]               __tmp__M_Ref_int := M_Ref_int;
[L663]               __tmp__sum__balances0 := sum__balances0;
[L664]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L665]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L666]               __tmp__sum__allowed1 := sum__allowed1;
[L667]               __tmp__sum_balances2 := sum_balances2;
[L668]               __tmp__M_int_int := M_int_int;
[L669]               __tmp__sum_monthsTimestamp3 := sum_monthsTimestamp3;
[L670]               __tmp__sum_fibseries4 := sum_fibseries4;
[L671]               __tmp__Length := Length;
[L672]               __tmp__now := now;
[L673]               __tmp___balances_ERC20 := _balances_ERC20;
[L674]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L675]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L676]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L677]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L678]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L679]               __tmp__totalDPOM_DplatformToken := totalDPOM_DplatformToken;
[L680]               __tmp__INITIAL_SUPPLY_DplatformToken := INITIAL_SUPPLY_DplatformToken;
[L681]               __tmp__FIRST_YEAR_PERCENTAGE_DplatformToken := FIRST_YEAR_PERCENTAGE_DplatformToken;
[L682]               __tmp__SECOND_YEAR_PERCENTAGE_DplatformToken := SECOND_YEAR_PERCENTAGE_DplatformToken;
[L683]               __tmp__THIRD_YEAR_PERCENTAGE_DplatformToken := THIRD_YEAR_PERCENTAGE_DplatformToken;
[L684]               __tmp__FOURTH_YEAR_PERCENTAGE_DplatformToken := FOURTH_YEAR_PERCENTAGE_DplatformToken;
[L685]               __tmp__FIFTH_YEAR_PERCENTAGE_DplatformToken := FIFTH_YEAR_PERCENTAGE_DplatformToken;
[L686]               __tmp__quantity_DplatformToken := quantity_DplatformToken;
[L687]               __tmp__balances_DplatformToken := balances_DplatformToken;
[L688]               __tmp__owner_DplatformToken := owner_DplatformToken;
[L689]               __tmp__startTime_DplatformToken := startTime_DplatformToken;
[L690]               __tmp__monthsTimestamp_DplatformToken := monthsTimestamp_DplatformToken;
[L691]               __tmp__Length_fibseries_DplatformToken_lvl0 := Length_fibseries_DplatformToken_lvl0;
[L692]               __tmp__fibseries_DplatformToken := fibseries_DplatformToken;
[L693]               __tmp__operatingTime_DplatformToken := operatingTime_DplatformToken;
[L694]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s266, value_s266);
[L2978]  COND TRUE   __tmp__DType[this] == DplatformToken
[L2979]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L3187]              __var_7 := null;
[L3188]  COND TRUE   !(to_s495 != null)
[L3189]              revert := true;
[L2979]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L2980]  COND TRUE   revert
[L694]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s266, value_s266);
[L695]               assume revert || gas < 0;
[L5324]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s266, value_s266);
[L5432]  RET         call CorralChoice_DplatformToken(this);

Loop:
[L5432]  CALL       call CorralChoice_DplatformToken(this);
[L5271]             havoc msgsender_MSG;
[L5272]             havoc msgvalue_MSG;
[L5273]             havoc choice;
[L5274]             havoc to_s266;
[L5275]             havoc value_s266;
[L5276]             havoc __ret_0_transfer;
[L5277]             havoc spender_s302;
[L5278]             havoc value_s302;
[L5279]             havoc __ret_0_approve;
[L5280]             havoc from_s351;
[L5281]             havoc to_s351;
[L5282]             havoc value_s351;
[L5283]             havoc __ret_0_transferFrom;
[L5284]             havoc __ret_0_totalSupply;
[L5285]             havoc owner_s231;
[L5286]             havoc __ret_0_balanceOf;
[L5287]             havoc owner_s247;
[L5288]             havoc spender_s247;
[L5289]             havoc __ret_0_allowance;
[L5290]             havoc spender_s400;
[L5291]             havoc addedValue_s400;
[L5292]             havoc __ret_0_increaseAllowance;
[L5293]             havoc spender_s449;
[L5294]             havoc subtractedValue_s449;
[L5295]             havoc __ret_0_decreaseAllowance;
[L5296]             havoc name_s652;
[L5297]             havoc symbol_s652;
[L5298]             havoc decimals_s652;
[L5299]             havoc __ret_0_name;
[L5300]             havoc __ret_0_symbol;
[L5301]             havoc __ret_0_decimals;
[L5302]             havoc __ret_0_quantity;
[L5303]             havoc __ret_0_owner;
[L5304]             havoc __ret_0_startTime;
[L5305]             havoc _to_s1165;
[L5306]             havoc tmpNow;
[L5307]             havoc gas;
[L5308]             assume gas > 4000000 && gas <= 8000000;
[L5309]             tmpNow := now;
[L5310]             havoc now;
[L5311]             assume now > tmpNow;
[L5312]             assume msgsender_MSG != null;
[L5313]             assume DType[msgsender_MSG] != IERC20;
[L5314]             assume DType[msgsender_MSG] != SafeMath;
[L5315]             assume DType[msgsender_MSG] != ERC20;
[L5316]             assume DType[msgsender_MSG] != ERC20Detailed;
[L5317]             assume DType[msgsender_MSG] != DplatformToken;
[L5318]             Alloc[msgsender_MSG] := true;
[L5319]  COND TRUE  choice == 15
[L5320]             gas := gas - 21000;
[L5321]  COND TRUE  gas >= 0
[L5322]             assume value_s266 >= 0 && value_s266 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5323]             assume msgvalue_MSG == 0;
[L5324]  CALL       call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s266, value_s266);
[L2]                revert_hold := revert;
[L2]                revert := false;
[L2]                assume ((((((msgsender_MSG == to_s266 && value_s266 <= _balances_ERC20[this][msgsender_MSG]) && value_s266 >= 0) && value_s266 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s266] >= 0) && _balances_ERC20[this][to_s266] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                call_transfer_ERC200 := true;
[L2]                call_transfer_ERC200 := false;
[L2]                revert := revert_hold;
[L655]              havoc __exception;
[L656]              revert := false;
[L657]   COND TRUE  __exception
[L658]              __tmp__Balance := Balance;
[L659]              __tmp__DType := DType;
[L660]              __tmp__Alloc := Alloc;
[L661]              __tmp__balance_ADDR := balance_ADDR;
[L662]              __tmp__M_Ref_int := M_Ref_int;
[L663]              __tmp__sum__balances0 := sum__balances0;
[L664]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L665]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L666]              __tmp__sum__allowed1 := sum__allowed1;
[L667]              __tmp__sum_balances2 := sum_balances2;
[L668]              __tmp__M_int_int := M_int_int;
[L669]              __tmp__sum_monthsTimestamp3 := sum_monthsTimestamp3;
[L670]              __tmp__sum_fibseries4 := sum_fibseries4;
[L671]              __tmp__Length := Length;
[L672]              __tmp__now := now;
[L673]              __tmp___balances_ERC20 := _balances_ERC20;
[L674]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L675]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L676]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L677]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L678]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L679]              __tmp__totalDPOM_DplatformToken := totalDPOM_DplatformToken;
[L680]              __tmp__INITIAL_SUPPLY_DplatformToken := INITIAL_SUPPLY_DplatformToken;
[L681]              __tmp__FIRST_YEAR_PERCENTAGE_DplatformToken := FIRST_YEAR_PERCENTAGE_DplatformToken;
[L682]              __tmp__SECOND_YEAR_PERCENTAGE_DplatformToken := SECOND_YEAR_PERCENTAGE_DplatformToken;
[L683]              __tmp__THIRD_YEAR_PERCENTAGE_DplatformToken := THIRD_YEAR_PERCENTAGE_DplatformToken;
[L684]              __tmp__FOURTH_YEAR_PERCENTAGE_DplatformToken := FOURTH_YEAR_PERCENTAGE_DplatformToken;
[L685]              __tmp__FIFTH_YEAR_PERCENTAGE_DplatformToken := FIFTH_YEAR_PERCENTAGE_DplatformToken;
[L686]              __tmp__quantity_DplatformToken := quantity_DplatformToken;
[L687]              __tmp__balances_DplatformToken := balances_DplatformToken;
[L688]              __tmp__owner_DplatformToken := owner_DplatformToken;
[L689]              __tmp__startTime_DplatformToken := startTime_DplatformToken;
[L690]              __tmp__monthsTimestamp_DplatformToken := monthsTimestamp_DplatformToken;
[L691]              __tmp__Length_fibseries_DplatformToken_lvl0 := Length_fibseries_DplatformToken_lvl0;
[L692]              __tmp__fibseries_DplatformToken := fibseries_DplatformToken;
[L693]              __tmp__operatingTime_DplatformToken := operatingTime_DplatformToken;
[L694]   CALL       call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s266, value_s266);
[L2978]  COND TRUE  __tmp__DType[this] == DplatformToken
[L2979]  CALL       call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L3187]             __var_7 := null;
[L3188]  COND TRUE  !(to_s495 != null)
[L3189]             revert := true;
[L2979]  RET        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L2980]  COND TRUE  revert
[L694]   RET        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s266, value_s266);
[L695]              assume revert || gas < 0;
[L5324]  RET        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s266, value_s266);
[L5432]  RET        call CorralChoice_DplatformToken(this);

[2020-11-25 14:21:07,809 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:21:07,809 INFO  L82        PathProgramCache]: Analyzing trace with hash -1392687570, now seen corresponding path program 1 times
[2020-11-25 14:21:07,810 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:21:07,821 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:21:07,860 INFO  L134       CoverageAnalysis]: Checked inductivity of 35 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 35 trivial. 0 not checked.
[2020-11-25 14:21:07,861 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 14:21:07,861 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 14:21:07,861 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:21:07,861 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 14:21:07,861 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 14:21:07,861 INFO  L87              Difference]: Start difference. First operand 3278 states and 3593 transitions. cyclomatic complexity: 331 Second operand 7 states.
[2020-11-25 14:21:07,906 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:21:07,906 INFO  L93              Difference]: Finished difference Result 3348 states and 3677 transitions.
[2020-11-25 14:21:07,906 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 14:21:07,906 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3348 states and 3677 transitions.
[2020-11-25 14:21:07,913 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 14:21:07,921 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3348 states to 3340 states and 3669 transitions.
[2020-11-25 14:21:07,921 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 841
[2020-11-25 14:21:07,922 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 841
[2020-11-25 14:21:07,922 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3340 states and 3669 transitions.
[2020-11-25 14:21:07,924 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:21:07,924 INFO  L728         BuchiCegarLoop]: Abstraction has 3340 states and 3669 transitions.
[2020-11-25 14:21:07,927 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3340 states and 3669 transitions.
[2020-11-25 14:21:07,946 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3340 to 3331.
[2020-11-25 14:21:07,946 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3331 states.
[2020-11-25 14:21:07,949 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3331 states to 3331 states and 3660 transitions.
[2020-11-25 14:21:07,949 INFO  L751         BuchiCegarLoop]: Abstraction has 3331 states and 3660 transitions.
[2020-11-25 14:21:07,949 INFO  L631         BuchiCegarLoop]: Abstraction has 3331 states and 3660 transitions.
[2020-11-25 14:21:07,949 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 14:21:07,949 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3331 states and 3660 transitions.
[2020-11-25 14:21:07,952 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 14:21:07,952 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:21:07,952 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:21:07,954 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:21:07,954 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L5422]              assume null == 0;
[L5423]  CALL        call this := FreshRefGenerator__success();
[L2696]              havoc newRef;
[L2697]              assume Alloc[newRef] == false;
[L2698]              Alloc[newRef] := true;
[L2699]              assume newRef != null;
[L5423]  RET         call this := FreshRefGenerator__success();
[L5424]              assume now >= 0;
[L5425]              assume DType[this] == DplatformToken;
[L5426]              assume msgvalue_MSG == 0;
[L5427]              gas := gas - 53000;
[L5428]  CALL        call DplatformToken_DplatformToken(this, msgsender_MSG, msgvalue_MSG);
[L1556]              havoc __exception;
[L1557]              revert := false;
[L1558]  COND FALSE  !(__exception)
[L1598]  CALL        call DplatformToken_DplatformToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3574]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2728]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2713]              assume msgsender_MSG != null;
[L2714]              Balance[this] := 0;
[L2728]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2729]  COND FALSE  !(revert)
[L3574]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3575]  COND FALSE  !(revert)
[L3578]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2930]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2728]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2713]              assume msgsender_MSG != null;
[L2714]              Balance[this] := 0;
[L2728]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2729]  COND FALSE  !(revert)
[L2930]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2931]  COND FALSE  !(revert)
[L2934]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2906]              assume msgsender_MSG != null;
[L2907]              Balance[this] := 0;
[L2908]              _balances_ERC20[this] := zeroRefintArr();
[L2909]              sum__balances0[this] := 0;
[L2910]              _allowed_ERC20[this] := zeroRefRefintArr();
[L2911]              sum__allowed1[this] := 0;
[L2912]              _totalSupply_ERC20[this] := 0;
[L2934]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2935]  COND FALSE  !(revert)
[L3578]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3579]  COND FALSE  !(revert)
[L3582]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1224663797, 727433945, 18);
[L3426]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2728]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2713]              assume msgsender_MSG != null;
[L2714]              Balance[this] := 0;
[L2728]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2729]  COND FALSE  !(revert)
[L3426]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3427]  COND FALSE  !(revert)
[L3430]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s652, symbol_s652, decimals_s652);
[L3401]              assume msgsender_MSG != null;
[L3402]              Balance[this] := 0;
[L3403]              _name_ERC20Detailed[this] := -1774930639;
[L3404]              _symbol_ERC20Detailed[this] := -1774930639;
[L3405]              _decimals_ERC20Detailed[this] := 0;
[L3407]              _name_ERC20Detailed[this] := name_s652;
[L3408]              _symbol_ERC20Detailed[this] := symbol_s652;
[L3409]              _decimals_ERC20Detailed[this] := decimals_s652;
[L3430]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s652, symbol_s652, decimals_s652);
[L3431]  COND FALSE  !(revert)
[L3582]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1224663797, 727433945, 18);
[L3583]  COND FALSE  !(revert)
[L3586]  CALL        call DplatformToken_DplatformToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3515]              assume msgsender_MSG != null;
[L3516]              Balance[this] := 0;
[L3517]              totalDPOM_DplatformToken[this] := 390000000 * (1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3518]              INITIAL_SUPPLY_DplatformToken[this] := 30000000 * (1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3519]              FIRST_YEAR_PERCENTAGE_DplatformToken[this] := 110;
[L3520]              SECOND_YEAR_PERCENTAGE_DplatformToken[this] := 106;
[L3521]              THIRD_YEAR_PERCENTAGE_DplatformToken[this] := 103;
[L3522]              FOURTH_YEAR_PERCENTAGE_DplatformToken[this] := 103;
[L3523]              FIFTH_YEAR_PERCENTAGE_DplatformToken[this] := 103;
[L3524]              quantity_DplatformToken[this] := 0;
[L3525]              balances_DplatformToken[this] := zeroRefintArr();
[L3526]              sum_balances2[this] := 0;
[L3527]              owner_DplatformToken[this] := null;
[L3528]              startTime_DplatformToken[this] := 0;
[L3529]              monthsTimestamp_DplatformToken[this] := zerointintArr();
[L3530]              sum_monthsTimestamp3[this] := 0;
[L3531]              Length_fibseries_DplatformToken_lvl0[this] := 0;
[L3532]              fibseries_DplatformToken[this] := zerointintArr();
[L3533]              sum_fibseries4[this] := 0;
[L3534]              operatingTime_DplatformToken[this] := 0;
[L3536]  COND TRUE   DType[this] == DplatformToken
[L3537]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, totalDPOM_DplatformToken[this]);
[L3264]              __var_10 := null;
[L3265]  COND FALSE  !(!(account_s537 != null))
[L3269]  CALL        call __var_11 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s537);
[L2861]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2862]  COND FALSE  !(!(c_s173 >= a_s173))
[L2866]              __ret_0_ := c_s173;
[L3269]  RET         call __var_11 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s537);
[L3270]  COND FALSE  !(revert)
[L3273]              _totalSupply_ERC20[this] := __var_11;
[L3274]  CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s537], value_s537);
[L2861]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2862]  COND FALSE  !(!(c_s173 >= a_s173))
[L2866]              __ret_0_ := c_s173;
[L3274]  RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s537], value_s537);
[L3275]  COND FALSE  !(revert)
[L3278]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s537];
[L3279]              _balances_ERC20[this][account_s537] := __var_12;
[L3280]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s537];
[L3281]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3537]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, totalDPOM_DplatformToken[this]);
[L3538]  COND FALSE  !(revert)
[L3544]              owner_DplatformToken[this] := msgsender_MSG;
[L3545]              sum_balances2[this] := sum_balances2[this] - balances_DplatformToken[this][owner_DplatformToken[this]];
[L3546]              balances_DplatformToken[this][owner_DplatformToken[this]] := totalDPOM_DplatformToken[this];
[L3547]              sum_balances2[this] := sum_balances2[this] + balances_DplatformToken[this][owner_DplatformToken[this]];
[L3548]              quantity_DplatformToken[this] := 0;
[L3549]              startTime_DplatformToken[this] := 1556647200;
[L3586]  RET         call DplatformToken_DplatformToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3587]  COND FALSE  !(revert)
[L1598]  RET         call DplatformToken_DplatformToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1599]              assume !revert && gas >= 0;
[L5428]  RET         call DplatformToken_DplatformToken(this, msgsender_MSG, msgvalue_MSG);
[L5429]              assume !revert && gas >= 0;
[L5432]  CALL        call CorralChoice_DplatformToken(this);
[L5271]              havoc msgsender_MSG;
[L5272]              havoc msgvalue_MSG;
[L5273]              havoc choice;
[L5274]              havoc to_s266;
[L5275]              havoc value_s266;
[L5276]              havoc __ret_0_transfer;
[L5277]              havoc spender_s302;
[L5278]              havoc value_s302;
[L5279]              havoc __ret_0_approve;
[L5280]              havoc from_s351;
[L5281]              havoc to_s351;
[L5282]              havoc value_s351;
[L5283]              havoc __ret_0_transferFrom;
[L5284]              havoc __ret_0_totalSupply;
[L5285]              havoc owner_s231;
[L5286]              havoc __ret_0_balanceOf;
[L5287]              havoc owner_s247;
[L5288]              havoc spender_s247;
[L5289]              havoc __ret_0_allowance;
[L5290]              havoc spender_s400;
[L5291]              havoc addedValue_s400;
[L5292]              havoc __ret_0_increaseAllowance;
[L5293]              havoc spender_s449;
[L5294]              havoc subtractedValue_s449;
[L5295]              havoc __ret_0_decreaseAllowance;
[L5296]              havoc name_s652;
[L5297]              havoc symbol_s652;
[L5298]              havoc decimals_s652;
[L5299]              havoc __ret_0_name;
[L5300]              havoc __ret_0_symbol;
[L5301]              havoc __ret_0_decimals;
[L5302]              havoc __ret_0_quantity;
[L5303]              havoc __ret_0_owner;
[L5304]              havoc __ret_0_startTime;
[L5305]              havoc _to_s1165;
[L5306]              havoc tmpNow;
[L5307]              havoc gas;
[L5308]              assume gas > 4000000 && gas <= 8000000;
[L5309]              tmpNow := now;
[L5310]              havoc now;
[L5311]              assume now > tmpNow;
[L5312]              assume msgsender_MSG != null;
[L5313]              assume DType[msgsender_MSG] != IERC20;
[L5314]              assume DType[msgsender_MSG] != SafeMath;
[L5315]              assume DType[msgsender_MSG] != ERC20;
[L5316]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5317]              assume DType[msgsender_MSG] != DplatformToken;
[L5318]              Alloc[msgsender_MSG] := true;
[L5319]  COND TRUE   choice == 15
[L5320]              gas := gas - 21000;
[L5321]  COND TRUE   gas >= 0
[L5322]              assume value_s266 >= 0 && value_s266 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5323]              assume msgvalue_MSG == 0;
[L5324]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s266, value_s266);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s266 && value_s266 <= _balances_ERC20[this][msgsender_MSG]) && value_s266 >= 0) && value_s266 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s266] >= 0) && _balances_ERC20[this][to_s266] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L655]               havoc __exception;
[L656]               revert := false;
[L657]   COND TRUE   __exception
[L658]               __tmp__Balance := Balance;
[L659]               __tmp__DType := DType;
[L660]               __tmp__Alloc := Alloc;
[L661]               __tmp__balance_ADDR := balance_ADDR;
[L662]               __tmp__M_Ref_int := M_Ref_int;
[L663]               __tmp__sum__balances0 := sum__balances0;
[L664]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L665]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L666]               __tmp__sum__allowed1 := sum__allowed1;
[L667]               __tmp__sum_balances2 := sum_balances2;
[L668]               __tmp__M_int_int := M_int_int;
[L669]               __tmp__sum_monthsTimestamp3 := sum_monthsTimestamp3;
[L670]               __tmp__sum_fibseries4 := sum_fibseries4;
[L671]               __tmp__Length := Length;
[L672]               __tmp__now := now;
[L673]               __tmp___balances_ERC20 := _balances_ERC20;
[L674]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L675]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L676]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L677]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L678]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L679]               __tmp__totalDPOM_DplatformToken := totalDPOM_DplatformToken;
[L680]               __tmp__INITIAL_SUPPLY_DplatformToken := INITIAL_SUPPLY_DplatformToken;
[L681]               __tmp__FIRST_YEAR_PERCENTAGE_DplatformToken := FIRST_YEAR_PERCENTAGE_DplatformToken;
[L682]               __tmp__SECOND_YEAR_PERCENTAGE_DplatformToken := SECOND_YEAR_PERCENTAGE_DplatformToken;
[L683]               __tmp__THIRD_YEAR_PERCENTAGE_DplatformToken := THIRD_YEAR_PERCENTAGE_DplatformToken;
[L684]               __tmp__FOURTH_YEAR_PERCENTAGE_DplatformToken := FOURTH_YEAR_PERCENTAGE_DplatformToken;
[L685]               __tmp__FIFTH_YEAR_PERCENTAGE_DplatformToken := FIFTH_YEAR_PERCENTAGE_DplatformToken;
[L686]               __tmp__quantity_DplatformToken := quantity_DplatformToken;
[L687]               __tmp__balances_DplatformToken := balances_DplatformToken;
[L688]               __tmp__owner_DplatformToken := owner_DplatformToken;
[L689]               __tmp__startTime_DplatformToken := startTime_DplatformToken;
[L690]               __tmp__monthsTimestamp_DplatformToken := monthsTimestamp_DplatformToken;
[L691]               __tmp__Length_fibseries_DplatformToken_lvl0 := Length_fibseries_DplatformToken_lvl0;
[L692]               __tmp__fibseries_DplatformToken := fibseries_DplatformToken;
[L693]               __tmp__operatingTime_DplatformToken := operatingTime_DplatformToken;
[L694]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s266, value_s266);
[L2978]  COND TRUE   __tmp__DType[this] == DplatformToken
[L2979]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L3187]              __var_7 := null;
[L3188]  COND FALSE  !(!(to_s495 != null))
[L3192]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][from_s495], value_s495);
[L2825]  COND TRUE   !(b_s149 <= a_s149)
[L2826]              revert := true;
[L3192]  RET         call __var_8 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][from_s495], value_s495);
[L3193]  COND TRUE   revert
[L2979]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L2980]  COND TRUE   revert
[L694]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s266, value_s266);
[L695]               assume revert || gas < 0;
[L5324]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s266, value_s266);
[L5432]  RET         call CorralChoice_DplatformToken(this);

Loop:
[L5432]  CALL        call CorralChoice_DplatformToken(this);
[L5271]              havoc msgsender_MSG;
[L5272]              havoc msgvalue_MSG;
[L5273]              havoc choice;
[L5274]              havoc to_s266;
[L5275]              havoc value_s266;
[L5276]              havoc __ret_0_transfer;
[L5277]              havoc spender_s302;
[L5278]              havoc value_s302;
[L5279]              havoc __ret_0_approve;
[L5280]              havoc from_s351;
[L5281]              havoc to_s351;
[L5282]              havoc value_s351;
[L5283]              havoc __ret_0_transferFrom;
[L5284]              havoc __ret_0_totalSupply;
[L5285]              havoc owner_s231;
[L5286]              havoc __ret_0_balanceOf;
[L5287]              havoc owner_s247;
[L5288]              havoc spender_s247;
[L5289]              havoc __ret_0_allowance;
[L5290]              havoc spender_s400;
[L5291]              havoc addedValue_s400;
[L5292]              havoc __ret_0_increaseAllowance;
[L5293]              havoc spender_s449;
[L5294]              havoc subtractedValue_s449;
[L5295]              havoc __ret_0_decreaseAllowance;
[L5296]              havoc name_s652;
[L5297]              havoc symbol_s652;
[L5298]              havoc decimals_s652;
[L5299]              havoc __ret_0_name;
[L5300]              havoc __ret_0_symbol;
[L5301]              havoc __ret_0_decimals;
[L5302]              havoc __ret_0_quantity;
[L5303]              havoc __ret_0_owner;
[L5304]              havoc __ret_0_startTime;
[L5305]              havoc _to_s1165;
[L5306]              havoc tmpNow;
[L5307]              havoc gas;
[L5308]              assume gas > 4000000 && gas <= 8000000;
[L5309]              tmpNow := now;
[L5310]              havoc now;
[L5311]              assume now > tmpNow;
[L5312]              assume msgsender_MSG != null;
[L5313]              assume DType[msgsender_MSG] != IERC20;
[L5314]              assume DType[msgsender_MSG] != SafeMath;
[L5315]              assume DType[msgsender_MSG] != ERC20;
[L5316]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5317]              assume DType[msgsender_MSG] != DplatformToken;
[L5318]              Alloc[msgsender_MSG] := true;
[L5319]  COND TRUE   choice == 15
[L5320]              gas := gas - 21000;
[L5321]  COND TRUE   gas >= 0
[L5322]              assume value_s266 >= 0 && value_s266 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5323]              assume msgvalue_MSG == 0;
[L5324]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s266, value_s266);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s266 && value_s266 <= _balances_ERC20[this][msgsender_MSG]) && value_s266 >= 0) && value_s266 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s266] >= 0) && _balances_ERC20[this][to_s266] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L655]               havoc __exception;
[L656]               revert := false;
[L657]   COND TRUE   __exception
[L658]               __tmp__Balance := Balance;
[L659]               __tmp__DType := DType;
[L660]               __tmp__Alloc := Alloc;
[L661]               __tmp__balance_ADDR := balance_ADDR;
[L662]               __tmp__M_Ref_int := M_Ref_int;
[L663]               __tmp__sum__balances0 := sum__balances0;
[L664]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L665]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L666]               __tmp__sum__allowed1 := sum__allowed1;
[L667]               __tmp__sum_balances2 := sum_balances2;
[L668]               __tmp__M_int_int := M_int_int;
[L669]               __tmp__sum_monthsTimestamp3 := sum_monthsTimestamp3;
[L670]               __tmp__sum_fibseries4 := sum_fibseries4;
[L671]               __tmp__Length := Length;
[L672]               __tmp__now := now;
[L673]               __tmp___balances_ERC20 := _balances_ERC20;
[L674]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L675]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L676]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L677]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L678]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L679]               __tmp__totalDPOM_DplatformToken := totalDPOM_DplatformToken;
[L680]               __tmp__INITIAL_SUPPLY_DplatformToken := INITIAL_SUPPLY_DplatformToken;
[L681]               __tmp__FIRST_YEAR_PERCENTAGE_DplatformToken := FIRST_YEAR_PERCENTAGE_DplatformToken;
[L682]               __tmp__SECOND_YEAR_PERCENTAGE_DplatformToken := SECOND_YEAR_PERCENTAGE_DplatformToken;
[L683]               __tmp__THIRD_YEAR_PERCENTAGE_DplatformToken := THIRD_YEAR_PERCENTAGE_DplatformToken;
[L684]               __tmp__FOURTH_YEAR_PERCENTAGE_DplatformToken := FOURTH_YEAR_PERCENTAGE_DplatformToken;
[L685]               __tmp__FIFTH_YEAR_PERCENTAGE_DplatformToken := FIFTH_YEAR_PERCENTAGE_DplatformToken;
[L686]               __tmp__quantity_DplatformToken := quantity_DplatformToken;
[L687]               __tmp__balances_DplatformToken := balances_DplatformToken;
[L688]               __tmp__owner_DplatformToken := owner_DplatformToken;
[L689]               __tmp__startTime_DplatformToken := startTime_DplatformToken;
[L690]               __tmp__monthsTimestamp_DplatformToken := monthsTimestamp_DplatformToken;
[L691]               __tmp__Length_fibseries_DplatformToken_lvl0 := Length_fibseries_DplatformToken_lvl0;
[L692]               __tmp__fibseries_DplatformToken := fibseries_DplatformToken;
[L693]               __tmp__operatingTime_DplatformToken := operatingTime_DplatformToken;
[L694]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s266, value_s266);
[L2978]  COND TRUE   __tmp__DType[this] == DplatformToken
[L2979]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L3187]              __var_7 := null;
[L3188]  COND FALSE  !(!(to_s495 != null))
[L3192]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][from_s495], value_s495);
[L2825]  COND TRUE   !(b_s149 <= a_s149)
[L2826]              revert := true;
[L3192]  RET         call __var_8 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][from_s495], value_s495);
[L3193]  COND TRUE   revert
[L2979]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L2980]  COND TRUE   revert
[L694]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s266, value_s266);
[L695]               assume revert || gas < 0;
[L5324]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s266, value_s266);
[L5432]  RET         call CorralChoice_DplatformToken(this);

[2020-11-25 14:21:07,958 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:21:07,958 INFO  L82        PathProgramCache]: Analyzing trace with hash 270227530, now seen corresponding path program 1 times
[2020-11-25 14:21:07,959 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:21:07,970 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:21:08,019 INFO  L134       CoverageAnalysis]: Checked inductivity of 35 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 35 trivial. 0 not checked.
[2020-11-25 14:21:08,020 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 14:21:08,020 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [8] imperfect sequences [] total 8
[2020-11-25 14:21:08,020 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:21:08,020 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 14:21:08,020 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 14:21:08,020 INFO  L87              Difference]: Start difference. First operand 3331 states and 3660 transitions. cyclomatic complexity: 345 Second operand 8 states.
[2020-11-25 14:21:08,579 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:21:08,579 INFO  L93              Difference]: Finished difference Result 3569 states and 3976 transitions.
[2020-11-25 14:21:08,579 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 14:21:08,579 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3569 states and 3976 transitions.
[2020-11-25 14:21:08,587 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 14:21:08,595 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3569 states to 3569 states and 3976 transitions.
[2020-11-25 14:21:08,595 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 906
[2020-11-25 14:21:08,595 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 906
[2020-11-25 14:21:08,595 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3569 states and 3976 transitions.
[2020-11-25 14:21:08,598 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:21:08,598 INFO  L728         BuchiCegarLoop]: Abstraction has 3569 states and 3976 transitions.
[2020-11-25 14:21:08,601 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3569 states and 3976 transitions.
[2020-11-25 14:21:08,649 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3569 to 3372.
[2020-11-25 14:21:08,649 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3372 states.
[2020-11-25 14:21:08,652 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3372 states to 3372 states and 3702 transitions.
[2020-11-25 14:21:08,652 INFO  L751         BuchiCegarLoop]: Abstraction has 3372 states and 3702 transitions.
[2020-11-25 14:21:08,652 INFO  L631         BuchiCegarLoop]: Abstraction has 3372 states and 3702 transitions.
[2020-11-25 14:21:08,652 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 14:21:08,652 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3372 states and 3702 transitions.
[2020-11-25 14:21:08,655 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 14:21:08,656 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:21:08,656 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:21:08,657 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:21:08,657 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L5422]              assume null == 0;
[L5423]  CALL        call this := FreshRefGenerator__success();
[L2696]              havoc newRef;
[L2697]              assume Alloc[newRef] == false;
[L2698]              Alloc[newRef] := true;
[L2699]              assume newRef != null;
[L5423]  RET         call this := FreshRefGenerator__success();
[L5424]              assume now >= 0;
[L5425]              assume DType[this] == DplatformToken;
[L5426]              assume msgvalue_MSG == 0;
[L5427]              gas := gas - 53000;
[L5428]  CALL        call DplatformToken_DplatformToken(this, msgsender_MSG, msgvalue_MSG);
[L1556]              havoc __exception;
[L1557]              revert := false;
[L1558]  COND FALSE  !(__exception)
[L1598]  CALL        call DplatformToken_DplatformToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3574]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2728]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2713]              assume msgsender_MSG != null;
[L2714]              Balance[this] := 0;
[L2728]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2729]  COND FALSE  !(revert)
[L3574]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3575]  COND FALSE  !(revert)
[L3578]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2930]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2728]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2713]              assume msgsender_MSG != null;
[L2714]              Balance[this] := 0;
[L2728]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2729]  COND FALSE  !(revert)
[L2930]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2931]  COND FALSE  !(revert)
[L2934]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2906]              assume msgsender_MSG != null;
[L2907]              Balance[this] := 0;
[L2908]              _balances_ERC20[this] := zeroRefintArr();
[L2909]              sum__balances0[this] := 0;
[L2910]              _allowed_ERC20[this] := zeroRefRefintArr();
[L2911]              sum__allowed1[this] := 0;
[L2912]              _totalSupply_ERC20[this] := 0;
[L2934]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2935]  COND FALSE  !(revert)
[L3578]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3579]  COND FALSE  !(revert)
[L3582]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1224663797, 727433945, 18);
[L3426]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2728]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2713]              assume msgsender_MSG != null;
[L2714]              Balance[this] := 0;
[L2728]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2729]  COND FALSE  !(revert)
[L3426]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3427]  COND FALSE  !(revert)
[L3430]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s652, symbol_s652, decimals_s652);
[L3401]              assume msgsender_MSG != null;
[L3402]              Balance[this] := 0;
[L3403]              _name_ERC20Detailed[this] := -1774930639;
[L3404]              _symbol_ERC20Detailed[this] := -1774930639;
[L3405]              _decimals_ERC20Detailed[this] := 0;
[L3407]              _name_ERC20Detailed[this] := name_s652;
[L3408]              _symbol_ERC20Detailed[this] := symbol_s652;
[L3409]              _decimals_ERC20Detailed[this] := decimals_s652;
[L3430]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s652, symbol_s652, decimals_s652);
[L3431]  COND FALSE  !(revert)
[L3582]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1224663797, 727433945, 18);
[L3583]  COND FALSE  !(revert)
[L3586]  CALL        call DplatformToken_DplatformToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3515]              assume msgsender_MSG != null;
[L3516]              Balance[this] := 0;
[L3517]              totalDPOM_DplatformToken[this] := 390000000 * (1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3518]              INITIAL_SUPPLY_DplatformToken[this] := 30000000 * (1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3519]              FIRST_YEAR_PERCENTAGE_DplatformToken[this] := 110;
[L3520]              SECOND_YEAR_PERCENTAGE_DplatformToken[this] := 106;
[L3521]              THIRD_YEAR_PERCENTAGE_DplatformToken[this] := 103;
[L3522]              FOURTH_YEAR_PERCENTAGE_DplatformToken[this] := 103;
[L3523]              FIFTH_YEAR_PERCENTAGE_DplatformToken[this] := 103;
[L3524]              quantity_DplatformToken[this] := 0;
[L3525]              balances_DplatformToken[this] := zeroRefintArr();
[L3526]              sum_balances2[this] := 0;
[L3527]              owner_DplatformToken[this] := null;
[L3528]              startTime_DplatformToken[this] := 0;
[L3529]              monthsTimestamp_DplatformToken[this] := zerointintArr();
[L3530]              sum_monthsTimestamp3[this] := 0;
[L3531]              Length_fibseries_DplatformToken_lvl0[this] := 0;
[L3532]              fibseries_DplatformToken[this] := zerointintArr();
[L3533]              sum_fibseries4[this] := 0;
[L3534]              operatingTime_DplatformToken[this] := 0;
[L3536]  COND TRUE   DType[this] == DplatformToken
[L3537]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, totalDPOM_DplatformToken[this]);
[L3264]              __var_10 := null;
[L3265]  COND FALSE  !(!(account_s537 != null))
[L3269]  CALL        call __var_11 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s537);
[L2861]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2862]  COND FALSE  !(!(c_s173 >= a_s173))
[L2866]              __ret_0_ := c_s173;
[L3269]  RET         call __var_11 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s537);
[L3270]  COND FALSE  !(revert)
[L3273]              _totalSupply_ERC20[this] := __var_11;
[L3274]  CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s537], value_s537);
[L2861]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2862]  COND FALSE  !(!(c_s173 >= a_s173))
[L2866]              __ret_0_ := c_s173;
[L3274]  RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s537], value_s537);
[L3275]  COND FALSE  !(revert)
[L3278]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s537];
[L3279]              _balances_ERC20[this][account_s537] := __var_12;
[L3280]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s537];
[L3281]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3537]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, totalDPOM_DplatformToken[this]);
[L3538]  COND FALSE  !(revert)
[L3544]              owner_DplatformToken[this] := msgsender_MSG;
[L3545]              sum_balances2[this] := sum_balances2[this] - balances_DplatformToken[this][owner_DplatformToken[this]];
[L3546]              balances_DplatformToken[this][owner_DplatformToken[this]] := totalDPOM_DplatformToken[this];
[L3547]              sum_balances2[this] := sum_balances2[this] + balances_DplatformToken[this][owner_DplatformToken[this]];
[L3548]              quantity_DplatformToken[this] := 0;
[L3549]              startTime_DplatformToken[this] := 1556647200;
[L3586]  RET         call DplatformToken_DplatformToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3587]  COND FALSE  !(revert)
[L1598]  RET         call DplatformToken_DplatformToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1599]              assume !revert && gas >= 0;
[L5428]  RET         call DplatformToken_DplatformToken(this, msgsender_MSG, msgvalue_MSG);
[L5429]              assume !revert && gas >= 0;
[L5432]  CALL        call CorralChoice_DplatformToken(this);
[L5271]              havoc msgsender_MSG;
[L5272]              havoc msgvalue_MSG;
[L5273]              havoc choice;
[L5274]              havoc to_s266;
[L5275]              havoc value_s266;
[L5276]              havoc __ret_0_transfer;
[L5277]              havoc spender_s302;
[L5278]              havoc value_s302;
[L5279]              havoc __ret_0_approve;
[L5280]              havoc from_s351;
[L5281]              havoc to_s351;
[L5282]              havoc value_s351;
[L5283]              havoc __ret_0_transferFrom;
[L5284]              havoc __ret_0_totalSupply;
[L5285]              havoc owner_s231;
[L5286]              havoc __ret_0_balanceOf;
[L5287]              havoc owner_s247;
[L5288]              havoc spender_s247;
[L5289]              havoc __ret_0_allowance;
[L5290]              havoc spender_s400;
[L5291]              havoc addedValue_s400;
[L5292]              havoc __ret_0_increaseAllowance;
[L5293]              havoc spender_s449;
[L5294]              havoc subtractedValue_s449;
[L5295]              havoc __ret_0_decreaseAllowance;
[L5296]              havoc name_s652;
[L5297]              havoc symbol_s652;
[L5298]              havoc decimals_s652;
[L5299]              havoc __ret_0_name;
[L5300]              havoc __ret_0_symbol;
[L5301]              havoc __ret_0_decimals;
[L5302]              havoc __ret_0_quantity;
[L5303]              havoc __ret_0_owner;
[L5304]              havoc __ret_0_startTime;
[L5305]              havoc _to_s1165;
[L5306]              havoc tmpNow;
[L5307]              havoc gas;
[L5308]              assume gas > 4000000 && gas <= 8000000;
[L5309]              tmpNow := now;
[L5310]              havoc now;
[L5311]              assume now > tmpNow;
[L5312]              assume msgsender_MSG != null;
[L5313]              assume DType[msgsender_MSG] != IERC20;
[L5314]              assume DType[msgsender_MSG] != SafeMath;
[L5315]              assume DType[msgsender_MSG] != ERC20;
[L5316]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5317]              assume DType[msgsender_MSG] != DplatformToken;
[L5318]              Alloc[msgsender_MSG] := true;
[L5319]  COND TRUE   choice == 15
[L5320]              gas := gas - 21000;
[L5321]  COND TRUE   gas >= 0
[L5322]              assume value_s266 >= 0 && value_s266 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5323]              assume msgvalue_MSG == 0;
[L5324]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s266, value_s266);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s266 && value_s266 <= _balances_ERC20[this][msgsender_MSG]) && value_s266 >= 0) && value_s266 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s266] >= 0) && _balances_ERC20[this][to_s266] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L655]               havoc __exception;
[L656]               revert := false;
[L657]   COND TRUE   __exception
[L658]               __tmp__Balance := Balance;
[L659]               __tmp__DType := DType;
[L660]               __tmp__Alloc := Alloc;
[L661]               __tmp__balance_ADDR := balance_ADDR;
[L662]               __tmp__M_Ref_int := M_Ref_int;
[L663]               __tmp__sum__balances0 := sum__balances0;
[L664]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L665]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L666]               __tmp__sum__allowed1 := sum__allowed1;
[L667]               __tmp__sum_balances2 := sum_balances2;
[L668]               __tmp__M_int_int := M_int_int;
[L669]               __tmp__sum_monthsTimestamp3 := sum_monthsTimestamp3;
[L670]               __tmp__sum_fibseries4 := sum_fibseries4;
[L671]               __tmp__Length := Length;
[L672]               __tmp__now := now;
[L673]               __tmp___balances_ERC20 := _balances_ERC20;
[L674]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L675]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L676]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L677]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L678]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L679]               __tmp__totalDPOM_DplatformToken := totalDPOM_DplatformToken;
[L680]               __tmp__INITIAL_SUPPLY_DplatformToken := INITIAL_SUPPLY_DplatformToken;
[L681]               __tmp__FIRST_YEAR_PERCENTAGE_DplatformToken := FIRST_YEAR_PERCENTAGE_DplatformToken;
[L682]               __tmp__SECOND_YEAR_PERCENTAGE_DplatformToken := SECOND_YEAR_PERCENTAGE_DplatformToken;
[L683]               __tmp__THIRD_YEAR_PERCENTAGE_DplatformToken := THIRD_YEAR_PERCENTAGE_DplatformToken;
[L684]               __tmp__FOURTH_YEAR_PERCENTAGE_DplatformToken := FOURTH_YEAR_PERCENTAGE_DplatformToken;
[L685]               __tmp__FIFTH_YEAR_PERCENTAGE_DplatformToken := FIFTH_YEAR_PERCENTAGE_DplatformToken;
[L686]               __tmp__quantity_DplatformToken := quantity_DplatformToken;
[L687]               __tmp__balances_DplatformToken := balances_DplatformToken;
[L688]               __tmp__owner_DplatformToken := owner_DplatformToken;
[L689]               __tmp__startTime_DplatformToken := startTime_DplatformToken;
[L690]               __tmp__monthsTimestamp_DplatformToken := monthsTimestamp_DplatformToken;
[L691]               __tmp__Length_fibseries_DplatformToken_lvl0 := Length_fibseries_DplatformToken_lvl0;
[L692]               __tmp__fibseries_DplatformToken := fibseries_DplatformToken;
[L693]               __tmp__operatingTime_DplatformToken := operatingTime_DplatformToken;
[L694]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s266, value_s266);
[L2978]  COND TRUE   __tmp__DType[this] == DplatformToken
[L2979]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L3187]              __var_7 := null;
[L3188]  COND FALSE  !(!(to_s495 != null))
[L3192]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][from_s495], value_s495);
[L2825]  COND FALSE  !(!(b_s149 <= a_s149))
[L2829]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2830]              __ret_0_ := c_s149;
[L3192]  RET         call __var_8 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][from_s495], value_s495);
[L3193]  COND FALSE  !(revert)
[L3196]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][from_s495];
[L3197]              __tmp___balances_ERC20[this][from_s495] := __var_8;
[L3198]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][from_s495];
[L3199]  CALL        call __var_9 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][to_s495], value_s495);
[L2849]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2850]  COND TRUE   !(c_s173 >= a_s173)
[L2851]              revert := true;
[L3199]  RET         call __var_9 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][to_s495], value_s495);
[L3200]  COND TRUE   revert
[L2979]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L2980]  COND TRUE   revert
[L694]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s266, value_s266);
[L695]               assume revert || gas < 0;
[L5324]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s266, value_s266);
[L5432]  RET         call CorralChoice_DplatformToken(this);

Loop:
[L5432]  CALL        call CorralChoice_DplatformToken(this);
[L5271]              havoc msgsender_MSG;
[L5272]              havoc msgvalue_MSG;
[L5273]              havoc choice;
[L5274]              havoc to_s266;
[L5275]              havoc value_s266;
[L5276]              havoc __ret_0_transfer;
[L5277]              havoc spender_s302;
[L5278]              havoc value_s302;
[L5279]              havoc __ret_0_approve;
[L5280]              havoc from_s351;
[L5281]              havoc to_s351;
[L5282]              havoc value_s351;
[L5283]              havoc __ret_0_transferFrom;
[L5284]              havoc __ret_0_totalSupply;
[L5285]              havoc owner_s231;
[L5286]              havoc __ret_0_balanceOf;
[L5287]              havoc owner_s247;
[L5288]              havoc spender_s247;
[L5289]              havoc __ret_0_allowance;
[L5290]              havoc spender_s400;
[L5291]              havoc addedValue_s400;
[L5292]              havoc __ret_0_increaseAllowance;
[L5293]              havoc spender_s449;
[L5294]              havoc subtractedValue_s449;
[L5295]              havoc __ret_0_decreaseAllowance;
[L5296]              havoc name_s652;
[L5297]              havoc symbol_s652;
[L5298]              havoc decimals_s652;
[L5299]              havoc __ret_0_name;
[L5300]              havoc __ret_0_symbol;
[L5301]              havoc __ret_0_decimals;
[L5302]              havoc __ret_0_quantity;
[L5303]              havoc __ret_0_owner;
[L5304]              havoc __ret_0_startTime;
[L5305]              havoc _to_s1165;
[L5306]              havoc tmpNow;
[L5307]              havoc gas;
[L5308]              assume gas > 4000000 && gas <= 8000000;
[L5309]              tmpNow := now;
[L5310]              havoc now;
[L5311]              assume now > tmpNow;
[L5312]              assume msgsender_MSG != null;
[L5313]              assume DType[msgsender_MSG] != IERC20;
[L5314]              assume DType[msgsender_MSG] != SafeMath;
[L5315]              assume DType[msgsender_MSG] != ERC20;
[L5316]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5317]              assume DType[msgsender_MSG] != DplatformToken;
[L5318]              Alloc[msgsender_MSG] := true;
[L5319]  COND TRUE   choice == 15
[L5320]              gas := gas - 21000;
[L5321]  COND TRUE   gas >= 0
[L5322]              assume value_s266 >= 0 && value_s266 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5323]              assume msgvalue_MSG == 0;
[L5324]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s266, value_s266);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s266 && value_s266 <= _balances_ERC20[this][msgsender_MSG]) && value_s266 >= 0) && value_s266 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s266] >= 0) && _balances_ERC20[this][to_s266] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L655]               havoc __exception;
[L656]               revert := false;
[L657]   COND TRUE   __exception
[L658]               __tmp__Balance := Balance;
[L659]               __tmp__DType := DType;
[L660]               __tmp__Alloc := Alloc;
[L661]               __tmp__balance_ADDR := balance_ADDR;
[L662]               __tmp__M_Ref_int := M_Ref_int;
[L663]               __tmp__sum__balances0 := sum__balances0;
[L664]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L665]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L666]               __tmp__sum__allowed1 := sum__allowed1;
[L667]               __tmp__sum_balances2 := sum_balances2;
[L668]               __tmp__M_int_int := M_int_int;
[L669]               __tmp__sum_monthsTimestamp3 := sum_monthsTimestamp3;
[L670]               __tmp__sum_fibseries4 := sum_fibseries4;
[L671]               __tmp__Length := Length;
[L672]               __tmp__now := now;
[L673]               __tmp___balances_ERC20 := _balances_ERC20;
[L674]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L675]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L676]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L677]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L678]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L679]               __tmp__totalDPOM_DplatformToken := totalDPOM_DplatformToken;
[L680]               __tmp__INITIAL_SUPPLY_DplatformToken := INITIAL_SUPPLY_DplatformToken;
[L681]               __tmp__FIRST_YEAR_PERCENTAGE_DplatformToken := FIRST_YEAR_PERCENTAGE_DplatformToken;
[L682]               __tmp__SECOND_YEAR_PERCENTAGE_DplatformToken := SECOND_YEAR_PERCENTAGE_DplatformToken;
[L683]               __tmp__THIRD_YEAR_PERCENTAGE_DplatformToken := THIRD_YEAR_PERCENTAGE_DplatformToken;
[L684]               __tmp__FOURTH_YEAR_PERCENTAGE_DplatformToken := FOURTH_YEAR_PERCENTAGE_DplatformToken;
[L685]               __tmp__FIFTH_YEAR_PERCENTAGE_DplatformToken := FIFTH_YEAR_PERCENTAGE_DplatformToken;
[L686]               __tmp__quantity_DplatformToken := quantity_DplatformToken;
[L687]               __tmp__balances_DplatformToken := balances_DplatformToken;
[L688]               __tmp__owner_DplatformToken := owner_DplatformToken;
[L689]               __tmp__startTime_DplatformToken := startTime_DplatformToken;
[L690]               __tmp__monthsTimestamp_DplatformToken := monthsTimestamp_DplatformToken;
[L691]               __tmp__Length_fibseries_DplatformToken_lvl0 := Length_fibseries_DplatformToken_lvl0;
[L692]               __tmp__fibseries_DplatformToken := fibseries_DplatformToken;
[L693]               __tmp__operatingTime_DplatformToken := operatingTime_DplatformToken;
[L694]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s266, value_s266);
[L2978]  COND TRUE   __tmp__DType[this] == DplatformToken
[L2979]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L3187]              __var_7 := null;
[L3188]  COND FALSE  !(!(to_s495 != null))
[L3192]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][from_s495], value_s495);
[L2825]  COND FALSE  !(!(b_s149 <= a_s149))
[L2829]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2830]              __ret_0_ := c_s149;
[L3192]  RET         call __var_8 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][from_s495], value_s495);
[L3193]  COND FALSE  !(revert)
[L3196]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][from_s495];
[L3197]              __tmp___balances_ERC20[this][from_s495] := __var_8;
[L3198]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][from_s495];
[L3199]  CALL        call __var_9 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][to_s495], value_s495);
[L2849]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2850]  COND TRUE   !(c_s173 >= a_s173)
[L2851]              revert := true;
[L3199]  RET         call __var_9 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][to_s495], value_s495);
[L3200]  COND TRUE   revert
[L2979]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L2980]  COND TRUE   revert
[L694]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s266, value_s266);
[L695]               assume revert || gas < 0;
[L5324]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s266, value_s266);
[L5432]  RET         call CorralChoice_DplatformToken(this);

[2020-11-25 14:21:08,666 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:21:08,666 INFO  L82        PathProgramCache]: Analyzing trace with hash -1276304076, now seen corresponding path program 1 times
[2020-11-25 14:21:08,666 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:21:08,682 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:21:08,774 INFO  L134       CoverageAnalysis]: Checked inductivity of 35 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 35 trivial. 0 not checked.
[2020-11-25 14:21:08,774 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 14:21:08,774 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [14] imperfect sequences [] total 14
[2020-11-25 14:21:08,774 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:21:08,774 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-11-25 14:21:08,775 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=29, Invalid=153, Unknown=0, NotChecked=0, Total=182
[2020-11-25 14:21:08,775 INFO  L87              Difference]: Start difference. First operand 3372 states and 3702 transitions. cyclomatic complexity: 346 Second operand 14 states.
[2020-11-25 14:21:10,193 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:21:10,193 INFO  L93              Difference]: Finished difference Result 3553 states and 3942 transitions.
[2020-11-25 14:21:10,193 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 15 states. 
[2020-11-25 14:21:10,193 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3553 states and 3942 transitions.
[2020-11-25 14:21:10,200 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 14:21:10,208 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3553 states to 3553 states and 3942 transitions.
[2020-11-25 14:21:10,208 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 898
[2020-11-25 14:21:10,208 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 898
[2020-11-25 14:21:10,208 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3553 states and 3942 transitions.
[2020-11-25 14:21:10,211 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:21:10,211 INFO  L728         BuchiCegarLoop]: Abstraction has 3553 states and 3942 transitions.
[2020-11-25 14:21:10,214 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3553 states and 3942 transitions.
[2020-11-25 14:21:10,263 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3553 to 3356.
[2020-11-25 14:21:10,263 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3356 states.
[2020-11-25 14:21:10,266 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3356 states to 3356 states and 3672 transitions.
[2020-11-25 14:21:10,266 INFO  L751         BuchiCegarLoop]: Abstraction has 3356 states and 3672 transitions.
[2020-11-25 14:21:10,266 INFO  L631         BuchiCegarLoop]: Abstraction has 3356 states and 3672 transitions.
[2020-11-25 14:21:10,266 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 14:21:10,266 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3356 states and 3672 transitions.
[2020-11-25 14:21:10,269 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 14:21:10,269 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:21:10,269 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:21:10,270 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:21:10,270 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L5422]              assume null == 0;
[L5423]  CALL        call this := FreshRefGenerator__success();
[L2696]              havoc newRef;
[L2697]              assume Alloc[newRef] == false;
[L2698]              Alloc[newRef] := true;
[L2699]              assume newRef != null;
[L5423]  RET         call this := FreshRefGenerator__success();
[L5424]              assume now >= 0;
[L5425]              assume DType[this] == DplatformToken;
[L5426]              assume msgvalue_MSG == 0;
[L5427]              gas := gas - 53000;
[L5428]  CALL        call DplatformToken_DplatformToken(this, msgsender_MSG, msgvalue_MSG);
[L1556]              havoc __exception;
[L1557]              revert := false;
[L1558]  COND FALSE  !(__exception)
[L1598]  CALL        call DplatformToken_DplatformToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3574]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2728]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2713]              assume msgsender_MSG != null;
[L2714]              Balance[this] := 0;
[L2728]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2729]  COND FALSE  !(revert)
[L3574]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3575]  COND FALSE  !(revert)
[L3578]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2930]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2728]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2713]              assume msgsender_MSG != null;
[L2714]              Balance[this] := 0;
[L2728]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2729]  COND FALSE  !(revert)
[L2930]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2931]  COND FALSE  !(revert)
[L2934]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2906]              assume msgsender_MSG != null;
[L2907]              Balance[this] := 0;
[L2908]              _balances_ERC20[this] := zeroRefintArr();
[L2909]              sum__balances0[this] := 0;
[L2910]              _allowed_ERC20[this] := zeroRefRefintArr();
[L2911]              sum__allowed1[this] := 0;
[L2912]              _totalSupply_ERC20[this] := 0;
[L2934]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2935]  COND FALSE  !(revert)
[L3578]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3579]  COND FALSE  !(revert)
[L3582]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1224663797, 727433945, 18);
[L3426]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2728]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2713]              assume msgsender_MSG != null;
[L2714]              Balance[this] := 0;
[L2728]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2729]  COND FALSE  !(revert)
[L3426]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3427]  COND FALSE  !(revert)
[L3430]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s652, symbol_s652, decimals_s652);
[L3401]              assume msgsender_MSG != null;
[L3402]              Balance[this] := 0;
[L3403]              _name_ERC20Detailed[this] := -1774930639;
[L3404]              _symbol_ERC20Detailed[this] := -1774930639;
[L3405]              _decimals_ERC20Detailed[this] := 0;
[L3407]              _name_ERC20Detailed[this] := name_s652;
[L3408]              _symbol_ERC20Detailed[this] := symbol_s652;
[L3409]              _decimals_ERC20Detailed[this] := decimals_s652;
[L3430]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s652, symbol_s652, decimals_s652);
[L3431]  COND FALSE  !(revert)
[L3582]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1224663797, 727433945, 18);
[L3583]  COND FALSE  !(revert)
[L3586]  CALL        call DplatformToken_DplatformToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3515]              assume msgsender_MSG != null;
[L3516]              Balance[this] := 0;
[L3517]              totalDPOM_DplatformToken[this] := 390000000 * (1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3518]              INITIAL_SUPPLY_DplatformToken[this] := 30000000 * (1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3519]              FIRST_YEAR_PERCENTAGE_DplatformToken[this] := 110;
[L3520]              SECOND_YEAR_PERCENTAGE_DplatformToken[this] := 106;
[L3521]              THIRD_YEAR_PERCENTAGE_DplatformToken[this] := 103;
[L3522]              FOURTH_YEAR_PERCENTAGE_DplatformToken[this] := 103;
[L3523]              FIFTH_YEAR_PERCENTAGE_DplatformToken[this] := 103;
[L3524]              quantity_DplatformToken[this] := 0;
[L3525]              balances_DplatformToken[this] := zeroRefintArr();
[L3526]              sum_balances2[this] := 0;
[L3527]              owner_DplatformToken[this] := null;
[L3528]              startTime_DplatformToken[this] := 0;
[L3529]              monthsTimestamp_DplatformToken[this] := zerointintArr();
[L3530]              sum_monthsTimestamp3[this] := 0;
[L3531]              Length_fibseries_DplatformToken_lvl0[this] := 0;
[L3532]              fibseries_DplatformToken[this] := zerointintArr();
[L3533]              sum_fibseries4[this] := 0;
[L3534]              operatingTime_DplatformToken[this] := 0;
[L3536]  COND TRUE   DType[this] == DplatformToken
[L3537]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, totalDPOM_DplatformToken[this]);
[L3264]              __var_10 := null;
[L3265]  COND FALSE  !(!(account_s537 != null))
[L3269]  CALL        call __var_11 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s537);
[L2861]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2862]  COND FALSE  !(!(c_s173 >= a_s173))
[L2866]              __ret_0_ := c_s173;
[L3269]  RET         call __var_11 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s537);
[L3270]  COND FALSE  !(revert)
[L3273]              _totalSupply_ERC20[this] := __var_11;
[L3274]  CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s537], value_s537);
[L2861]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2862]  COND FALSE  !(!(c_s173 >= a_s173))
[L2866]              __ret_0_ := c_s173;
[L3274]  RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s537], value_s537);
[L3275]  COND FALSE  !(revert)
[L3278]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s537];
[L3279]              _balances_ERC20[this][account_s537] := __var_12;
[L3280]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s537];
[L3281]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3537]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, totalDPOM_DplatformToken[this]);
[L3538]  COND FALSE  !(revert)
[L3544]              owner_DplatformToken[this] := msgsender_MSG;
[L3545]              sum_balances2[this] := sum_balances2[this] - balances_DplatformToken[this][owner_DplatformToken[this]];
[L3546]              balances_DplatformToken[this][owner_DplatformToken[this]] := totalDPOM_DplatformToken[this];
[L3547]              sum_balances2[this] := sum_balances2[this] + balances_DplatformToken[this][owner_DplatformToken[this]];
[L3548]              quantity_DplatformToken[this] := 0;
[L3549]              startTime_DplatformToken[this] := 1556647200;
[L3586]  RET         call DplatformToken_DplatformToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3587]  COND FALSE  !(revert)
[L1598]  RET         call DplatformToken_DplatformToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1599]              assume !revert && gas >= 0;
[L5428]  RET         call DplatformToken_DplatformToken(this, msgsender_MSG, msgvalue_MSG);
[L5429]              assume !revert && gas >= 0;
[L5432]  CALL        call CorralChoice_DplatformToken(this);
[L5271]              havoc msgsender_MSG;
[L5272]              havoc msgvalue_MSG;
[L5273]              havoc choice;
[L5274]              havoc to_s266;
[L5275]              havoc value_s266;
[L5276]              havoc __ret_0_transfer;
[L5277]              havoc spender_s302;
[L5278]              havoc value_s302;
[L5279]              havoc __ret_0_approve;
[L5280]              havoc from_s351;
[L5281]              havoc to_s351;
[L5282]              havoc value_s351;
[L5283]              havoc __ret_0_transferFrom;
[L5284]              havoc __ret_0_totalSupply;
[L5285]              havoc owner_s231;
[L5286]              havoc __ret_0_balanceOf;
[L5287]              havoc owner_s247;
[L5288]              havoc spender_s247;
[L5289]              havoc __ret_0_allowance;
[L5290]              havoc spender_s400;
[L5291]              havoc addedValue_s400;
[L5292]              havoc __ret_0_increaseAllowance;
[L5293]              havoc spender_s449;
[L5294]              havoc subtractedValue_s449;
[L5295]              havoc __ret_0_decreaseAllowance;
[L5296]              havoc name_s652;
[L5297]              havoc symbol_s652;
[L5298]              havoc decimals_s652;
[L5299]              havoc __ret_0_name;
[L5300]              havoc __ret_0_symbol;
[L5301]              havoc __ret_0_decimals;
[L5302]              havoc __ret_0_quantity;
[L5303]              havoc __ret_0_owner;
[L5304]              havoc __ret_0_startTime;
[L5305]              havoc _to_s1165;
[L5306]              havoc tmpNow;
[L5307]              havoc gas;
[L5308]              assume gas > 4000000 && gas <= 8000000;
[L5309]              tmpNow := now;
[L5310]              havoc now;
[L5311]              assume now > tmpNow;
[L5312]              assume msgsender_MSG != null;
[L5313]              assume DType[msgsender_MSG] != IERC20;
[L5314]              assume DType[msgsender_MSG] != SafeMath;
[L5315]              assume DType[msgsender_MSG] != ERC20;
[L5316]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5317]              assume DType[msgsender_MSG] != DplatformToken;
[L5318]              Alloc[msgsender_MSG] := true;
[L5319]  COND TRUE   choice == 15
[L5320]              gas := gas - 21000;
[L5321]  COND TRUE   gas >= 0
[L5322]              assume value_s266 >= 0 && value_s266 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5323]              assume msgvalue_MSG == 0;
[L5324]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s266, value_s266);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s266 && value_s266 <= _balances_ERC20[this][msgsender_MSG]) && value_s266 >= 0) && value_s266 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s266] >= 0) && _balances_ERC20[this][to_s266] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L655]               havoc __exception;
[L656]               revert := false;
[L657]   COND TRUE   __exception
[L658]               __tmp__Balance := Balance;
[L659]               __tmp__DType := DType;
[L660]               __tmp__Alloc := Alloc;
[L661]               __tmp__balance_ADDR := balance_ADDR;
[L662]               __tmp__M_Ref_int := M_Ref_int;
[L663]               __tmp__sum__balances0 := sum__balances0;
[L664]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L665]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L666]               __tmp__sum__allowed1 := sum__allowed1;
[L667]               __tmp__sum_balances2 := sum_balances2;
[L668]               __tmp__M_int_int := M_int_int;
[L669]               __tmp__sum_monthsTimestamp3 := sum_monthsTimestamp3;
[L670]               __tmp__sum_fibseries4 := sum_fibseries4;
[L671]               __tmp__Length := Length;
[L672]               __tmp__now := now;
[L673]               __tmp___balances_ERC20 := _balances_ERC20;
[L674]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L675]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L676]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L677]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L678]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L679]               __tmp__totalDPOM_DplatformToken := totalDPOM_DplatformToken;
[L680]               __tmp__INITIAL_SUPPLY_DplatformToken := INITIAL_SUPPLY_DplatformToken;
[L681]               __tmp__FIRST_YEAR_PERCENTAGE_DplatformToken := FIRST_YEAR_PERCENTAGE_DplatformToken;
[L682]               __tmp__SECOND_YEAR_PERCENTAGE_DplatformToken := SECOND_YEAR_PERCENTAGE_DplatformToken;
[L683]               __tmp__THIRD_YEAR_PERCENTAGE_DplatformToken := THIRD_YEAR_PERCENTAGE_DplatformToken;
[L684]               __tmp__FOURTH_YEAR_PERCENTAGE_DplatformToken := FOURTH_YEAR_PERCENTAGE_DplatformToken;
[L685]               __tmp__FIFTH_YEAR_PERCENTAGE_DplatformToken := FIFTH_YEAR_PERCENTAGE_DplatformToken;
[L686]               __tmp__quantity_DplatformToken := quantity_DplatformToken;
[L687]               __tmp__balances_DplatformToken := balances_DplatformToken;
[L688]               __tmp__owner_DplatformToken := owner_DplatformToken;
[L689]               __tmp__startTime_DplatformToken := startTime_DplatformToken;
[L690]               __tmp__monthsTimestamp_DplatformToken := monthsTimestamp_DplatformToken;
[L691]               __tmp__Length_fibseries_DplatformToken_lvl0 := Length_fibseries_DplatformToken_lvl0;
[L692]               __tmp__fibseries_DplatformToken := fibseries_DplatformToken;
[L693]               __tmp__operatingTime_DplatformToken := operatingTime_DplatformToken;
[L694]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s266, value_s266);
[L2978]  COND TRUE   __tmp__DType[this] == DplatformToken
[L2979]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L3187]              __var_7 := null;
[L3188]  COND FALSE  !(!(to_s495 != null))
[L3192]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][from_s495], value_s495);
[L2825]  COND FALSE  !(!(b_s149 <= a_s149))
[L2829]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2830]              __ret_0_ := c_s149;
[L3192]  RET         call __var_8 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][from_s495], value_s495);
[L3193]  COND FALSE  !(revert)
[L3196]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][from_s495];
[L3197]              __tmp___balances_ERC20[this][from_s495] := __var_8;
[L3198]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][from_s495];
[L3199]  CALL        call __var_9 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][to_s495], value_s495);
[L2849]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2850]  COND FALSE  !(!(c_s173 >= a_s173))
[L2854]              __ret_0_ := c_s173;
[L3199]  RET         call __var_9 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][to_s495], value_s495);
[L3200]  COND FALSE  !(revert)
[L3203]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][to_s495];
[L3204]              __tmp___balances_ERC20[this][to_s495] := __var_9;
[L3205]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][to_s495];
[L2979]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L2980]  COND FALSE  !(revert)
[L2991]              __ret_0_ := true;
[L694]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s266, value_s266);
[L695]               assume revert || gas < 0;
[L5324]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s266, value_s266);
[L5432]  RET         call CorralChoice_DplatformToken(this);

Loop:
[L5432]  CALL        call CorralChoice_DplatformToken(this);
[L5271]              havoc msgsender_MSG;
[L5272]              havoc msgvalue_MSG;
[L5273]              havoc choice;
[L5274]              havoc to_s266;
[L5275]              havoc value_s266;
[L5276]              havoc __ret_0_transfer;
[L5277]              havoc spender_s302;
[L5278]              havoc value_s302;
[L5279]              havoc __ret_0_approve;
[L5280]              havoc from_s351;
[L5281]              havoc to_s351;
[L5282]              havoc value_s351;
[L5283]              havoc __ret_0_transferFrom;
[L5284]              havoc __ret_0_totalSupply;
[L5285]              havoc owner_s231;
[L5286]              havoc __ret_0_balanceOf;
[L5287]              havoc owner_s247;
[L5288]              havoc spender_s247;
[L5289]              havoc __ret_0_allowance;
[L5290]              havoc spender_s400;
[L5291]              havoc addedValue_s400;
[L5292]              havoc __ret_0_increaseAllowance;
[L5293]              havoc spender_s449;
[L5294]              havoc subtractedValue_s449;
[L5295]              havoc __ret_0_decreaseAllowance;
[L5296]              havoc name_s652;
[L5297]              havoc symbol_s652;
[L5298]              havoc decimals_s652;
[L5299]              havoc __ret_0_name;
[L5300]              havoc __ret_0_symbol;
[L5301]              havoc __ret_0_decimals;
[L5302]              havoc __ret_0_quantity;
[L5303]              havoc __ret_0_owner;
[L5304]              havoc __ret_0_startTime;
[L5305]              havoc _to_s1165;
[L5306]              havoc tmpNow;
[L5307]              havoc gas;
[L5308]              assume gas > 4000000 && gas <= 8000000;
[L5309]              tmpNow := now;
[L5310]              havoc now;
[L5311]              assume now > tmpNow;
[L5312]              assume msgsender_MSG != null;
[L5313]              assume DType[msgsender_MSG] != IERC20;
[L5314]              assume DType[msgsender_MSG] != SafeMath;
[L5315]              assume DType[msgsender_MSG] != ERC20;
[L5316]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5317]              assume DType[msgsender_MSG] != DplatformToken;
[L5318]              Alloc[msgsender_MSG] := true;
[L5319]  COND TRUE   choice == 15
[L5320]              gas := gas - 21000;
[L5321]  COND FALSE  !(gas >= 0)
[L5432]  RET         call CorralChoice_DplatformToken(this);

[2020-11-25 14:21:10,280 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:21:10,280 INFO  L82        PathProgramCache]: Analyzing trace with hash 1239510642, now seen corresponding path program 1 times
[2020-11-25 14:21:10,280 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:21:10,291 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:21:10,326 INFO  L134       CoverageAnalysis]: Checked inductivity of 35 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 35 trivial. 0 not checked.
[2020-11-25 14:21:10,326 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 14:21:10,327 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-25 14:21:10,327 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:21:10,327 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-25 14:21:10,327 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-11-25 14:21:10,327 INFO  L87              Difference]: Start difference. First operand 3356 states and 3672 transitions. cyclomatic complexity: 332 Second operand 5 states.
[2020-11-25 14:21:10,573 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:21:10,573 INFO  L93              Difference]: Finished difference Result 3928 states and 4355 transitions.
[2020-11-25 14:21:10,573 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 14:21:10,573 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3928 states and 4355 transitions.
[2020-11-25 14:21:10,581 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-11-25 14:21:10,588 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3928 states to 2798 states and 3209 transitions.
[2020-11-25 14:21:10,588 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 513
[2020-11-25 14:21:10,589 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 513
[2020-11-25 14:21:10,589 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2798 states and 3209 transitions.
[2020-11-25 14:21:10,591 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:21:10,591 INFO  L728         BuchiCegarLoop]: Abstraction has 2798 states and 3209 transitions.
[2020-11-25 14:21:10,593 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2798 states and 3209 transitions.
[2020-11-25 14:21:10,605 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2798 to 2177.
[2020-11-25 14:21:10,605 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2177 states.
[2020-11-25 14:21:10,607 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2177 states to 2177 states and 2410 transitions.
[2020-11-25 14:21:10,607 INFO  L751         BuchiCegarLoop]: Abstraction has 2177 states and 2410 transitions.
[2020-11-25 14:21:10,607 INFO  L631         BuchiCegarLoop]: Abstraction has 2177 states and 2410 transitions.
[2020-11-25 14:21:10,607 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 14:21:10,607 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2177 states and 2410 transitions.
[2020-11-25 14:21:10,609 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:21:10,609 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:21:10,609 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:21:10,610 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:21:10,610 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L5422]              assume null == 0;
[L5423]  CALL        call this := FreshRefGenerator__success();
[L2696]              havoc newRef;
[L2697]              assume Alloc[newRef] == false;
[L2698]              Alloc[newRef] := true;
[L2699]              assume newRef != null;
[L5423]  RET         call this := FreshRefGenerator__success();
[L5424]              assume now >= 0;
[L5425]              assume DType[this] == DplatformToken;
[L5426]              assume msgvalue_MSG == 0;
[L5427]              gas := gas - 53000;
[L5428]  CALL        call DplatformToken_DplatformToken(this, msgsender_MSG, msgvalue_MSG);
[L1556]              havoc __exception;
[L1557]              revert := false;
[L1558]  COND FALSE  !(__exception)
[L1598]  CALL        call DplatformToken_DplatformToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3574]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2728]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2713]              assume msgsender_MSG != null;
[L2714]              Balance[this] := 0;
[L2728]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2729]  COND FALSE  !(revert)
[L3574]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3575]  COND FALSE  !(revert)
[L3578]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2930]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2728]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2713]              assume msgsender_MSG != null;
[L2714]              Balance[this] := 0;
[L2728]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2729]  COND FALSE  !(revert)
[L2930]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2931]  COND FALSE  !(revert)
[L2934]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2906]              assume msgsender_MSG != null;
[L2907]              Balance[this] := 0;
[L2908]              _balances_ERC20[this] := zeroRefintArr();
[L2909]              sum__balances0[this] := 0;
[L2910]              _allowed_ERC20[this] := zeroRefRefintArr();
[L2911]              sum__allowed1[this] := 0;
[L2912]              _totalSupply_ERC20[this] := 0;
[L2934]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2935]  COND FALSE  !(revert)
[L3578]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3579]  COND FALSE  !(revert)
[L3582]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1224663797, 727433945, 18);
[L3426]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2728]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2713]              assume msgsender_MSG != null;
[L2714]              Balance[this] := 0;
[L2728]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2729]  COND FALSE  !(revert)
[L3426]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3427]  COND FALSE  !(revert)
[L3430]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s652, symbol_s652, decimals_s652);
[L3401]              assume msgsender_MSG != null;
[L3402]              Balance[this] := 0;
[L3403]              _name_ERC20Detailed[this] := -1774930639;
[L3404]              _symbol_ERC20Detailed[this] := -1774930639;
[L3405]              _decimals_ERC20Detailed[this] := 0;
[L3407]              _name_ERC20Detailed[this] := name_s652;
[L3408]              _symbol_ERC20Detailed[this] := symbol_s652;
[L3409]              _decimals_ERC20Detailed[this] := decimals_s652;
[L3430]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s652, symbol_s652, decimals_s652);
[L3431]  COND FALSE  !(revert)
[L3582]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1224663797, 727433945, 18);
[L3583]  COND FALSE  !(revert)
[L3586]  CALL        call DplatformToken_DplatformToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3515]              assume msgsender_MSG != null;
[L3516]              Balance[this] := 0;
[L3517]              totalDPOM_DplatformToken[this] := 390000000 * (1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3518]              INITIAL_SUPPLY_DplatformToken[this] := 30000000 * (1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3519]              FIRST_YEAR_PERCENTAGE_DplatformToken[this] := 110;
[L3520]              SECOND_YEAR_PERCENTAGE_DplatformToken[this] := 106;
[L3521]              THIRD_YEAR_PERCENTAGE_DplatformToken[this] := 103;
[L3522]              FOURTH_YEAR_PERCENTAGE_DplatformToken[this] := 103;
[L3523]              FIFTH_YEAR_PERCENTAGE_DplatformToken[this] := 103;
[L3524]              quantity_DplatformToken[this] := 0;
[L3525]              balances_DplatformToken[this] := zeroRefintArr();
[L3526]              sum_balances2[this] := 0;
[L3527]              owner_DplatformToken[this] := null;
[L3528]              startTime_DplatformToken[this] := 0;
[L3529]              monthsTimestamp_DplatformToken[this] := zerointintArr();
[L3530]              sum_monthsTimestamp3[this] := 0;
[L3531]              Length_fibseries_DplatformToken_lvl0[this] := 0;
[L3532]              fibseries_DplatformToken[this] := zerointintArr();
[L3533]              sum_fibseries4[this] := 0;
[L3534]              operatingTime_DplatformToken[this] := 0;
[L3536]  COND TRUE   DType[this] == DplatformToken
[L3537]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, totalDPOM_DplatformToken[this]);
[L3264]              __var_10 := null;
[L3265]  COND FALSE  !(!(account_s537 != null))
[L3269]  CALL        call __var_11 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s537);
[L2861]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2862]  COND FALSE  !(!(c_s173 >= a_s173))
[L2866]              __ret_0_ := c_s173;
[L3269]  RET         call __var_11 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s537);
[L3270]  COND FALSE  !(revert)
[L3273]              _totalSupply_ERC20[this] := __var_11;
[L3274]  CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s537], value_s537);
[L2861]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2862]  COND FALSE  !(!(c_s173 >= a_s173))
[L2866]              __ret_0_ := c_s173;
[L3274]  RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s537], value_s537);
[L3275]  COND FALSE  !(revert)
[L3278]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s537];
[L3279]              _balances_ERC20[this][account_s537] := __var_12;
[L3280]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s537];
[L3281]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3537]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, totalDPOM_DplatformToken[this]);
[L3538]  COND FALSE  !(revert)
[L3544]              owner_DplatformToken[this] := msgsender_MSG;
[L3545]              sum_balances2[this] := sum_balances2[this] - balances_DplatformToken[this][owner_DplatformToken[this]];
[L3546]              balances_DplatformToken[this][owner_DplatformToken[this]] := totalDPOM_DplatformToken[this];
[L3547]              sum_balances2[this] := sum_balances2[this] + balances_DplatformToken[this][owner_DplatformToken[this]];
[L3548]              quantity_DplatformToken[this] := 0;
[L3549]              startTime_DplatformToken[this] := 1556647200;
[L3586]  RET         call DplatformToken_DplatformToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3587]  COND FALSE  !(revert)
[L1598]  RET         call DplatformToken_DplatformToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1599]              assume !revert && gas >= 0;
[L5428]  RET         call DplatformToken_DplatformToken(this, msgsender_MSG, msgvalue_MSG);
[L5429]              assume !revert && gas >= 0;
[L5432]  CALL        call CorralChoice_DplatformToken(this);
[L5271]              havoc msgsender_MSG;
[L5272]              havoc msgvalue_MSG;
[L5273]              havoc choice;
[L5274]              havoc to_s266;
[L5275]              havoc value_s266;
[L5276]              havoc __ret_0_transfer;
[L5277]              havoc spender_s302;
[L5278]              havoc value_s302;
[L5279]              havoc __ret_0_approve;
[L5280]              havoc from_s351;
[L5281]              havoc to_s351;
[L5282]              havoc value_s351;
[L5283]              havoc __ret_0_transferFrom;
[L5284]              havoc __ret_0_totalSupply;
[L5285]              havoc owner_s231;
[L5286]              havoc __ret_0_balanceOf;
[L5287]              havoc owner_s247;
[L5288]              havoc spender_s247;
[L5289]              havoc __ret_0_allowance;
[L5290]              havoc spender_s400;
[L5291]              havoc addedValue_s400;
[L5292]              havoc __ret_0_increaseAllowance;
[L5293]              havoc spender_s449;
[L5294]              havoc subtractedValue_s449;
[L5295]              havoc __ret_0_decreaseAllowance;
[L5296]              havoc name_s652;
[L5297]              havoc symbol_s652;
[L5298]              havoc decimals_s652;
[L5299]              havoc __ret_0_name;
[L5300]              havoc __ret_0_symbol;
[L5301]              havoc __ret_0_decimals;
[L5302]              havoc __ret_0_quantity;
[L5303]              havoc __ret_0_owner;
[L5304]              havoc __ret_0_startTime;
[L5305]              havoc _to_s1165;
[L5306]              havoc tmpNow;
[L5307]              havoc gas;
[L5308]              assume gas > 4000000 && gas <= 8000000;
[L5309]              tmpNow := now;
[L5310]              havoc now;
[L5311]              assume now > tmpNow;
[L5312]              assume msgsender_MSG != null;
[L5313]              assume DType[msgsender_MSG] != IERC20;
[L5314]              assume DType[msgsender_MSG] != SafeMath;
[L5315]              assume DType[msgsender_MSG] != ERC20;
[L5316]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5317]              assume DType[msgsender_MSG] != DplatformToken;
[L5318]              Alloc[msgsender_MSG] := true;
[L5319]  COND FALSE  !(choice == 15)
[L5326]  COND FALSE  !(choice == 14)
[L5333]  COND TRUE   choice == 13
[L5334]              gas := gas - 21000;
[L5335]  COND TRUE   gas >= 0
[L5336]              assume value_s351 >= 0 && value_s351 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5337]              assume msgvalue_MSG == 0;
[L5338]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s351, to_s351, value_s351);
[L837]               havoc __exception;
[L838]               revert := false;
[L839]   COND FALSE  !(__exception)
[L879]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s351, to_s351, value_s351);
[L3075]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s351][msgsender_MSG], value_s351);
[L2837]  COND FALSE  !(!(b_s149 <= a_s149))
[L2841]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2842]              __ret_0_ := c_s149;
[L3075]  RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s351][msgsender_MSG], value_s351);
[L3076]  COND FALSE  !(revert)
[L3079]              sum__allowed1[from_s351] := sum__allowed1[from_s351] - _allowed_ERC20[this][from_s351][msgsender_MSG];
[L3080]              _allowed_ERC20[this][from_s351][msgsender_MSG] := __var_2;
[L3081]              sum__allowed1[from_s351] := sum__allowed1[from_s351] + _allowed_ERC20[this][from_s351][msgsender_MSG];
[L3082]  COND TRUE   DType[this] == DplatformToken
[L3083]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s351, to_s351, value_s351);
[L3213]              __var_7 := null;
[L3214]  COND FALSE  !(!(to_s495 != null))
[L3218]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L2837]  COND FALSE  !(!(b_s149 <= a_s149))
[L2841]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2842]              __ret_0_ := c_s149;
[L3218]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L3219]  COND FALSE  !(revert)
[L3222]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s495];
[L3223]              _balances_ERC20[this][from_s495] := __var_8;
[L3224]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s495];
[L3225]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L2861]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2862]  COND FALSE  !(!(c_s173 >= a_s173))
[L2866]              __ret_0_ := c_s173;
[L3225]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L3226]  COND FALSE  !(revert)
[L3229]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s495];
[L3230]              _balances_ERC20[this][to_s495] := __var_9;
[L3231]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s495];
[L3232]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3083]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s351, to_s351, value_s351);
[L3084]  COND FALSE  !(revert)
[L3095]              assert { :EventEmitted "Approval_ERC20" } true;
[L3096]              __ret_0_ := true;
[L879]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s351, to_s351, value_s351);
[L880]               assume !revert && gas >= 0;
[L5338]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s351, to_s351, value_s351);
[L5432]  RET         call CorralChoice_DplatformToken(this);
[L5432]  CALL        call CorralChoice_DplatformToken(this);
[L5271]              havoc msgsender_MSG;
[L5272]              havoc msgvalue_MSG;
[L5273]              havoc choice;
[L5274]              havoc to_s266;
[L5275]              havoc value_s266;
[L5276]              havoc __ret_0_transfer;
[L5277]              havoc spender_s302;
[L5278]              havoc value_s302;
[L5279]              havoc __ret_0_approve;
[L5280]              havoc from_s351;
[L5281]              havoc to_s351;
[L5282]              havoc value_s351;
[L5283]              havoc __ret_0_transferFrom;
[L5284]              havoc __ret_0_totalSupply;
[L5285]              havoc owner_s231;
[L5286]              havoc __ret_0_balanceOf;
[L5287]              havoc owner_s247;
[L5288]              havoc spender_s247;
[L5289]              havoc __ret_0_allowance;
[L5290]              havoc spender_s400;
[L5291]              havoc addedValue_s400;
[L5292]              havoc __ret_0_increaseAllowance;
[L5293]              havoc spender_s449;
[L5294]              havoc subtractedValue_s449;
[L5295]              havoc __ret_0_decreaseAllowance;
[L5296]              havoc name_s652;
[L5297]              havoc symbol_s652;
[L5298]              havoc decimals_s652;
[L5299]              havoc __ret_0_name;
[L5300]              havoc __ret_0_symbol;
[L5301]              havoc __ret_0_decimals;
[L5302]              havoc __ret_0_quantity;
[L5303]              havoc __ret_0_owner;
[L5304]              havoc __ret_0_startTime;
[L5305]              havoc _to_s1165;
[L5306]              havoc tmpNow;
[L5307]              havoc gas;
[L5308]              assume gas > 4000000 && gas <= 8000000;
[L5309]              tmpNow := now;
[L5310]              havoc now;
[L5311]              assume now > tmpNow;
[L5312]              assume msgsender_MSG != null;
[L5313]              assume DType[msgsender_MSG] != IERC20;
[L5314]              assume DType[msgsender_MSG] != SafeMath;
[L5315]              assume DType[msgsender_MSG] != ERC20;
[L5316]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5317]              assume DType[msgsender_MSG] != DplatformToken;
[L5318]              Alloc[msgsender_MSG] := true;
[L5319]  COND TRUE   choice == 15
[L5320]              gas := gas - 21000;
[L5321]  COND TRUE   gas >= 0
[L5322]              assume value_s266 >= 0 && value_s266 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5323]              assume msgvalue_MSG == 0;
[L5324]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s266, value_s266);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s266 && value_s266 <= _balances_ERC20[this][msgsender_MSG]) && value_s266 >= 0) && value_s266 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s266] >= 0) && _balances_ERC20[this][to_s266] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L655]               havoc __exception;
[L656]               revert := false;
[L657]   COND FALSE  !(__exception)
[L697]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s266, value_s266);
[L2997]  COND TRUE   DType[this] == DplatformToken
[L2998]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L3213]              __var_7 := null;
[L3214]  COND FALSE  !(!(to_s495 != null))
[L3218]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L2837]  COND FALSE  !(!(b_s149 <= a_s149))
[L2841]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2842]              __ret_0_ := c_s149;
[L3218]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L3219]  COND FALSE  !(revert)
[L3222]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s495];
[L3223]              _balances_ERC20[this][from_s495] := __var_8;
[L3224]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s495];
[L3225]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L2861]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2862]  COND FALSE  !(!(c_s173 >= a_s173))
[L2866]              __ret_0_ := c_s173;
[L3225]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L3226]  COND FALSE  !(revert)
[L3229]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s495];
[L3230]              _balances_ERC20[this][to_s495] := __var_9;
[L3231]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s495];
[L3232]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2998]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L2999]  COND FALSE  !(revert)
[L3010]              __ret_0_ := true;
[L697]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s266, value_s266);
[L698]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && quantity_DplatformToken[this] == old(quantity_DplatformToken[this])) && balances_DplatformToken[this] == old(balances_DplatformToken[this])) && owner_DplatformToken[this] == old(owner_DplatformToken[this])) && startTime_DplatformToken[this] == old(startTime_DplatformToken[this])) && monthsTimestamp_DplatformToken[this] == old(monthsTimestamp_DplatformToken[this])) && fibseries_DplatformToken[this] == old(fibseries_DplatformToken[this])) && operatingTime_DplatformToken[this] == old(operatingTime_DplatformToken[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L5324]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s266, value_s266);
[L5432]  RET         call CorralChoice_DplatformToken(this);

Loop:
[L5432]  CALL        call CorralChoice_DplatformToken(this);
[L5271]              havoc msgsender_MSG;
[L5272]              havoc msgvalue_MSG;
[L5273]              havoc choice;
[L5274]              havoc to_s266;
[L5275]              havoc value_s266;
[L5276]              havoc __ret_0_transfer;
[L5277]              havoc spender_s302;
[L5278]              havoc value_s302;
[L5279]              havoc __ret_0_approve;
[L5280]              havoc from_s351;
[L5281]              havoc to_s351;
[L5282]              havoc value_s351;
[L5283]              havoc __ret_0_transferFrom;
[L5284]              havoc __ret_0_totalSupply;
[L5285]              havoc owner_s231;
[L5286]              havoc __ret_0_balanceOf;
[L5287]              havoc owner_s247;
[L5288]              havoc spender_s247;
[L5289]              havoc __ret_0_allowance;
[L5290]              havoc spender_s400;
[L5291]              havoc addedValue_s400;
[L5292]              havoc __ret_0_increaseAllowance;
[L5293]              havoc spender_s449;
[L5294]              havoc subtractedValue_s449;
[L5295]              havoc __ret_0_decreaseAllowance;
[L5296]              havoc name_s652;
[L5297]              havoc symbol_s652;
[L5298]              havoc decimals_s652;
[L5299]              havoc __ret_0_name;
[L5300]              havoc __ret_0_symbol;
[L5301]              havoc __ret_0_decimals;
[L5302]              havoc __ret_0_quantity;
[L5303]              havoc __ret_0_owner;
[L5304]              havoc __ret_0_startTime;
[L5305]              havoc _to_s1165;
[L5306]              havoc tmpNow;
[L5307]              havoc gas;
[L5308]              assume gas > 4000000 && gas <= 8000000;
[L5309]              tmpNow := now;
[L5310]              havoc now;
[L5311]              assume now > tmpNow;
[L5312]              assume msgsender_MSG != null;
[L5313]              assume DType[msgsender_MSG] != IERC20;
[L5314]              assume DType[msgsender_MSG] != SafeMath;
[L5315]              assume DType[msgsender_MSG] != ERC20;
[L5316]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5317]              assume DType[msgsender_MSG] != DplatformToken;
[L5318]              Alloc[msgsender_MSG] := true;
[L5319]  COND TRUE   choice == 15
[L5320]              gas := gas - 21000;
[L5321]  COND TRUE   gas >= 0
[L5322]              assume value_s266 >= 0 && value_s266 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5323]              assume msgvalue_MSG == 0;
[L5324]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s266, value_s266);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s266 && value_s266 <= _balances_ERC20[this][msgsender_MSG]) && value_s266 >= 0) && value_s266 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s266] >= 0) && _balances_ERC20[this][to_s266] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L655]               havoc __exception;
[L656]               revert := false;
[L657]   COND FALSE  !(__exception)
[L697]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s266, value_s266);
[L2997]  COND TRUE   DType[this] == DplatformToken
[L2998]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L3213]              __var_7 := null;
[L3214]  COND FALSE  !(!(to_s495 != null))
[L3218]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L2837]  COND FALSE  !(!(b_s149 <= a_s149))
[L2841]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2842]              __ret_0_ := c_s149;
[L3218]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L3219]  COND FALSE  !(revert)
[L3222]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s495];
[L3223]              _balances_ERC20[this][from_s495] := __var_8;
[L3224]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s495];
[L3225]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L2861]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2862]  COND FALSE  !(!(c_s173 >= a_s173))
[L2866]              __ret_0_ := c_s173;
[L3225]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L3226]  COND FALSE  !(revert)
[L3229]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s495];
[L3230]              _balances_ERC20[this][to_s495] := __var_9;
[L3231]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s495];
[L3232]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2998]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L2999]  COND FALSE  !(revert)
[L3010]              __ret_0_ := true;
[L697]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s266, value_s266);
[L698]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && quantity_DplatformToken[this] == old(quantity_DplatformToken[this])) && balances_DplatformToken[this] == old(balances_DplatformToken[this])) && owner_DplatformToken[this] == old(owner_DplatformToken[this])) && startTime_DplatformToken[this] == old(startTime_DplatformToken[this])) && monthsTimestamp_DplatformToken[this] == old(monthsTimestamp_DplatformToken[this])) && fibseries_DplatformToken[this] == old(fibseries_DplatformToken[this])) && operatingTime_DplatformToken[this] == old(operatingTime_DplatformToken[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L5324]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s266, value_s266);
[L5432]  RET         call CorralChoice_DplatformToken(this);

[2020-11-25 14:21:10,614 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:21:10,614 INFO  L82        PathProgramCache]: Analyzing trace with hash -704780351, now seen corresponding path program 1 times
[2020-11-25 14:21:10,614 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:21:10,706 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:21:12,801 INFO  L134       CoverageAnalysis]: Checked inductivity of 101 backedges. 8 proven. 59 refuted. 0 times theorem prover too weak. 34 trivial. 0 not checked.
[2020-11-25 14:21:12,801 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 14:21:12,802 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [63] total 63
[2020-11-25 14:21:12,802 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:21:12,802 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 64 interpolants.
[2020-11-25 14:21:12,803 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=323, Invalid=3709, Unknown=0, NotChecked=0, Total=4032
[2020-11-25 14:21:12,803 INFO  L87              Difference]: Start difference. First operand 2177 states and 2410 transitions. cyclomatic complexity: 246 Second operand 64 states.
[2020-11-25 14:21:17,345 WARN  L188               SmtUtils]: Spent 100.00 ms on a formula simplification. DAG size of input: 79 DAG size of output: 72
[2020-11-25 14:21:19,265 WARN  L188               SmtUtils]: Spent 577.00 ms on a formula simplification. DAG size of input: 120 DAG size of output: 114
[2020-11-25 14:21:19,878 WARN  L188               SmtUtils]: Spent 104.00 ms on a formula simplification. DAG size of input: 101 DAG size of output: 91
[2020-11-25 14:21:31,289 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:21:31,289 INFO  L93              Difference]: Finished difference Result 2449 states and 2774 transitions.
[2020-11-25 14:21:31,290 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 51 states. 
[2020-11-25 14:21:31,290 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2449 states and 2774 transitions.
[2020-11-25 14:21:31,294 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 14:21:31,299 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2449 states to 2449 states and 2774 transitions.
[2020-11-25 14:21:31,299 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 499
[2020-11-25 14:21:31,299 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 499
[2020-11-25 14:21:31,299 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2449 states and 2774 transitions.
[2020-11-25 14:21:31,301 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:21:31,301 INFO  L728         BuchiCegarLoop]: Abstraction has 2449 states and 2774 transitions.
[2020-11-25 14:21:31,303 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2449 states and 2774 transitions.
[2020-11-25 14:21:31,314 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2449 to 2404.
[2020-11-25 14:21:31,314 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2404 states.
[2020-11-25 14:21:31,316 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2404 states to 2404 states and 2713 transitions.
[2020-11-25 14:21:31,316 INFO  L751         BuchiCegarLoop]: Abstraction has 2404 states and 2713 transitions.
[2020-11-25 14:21:31,316 INFO  L631         BuchiCegarLoop]: Abstraction has 2404 states and 2713 transitions.
[2020-11-25 14:21:31,316 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-25 14:21:31,316 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2404 states and 2713 transitions.
[2020-11-25 14:21:31,319 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 14:21:31,319 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:21:31,319 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:21:31,320 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:21:31,320 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L5422]              assume null == 0;
[L5423]  CALL        call this := FreshRefGenerator__success();
[L2696]              havoc newRef;
[L2697]              assume Alloc[newRef] == false;
[L2698]              Alloc[newRef] := true;
[L2699]              assume newRef != null;
[L5423]  RET         call this := FreshRefGenerator__success();
[L5424]              assume now >= 0;
[L5425]              assume DType[this] == DplatformToken;
[L5426]              assume msgvalue_MSG == 0;
[L5427]              gas := gas - 53000;
[L5428]  CALL        call DplatformToken_DplatformToken(this, msgsender_MSG, msgvalue_MSG);
[L1556]              havoc __exception;
[L1557]              revert := false;
[L1558]  COND FALSE  !(__exception)
[L1598]  CALL        call DplatformToken_DplatformToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3574]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2728]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2713]              assume msgsender_MSG != null;
[L2714]              Balance[this] := 0;
[L2728]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2729]  COND FALSE  !(revert)
[L3574]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3575]  COND FALSE  !(revert)
[L3578]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2930]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2728]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2713]              assume msgsender_MSG != null;
[L2714]              Balance[this] := 0;
[L2728]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2729]  COND FALSE  !(revert)
[L2930]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2931]  COND FALSE  !(revert)
[L2934]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2906]              assume msgsender_MSG != null;
[L2907]              Balance[this] := 0;
[L2908]              _balances_ERC20[this] := zeroRefintArr();
[L2909]              sum__balances0[this] := 0;
[L2910]              _allowed_ERC20[this] := zeroRefRefintArr();
[L2911]              sum__allowed1[this] := 0;
[L2912]              _totalSupply_ERC20[this] := 0;
[L2934]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2935]  COND FALSE  !(revert)
[L3578]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3579]  COND FALSE  !(revert)
[L3582]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1224663797, 727433945, 18);
[L3426]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2728]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2713]              assume msgsender_MSG != null;
[L2714]              Balance[this] := 0;
[L2728]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2729]  COND FALSE  !(revert)
[L3426]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3427]  COND FALSE  !(revert)
[L3430]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s652, symbol_s652, decimals_s652);
[L3401]              assume msgsender_MSG != null;
[L3402]              Balance[this] := 0;
[L3403]              _name_ERC20Detailed[this] := -1774930639;
[L3404]              _symbol_ERC20Detailed[this] := -1774930639;
[L3405]              _decimals_ERC20Detailed[this] := 0;
[L3407]              _name_ERC20Detailed[this] := name_s652;
[L3408]              _symbol_ERC20Detailed[this] := symbol_s652;
[L3409]              _decimals_ERC20Detailed[this] := decimals_s652;
[L3430]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s652, symbol_s652, decimals_s652);
[L3431]  COND FALSE  !(revert)
[L3582]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1224663797, 727433945, 18);
[L3583]  COND FALSE  !(revert)
[L3586]  CALL        call DplatformToken_DplatformToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3515]              assume msgsender_MSG != null;
[L3516]              Balance[this] := 0;
[L3517]              totalDPOM_DplatformToken[this] := 390000000 * (1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3518]              INITIAL_SUPPLY_DplatformToken[this] := 30000000 * (1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3519]              FIRST_YEAR_PERCENTAGE_DplatformToken[this] := 110;
[L3520]              SECOND_YEAR_PERCENTAGE_DplatformToken[this] := 106;
[L3521]              THIRD_YEAR_PERCENTAGE_DplatformToken[this] := 103;
[L3522]              FOURTH_YEAR_PERCENTAGE_DplatformToken[this] := 103;
[L3523]              FIFTH_YEAR_PERCENTAGE_DplatformToken[this] := 103;
[L3524]              quantity_DplatformToken[this] := 0;
[L3525]              balances_DplatformToken[this] := zeroRefintArr();
[L3526]              sum_balances2[this] := 0;
[L3527]              owner_DplatformToken[this] := null;
[L3528]              startTime_DplatformToken[this] := 0;
[L3529]              monthsTimestamp_DplatformToken[this] := zerointintArr();
[L3530]              sum_monthsTimestamp3[this] := 0;
[L3531]              Length_fibseries_DplatformToken_lvl0[this] := 0;
[L3532]              fibseries_DplatformToken[this] := zerointintArr();
[L3533]              sum_fibseries4[this] := 0;
[L3534]              operatingTime_DplatformToken[this] := 0;
[L3536]  COND TRUE   DType[this] == DplatformToken
[L3537]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, totalDPOM_DplatformToken[this]);
[L3264]              __var_10 := null;
[L3265]  COND FALSE  !(!(account_s537 != null))
[L3269]  CALL        call __var_11 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s537);
[L2861]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2862]  COND FALSE  !(!(c_s173 >= a_s173))
[L2866]              __ret_0_ := c_s173;
[L3269]  RET         call __var_11 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s537);
[L3270]  COND FALSE  !(revert)
[L3273]              _totalSupply_ERC20[this] := __var_11;
[L3274]  CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s537], value_s537);
[L2861]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2862]  COND FALSE  !(!(c_s173 >= a_s173))
[L2866]              __ret_0_ := c_s173;
[L3274]  RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s537], value_s537);
[L3275]  COND FALSE  !(revert)
[L3278]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s537];
[L3279]              _balances_ERC20[this][account_s537] := __var_12;
[L3280]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s537];
[L3281]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3537]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, totalDPOM_DplatformToken[this]);
[L3538]  COND FALSE  !(revert)
[L3544]              owner_DplatformToken[this] := msgsender_MSG;
[L3545]              sum_balances2[this] := sum_balances2[this] - balances_DplatformToken[this][owner_DplatformToken[this]];
[L3546]              balances_DplatformToken[this][owner_DplatformToken[this]] := totalDPOM_DplatformToken[this];
[L3547]              sum_balances2[this] := sum_balances2[this] + balances_DplatformToken[this][owner_DplatformToken[this]];
[L3548]              quantity_DplatformToken[this] := 0;
[L3549]              startTime_DplatformToken[this] := 1556647200;
[L3586]  RET         call DplatformToken_DplatformToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3587]  COND FALSE  !(revert)
[L1598]  RET         call DplatformToken_DplatformToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1599]              assume !revert && gas >= 0;
[L5428]  RET         call DplatformToken_DplatformToken(this, msgsender_MSG, msgvalue_MSG);
[L5429]              assume !revert && gas >= 0;
[L5432]  CALL        call CorralChoice_DplatformToken(this);
[L5271]              havoc msgsender_MSG;
[L5272]              havoc msgvalue_MSG;
[L5273]              havoc choice;
[L5274]              havoc to_s266;
[L5275]              havoc value_s266;
[L5276]              havoc __ret_0_transfer;
[L5277]              havoc spender_s302;
[L5278]              havoc value_s302;
[L5279]              havoc __ret_0_approve;
[L5280]              havoc from_s351;
[L5281]              havoc to_s351;
[L5282]              havoc value_s351;
[L5283]              havoc __ret_0_transferFrom;
[L5284]              havoc __ret_0_totalSupply;
[L5285]              havoc owner_s231;
[L5286]              havoc __ret_0_balanceOf;
[L5287]              havoc owner_s247;
[L5288]              havoc spender_s247;
[L5289]              havoc __ret_0_allowance;
[L5290]              havoc spender_s400;
[L5291]              havoc addedValue_s400;
[L5292]              havoc __ret_0_increaseAllowance;
[L5293]              havoc spender_s449;
[L5294]              havoc subtractedValue_s449;
[L5295]              havoc __ret_0_decreaseAllowance;
[L5296]              havoc name_s652;
[L5297]              havoc symbol_s652;
[L5298]              havoc decimals_s652;
[L5299]              havoc __ret_0_name;
[L5300]              havoc __ret_0_symbol;
[L5301]              havoc __ret_0_decimals;
[L5302]              havoc __ret_0_quantity;
[L5303]              havoc __ret_0_owner;
[L5304]              havoc __ret_0_startTime;
[L5305]              havoc _to_s1165;
[L5306]              havoc tmpNow;
[L5307]              havoc gas;
[L5308]              assume gas > 4000000 && gas <= 8000000;
[L5309]              tmpNow := now;
[L5310]              havoc now;
[L5311]              assume now > tmpNow;
[L5312]              assume msgsender_MSG != null;
[L5313]              assume DType[msgsender_MSG] != IERC20;
[L5314]              assume DType[msgsender_MSG] != SafeMath;
[L5315]              assume DType[msgsender_MSG] != ERC20;
[L5316]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5317]              assume DType[msgsender_MSG] != DplatformToken;
[L5318]              Alloc[msgsender_MSG] := true;
[L5319]  COND TRUE   choice == 15
[L5320]              gas := gas - 21000;
[L5321]  COND TRUE   gas >= 0
[L5322]              assume value_s266 >= 0 && value_s266 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5323]              assume msgvalue_MSG == 0;
[L5324]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s266, value_s266);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == to_s266 && value_s266 <= _balances_ERC20[this][msgsender_MSG]) && value_s266 >= 0) && value_s266 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s266] >= 0) && _balances_ERC20[this][to_s266] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L655]               havoc __exception;
[L656]               revert := false;
[L657]   COND FALSE  !(__exception)
[L697]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s266, value_s266);
[L2997]  COND FALSE  !(DType[this] == DplatformToken)
[L3002]  COND TRUE   DType[this] == ERC20
[L3003]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L3213]              __var_7 := null;
[L3214]  COND FALSE  !(!(to_s495 != null))
[L3218]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L2837]  COND FALSE  !(!(b_s149 <= a_s149))
[L2841]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2842]              __ret_0_ := c_s149;
[L3218]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L3219]  COND FALSE  !(revert)
[L3222]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s495];
[L3223]              _balances_ERC20[this][from_s495] := __var_8;
[L3224]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s495];
[L3225]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L2861]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2862]  COND FALSE  !(!(c_s173 >= a_s173))
[L2866]              __ret_0_ := c_s173;
[L3225]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L3226]  COND FALSE  !(revert)
[L3229]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s495];
[L3230]              _balances_ERC20[this][to_s495] := __var_9;
[L3231]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s495];
[L3232]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3003]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L3004]  COND FALSE  !(revert)
[L3010]              __ret_0_ := true;
[L697]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s266, value_s266);
[L698]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && quantity_DplatformToken[this] == old(quantity_DplatformToken[this])) && balances_DplatformToken[this] == old(balances_DplatformToken[this])) && owner_DplatformToken[this] == old(owner_DplatformToken[this])) && startTime_DplatformToken[this] == old(startTime_DplatformToken[this])) && monthsTimestamp_DplatformToken[this] == old(monthsTimestamp_DplatformToken[this])) && fibseries_DplatformToken[this] == old(fibseries_DplatformToken[this])) && operatingTime_DplatformToken[this] == old(operatingTime_DplatformToken[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L5324]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s266, value_s266);
[L5432]  RET         call CorralChoice_DplatformToken(this);
[L5432]  CALL        call CorralChoice_DplatformToken(this);
[L5271]              havoc msgsender_MSG;
[L5272]              havoc msgvalue_MSG;
[L5273]              havoc choice;
[L5274]              havoc to_s266;
[L5275]              havoc value_s266;
[L5276]              havoc __ret_0_transfer;
[L5277]              havoc spender_s302;
[L5278]              havoc value_s302;
[L5279]              havoc __ret_0_approve;
[L5280]              havoc from_s351;
[L5281]              havoc to_s351;
[L5282]              havoc value_s351;
[L5283]              havoc __ret_0_transferFrom;
[L5284]              havoc __ret_0_totalSupply;
[L5285]              havoc owner_s231;
[L5286]              havoc __ret_0_balanceOf;
[L5287]              havoc owner_s247;
[L5288]              havoc spender_s247;
[L5289]              havoc __ret_0_allowance;
[L5290]              havoc spender_s400;
[L5291]              havoc addedValue_s400;
[L5292]              havoc __ret_0_increaseAllowance;
[L5293]              havoc spender_s449;
[L5294]              havoc subtractedValue_s449;
[L5295]              havoc __ret_0_decreaseAllowance;
[L5296]              havoc name_s652;
[L5297]              havoc symbol_s652;
[L5298]              havoc decimals_s652;
[L5299]              havoc __ret_0_name;
[L5300]              havoc __ret_0_symbol;
[L5301]              havoc __ret_0_decimals;
[L5302]              havoc __ret_0_quantity;
[L5303]              havoc __ret_0_owner;
[L5304]              havoc __ret_0_startTime;
[L5305]              havoc _to_s1165;
[L5306]              havoc tmpNow;
[L5307]              havoc gas;
[L5308]              assume gas > 4000000 && gas <= 8000000;
[L5309]              tmpNow := now;
[L5310]              havoc now;
[L5311]              assume now > tmpNow;
[L5312]              assume msgsender_MSG != null;
[L5313]              assume DType[msgsender_MSG] != IERC20;
[L5314]              assume DType[msgsender_MSG] != SafeMath;
[L5315]              assume DType[msgsender_MSG] != ERC20;
[L5316]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5317]              assume DType[msgsender_MSG] != DplatformToken;
[L5318]              Alloc[msgsender_MSG] := true;
[L5319]  COND TRUE   choice == 15
[L5320]              gas := gas - 21000;
[L5321]  COND TRUE   gas >= 0
[L5322]              assume value_s266 >= 0 && value_s266 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5323]              assume msgvalue_MSG == 0;
[L5324]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s266, value_s266);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s266 && value_s266 <= _balances_ERC20[this][msgsender_MSG]) && value_s266 >= 0) && value_s266 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s266] >= 0) && _balances_ERC20[this][to_s266] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L655]               havoc __exception;
[L656]               revert := false;
[L657]   COND FALSE  !(__exception)
[L697]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s266, value_s266);
[L2997]  COND TRUE   DType[this] == DplatformToken
[L2998]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L3213]              __var_7 := null;
[L3214]  COND FALSE  !(!(to_s495 != null))
[L3218]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L2837]  COND FALSE  !(!(b_s149 <= a_s149))
[L2841]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2842]              __ret_0_ := c_s149;
[L3218]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L3219]  COND FALSE  !(revert)
[L3222]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s495];
[L3223]              _balances_ERC20[this][from_s495] := __var_8;
[L3224]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s495];
[L3225]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L2861]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2862]  COND FALSE  !(!(c_s173 >= a_s173))
[L2866]              __ret_0_ := c_s173;
[L3225]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L3226]  COND FALSE  !(revert)
[L3229]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s495];
[L3230]              _balances_ERC20[this][to_s495] := __var_9;
[L3231]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s495];
[L3232]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2998]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L2999]  COND FALSE  !(revert)
[L3010]              __ret_0_ := true;
[L697]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s266, value_s266);
[L698]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && quantity_DplatformToken[this] == old(quantity_DplatformToken[this])) && balances_DplatformToken[this] == old(balances_DplatformToken[this])) && owner_DplatformToken[this] == old(owner_DplatformToken[this])) && startTime_DplatformToken[this] == old(startTime_DplatformToken[this])) && monthsTimestamp_DplatformToken[this] == old(monthsTimestamp_DplatformToken[this])) && fibseries_DplatformToken[this] == old(fibseries_DplatformToken[this])) && operatingTime_DplatformToken[this] == old(operatingTime_DplatformToken[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L5324]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s266, value_s266);
[L5432]  RET         call CorralChoice_DplatformToken(this);

Loop:
[L5432]  CALL        call CorralChoice_DplatformToken(this);
[L5271]              havoc msgsender_MSG;
[L5272]              havoc msgvalue_MSG;
[L5273]              havoc choice;
[L5274]              havoc to_s266;
[L5275]              havoc value_s266;
[L5276]              havoc __ret_0_transfer;
[L5277]              havoc spender_s302;
[L5278]              havoc value_s302;
[L5279]              havoc __ret_0_approve;
[L5280]              havoc from_s351;
[L5281]              havoc to_s351;
[L5282]              havoc value_s351;
[L5283]              havoc __ret_0_transferFrom;
[L5284]              havoc __ret_0_totalSupply;
[L5285]              havoc owner_s231;
[L5286]              havoc __ret_0_balanceOf;
[L5287]              havoc owner_s247;
[L5288]              havoc spender_s247;
[L5289]              havoc __ret_0_allowance;
[L5290]              havoc spender_s400;
[L5291]              havoc addedValue_s400;
[L5292]              havoc __ret_0_increaseAllowance;
[L5293]              havoc spender_s449;
[L5294]              havoc subtractedValue_s449;
[L5295]              havoc __ret_0_decreaseAllowance;
[L5296]              havoc name_s652;
[L5297]              havoc symbol_s652;
[L5298]              havoc decimals_s652;
[L5299]              havoc __ret_0_name;
[L5300]              havoc __ret_0_symbol;
[L5301]              havoc __ret_0_decimals;
[L5302]              havoc __ret_0_quantity;
[L5303]              havoc __ret_0_owner;
[L5304]              havoc __ret_0_startTime;
[L5305]              havoc _to_s1165;
[L5306]              havoc tmpNow;
[L5307]              havoc gas;
[L5308]              assume gas > 4000000 && gas <= 8000000;
[L5309]              tmpNow := now;
[L5310]              havoc now;
[L5311]              assume now > tmpNow;
[L5312]              assume msgsender_MSG != null;
[L5313]              assume DType[msgsender_MSG] != IERC20;
[L5314]              assume DType[msgsender_MSG] != SafeMath;
[L5315]              assume DType[msgsender_MSG] != ERC20;
[L5316]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5317]              assume DType[msgsender_MSG] != DplatformToken;
[L5318]              Alloc[msgsender_MSG] := true;
[L5319]  COND TRUE   choice == 15
[L5320]              gas := gas - 21000;
[L5321]  COND TRUE   gas >= 0
[L5322]              assume value_s266 >= 0 && value_s266 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5323]              assume msgvalue_MSG == 0;
[L5324]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s266, value_s266);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == to_s266 && value_s266 <= _balances_ERC20[this][msgsender_MSG]) && value_s266 >= 0) && value_s266 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s266] >= 0) && _balances_ERC20[this][to_s266] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L655]               havoc __exception;
[L656]               revert := false;
[L657]   COND FALSE  !(__exception)
[L697]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s266, value_s266);
[L2997]  COND TRUE   DType[this] == DplatformToken
[L2998]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L3213]              __var_7 := null;
[L3214]  COND FALSE  !(!(to_s495 != null))
[L3218]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L2837]  COND FALSE  !(!(b_s149 <= a_s149))
[L2841]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2842]              __ret_0_ := c_s149;
[L3218]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L3219]  COND FALSE  !(revert)
[L3222]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s495];
[L3223]              _balances_ERC20[this][from_s495] := __var_8;
[L3224]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s495];
[L3225]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L2861]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2862]  COND FALSE  !(!(c_s173 >= a_s173))
[L2866]              __ret_0_ := c_s173;
[L3225]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L3226]  COND FALSE  !(revert)
[L3229]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s495];
[L3230]              _balances_ERC20[this][to_s495] := __var_9;
[L3231]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s495];
[L3232]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2998]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L2999]  COND FALSE  !(revert)
[L3010]              __ret_0_ := true;
[L697]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s266, value_s266);
[L698]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && quantity_DplatformToken[this] == old(quantity_DplatformToken[this])) && balances_DplatformToken[this] == old(balances_DplatformToken[this])) && owner_DplatformToken[this] == old(owner_DplatformToken[this])) && startTime_DplatformToken[this] == old(startTime_DplatformToken[this])) && monthsTimestamp_DplatformToken[this] == old(monthsTimestamp_DplatformToken[this])) && fibseries_DplatformToken[this] == old(fibseries_DplatformToken[this])) && operatingTime_DplatformToken[this] == old(operatingTime_DplatformToken[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L5324]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s266, value_s266);
[L5432]  RET         call CorralChoice_DplatformToken(this);

[2020-11-25 14:21:31,323 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:21:31,323 INFO  L82        PathProgramCache]: Analyzing trace with hash -849909611, now seen corresponding path program 1 times
[2020-11-25 14:21:31,324 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:21:31,337 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:21:31,396 INFO  L134       CoverageAnalysis]: Checked inductivity of 105 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 104 trivial. 0 not checked.
[2020-11-25 14:21:31,396 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 14:21:31,397 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 14:21:31,397 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:21:31,397 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 14:21:31,397 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-25 14:21:31,397 INFO  L87              Difference]: Start difference. First operand 2404 states and 2713 transitions. cyclomatic complexity: 327 Second operand 6 states.
[2020-11-25 14:21:31,433 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:21:31,434 INFO  L93              Difference]: Finished difference Result 2465 states and 2781 transitions.
[2020-11-25 14:21:31,434 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-11-25 14:21:31,434 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2465 states and 2781 transitions.
[2020-11-25 14:21:31,438 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 14:21:31,443 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2465 states to 2410 states and 2723 transitions.
[2020-11-25 14:21:31,443 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 468
[2020-11-25 14:21:31,443 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 468
[2020-11-25 14:21:31,443 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2410 states and 2723 transitions.
[2020-11-25 14:21:31,444 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:21:31,444 INFO  L728         BuchiCegarLoop]: Abstraction has 2410 states and 2723 transitions.
[2020-11-25 14:21:31,446 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2410 states and 2723 transitions.
[2020-11-25 14:21:31,456 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2410 to 2410.
[2020-11-25 14:21:31,456 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2410 states.
[2020-11-25 14:21:31,458 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2410 states to 2410 states and 2723 transitions.
[2020-11-25 14:21:31,458 INFO  L751         BuchiCegarLoop]: Abstraction has 2410 states and 2723 transitions.
[2020-11-25 14:21:31,458 INFO  L631         BuchiCegarLoop]: Abstraction has 2410 states and 2723 transitions.
[2020-11-25 14:21:31,458 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-11-25 14:21:31,458 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2410 states and 2723 transitions.
[2020-11-25 14:21:31,461 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 14:21:31,461 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:21:31,461 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:21:31,462 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:21:31,462 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L5422]              assume null == 0;
[L5423]  CALL        call this := FreshRefGenerator__success();
[L2696]              havoc newRef;
[L2697]              assume Alloc[newRef] == false;
[L2698]              Alloc[newRef] := true;
[L2699]              assume newRef != null;
[L5423]  RET         call this := FreshRefGenerator__success();
[L5424]              assume now >= 0;
[L5425]              assume DType[this] == DplatformToken;
[L5426]              assume msgvalue_MSG == 0;
[L5427]              gas := gas - 53000;
[L5428]  CALL        call DplatformToken_DplatformToken(this, msgsender_MSG, msgvalue_MSG);
[L1556]              havoc __exception;
[L1557]              revert := false;
[L1558]  COND FALSE  !(__exception)
[L1598]  CALL        call DplatformToken_DplatformToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3574]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2728]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2713]              assume msgsender_MSG != null;
[L2714]              Balance[this] := 0;
[L2728]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2729]  COND FALSE  !(revert)
[L3574]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3575]  COND FALSE  !(revert)
[L3578]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2930]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2728]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2713]              assume msgsender_MSG != null;
[L2714]              Balance[this] := 0;
[L2728]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2729]  COND FALSE  !(revert)
[L2930]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2931]  COND FALSE  !(revert)
[L2934]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2906]              assume msgsender_MSG != null;
[L2907]              Balance[this] := 0;
[L2908]              _balances_ERC20[this] := zeroRefintArr();
[L2909]              sum__balances0[this] := 0;
[L2910]              _allowed_ERC20[this] := zeroRefRefintArr();
[L2911]              sum__allowed1[this] := 0;
[L2912]              _totalSupply_ERC20[this] := 0;
[L2934]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2935]  COND FALSE  !(revert)
[L3578]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3579]  COND FALSE  !(revert)
[L3582]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1224663797, 727433945, 18);
[L3426]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2728]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2713]              assume msgsender_MSG != null;
[L2714]              Balance[this] := 0;
[L2728]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2729]  COND FALSE  !(revert)
[L3426]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3427]  COND FALSE  !(revert)
[L3430]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s652, symbol_s652, decimals_s652);
[L3401]              assume msgsender_MSG != null;
[L3402]              Balance[this] := 0;
[L3403]              _name_ERC20Detailed[this] := -1774930639;
[L3404]              _symbol_ERC20Detailed[this] := -1774930639;
[L3405]              _decimals_ERC20Detailed[this] := 0;
[L3407]              _name_ERC20Detailed[this] := name_s652;
[L3408]              _symbol_ERC20Detailed[this] := symbol_s652;
[L3409]              _decimals_ERC20Detailed[this] := decimals_s652;
[L3430]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s652, symbol_s652, decimals_s652);
[L3431]  COND FALSE  !(revert)
[L3582]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1224663797, 727433945, 18);
[L3583]  COND FALSE  !(revert)
[L3586]  CALL        call DplatformToken_DplatformToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3515]              assume msgsender_MSG != null;
[L3516]              Balance[this] := 0;
[L3517]              totalDPOM_DplatformToken[this] := 390000000 * (1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3518]              INITIAL_SUPPLY_DplatformToken[this] := 30000000 * (1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3519]              FIRST_YEAR_PERCENTAGE_DplatformToken[this] := 110;
[L3520]              SECOND_YEAR_PERCENTAGE_DplatformToken[this] := 106;
[L3521]              THIRD_YEAR_PERCENTAGE_DplatformToken[this] := 103;
[L3522]              FOURTH_YEAR_PERCENTAGE_DplatformToken[this] := 103;
[L3523]              FIFTH_YEAR_PERCENTAGE_DplatformToken[this] := 103;
[L3524]              quantity_DplatformToken[this] := 0;
[L3525]              balances_DplatformToken[this] := zeroRefintArr();
[L3526]              sum_balances2[this] := 0;
[L3527]              owner_DplatformToken[this] := null;
[L3528]              startTime_DplatformToken[this] := 0;
[L3529]              monthsTimestamp_DplatformToken[this] := zerointintArr();
[L3530]              sum_monthsTimestamp3[this] := 0;
[L3531]              Length_fibseries_DplatformToken_lvl0[this] := 0;
[L3532]              fibseries_DplatformToken[this] := zerointintArr();
[L3533]              sum_fibseries4[this] := 0;
[L3534]              operatingTime_DplatformToken[this] := 0;
[L3536]  COND TRUE   DType[this] == DplatformToken
[L3537]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, totalDPOM_DplatformToken[this]);
[L3264]              __var_10 := null;
[L3265]  COND FALSE  !(!(account_s537 != null))
[L3269]  CALL        call __var_11 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s537);
[L2861]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2862]  COND FALSE  !(!(c_s173 >= a_s173))
[L2866]              __ret_0_ := c_s173;
[L3269]  RET         call __var_11 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s537);
[L3270]  COND FALSE  !(revert)
[L3273]              _totalSupply_ERC20[this] := __var_11;
[L3274]  CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s537], value_s537);
[L2861]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2862]  COND FALSE  !(!(c_s173 >= a_s173))
[L2866]              __ret_0_ := c_s173;
[L3274]  RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s537], value_s537);
[L3275]  COND FALSE  !(revert)
[L3278]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s537];
[L3279]              _balances_ERC20[this][account_s537] := __var_12;
[L3280]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s537];
[L3281]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3537]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, totalDPOM_DplatformToken[this]);
[L3538]  COND FALSE  !(revert)
[L3544]              owner_DplatformToken[this] := msgsender_MSG;
[L3545]              sum_balances2[this] := sum_balances2[this] - balances_DplatformToken[this][owner_DplatformToken[this]];
[L3546]              balances_DplatformToken[this][owner_DplatformToken[this]] := totalDPOM_DplatformToken[this];
[L3547]              sum_balances2[this] := sum_balances2[this] + balances_DplatformToken[this][owner_DplatformToken[this]];
[L3548]              quantity_DplatformToken[this] := 0;
[L3549]              startTime_DplatformToken[this] := 1556647200;
[L3586]  RET         call DplatformToken_DplatformToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3587]  COND FALSE  !(revert)
[L1598]  RET         call DplatformToken_DplatformToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1599]              assume !revert && gas >= 0;
[L5428]  RET         call DplatformToken_DplatformToken(this, msgsender_MSG, msgvalue_MSG);
[L5429]              assume !revert && gas >= 0;
[L5432]  CALL        call CorralChoice_DplatformToken(this);
[L5271]              havoc msgsender_MSG;
[L5272]              havoc msgvalue_MSG;
[L5273]              havoc choice;
[L5274]              havoc to_s266;
[L5275]              havoc value_s266;
[L5276]              havoc __ret_0_transfer;
[L5277]              havoc spender_s302;
[L5278]              havoc value_s302;
[L5279]              havoc __ret_0_approve;
[L5280]              havoc from_s351;
[L5281]              havoc to_s351;
[L5282]              havoc value_s351;
[L5283]              havoc __ret_0_transferFrom;
[L5284]              havoc __ret_0_totalSupply;
[L5285]              havoc owner_s231;
[L5286]              havoc __ret_0_balanceOf;
[L5287]              havoc owner_s247;
[L5288]              havoc spender_s247;
[L5289]              havoc __ret_0_allowance;
[L5290]              havoc spender_s400;
[L5291]              havoc addedValue_s400;
[L5292]              havoc __ret_0_increaseAllowance;
[L5293]              havoc spender_s449;
[L5294]              havoc subtractedValue_s449;
[L5295]              havoc __ret_0_decreaseAllowance;
[L5296]              havoc name_s652;
[L5297]              havoc symbol_s652;
[L5298]              havoc decimals_s652;
[L5299]              havoc __ret_0_name;
[L5300]              havoc __ret_0_symbol;
[L5301]              havoc __ret_0_decimals;
[L5302]              havoc __ret_0_quantity;
[L5303]              havoc __ret_0_owner;
[L5304]              havoc __ret_0_startTime;
[L5305]              havoc _to_s1165;
[L5306]              havoc tmpNow;
[L5307]              havoc gas;
[L5308]              assume gas > 4000000 && gas <= 8000000;
[L5309]              tmpNow := now;
[L5310]              havoc now;
[L5311]              assume now > tmpNow;
[L5312]              assume msgsender_MSG != null;
[L5313]              assume DType[msgsender_MSG] != IERC20;
[L5314]              assume DType[msgsender_MSG] != SafeMath;
[L5315]              assume DType[msgsender_MSG] != ERC20;
[L5316]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5317]              assume DType[msgsender_MSG] != DplatformToken;
[L5318]              Alloc[msgsender_MSG] := true;
[L5319]  COND TRUE   choice == 15
[L5320]              gas := gas - 21000;
[L5321]  COND TRUE   gas >= 0
[L5322]              assume value_s266 >= 0 && value_s266 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5323]              assume msgvalue_MSG == 0;
[L5324]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s266, value_s266);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == to_s266 && value_s266 <= _balances_ERC20[this][msgsender_MSG]) && value_s266 >= 0) && value_s266 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s266] >= 0) && _balances_ERC20[this][to_s266] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L655]               havoc __exception;
[L656]               revert := false;
[L657]   COND FALSE  !(__exception)
[L697]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s266, value_s266);
[L2997]  COND TRUE   DType[this] == DplatformToken
[L2998]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L3213]              __var_7 := null;
[L3214]  COND FALSE  !(!(to_s495 != null))
[L3218]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L2837]  COND FALSE  !(!(b_s149 <= a_s149))
[L2841]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2842]              __ret_0_ := c_s149;
[L3218]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L3219]  COND FALSE  !(revert)
[L3222]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s495];
[L3223]              _balances_ERC20[this][from_s495] := __var_8;
[L3224]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s495];
[L3225]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L2861]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2862]  COND FALSE  !(!(c_s173 >= a_s173))
[L2866]              __ret_0_ := c_s173;
[L3225]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L3226]  COND FALSE  !(revert)
[L3229]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s495];
[L3230]              _balances_ERC20[this][to_s495] := __var_9;
[L3231]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s495];
[L3232]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2998]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L2999]  COND FALSE  !(revert)
[L3010]              __ret_0_ := true;
[L697]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s266, value_s266);
[L698]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && quantity_DplatformToken[this] == old(quantity_DplatformToken[this])) && balances_DplatformToken[this] == old(balances_DplatformToken[this])) && owner_DplatformToken[this] == old(owner_DplatformToken[this])) && startTime_DplatformToken[this] == old(startTime_DplatformToken[this])) && monthsTimestamp_DplatformToken[this] == old(monthsTimestamp_DplatformToken[this])) && fibseries_DplatformToken[this] == old(fibseries_DplatformToken[this])) && operatingTime_DplatformToken[this] == old(operatingTime_DplatformToken[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L5324]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s266, value_s266);
[L5432]  RET         call CorralChoice_DplatformToken(this);
[L5432]  CALL        call CorralChoice_DplatformToken(this);
[L5271]              havoc msgsender_MSG;
[L5272]              havoc msgvalue_MSG;
[L5273]              havoc choice;
[L5274]              havoc to_s266;
[L5275]              havoc value_s266;
[L5276]              havoc __ret_0_transfer;
[L5277]              havoc spender_s302;
[L5278]              havoc value_s302;
[L5279]              havoc __ret_0_approve;
[L5280]              havoc from_s351;
[L5281]              havoc to_s351;
[L5282]              havoc value_s351;
[L5283]              havoc __ret_0_transferFrom;
[L5284]              havoc __ret_0_totalSupply;
[L5285]              havoc owner_s231;
[L5286]              havoc __ret_0_balanceOf;
[L5287]              havoc owner_s247;
[L5288]              havoc spender_s247;
[L5289]              havoc __ret_0_allowance;
[L5290]              havoc spender_s400;
[L5291]              havoc addedValue_s400;
[L5292]              havoc __ret_0_increaseAllowance;
[L5293]              havoc spender_s449;
[L5294]              havoc subtractedValue_s449;
[L5295]              havoc __ret_0_decreaseAllowance;
[L5296]              havoc name_s652;
[L5297]              havoc symbol_s652;
[L5298]              havoc decimals_s652;
[L5299]              havoc __ret_0_name;
[L5300]              havoc __ret_0_symbol;
[L5301]              havoc __ret_0_decimals;
[L5302]              havoc __ret_0_quantity;
[L5303]              havoc __ret_0_owner;
[L5304]              havoc __ret_0_startTime;
[L5305]              havoc _to_s1165;
[L5306]              havoc tmpNow;
[L5307]              havoc gas;
[L5308]              assume gas > 4000000 && gas <= 8000000;
[L5309]              tmpNow := now;
[L5310]              havoc now;
[L5311]              assume now > tmpNow;
[L5312]              assume msgsender_MSG != null;
[L5313]              assume DType[msgsender_MSG] != IERC20;
[L5314]              assume DType[msgsender_MSG] != SafeMath;
[L5315]              assume DType[msgsender_MSG] != ERC20;
[L5316]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5317]              assume DType[msgsender_MSG] != DplatformToken;
[L5318]              Alloc[msgsender_MSG] := true;
[L5319]  COND TRUE   choice == 15
[L5320]              gas := gas - 21000;
[L5321]  COND TRUE   gas >= 0
[L5322]              assume value_s266 >= 0 && value_s266 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5323]              assume msgvalue_MSG == 0;
[L5324]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s266, value_s266);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s266 && value_s266 <= _balances_ERC20[this][msgsender_MSG]) && value_s266 >= 0) && value_s266 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s266] >= 0) && _balances_ERC20[this][to_s266] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L655]               havoc __exception;
[L656]               revert := false;
[L657]   COND FALSE  !(__exception)
[L697]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s266, value_s266);
[L2997]  COND TRUE   DType[this] == DplatformToken
[L2998]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L3213]              __var_7 := null;
[L3214]  COND FALSE  !(!(to_s495 != null))
[L3218]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L2837]  COND FALSE  !(!(b_s149 <= a_s149))
[L2841]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2842]              __ret_0_ := c_s149;
[L3218]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L3219]  COND FALSE  !(revert)
[L3222]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s495];
[L3223]              _balances_ERC20[this][from_s495] := __var_8;
[L3224]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s495];
[L3225]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L2861]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2862]  COND FALSE  !(!(c_s173 >= a_s173))
[L2866]              __ret_0_ := c_s173;
[L3225]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L3226]  COND FALSE  !(revert)
[L3229]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s495];
[L3230]              _balances_ERC20[this][to_s495] := __var_9;
[L3231]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s495];
[L3232]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2998]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L2999]  COND FALSE  !(revert)
[L3010]              __ret_0_ := true;
[L697]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s266, value_s266);
[L698]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && quantity_DplatformToken[this] == old(quantity_DplatformToken[this])) && balances_DplatformToken[this] == old(balances_DplatformToken[this])) && owner_DplatformToken[this] == old(owner_DplatformToken[this])) && startTime_DplatformToken[this] == old(startTime_DplatformToken[this])) && monthsTimestamp_DplatformToken[this] == old(monthsTimestamp_DplatformToken[this])) && fibseries_DplatformToken[this] == old(fibseries_DplatformToken[this])) && operatingTime_DplatformToken[this] == old(operatingTime_DplatformToken[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L5324]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s266, value_s266);
[L5432]  RET         call CorralChoice_DplatformToken(this);

Loop:
[L5432]  CALL        call CorralChoice_DplatformToken(this);
[L5271]              havoc msgsender_MSG;
[L5272]              havoc msgvalue_MSG;
[L5273]              havoc choice;
[L5274]              havoc to_s266;
[L5275]              havoc value_s266;
[L5276]              havoc __ret_0_transfer;
[L5277]              havoc spender_s302;
[L5278]              havoc value_s302;
[L5279]              havoc __ret_0_approve;
[L5280]              havoc from_s351;
[L5281]              havoc to_s351;
[L5282]              havoc value_s351;
[L5283]              havoc __ret_0_transferFrom;
[L5284]              havoc __ret_0_totalSupply;
[L5285]              havoc owner_s231;
[L5286]              havoc __ret_0_balanceOf;
[L5287]              havoc owner_s247;
[L5288]              havoc spender_s247;
[L5289]              havoc __ret_0_allowance;
[L5290]              havoc spender_s400;
[L5291]              havoc addedValue_s400;
[L5292]              havoc __ret_0_increaseAllowance;
[L5293]              havoc spender_s449;
[L5294]              havoc subtractedValue_s449;
[L5295]              havoc __ret_0_decreaseAllowance;
[L5296]              havoc name_s652;
[L5297]              havoc symbol_s652;
[L5298]              havoc decimals_s652;
[L5299]              havoc __ret_0_name;
[L5300]              havoc __ret_0_symbol;
[L5301]              havoc __ret_0_decimals;
[L5302]              havoc __ret_0_quantity;
[L5303]              havoc __ret_0_owner;
[L5304]              havoc __ret_0_startTime;
[L5305]              havoc _to_s1165;
[L5306]              havoc tmpNow;
[L5307]              havoc gas;
[L5308]              assume gas > 4000000 && gas <= 8000000;
[L5309]              tmpNow := now;
[L5310]              havoc now;
[L5311]              assume now > tmpNow;
[L5312]              assume msgsender_MSG != null;
[L5313]              assume DType[msgsender_MSG] != IERC20;
[L5314]              assume DType[msgsender_MSG] != SafeMath;
[L5315]              assume DType[msgsender_MSG] != ERC20;
[L5316]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5317]              assume DType[msgsender_MSG] != DplatformToken;
[L5318]              Alloc[msgsender_MSG] := true;
[L5319]  COND TRUE   choice == 15
[L5320]              gas := gas - 21000;
[L5321]  COND TRUE   gas >= 0
[L5322]              assume value_s266 >= 0 && value_s266 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5323]              assume msgvalue_MSG == 0;
[L5324]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s266, value_s266);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s266 && value_s266 <= _balances_ERC20[this][msgsender_MSG]) && value_s266 >= 0) && value_s266 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s266] >= 0) && _balances_ERC20[this][to_s266] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L655]               havoc __exception;
[L656]               revert := false;
[L657]   COND FALSE  !(__exception)
[L697]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s266, value_s266);
[L2997]  COND TRUE   DType[this] == DplatformToken
[L2998]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L3213]              __var_7 := null;
[L3214]  COND FALSE  !(!(to_s495 != null))
[L3218]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L2837]  COND FALSE  !(!(b_s149 <= a_s149))
[L2841]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2842]              __ret_0_ := c_s149;
[L3218]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L3219]  COND FALSE  !(revert)
[L3222]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s495];
[L3223]              _balances_ERC20[this][from_s495] := __var_8;
[L3224]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s495];
[L3225]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L2861]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2862]  COND FALSE  !(!(c_s173 >= a_s173))
[L2866]              __ret_0_ := c_s173;
[L3225]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L3226]  COND FALSE  !(revert)
[L3229]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s495];
[L3230]              _balances_ERC20[this][to_s495] := __var_9;
[L3231]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s495];
[L3232]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2998]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L2999]  COND FALSE  !(revert)
[L3010]              __ret_0_ := true;
[L697]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s266, value_s266);
[L698]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && quantity_DplatformToken[this] == old(quantity_DplatformToken[this])) && balances_DplatformToken[this] == old(balances_DplatformToken[this])) && owner_DplatformToken[this] == old(owner_DplatformToken[this])) && startTime_DplatformToken[this] == old(startTime_DplatformToken[this])) && monthsTimestamp_DplatformToken[this] == old(monthsTimestamp_DplatformToken[this])) && fibseries_DplatformToken[this] == old(fibseries_DplatformToken[this])) && operatingTime_DplatformToken[this] == old(operatingTime_DplatformToken[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L5324]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s266, value_s266);
[L5432]  RET         call CorralChoice_DplatformToken(this);

[2020-11-25 14:21:31,465 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:21:31,465 INFO  L82        PathProgramCache]: Analyzing trace with hash 509528521, now seen corresponding path program 1 times
[2020-11-25 14:21:31,466 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:21:31,524 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:21:31,738 INFO  L134       CoverageAnalysis]: Checked inductivity of 105 backedges. 59 proven. 0 refuted. 0 times theorem prover too weak. 46 trivial. 0 not checked.
[2020-11-25 14:21:31,738 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 14:21:31,738 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [20] imperfect sequences [] total 20
[2020-11-25 14:21:31,739 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:21:31,739 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 21 interpolants.
[2020-11-25 14:21:31,739 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=60, Invalid=360, Unknown=0, NotChecked=0, Total=420
[2020-11-25 14:21:31,739 INFO  L87              Difference]: Start difference. First operand 2410 states and 2723 transitions. cyclomatic complexity: 331 Second operand 21 states.
[2020-11-25 14:21:33,129 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:21:33,129 INFO  L93              Difference]: Finished difference Result 1287 states and 1435 transitions.
[2020-11-25 14:21:33,129 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 21 states. 
[2020-11-25 14:21:33,129 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1287 states and 1435 transitions.
[2020-11-25 14:21:33,131 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 14:21:33,131 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1287 states to 0 states and 0 transitions.
[2020-11-25 14:21:33,131 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-25 14:21:33,131 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-25 14:21:33,131 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-25 14:21:33,132 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:21:33,132 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 14:21:33,132 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 14:21:33,132 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 14:21:33,132 INFO  L445         BuchiCegarLoop]: ======== Iteration 13============
[2020-11-25 14:21:33,132 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-25 14:21:33,132 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 14:21:33,132 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-25 14:21:33,135 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 02:21:33 BasicIcfg
[2020-11-25 14:21:33,135 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 14:21:33,135 INFO  L168              Benchmark]: Toolchain (without parser) took 36622.08 ms. Allocated memory was 1.0 GB in the beginning and 2.7 GB in the end (delta: 1.7 GB). Free memory was 940.6 MB in the beginning and 1.9 GB in the end (delta: -950.0 MB). Peak memory consumption was 708.8 MB. Max. memory is 15.3 GB.
[2020-11-25 14:21:33,136 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 14:21:33,136 INFO  L168              Benchmark]: Boogie Preprocessor took 108.42 ms. Allocated memory is still 1.0 GB. Free memory was 940.6 MB in the beginning and 929.8 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 14:21:33,136 INFO  L168              Benchmark]: UtopiaSpecLang took 68.52 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 919.1 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 14:21:33,137 INFO  L168              Benchmark]: Boogie Printer took 17.68 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 913.7 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 14:21:33,137 INFO  L168              Benchmark]: RCFGBuilder took 805.27 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 779.5 MB in the end (delta: 134.2 MB). Peak memory consumption was 134.2 MB. Max. memory is 15.3 GB.
[2020-11-25 14:21:33,138 INFO  L168              Benchmark]: UtopiaLTL2Aut took 37.49 ms. Allocated memory is still 1.0 GB. Free memory was 779.5 MB in the beginning and 770.5 MB in the end (delta: 8.9 MB). Peak memory consumption was 8.9 MB. Max. memory is 15.3 GB.
[2020-11-25 14:21:33,138 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1412.59 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 203.4 MB). Free memory was 770.5 MB in the beginning and 831.4 MB in the end (delta: -60.9 MB). Peak memory consumption was 162.7 MB. Max. memory is 15.3 GB.
[2020-11-25 14:21:33,138 INFO  L168              Benchmark]: BlockEncodingV2 took 152.15 ms. Allocated memory is still 1.2 GB. Free memory was 831.4 MB in the beginning and 757.7 MB in the end (delta: 73.8 MB). Peak memory consumption was 73.8 MB. Max. memory is 15.3 GB.
[2020-11-25 14:21:33,139 INFO  L168              Benchmark]: BuchiAutomizer took 34016.88 ms. Allocated memory was 1.2 GB in the beginning and 2.7 GB in the end (delta: 1.5 GB). Free memory was 757.7 MB in the beginning and 1.9 GB in the end (delta: -1.1 GB). Peak memory consumption was 322.5 MB. Max. memory is 15.3 GB.
[2020-11-25 14:21:33,141 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    4578 locations, 7947 edges
  - StatisticsResult: Encoded RCFG
    4510 locations, 7763 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 108.42 ms. Allocated memory is still 1.0 GB. Free memory was 940.6 MB in the beginning and 929.8 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 68.52 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 919.1 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 17.68 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 913.7 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 805.27 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 779.5 MB in the end (delta: 134.2 MB). Peak memory consumption was 134.2 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 37.49 ms. Allocated memory is still 1.0 GB. Free memory was 779.5 MB in the beginning and 770.5 MB in the end (delta: 8.9 MB). Peak memory consumption was 8.9 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1412.59 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 203.4 MB). Free memory was 770.5 MB in the beginning and 831.4 MB in the end (delta: -60.9 MB). Peak memory consumption was 162.7 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 152.15 ms. Allocated memory is still 1.2 GB. Free memory was 831.4 MB in the beginning and 757.7 MB in the end (delta: 73.8 MB). Peak memory consumption was 73.8 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 34016.88 ms. Allocated memory was 1.2 GB in the beginning and 2.7 GB in the end (delta: 1.5 GB). Free memory was 757.7 MB in the beginning and 1.9 GB in the end (delta: -1.1 GB). Peak memory consumption was 322.5 MB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    1959 locations, 2477 edges
  - StatisticsResult: BuchiProgram size
    4578 locations, 7947 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 12 terminating modules (12 trivial, 0 deterministic, 0 nondeterministic). 12 modules have a trivial ranking function, the largest among these consists of 64 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 33.9s and 13 iterations.  TraceHistogramMax:3. Analysis of lassos took 4.7s. Construction of modules took 22.6s. BÃ¼chi inclusion checks took 5.7s. Highest rank in rank-based complementation 0. Minimization of det autom 12. Minimization of nondet autom 0. Automata minimization 0.3s AutomataMinimizationTime, 11 MinimizatonAttempts, 2059 StatesRemovedByMinimization, 8 NontrivialMinimizations. Non-live state removal took 0.2s Buchi closure took 0.0s. Biggest automaton had 3372 states and ocurred in iteration 7.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 36178 SDtfs, 29922 SDslu, 150708 SDs, 0 SdLazy, 139880 SolverSat, 4858 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 22.6s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU12 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_transfer_ERC200) ==> ( <>(success_transfer_ERC200) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
