This is Ultimate 0.1.24-f1553f5-m
[2020-11-24 21:22:12,765 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-24 21:22:12,767 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-24 21:22:12,777 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-24 21:22:12,777 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-24 21:22:12,779 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-24 21:22:12,780 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-24 21:22:12,782 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-24 21:22:12,783 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-24 21:22:12,784 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-24 21:22:12,785 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-24 21:22:12,785 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-24 21:22:12,786 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-24 21:22:12,787 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-24 21:22:12,788 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-24 21:22:12,788 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-24 21:22:12,789 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-24 21:22:12,790 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-24 21:22:12,791 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-24 21:22:12,793 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-24 21:22:12,793 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-24 21:22:12,794 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-24 21:22:12,796 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-24 21:22:12,796 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-24 21:22:12,796 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-24 21:22:12,797 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-24 21:22:12,797 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-24 21:22:12,798 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-24 21:22:12,798 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-24 21:22:12,798 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-24 21:22:12,799 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-24 21:22:12,800 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-24 21:22:12,800 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-24 21:22:12,801 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-24 21:22:12,801 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-24 21:22:12,802 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-24 21:22:12,802 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-24 21:22:12,802 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-24 21:22:12,802 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-24 21:22:12,803 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-24 21:22:12,804 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-24 21:22:12,804 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-24 21:22:12,812 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-24 21:22:12,812 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-24 21:22:12,813 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-24 21:22:12,813 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-24 21:22:12,813 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-24 21:22:12,813 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-24 21:22:12,813 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-24 21:22:12,813 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-24 21:22:12,813 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-24 21:22:12,813 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-24 21:22:12,814 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-24 21:22:12,814 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-24 21:22:12,814 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-24 21:22:12,814 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-24 21:22:12,814 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-24 21:22:12,814 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-24 21:22:12,814 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-24 21:22:12,814 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-24 21:22:12,814 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-24 21:22:12,814 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-24 21:22:12,815 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-24 21:22:12,815 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-24 21:22:12,815 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-24 21:22:12,815 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-24 21:22:12,815 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-24 21:22:12,815 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-24 21:22:12,839 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-24 21:22:12,849 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-24 21:22:12,852 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-24 21:22:12,854 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-24 21:22:12,855 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-24 21:22:12,857 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/MainToken_0x1b980e05943de3db3a459c72325338d327b6f5a9_transferfrom-normal.bpl
[2020-11-24 21:22:12,857 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/MainToken_0x1b980e05943de3db3a459c72325338d327b6f5a9_transferfrom-normal.bpl'
[2020-11-24 21:22:13,020 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-24 21:22:13,021 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-24 21:22:13,022 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-24 21:22:13,022 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-24 21:22:13,022 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-24 21:22:13,039 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "MainToken_0x1b980e05943de3db3a459c72325338d327b6f5a9_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:22:13" (1/1) ...
[2020-11-24 21:22:13,041 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "MainToken_0x1b980e05943de3db3a459c72325338d327b6f5a9_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:22:13" (1/1) ...
[2020-11-24 21:22:13,093 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "MainToken_0x1b980e05943de3db3a459c72325338d327b6f5a9_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:22:13" (1/1) ...
[2020-11-24 21:22:13,094 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "MainToken_0x1b980e05943de3db3a459c72325338d327b6f5a9_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:22:13" (1/1) ...
[2020-11-24 21:22:13,138 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "MainToken_0x1b980e05943de3db3a459c72325338d327b6f5a9_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:22:13" (1/1) ...
[2020-11-24 21:22:13,165 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "MainToken_0x1b980e05943de3db3a459c72325338d327b6f5a9_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:22:13" (1/1) ...
[2020-11-24 21:22:13,185 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "MainToken_0x1b980e05943de3db3a459c72325338d327b6f5a9_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:22:13" (1/1) ...
[2020-11-24 21:22:13,213 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-24 21:22:13,214 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-24 21:22:13,214 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-24 21:22:13,216 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-24 21:22:13,220 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "MainToken_0x1b980e05943de3db3a459c72325338d327b6f5a9_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:22:13" (1/1) ...
[2020-11-24 21:22:13,252 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(MainToken.transferFrom(from, to, value), p1 != from && p1 != to && (p2 != from || p3 != msg.sender) && from != to && value <= balances_BasicToken[this][from] && value <= allowed_StandardToken[this][from][msg.sender] && balances_BasicToken[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][to] >= 0 && balances_BasicToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][from] >= 0 &&  balances_BasicToken[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_StandardToken[this][from][msg.sender] >= 0 && allowed_StandardToken[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(MainToken.transferFrom(from, to, value), return == true && balances_BasicToken[this][from] == old(balances_BasicToken[this][from]) - value && balances_BasicToken[this][to] == old(balances_BasicToken[this][to]) + value && allowed_StandardToken[this][from][msg.sender] == old(allowed_StandardToken[this][from][msg.sender]) - value && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && balances_BasicToken[this][p1] == old(balances_BasicToken[this][p1]) && allowed_StandardToken[this][p2][p3] == old(allowed_StandardToken[this][p2][p3]) && initialized_MainToken[this] == old(initialized_MainToken[this]) && paused_Pausable[this] == old(paused_Pausable[this]) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]) && chains_FreezableToken[this] == old(chains_FreezableToken[this]) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this]) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]))))
[2020-11-24 21:22:13,257 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(MainToken.transferFrom(from, to, value), p1 != from && p1 != to && (p2 != from || p3 != msg.sender) && from != to && value <= balances_BasicToken[this][from] && value <= allowed_StandardToken[this][from][msg.sender] && balances_BasicToken[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][to] >= 0 && balances_BasicToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][from] >= 0 &&  balances_BasicToken[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_StandardToken[this][from][msg.sender] >= 0 && allowed_StandardToken[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(MainToken.transferFrom(from, to, value), return == true && balances_BasicToken[this][from] == old(balances_BasicToken[this][from]) - value && balances_BasicToken[this][to] == old(balances_BasicToken[this][to]) + value && allowed_StandardToken[this][from][msg.sender] == old(allowed_StandardToken[this][from][msg.sender]) - value && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && balances_BasicToken[this][p1] == old(balances_BasicToken[this][p1]) && allowed_StandardToken[this][p2][p3] == old(allowed_StandardToken[this][p2][p3]) && initialized_MainToken[this] == old(initialized_MainToken[this]) && paused_Pausable[this] == old(paused_Pausable[this]) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]) && chains_FreezableToken[this] == old(chains_FreezableToken[this]) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this]) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]))))
[2020-11-24 21:22:13,266 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(MainToken.transferFrom(from, to, value), p1 != from && p1 != to && (p2 != from || p3 != msg.sender) && from != to && value <= balances_BasicToken[this][from] && value <= allowed_StandardToken[this][from][msg.sender] && balances_BasicToken[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][to] >= 0 && balances_BasicToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][from] >= 0 &&  balances_BasicToken[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_StandardToken[this][from][msg.sender] >= 0 && allowed_StandardToken[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(MainToken.transferFrom(from, to, value), return == true && balances_BasicToken[this][from] == old(balances_BasicToken[this][from]) - value && balances_BasicToken[this][to] == old(balances_BasicToken[this][to]) + value && allowed_StandardToken[this][from][msg.sender] == old(allowed_StandardToken[this][from][msg.sender]) - value && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && balances_BasicToken[this][p1] == old(balances_BasicToken[this][p1]) && allowed_StandardToken[this][p2][p3] == old(allowed_StandardToken[this][p2][p3]) && initialized_MainToken[this] == old(initialized_MainToken[this]) && paused_Pausable[this] == old(paused_Pausable[this]) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]) && chains_FreezableToken[this] == old(chains_FreezableToken[this]) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this]) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]))))
[2020-11-24 21:22:13,280 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( ( ( ( ( p1!=_from_s1551 && p1!=_to_s1551 ) && ( p2!=_from_s1551 || p3!=msg.sender ) ) && _from_s1551!=_to_s1551 ) && _value_s1551<=balances_BasicToken[this][_from_s1551] ) && _value_s1551<=allowed_StandardToken[this][_from_s1551][msg.sender] ) && ( balances_BasicToken[this][_to_s1551] + _value_s1551 )<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _value_s1551>=0 ) && _value_s1551<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_BasicToken[this][_to_s1551]>=0 ) && balances_BasicToken[this][_to_s1551]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_BasicToken[this][_from_s1551]>=0 ) && balances_BasicToken[this][_from_s1551]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && allowed_StandardToken[this][_from_s1551][msg.sender]>=0 ) && allowed_StandardToken[this][_from_s1551][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[_from_s1551,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]],BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[_to_s1551,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],BinaryExpression[LOGICOR,BinaryExpression[COMPNEQ,IdentifierExpression[p2,GLOBAL],IdentifierExpression[_from_s1551,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]],BinaryExpression[COMPNEQ,IdentifierExpression[p3,GLOBAL],IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]]],BinaryExpression[COMPNEQ,IdentifierExpression[_from_s1551,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>],IdentifierExpression[_to_s1551,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],BinaryExpression[COMPLEQ,IdentifierExpression[_value_s1551,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],[IdentifierExpression[_from_s1551,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]]]],BinaryExpression[COMPLEQ,IdentifierExpression[_value_s1551,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>],ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],[IdentifierExpression[_from_s1551,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]]]],BinaryExpression[COMPLT,BinaryExpression[ARITHPLUS,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],[IdentifierExpression[_to_s1551,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],IdentifierExpression[_value_s1551,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,IdentifierExpression[_value_s1551,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[_value_s1551,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],[IdentifierExpression[_to_s1551,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],[IdentifierExpression[_to_s1551,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],[IdentifierExpression[_from_s1551,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],[IdentifierExpression[_from_s1551,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],[IdentifierExpression[_from_s1551,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],[IdentifierExpression[_from_s1551,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-24 21:22:13,284 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( ( ( ( _success_s1551==true && balances_BasicToken[this][_from_s1551]==( ( old(balances_BasicToken[this][_from_s1551]) ) - _value_s1551 ) ) && balances_BasicToken[this][_to_s1551]==( ( old(balances_BasicToken[this][_to_s1551]) ) + _value_s1551 ) ) && allowed_StandardToken[this][_from_s1551][msg.sender]==( ( old(allowed_StandardToken[this][_from_s1551][msg.sender]) ) - _value_s1551 ) ) && totalSupply__BasicToken[this]==( old(totalSupply__BasicToken[this]) ) ) && balances_BasicToken[this][p1]==( old(balances_BasicToken[this][p1]) ) ) && allowed_StandardToken[this][p2][p3]==( old(allowed_StandardToken[this][p2][p3]) ) ) && initialized_MainToken[this]==( old(initialized_MainToken[this]) ) ) && paused_Pausable[this]==( old(paused_Pausable[this]) ) ) && mintingFinished_MintableToken[this]==( old(mintingFinished_MintableToken[this]) ) ) && owner_Ownable[this]==( old(owner_Ownable[this]) ) ) && chains_FreezableToken[this]==( old(chains_FreezableToken[this]) ) ) && freezings_FreezableToken[this]==( old(freezings_FreezableToken[this]) ) ) && freezingBalance_FreezableToken[this]==( old(freezingBalance_FreezableToken[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[_success_s1551,<IMPLEMENTATION_OUTPARAM,transferFrom~address~address~uint256_MainToken>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],[IdentifierExpression[_from_s1551,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],BinaryExpression[ARITHMINUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],[IdentifierExpression[_from_s1551,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]]],IdentifierExpression[_value_s1551,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],[IdentifierExpression[_to_s1551,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],BinaryExpression[ARITHPLUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],[IdentifierExpression[_to_s1551,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]]],IdentifierExpression[_value_s1551,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],[IdentifierExpression[_from_s1551,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],BinaryExpression[ARITHMINUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],[IdentifierExpression[_from_s1551,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]]],IdentifierExpression[_value_s1551,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[totalSupply__BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[totalSupply__BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],[IdentifierExpression[p1,GLOBAL]]],UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],[IdentifierExpression[p1,GLOBAL]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],[IdentifierExpression[p2,GLOBAL]]],[IdentifierExpression[p3,GLOBAL]]],UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],[IdentifierExpression[p2,GLOBAL]]],[IdentifierExpression[p3,GLOBAL]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[initialized_MainToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[initialized_MainToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[paused_Pausable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[paused_Pausable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[mintingFinished_MintableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[mintingFinished_MintableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[owner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[owner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[chains_FreezableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[chains_FreezableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[freezings_FreezableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[freezings_FreezableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[freezingBalance_FreezableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[freezingBalance_FreezableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]]]]]
[2020-11-24 21:22:13,293 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(MainToken.transferFrom(from, to, value), p1 != from && p1 != to && (p2 != from || p3 != msg.sender) && from != to && value <= balances_BasicToken[this][from] && value <= allowed_StandardToken[this][from][msg.sender] && balances_BasicToken[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][to] >= 0 && balances_BasicToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][from] >= 0 &&  balances_BasicToken[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_StandardToken[this][from][msg.sender] >= 0 && allowed_StandardToken[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(MainToken.transferFrom(from, to, value), return == true && balances_BasicToken[this][from] == old(balances_BasicToken[this][from]) - value && balances_BasicToken[this][to] == old(balances_BasicToken[this][to]) + value && allowed_StandardToken[this][from][msg.sender] == old(allowed_StandardToken[this][from][msg.sender]) - value && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && balances_BasicToken[this][p1] == old(balances_BasicToken[this][p1]) && allowed_StandardToken[this][p2][p3] == old(allowed_StandardToken[this][p2][p3]) && initialized_MainToken[this] == old(initialized_MainToken[this]) && paused_Pausable[this] == old(paused_Pausable[this]) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]) && chains_FreezableToken[this] == old(chains_FreezableToken[this]) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this]) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]))))
[2020-11-24 21:22:13,293 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transferFrom_MainToken0) ==> ( <>AP(success_transferFrom_MainToken0) ) ) )
Executed UtopiaSpecLang
[2020-11-24 21:22:13,320 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 09:22:13 PropertyContainer
[2020-11-24 21:22:13,320 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-24 21:22:13,320 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-24 21:22:13,321 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-24 21:22:13,321 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-24 21:22:13,322 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "MainToken_0x1b980e05943de3db3a459c72325338d327b6f5a9_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:22:13" (1/2) ...
[2020-11-24 21:22:13,322 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-24 21:22:13,322 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-24 21:22:13,355 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 09:22:13" (2/2) ...
[2020-11-24 21:22:13,355 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-24 21:22:13,355 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-24 21:22:13,356 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-24 21:22:13,356 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-24 21:22:13,356 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "MainToken_0x1b980e05943de3db3a459c72325338d327b6f5a9_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:22:13" (1/2) ...
[2020-11-24 21:22:13,415 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-24 21:22:13,415 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic_NoBaseCtor__success
[2020-11-24 21:22:13,415 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic
[2020-11-24 21:22:13,415 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic
[2020-11-24 21:22:13,416 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20Basic
[2020-11-24 21:22:13,416 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20Basic
[2020-11-24 21:22:13,416 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Basic
[2020-11-24 21:22:13,416 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-24 21:22:13,416 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-24 21:22:13,416 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-24 21:22:13,416 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-24 21:22:13,417 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-24 21:22:13,417 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-24 21:22:13,417 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-24 21:22:13,417 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken_NoBaseCtor__success
[2020-11-24 21:22:13,417 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken
[2020-11-24 21:22:13,417 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken
[2020-11-24 21:22:13,417 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken
[2020-11-24 21:22:13,417 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken
[2020-11-24 21:22:13,417 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken
[2020-11-24 21:22:13,418 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken
[2020-11-24 21:22:13,418 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken
[2020-11-24 21:22:13,418 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken
[2020-11-24 21:22:13,418 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-24 21:22:13,418 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-24 21:22:13,418 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-24 21:22:13,418 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-24 21:22:13,418 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-24 21:22:13,418 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-24 21:22:13,418 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken_NoBaseCtor__success
[2020-11-24 21:22:13,419 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken
[2020-11-24 21:22:13,419 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken
[2020-11-24 21:22:13,419 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken
[2020-11-24 21:22:13,419 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken
[2020-11-24 21:22:13,419 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken
[2020-11-24 21:22:13,419 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken
[2020-11-24 21:22:13,419 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken
[2020-11-24 21:22:13,419 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken
[2020-11-24 21:22:13,419 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken
[2020-11-24 21:22:13,419 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken
[2020-11-24 21:22:13,420 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken
[2020-11-24 21:22:13,420 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken
[2020-11-24 21:22:13,420 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-24 21:22:13,420 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable
[2020-11-24 21:22:13,420 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable
[2020-11-24 21:22:13,420 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable
[2020-11-24 21:22:13,420 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable
[2020-11-24 21:22:13,420 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable
[2020-11-24 21:22:13,420 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable
[2020-11-24 21:22:13,420 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferOwnership~address_Ownable__success
[2020-11-24 21:22:13,420 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable
[2020-11-24 21:22:13,421 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable
[2020-11-24 21:22:13,421 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken_NoBaseCtor__success
[2020-11-24 21:22:13,421 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken
[2020-11-24 21:22:13,421 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken
[2020-11-24 21:22:13,421 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_MintableToken
[2020-11-24 21:22:13,421 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_MintableToken
[2020-11-24 21:22:13,421 INFO  L130     BoogieDeclarations]: Found specification of procedure finishMinting_MintableToken
[2020-11-24 21:22:13,421 INFO  L138     BoogieDeclarations]: Found implementation of procedure finishMinting_MintableToken
[2020-11-24 21:22:13,421 INFO  L130     BoogieDeclarations]: Found specification of procedure mintingFinished_MintableToken
[2020-11-24 21:22:13,421 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintingFinished_MintableToken
[2020-11-24 21:22:13,421 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableToken_FreezableToken_NoBaseCtor__success
[2020-11-24 21:22:13,422 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableToken_FreezableToken
[2020-11-24 21:22:13,422 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableToken_FreezableToken
[2020-11-24 21:22:13,422 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_FreezableToken
[2020-11-24 21:22:13,422 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_FreezableToken
[2020-11-24 21:22:13,422 INFO  L130     BoogieDeclarations]: Found specification of procedure actualBalanceOf~address_FreezableToken
[2020-11-24 21:22:13,422 INFO  L138     BoogieDeclarations]: Found implementation of procedure actualBalanceOf~address_FreezableToken
[2020-11-24 21:22:13,422 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingBalanceOf~address_FreezableToken
[2020-11-24 21:22:13,422 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingBalanceOf~address_FreezableToken
[2020-11-24 21:22:13,422 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingCount~address_FreezableToken
[2020-11-24 21:22:13,422 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingCount~address_FreezableToken
[2020-11-24 21:22:13,423 INFO  L130     BoogieDeclarations]: Found specification of procedure getFreezing~address~uint256_FreezableToken
[2020-11-24 21:22:13,423 INFO  L138     BoogieDeclarations]: Found implementation of procedure getFreezing~address~uint256_FreezableToken
[2020-11-24 21:22:13,423 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeTo~address~uint256~uint64_FreezableToken
[2020-11-24 21:22:13,423 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeTo~address~uint256~uint64_FreezableToken
[2020-11-24 21:22:13,423 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseOnce_FreezableToken
[2020-11-24 21:22:13,423 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseOnce_FreezableToken
[2020-11-24 21:22:13,423 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseAll_FreezableToken
[2020-11-24 21:22:13,423 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseAll_FreezableToken
[2020-11-24 21:22:13,423 INFO  L130     BoogieDeclarations]: Found specification of procedure toKey~address~uint256_FreezableToken__success
[2020-11-24 21:22:13,423 INFO  L130     BoogieDeclarations]: Found specification of procedure freeze~address~uint64_FreezableToken__success
[2020-11-24 21:22:13,424 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken_NoBaseCtor__success
[2020-11-24 21:22:13,424 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken
[2020-11-24 21:22:13,424 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken
[2020-11-24 21:22:13,424 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_BurnableToken
[2020-11-24 21:22:13,424 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_BurnableToken
[2020-11-24 21:22:13,424 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_BurnableToken__success
[2020-11-24 21:22:13,424 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-24 21:22:13,424 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable
[2020-11-24 21:22:13,424 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable
[2020-11-24 21:22:13,424 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable
[2020-11-24 21:22:13,425 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable
[2020-11-24 21:22:13,425 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable
[2020-11-24 21:22:13,425 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable
[2020-11-24 21:22:13,425 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable
[2020-11-24 21:22:13,425 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable
[2020-11-24 21:22:13,425 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success
[2020-11-24 21:22:13,425 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableMintableToken_FreezableMintableToken
[2020-11-24 21:22:13,425 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableMintableToken_FreezableMintableToken
[2020-11-24 21:22:13,425 INFO  L130     BoogieDeclarations]: Found specification of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken
[2020-11-24 21:22:13,425 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken
[2020-11-24 21:22:13,425 INFO  L130     BoogieDeclarations]: Found specification of procedure Consts_Consts_NoBaseCtor__success
[2020-11-24 21:22:13,426 INFO  L130     BoogieDeclarations]: Found specification of procedure Consts_Consts
[2020-11-24 21:22:13,426 INFO  L138     BoogieDeclarations]: Found implementation of procedure Consts_Consts
[2020-11-24 21:22:13,426 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_Consts
[2020-11-24 21:22:13,426 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_Consts
[2020-11-24 21:22:13,426 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_UINT8_Consts
[2020-11-24 21:22:13,426 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_UINT8_Consts
[2020-11-24 21:22:13,426 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMAL_MULTIPLIER_Consts
[2020-11-24 21:22:13,426 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMAL_MULTIPLIER_Consts
[2020-11-24 21:22:13,426 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_NAME_Consts
[2020-11-24 21:22:13,427 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_NAME_Consts
[2020-11-24 21:22:13,427 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_SYMBOL_Consts
[2020-11-24 21:22:13,427 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_SYMBOL_Consts
[2020-11-24 21:22:13,427 INFO  L130     BoogieDeclarations]: Found specification of procedure PAUSED_Consts
[2020-11-24 21:22:13,427 INFO  L138     BoogieDeclarations]: Found implementation of procedure PAUSED_Consts
[2020-11-24 21:22:13,427 INFO  L130     BoogieDeclarations]: Found specification of procedure TARGET_USER_Consts
[2020-11-24 21:22:13,427 INFO  L138     BoogieDeclarations]: Found implementation of procedure TARGET_USER_Consts
[2020-11-24 21:22:13,427 INFO  L130     BoogieDeclarations]: Found specification of procedure CONTINUE_MINTING_Consts
[2020-11-24 21:22:13,427 INFO  L138     BoogieDeclarations]: Found implementation of procedure CONTINUE_MINTING_Consts
[2020-11-24 21:22:13,427 INFO  L130     BoogieDeclarations]: Found specification of procedure MainToken_MainToken_NoBaseCtor__success
[2020-11-24 21:22:13,428 INFO  L130     BoogieDeclarations]: Found specification of procedure MainToken_MainToken
[2020-11-24 21:22:13,428 INFO  L138     BoogieDeclarations]: Found implementation of procedure MainToken_MainToken
[2020-11-24 21:22:13,428 INFO  L130     BoogieDeclarations]: Found specification of procedure name_MainToken
[2020-11-24 21:22:13,428 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_MainToken
[2020-11-24 21:22:13,428 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_MainToken
[2020-11-24 21:22:13,428 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_MainToken
[2020-11-24 21:22:13,428 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_MainToken
[2020-11-24 21:22:13,428 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_MainToken
[2020-11-24 21:22:13,428 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_MainToken
[2020-11-24 21:22:13,428 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_MainToken
[2020-11-24 21:22:13,429 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_MainToken
[2020-11-24 21:22:13,429 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_MainToken
[2020-11-24 21:22:13,429 INFO  L130     BoogieDeclarations]: Found specification of procedure init_MainToken__success
[2020-11-24 21:22:13,429 INFO  L130     BoogieDeclarations]: Found specification of procedure initialized_MainToken
[2020-11-24 21:22:13,429 INFO  L138     BoogieDeclarations]: Found implementation of procedure initialized_MainToken
[2020-11-24 21:22:13,429 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-24 21:22:13,429 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-24 21:22:13,429 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-24 21:22:13,429 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-24 21:22:13,430 INFO  L130     BoogieDeclarations]: Found specification of procedure canMint_pre__success
[2020-11-24 21:22:13,430 INFO  L130     BoogieDeclarations]: Found specification of procedure hasMintPermission_pre__success
[2020-11-24 21:22:13,430 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__success
[2020-11-24 21:22:13,430 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__success
[2020-11-24 21:22:13,430 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Basic
[2020-11-24 21:22:13,430 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Basic
[2020-11-24 21:22:13,430 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-24 21:22:13,430 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-24 21:22:13,430 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_BasicToken
[2020-11-24 21:22:13,430 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_BasicToken
[2020-11-24 21:22:13,431 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-24 21:22:13,431 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-24 21:22:13,431 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_StandardToken
[2020-11-24 21:22:13,431 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_StandardToken
[2020-11-24 21:22:13,431 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Ownable
[2020-11-24 21:22:13,431 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Ownable
[2020-11-24 21:22:13,431 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_MintableToken
[2020-11-24 21:22:13,431 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_MintableToken
[2020-11-24 21:22:13,431 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_FreezableToken
[2020-11-24 21:22:13,432 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_FreezableToken
[2020-11-24 21:22:13,432 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_BurnableToken
[2020-11-24 21:22:13,432 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_BurnableToken
[2020-11-24 21:22:13,432 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Pausable
[2020-11-24 21:22:13,432 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Pausable
[2020-11-24 21:22:13,432 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_FreezableMintableToken
[2020-11-24 21:22:13,432 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_FreezableMintableToken
[2020-11-24 21:22:13,432 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Consts
[2020-11-24 21:22:13,432 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Consts
[2020-11-24 21:22:13,432 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_MainToken
[2020-11-24 21:22:13,432 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-24 21:22:13,433 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-24 21:22:13,433 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic_NoBaseCtor__fail
[2020-11-24 21:22:13,433 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic__success
[2020-11-24 21:22:13,433 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic__fail
[2020-11-24 21:22:13,433 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-24 21:22:13,433 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-24 21:22:13,433 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-24 21:22:13,433 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-24 21:22:13,433 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-24 21:22:13,433 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-24 21:22:13,433 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-24 21:22:13,433 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken_NoBaseCtor__fail
[2020-11-24 21:22:13,434 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken__success
[2020-11-24 21:22:13,434 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken__fail
[2020-11-24 21:22:13,434 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken__success
[2020-11-24 21:22:13,434 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken__fail
[2020-11-24 21:22:13,434 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken__success
[2020-11-24 21:22:13,434 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken__fail
[2020-11-24 21:22:13,434 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken__success
[2020-11-24 21:22:13,434 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken__fail
[2020-11-24 21:22:13,434 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-24 21:22:13,434 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-24 21:22:13,434 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-24 21:22:13,434 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken_NoBaseCtor__fail
[2020-11-24 21:22:13,435 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken__success
[2020-11-24 21:22:13,435 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken__fail
[2020-11-24 21:22:13,435 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken__success
[2020-11-24 21:22:13,435 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken__fail
[2020-11-24 21:22:13,435 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken__success
[2020-11-24 21:22:13,435 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken__fail
[2020-11-24 21:22:13,435 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken__success
[2020-11-24 21:22:13,435 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken__fail
[2020-11-24 21:22:13,435 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken__success
[2020-11-24 21:22:13,435 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken__fail
[2020-11-24 21:22:13,435 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken__success
[2020-11-24 21:22:13,435 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken__fail
[2020-11-24 21:22:13,436 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-24 21:22:13,436 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__success
[2020-11-24 21:22:13,436 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__fail
[2020-11-24 21:22:13,436 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable__success
[2020-11-24 21:22:13,436 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable__fail
[2020-11-24 21:22:13,436 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__success
[2020-11-24 21:22:13,436 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__fail
[2020-11-24 21:22:13,436 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferOwnership~address_Ownable__fail
[2020-11-24 21:22:13,436 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__success
[2020-11-24 21:22:13,436 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__fail
[2020-11-24 21:22:13,436 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken_NoBaseCtor__fail
[2020-11-24 21:22:13,437 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken__success
[2020-11-24 21:22:13,437 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken__fail
[2020-11-24 21:22:13,437 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_MintableToken__success
[2020-11-24 21:22:13,437 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_MintableToken__fail
[2020-11-24 21:22:13,437 INFO  L130     BoogieDeclarations]: Found specification of procedure finishMinting_MintableToken__success
[2020-11-24 21:22:13,437 INFO  L130     BoogieDeclarations]: Found specification of procedure finishMinting_MintableToken__fail
[2020-11-24 21:22:13,437 INFO  L130     BoogieDeclarations]: Found specification of procedure mintingFinished_MintableToken__success
[2020-11-24 21:22:13,437 INFO  L130     BoogieDeclarations]: Found specification of procedure mintingFinished_MintableToken__fail
[2020-11-24 21:22:13,438 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableToken_FreezableToken_NoBaseCtor__fail
[2020-11-24 21:22:13,438 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableToken_FreezableToken__success
[2020-11-24 21:22:13,438 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableToken_FreezableToken__fail
[2020-11-24 21:22:13,438 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_FreezableToken__success
[2020-11-24 21:22:13,438 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_FreezableToken__fail
[2020-11-24 21:22:13,438 INFO  L130     BoogieDeclarations]: Found specification of procedure actualBalanceOf~address_FreezableToken__success
[2020-11-24 21:22:13,438 INFO  L130     BoogieDeclarations]: Found specification of procedure actualBalanceOf~address_FreezableToken__fail
[2020-11-24 21:22:13,438 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingBalanceOf~address_FreezableToken__success
[2020-11-24 21:22:13,439 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingBalanceOf~address_FreezableToken__fail
[2020-11-24 21:22:13,439 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingCount~address_FreezableToken__success
[2020-11-24 21:22:13,439 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingCount~address_FreezableToken__fail
[2020-11-24 21:22:13,439 INFO  L130     BoogieDeclarations]: Found specification of procedure getFreezing~address~uint256_FreezableToken__success
[2020-11-24 21:22:13,439 INFO  L130     BoogieDeclarations]: Found specification of procedure getFreezing~address~uint256_FreezableToken__fail
[2020-11-24 21:22:13,439 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeTo~address~uint256~uint64_FreezableToken__success
[2020-11-24 21:22:13,439 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeTo~address~uint256~uint64_FreezableToken__fail
[2020-11-24 21:22:13,439 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseOnce_FreezableToken__success
[2020-11-24 21:22:13,439 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseOnce_FreezableToken__fail
[2020-11-24 21:22:13,440 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseAll_FreezableToken__success
[2020-11-24 21:22:13,440 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseAll_FreezableToken__fail
[2020-11-24 21:22:13,440 INFO  L130     BoogieDeclarations]: Found specification of procedure toKey~address~uint256_FreezableToken__fail
[2020-11-24 21:22:13,440 INFO  L130     BoogieDeclarations]: Found specification of procedure freeze~address~uint64_FreezableToken__fail
[2020-11-24 21:22:13,440 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken_NoBaseCtor__fail
[2020-11-24 21:22:13,440 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken__success
[2020-11-24 21:22:13,441 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken__fail
[2020-11-24 21:22:13,441 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_BurnableToken__success
[2020-11-24 21:22:13,441 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_BurnableToken__fail
[2020-11-24 21:22:13,441 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_BurnableToken__fail
[2020-11-24 21:22:13,441 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-24 21:22:13,442 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__success
[2020-11-24 21:22:13,442 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__fail
[2020-11-24 21:22:13,442 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__success
[2020-11-24 21:22:13,442 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__fail
[2020-11-24 21:22:13,442 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__success
[2020-11-24 21:22:13,443 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__fail
[2020-11-24 21:22:13,443 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__success
[2020-11-24 21:22:13,443 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__fail
[2020-11-24 21:22:13,443 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableMintableToken_FreezableMintableToken_NoBaseCtor__fail
[2020-11-24 21:22:13,443 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableMintableToken_FreezableMintableToken__success
[2020-11-24 21:22:13,444 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableMintableToken_FreezableMintableToken__fail
[2020-11-24 21:22:13,444 INFO  L130     BoogieDeclarations]: Found specification of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken__success
[2020-11-24 21:22:13,444 INFO  L130     BoogieDeclarations]: Found specification of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken__fail
[2020-11-24 21:22:13,444 INFO  L130     BoogieDeclarations]: Found specification of procedure Consts_Consts_NoBaseCtor__fail
[2020-11-24 21:22:13,444 INFO  L130     BoogieDeclarations]: Found specification of procedure Consts_Consts__success
[2020-11-24 21:22:13,445 INFO  L130     BoogieDeclarations]: Found specification of procedure Consts_Consts__fail
[2020-11-24 21:22:13,445 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_Consts__success
[2020-11-24 21:22:13,445 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_Consts__fail
[2020-11-24 21:22:13,445 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_UINT8_Consts__success
[2020-11-24 21:22:13,445 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_UINT8_Consts__fail
[2020-11-24 21:22:13,446 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMAL_MULTIPLIER_Consts__success
[2020-11-24 21:22:13,446 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMAL_MULTIPLIER_Consts__fail
[2020-11-24 21:22:13,446 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_NAME_Consts__success
[2020-11-24 21:22:13,446 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_NAME_Consts__fail
[2020-11-24 21:22:13,447 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_SYMBOL_Consts__success
[2020-11-24 21:22:13,447 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_SYMBOL_Consts__fail
[2020-11-24 21:22:13,447 INFO  L130     BoogieDeclarations]: Found specification of procedure PAUSED_Consts__success
[2020-11-24 21:22:13,447 INFO  L130     BoogieDeclarations]: Found specification of procedure PAUSED_Consts__fail
[2020-11-24 21:22:13,448 INFO  L130     BoogieDeclarations]: Found specification of procedure TARGET_USER_Consts__success
[2020-11-24 21:22:13,448 INFO  L130     BoogieDeclarations]: Found specification of procedure TARGET_USER_Consts__fail
[2020-11-24 21:22:13,448 INFO  L130     BoogieDeclarations]: Found specification of procedure CONTINUE_MINTING_Consts__success
[2020-11-24 21:22:13,448 INFO  L130     BoogieDeclarations]: Found specification of procedure CONTINUE_MINTING_Consts__fail
[2020-11-24 21:22:13,448 INFO  L130     BoogieDeclarations]: Found specification of procedure MainToken_MainToken_NoBaseCtor__fail
[2020-11-24 21:22:13,449 INFO  L130     BoogieDeclarations]: Found specification of procedure MainToken_MainToken__success
[2020-11-24 21:22:13,449 INFO  L130     BoogieDeclarations]: Found specification of procedure MainToken_MainToken__fail
[2020-11-24 21:22:13,449 INFO  L130     BoogieDeclarations]: Found specification of procedure name_MainToken__success
[2020-11-24 21:22:13,449 INFO  L130     BoogieDeclarations]: Found specification of procedure name_MainToken__fail
[2020-11-24 21:22:13,449 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_MainToken__success
[2020-11-24 21:22:13,450 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_MainToken__fail
[2020-11-24 21:22:13,450 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_MainToken__success
[2020-11-24 21:22:13,450 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_MainToken__fail
[2020-11-24 21:22:13,450 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_MainToken__success
[2020-11-24 21:22:13,450 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_MainToken__fail
[2020-11-24 21:22:13,451 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_MainToken__success
[2020-11-24 21:22:13,451 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_MainToken__fail
[2020-11-24 21:22:13,451 INFO  L130     BoogieDeclarations]: Found specification of procedure init_MainToken__fail
[2020-11-24 21:22:13,451 INFO  L130     BoogieDeclarations]: Found specification of procedure initialized_MainToken__success
[2020-11-24 21:22:13,451 INFO  L130     BoogieDeclarations]: Found specification of procedure initialized_MainToken__fail
[2020-11-24 21:22:13,452 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-24 21:22:13,452 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-24 21:22:13,452 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-24 21:22:13,452 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-24 21:22:13,452 INFO  L130     BoogieDeclarations]: Found specification of procedure canMint_pre__fail
[2020-11-24 21:22:13,452 INFO  L130     BoogieDeclarations]: Found specification of procedure hasMintPermission_pre__fail
[2020-11-24 21:22:13,452 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__fail
[2020-11-24 21:22:13,452 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__fail
[2020-11-24 21:22:13,452 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-24 21:22:13,452 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-24 21:22:13,452 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic_NoBaseCtor__fail
[2020-11-24 21:22:13,453 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic_NoBaseCtor__success
[2020-11-24 21:22:13,453 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic__fail
[2020-11-24 21:22:13,453 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic__success
[2020-11-24 21:22:13,453 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-24 21:22:13,453 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-24 21:22:13,453 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-24 21:22:13,453 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-24 21:22:13,453 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-24 21:22:13,453 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-24 21:22:13,453 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-24 21:22:13,453 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-24 21:22:13,453 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-24 21:22:13,454 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-24 21:22:13,454 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-24 21:22:13,454 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-24 21:22:13,454 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken_NoBaseCtor__fail
[2020-11-24 21:22:13,454 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken_NoBaseCtor__success
[2020-11-24 21:22:13,454 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken__fail
[2020-11-24 21:22:13,454 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken__success
[2020-11-24 21:22:13,454 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken__fail
[2020-11-24 21:22:13,454 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken__success
[2020-11-24 21:22:13,454 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken__fail
[2020-11-24 21:22:13,454 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken__success
[2020-11-24 21:22:13,454 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken__fail
[2020-11-24 21:22:13,454 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken__success
[2020-11-24 21:22:13,455 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-24 21:22:13,455 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-24 21:22:13,455 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-24 21:22:13,455 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-24 21:22:13,455 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken_NoBaseCtor__fail
[2020-11-24 21:22:13,455 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken_NoBaseCtor__success
[2020-11-24 21:22:13,455 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken__fail
[2020-11-24 21:22:13,455 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken__success
[2020-11-24 21:22:13,455 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken__fail
[2020-11-24 21:22:13,455 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken__success
[2020-11-24 21:22:13,455 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken__fail
[2020-11-24 21:22:13,455 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken__success
[2020-11-24 21:22:13,456 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken__fail
[2020-11-24 21:22:13,456 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken__success
[2020-11-24 21:22:13,456 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken__fail
[2020-11-24 21:22:13,456 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken__success
[2020-11-24 21:22:13,456 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken__fail
[2020-11-24 21:22:13,456 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken__success
[2020-11-24 21:22:13,456 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-24 21:22:13,456 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-24 21:22:13,456 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__fail
[2020-11-24 21:22:13,456 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__success
[2020-11-24 21:22:13,456 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable__fail
[2020-11-24 21:22:13,456 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable__success
[2020-11-24 21:22:13,456 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__fail
[2020-11-24 21:22:13,456 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__success
[2020-11-24 21:22:13,457 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferOwnership~address_Ownable__fail
[2020-11-24 21:22:13,457 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferOwnership~address_Ownable__success
[2020-11-24 21:22:13,457 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__fail
[2020-11-24 21:22:13,457 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__success
[2020-11-24 21:22:13,457 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken_NoBaseCtor__fail
[2020-11-24 21:22:13,457 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken_NoBaseCtor__success
[2020-11-24 21:22:13,457 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken__fail
[2020-11-24 21:22:13,457 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken__success
[2020-11-24 21:22:13,457 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_MintableToken__fail
[2020-11-24 21:22:13,457 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_MintableToken__success
[2020-11-24 21:22:13,457 INFO  L138     BoogieDeclarations]: Found implementation of procedure finishMinting_MintableToken__fail
[2020-11-24 21:22:13,457 INFO  L138     BoogieDeclarations]: Found implementation of procedure finishMinting_MintableToken__success
[2020-11-24 21:22:13,457 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintingFinished_MintableToken__fail
[2020-11-24 21:22:13,457 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintingFinished_MintableToken__success
[2020-11-24 21:22:13,458 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableToken_FreezableToken_NoBaseCtor__fail
[2020-11-24 21:22:13,458 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableToken_FreezableToken_NoBaseCtor__success
[2020-11-24 21:22:13,458 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableToken_FreezableToken__fail
[2020-11-24 21:22:13,458 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableToken_FreezableToken__success
[2020-11-24 21:22:13,458 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_FreezableToken__fail
[2020-11-24 21:22:13,458 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_FreezableToken__success
[2020-11-24 21:22:13,458 INFO  L138     BoogieDeclarations]: Found implementation of procedure actualBalanceOf~address_FreezableToken__fail
[2020-11-24 21:22:13,458 INFO  L138     BoogieDeclarations]: Found implementation of procedure actualBalanceOf~address_FreezableToken__success
[2020-11-24 21:22:13,458 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingBalanceOf~address_FreezableToken__fail
[2020-11-24 21:22:13,458 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingBalanceOf~address_FreezableToken__success
[2020-11-24 21:22:13,458 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingCount~address_FreezableToken__fail
[2020-11-24 21:22:13,458 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingCount~address_FreezableToken__success
[2020-11-24 21:22:13,458 INFO  L138     BoogieDeclarations]: Found implementation of procedure getFreezing~address~uint256_FreezableToken__fail
[2020-11-24 21:22:13,458 INFO  L138     BoogieDeclarations]: Found implementation of procedure getFreezing~address~uint256_FreezableToken__success
[2020-11-24 21:22:13,459 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeTo~address~uint256~uint64_FreezableToken__fail
[2020-11-24 21:22:13,459 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeTo~address~uint256~uint64_FreezableToken__success
[2020-11-24 21:22:13,459 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseOnce_FreezableToken__fail
[2020-11-24 21:22:13,459 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseOnce_FreezableToken__success
[2020-11-24 21:22:13,459 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseAll_FreezableToken__fail
[2020-11-24 21:22:13,459 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseAll_FreezableToken__success
[2020-11-24 21:22:13,459 INFO  L138     BoogieDeclarations]: Found implementation of procedure toKey~address~uint256_FreezableToken__fail
[2020-11-24 21:22:13,459 INFO  L138     BoogieDeclarations]: Found implementation of procedure toKey~address~uint256_FreezableToken__success
[2020-11-24 21:22:13,459 INFO  L138     BoogieDeclarations]: Found implementation of procedure freeze~address~uint64_FreezableToken__fail
[2020-11-24 21:22:13,459 INFO  L138     BoogieDeclarations]: Found implementation of procedure freeze~address~uint64_FreezableToken__success
[2020-11-24 21:22:13,459 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken_NoBaseCtor__fail
[2020-11-24 21:22:13,459 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken_NoBaseCtor__success
[2020-11-24 21:22:13,459 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken__fail
[2020-11-24 21:22:13,459 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken__success
[2020-11-24 21:22:13,460 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_BurnableToken__fail
[2020-11-24 21:22:13,460 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_BurnableToken__success
[2020-11-24 21:22:13,460 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_BurnableToken__fail
[2020-11-24 21:22:13,460 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_BurnableToken__success
[2020-11-24 21:22:13,460 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-24 21:22:13,460 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-24 21:22:13,460 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__fail
[2020-11-24 21:22:13,460 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__success
[2020-11-24 21:22:13,460 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__fail
[2020-11-24 21:22:13,460 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__success
[2020-11-24 21:22:13,460 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__fail
[2020-11-24 21:22:13,460 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__success
[2020-11-24 21:22:13,460 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__fail
[2020-11-24 21:22:13,461 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__success
[2020-11-24 21:22:13,461 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableMintableToken_FreezableMintableToken_NoBaseCtor__fail
[2020-11-24 21:22:13,461 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success
[2020-11-24 21:22:13,461 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableMintableToken_FreezableMintableToken__fail
[2020-11-24 21:22:13,461 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableMintableToken_FreezableMintableToken__success
[2020-11-24 21:22:13,461 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken__fail
[2020-11-24 21:22:13,461 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken__success
[2020-11-24 21:22:13,461 INFO  L138     BoogieDeclarations]: Found implementation of procedure Consts_Consts_NoBaseCtor__fail
[2020-11-24 21:22:13,461 INFO  L138     BoogieDeclarations]: Found implementation of procedure Consts_Consts_NoBaseCtor__success
[2020-11-24 21:22:13,461 INFO  L138     BoogieDeclarations]: Found implementation of procedure Consts_Consts__fail
[2020-11-24 21:22:13,461 INFO  L138     BoogieDeclarations]: Found implementation of procedure Consts_Consts__success
[2020-11-24 21:22:13,461 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_Consts__fail
[2020-11-24 21:22:13,461 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_Consts__success
[2020-11-24 21:22:13,461 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_UINT8_Consts__fail
[2020-11-24 21:22:13,462 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_UINT8_Consts__success
[2020-11-24 21:22:13,462 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMAL_MULTIPLIER_Consts__fail
[2020-11-24 21:22:13,462 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMAL_MULTIPLIER_Consts__success
[2020-11-24 21:22:13,462 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_NAME_Consts__fail
[2020-11-24 21:22:13,462 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_NAME_Consts__success
[2020-11-24 21:22:13,462 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_SYMBOL_Consts__fail
[2020-11-24 21:22:13,462 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_SYMBOL_Consts__success
[2020-11-24 21:22:13,462 INFO  L138     BoogieDeclarations]: Found implementation of procedure PAUSED_Consts__fail
[2020-11-24 21:22:13,462 INFO  L138     BoogieDeclarations]: Found implementation of procedure PAUSED_Consts__success
[2020-11-24 21:22:13,462 INFO  L138     BoogieDeclarations]: Found implementation of procedure TARGET_USER_Consts__fail
[2020-11-24 21:22:13,462 INFO  L138     BoogieDeclarations]: Found implementation of procedure TARGET_USER_Consts__success
[2020-11-24 21:22:13,462 INFO  L138     BoogieDeclarations]: Found implementation of procedure CONTINUE_MINTING_Consts__fail
[2020-11-24 21:22:13,462 INFO  L138     BoogieDeclarations]: Found implementation of procedure CONTINUE_MINTING_Consts__success
[2020-11-24 21:22:13,462 INFO  L138     BoogieDeclarations]: Found implementation of procedure MainToken_MainToken_NoBaseCtor__fail
[2020-11-24 21:22:13,463 INFO  L138     BoogieDeclarations]: Found implementation of procedure MainToken_MainToken_NoBaseCtor__success
[2020-11-24 21:22:13,463 INFO  L138     BoogieDeclarations]: Found implementation of procedure MainToken_MainToken__fail
[2020-11-24 21:22:13,463 INFO  L138     BoogieDeclarations]: Found implementation of procedure MainToken_MainToken__success
[2020-11-24 21:22:13,463 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_MainToken__fail
[2020-11-24 21:22:13,463 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_MainToken__success
[2020-11-24 21:22:13,463 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_MainToken__fail
[2020-11-24 21:22:13,463 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_MainToken__success
[2020-11-24 21:22:13,463 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_MainToken__fail
[2020-11-24 21:22:13,463 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_MainToken__success
[2020-11-24 21:22:13,463 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_MainToken__fail
[2020-11-24 21:22:13,463 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_MainToken__success
[2020-11-24 21:22:13,463 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_MainToken__fail
[2020-11-24 21:22:13,463 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_MainToken__success
[2020-11-24 21:22:13,464 INFO  L138     BoogieDeclarations]: Found implementation of procedure init_MainToken__fail
[2020-11-24 21:22:13,464 INFO  L138     BoogieDeclarations]: Found implementation of procedure init_MainToken__success
[2020-11-24 21:22:13,464 INFO  L138     BoogieDeclarations]: Found implementation of procedure initialized_MainToken__fail
[2020-11-24 21:22:13,464 INFO  L138     BoogieDeclarations]: Found implementation of procedure initialized_MainToken__success
[2020-11-24 21:22:13,464 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-24 21:22:13,464 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-24 21:22:13,464 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-24 21:22:13,464 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-24 21:22:13,464 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-24 21:22:13,464 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-24 21:22:13,464 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-24 21:22:13,464 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-24 21:22:13,464 INFO  L138     BoogieDeclarations]: Found implementation of procedure canMint_pre__fail
[2020-11-24 21:22:13,465 INFO  L138     BoogieDeclarations]: Found implementation of procedure canMint_pre__success
[2020-11-24 21:22:13,465 INFO  L138     BoogieDeclarations]: Found implementation of procedure hasMintPermission_pre__fail
[2020-11-24 21:22:13,465 INFO  L138     BoogieDeclarations]: Found implementation of procedure hasMintPermission_pre__success
[2020-11-24 21:22:13,465 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__fail
[2020-11-24 21:22:13,465 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__success
[2020-11-24 21:22:13,465 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__fail
[2020-11-24 21:22:13,465 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__success
[2020-11-24 21:22:13,465 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Basic
[2020-11-24 21:22:13,465 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Basic
[2020-11-24 21:22:13,465 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-24 21:22:13,465 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-24 21:22:13,465 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_BasicToken
[2020-11-24 21:22:13,465 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_BasicToken
[2020-11-24 21:22:13,465 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-24 21:22:13,466 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-24 21:22:13,466 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_StandardToken
[2020-11-24 21:22:13,466 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_StandardToken
[2020-11-24 21:22:13,466 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Ownable
[2020-11-24 21:22:13,466 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Ownable
[2020-11-24 21:22:13,466 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_MintableToken
[2020-11-24 21:22:13,466 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_MintableToken
[2020-11-24 21:22:13,466 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_FreezableToken
[2020-11-24 21:22:13,466 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_FreezableToken
[2020-11-24 21:22:13,466 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_BurnableToken
[2020-11-24 21:22:13,466 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_BurnableToken
[2020-11-24 21:22:13,466 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Pausable
[2020-11-24 21:22:13,466 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Pausable
[2020-11-24 21:22:13,466 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_FreezableMintableToken
[2020-11-24 21:22:13,467 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_FreezableMintableToken
[2020-11-24 21:22:13,467 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Consts
[2020-11-24 21:22:13,467 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Consts
[2020-11-24 21:22:13,467 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_MainToken
[2020-11-24 21:22:13,467 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-24 21:22:13,467 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-24 21:22:13,467 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-24 21:22:14,570 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 21:22:14,570 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 21:22:14,570 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 21:22:14,769 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 21:22:15,204 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-24 21:22:15,204 INFO  L286             CfgBuilder]: Removed 13 assue(true) statements.
[2020-11-24 21:22:15,207 INFO  L202        PluginConnector]: Adding new model MainToken_0x1b980e05943de3db3a459c72325338d327b6f5a9_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 09:22:15 BoogieIcfgContainer
[2020-11-24 21:22:15,207 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 09:22:13" (2/2) ...
[2020-11-24 21:22:15,208 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-24 21:22:15,208 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@21d09663 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 09:22:15, skipping insertion in model container
[2020-11-24 21:22:15,208 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-24 21:22:15,208 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-24 21:22:15,208 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-24 21:22:15,209 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-24 21:22:15,210 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "MainToken_0x1b980e05943de3db3a459c72325338d327b6f5a9_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:22:13" (1/3) ...
[2020-11-24 21:22:15,210 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@5abea466 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 09:22:15, skipping insertion in model container
[2020-11-24 21:22:15,210 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 09:22:13" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-24 21:22:15,242 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 09:22:15 NWAContainer
[2020-11-24 21:22:15,243 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-24 21:22:15,243 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-24 21:22:15,243 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-24 21:22:15,243 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-24 21:22:15,244 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "MainToken_0x1b980e05943de3db3a459c72325338d327b6f5a9_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 09:22:15" (3/4) ...
[2020-11-24 21:22:15,244 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@5e894f30 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 09:22:15, skipping insertion in model container
[2020-11-24 21:22:15,244 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 09:22:15" (4/4) ...
[2020-11-24 21:22:15,247 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-24 21:22:15,254 INFO  L110   BuchiProductObserver]: Initial RCFG 5421 locations, 7597 edges
[2020-11-24 21:22:15,254 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-24 21:22:15,271 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-24 21:22:19,589 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-24 21:22:19,606 INFO  L110   BuchiProductObserver]: BuchiProgram size 13522 locations, 24828 edges
[2020-11-24 21:22:19,606 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 09:22:19 BoogieIcfgContainer
[2020-11-24 21:22:19,606 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-24 21:22:19,606 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-24 21:22:19,606 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-24 21:22:19,607 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-24 21:22:19,608 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 09:22:19" (1/1) ...
[2020-11-24 21:22:19,931 INFO  L313           BlockEncoder]: Initial Icfg 13522 locations, 24828 edges
[2020-11-24 21:22:19,932 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-24 21:22:19,932 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-24 21:22:19,932 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-24 21:22:19,933 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-24 21:22:19,956 INFO  L70    emoveInfeasibleEdges]: Removed 315 edges and 29 locations because of local infeasibility
[2020-11-24 21:22:19,979 INFO  L70        RemoveSinkStates]: Removed 170 edges and 113 locations by removing sink states
[2020-11-24 21:22:20,001 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-24 21:22:20,009 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-24 21:22:20,017 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-24 21:22:20,017 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-24 21:22:20,022 INFO  L313           BlockEncoder]: Encoded RCFG 13312 locations, 24242 edges
[2020-11-24 21:22:20,022 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 24.11 09:22:20 BasicIcfg
[2020-11-24 21:22:20,023 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-24 21:22:20,023 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-24 21:22:20,023 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-24 21:22:20,024 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-24 21:22:20,025 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 21:22:20,025 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "MainToken_0x1b980e05943de3db3a459c72325338d327b6f5a9_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:22:13" (1/6) ...
[2020-11-24 21:22:20,026 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@1367b95f and model type MainToken_0x1b980e05943de3db3a459c72325338d327b6f5a9_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 09:22:20, skipping insertion in model container
[2020-11-24 21:22:20,026 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 21:22:20,026 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 09:22:13" (2/6) ...
[2020-11-24 21:22:20,026 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@1367b95f and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 09:22:20, skipping insertion in model container
[2020-11-24 21:22:20,026 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 21:22:20,026 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "MainToken_0x1b980e05943de3db3a459c72325338d327b6f5a9_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 09:22:15" (3/6) ...
[2020-11-24 21:22:20,027 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@1367b95f and model type MainToken_0x1b980e05943de3db3a459c72325338d327b6f5a9_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 24.11 09:22:20, skipping insertion in model container
[2020-11-24 21:22:20,027 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 21:22:20,027 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 09:22:15" (4/6) ...
[2020-11-24 21:22:20,027 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@1367b95f and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 09:22:20, skipping insertion in model container
[2020-11-24 21:22:20,027 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 21:22:20,027 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 09:22:19" (5/6) ...
[2020-11-24 21:22:20,027 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@1367b95f and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 24.11 09:22:20, skipping insertion in model container
[2020-11-24 21:22:20,027 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 21:22:20,027 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 24.11 09:22:20" (6/6) ...
[2020-11-24 21:22:20,028 INFO  L404   chiAutomizerObserver]: Analyzing ICFG MainToken_0x1b980e05943de3db3a459c72325338d327b6f5a9_transferfrom-normal.bpl_BEv2
[2020-11-24 21:22:20,062 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-24 21:22:20,063 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-24 21:22:20,063 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-24 21:22:20,063 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-24 21:22:20,063 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-24 21:22:20,063 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-24 21:22:20,063 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-24 21:22:20,063 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-24 21:22:20,063 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-24 21:22:20,143 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 13312 states.
[2020-11-24 21:22:20,237 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:22:20,237 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:22:20,237 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:22:20,245 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:22:20,245 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:22:20,245 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-24 21:22:20,245 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 13312 states.
[2020-11-24 21:22:20,292 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:22:20,292 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:22:20,292 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:22:20,294 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:22:20,294 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transferFrom_MainToken0 := false;
[L3]                  call_transferFrom_MainToken0 := false;
[L3]      CALL        call main();
[L3]                  havoc p3;
[L3]                  havoc p2;
[L3]                  havoc p1;
[L14832]              assume null == 0;
[L14833]  CALL        call this := FreshRefGenerator__success();
[L6722]               havoc newRef;
[L6723]               assume Alloc[newRef] == false;
[L6724]               Alloc[newRef] := true;
[L6725]               assume newRef != null;
[L14833]  RET         call this := FreshRefGenerator__success();
[L14834]              assume now >= 0;
[L14835]              assume DType[this] == MainToken;
[L14836]              assume msgvalue_MSG == 0;
[L14837]              gas := gas - 53000;
[L14838]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4392]               havoc __exception;
[L4393]               revert := false;
[L4394]   COND FALSE  !(__exception)
[L4433]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9531]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9333]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9309]               assume msgsender_MSG != null;
[L9310]               Balance[this] := 0;
[L9311]               TOKEN_DECIMALS_Consts[this] := 18;
[L9312]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9313]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9314]               TOKEN_NAME_Consts[this] := -1142012261;
[L9315]               TOKEN_SYMBOL_Consts[this] := 360831912;
[L9316]               PAUSED_Consts[this] := false;
[L9317]               __var_52 := ConstantToRef(687691456480424918299425112376782193233251990427);
[L9318]               TARGET_USER_Consts[this] := ConstantToRef(687691456480424918299425112376782193233251990427);
[L9319]               CONTINUE_MINTING_Consts[this] := true;
[L9333]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9334]   COND FALSE  !(revert)
[L9531]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9532]   COND TRUE   revert
[L4433]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4434]               assume !revert && gas >= 0;
[L14838]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14839]              assume !revert && gas >= 0;

Loop:
[L14842]  CALL        call CorralChoice_MainToken(this);
[L14499]              havoc msgsender_MSG;
[L14500]              havoc msgvalue_MSG;
[L14501]              havoc choice;
[L14502]              havoc __ret_0_totalSupply;
[L14503]              havoc _owner_s729;
[L14504]              havoc balance_s729;
[L14505]              havoc _to_s1572;
[L14506]              havoc _value_s1572;
[L14507]              havoc _success_s1572;
[L14508]              havoc _owner_s395;
[L14509]              havoc _spender_s395;
[L14510]              havoc __ret_0_allowance;
[L14511]              havoc _from_s1551;
[L14512]              havoc _to_s1551;
[L14513]              havoc _value_s1551;
[L14514]              havoc _success_s1551;
[L14515]              havoc _spender_s379;
[L14516]              havoc _value_s379;
[L14517]              havoc __ret_0_approve;
[L14518]              havoc _spender_s437;
[L14519]              havoc _addedValue_s437;
[L14520]              havoc __ret_0_increaseApproval;
[L14521]              havoc _spender_s497;
[L14522]              havoc _subtractedValue_s497;
[L14523]              havoc __ret_0_decreaseApproval;
[L14524]              havoc __ret_0_owner;
[L14525]              havoc _newOwner_s558;
[L14526]              havoc __ret_0_mintingFinished;
[L14527]              havoc _to_s664;
[L14528]              havoc _amount_s664;
[L14529]              havoc __ret_0_mint;
[L14530]              havoc __ret_0_finishMinting;
[L14531]              havoc _owner_s742;
[L14532]              havoc balance_s742;
[L14533]              havoc _owner_s754;
[L14534]              havoc balance_s754;
[L14535]              havoc _addr_s792;
[L14536]              havoc count_s792;
[L14537]              havoc _addr_s849;
[L14538]              havoc _index_s849;
[L14539]              havoc _release_s849;
[L14540]              havoc _balance_s849;
[L14541]              havoc _to_s938;
[L14542]              havoc _amount_s938;
[L14543]              havoc _until_s938;
[L14544]              havoc tokens_s1107;
[L14545]              havoc _value_s1261;
[L14546]              havoc __ret_0_paused;
[L14547]              havoc _to_s1449;
[L14548]              havoc _amount_s1449;
[L14549]              havoc _until_s1449;
[L14550]              havoc __ret_0_mintAndFreeze;
[L14551]              havoc __ret_0_TOKEN_DECIMALS;
[L14552]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14553]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14554]              havoc __ret_0_TOKEN_NAME;
[L14555]              havoc __ret_0_TOKEN_SYMBOL;
[L14556]              havoc __ret_0_PAUSED;
[L14557]              havoc __ret_0_TARGET_USER;
[L14558]              havoc __ret_0_CONTINUE_MINTING;
[L14559]              havoc __ret_0_initialized;
[L14560]              havoc _name_s1511;
[L14561]              havoc _symbol_s1519;
[L14562]              havoc _decimals_s1527;
[L14563]              havoc tmpNow;
[L14564]              havoc gas;
[L14565]              assume gas > 4000000 && gas <= 8000000;
[L14566]              tmpNow := now;
[L14567]              havoc now;
[L14568]              assume now > tmpNow;
[L14569]              assume msgsender_MSG != null;
[L14570]              assume DType[msgsender_MSG] != ERC20Basic;
[L14571]              assume DType[msgsender_MSG] != SafeMath;
[L14572]              assume DType[msgsender_MSG] != BasicToken;
[L14573]              assume DType[msgsender_MSG] != ERC20;
[L14574]              assume DType[msgsender_MSG] != StandardToken;
[L14575]              assume DType[msgsender_MSG] != Ownable;
[L14576]              assume DType[msgsender_MSG] != MintableToken;
[L14577]              assume DType[msgsender_MSG] != FreezableToken;
[L14578]              assume DType[msgsender_MSG] != BurnableToken;
[L14579]              assume DType[msgsender_MSG] != Pausable;
[L14580]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14581]              assume DType[msgsender_MSG] != Consts;
[L14582]              assume DType[msgsender_MSG] != MainToken;
[L14583]              Alloc[msgsender_MSG] := true;
[L14584]  COND TRUE   choice == 38
[L14585]              gas := gas - 21000;
[L14586]  COND FALSE  !(gas >= 0)
[L14842]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:22:20,311 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:22:20,312 INFO  L82        PathProgramCache]: Analyzing trace with hash 976115635, now seen corresponding path program 1 times
[2020-11-24 21:22:20,316 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:22:20,335 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:22:20,374 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 21:22:20,771 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:22:20,772 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-24 21:22:20,776 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:22:20,784 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-24 21:22:20,785 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-24 21:22:20,786 INFO  L87              Difference]: Start difference. First operand 13312 states. Second operand 3 states.
[2020-11-24 21:22:21,295 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:22:21,295 INFO  L93              Difference]: Finished difference Result 8313 states and 9728 transitions.
[2020-11-24 21:22:21,295 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-24 21:22:21,297 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8313 states and 9728 transitions.
[2020-11-24 21:22:21,331 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:22:21,378 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8313 states to 8309 states and 9720 transitions.
[2020-11-24 21:22:21,379 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-24 21:22:21,383 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1863
[2020-11-24 21:22:21,383 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8309 states and 9720 transitions.
[2020-11-24 21:22:21,401 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:22:21,401 INFO  L728         BuchiCegarLoop]: Abstraction has 8309 states and 9720 transitions.
[2020-11-24 21:22:21,426 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8309 states and 9720 transitions.
[2020-11-24 21:22:21,528 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8309 to 8309.
[2020-11-24 21:22:21,528 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8309 states.
[2020-11-24 21:22:21,542 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8309 states to 8309 states and 9720 transitions.
[2020-11-24 21:22:21,543 INFO  L751         BuchiCegarLoop]: Abstraction has 8309 states and 9720 transitions.
[2020-11-24 21:22:21,543 INFO  L631         BuchiCegarLoop]: Abstraction has 8309 states and 9720 transitions.
[2020-11-24 21:22:21,543 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-24 21:22:21,543 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8309 states and 9720 transitions.
[2020-11-24 21:22:21,556 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:22:21,556 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:22:21,557 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:22:21,559 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:22:21,559 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transferFrom_MainToken0 := false;
[L3]                  call_transferFrom_MainToken0 := false;
[L3]      CALL        call main();
[L3]                  havoc p3;
[L3]                  havoc p2;
[L3]                  havoc p1;
[L14832]              assume null == 0;
[L14833]  CALL        call this := FreshRefGenerator__success();
[L6722]               havoc newRef;
[L6723]               assume Alloc[newRef] == false;
[L6724]               Alloc[newRef] := true;
[L6725]               assume newRef != null;
[L14833]  RET         call this := FreshRefGenerator__success();
[L14834]              assume now >= 0;
[L14835]              assume DType[this] == MainToken;
[L14836]              assume msgvalue_MSG == 0;
[L14837]              gas := gas - 53000;
[L14838]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4392]               havoc __exception;
[L4393]               revert := false;
[L4394]   COND FALSE  !(__exception)
[L4433]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9531]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9333]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9309]               assume msgsender_MSG != null;
[L9310]               Balance[this] := 0;
[L9311]               TOKEN_DECIMALS_Consts[this] := 18;
[L9312]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9313]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9314]               TOKEN_NAME_Consts[this] := -1142012261;
[L9315]               TOKEN_SYMBOL_Consts[this] := 360831912;
[L9316]               PAUSED_Consts[this] := false;
[L9317]               __var_52 := ConstantToRef(687691456480424918299425112376782193233251990427);
[L9318]               TARGET_USER_Consts[this] := ConstantToRef(687691456480424918299425112376782193233251990427);
[L9319]               CONTINUE_MINTING_Consts[this] := true;
[L9333]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9334]   COND FALSE  !(revert)
[L9531]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9532]   COND TRUE   revert
[L4433]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4434]               assume !revert && gas >= 0;
[L14838]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14839]              assume !revert && gas >= 0;
[L14842]  CALL        call CorralChoice_MainToken(this);
[L14499]              havoc msgsender_MSG;
[L14500]              havoc msgvalue_MSG;
[L14501]              havoc choice;
[L14502]              havoc __ret_0_totalSupply;
[L14503]              havoc _owner_s729;
[L14504]              havoc balance_s729;
[L14505]              havoc _to_s1572;
[L14506]              havoc _value_s1572;
[L14507]              havoc _success_s1572;
[L14508]              havoc _owner_s395;
[L14509]              havoc _spender_s395;
[L14510]              havoc __ret_0_allowance;
[L14511]              havoc _from_s1551;
[L14512]              havoc _to_s1551;
[L14513]              havoc _value_s1551;
[L14514]              havoc _success_s1551;
[L14515]              havoc _spender_s379;
[L14516]              havoc _value_s379;
[L14517]              havoc __ret_0_approve;
[L14518]              havoc _spender_s437;
[L14519]              havoc _addedValue_s437;
[L14520]              havoc __ret_0_increaseApproval;
[L14521]              havoc _spender_s497;
[L14522]              havoc _subtractedValue_s497;
[L14523]              havoc __ret_0_decreaseApproval;
[L14524]              havoc __ret_0_owner;
[L14525]              havoc _newOwner_s558;
[L14526]              havoc __ret_0_mintingFinished;
[L14527]              havoc _to_s664;
[L14528]              havoc _amount_s664;
[L14529]              havoc __ret_0_mint;
[L14530]              havoc __ret_0_finishMinting;
[L14531]              havoc _owner_s742;
[L14532]              havoc balance_s742;
[L14533]              havoc _owner_s754;
[L14534]              havoc balance_s754;
[L14535]              havoc _addr_s792;
[L14536]              havoc count_s792;
[L14537]              havoc _addr_s849;
[L14538]              havoc _index_s849;
[L14539]              havoc _release_s849;
[L14540]              havoc _balance_s849;
[L14541]              havoc _to_s938;
[L14542]              havoc _amount_s938;
[L14543]              havoc _until_s938;
[L14544]              havoc tokens_s1107;
[L14545]              havoc _value_s1261;
[L14546]              havoc __ret_0_paused;
[L14547]              havoc _to_s1449;
[L14548]              havoc _amount_s1449;
[L14549]              havoc _until_s1449;
[L14550]              havoc __ret_0_mintAndFreeze;
[L14551]              havoc __ret_0_TOKEN_DECIMALS;
[L14552]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14553]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14554]              havoc __ret_0_TOKEN_NAME;
[L14555]              havoc __ret_0_TOKEN_SYMBOL;
[L14556]              havoc __ret_0_PAUSED;
[L14557]              havoc __ret_0_TARGET_USER;
[L14558]              havoc __ret_0_CONTINUE_MINTING;
[L14559]              havoc __ret_0_initialized;
[L14560]              havoc _name_s1511;
[L14561]              havoc _symbol_s1519;
[L14562]              havoc _decimals_s1527;
[L14563]              havoc tmpNow;
[L14564]              havoc gas;
[L14565]              assume gas > 4000000 && gas <= 8000000;
[L14566]              tmpNow := now;
[L14567]              havoc now;
[L14568]              assume now > tmpNow;
[L14569]              assume msgsender_MSG != null;
[L14570]              assume DType[msgsender_MSG] != ERC20Basic;
[L14571]              assume DType[msgsender_MSG] != SafeMath;
[L14572]              assume DType[msgsender_MSG] != BasicToken;
[L14573]              assume DType[msgsender_MSG] != ERC20;
[L14574]              assume DType[msgsender_MSG] != StandardToken;
[L14575]              assume DType[msgsender_MSG] != Ownable;
[L14576]              assume DType[msgsender_MSG] != MintableToken;
[L14577]              assume DType[msgsender_MSG] != FreezableToken;
[L14578]              assume DType[msgsender_MSG] != BurnableToken;
[L14579]              assume DType[msgsender_MSG] != Pausable;
[L14580]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14581]              assume DType[msgsender_MSG] != Consts;
[L14582]              assume DType[msgsender_MSG] != MainToken;
[L14583]              Alloc[msgsender_MSG] := true;
[L14584]  COND FALSE  !(choice == 38)
[L14590]  COND FALSE  !(choice == 37)
[L14596]  COND FALSE  !(choice == 36)
[L14603]  COND FALSE  !(choice == 35)
[L14609]  COND TRUE   choice == 34
[L14610]              gas := gas - 21000;
[L14611]  COND TRUE   gas >= 0
[L14612]              assume _value_s1551 >= 0 && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14613]              assume msgvalue_MSG == 0;
[L14614]  CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((((p1 != _from_s1551 && p1 != _to_s1551) && (p2 != _from_s1551 || p3 != msgsender_MSG)) && _from_s1551 != _to_s1551) && _value_s1551 <= balances_BasicToken[this][_from_s1551]) && _value_s1551 <= allowed_StandardToken[this][_from_s1551][msgsender_MSG]) && balances_BasicToken[this][_to_s1551] + _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _value_s1551 >= 0) && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1551] >= 0) && balances_BasicToken[this][_to_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s1551] >= 0) && balances_BasicToken[this][_from_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_MainToken0 := true;
[L3]                  call_transferFrom_MainToken0 := false;
[L3]                  revert := revert_hold;
[L4740]               havoc __exception;
[L4741]               revert := false;
[L4742]   COND FALSE  !(__exception)
[L4781]   CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L9641]   COND TRUE   !!paused_Pausable[this]
[L9642]               revert := true;
[L4781]   RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L4782]               assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !(((((((((((((_success_s1551 == true && balances_BasicToken[this][_from_s1551] == old(balances_BasicToken[this][_from_s1551]) - _value_s1551) && balances_BasicToken[this][_to_s1551] == old(balances_BasicToken[this][_to_s1551]) + _value_s1551) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] == old(allowed_StandardToken[this][_from_s1551][msgsender_MSG]) - _value_s1551) && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this][p1] == old(balances_BasicToken[this][p1])) && allowed_StandardToken[this][p2][p3] == old(allowed_StandardToken[this][p2][p3])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L3]                  revert := revert_hold;
[L14614]  RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L14842]  RET         call CorralChoice_MainToken(this);

Loop:
[L14842]  CALL        call CorralChoice_MainToken(this);
[L14499]              havoc msgsender_MSG;
[L14500]              havoc msgvalue_MSG;
[L14501]              havoc choice;
[L14502]              havoc __ret_0_totalSupply;
[L14503]              havoc _owner_s729;
[L14504]              havoc balance_s729;
[L14505]              havoc _to_s1572;
[L14506]              havoc _value_s1572;
[L14507]              havoc _success_s1572;
[L14508]              havoc _owner_s395;
[L14509]              havoc _spender_s395;
[L14510]              havoc __ret_0_allowance;
[L14511]              havoc _from_s1551;
[L14512]              havoc _to_s1551;
[L14513]              havoc _value_s1551;
[L14514]              havoc _success_s1551;
[L14515]              havoc _spender_s379;
[L14516]              havoc _value_s379;
[L14517]              havoc __ret_0_approve;
[L14518]              havoc _spender_s437;
[L14519]              havoc _addedValue_s437;
[L14520]              havoc __ret_0_increaseApproval;
[L14521]              havoc _spender_s497;
[L14522]              havoc _subtractedValue_s497;
[L14523]              havoc __ret_0_decreaseApproval;
[L14524]              havoc __ret_0_owner;
[L14525]              havoc _newOwner_s558;
[L14526]              havoc __ret_0_mintingFinished;
[L14527]              havoc _to_s664;
[L14528]              havoc _amount_s664;
[L14529]              havoc __ret_0_mint;
[L14530]              havoc __ret_0_finishMinting;
[L14531]              havoc _owner_s742;
[L14532]              havoc balance_s742;
[L14533]              havoc _owner_s754;
[L14534]              havoc balance_s754;
[L14535]              havoc _addr_s792;
[L14536]              havoc count_s792;
[L14537]              havoc _addr_s849;
[L14538]              havoc _index_s849;
[L14539]              havoc _release_s849;
[L14540]              havoc _balance_s849;
[L14541]              havoc _to_s938;
[L14542]              havoc _amount_s938;
[L14543]              havoc _until_s938;
[L14544]              havoc tokens_s1107;
[L14545]              havoc _value_s1261;
[L14546]              havoc __ret_0_paused;
[L14547]              havoc _to_s1449;
[L14548]              havoc _amount_s1449;
[L14549]              havoc _until_s1449;
[L14550]              havoc __ret_0_mintAndFreeze;
[L14551]              havoc __ret_0_TOKEN_DECIMALS;
[L14552]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14553]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14554]              havoc __ret_0_TOKEN_NAME;
[L14555]              havoc __ret_0_TOKEN_SYMBOL;
[L14556]              havoc __ret_0_PAUSED;
[L14557]              havoc __ret_0_TARGET_USER;
[L14558]              havoc __ret_0_CONTINUE_MINTING;
[L14559]              havoc __ret_0_initialized;
[L14560]              havoc _name_s1511;
[L14561]              havoc _symbol_s1519;
[L14562]              havoc _decimals_s1527;
[L14563]              havoc tmpNow;
[L14564]              havoc gas;
[L14565]              assume gas > 4000000 && gas <= 8000000;
[L14566]              tmpNow := now;
[L14567]              havoc now;
[L14568]              assume now > tmpNow;
[L14569]              assume msgsender_MSG != null;
[L14570]              assume DType[msgsender_MSG] != ERC20Basic;
[L14571]              assume DType[msgsender_MSG] != SafeMath;
[L14572]              assume DType[msgsender_MSG] != BasicToken;
[L14573]              assume DType[msgsender_MSG] != ERC20;
[L14574]              assume DType[msgsender_MSG] != StandardToken;
[L14575]              assume DType[msgsender_MSG] != Ownable;
[L14576]              assume DType[msgsender_MSG] != MintableToken;
[L14577]              assume DType[msgsender_MSG] != FreezableToken;
[L14578]              assume DType[msgsender_MSG] != BurnableToken;
[L14579]              assume DType[msgsender_MSG] != Pausable;
[L14580]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14581]              assume DType[msgsender_MSG] != Consts;
[L14582]              assume DType[msgsender_MSG] != MainToken;
[L14583]              Alloc[msgsender_MSG] := true;
[L14584]  COND FALSE  !(choice == 38)
[L14590]  COND FALSE  !(choice == 37)
[L14596]  COND FALSE  !(choice == 36)
[L14603]  COND FALSE  !(choice == 35)
[L14609]  COND TRUE   choice == 34
[L14610]              gas := gas - 21000;
[L14611]  COND TRUE   gas >= 0
[L14612]              assume _value_s1551 >= 0 && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14613]              assume msgvalue_MSG == 0;
[L14614]  CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((((p1 != _from_s1551 && p1 != _to_s1551) && (p2 != _from_s1551 || p3 != msgsender_MSG)) && _from_s1551 != _to_s1551) && _value_s1551 <= balances_BasicToken[this][_from_s1551]) && _value_s1551 <= allowed_StandardToken[this][_from_s1551][msgsender_MSG]) && balances_BasicToken[this][_to_s1551] + _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _value_s1551 >= 0) && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1551] >= 0) && balances_BasicToken[this][_to_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s1551] >= 0) && balances_BasicToken[this][_from_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_MainToken0 := true;
[L3]                  call_transferFrom_MainToken0 := false;
[L3]                  revert := revert_hold;
[L4740]               havoc __exception;
[L4741]               revert := false;
[L4742]   COND FALSE  !(__exception)
[L4781]   CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L9641]   COND TRUE   !!paused_Pausable[this]
[L9642]               revert := true;
[L4781]   RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L4782]               assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !(((((((((((((_success_s1551 == true && balances_BasicToken[this][_from_s1551] == old(balances_BasicToken[this][_from_s1551]) - _value_s1551) && balances_BasicToken[this][_to_s1551] == old(balances_BasicToken[this][_to_s1551]) + _value_s1551) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] == old(allowed_StandardToken[this][_from_s1551][msgsender_MSG]) - _value_s1551) && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this][p1] == old(balances_BasicToken[this][p1])) && allowed_StandardToken[this][p2][p3] == old(allowed_StandardToken[this][p2][p3])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L3]                  revert := revert_hold;
[L14614]  RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L14842]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:22:21,563 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:22:21,563 INFO  L82        PathProgramCache]: Analyzing trace with hash 778786573, now seen corresponding path program 1 times
[2020-11-24 21:22:21,564 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:22:21,575 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:22:21,608 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 21:22:21,608 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:22:21,608 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-24 21:22:21,609 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:22:21,609 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-24 21:22:21,609 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-24 21:22:21,610 INFO  L87              Difference]: Start difference. First operand 8309 states and 9720 transitions. cyclomatic complexity: 1431 Second operand 3 states.
[2020-11-24 21:22:21,803 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:22:21,803 INFO  L93              Difference]: Finished difference Result 9767 states and 11172 transitions.
[2020-11-24 21:22:21,803 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-24 21:22:21,803 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9767 states and 11172 transitions.
[2020-11-24 21:22:21,828 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 21:22:21,868 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9767 states to 9767 states and 11172 transitions.
[2020-11-24 21:22:21,868 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2286
[2020-11-24 21:22:21,870 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2286
[2020-11-24 21:22:21,870 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9767 states and 11172 transitions.
[2020-11-24 21:22:21,890 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:22:21,890 INFO  L728         BuchiCegarLoop]: Abstraction has 9767 states and 11172 transitions.
[2020-11-24 21:22:21,901 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9767 states and 11172 transitions.
[2020-11-24 21:22:21,991 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9767 to 8685.
[2020-11-24 21:22:21,991 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8685 states.
[2020-11-24 21:22:22,003 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8685 states to 8685 states and 9826 transitions.
[2020-11-24 21:22:22,003 INFO  L751         BuchiCegarLoop]: Abstraction has 8685 states and 9826 transitions.
[2020-11-24 21:22:22,003 INFO  L631         BuchiCegarLoop]: Abstraction has 8685 states and 9826 transitions.
[2020-11-24 21:22:22,003 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-24 21:22:22,003 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8685 states and 9826 transitions.
[2020-11-24 21:22:22,015 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:22:22,015 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:22:22,015 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:22:22,021 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:22:22,021 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transferFrom_MainToken0 := false;
[L3]                  call_transferFrom_MainToken0 := false;
[L3]      CALL        call main();
[L3]                  havoc p3;
[L3]                  havoc p2;
[L3]                  havoc p1;
[L14832]              assume null == 0;
[L14833]  CALL        call this := FreshRefGenerator__success();
[L6722]               havoc newRef;
[L6723]               assume Alloc[newRef] == false;
[L6724]               Alloc[newRef] := true;
[L6725]               assume newRef != null;
[L14833]  RET         call this := FreshRefGenerator__success();
[L14834]              assume now >= 0;
[L14835]              assume DType[this] == MainToken;
[L14836]              assume msgvalue_MSG == 0;
[L14837]              gas := gas - 53000;
[L14838]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4392]               havoc __exception;
[L4393]               revert := false;
[L4394]   COND FALSE  !(__exception)
[L4433]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9531]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9333]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9309]               assume msgsender_MSG != null;
[L9310]               Balance[this] := 0;
[L9311]               TOKEN_DECIMALS_Consts[this] := 18;
[L9312]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9313]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9314]               TOKEN_NAME_Consts[this] := -1142012261;
[L9315]               TOKEN_SYMBOL_Consts[this] := 360831912;
[L9316]               PAUSED_Consts[this] := false;
[L9317]               __var_52 := ConstantToRef(687691456480424918299425112376782193233251990427);
[L9318]               TARGET_USER_Consts[this] := ConstantToRef(687691456480424918299425112376782193233251990427);
[L9319]               CONTINUE_MINTING_Consts[this] := true;
[L9333]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9334]   COND FALSE  !(revert)
[L9531]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9532]   COND FALSE  !(revert)
[L9535]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L9535]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9536]   COND FALSE  !(revert)
[L9539]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7020]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]               assume msgsender_MSG != null;
[L7002]               Balance[this] := 0;
[L7024]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L9539]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9540]   COND FALSE  !(revert)
[L9543]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6891]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6892]   COND FALSE  !(revert)
[L6895]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6869]               assume msgsender_MSG != null;
[L6870]               Balance[this] := 0;
[L6871]               balances_BasicToken[this] := zeroRefintArr();
[L6872]               sum_balances0[this] := 0;
[L6873]               totalSupply__BasicToken[this] := 0;
[L6895]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6896]   COND FALSE  !(revert)
[L9543]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9544]   COND FALSE  !(revert)
[L9547]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7072]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7073]   COND FALSE  !(revert)
[L7076]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7020]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]               assume msgsender_MSG != null;
[L7002]               Balance[this] := 0;
[L7024]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7076]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7077]   COND FALSE  !(revert)
[L7080]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6891]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6892]   COND FALSE  !(revert)
[L6895]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6869]               assume msgsender_MSG != null;
[L6870]               Balance[this] := 0;
[L6871]               balances_BasicToken[this] := zeroRefintArr();
[L6872]               sum_balances0[this] := 0;
[L6873]               totalSupply__BasicToken[this] := 0;
[L6895]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6896]   COND FALSE  !(revert)
[L7080]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7081]   COND FALSE  !(revert)
[L7084]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7043]               assume msgsender_MSG != null;
[L7044]               Balance[this] := 0;
[L7045]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7046]               sum_allowed1[this] := 0;
[L7084]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7085]   COND FALSE  !(revert)
[L9547]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9548]   COND FALSE  !(revert)
[L9551]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7679]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7680]   COND FALSE  !(revert)
[L7683]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7020]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]               assume msgsender_MSG != null;
[L7002]               Balance[this] := 0;
[L7024]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7683]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7684]   COND FALSE  !(revert)
[L7687]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6891]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6892]   COND FALSE  !(revert)
[L6895]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6869]               assume msgsender_MSG != null;
[L6870]               Balance[this] := 0;
[L6871]               balances_BasicToken[this] := zeroRefintArr();
[L6872]               sum_balances0[this] := 0;
[L6873]               totalSupply__BasicToken[this] := 0;
[L6895]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6896]   COND FALSE  !(revert)
[L7687]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7688]   COND FALSE  !(revert)
[L7691]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7072]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7073]   COND FALSE  !(revert)
[L7076]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7020]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]               assume msgsender_MSG != null;
[L7002]               Balance[this] := 0;
[L7024]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7076]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7077]   COND FALSE  !(revert)
[L7080]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6891]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6892]   COND FALSE  !(revert)
[L6895]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6869]               assume msgsender_MSG != null;
[L6870]               Balance[this] := 0;
[L6871]               balances_BasicToken[this] := zeroRefintArr();
[L6872]               sum_balances0[this] := 0;
[L6873]               totalSupply__BasicToken[this] := 0;
[L6895]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6896]   COND FALSE  !(revert)
[L7080]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7081]   COND FALSE  !(revert)
[L7084]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7043]               assume msgsender_MSG != null;
[L7044]               Balance[this] := 0;
[L7045]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7046]               sum_allowed1[this] := 0;
[L7084]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7085]   COND FALSE  !(revert)
[L7691]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7692]   COND FALSE  !(revert)
[L7695]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7642]               assume msgsender_MSG != null;
[L7643]               Balance[this] := 0;
[L7644]               chains_FreezableToken[this] := zerointintArr();
[L7645]               sum_chains2[this] := 0;
[L7646]               freezings_FreezableToken[this] := zerointintArr();
[L7647]               sum_freezings3[this] := 0;
[L7648]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7649]               sum_freezingBalance4[this] := 0;
[L7695]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7696]   COND FALSE  !(revert)
[L9551]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9552]   COND FALSE  !(revert)
[L9555]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7297]               assume msgsender_MSG != null;
[L7298]               Balance[this] := 0;
[L7299]               owner_Ownable[this] := null;
[L7301]               owner_Ownable[this] := msgsender_MSG;
[L7314]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7315]   COND FALSE  !(revert)
[L9555]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9556]   COND FALSE  !(revert)
[L9559]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7498]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7499]   COND FALSE  !(revert)
[L7502]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7020]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]               assume msgsender_MSG != null;
[L7002]               Balance[this] := 0;
[L7024]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7502]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7503]   COND FALSE  !(revert)
[L7506]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6891]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6892]   COND FALSE  !(revert)
[L6895]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6869]               assume msgsender_MSG != null;
[L6870]               Balance[this] := 0;
[L6871]               balances_BasicToken[this] := zeroRefintArr();
[L6872]               sum_balances0[this] := 0;
[L6873]               totalSupply__BasicToken[this] := 0;
[L6895]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6896]   COND FALSE  !(revert)
[L7506]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7507]   COND FALSE  !(revert)
[L7510]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7072]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7073]   COND FALSE  !(revert)
[L7076]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7020]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]               assume msgsender_MSG != null;
[L7002]               Balance[this] := 0;
[L7024]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7076]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7077]   COND FALSE  !(revert)
[L7080]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6891]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6892]   COND FALSE  !(revert)
[L6895]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6869]               assume msgsender_MSG != null;
[L6870]               Balance[this] := 0;
[L6871]               balances_BasicToken[this] := zeroRefintArr();
[L6872]               sum_balances0[this] := 0;
[L6873]               totalSupply__BasicToken[this] := 0;
[L6895]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6896]   COND FALSE  !(revert)
[L7080]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7081]   COND FALSE  !(revert)
[L7084]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7043]               assume msgsender_MSG != null;
[L7044]               Balance[this] := 0;
[L7045]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7046]               sum_allowed1[this] := 0;
[L7084]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7085]   COND FALSE  !(revert)
[L7510]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7511]   COND FALSE  !(revert)
[L7514]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7297]               assume msgsender_MSG != null;
[L7298]               Balance[this] := 0;
[L7299]               owner_Ownable[this] := null;
[L7301]               owner_Ownable[this] := msgsender_MSG;
[L7314]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7315]   COND FALSE  !(revert)
[L7514]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7515]   COND FALSE  !(revert)
[L7518]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]               assume msgsender_MSG != null;
[L7463]               Balance[this] := 0;
[L7464]               mintingFinished_MintableToken[this] := false;
[L7518]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7519]   COND FALSE  !(revert)
[L9559]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9560]   COND FALSE  !(revert)
[L9563]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9118]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L9118]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9119]   COND FALSE  !(revert)
[L9122]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7020]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]               assume msgsender_MSG != null;
[L7002]               Balance[this] := 0;
[L7024]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L9122]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9123]   COND FALSE  !(revert)
[L9126]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6891]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6892]   COND FALSE  !(revert)
[L6895]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6869]               assume msgsender_MSG != null;
[L6870]               Balance[this] := 0;
[L6871]               balances_BasicToken[this] := zeroRefintArr();
[L6872]               sum_balances0[this] := 0;
[L6873]               totalSupply__BasicToken[this] := 0;
[L6895]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6896]   COND FALSE  !(revert)
[L9126]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9127]   COND FALSE  !(revert)
[L9130]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7072]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7073]   COND FALSE  !(revert)
[L7076]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7020]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]               assume msgsender_MSG != null;
[L7002]               Balance[this] := 0;
[L7024]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7076]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7077]   COND FALSE  !(revert)
[L7080]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6891]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6892]   COND FALSE  !(revert)
[L6895]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6869]               assume msgsender_MSG != null;
[L6870]               Balance[this] := 0;
[L6871]               balances_BasicToken[this] := zeroRefintArr();
[L6872]               sum_balances0[this] := 0;
[L6873]               totalSupply__BasicToken[this] := 0;
[L6895]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6896]   COND FALSE  !(revert)
[L7080]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7081]   COND FALSE  !(revert)
[L7084]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7043]               assume msgsender_MSG != null;
[L7044]               Balance[this] := 0;
[L7045]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7046]               sum_allowed1[this] := 0;
[L7084]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7085]   COND FALSE  !(revert)
[L9130]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9131]   COND FALSE  !(revert)
[L9134]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7679]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7680]   COND FALSE  !(revert)
[L7683]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7020]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]               assume msgsender_MSG != null;
[L7002]               Balance[this] := 0;
[L7024]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7683]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7684]   COND FALSE  !(revert)
[L7687]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6891]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6892]   COND FALSE  !(revert)
[L6895]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6869]               assume msgsender_MSG != null;
[L6870]               Balance[this] := 0;
[L6871]               balances_BasicToken[this] := zeroRefintArr();
[L6872]               sum_balances0[this] := 0;
[L6873]               totalSupply__BasicToken[this] := 0;
[L6895]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6896]   COND FALSE  !(revert)
[L7687]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7688]   COND FALSE  !(revert)
[L7691]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7072]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7073]   COND FALSE  !(revert)
[L7076]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7020]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]               assume msgsender_MSG != null;
[L7002]               Balance[this] := 0;
[L7024]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7076]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7077]   COND FALSE  !(revert)
[L7080]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6891]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6892]   COND FALSE  !(revert)
[L6895]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6869]               assume msgsender_MSG != null;
[L6870]               Balance[this] := 0;
[L6871]               balances_BasicToken[this] := zeroRefintArr();
[L6872]               sum_balances0[this] := 0;
[L6873]               totalSupply__BasicToken[this] := 0;
[L6895]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6896]   COND FALSE  !(revert)
[L7080]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7081]   COND FALSE  !(revert)
[L7084]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7043]               assume msgsender_MSG != null;
[L7044]               Balance[this] := 0;
[L7045]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7046]               sum_allowed1[this] := 0;
[L7084]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7085]   COND FALSE  !(revert)
[L7691]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7692]   COND FALSE  !(revert)
[L7695]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7642]               assume msgsender_MSG != null;
[L7643]               Balance[this] := 0;
[L7644]               chains_FreezableToken[this] := zerointintArr();
[L7645]               sum_chains2[this] := 0;
[L7646]               freezings_FreezableToken[this] := zerointintArr();
[L7647]               sum_freezings3[this] := 0;
[L7648]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7649]               sum_freezingBalance4[this] := 0;
[L7695]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7696]   COND FALSE  !(revert)
[L9134]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9135]   COND FALSE  !(revert)
[L9138]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7297]               assume msgsender_MSG != null;
[L7298]               Balance[this] := 0;
[L7299]               owner_Ownable[this] := null;
[L7301]               owner_Ownable[this] := msgsender_MSG;
[L7314]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7315]   COND FALSE  !(revert)
[L9138]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9139]   COND FALSE  !(revert)
[L9142]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7498]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7499]   COND FALSE  !(revert)
[L7502]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7020]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]               assume msgsender_MSG != null;
[L7002]               Balance[this] := 0;
[L7024]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7502]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7503]   COND FALSE  !(revert)
[L7506]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6891]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6892]   COND FALSE  !(revert)
[L6895]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6869]               assume msgsender_MSG != null;
[L6870]               Balance[this] := 0;
[L6871]               balances_BasicToken[this] := zeroRefintArr();
[L6872]               sum_balances0[this] := 0;
[L6873]               totalSupply__BasicToken[this] := 0;
[L6895]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6896]   COND FALSE  !(revert)
[L7506]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7507]   COND FALSE  !(revert)
[L7510]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7072]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7073]   COND FALSE  !(revert)
[L7076]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7020]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]               assume msgsender_MSG != null;
[L7002]               Balance[this] := 0;
[L7024]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7076]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7077]   COND FALSE  !(revert)
[L7080]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6891]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6892]   COND FALSE  !(revert)
[L6895]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6869]               assume msgsender_MSG != null;
[L6870]               Balance[this] := 0;
[L6871]               balances_BasicToken[this] := zeroRefintArr();
[L6872]               sum_balances0[this] := 0;
[L6873]               totalSupply__BasicToken[this] := 0;
[L6895]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6896]   COND FALSE  !(revert)
[L7080]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7081]   COND FALSE  !(revert)
[L7084]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7043]               assume msgsender_MSG != null;
[L7044]               Balance[this] := 0;
[L7045]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7046]               sum_allowed1[this] := 0;
[L7084]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7085]   COND FALSE  !(revert)
[L7510]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7511]   COND FALSE  !(revert)
[L7514]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7297]               assume msgsender_MSG != null;
[L7298]               Balance[this] := 0;
[L7299]               owner_Ownable[this] := null;
[L7301]               owner_Ownable[this] := msgsender_MSG;
[L7314]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7315]   COND FALSE  !(revert)
[L7514]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7515]   COND FALSE  !(revert)
[L7518]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]               assume msgsender_MSG != null;
[L7463]               Balance[this] := 0;
[L7464]               mintingFinished_MintableToken[this] := false;
[L7518]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7519]   COND FALSE  !(revert)
[L9142]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9143]   COND FALSE  !(revert)
[L9146]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9075]               assume msgsender_MSG != null;
[L9076]               Balance[this] := 0;
[L9146]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9147]   COND FALSE  !(revert)
[L9563]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9564]   COND FALSE  !(revert)
[L9567]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8862]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L8862]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8863]   COND FALSE  !(revert)
[L8866]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6891]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6892]   COND FALSE  !(revert)
[L6895]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6869]               assume msgsender_MSG != null;
[L6870]               Balance[this] := 0;
[L6871]               balances_BasicToken[this] := zeroRefintArr();
[L6872]               sum_balances0[this] := 0;
[L6873]               totalSupply__BasicToken[this] := 0;
[L6895]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6896]   COND FALSE  !(revert)
[L8866]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8867]   COND FALSE  !(revert)
[L8870]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8839]               assume msgsender_MSG != null;
[L8840]               Balance[this] := 0;
[L8870]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8871]   COND FALSE  !(revert)
[L9567]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9568]   COND FALSE  !(revert)
[L9571]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8988]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7297]               assume msgsender_MSG != null;
[L7298]               Balance[this] := 0;
[L7299]               owner_Ownable[this] := null;
[L7301]               owner_Ownable[this] := msgsender_MSG;
[L7314]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7315]   COND FALSE  !(revert)
[L8988]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8989]   COND FALSE  !(revert)
[L8992]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8968]               assume msgsender_MSG != null;
[L8969]               Balance[this] := 0;
[L8970]               paused_Pausable[this] := false;
[L8992]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8993]   COND FALSE  !(revert)
[L9571]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9572]   COND FALSE  !(revert)
[L9575]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9459]               assume msgsender_MSG != null;
[L9460]               Balance[this] := 0;
[L9461]               initialized_MainToken[this] := false;
[L9463]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9802]   COND TRUE   !!initialized_MainToken[this]
[L9803]               revert := true;
[L9463]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9464]   COND TRUE   revert
[L9575]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9576]   COND FALSE  !(revert)
[L4433]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4434]               assume !revert && gas >= 0;
[L14838]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14839]              assume !revert && gas >= 0;
[L14842]  CALL        call CorralChoice_MainToken(this);
[L14499]              havoc msgsender_MSG;
[L14500]              havoc msgvalue_MSG;
[L14501]              havoc choice;
[L14502]              havoc __ret_0_totalSupply;
[L14503]              havoc _owner_s729;
[L14504]              havoc balance_s729;
[L14505]              havoc _to_s1572;
[L14506]              havoc _value_s1572;
[L14507]              havoc _success_s1572;
[L14508]              havoc _owner_s395;
[L14509]              havoc _spender_s395;
[L14510]              havoc __ret_0_allowance;
[L14511]              havoc _from_s1551;
[L14512]              havoc _to_s1551;
[L14513]              havoc _value_s1551;
[L14514]              havoc _success_s1551;
[L14515]              havoc _spender_s379;
[L14516]              havoc _value_s379;
[L14517]              havoc __ret_0_approve;
[L14518]              havoc _spender_s437;
[L14519]              havoc _addedValue_s437;
[L14520]              havoc __ret_0_increaseApproval;
[L14521]              havoc _spender_s497;
[L14522]              havoc _subtractedValue_s497;
[L14523]              havoc __ret_0_decreaseApproval;
[L14524]              havoc __ret_0_owner;
[L14525]              havoc _newOwner_s558;
[L14526]              havoc __ret_0_mintingFinished;
[L14527]              havoc _to_s664;
[L14528]              havoc _amount_s664;
[L14529]              havoc __ret_0_mint;
[L14530]              havoc __ret_0_finishMinting;
[L14531]              havoc _owner_s742;
[L14532]              havoc balance_s742;
[L14533]              havoc _owner_s754;
[L14534]              havoc balance_s754;
[L14535]              havoc _addr_s792;
[L14536]              havoc count_s792;
[L14537]              havoc _addr_s849;
[L14538]              havoc _index_s849;
[L14539]              havoc _release_s849;
[L14540]              havoc _balance_s849;
[L14541]              havoc _to_s938;
[L14542]              havoc _amount_s938;
[L14543]              havoc _until_s938;
[L14544]              havoc tokens_s1107;
[L14545]              havoc _value_s1261;
[L14546]              havoc __ret_0_paused;
[L14547]              havoc _to_s1449;
[L14548]              havoc _amount_s1449;
[L14549]              havoc _until_s1449;
[L14550]              havoc __ret_0_mintAndFreeze;
[L14551]              havoc __ret_0_TOKEN_DECIMALS;
[L14552]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14553]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14554]              havoc __ret_0_TOKEN_NAME;
[L14555]              havoc __ret_0_TOKEN_SYMBOL;
[L14556]              havoc __ret_0_PAUSED;
[L14557]              havoc __ret_0_TARGET_USER;
[L14558]              havoc __ret_0_CONTINUE_MINTING;
[L14559]              havoc __ret_0_initialized;
[L14560]              havoc _name_s1511;
[L14561]              havoc _symbol_s1519;
[L14562]              havoc _decimals_s1527;
[L14563]              havoc tmpNow;
[L14564]              havoc gas;
[L14565]              assume gas > 4000000 && gas <= 8000000;
[L14566]              tmpNow := now;
[L14567]              havoc now;
[L14568]              assume now > tmpNow;
[L14569]              assume msgsender_MSG != null;
[L14570]              assume DType[msgsender_MSG] != ERC20Basic;
[L14571]              assume DType[msgsender_MSG] != SafeMath;
[L14572]              assume DType[msgsender_MSG] != BasicToken;
[L14573]              assume DType[msgsender_MSG] != ERC20;
[L14574]              assume DType[msgsender_MSG] != StandardToken;
[L14575]              assume DType[msgsender_MSG] != Ownable;
[L14576]              assume DType[msgsender_MSG] != MintableToken;
[L14577]              assume DType[msgsender_MSG] != FreezableToken;
[L14578]              assume DType[msgsender_MSG] != BurnableToken;
[L14579]              assume DType[msgsender_MSG] != Pausable;
[L14580]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14581]              assume DType[msgsender_MSG] != Consts;
[L14582]              assume DType[msgsender_MSG] != MainToken;
[L14583]              Alloc[msgsender_MSG] := true;
[L14584]  COND FALSE  !(choice == 38)
[L14590]  COND FALSE  !(choice == 37)
[L14596]  COND FALSE  !(choice == 36)
[L14603]  COND FALSE  !(choice == 35)
[L14609]  COND TRUE   choice == 34
[L14610]              gas := gas - 21000;
[L14611]  COND TRUE   gas >= 0
[L14612]              assume _value_s1551 >= 0 && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14613]              assume msgvalue_MSG == 0;
[L14614]  CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((((p1 != _from_s1551 && p1 != _to_s1551) && (p2 != _from_s1551 || p3 != msgsender_MSG)) && _from_s1551 != _to_s1551) && _value_s1551 <= balances_BasicToken[this][_from_s1551]) && _value_s1551 <= allowed_StandardToken[this][_from_s1551][msgsender_MSG]) && balances_BasicToken[this][_to_s1551] + _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _value_s1551 >= 0) && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1551] >= 0) && balances_BasicToken[this][_to_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s1551] >= 0) && balances_BasicToken[this][_from_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_MainToken0 := true;
[L3]                  call_transferFrom_MainToken0 := false;
[L3]                  revert := revert_hold;
[L4740]               havoc __exception;
[L4741]               revert := false;
[L4742]   COND FALSE  !(__exception)
[L4781]   CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L9641]   COND TRUE   !!paused_Pausable[this]
[L9642]               revert := true;
[L4781]   RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L4782]               assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !(((((((((((((_success_s1551 == true && balances_BasicToken[this][_from_s1551] == old(balances_BasicToken[this][_from_s1551]) - _value_s1551) && balances_BasicToken[this][_to_s1551] == old(balances_BasicToken[this][_to_s1551]) + _value_s1551) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] == old(allowed_StandardToken[this][_from_s1551][msgsender_MSG]) - _value_s1551) && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this][p1] == old(balances_BasicToken[this][p1])) && allowed_StandardToken[this][p2][p3] == old(allowed_StandardToken[this][p2][p3])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L3]                  revert := revert_hold;
[L14614]  RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L14842]  RET         call CorralChoice_MainToken(this);

Loop:
[L14842]  CALL        call CorralChoice_MainToken(this);
[L14499]              havoc msgsender_MSG;
[L14500]              havoc msgvalue_MSG;
[L14501]              havoc choice;
[L14502]              havoc __ret_0_totalSupply;
[L14503]              havoc _owner_s729;
[L14504]              havoc balance_s729;
[L14505]              havoc _to_s1572;
[L14506]              havoc _value_s1572;
[L14507]              havoc _success_s1572;
[L14508]              havoc _owner_s395;
[L14509]              havoc _spender_s395;
[L14510]              havoc __ret_0_allowance;
[L14511]              havoc _from_s1551;
[L14512]              havoc _to_s1551;
[L14513]              havoc _value_s1551;
[L14514]              havoc _success_s1551;
[L14515]              havoc _spender_s379;
[L14516]              havoc _value_s379;
[L14517]              havoc __ret_0_approve;
[L14518]              havoc _spender_s437;
[L14519]              havoc _addedValue_s437;
[L14520]              havoc __ret_0_increaseApproval;
[L14521]              havoc _spender_s497;
[L14522]              havoc _subtractedValue_s497;
[L14523]              havoc __ret_0_decreaseApproval;
[L14524]              havoc __ret_0_owner;
[L14525]              havoc _newOwner_s558;
[L14526]              havoc __ret_0_mintingFinished;
[L14527]              havoc _to_s664;
[L14528]              havoc _amount_s664;
[L14529]              havoc __ret_0_mint;
[L14530]              havoc __ret_0_finishMinting;
[L14531]              havoc _owner_s742;
[L14532]              havoc balance_s742;
[L14533]              havoc _owner_s754;
[L14534]              havoc balance_s754;
[L14535]              havoc _addr_s792;
[L14536]              havoc count_s792;
[L14537]              havoc _addr_s849;
[L14538]              havoc _index_s849;
[L14539]              havoc _release_s849;
[L14540]              havoc _balance_s849;
[L14541]              havoc _to_s938;
[L14542]              havoc _amount_s938;
[L14543]              havoc _until_s938;
[L14544]              havoc tokens_s1107;
[L14545]              havoc _value_s1261;
[L14546]              havoc __ret_0_paused;
[L14547]              havoc _to_s1449;
[L14548]              havoc _amount_s1449;
[L14549]              havoc _until_s1449;
[L14550]              havoc __ret_0_mintAndFreeze;
[L14551]              havoc __ret_0_TOKEN_DECIMALS;
[L14552]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14553]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14554]              havoc __ret_0_TOKEN_NAME;
[L14555]              havoc __ret_0_TOKEN_SYMBOL;
[L14556]              havoc __ret_0_PAUSED;
[L14557]              havoc __ret_0_TARGET_USER;
[L14558]              havoc __ret_0_CONTINUE_MINTING;
[L14559]              havoc __ret_0_initialized;
[L14560]              havoc _name_s1511;
[L14561]              havoc _symbol_s1519;
[L14562]              havoc _decimals_s1527;
[L14563]              havoc tmpNow;
[L14564]              havoc gas;
[L14565]              assume gas > 4000000 && gas <= 8000000;
[L14566]              tmpNow := now;
[L14567]              havoc now;
[L14568]              assume now > tmpNow;
[L14569]              assume msgsender_MSG != null;
[L14570]              assume DType[msgsender_MSG] != ERC20Basic;
[L14571]              assume DType[msgsender_MSG] != SafeMath;
[L14572]              assume DType[msgsender_MSG] != BasicToken;
[L14573]              assume DType[msgsender_MSG] != ERC20;
[L14574]              assume DType[msgsender_MSG] != StandardToken;
[L14575]              assume DType[msgsender_MSG] != Ownable;
[L14576]              assume DType[msgsender_MSG] != MintableToken;
[L14577]              assume DType[msgsender_MSG] != FreezableToken;
[L14578]              assume DType[msgsender_MSG] != BurnableToken;
[L14579]              assume DType[msgsender_MSG] != Pausable;
[L14580]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14581]              assume DType[msgsender_MSG] != Consts;
[L14582]              assume DType[msgsender_MSG] != MainToken;
[L14583]              Alloc[msgsender_MSG] := true;
[L14584]  COND FALSE  !(choice == 38)
[L14590]  COND FALSE  !(choice == 37)
[L14596]  COND FALSE  !(choice == 36)
[L14603]  COND FALSE  !(choice == 35)
[L14609]  COND TRUE   choice == 34
[L14610]              gas := gas - 21000;
[L14611]  COND TRUE   gas >= 0
[L14612]              assume _value_s1551 >= 0 && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14613]              assume msgvalue_MSG == 0;
[L14614]  CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((((p1 != _from_s1551 && p1 != _to_s1551) && (p2 != _from_s1551 || p3 != msgsender_MSG)) && _from_s1551 != _to_s1551) && _value_s1551 <= balances_BasicToken[this][_from_s1551]) && _value_s1551 <= allowed_StandardToken[this][_from_s1551][msgsender_MSG]) && balances_BasicToken[this][_to_s1551] + _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _value_s1551 >= 0) && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1551] >= 0) && balances_BasicToken[this][_to_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s1551] >= 0) && balances_BasicToken[this][_from_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_MainToken0 := true;
[L3]                  call_transferFrom_MainToken0 := false;
[L3]                  revert := revert_hold;
[L4740]               havoc __exception;
[L4741]               revert := false;
[L4742]   COND FALSE  !(__exception)
[L4781]   CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L9641]   COND TRUE   !!paused_Pausable[this]
[L9642]               revert := true;
[L4781]   RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L4782]               assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !(((((((((((((_success_s1551 == true && balances_BasicToken[this][_from_s1551] == old(balances_BasicToken[this][_from_s1551]) - _value_s1551) && balances_BasicToken[this][_to_s1551] == old(balances_BasicToken[this][_to_s1551]) + _value_s1551) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] == old(allowed_StandardToken[this][_from_s1551][msgsender_MSG]) - _value_s1551) && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this][p1] == old(balances_BasicToken[this][p1])) && allowed_StandardToken[this][p2][p3] == old(allowed_StandardToken[this][p2][p3])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L3]                  revert := revert_hold;
[L14614]  RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L14842]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:22:22,031 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:22:22,031 INFO  L82        PathProgramCache]: Analyzing trace with hash 13066133, now seen corresponding path program 1 times
[2020-11-24 21:22:22,032 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:22:22,069 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:22:22,652 INFO  L134       CoverageAnalysis]: Checked inductivity of 9823 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 9823 trivial. 0 not checked.
[2020-11-24 21:22:22,652 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:22:22,652 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-24 21:22:22,653 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:22:22,653 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-24 21:22:22,653 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-24 21:22:22,654 INFO  L87              Difference]: Start difference. First operand 8685 states and 9826 transitions. cyclomatic complexity: 1161 Second operand 3 states.
[2020-11-24 21:22:22,783 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:22:22,783 INFO  L93              Difference]: Finished difference Result 9767 states and 11014 transitions.
[2020-11-24 21:22:22,783 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-24 21:22:22,783 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9767 states and 11014 transitions.
[2020-11-24 21:22:22,806 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 21:22:22,841 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9767 states to 9419 states and 10606 transitions.
[2020-11-24 21:22:22,841 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2166
[2020-11-24 21:22:22,842 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2195
[2020-11-24 21:22:22,843 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9419 states and 10606 transitions.
[2020-11-24 21:22:22,853 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:22:22,853 INFO  L728         BuchiCegarLoop]: Abstraction has 9419 states and 10606 transitions.
[2020-11-24 21:22:22,864 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9419 states and 10606 transitions.
[2020-11-24 21:22:22,942 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9419 to 8439.
[2020-11-24 21:22:22,942 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8439 states.
[2020-11-24 21:22:22,951 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8439 states to 8439 states and 9362 transitions.
[2020-11-24 21:22:22,952 INFO  L751         BuchiCegarLoop]: Abstraction has 8439 states and 9362 transitions.
[2020-11-24 21:22:22,952 INFO  L631         BuchiCegarLoop]: Abstraction has 8439 states and 9362 transitions.
[2020-11-24 21:22:22,952 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-24 21:22:22,952 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8439 states and 9362 transitions.
[2020-11-24 21:22:22,962 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:22:22,963 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:22:22,963 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:22:22,967 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:22:22,967 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transferFrom_MainToken0 := false;
[L3]                  call_transferFrom_MainToken0 := false;
[L3]      CALL        call main();
[L3]                  havoc p3;
[L3]                  havoc p2;
[L3]                  havoc p1;
[L14832]              assume null == 0;
[L14833]  CALL        call this := FreshRefGenerator__success();
[L6722]               havoc newRef;
[L6723]               assume Alloc[newRef] == false;
[L6724]               Alloc[newRef] := true;
[L6725]               assume newRef != null;
[L14833]  RET         call this := FreshRefGenerator__success();
[L14834]              assume now >= 0;
[L14835]              assume DType[this] == MainToken;
[L14836]              assume msgvalue_MSG == 0;
[L14837]              gas := gas - 53000;
[L14838]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4392]               havoc __exception;
[L4393]               revert := false;
[L4394]   COND FALSE  !(__exception)
[L4433]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9531]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9333]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9309]               assume msgsender_MSG != null;
[L9310]               Balance[this] := 0;
[L9311]               TOKEN_DECIMALS_Consts[this] := 18;
[L9312]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9313]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9314]               TOKEN_NAME_Consts[this] := -1142012261;
[L9315]               TOKEN_SYMBOL_Consts[this] := 360831912;
[L9316]               PAUSED_Consts[this] := false;
[L9317]               __var_52 := ConstantToRef(687691456480424918299425112376782193233251990427);
[L9318]               TARGET_USER_Consts[this] := ConstantToRef(687691456480424918299425112376782193233251990427);
[L9319]               CONTINUE_MINTING_Consts[this] := true;
[L9333]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9334]   COND FALSE  !(revert)
[L9531]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9532]   COND FALSE  !(revert)
[L9535]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L9535]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9536]   COND FALSE  !(revert)
[L9539]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7020]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]               assume msgsender_MSG != null;
[L7002]               Balance[this] := 0;
[L7024]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L9539]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9540]   COND FALSE  !(revert)
[L9543]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6891]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6892]   COND FALSE  !(revert)
[L6895]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6869]               assume msgsender_MSG != null;
[L6870]               Balance[this] := 0;
[L6871]               balances_BasicToken[this] := zeroRefintArr();
[L6872]               sum_balances0[this] := 0;
[L6873]               totalSupply__BasicToken[this] := 0;
[L6895]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6896]   COND FALSE  !(revert)
[L9543]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9544]   COND FALSE  !(revert)
[L9547]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7072]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7073]   COND FALSE  !(revert)
[L7076]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7020]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]               assume msgsender_MSG != null;
[L7002]               Balance[this] := 0;
[L7024]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7076]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7077]   COND FALSE  !(revert)
[L7080]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6891]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6892]   COND FALSE  !(revert)
[L6895]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6869]               assume msgsender_MSG != null;
[L6870]               Balance[this] := 0;
[L6871]               balances_BasicToken[this] := zeroRefintArr();
[L6872]               sum_balances0[this] := 0;
[L6873]               totalSupply__BasicToken[this] := 0;
[L6895]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6896]   COND FALSE  !(revert)
[L7080]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7081]   COND FALSE  !(revert)
[L7084]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7043]               assume msgsender_MSG != null;
[L7044]               Balance[this] := 0;
[L7045]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7046]               sum_allowed1[this] := 0;
[L7084]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7085]   COND FALSE  !(revert)
[L9547]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9548]   COND FALSE  !(revert)
[L9551]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7679]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7680]   COND FALSE  !(revert)
[L7683]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7020]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]               assume msgsender_MSG != null;
[L7002]               Balance[this] := 0;
[L7024]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7683]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7684]   COND FALSE  !(revert)
[L7687]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6891]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6892]   COND FALSE  !(revert)
[L6895]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6869]               assume msgsender_MSG != null;
[L6870]               Balance[this] := 0;
[L6871]               balances_BasicToken[this] := zeroRefintArr();
[L6872]               sum_balances0[this] := 0;
[L6873]               totalSupply__BasicToken[this] := 0;
[L6895]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6896]   COND FALSE  !(revert)
[L7687]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7688]   COND FALSE  !(revert)
[L7691]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7072]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7073]   COND FALSE  !(revert)
[L7076]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7020]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]               assume msgsender_MSG != null;
[L7002]               Balance[this] := 0;
[L7024]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7076]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7077]   COND FALSE  !(revert)
[L7080]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6891]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6892]   COND FALSE  !(revert)
[L6895]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6869]               assume msgsender_MSG != null;
[L6870]               Balance[this] := 0;
[L6871]               balances_BasicToken[this] := zeroRefintArr();
[L6872]               sum_balances0[this] := 0;
[L6873]               totalSupply__BasicToken[this] := 0;
[L6895]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6896]   COND FALSE  !(revert)
[L7080]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7081]   COND FALSE  !(revert)
[L7084]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7043]               assume msgsender_MSG != null;
[L7044]               Balance[this] := 0;
[L7045]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7046]               sum_allowed1[this] := 0;
[L7084]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7085]   COND FALSE  !(revert)
[L7691]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7692]   COND FALSE  !(revert)
[L7695]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7642]               assume msgsender_MSG != null;
[L7643]               Balance[this] := 0;
[L7644]               chains_FreezableToken[this] := zerointintArr();
[L7645]               sum_chains2[this] := 0;
[L7646]               freezings_FreezableToken[this] := zerointintArr();
[L7647]               sum_freezings3[this] := 0;
[L7648]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7649]               sum_freezingBalance4[this] := 0;
[L7695]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7696]   COND FALSE  !(revert)
[L9551]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9552]   COND FALSE  !(revert)
[L9555]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7297]               assume msgsender_MSG != null;
[L7298]               Balance[this] := 0;
[L7299]               owner_Ownable[this] := null;
[L7301]               owner_Ownable[this] := msgsender_MSG;
[L7314]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7315]   COND FALSE  !(revert)
[L9555]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9556]   COND FALSE  !(revert)
[L9559]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7498]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7499]   COND FALSE  !(revert)
[L7502]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7020]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]               assume msgsender_MSG != null;
[L7002]               Balance[this] := 0;
[L7024]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7502]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7503]   COND FALSE  !(revert)
[L7506]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6891]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6892]   COND FALSE  !(revert)
[L6895]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6869]               assume msgsender_MSG != null;
[L6870]               Balance[this] := 0;
[L6871]               balances_BasicToken[this] := zeroRefintArr();
[L6872]               sum_balances0[this] := 0;
[L6873]               totalSupply__BasicToken[this] := 0;
[L6895]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6896]   COND FALSE  !(revert)
[L7506]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7507]   COND FALSE  !(revert)
[L7510]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7072]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7073]   COND FALSE  !(revert)
[L7076]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7020]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]               assume msgsender_MSG != null;
[L7002]               Balance[this] := 0;
[L7024]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7076]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7077]   COND FALSE  !(revert)
[L7080]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6891]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6892]   COND FALSE  !(revert)
[L6895]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6869]               assume msgsender_MSG != null;
[L6870]               Balance[this] := 0;
[L6871]               balances_BasicToken[this] := zeroRefintArr();
[L6872]               sum_balances0[this] := 0;
[L6873]               totalSupply__BasicToken[this] := 0;
[L6895]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6896]   COND FALSE  !(revert)
[L7080]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7081]   COND FALSE  !(revert)
[L7084]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7043]               assume msgsender_MSG != null;
[L7044]               Balance[this] := 0;
[L7045]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7046]               sum_allowed1[this] := 0;
[L7084]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7085]   COND FALSE  !(revert)
[L7510]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7511]   COND FALSE  !(revert)
[L7514]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7297]               assume msgsender_MSG != null;
[L7298]               Balance[this] := 0;
[L7299]               owner_Ownable[this] := null;
[L7301]               owner_Ownable[this] := msgsender_MSG;
[L7314]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7315]   COND FALSE  !(revert)
[L7514]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7515]   COND FALSE  !(revert)
[L7518]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]               assume msgsender_MSG != null;
[L7463]               Balance[this] := 0;
[L7464]               mintingFinished_MintableToken[this] := false;
[L7518]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7519]   COND FALSE  !(revert)
[L9559]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9560]   COND FALSE  !(revert)
[L9563]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9118]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L9118]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9119]   COND FALSE  !(revert)
[L9122]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7020]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]               assume msgsender_MSG != null;
[L7002]               Balance[this] := 0;
[L7024]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L9122]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9123]   COND FALSE  !(revert)
[L9126]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6891]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6892]   COND FALSE  !(revert)
[L6895]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6869]               assume msgsender_MSG != null;
[L6870]               Balance[this] := 0;
[L6871]               balances_BasicToken[this] := zeroRefintArr();
[L6872]               sum_balances0[this] := 0;
[L6873]               totalSupply__BasicToken[this] := 0;
[L6895]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6896]   COND FALSE  !(revert)
[L9126]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9127]   COND FALSE  !(revert)
[L9130]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7072]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7073]   COND FALSE  !(revert)
[L7076]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7020]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]               assume msgsender_MSG != null;
[L7002]               Balance[this] := 0;
[L7024]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7076]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7077]   COND FALSE  !(revert)
[L7080]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6891]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6892]   COND FALSE  !(revert)
[L6895]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6869]               assume msgsender_MSG != null;
[L6870]               Balance[this] := 0;
[L6871]               balances_BasicToken[this] := zeroRefintArr();
[L6872]               sum_balances0[this] := 0;
[L6873]               totalSupply__BasicToken[this] := 0;
[L6895]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6896]   COND FALSE  !(revert)
[L7080]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7081]   COND FALSE  !(revert)
[L7084]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7043]               assume msgsender_MSG != null;
[L7044]               Balance[this] := 0;
[L7045]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7046]               sum_allowed1[this] := 0;
[L7084]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7085]   COND FALSE  !(revert)
[L9130]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9131]   COND FALSE  !(revert)
[L9134]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7679]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7680]   COND FALSE  !(revert)
[L7683]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7020]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]               assume msgsender_MSG != null;
[L7002]               Balance[this] := 0;
[L7024]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7683]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7684]   COND FALSE  !(revert)
[L7687]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6891]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6892]   COND FALSE  !(revert)
[L6895]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6869]               assume msgsender_MSG != null;
[L6870]               Balance[this] := 0;
[L6871]               balances_BasicToken[this] := zeroRefintArr();
[L6872]               sum_balances0[this] := 0;
[L6873]               totalSupply__BasicToken[this] := 0;
[L6895]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6896]   COND FALSE  !(revert)
[L7687]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7688]   COND FALSE  !(revert)
[L7691]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7072]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7073]   COND FALSE  !(revert)
[L7076]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7020]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]               assume msgsender_MSG != null;
[L7002]               Balance[this] := 0;
[L7024]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7076]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7077]   COND FALSE  !(revert)
[L7080]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6891]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6892]   COND FALSE  !(revert)
[L6895]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6869]               assume msgsender_MSG != null;
[L6870]               Balance[this] := 0;
[L6871]               balances_BasicToken[this] := zeroRefintArr();
[L6872]               sum_balances0[this] := 0;
[L6873]               totalSupply__BasicToken[this] := 0;
[L6895]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6896]   COND FALSE  !(revert)
[L7080]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7081]   COND FALSE  !(revert)
[L7084]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7043]               assume msgsender_MSG != null;
[L7044]               Balance[this] := 0;
[L7045]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7046]               sum_allowed1[this] := 0;
[L7084]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7085]   COND FALSE  !(revert)
[L7691]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7692]   COND FALSE  !(revert)
[L7695]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7642]               assume msgsender_MSG != null;
[L7643]               Balance[this] := 0;
[L7644]               chains_FreezableToken[this] := zerointintArr();
[L7645]               sum_chains2[this] := 0;
[L7646]               freezings_FreezableToken[this] := zerointintArr();
[L7647]               sum_freezings3[this] := 0;
[L7648]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7649]               sum_freezingBalance4[this] := 0;
[L7695]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7696]   COND FALSE  !(revert)
[L9134]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9135]   COND FALSE  !(revert)
[L9138]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7297]               assume msgsender_MSG != null;
[L7298]               Balance[this] := 0;
[L7299]               owner_Ownable[this] := null;
[L7301]               owner_Ownable[this] := msgsender_MSG;
[L7314]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7315]   COND FALSE  !(revert)
[L9138]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9139]   COND FALSE  !(revert)
[L9142]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7498]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7499]   COND FALSE  !(revert)
[L7502]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7020]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]               assume msgsender_MSG != null;
[L7002]               Balance[this] := 0;
[L7024]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7502]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7503]   COND FALSE  !(revert)
[L7506]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6891]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6892]   COND FALSE  !(revert)
[L6895]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6869]               assume msgsender_MSG != null;
[L6870]               Balance[this] := 0;
[L6871]               balances_BasicToken[this] := zeroRefintArr();
[L6872]               sum_balances0[this] := 0;
[L6873]               totalSupply__BasicToken[this] := 0;
[L6895]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6896]   COND FALSE  !(revert)
[L7506]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7507]   COND FALSE  !(revert)
[L7510]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7072]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7073]   COND FALSE  !(revert)
[L7076]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7020]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]               assume msgsender_MSG != null;
[L7002]               Balance[this] := 0;
[L7024]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7076]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7077]   COND FALSE  !(revert)
[L7080]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6891]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6892]   COND FALSE  !(revert)
[L6895]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6869]               assume msgsender_MSG != null;
[L6870]               Balance[this] := 0;
[L6871]               balances_BasicToken[this] := zeroRefintArr();
[L6872]               sum_balances0[this] := 0;
[L6873]               totalSupply__BasicToken[this] := 0;
[L6895]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6896]   COND FALSE  !(revert)
[L7080]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7081]   COND FALSE  !(revert)
[L7084]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7043]               assume msgsender_MSG != null;
[L7044]               Balance[this] := 0;
[L7045]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7046]               sum_allowed1[this] := 0;
[L7084]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7085]   COND FALSE  !(revert)
[L7510]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7511]   COND FALSE  !(revert)
[L7514]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7297]               assume msgsender_MSG != null;
[L7298]               Balance[this] := 0;
[L7299]               owner_Ownable[this] := null;
[L7301]               owner_Ownable[this] := msgsender_MSG;
[L7314]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7315]   COND FALSE  !(revert)
[L7514]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7515]   COND FALSE  !(revert)
[L7518]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]               assume msgsender_MSG != null;
[L7463]               Balance[this] := 0;
[L7464]               mintingFinished_MintableToken[this] := false;
[L7518]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7519]   COND FALSE  !(revert)
[L9142]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9143]   COND FALSE  !(revert)
[L9146]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9075]               assume msgsender_MSG != null;
[L9076]               Balance[this] := 0;
[L9146]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9147]   COND FALSE  !(revert)
[L9563]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9564]   COND FALSE  !(revert)
[L9567]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8862]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L8862]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8863]   COND FALSE  !(revert)
[L8866]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6891]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6892]   COND FALSE  !(revert)
[L6895]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6869]               assume msgsender_MSG != null;
[L6870]               Balance[this] := 0;
[L6871]               balances_BasicToken[this] := zeroRefintArr();
[L6872]               sum_balances0[this] := 0;
[L6873]               totalSupply__BasicToken[this] := 0;
[L6895]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6896]   COND FALSE  !(revert)
[L8866]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8867]   COND FALSE  !(revert)
[L8870]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8839]               assume msgsender_MSG != null;
[L8840]               Balance[this] := 0;
[L8870]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8871]   COND FALSE  !(revert)
[L9567]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9568]   COND FALSE  !(revert)
[L9571]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8988]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7297]               assume msgsender_MSG != null;
[L7298]               Balance[this] := 0;
[L7299]               owner_Ownable[this] := null;
[L7301]               owner_Ownable[this] := msgsender_MSG;
[L7314]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7315]   COND FALSE  !(revert)
[L8988]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8989]   COND FALSE  !(revert)
[L8992]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8968]               assume msgsender_MSG != null;
[L8969]               Balance[this] := 0;
[L8970]               paused_Pausable[this] := false;
[L8992]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8993]   COND FALSE  !(revert)
[L9571]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9572]   COND FALSE  !(revert)
[L9575]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9459]               assume msgsender_MSG != null;
[L9460]               Balance[this] := 0;
[L9461]               initialized_MainToken[this] := false;
[L9463]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9802]   COND FALSE  !(!!initialized_MainToken[this])
[L9806]               initialized_MainToken[this] := true;
[L9807]   COND FALSE  !(PAUSED_Consts[this])
[L9817]               havoc addresses_s1709;
[L9818]               __var_57 := ConstantToRef(389942227696498629531603431436390714308169371997);
[L9819]               M_int_Ref[addresses_s1709][0] := __var_57;
[L9820]               __var_58 := ConstantToRef(389942227696498629531603431436390714308169371997);
[L9821]               M_int_Ref[addresses_s1709][1] := __var_58;
[L9822]               havoc amounts_s1709;
[L9823]               __var_59 := 48000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9824]               sum[amounts_s1709] := sum[amounts_s1709] - M_int_int[amounts_s1709][0];
[L9825]               M_int_int[amounts_s1709][0] := __var_59;
[L9826]               sum[amounts_s1709] := sum[amounts_s1709] + M_int_int[amounts_s1709][0];
[L9827]               __var_60 := 6000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9828]               sum[amounts_s1709] := sum[amounts_s1709] - M_int_int[amounts_s1709][1];
[L9829]               M_int_int[amounts_s1709][1] := __var_60;
[L9830]               sum[amounts_s1709] := sum[amounts_s1709] + M_int_int[amounts_s1709][1];
[L9831]               havoc freezes_s1709;
[L9832]               __var_61 := 0 % 18446744073709551616;
[L9833]               sum[freezes_s1709] := sum[freezes_s1709] - M_int_int[freezes_s1709][0];
[L9834]               M_int_int[freezes_s1709][0] := __var_61;
[L9835]               sum[freezes_s1709] := sum[freezes_s1709] + M_int_int[freezes_s1709][0];
[L9836]               __var_62 := 0 % 18446744073709551616;
[L9837]               sum[freezes_s1709] := sum[freezes_s1709] - M_int_int[freezes_s1709][1];
[L9838]               M_int_int[freezes_s1709][1] := __var_62;
[L9839]               sum[freezes_s1709] := sum[freezes_s1709] + M_int_int[freezes_s1709][1];
[L9840]               i_s1709 := 0;
[L9841]   COND FALSE  !(i_s1709 < Length[addresses_s1709])
[L9865]   COND FALSE  !(!CONTINUE_MINTING_Consts[this])
[L9875]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9463]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9464]   COND FALSE  !(revert)
[L9467]   COND TRUE   DType[this] == MainToken
[L9468]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7381]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12786]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7381]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7382]   COND FALSE  !(revert)
[L7385]   COND TRUE   DType[this] == MainToken
[L7386]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7429]               __var_11 := null;
[L7430]   COND FALSE  !(!(_newOwner_s581 != null))
[L7434]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7435]               owner_Ownable[this] := _newOwner_s581;
[L7386]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7387]   COND FALSE  !(revert)
[L9468]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9469]   COND FALSE  !(revert)
[L9575]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9576]   COND FALSE  !(revert)
[L4433]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4434]               assume !revert && gas >= 0;
[L14838]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14839]              assume !revert && gas >= 0;
[L14842]  CALL        call CorralChoice_MainToken(this);
[L14499]              havoc msgsender_MSG;
[L14500]              havoc msgvalue_MSG;
[L14501]              havoc choice;
[L14502]              havoc __ret_0_totalSupply;
[L14503]              havoc _owner_s729;
[L14504]              havoc balance_s729;
[L14505]              havoc _to_s1572;
[L14506]              havoc _value_s1572;
[L14507]              havoc _success_s1572;
[L14508]              havoc _owner_s395;
[L14509]              havoc _spender_s395;
[L14510]              havoc __ret_0_allowance;
[L14511]              havoc _from_s1551;
[L14512]              havoc _to_s1551;
[L14513]              havoc _value_s1551;
[L14514]              havoc _success_s1551;
[L14515]              havoc _spender_s379;
[L14516]              havoc _value_s379;
[L14517]              havoc __ret_0_approve;
[L14518]              havoc _spender_s437;
[L14519]              havoc _addedValue_s437;
[L14520]              havoc __ret_0_increaseApproval;
[L14521]              havoc _spender_s497;
[L14522]              havoc _subtractedValue_s497;
[L14523]              havoc __ret_0_decreaseApproval;
[L14524]              havoc __ret_0_owner;
[L14525]              havoc _newOwner_s558;
[L14526]              havoc __ret_0_mintingFinished;
[L14527]              havoc _to_s664;
[L14528]              havoc _amount_s664;
[L14529]              havoc __ret_0_mint;
[L14530]              havoc __ret_0_finishMinting;
[L14531]              havoc _owner_s742;
[L14532]              havoc balance_s742;
[L14533]              havoc _owner_s754;
[L14534]              havoc balance_s754;
[L14535]              havoc _addr_s792;
[L14536]              havoc count_s792;
[L14537]              havoc _addr_s849;
[L14538]              havoc _index_s849;
[L14539]              havoc _release_s849;
[L14540]              havoc _balance_s849;
[L14541]              havoc _to_s938;
[L14542]              havoc _amount_s938;
[L14543]              havoc _until_s938;
[L14544]              havoc tokens_s1107;
[L14545]              havoc _value_s1261;
[L14546]              havoc __ret_0_paused;
[L14547]              havoc _to_s1449;
[L14548]              havoc _amount_s1449;
[L14549]              havoc _until_s1449;
[L14550]              havoc __ret_0_mintAndFreeze;
[L14551]              havoc __ret_0_TOKEN_DECIMALS;
[L14552]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14553]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14554]              havoc __ret_0_TOKEN_NAME;
[L14555]              havoc __ret_0_TOKEN_SYMBOL;
[L14556]              havoc __ret_0_PAUSED;
[L14557]              havoc __ret_0_TARGET_USER;
[L14558]              havoc __ret_0_CONTINUE_MINTING;
[L14559]              havoc __ret_0_initialized;
[L14560]              havoc _name_s1511;
[L14561]              havoc _symbol_s1519;
[L14562]              havoc _decimals_s1527;
[L14563]              havoc tmpNow;
[L14564]              havoc gas;
[L14565]              assume gas > 4000000 && gas <= 8000000;
[L14566]              tmpNow := now;
[L14567]              havoc now;
[L14568]              assume now > tmpNow;
[L14569]              assume msgsender_MSG != null;
[L14570]              assume DType[msgsender_MSG] != ERC20Basic;
[L14571]              assume DType[msgsender_MSG] != SafeMath;
[L14572]              assume DType[msgsender_MSG] != BasicToken;
[L14573]              assume DType[msgsender_MSG] != ERC20;
[L14574]              assume DType[msgsender_MSG] != StandardToken;
[L14575]              assume DType[msgsender_MSG] != Ownable;
[L14576]              assume DType[msgsender_MSG] != MintableToken;
[L14577]              assume DType[msgsender_MSG] != FreezableToken;
[L14578]              assume DType[msgsender_MSG] != BurnableToken;
[L14579]              assume DType[msgsender_MSG] != Pausable;
[L14580]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14581]              assume DType[msgsender_MSG] != Consts;
[L14582]              assume DType[msgsender_MSG] != MainToken;
[L14583]              Alloc[msgsender_MSG] := true;
[L14584]  COND FALSE  !(choice == 38)
[L14590]  COND FALSE  !(choice == 37)
[L14596]  COND FALSE  !(choice == 36)
[L14603]  COND FALSE  !(choice == 35)
[L14609]  COND TRUE   choice == 34
[L14610]              gas := gas - 21000;
[L14611]  COND TRUE   gas >= 0
[L14612]              assume _value_s1551 >= 0 && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14613]              assume msgvalue_MSG == 0;
[L14614]  CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((((p1 != _from_s1551 && p1 != _to_s1551) && (p2 != _from_s1551 || p3 != msgsender_MSG)) && _from_s1551 != _to_s1551) && _value_s1551 <= balances_BasicToken[this][_from_s1551]) && _value_s1551 <= allowed_StandardToken[this][_from_s1551][msgsender_MSG]) && balances_BasicToken[this][_to_s1551] + _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _value_s1551 >= 0) && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1551] >= 0) && balances_BasicToken[this][_to_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s1551] >= 0) && balances_BasicToken[this][_from_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_MainToken0 := true;
[L3]                  call_transferFrom_MainToken0 := false;
[L3]                  revert := revert_hold;
[L4740]               havoc __exception;
[L4741]               revert := false;
[L4742]   COND TRUE   __exception
[L4743]               __tmp__Balance := Balance;
[L4744]               __tmp__DType := DType;
[L4745]               __tmp__Alloc := Alloc;
[L4746]               __tmp__balance_ADDR := balance_ADDR;
[L4747]               __tmp__M_Ref_int := M_Ref_int;
[L4748]               __tmp__sum_balances0 := sum_balances0;
[L4749]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L4750]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L4751]               __tmp__sum_allowed1 := sum_allowed1;
[L4752]               __tmp__M_int_int := M_int_int;
[L4753]               __tmp__sum_chains2 := sum_chains2;
[L4754]               __tmp__sum_freezings3 := sum_freezings3;
[L4755]               __tmp__sum_freezingBalance4 := sum_freezingBalance4;
[L4756]               __tmp__M_int_Ref := M_int_Ref;
[L4757]               __tmp__sum := sum;
[L4758]               __tmp__Length := Length;
[L4759]               __tmp__now := now;
[L4760]               __tmp__balances_BasicToken := balances_BasicToken;
[L4761]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L4762]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L4763]               __tmp__owner_Ownable := owner_Ownable;
[L4764]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L4765]               __tmp__chains_FreezableToken := chains_FreezableToken;
[L4766]               __tmp__freezings_FreezableToken := freezings_FreezableToken;
[L4767]               __tmp__freezingBalance_FreezableToken := freezingBalance_FreezableToken;
[L4768]               __tmp__paused_Pausable := paused_Pausable;
[L4769]               __tmp__TOKEN_DECIMALS_Consts := TOKEN_DECIMALS_Consts;
[L4770]               __tmp__TOKEN_DECIMALS_UINT8_Consts := TOKEN_DECIMALS_UINT8_Consts;
[L4771]               __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts := TOKEN_DECIMAL_MULTIPLIER_Consts;
[L4772]               __tmp__TOKEN_NAME_Consts := TOKEN_NAME_Consts;
[L4773]               __tmp__TOKEN_SYMBOL_Consts := TOKEN_SYMBOL_Consts;
[L4774]               __tmp__PAUSED_Consts := PAUSED_Consts;
[L4775]               __tmp__TARGET_USER_Consts := TARGET_USER_Consts;
[L4776]               __tmp__CONTINUE_MINTING_Consts := CONTINUE_MINTING_Consts;
[L4777]               __tmp__initialized_MainToken := initialized_MainToken;
[L4778]   CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L9621]   COND TRUE   !!__tmp__paused_Pausable[this]
[L9622]               revert := true;
[L4778]   RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L4779]               assume revert || gas < 0;
[L14614]  RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L14842]  RET         call CorralChoice_MainToken(this);

Loop:
[L14842]  CALL        call CorralChoice_MainToken(this);
[L14499]              havoc msgsender_MSG;
[L14500]              havoc msgvalue_MSG;
[L14501]              havoc choice;
[L14502]              havoc __ret_0_totalSupply;
[L14503]              havoc _owner_s729;
[L14504]              havoc balance_s729;
[L14505]              havoc _to_s1572;
[L14506]              havoc _value_s1572;
[L14507]              havoc _success_s1572;
[L14508]              havoc _owner_s395;
[L14509]              havoc _spender_s395;
[L14510]              havoc __ret_0_allowance;
[L14511]              havoc _from_s1551;
[L14512]              havoc _to_s1551;
[L14513]              havoc _value_s1551;
[L14514]              havoc _success_s1551;
[L14515]              havoc _spender_s379;
[L14516]              havoc _value_s379;
[L14517]              havoc __ret_0_approve;
[L14518]              havoc _spender_s437;
[L14519]              havoc _addedValue_s437;
[L14520]              havoc __ret_0_increaseApproval;
[L14521]              havoc _spender_s497;
[L14522]              havoc _subtractedValue_s497;
[L14523]              havoc __ret_0_decreaseApproval;
[L14524]              havoc __ret_0_owner;
[L14525]              havoc _newOwner_s558;
[L14526]              havoc __ret_0_mintingFinished;
[L14527]              havoc _to_s664;
[L14528]              havoc _amount_s664;
[L14529]              havoc __ret_0_mint;
[L14530]              havoc __ret_0_finishMinting;
[L14531]              havoc _owner_s742;
[L14532]              havoc balance_s742;
[L14533]              havoc _owner_s754;
[L14534]              havoc balance_s754;
[L14535]              havoc _addr_s792;
[L14536]              havoc count_s792;
[L14537]              havoc _addr_s849;
[L14538]              havoc _index_s849;
[L14539]              havoc _release_s849;
[L14540]              havoc _balance_s849;
[L14541]              havoc _to_s938;
[L14542]              havoc _amount_s938;
[L14543]              havoc _until_s938;
[L14544]              havoc tokens_s1107;
[L14545]              havoc _value_s1261;
[L14546]              havoc __ret_0_paused;
[L14547]              havoc _to_s1449;
[L14548]              havoc _amount_s1449;
[L14549]              havoc _until_s1449;
[L14550]              havoc __ret_0_mintAndFreeze;
[L14551]              havoc __ret_0_TOKEN_DECIMALS;
[L14552]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14553]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14554]              havoc __ret_0_TOKEN_NAME;
[L14555]              havoc __ret_0_TOKEN_SYMBOL;
[L14556]              havoc __ret_0_PAUSED;
[L14557]              havoc __ret_0_TARGET_USER;
[L14558]              havoc __ret_0_CONTINUE_MINTING;
[L14559]              havoc __ret_0_initialized;
[L14560]              havoc _name_s1511;
[L14561]              havoc _symbol_s1519;
[L14562]              havoc _decimals_s1527;
[L14563]              havoc tmpNow;
[L14564]              havoc gas;
[L14565]              assume gas > 4000000 && gas <= 8000000;
[L14566]              tmpNow := now;
[L14567]              havoc now;
[L14568]              assume now > tmpNow;
[L14569]              assume msgsender_MSG != null;
[L14570]              assume DType[msgsender_MSG] != ERC20Basic;
[L14571]              assume DType[msgsender_MSG] != SafeMath;
[L14572]              assume DType[msgsender_MSG] != BasicToken;
[L14573]              assume DType[msgsender_MSG] != ERC20;
[L14574]              assume DType[msgsender_MSG] != StandardToken;
[L14575]              assume DType[msgsender_MSG] != Ownable;
[L14576]              assume DType[msgsender_MSG] != MintableToken;
[L14577]              assume DType[msgsender_MSG] != FreezableToken;
[L14578]              assume DType[msgsender_MSG] != BurnableToken;
[L14579]              assume DType[msgsender_MSG] != Pausable;
[L14580]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14581]              assume DType[msgsender_MSG] != Consts;
[L14582]              assume DType[msgsender_MSG] != MainToken;
[L14583]              Alloc[msgsender_MSG] := true;
[L14584]  COND FALSE  !(choice == 38)
[L14590]  COND FALSE  !(choice == 37)
[L14596]  COND FALSE  !(choice == 36)
[L14603]  COND FALSE  !(choice == 35)
[L14609]  COND TRUE   choice == 34
[L14610]              gas := gas - 21000;
[L14611]  COND TRUE   gas >= 0
[L14612]              assume _value_s1551 >= 0 && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14613]              assume msgvalue_MSG == 0;
[L14614]  CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((((p1 != _from_s1551 && p1 != _to_s1551) && (p2 != _from_s1551 || p3 != msgsender_MSG)) && _from_s1551 != _to_s1551) && _value_s1551 <= balances_BasicToken[this][_from_s1551]) && _value_s1551 <= allowed_StandardToken[this][_from_s1551][msgsender_MSG]) && balances_BasicToken[this][_to_s1551] + _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _value_s1551 >= 0) && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1551] >= 0) && balances_BasicToken[this][_to_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s1551] >= 0) && balances_BasicToken[this][_from_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_MainToken0 := true;
[L3]                  call_transferFrom_MainToken0 := false;
[L3]                  revert := revert_hold;
[L4740]               havoc __exception;
[L4741]               revert := false;
[L4742]   COND TRUE   __exception
[L4743]               __tmp__Balance := Balance;
[L4744]               __tmp__DType := DType;
[L4745]               __tmp__Alloc := Alloc;
[L4746]               __tmp__balance_ADDR := balance_ADDR;
[L4747]               __tmp__M_Ref_int := M_Ref_int;
[L4748]               __tmp__sum_balances0 := sum_balances0;
[L4749]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L4750]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L4751]               __tmp__sum_allowed1 := sum_allowed1;
[L4752]               __tmp__M_int_int := M_int_int;
[L4753]               __tmp__sum_chains2 := sum_chains2;
[L4754]               __tmp__sum_freezings3 := sum_freezings3;
[L4755]               __tmp__sum_freezingBalance4 := sum_freezingBalance4;
[L4756]               __tmp__M_int_Ref := M_int_Ref;
[L4757]               __tmp__sum := sum;
[L4758]               __tmp__Length := Length;
[L4759]               __tmp__now := now;
[L4760]               __tmp__balances_BasicToken := balances_BasicToken;
[L4761]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L4762]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L4763]               __tmp__owner_Ownable := owner_Ownable;
[L4764]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L4765]               __tmp__chains_FreezableToken := chains_FreezableToken;
[L4766]               __tmp__freezings_FreezableToken := freezings_FreezableToken;
[L4767]               __tmp__freezingBalance_FreezableToken := freezingBalance_FreezableToken;
[L4768]               __tmp__paused_Pausable := paused_Pausable;
[L4769]               __tmp__TOKEN_DECIMALS_Consts := TOKEN_DECIMALS_Consts;
[L4770]               __tmp__TOKEN_DECIMALS_UINT8_Consts := TOKEN_DECIMALS_UINT8_Consts;
[L4771]               __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts := TOKEN_DECIMAL_MULTIPLIER_Consts;
[L4772]               __tmp__TOKEN_NAME_Consts := TOKEN_NAME_Consts;
[L4773]               __tmp__TOKEN_SYMBOL_Consts := TOKEN_SYMBOL_Consts;
[L4774]               __tmp__PAUSED_Consts := PAUSED_Consts;
[L4775]               __tmp__TARGET_USER_Consts := TARGET_USER_Consts;
[L4776]               __tmp__CONTINUE_MINTING_Consts := CONTINUE_MINTING_Consts;
[L4777]               __tmp__initialized_MainToken := initialized_MainToken;
[L4778]   CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L9621]   COND TRUE   !!__tmp__paused_Pausable[this]
[L9622]               revert := true;
[L4778]   RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L4779]               assume revert || gas < 0;
[L14614]  RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L14842]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:22:22,977 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:22:22,978 INFO  L82        PathProgramCache]: Analyzing trace with hash -1610966009, now seen corresponding path program 1 times
[2020-11-24 21:22:22,979 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:22:23,015 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:22:23,669 INFO  L134       CoverageAnalysis]: Checked inductivity of 9823 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 9823 trivial. 0 not checked.
[2020-11-24 21:22:23,669 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:22:23,669 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [11] imperfect sequences [] total 11
[2020-11-24 21:22:23,670 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:22:23,670 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-11-24 21:22:23,670 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=21, Invalid=111, Unknown=0, NotChecked=0, Total=132
[2020-11-24 21:22:23,671 INFO  L87              Difference]: Start difference. First operand 8439 states and 9362 transitions. cyclomatic complexity: 943 Second operand 12 states.
[2020-11-24 21:22:32,124 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:22:32,124 INFO  L93              Difference]: Finished difference Result 13822 states and 15452 transitions.
[2020-11-24 21:22:32,124 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 14 states. 
[2020-11-24 21:22:32,124 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 13822 states and 15452 transitions.
[2020-11-24 21:22:32,150 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 12
[2020-11-24 21:22:32,186 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 13822 states to 13762 states and 15381 transitions.
[2020-11-24 21:22:32,186 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3220
[2020-11-24 21:22:32,188 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 3220
[2020-11-24 21:22:32,188 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 13762 states and 15381 transitions.
[2020-11-24 21:22:32,199 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:22:32,199 INFO  L728         BuchiCegarLoop]: Abstraction has 13762 states and 15381 transitions.
[2020-11-24 21:22:32,210 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 13762 states and 15381 transitions.
[2020-11-24 21:22:32,314 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 13762 to 11723.
[2020-11-24 21:22:32,314 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11723 states.
[2020-11-24 21:22:32,330 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11723 states to 11723 states and 13321 transitions.
[2020-11-24 21:22:32,330 INFO  L751         BuchiCegarLoop]: Abstraction has 11723 states and 13321 transitions.
[2020-11-24 21:22:32,330 INFO  L631         BuchiCegarLoop]: Abstraction has 11723 states and 13321 transitions.
[2020-11-24 21:22:32,330 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-24 21:22:32,330 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11723 states and 13321 transitions.
[2020-11-24 21:22:32,344 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-24 21:22:32,344 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:22:32,344 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:22:32,348 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:22:32,349 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transferFrom_MainToken0 := false;
[L3]                  call_transferFrom_MainToken0 := false;
[L3]      CALL        call main();
[L3]                  havoc p3;
[L3]                  havoc p2;
[L3]                  havoc p1;
[L14832]              assume null == 0;
[L14833]  CALL        call this := FreshRefGenerator__success();
[L6722]               havoc newRef;
[L6723]               assume Alloc[newRef] == false;
[L6724]               Alloc[newRef] := true;
[L6725]               assume newRef != null;
[L14833]  RET         call this := FreshRefGenerator__success();
[L14834]              assume now >= 0;
[L14835]              assume DType[this] == MainToken;
[L14836]              assume msgvalue_MSG == 0;
[L14837]              gas := gas - 53000;
[L14838]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4392]               havoc __exception;
[L4393]               revert := false;
[L4394]   COND FALSE  !(__exception)
[L4433]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9531]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9333]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9309]               assume msgsender_MSG != null;
[L9310]               Balance[this] := 0;
[L9311]               TOKEN_DECIMALS_Consts[this] := 18;
[L9312]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9313]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9314]               TOKEN_NAME_Consts[this] := -1142012261;
[L9315]               TOKEN_SYMBOL_Consts[this] := 360831912;
[L9316]               PAUSED_Consts[this] := false;
[L9317]               __var_52 := ConstantToRef(687691456480424918299425112376782193233251990427);
[L9318]               TARGET_USER_Consts[this] := ConstantToRef(687691456480424918299425112376782193233251990427);
[L9319]               CONTINUE_MINTING_Consts[this] := true;
[L9333]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9334]   COND FALSE  !(revert)
[L9531]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9532]   COND FALSE  !(revert)
[L9535]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L9535]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9536]   COND FALSE  !(revert)
[L9539]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7020]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]               assume msgsender_MSG != null;
[L7002]               Balance[this] := 0;
[L7024]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L9539]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9540]   COND FALSE  !(revert)
[L9543]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6891]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6892]   COND FALSE  !(revert)
[L6895]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6869]               assume msgsender_MSG != null;
[L6870]               Balance[this] := 0;
[L6871]               balances_BasicToken[this] := zeroRefintArr();
[L6872]               sum_balances0[this] := 0;
[L6873]               totalSupply__BasicToken[this] := 0;
[L6895]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6896]   COND FALSE  !(revert)
[L9543]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9544]   COND FALSE  !(revert)
[L9547]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7072]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7073]   COND FALSE  !(revert)
[L7076]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7020]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]               assume msgsender_MSG != null;
[L7002]               Balance[this] := 0;
[L7024]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7076]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7077]   COND FALSE  !(revert)
[L7080]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6891]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6892]   COND FALSE  !(revert)
[L6895]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6869]               assume msgsender_MSG != null;
[L6870]               Balance[this] := 0;
[L6871]               balances_BasicToken[this] := zeroRefintArr();
[L6872]               sum_balances0[this] := 0;
[L6873]               totalSupply__BasicToken[this] := 0;
[L6895]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6896]   COND FALSE  !(revert)
[L7080]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7081]   COND FALSE  !(revert)
[L7084]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7043]               assume msgsender_MSG != null;
[L7044]               Balance[this] := 0;
[L7045]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7046]               sum_allowed1[this] := 0;
[L7084]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7085]   COND FALSE  !(revert)
[L9547]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9548]   COND FALSE  !(revert)
[L9551]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7679]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7680]   COND FALSE  !(revert)
[L7683]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7020]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]               assume msgsender_MSG != null;
[L7002]               Balance[this] := 0;
[L7024]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7683]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7684]   COND FALSE  !(revert)
[L7687]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6891]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6892]   COND FALSE  !(revert)
[L6895]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6869]               assume msgsender_MSG != null;
[L6870]               Balance[this] := 0;
[L6871]               balances_BasicToken[this] := zeroRefintArr();
[L6872]               sum_balances0[this] := 0;
[L6873]               totalSupply__BasicToken[this] := 0;
[L6895]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6896]   COND FALSE  !(revert)
[L7687]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7688]   COND FALSE  !(revert)
[L7691]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7072]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7073]   COND FALSE  !(revert)
[L7076]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7020]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]               assume msgsender_MSG != null;
[L7002]               Balance[this] := 0;
[L7024]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7076]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7077]   COND FALSE  !(revert)
[L7080]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6891]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6892]   COND FALSE  !(revert)
[L6895]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6869]               assume msgsender_MSG != null;
[L6870]               Balance[this] := 0;
[L6871]               balances_BasicToken[this] := zeroRefintArr();
[L6872]               sum_balances0[this] := 0;
[L6873]               totalSupply__BasicToken[this] := 0;
[L6895]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6896]   COND FALSE  !(revert)
[L7080]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7081]   COND FALSE  !(revert)
[L7084]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7043]               assume msgsender_MSG != null;
[L7044]               Balance[this] := 0;
[L7045]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7046]               sum_allowed1[this] := 0;
[L7084]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7085]   COND FALSE  !(revert)
[L7691]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7692]   COND FALSE  !(revert)
[L7695]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7642]               assume msgsender_MSG != null;
[L7643]               Balance[this] := 0;
[L7644]               chains_FreezableToken[this] := zerointintArr();
[L7645]               sum_chains2[this] := 0;
[L7646]               freezings_FreezableToken[this] := zerointintArr();
[L7647]               sum_freezings3[this] := 0;
[L7648]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7649]               sum_freezingBalance4[this] := 0;
[L7695]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7696]   COND FALSE  !(revert)
[L9551]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9552]   COND FALSE  !(revert)
[L9555]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7297]               assume msgsender_MSG != null;
[L7298]               Balance[this] := 0;
[L7299]               owner_Ownable[this] := null;
[L7301]               owner_Ownable[this] := msgsender_MSG;
[L7314]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7315]   COND FALSE  !(revert)
[L9555]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9556]   COND FALSE  !(revert)
[L9559]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7498]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7499]   COND FALSE  !(revert)
[L7502]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7020]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]               assume msgsender_MSG != null;
[L7002]               Balance[this] := 0;
[L7024]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7502]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7503]   COND FALSE  !(revert)
[L7506]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6891]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6892]   COND FALSE  !(revert)
[L6895]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6869]               assume msgsender_MSG != null;
[L6870]               Balance[this] := 0;
[L6871]               balances_BasicToken[this] := zeroRefintArr();
[L6872]               sum_balances0[this] := 0;
[L6873]               totalSupply__BasicToken[this] := 0;
[L6895]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6896]   COND FALSE  !(revert)
[L7506]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7507]   COND FALSE  !(revert)
[L7510]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7072]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7073]   COND FALSE  !(revert)
[L7076]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7020]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]               assume msgsender_MSG != null;
[L7002]               Balance[this] := 0;
[L7024]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7076]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7077]   COND FALSE  !(revert)
[L7080]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6891]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6892]   COND FALSE  !(revert)
[L6895]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6869]               assume msgsender_MSG != null;
[L6870]               Balance[this] := 0;
[L6871]               balances_BasicToken[this] := zeroRefintArr();
[L6872]               sum_balances0[this] := 0;
[L6873]               totalSupply__BasicToken[this] := 0;
[L6895]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6896]   COND FALSE  !(revert)
[L7080]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7081]   COND FALSE  !(revert)
[L7084]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7043]               assume msgsender_MSG != null;
[L7044]               Balance[this] := 0;
[L7045]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7046]               sum_allowed1[this] := 0;
[L7084]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7085]   COND FALSE  !(revert)
[L7510]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7511]   COND FALSE  !(revert)
[L7514]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7297]               assume msgsender_MSG != null;
[L7298]               Balance[this] := 0;
[L7299]               owner_Ownable[this] := null;
[L7301]               owner_Ownable[this] := msgsender_MSG;
[L7314]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7315]   COND FALSE  !(revert)
[L7514]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7515]   COND FALSE  !(revert)
[L7518]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]               assume msgsender_MSG != null;
[L7463]               Balance[this] := 0;
[L7464]               mintingFinished_MintableToken[this] := false;
[L7518]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7519]   COND FALSE  !(revert)
[L9559]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9560]   COND FALSE  !(revert)
[L9563]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9118]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L9118]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9119]   COND FALSE  !(revert)
[L9122]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7020]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]               assume msgsender_MSG != null;
[L7002]               Balance[this] := 0;
[L7024]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L9122]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9123]   COND FALSE  !(revert)
[L9126]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6891]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6892]   COND FALSE  !(revert)
[L6895]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6869]               assume msgsender_MSG != null;
[L6870]               Balance[this] := 0;
[L6871]               balances_BasicToken[this] := zeroRefintArr();
[L6872]               sum_balances0[this] := 0;
[L6873]               totalSupply__BasicToken[this] := 0;
[L6895]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6896]   COND FALSE  !(revert)
[L9126]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9127]   COND FALSE  !(revert)
[L9130]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7072]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7073]   COND FALSE  !(revert)
[L7076]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7020]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]               assume msgsender_MSG != null;
[L7002]               Balance[this] := 0;
[L7024]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7076]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7077]   COND FALSE  !(revert)
[L7080]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6891]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6892]   COND FALSE  !(revert)
[L6895]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6869]               assume msgsender_MSG != null;
[L6870]               Balance[this] := 0;
[L6871]               balances_BasicToken[this] := zeroRefintArr();
[L6872]               sum_balances0[this] := 0;
[L6873]               totalSupply__BasicToken[this] := 0;
[L6895]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6896]   COND FALSE  !(revert)
[L7080]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7081]   COND FALSE  !(revert)
[L7084]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7043]               assume msgsender_MSG != null;
[L7044]               Balance[this] := 0;
[L7045]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7046]               sum_allowed1[this] := 0;
[L7084]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7085]   COND FALSE  !(revert)
[L9130]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9131]   COND FALSE  !(revert)
[L9134]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7679]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7680]   COND FALSE  !(revert)
[L7683]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7020]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]               assume msgsender_MSG != null;
[L7002]               Balance[this] := 0;
[L7024]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7683]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7684]   COND FALSE  !(revert)
[L7687]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6891]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6892]   COND FALSE  !(revert)
[L6895]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6869]               assume msgsender_MSG != null;
[L6870]               Balance[this] := 0;
[L6871]               balances_BasicToken[this] := zeroRefintArr();
[L6872]               sum_balances0[this] := 0;
[L6873]               totalSupply__BasicToken[this] := 0;
[L6895]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6896]   COND FALSE  !(revert)
[L7687]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7688]   COND FALSE  !(revert)
[L7691]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7072]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7073]   COND FALSE  !(revert)
[L7076]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7020]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]               assume msgsender_MSG != null;
[L7002]               Balance[this] := 0;
[L7024]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7076]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7077]   COND FALSE  !(revert)
[L7080]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6891]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6892]   COND FALSE  !(revert)
[L6895]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6869]               assume msgsender_MSG != null;
[L6870]               Balance[this] := 0;
[L6871]               balances_BasicToken[this] := zeroRefintArr();
[L6872]               sum_balances0[this] := 0;
[L6873]               totalSupply__BasicToken[this] := 0;
[L6895]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6896]   COND FALSE  !(revert)
[L7080]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7081]   COND FALSE  !(revert)
[L7084]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7043]               assume msgsender_MSG != null;
[L7044]               Balance[this] := 0;
[L7045]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7046]               sum_allowed1[this] := 0;
[L7084]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7085]   COND FALSE  !(revert)
[L7691]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7692]   COND FALSE  !(revert)
[L7695]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7642]               assume msgsender_MSG != null;
[L7643]               Balance[this] := 0;
[L7644]               chains_FreezableToken[this] := zerointintArr();
[L7645]               sum_chains2[this] := 0;
[L7646]               freezings_FreezableToken[this] := zerointintArr();
[L7647]               sum_freezings3[this] := 0;
[L7648]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7649]               sum_freezingBalance4[this] := 0;
[L7695]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7696]   COND FALSE  !(revert)
[L9134]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9135]   COND FALSE  !(revert)
[L9138]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7297]               assume msgsender_MSG != null;
[L7298]               Balance[this] := 0;
[L7299]               owner_Ownable[this] := null;
[L7301]               owner_Ownable[this] := msgsender_MSG;
[L7314]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7315]   COND FALSE  !(revert)
[L9138]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9139]   COND FALSE  !(revert)
[L9142]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7498]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7499]   COND FALSE  !(revert)
[L7502]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7020]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]               assume msgsender_MSG != null;
[L7002]               Balance[this] := 0;
[L7024]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7502]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7503]   COND FALSE  !(revert)
[L7506]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6891]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6892]   COND FALSE  !(revert)
[L6895]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6869]               assume msgsender_MSG != null;
[L6870]               Balance[this] := 0;
[L6871]               balances_BasicToken[this] := zeroRefintArr();
[L6872]               sum_balances0[this] := 0;
[L6873]               totalSupply__BasicToken[this] := 0;
[L6895]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6896]   COND FALSE  !(revert)
[L7506]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7507]   COND FALSE  !(revert)
[L7510]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7072]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7073]   COND FALSE  !(revert)
[L7076]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7020]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]               assume msgsender_MSG != null;
[L7002]               Balance[this] := 0;
[L7024]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7076]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7077]   COND FALSE  !(revert)
[L7080]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6891]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6892]   COND FALSE  !(revert)
[L6895]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6869]               assume msgsender_MSG != null;
[L6870]               Balance[this] := 0;
[L6871]               balances_BasicToken[this] := zeroRefintArr();
[L6872]               sum_balances0[this] := 0;
[L6873]               totalSupply__BasicToken[this] := 0;
[L6895]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6896]   COND FALSE  !(revert)
[L7080]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7081]   COND FALSE  !(revert)
[L7084]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7043]               assume msgsender_MSG != null;
[L7044]               Balance[this] := 0;
[L7045]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7046]               sum_allowed1[this] := 0;
[L7084]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7085]   COND FALSE  !(revert)
[L7510]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7511]   COND FALSE  !(revert)
[L7514]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7297]               assume msgsender_MSG != null;
[L7298]               Balance[this] := 0;
[L7299]               owner_Ownable[this] := null;
[L7301]               owner_Ownable[this] := msgsender_MSG;
[L7314]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7315]   COND FALSE  !(revert)
[L7514]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7515]   COND FALSE  !(revert)
[L7518]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]               assume msgsender_MSG != null;
[L7463]               Balance[this] := 0;
[L7464]               mintingFinished_MintableToken[this] := false;
[L7518]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7519]   COND FALSE  !(revert)
[L9142]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9143]   COND FALSE  !(revert)
[L9146]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9075]               assume msgsender_MSG != null;
[L9076]               Balance[this] := 0;
[L9146]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9147]   COND FALSE  !(revert)
[L9563]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9564]   COND FALSE  !(revert)
[L9567]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8862]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L8862]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8863]   COND FALSE  !(revert)
[L8866]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6891]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6892]   COND FALSE  !(revert)
[L6895]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6869]               assume msgsender_MSG != null;
[L6870]               Balance[this] := 0;
[L6871]               balances_BasicToken[this] := zeroRefintArr();
[L6872]               sum_balances0[this] := 0;
[L6873]               totalSupply__BasicToken[this] := 0;
[L6895]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6896]   COND FALSE  !(revert)
[L8866]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8867]   COND FALSE  !(revert)
[L8870]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8839]               assume msgsender_MSG != null;
[L8840]               Balance[this] := 0;
[L8870]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8871]   COND FALSE  !(revert)
[L9567]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9568]   COND FALSE  !(revert)
[L9571]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8988]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7297]               assume msgsender_MSG != null;
[L7298]               Balance[this] := 0;
[L7299]               owner_Ownable[this] := null;
[L7301]               owner_Ownable[this] := msgsender_MSG;
[L7314]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7315]   COND FALSE  !(revert)
[L8988]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8989]   COND FALSE  !(revert)
[L8992]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8968]               assume msgsender_MSG != null;
[L8969]               Balance[this] := 0;
[L8970]               paused_Pausable[this] := false;
[L8992]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8993]   COND FALSE  !(revert)
[L9571]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9572]   COND FALSE  !(revert)
[L9575]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9459]               assume msgsender_MSG != null;
[L9460]               Balance[this] := 0;
[L9461]               initialized_MainToken[this] := false;
[L9463]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9802]   COND FALSE  !(!!initialized_MainToken[this])
[L9806]               initialized_MainToken[this] := true;
[L9807]   COND TRUE   PAUSED_Consts[this]
[L9808]   COND TRUE   DType[this] == MainToken
[L9809]   CALL        call pause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9013]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12786]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L9013]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9014]   COND FALSE  !(revert)
[L9017]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12834]  COND FALSE  !(!!paused_Pausable[this])
[L9017]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9018]   COND FALSE  !(revert)
[L9021]               paused_Pausable[this] := true;
[L9022]               assert { :EventEmitted "Pause_Pausable" } true;
[L9809]   RET         call pause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9810]   COND FALSE  !(revert)
[L9817]               havoc addresses_s1709;
[L9818]               __var_57 := ConstantToRef(389942227696498629531603431436390714308169371997);
[L9819]               M_int_Ref[addresses_s1709][0] := __var_57;
[L9820]               __var_58 := ConstantToRef(389942227696498629531603431436390714308169371997);
[L9821]               M_int_Ref[addresses_s1709][1] := __var_58;
[L9822]               havoc amounts_s1709;
[L9823]               __var_59 := 48000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9824]               sum[amounts_s1709] := sum[amounts_s1709] - M_int_int[amounts_s1709][0];
[L9825]               M_int_int[amounts_s1709][0] := __var_59;
[L9826]               sum[amounts_s1709] := sum[amounts_s1709] + M_int_int[amounts_s1709][0];
[L9827]               __var_60 := 6000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9828]               sum[amounts_s1709] := sum[amounts_s1709] - M_int_int[amounts_s1709][1];
[L9829]               M_int_int[amounts_s1709][1] := __var_60;
[L9830]               sum[amounts_s1709] := sum[amounts_s1709] + M_int_int[amounts_s1709][1];
[L9831]               havoc freezes_s1709;
[L9832]               __var_61 := 0 % 18446744073709551616;
[L9833]               sum[freezes_s1709] := sum[freezes_s1709] - M_int_int[freezes_s1709][0];
[L9834]               M_int_int[freezes_s1709][0] := __var_61;
[L9835]               sum[freezes_s1709] := sum[freezes_s1709] + M_int_int[freezes_s1709][0];
[L9836]               __var_62 := 0 % 18446744073709551616;
[L9837]               sum[freezes_s1709] := sum[freezes_s1709] - M_int_int[freezes_s1709][1];
[L9838]               M_int_int[freezes_s1709][1] := __var_62;
[L9839]               sum[freezes_s1709] := sum[freezes_s1709] + M_int_int[freezes_s1709][1];
[L9840]               i_s1709 := 0;
[L9841]   COND FALSE  !(i_s1709 < Length[addresses_s1709])
[L9865]   COND FALSE  !(!CONTINUE_MINTING_Consts[this])
[L9875]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9463]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9464]   COND FALSE  !(revert)
[L9467]   COND TRUE   DType[this] == MainToken
[L9468]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7381]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12786]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7381]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7382]   COND FALSE  !(revert)
[L7385]   COND TRUE   DType[this] == MainToken
[L7386]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7429]               __var_11 := null;
[L7430]   COND FALSE  !(!(_newOwner_s581 != null))
[L7434]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7435]               owner_Ownable[this] := _newOwner_s581;
[L7386]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7387]   COND FALSE  !(revert)
[L9468]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9469]   COND FALSE  !(revert)
[L9575]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9576]   COND FALSE  !(revert)
[L4433]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4434]               assume !revert && gas >= 0;
[L14838]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14839]              assume !revert && gas >= 0;
[L14842]  CALL        call CorralChoice_MainToken(this);
[L14499]              havoc msgsender_MSG;
[L14500]              havoc msgvalue_MSG;
[L14501]              havoc choice;
[L14502]              havoc __ret_0_totalSupply;
[L14503]              havoc _owner_s729;
[L14504]              havoc balance_s729;
[L14505]              havoc _to_s1572;
[L14506]              havoc _value_s1572;
[L14507]              havoc _success_s1572;
[L14508]              havoc _owner_s395;
[L14509]              havoc _spender_s395;
[L14510]              havoc __ret_0_allowance;
[L14511]              havoc _from_s1551;
[L14512]              havoc _to_s1551;
[L14513]              havoc _value_s1551;
[L14514]              havoc _success_s1551;
[L14515]              havoc _spender_s379;
[L14516]              havoc _value_s379;
[L14517]              havoc __ret_0_approve;
[L14518]              havoc _spender_s437;
[L14519]              havoc _addedValue_s437;
[L14520]              havoc __ret_0_increaseApproval;
[L14521]              havoc _spender_s497;
[L14522]              havoc _subtractedValue_s497;
[L14523]              havoc __ret_0_decreaseApproval;
[L14524]              havoc __ret_0_owner;
[L14525]              havoc _newOwner_s558;
[L14526]              havoc __ret_0_mintingFinished;
[L14527]              havoc _to_s664;
[L14528]              havoc _amount_s664;
[L14529]              havoc __ret_0_mint;
[L14530]              havoc __ret_0_finishMinting;
[L14531]              havoc _owner_s742;
[L14532]              havoc balance_s742;
[L14533]              havoc _owner_s754;
[L14534]              havoc balance_s754;
[L14535]              havoc _addr_s792;
[L14536]              havoc count_s792;
[L14537]              havoc _addr_s849;
[L14538]              havoc _index_s849;
[L14539]              havoc _release_s849;
[L14540]              havoc _balance_s849;
[L14541]              havoc _to_s938;
[L14542]              havoc _amount_s938;
[L14543]              havoc _until_s938;
[L14544]              havoc tokens_s1107;
[L14545]              havoc _value_s1261;
[L14546]              havoc __ret_0_paused;
[L14547]              havoc _to_s1449;
[L14548]              havoc _amount_s1449;
[L14549]              havoc _until_s1449;
[L14550]              havoc __ret_0_mintAndFreeze;
[L14551]              havoc __ret_0_TOKEN_DECIMALS;
[L14552]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14553]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14554]              havoc __ret_0_TOKEN_NAME;
[L14555]              havoc __ret_0_TOKEN_SYMBOL;
[L14556]              havoc __ret_0_PAUSED;
[L14557]              havoc __ret_0_TARGET_USER;
[L14558]              havoc __ret_0_CONTINUE_MINTING;
[L14559]              havoc __ret_0_initialized;
[L14560]              havoc _name_s1511;
[L14561]              havoc _symbol_s1519;
[L14562]              havoc _decimals_s1527;
[L14563]              havoc tmpNow;
[L14564]              havoc gas;
[L14565]              assume gas > 4000000 && gas <= 8000000;
[L14566]              tmpNow := now;
[L14567]              havoc now;
[L14568]              assume now > tmpNow;
[L14569]              assume msgsender_MSG != null;
[L14570]              assume DType[msgsender_MSG] != ERC20Basic;
[L14571]              assume DType[msgsender_MSG] != SafeMath;
[L14572]              assume DType[msgsender_MSG] != BasicToken;
[L14573]              assume DType[msgsender_MSG] != ERC20;
[L14574]              assume DType[msgsender_MSG] != StandardToken;
[L14575]              assume DType[msgsender_MSG] != Ownable;
[L14576]              assume DType[msgsender_MSG] != MintableToken;
[L14577]              assume DType[msgsender_MSG] != FreezableToken;
[L14578]              assume DType[msgsender_MSG] != BurnableToken;
[L14579]              assume DType[msgsender_MSG] != Pausable;
[L14580]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14581]              assume DType[msgsender_MSG] != Consts;
[L14582]              assume DType[msgsender_MSG] != MainToken;
[L14583]              Alloc[msgsender_MSG] := true;
[L14584]  COND FALSE  !(choice == 38)
[L14590]  COND FALSE  !(choice == 37)
[L14596]  COND FALSE  !(choice == 36)
[L14603]  COND FALSE  !(choice == 35)
[L14609]  COND TRUE   choice == 34
[L14610]              gas := gas - 21000;
[L14611]  COND TRUE   gas >= 0
[L14612]              assume _value_s1551 >= 0 && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14613]              assume msgvalue_MSG == 0;
[L14614]  CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((((p1 != _from_s1551 && p1 != _to_s1551) && (p2 != _from_s1551 || p3 != msgsender_MSG)) && _from_s1551 != _to_s1551) && _value_s1551 <= balances_BasicToken[this][_from_s1551]) && _value_s1551 <= allowed_StandardToken[this][_from_s1551][msgsender_MSG]) && balances_BasicToken[this][_to_s1551] + _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _value_s1551 >= 0) && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1551] >= 0) && balances_BasicToken[this][_to_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s1551] >= 0) && balances_BasicToken[this][_from_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_MainToken0 := true;
[L3]                  call_transferFrom_MainToken0 := false;
[L3]                  revert := revert_hold;
[L4740]               havoc __exception;
[L4741]               revert := false;
[L4742]   COND TRUE   __exception
[L4743]               __tmp__Balance := Balance;
[L4744]               __tmp__DType := DType;
[L4745]               __tmp__Alloc := Alloc;
[L4746]               __tmp__balance_ADDR := balance_ADDR;
[L4747]               __tmp__M_Ref_int := M_Ref_int;
[L4748]               __tmp__sum_balances0 := sum_balances0;
[L4749]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L4750]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L4751]               __tmp__sum_allowed1 := sum_allowed1;
[L4752]               __tmp__M_int_int := M_int_int;
[L4753]               __tmp__sum_chains2 := sum_chains2;
[L4754]               __tmp__sum_freezings3 := sum_freezings3;
[L4755]               __tmp__sum_freezingBalance4 := sum_freezingBalance4;
[L4756]               __tmp__M_int_Ref := M_int_Ref;
[L4757]               __tmp__sum := sum;
[L4758]               __tmp__Length := Length;
[L4759]               __tmp__now := now;
[L4760]               __tmp__balances_BasicToken := balances_BasicToken;
[L4761]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L4762]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L4763]               __tmp__owner_Ownable := owner_Ownable;
[L4764]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L4765]               __tmp__chains_FreezableToken := chains_FreezableToken;
[L4766]               __tmp__freezings_FreezableToken := freezings_FreezableToken;
[L4767]               __tmp__freezingBalance_FreezableToken := freezingBalance_FreezableToken;
[L4768]               __tmp__paused_Pausable := paused_Pausable;
[L4769]               __tmp__TOKEN_DECIMALS_Consts := TOKEN_DECIMALS_Consts;
[L4770]               __tmp__TOKEN_DECIMALS_UINT8_Consts := TOKEN_DECIMALS_UINT8_Consts;
[L4771]               __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts := TOKEN_DECIMAL_MULTIPLIER_Consts;
[L4772]               __tmp__TOKEN_NAME_Consts := TOKEN_NAME_Consts;
[L4773]               __tmp__TOKEN_SYMBOL_Consts := TOKEN_SYMBOL_Consts;
[L4774]               __tmp__PAUSED_Consts := PAUSED_Consts;
[L4775]               __tmp__TARGET_USER_Consts := TARGET_USER_Consts;
[L4776]               __tmp__CONTINUE_MINTING_Consts := CONTINUE_MINTING_Consts;
[L4777]               __tmp__initialized_MainToken := initialized_MainToken;
[L4778]   CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L9621]   COND TRUE   !!__tmp__paused_Pausable[this]
[L9622]               revert := true;
[L4778]   RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L4779]               assume revert || gas < 0;
[L14614]  RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L14842]  RET         call CorralChoice_MainToken(this);

Loop:
[L14842]  CALL        call CorralChoice_MainToken(this);
[L14499]              havoc msgsender_MSG;
[L14500]              havoc msgvalue_MSG;
[L14501]              havoc choice;
[L14502]              havoc __ret_0_totalSupply;
[L14503]              havoc _owner_s729;
[L14504]              havoc balance_s729;
[L14505]              havoc _to_s1572;
[L14506]              havoc _value_s1572;
[L14507]              havoc _success_s1572;
[L14508]              havoc _owner_s395;
[L14509]              havoc _spender_s395;
[L14510]              havoc __ret_0_allowance;
[L14511]              havoc _from_s1551;
[L14512]              havoc _to_s1551;
[L14513]              havoc _value_s1551;
[L14514]              havoc _success_s1551;
[L14515]              havoc _spender_s379;
[L14516]              havoc _value_s379;
[L14517]              havoc __ret_0_approve;
[L14518]              havoc _spender_s437;
[L14519]              havoc _addedValue_s437;
[L14520]              havoc __ret_0_increaseApproval;
[L14521]              havoc _spender_s497;
[L14522]              havoc _subtractedValue_s497;
[L14523]              havoc __ret_0_decreaseApproval;
[L14524]              havoc __ret_0_owner;
[L14525]              havoc _newOwner_s558;
[L14526]              havoc __ret_0_mintingFinished;
[L14527]              havoc _to_s664;
[L14528]              havoc _amount_s664;
[L14529]              havoc __ret_0_mint;
[L14530]              havoc __ret_0_finishMinting;
[L14531]              havoc _owner_s742;
[L14532]              havoc balance_s742;
[L14533]              havoc _owner_s754;
[L14534]              havoc balance_s754;
[L14535]              havoc _addr_s792;
[L14536]              havoc count_s792;
[L14537]              havoc _addr_s849;
[L14538]              havoc _index_s849;
[L14539]              havoc _release_s849;
[L14540]              havoc _balance_s849;
[L14541]              havoc _to_s938;
[L14542]              havoc _amount_s938;
[L14543]              havoc _until_s938;
[L14544]              havoc tokens_s1107;
[L14545]              havoc _value_s1261;
[L14546]              havoc __ret_0_paused;
[L14547]              havoc _to_s1449;
[L14548]              havoc _amount_s1449;
[L14549]              havoc _until_s1449;
[L14550]              havoc __ret_0_mintAndFreeze;
[L14551]              havoc __ret_0_TOKEN_DECIMALS;
[L14552]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14553]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14554]              havoc __ret_0_TOKEN_NAME;
[L14555]              havoc __ret_0_TOKEN_SYMBOL;
[L14556]              havoc __ret_0_PAUSED;
[L14557]              havoc __ret_0_TARGET_USER;
[L14558]              havoc __ret_0_CONTINUE_MINTING;
[L14559]              havoc __ret_0_initialized;
[L14560]              havoc _name_s1511;
[L14561]              havoc _symbol_s1519;
[L14562]              havoc _decimals_s1527;
[L14563]              havoc tmpNow;
[L14564]              havoc gas;
[L14565]              assume gas > 4000000 && gas <= 8000000;
[L14566]              tmpNow := now;
[L14567]              havoc now;
[L14568]              assume now > tmpNow;
[L14569]              assume msgsender_MSG != null;
[L14570]              assume DType[msgsender_MSG] != ERC20Basic;
[L14571]              assume DType[msgsender_MSG] != SafeMath;
[L14572]              assume DType[msgsender_MSG] != BasicToken;
[L14573]              assume DType[msgsender_MSG] != ERC20;
[L14574]              assume DType[msgsender_MSG] != StandardToken;
[L14575]              assume DType[msgsender_MSG] != Ownable;
[L14576]              assume DType[msgsender_MSG] != MintableToken;
[L14577]              assume DType[msgsender_MSG] != FreezableToken;
[L14578]              assume DType[msgsender_MSG] != BurnableToken;
[L14579]              assume DType[msgsender_MSG] != Pausable;
[L14580]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14581]              assume DType[msgsender_MSG] != Consts;
[L14582]              assume DType[msgsender_MSG] != MainToken;
[L14583]              Alloc[msgsender_MSG] := true;
[L14584]  COND FALSE  !(choice == 38)
[L14590]  COND FALSE  !(choice == 37)
[L14596]  COND FALSE  !(choice == 36)
[L14603]  COND FALSE  !(choice == 35)
[L14609]  COND TRUE   choice == 34
[L14610]              gas := gas - 21000;
[L14611]  COND TRUE   gas >= 0
[L14612]              assume _value_s1551 >= 0 && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14613]              assume msgvalue_MSG == 0;
[L14614]  CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((((p1 != _from_s1551 && p1 != _to_s1551) && (p2 != _from_s1551 || p3 != msgsender_MSG)) && _from_s1551 != _to_s1551) && _value_s1551 <= balances_BasicToken[this][_from_s1551]) && _value_s1551 <= allowed_StandardToken[this][_from_s1551][msgsender_MSG]) && balances_BasicToken[this][_to_s1551] + _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _value_s1551 >= 0) && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1551] >= 0) && balances_BasicToken[this][_to_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s1551] >= 0) && balances_BasicToken[this][_from_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_MainToken0 := true;
[L3]                  call_transferFrom_MainToken0 := false;
[L3]                  revert := revert_hold;
[L4740]               havoc __exception;
[L4741]               revert := false;
[L4742]   COND TRUE   __exception
[L4743]               __tmp__Balance := Balance;
[L4744]               __tmp__DType := DType;
[L4745]               __tmp__Alloc := Alloc;
[L4746]               __tmp__balance_ADDR := balance_ADDR;
[L4747]               __tmp__M_Ref_int := M_Ref_int;
[L4748]               __tmp__sum_balances0 := sum_balances0;
[L4749]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L4750]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L4751]               __tmp__sum_allowed1 := sum_allowed1;
[L4752]               __tmp__M_int_int := M_int_int;
[L4753]               __tmp__sum_chains2 := sum_chains2;
[L4754]               __tmp__sum_freezings3 := sum_freezings3;
[L4755]               __tmp__sum_freezingBalance4 := sum_freezingBalance4;
[L4756]               __tmp__M_int_Ref := M_int_Ref;
[L4757]               __tmp__sum := sum;
[L4758]               __tmp__Length := Length;
[L4759]               __tmp__now := now;
[L4760]               __tmp__balances_BasicToken := balances_BasicToken;
[L4761]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L4762]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L4763]               __tmp__owner_Ownable := owner_Ownable;
[L4764]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L4765]               __tmp__chains_FreezableToken := chains_FreezableToken;
[L4766]               __tmp__freezings_FreezableToken := freezings_FreezableToken;
[L4767]               __tmp__freezingBalance_FreezableToken := freezingBalance_FreezableToken;
[L4768]               __tmp__paused_Pausable := paused_Pausable;
[L4769]               __tmp__TOKEN_DECIMALS_Consts := TOKEN_DECIMALS_Consts;
[L4770]               __tmp__TOKEN_DECIMALS_UINT8_Consts := TOKEN_DECIMALS_UINT8_Consts;
[L4771]               __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts := TOKEN_DECIMAL_MULTIPLIER_Consts;
[L4772]               __tmp__TOKEN_NAME_Consts := TOKEN_NAME_Consts;
[L4773]               __tmp__TOKEN_SYMBOL_Consts := TOKEN_SYMBOL_Consts;
[L4774]               __tmp__PAUSED_Consts := PAUSED_Consts;
[L4775]               __tmp__TARGET_USER_Consts := TARGET_USER_Consts;
[L4776]               __tmp__CONTINUE_MINTING_Consts := CONTINUE_MINTING_Consts;
[L4777]               __tmp__initialized_MainToken := initialized_MainToken;
[L4778]   CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L9621]   COND TRUE   !!__tmp__paused_Pausable[this]
[L9622]               revert := true;
[L4778]   RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L4779]               assume revert || gas < 0;
[L14614]  RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L14842]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:22:32,358 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:22:32,358 INFO  L82        PathProgramCache]: Analyzing trace with hash 1320023582, now seen corresponding path program 1 times
[2020-11-24 21:22:32,359 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:22:32,392 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:22:32,943 INFO  L134       CoverageAnalysis]: Checked inductivity of 9826 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 9826 trivial. 0 not checked.
[2020-11-24 21:22:32,943 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:22:32,943 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-24 21:22:32,944 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:22:32,944 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-24 21:22:32,944 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-24 21:22:32,944 INFO  L87              Difference]: Start difference. First operand 11723 states and 13321 transitions. cyclomatic complexity: 1630 Second operand 7 states.
[2020-11-24 21:22:33,063 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:22:33,063 INFO  L93              Difference]: Finished difference Result 11717 states and 13314 transitions.
[2020-11-24 21:22:33,063 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-24 21:22:33,063 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11717 states and 13314 transitions.
[2020-11-24 21:22:33,086 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-24 21:22:33,123 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11717 states to 11660 states and 13248 transitions.
[2020-11-24 21:22:33,123 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2650
[2020-11-24 21:22:33,125 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2650
[2020-11-24 21:22:33,125 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11660 states and 13248 transitions.
[2020-11-24 21:22:33,133 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:22:33,133 INFO  L728         BuchiCegarLoop]: Abstraction has 11660 states and 13248 transitions.
[2020-11-24 21:22:33,141 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11660 states and 13248 transitions.
[2020-11-24 21:22:33,207 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11660 to 11660.
[2020-11-24 21:22:33,208 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11660 states.
[2020-11-24 21:22:33,222 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11660 states to 11660 states and 13248 transitions.
[2020-11-24 21:22:33,222 INFO  L751         BuchiCegarLoop]: Abstraction has 11660 states and 13248 transitions.
[2020-11-24 21:22:33,222 INFO  L631         BuchiCegarLoop]: Abstraction has 11660 states and 13248 transitions.
[2020-11-24 21:22:33,222 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-24 21:22:33,222 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11660 states and 13248 transitions.
[2020-11-24 21:22:33,235 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-24 21:22:33,235 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:22:33,235 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:22:33,238 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:22:33,238 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transferFrom_MainToken0 := false;
[L3]                  call_transferFrom_MainToken0 := false;
[L3]      CALL        call main();
[L3]                  havoc p3;
[L3]                  havoc p2;
[L3]                  havoc p1;
[L14832]              assume null == 0;
[L14833]  CALL        call this := FreshRefGenerator__success();
[L6722]               havoc newRef;
[L6723]               assume Alloc[newRef] == false;
[L6724]               Alloc[newRef] := true;
[L6725]               assume newRef != null;
[L14833]  RET         call this := FreshRefGenerator__success();
[L14834]              assume now >= 0;
[L14835]              assume DType[this] == MainToken;
[L14836]              assume msgvalue_MSG == 0;
[L14837]              gas := gas - 53000;
[L14838]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4392]               havoc __exception;
[L4393]               revert := false;
[L4394]   COND FALSE  !(__exception)
[L4433]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9531]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9333]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9309]               assume msgsender_MSG != null;
[L9310]               Balance[this] := 0;
[L9311]               TOKEN_DECIMALS_Consts[this] := 18;
[L9312]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9313]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9314]               TOKEN_NAME_Consts[this] := -1142012261;
[L9315]               TOKEN_SYMBOL_Consts[this] := 360831912;
[L9316]               PAUSED_Consts[this] := false;
[L9317]               __var_52 := ConstantToRef(687691456480424918299425112376782193233251990427);
[L9318]               TARGET_USER_Consts[this] := ConstantToRef(687691456480424918299425112376782193233251990427);
[L9319]               CONTINUE_MINTING_Consts[this] := true;
[L9333]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9334]   COND FALSE  !(revert)
[L9531]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9532]   COND FALSE  !(revert)
[L9535]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L9535]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9536]   COND FALSE  !(revert)
[L9539]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7020]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]               assume msgsender_MSG != null;
[L7002]               Balance[this] := 0;
[L7024]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L9539]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9540]   COND FALSE  !(revert)
[L9543]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6891]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6892]   COND FALSE  !(revert)
[L6895]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6869]               assume msgsender_MSG != null;
[L6870]               Balance[this] := 0;
[L6871]               balances_BasicToken[this] := zeroRefintArr();
[L6872]               sum_balances0[this] := 0;
[L6873]               totalSupply__BasicToken[this] := 0;
[L6895]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6896]   COND FALSE  !(revert)
[L9543]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9544]   COND FALSE  !(revert)
[L9547]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7072]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7073]   COND FALSE  !(revert)
[L7076]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7020]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]               assume msgsender_MSG != null;
[L7002]               Balance[this] := 0;
[L7024]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7076]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7077]   COND FALSE  !(revert)
[L7080]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6891]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6892]   COND FALSE  !(revert)
[L6895]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6869]               assume msgsender_MSG != null;
[L6870]               Balance[this] := 0;
[L6871]               balances_BasicToken[this] := zeroRefintArr();
[L6872]               sum_balances0[this] := 0;
[L6873]               totalSupply__BasicToken[this] := 0;
[L6895]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6896]   COND FALSE  !(revert)
[L7080]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7081]   COND FALSE  !(revert)
[L7084]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7043]               assume msgsender_MSG != null;
[L7044]               Balance[this] := 0;
[L7045]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7046]               sum_allowed1[this] := 0;
[L7084]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7085]   COND FALSE  !(revert)
[L9547]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9548]   COND FALSE  !(revert)
[L9551]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7679]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7680]   COND FALSE  !(revert)
[L7683]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7020]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]               assume msgsender_MSG != null;
[L7002]               Balance[this] := 0;
[L7024]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7683]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7684]   COND FALSE  !(revert)
[L7687]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6891]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6892]   COND FALSE  !(revert)
[L6895]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6869]               assume msgsender_MSG != null;
[L6870]               Balance[this] := 0;
[L6871]               balances_BasicToken[this] := zeroRefintArr();
[L6872]               sum_balances0[this] := 0;
[L6873]               totalSupply__BasicToken[this] := 0;
[L6895]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6896]   COND FALSE  !(revert)
[L7687]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7688]   COND FALSE  !(revert)
[L7691]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7072]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7073]   COND FALSE  !(revert)
[L7076]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7020]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]               assume msgsender_MSG != null;
[L7002]               Balance[this] := 0;
[L7024]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7076]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7077]   COND FALSE  !(revert)
[L7080]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6891]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6892]   COND FALSE  !(revert)
[L6895]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6869]               assume msgsender_MSG != null;
[L6870]               Balance[this] := 0;
[L6871]               balances_BasicToken[this] := zeroRefintArr();
[L6872]               sum_balances0[this] := 0;
[L6873]               totalSupply__BasicToken[this] := 0;
[L6895]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6896]   COND FALSE  !(revert)
[L7080]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7081]   COND FALSE  !(revert)
[L7084]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7043]               assume msgsender_MSG != null;
[L7044]               Balance[this] := 0;
[L7045]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7046]               sum_allowed1[this] := 0;
[L7084]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7085]   COND FALSE  !(revert)
[L7691]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7692]   COND FALSE  !(revert)
[L7695]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7642]               assume msgsender_MSG != null;
[L7643]               Balance[this] := 0;
[L7644]               chains_FreezableToken[this] := zerointintArr();
[L7645]               sum_chains2[this] := 0;
[L7646]               freezings_FreezableToken[this] := zerointintArr();
[L7647]               sum_freezings3[this] := 0;
[L7648]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7649]               sum_freezingBalance4[this] := 0;
[L7695]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7696]   COND FALSE  !(revert)
[L9551]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9552]   COND FALSE  !(revert)
[L9555]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7297]               assume msgsender_MSG != null;
[L7298]               Balance[this] := 0;
[L7299]               owner_Ownable[this] := null;
[L7301]               owner_Ownable[this] := msgsender_MSG;
[L7314]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7315]   COND FALSE  !(revert)
[L9555]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9556]   COND FALSE  !(revert)
[L9559]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7498]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7499]   COND FALSE  !(revert)
[L7502]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7020]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]               assume msgsender_MSG != null;
[L7002]               Balance[this] := 0;
[L7024]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7502]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7503]   COND FALSE  !(revert)
[L7506]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6891]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6892]   COND FALSE  !(revert)
[L6895]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6869]               assume msgsender_MSG != null;
[L6870]               Balance[this] := 0;
[L6871]               balances_BasicToken[this] := zeroRefintArr();
[L6872]               sum_balances0[this] := 0;
[L6873]               totalSupply__BasicToken[this] := 0;
[L6895]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6896]   COND FALSE  !(revert)
[L7506]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7507]   COND FALSE  !(revert)
[L7510]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7072]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7073]   COND FALSE  !(revert)
[L7076]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7020]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]               assume msgsender_MSG != null;
[L7002]               Balance[this] := 0;
[L7024]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7076]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7077]   COND FALSE  !(revert)
[L7080]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6891]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6892]   COND FALSE  !(revert)
[L6895]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6869]               assume msgsender_MSG != null;
[L6870]               Balance[this] := 0;
[L6871]               balances_BasicToken[this] := zeroRefintArr();
[L6872]               sum_balances0[this] := 0;
[L6873]               totalSupply__BasicToken[this] := 0;
[L6895]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6896]   COND FALSE  !(revert)
[L7080]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7081]   COND FALSE  !(revert)
[L7084]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7043]               assume msgsender_MSG != null;
[L7044]               Balance[this] := 0;
[L7045]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7046]               sum_allowed1[this] := 0;
[L7084]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7085]   COND FALSE  !(revert)
[L7510]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7511]   COND FALSE  !(revert)
[L7514]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7297]               assume msgsender_MSG != null;
[L7298]               Balance[this] := 0;
[L7299]               owner_Ownable[this] := null;
[L7301]               owner_Ownable[this] := msgsender_MSG;
[L7314]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7315]   COND FALSE  !(revert)
[L7514]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7515]   COND FALSE  !(revert)
[L7518]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]               assume msgsender_MSG != null;
[L7463]               Balance[this] := 0;
[L7464]               mintingFinished_MintableToken[this] := false;
[L7518]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7519]   COND FALSE  !(revert)
[L9559]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9560]   COND FALSE  !(revert)
[L9563]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9118]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L9118]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9119]   COND FALSE  !(revert)
[L9122]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7020]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]               assume msgsender_MSG != null;
[L7002]               Balance[this] := 0;
[L7024]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L9122]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9123]   COND FALSE  !(revert)
[L9126]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6891]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6892]   COND FALSE  !(revert)
[L6895]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6869]               assume msgsender_MSG != null;
[L6870]               Balance[this] := 0;
[L6871]               balances_BasicToken[this] := zeroRefintArr();
[L6872]               sum_balances0[this] := 0;
[L6873]               totalSupply__BasicToken[this] := 0;
[L6895]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6896]   COND FALSE  !(revert)
[L9126]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9127]   COND FALSE  !(revert)
[L9130]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7072]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7073]   COND FALSE  !(revert)
[L7076]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7020]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]               assume msgsender_MSG != null;
[L7002]               Balance[this] := 0;
[L7024]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7076]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7077]   COND FALSE  !(revert)
[L7080]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6891]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6892]   COND FALSE  !(revert)
[L6895]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6869]               assume msgsender_MSG != null;
[L6870]               Balance[this] := 0;
[L6871]               balances_BasicToken[this] := zeroRefintArr();
[L6872]               sum_balances0[this] := 0;
[L6873]               totalSupply__BasicToken[this] := 0;
[L6895]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6896]   COND FALSE  !(revert)
[L7080]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7081]   COND FALSE  !(revert)
[L7084]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7043]               assume msgsender_MSG != null;
[L7044]               Balance[this] := 0;
[L7045]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7046]               sum_allowed1[this] := 0;
[L7084]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7085]   COND FALSE  !(revert)
[L9130]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9131]   COND FALSE  !(revert)
[L9134]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7679]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7680]   COND FALSE  !(revert)
[L7683]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7020]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]               assume msgsender_MSG != null;
[L7002]               Balance[this] := 0;
[L7024]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7683]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7684]   COND FALSE  !(revert)
[L7687]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6891]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6892]   COND FALSE  !(revert)
[L6895]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6869]               assume msgsender_MSG != null;
[L6870]               Balance[this] := 0;
[L6871]               balances_BasicToken[this] := zeroRefintArr();
[L6872]               sum_balances0[this] := 0;
[L6873]               totalSupply__BasicToken[this] := 0;
[L6895]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6896]   COND FALSE  !(revert)
[L7687]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7688]   COND FALSE  !(revert)
[L7691]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7072]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7073]   COND FALSE  !(revert)
[L7076]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7020]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]               assume msgsender_MSG != null;
[L7002]               Balance[this] := 0;
[L7024]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7076]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7077]   COND FALSE  !(revert)
[L7080]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6891]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6892]   COND FALSE  !(revert)
[L6895]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6869]               assume msgsender_MSG != null;
[L6870]               Balance[this] := 0;
[L6871]               balances_BasicToken[this] := zeroRefintArr();
[L6872]               sum_balances0[this] := 0;
[L6873]               totalSupply__BasicToken[this] := 0;
[L6895]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6896]   COND FALSE  !(revert)
[L7080]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7081]   COND FALSE  !(revert)
[L7084]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7043]               assume msgsender_MSG != null;
[L7044]               Balance[this] := 0;
[L7045]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7046]               sum_allowed1[this] := 0;
[L7084]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7085]   COND FALSE  !(revert)
[L7691]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7692]   COND FALSE  !(revert)
[L7695]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7642]               assume msgsender_MSG != null;
[L7643]               Balance[this] := 0;
[L7644]               chains_FreezableToken[this] := zerointintArr();
[L7645]               sum_chains2[this] := 0;
[L7646]               freezings_FreezableToken[this] := zerointintArr();
[L7647]               sum_freezings3[this] := 0;
[L7648]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7649]               sum_freezingBalance4[this] := 0;
[L7695]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7696]   COND FALSE  !(revert)
[L9134]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9135]   COND FALSE  !(revert)
[L9138]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7297]               assume msgsender_MSG != null;
[L7298]               Balance[this] := 0;
[L7299]               owner_Ownable[this] := null;
[L7301]               owner_Ownable[this] := msgsender_MSG;
[L7314]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7315]   COND FALSE  !(revert)
[L9138]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9139]   COND FALSE  !(revert)
[L9142]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7498]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7499]   COND FALSE  !(revert)
[L7502]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7020]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]               assume msgsender_MSG != null;
[L7002]               Balance[this] := 0;
[L7024]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7502]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7503]   COND FALSE  !(revert)
[L7506]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6891]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6892]   COND FALSE  !(revert)
[L6895]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6869]               assume msgsender_MSG != null;
[L6870]               Balance[this] := 0;
[L6871]               balances_BasicToken[this] := zeroRefintArr();
[L6872]               sum_balances0[this] := 0;
[L6873]               totalSupply__BasicToken[this] := 0;
[L6895]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6896]   COND FALSE  !(revert)
[L7506]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7507]   COND FALSE  !(revert)
[L7510]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7072]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7073]   COND FALSE  !(revert)
[L7076]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7020]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]               assume msgsender_MSG != null;
[L7002]               Balance[this] := 0;
[L7024]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7076]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7077]   COND FALSE  !(revert)
[L7080]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6891]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6892]   COND FALSE  !(revert)
[L6895]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6869]               assume msgsender_MSG != null;
[L6870]               Balance[this] := 0;
[L6871]               balances_BasicToken[this] := zeroRefintArr();
[L6872]               sum_balances0[this] := 0;
[L6873]               totalSupply__BasicToken[this] := 0;
[L6895]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6896]   COND FALSE  !(revert)
[L7080]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7081]   COND FALSE  !(revert)
[L7084]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7043]               assume msgsender_MSG != null;
[L7044]               Balance[this] := 0;
[L7045]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7046]               sum_allowed1[this] := 0;
[L7084]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7085]   COND FALSE  !(revert)
[L7510]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7511]   COND FALSE  !(revert)
[L7514]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7297]               assume msgsender_MSG != null;
[L7298]               Balance[this] := 0;
[L7299]               owner_Ownable[this] := null;
[L7301]               owner_Ownable[this] := msgsender_MSG;
[L7314]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7315]   COND FALSE  !(revert)
[L7514]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7515]   COND FALSE  !(revert)
[L7518]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]               assume msgsender_MSG != null;
[L7463]               Balance[this] := 0;
[L7464]               mintingFinished_MintableToken[this] := false;
[L7518]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7519]   COND FALSE  !(revert)
[L9142]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9143]   COND FALSE  !(revert)
[L9146]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9075]               assume msgsender_MSG != null;
[L9076]               Balance[this] := 0;
[L9146]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9147]   COND FALSE  !(revert)
[L9563]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9564]   COND FALSE  !(revert)
[L9567]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8862]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L8862]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8863]   COND FALSE  !(revert)
[L8866]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6891]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6892]   COND FALSE  !(revert)
[L6895]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6869]               assume msgsender_MSG != null;
[L6870]               Balance[this] := 0;
[L6871]               balances_BasicToken[this] := zeroRefintArr();
[L6872]               sum_balances0[this] := 0;
[L6873]               totalSupply__BasicToken[this] := 0;
[L6895]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6896]   COND FALSE  !(revert)
[L8866]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8867]   COND FALSE  !(revert)
[L8870]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8839]               assume msgsender_MSG != null;
[L8840]               Balance[this] := 0;
[L8870]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8871]   COND FALSE  !(revert)
[L9567]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9568]   COND FALSE  !(revert)
[L9571]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8988]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7297]               assume msgsender_MSG != null;
[L7298]               Balance[this] := 0;
[L7299]               owner_Ownable[this] := null;
[L7301]               owner_Ownable[this] := msgsender_MSG;
[L7314]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7315]   COND FALSE  !(revert)
[L8988]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8989]   COND FALSE  !(revert)
[L8992]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8968]               assume msgsender_MSG != null;
[L8969]               Balance[this] := 0;
[L8970]               paused_Pausable[this] := false;
[L8992]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8993]   COND FALSE  !(revert)
[L9571]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9572]   COND FALSE  !(revert)
[L9575]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9459]               assume msgsender_MSG != null;
[L9460]               Balance[this] := 0;
[L9461]               initialized_MainToken[this] := false;
[L9463]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9802]   COND FALSE  !(!!initialized_MainToken[this])
[L9806]               initialized_MainToken[this] := true;
[L9807]   COND FALSE  !(PAUSED_Consts[this])
[L9817]               havoc addresses_s1709;
[L9818]               __var_57 := ConstantToRef(389942227696498629531603431436390714308169371997);
[L9819]               M_int_Ref[addresses_s1709][0] := __var_57;
[L9820]               __var_58 := ConstantToRef(389942227696498629531603431436390714308169371997);
[L9821]               M_int_Ref[addresses_s1709][1] := __var_58;
[L9822]               havoc amounts_s1709;
[L9823]               __var_59 := 48000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9824]               sum[amounts_s1709] := sum[amounts_s1709] - M_int_int[amounts_s1709][0];
[L9825]               M_int_int[amounts_s1709][0] := __var_59;
[L9826]               sum[amounts_s1709] := sum[amounts_s1709] + M_int_int[amounts_s1709][0];
[L9827]               __var_60 := 6000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9828]               sum[amounts_s1709] := sum[amounts_s1709] - M_int_int[amounts_s1709][1];
[L9829]               M_int_int[amounts_s1709][1] := __var_60;
[L9830]               sum[amounts_s1709] := sum[amounts_s1709] + M_int_int[amounts_s1709][1];
[L9831]               havoc freezes_s1709;
[L9832]               __var_61 := 0 % 18446744073709551616;
[L9833]               sum[freezes_s1709] := sum[freezes_s1709] - M_int_int[freezes_s1709][0];
[L9834]               M_int_int[freezes_s1709][0] := __var_61;
[L9835]               sum[freezes_s1709] := sum[freezes_s1709] + M_int_int[freezes_s1709][0];
[L9836]               __var_62 := 0 % 18446744073709551616;
[L9837]               sum[freezes_s1709] := sum[freezes_s1709] - M_int_int[freezes_s1709][1];
[L9838]               M_int_int[freezes_s1709][1] := __var_62;
[L9839]               sum[freezes_s1709] := sum[freezes_s1709] + M_int_int[freezes_s1709][1];
[L9840]               i_s1709 := 0;
[L9841]   COND FALSE  !(i_s1709 < Length[addresses_s1709])
[L9865]   COND FALSE  !(!CONTINUE_MINTING_Consts[this])
[L9875]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9463]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9464]   COND FALSE  !(revert)
[L9467]   COND TRUE   DType[this] == MainToken
[L9468]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7381]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12786]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7381]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7382]   COND FALSE  !(revert)
[L7385]   COND TRUE   DType[this] == MainToken
[L7386]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7429]               __var_11 := null;
[L7430]   COND FALSE  !(!(_newOwner_s581 != null))
[L7434]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7435]               owner_Ownable[this] := _newOwner_s581;
[L7386]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7387]   COND FALSE  !(revert)
[L9468]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9469]   COND FALSE  !(revert)
[L9575]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9576]   COND FALSE  !(revert)
[L4433]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4434]               assume !revert && gas >= 0;
[L14838]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14839]              assume !revert && gas >= 0;
[L14842]  CALL        call CorralChoice_MainToken(this);
[L14499]              havoc msgsender_MSG;
[L14500]              havoc msgvalue_MSG;
[L14501]              havoc choice;
[L14502]              havoc __ret_0_totalSupply;
[L14503]              havoc _owner_s729;
[L14504]              havoc balance_s729;
[L14505]              havoc _to_s1572;
[L14506]              havoc _value_s1572;
[L14507]              havoc _success_s1572;
[L14508]              havoc _owner_s395;
[L14509]              havoc _spender_s395;
[L14510]              havoc __ret_0_allowance;
[L14511]              havoc _from_s1551;
[L14512]              havoc _to_s1551;
[L14513]              havoc _value_s1551;
[L14514]              havoc _success_s1551;
[L14515]              havoc _spender_s379;
[L14516]              havoc _value_s379;
[L14517]              havoc __ret_0_approve;
[L14518]              havoc _spender_s437;
[L14519]              havoc _addedValue_s437;
[L14520]              havoc __ret_0_increaseApproval;
[L14521]              havoc _spender_s497;
[L14522]              havoc _subtractedValue_s497;
[L14523]              havoc __ret_0_decreaseApproval;
[L14524]              havoc __ret_0_owner;
[L14525]              havoc _newOwner_s558;
[L14526]              havoc __ret_0_mintingFinished;
[L14527]              havoc _to_s664;
[L14528]              havoc _amount_s664;
[L14529]              havoc __ret_0_mint;
[L14530]              havoc __ret_0_finishMinting;
[L14531]              havoc _owner_s742;
[L14532]              havoc balance_s742;
[L14533]              havoc _owner_s754;
[L14534]              havoc balance_s754;
[L14535]              havoc _addr_s792;
[L14536]              havoc count_s792;
[L14537]              havoc _addr_s849;
[L14538]              havoc _index_s849;
[L14539]              havoc _release_s849;
[L14540]              havoc _balance_s849;
[L14541]              havoc _to_s938;
[L14542]              havoc _amount_s938;
[L14543]              havoc _until_s938;
[L14544]              havoc tokens_s1107;
[L14545]              havoc _value_s1261;
[L14546]              havoc __ret_0_paused;
[L14547]              havoc _to_s1449;
[L14548]              havoc _amount_s1449;
[L14549]              havoc _until_s1449;
[L14550]              havoc __ret_0_mintAndFreeze;
[L14551]              havoc __ret_0_TOKEN_DECIMALS;
[L14552]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14553]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14554]              havoc __ret_0_TOKEN_NAME;
[L14555]              havoc __ret_0_TOKEN_SYMBOL;
[L14556]              havoc __ret_0_PAUSED;
[L14557]              havoc __ret_0_TARGET_USER;
[L14558]              havoc __ret_0_CONTINUE_MINTING;
[L14559]              havoc __ret_0_initialized;
[L14560]              havoc _name_s1511;
[L14561]              havoc _symbol_s1519;
[L14562]              havoc _decimals_s1527;
[L14563]              havoc tmpNow;
[L14564]              havoc gas;
[L14565]              assume gas > 4000000 && gas <= 8000000;
[L14566]              tmpNow := now;
[L14567]              havoc now;
[L14568]              assume now > tmpNow;
[L14569]              assume msgsender_MSG != null;
[L14570]              assume DType[msgsender_MSG] != ERC20Basic;
[L14571]              assume DType[msgsender_MSG] != SafeMath;
[L14572]              assume DType[msgsender_MSG] != BasicToken;
[L14573]              assume DType[msgsender_MSG] != ERC20;
[L14574]              assume DType[msgsender_MSG] != StandardToken;
[L14575]              assume DType[msgsender_MSG] != Ownable;
[L14576]              assume DType[msgsender_MSG] != MintableToken;
[L14577]              assume DType[msgsender_MSG] != FreezableToken;
[L14578]              assume DType[msgsender_MSG] != BurnableToken;
[L14579]              assume DType[msgsender_MSG] != Pausable;
[L14580]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14581]              assume DType[msgsender_MSG] != Consts;
[L14582]              assume DType[msgsender_MSG] != MainToken;
[L14583]              Alloc[msgsender_MSG] := true;
[L14584]  COND FALSE  !(choice == 38)
[L14590]  COND FALSE  !(choice == 37)
[L14596]  COND FALSE  !(choice == 36)
[L14603]  COND FALSE  !(choice == 35)
[L14609]  COND TRUE   choice == 34
[L14610]              gas := gas - 21000;
[L14611]  COND TRUE   gas >= 0
[L14612]              assume _value_s1551 >= 0 && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14613]              assume msgvalue_MSG == 0;
[L14614]  CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((((p1 != _from_s1551 && p1 != _to_s1551) && (p2 != _from_s1551 || p3 != msgsender_MSG)) && _from_s1551 != _to_s1551) && _value_s1551 <= balances_BasicToken[this][_from_s1551]) && _value_s1551 <= allowed_StandardToken[this][_from_s1551][msgsender_MSG]) && balances_BasicToken[this][_to_s1551] + _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _value_s1551 >= 0) && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1551] >= 0) && balances_BasicToken[this][_to_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s1551] >= 0) && balances_BasicToken[this][_from_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_MainToken0 := true;
[L3]                  call_transferFrom_MainToken0 := false;
[L3]                  revert := revert_hold;
[L4740]               havoc __exception;
[L4741]               revert := false;
[L4742]   COND TRUE   __exception
[L4743]               __tmp__Balance := Balance;
[L4744]               __tmp__DType := DType;
[L4745]               __tmp__Alloc := Alloc;
[L4746]               __tmp__balance_ADDR := balance_ADDR;
[L4747]               __tmp__M_Ref_int := M_Ref_int;
[L4748]               __tmp__sum_balances0 := sum_balances0;
[L4749]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L4750]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L4751]               __tmp__sum_allowed1 := sum_allowed1;
[L4752]               __tmp__M_int_int := M_int_int;
[L4753]               __tmp__sum_chains2 := sum_chains2;
[L4754]               __tmp__sum_freezings3 := sum_freezings3;
[L4755]               __tmp__sum_freezingBalance4 := sum_freezingBalance4;
[L4756]               __tmp__M_int_Ref := M_int_Ref;
[L4757]               __tmp__sum := sum;
[L4758]               __tmp__Length := Length;
[L4759]               __tmp__now := now;
[L4760]               __tmp__balances_BasicToken := balances_BasicToken;
[L4761]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L4762]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L4763]               __tmp__owner_Ownable := owner_Ownable;
[L4764]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L4765]               __tmp__chains_FreezableToken := chains_FreezableToken;
[L4766]               __tmp__freezings_FreezableToken := freezings_FreezableToken;
[L4767]               __tmp__freezingBalance_FreezableToken := freezingBalance_FreezableToken;
[L4768]               __tmp__paused_Pausable := paused_Pausable;
[L4769]               __tmp__TOKEN_DECIMALS_Consts := TOKEN_DECIMALS_Consts;
[L4770]               __tmp__TOKEN_DECIMALS_UINT8_Consts := TOKEN_DECIMALS_UINT8_Consts;
[L4771]               __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts := TOKEN_DECIMAL_MULTIPLIER_Consts;
[L4772]               __tmp__TOKEN_NAME_Consts := TOKEN_NAME_Consts;
[L4773]               __tmp__TOKEN_SYMBOL_Consts := TOKEN_SYMBOL_Consts;
[L4774]               __tmp__PAUSED_Consts := PAUSED_Consts;
[L4775]               __tmp__TARGET_USER_Consts := TARGET_USER_Consts;
[L4776]               __tmp__CONTINUE_MINTING_Consts := CONTINUE_MINTING_Consts;
[L4777]               __tmp__initialized_MainToken := initialized_MainToken;
[L4778]   CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L9621]   COND FALSE  !(!!__tmp__paused_Pausable[this])
[L9625]   COND TRUE   __tmp__DType[this] == MainToken
[L9626]   CALL        call __var_53 := transferFrom~address~address~uint256_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L7096]               __var_4 := null;
[L7097]   COND TRUE   !(_to_s351 != null)
[L7098]               revert := true;
[L9626]   RET         call __var_53 := transferFrom~address~address~uint256_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L9627]   COND TRUE   revert
[L4778]   RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L4779]               assume revert || gas < 0;
[L14614]  RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L14842]  RET         call CorralChoice_MainToken(this);

Loop:
[L14842]  CALL        call CorralChoice_MainToken(this);
[L14499]              havoc msgsender_MSG;
[L14500]              havoc msgvalue_MSG;
[L14501]              havoc choice;
[L14502]              havoc __ret_0_totalSupply;
[L14503]              havoc _owner_s729;
[L14504]              havoc balance_s729;
[L14505]              havoc _to_s1572;
[L14506]              havoc _value_s1572;
[L14507]              havoc _success_s1572;
[L14508]              havoc _owner_s395;
[L14509]              havoc _spender_s395;
[L14510]              havoc __ret_0_allowance;
[L14511]              havoc _from_s1551;
[L14512]              havoc _to_s1551;
[L14513]              havoc _value_s1551;
[L14514]              havoc _success_s1551;
[L14515]              havoc _spender_s379;
[L14516]              havoc _value_s379;
[L14517]              havoc __ret_0_approve;
[L14518]              havoc _spender_s437;
[L14519]              havoc _addedValue_s437;
[L14520]              havoc __ret_0_increaseApproval;
[L14521]              havoc _spender_s497;
[L14522]              havoc _subtractedValue_s497;
[L14523]              havoc __ret_0_decreaseApproval;
[L14524]              havoc __ret_0_owner;
[L14525]              havoc _newOwner_s558;
[L14526]              havoc __ret_0_mintingFinished;
[L14527]              havoc _to_s664;
[L14528]              havoc _amount_s664;
[L14529]              havoc __ret_0_mint;
[L14530]              havoc __ret_0_finishMinting;
[L14531]              havoc _owner_s742;
[L14532]              havoc balance_s742;
[L14533]              havoc _owner_s754;
[L14534]              havoc balance_s754;
[L14535]              havoc _addr_s792;
[L14536]              havoc count_s792;
[L14537]              havoc _addr_s849;
[L14538]              havoc _index_s849;
[L14539]              havoc _release_s849;
[L14540]              havoc _balance_s849;
[L14541]              havoc _to_s938;
[L14542]              havoc _amount_s938;
[L14543]              havoc _until_s938;
[L14544]              havoc tokens_s1107;
[L14545]              havoc _value_s1261;
[L14546]              havoc __ret_0_paused;
[L14547]              havoc _to_s1449;
[L14548]              havoc _amount_s1449;
[L14549]              havoc _until_s1449;
[L14550]              havoc __ret_0_mintAndFreeze;
[L14551]              havoc __ret_0_TOKEN_DECIMALS;
[L14552]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14553]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14554]              havoc __ret_0_TOKEN_NAME;
[L14555]              havoc __ret_0_TOKEN_SYMBOL;
[L14556]              havoc __ret_0_PAUSED;
[L14557]              havoc __ret_0_TARGET_USER;
[L14558]              havoc __ret_0_CONTINUE_MINTING;
[L14559]              havoc __ret_0_initialized;
[L14560]              havoc _name_s1511;
[L14561]              havoc _symbol_s1519;
[L14562]              havoc _decimals_s1527;
[L14563]              havoc tmpNow;
[L14564]              havoc gas;
[L14565]              assume gas > 4000000 && gas <= 8000000;
[L14566]              tmpNow := now;
[L14567]              havoc now;
[L14568]              assume now > tmpNow;
[L14569]              assume msgsender_MSG != null;
[L14570]              assume DType[msgsender_MSG] != ERC20Basic;
[L14571]              assume DType[msgsender_MSG] != SafeMath;
[L14572]              assume DType[msgsender_MSG] != BasicToken;
[L14573]              assume DType[msgsender_MSG] != ERC20;
[L14574]              assume DType[msgsender_MSG] != StandardToken;
[L14575]              assume DType[msgsender_MSG] != Ownable;
[L14576]              assume DType[msgsender_MSG] != MintableToken;
[L14577]              assume DType[msgsender_MSG] != FreezableToken;
[L14578]              assume DType[msgsender_MSG] != BurnableToken;
[L14579]              assume DType[msgsender_MSG] != Pausable;
[L14580]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14581]              assume DType[msgsender_MSG] != Consts;
[L14582]              assume DType[msgsender_MSG] != MainToken;
[L14583]              Alloc[msgsender_MSG] := true;
[L14584]  COND FALSE  !(choice == 38)
[L14590]  COND FALSE  !(choice == 37)
[L14596]  COND FALSE  !(choice == 36)
[L14603]  COND FALSE  !(choice == 35)
[L14609]  COND TRUE   choice == 34
[L14610]              gas := gas - 21000;
[L14611]  COND TRUE   gas >= 0
[L14612]              assume _value_s1551 >= 0 && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14613]              assume msgvalue_MSG == 0;
[L14614]  CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((((p1 != _from_s1551 && p1 != _to_s1551) && (p2 != _from_s1551 || p3 != msgsender_MSG)) && _from_s1551 != _to_s1551) && _value_s1551 <= balances_BasicToken[this][_from_s1551]) && _value_s1551 <= allowed_StandardToken[this][_from_s1551][msgsender_MSG]) && balances_BasicToken[this][_to_s1551] + _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _value_s1551 >= 0) && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1551] >= 0) && balances_BasicToken[this][_to_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s1551] >= 0) && balances_BasicToken[this][_from_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_MainToken0 := true;
[L3]                  call_transferFrom_MainToken0 := false;
[L3]                  revert := revert_hold;
[L4740]               havoc __exception;
[L4741]               revert := false;
[L4742]   COND TRUE   __exception
[L4743]               __tmp__Balance := Balance;
[L4744]               __tmp__DType := DType;
[L4745]               __tmp__Alloc := Alloc;
[L4746]               __tmp__balance_ADDR := balance_ADDR;
[L4747]               __tmp__M_Ref_int := M_Ref_int;
[L4748]               __tmp__sum_balances0 := sum_balances0;
[L4749]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L4750]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L4751]               __tmp__sum_allowed1 := sum_allowed1;
[L4752]               __tmp__M_int_int := M_int_int;
[L4753]               __tmp__sum_chains2 := sum_chains2;
[L4754]               __tmp__sum_freezings3 := sum_freezings3;
[L4755]               __tmp__sum_freezingBalance4 := sum_freezingBalance4;
[L4756]               __tmp__M_int_Ref := M_int_Ref;
[L4757]               __tmp__sum := sum;
[L4758]               __tmp__Length := Length;
[L4759]               __tmp__now := now;
[L4760]               __tmp__balances_BasicToken := balances_BasicToken;
[L4761]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L4762]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L4763]               __tmp__owner_Ownable := owner_Ownable;
[L4764]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L4765]               __tmp__chains_FreezableToken := chains_FreezableToken;
[L4766]               __tmp__freezings_FreezableToken := freezings_FreezableToken;
[L4767]               __tmp__freezingBalance_FreezableToken := freezingBalance_FreezableToken;
[L4768]               __tmp__paused_Pausable := paused_Pausable;
[L4769]               __tmp__TOKEN_DECIMALS_Consts := TOKEN_DECIMALS_Consts;
[L4770]               __tmp__TOKEN_DECIMALS_UINT8_Consts := TOKEN_DECIMALS_UINT8_Consts;
[L4771]               __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts := TOKEN_DECIMAL_MULTIPLIER_Consts;
[L4772]               __tmp__TOKEN_NAME_Consts := TOKEN_NAME_Consts;
[L4773]               __tmp__TOKEN_SYMBOL_Consts := TOKEN_SYMBOL_Consts;
[L4774]               __tmp__PAUSED_Consts := PAUSED_Consts;
[L4775]               __tmp__TARGET_USER_Consts := TARGET_USER_Consts;
[L4776]               __tmp__CONTINUE_MINTING_Consts := CONTINUE_MINTING_Consts;
[L4777]               __tmp__initialized_MainToken := initialized_MainToken;
[L4778]   CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L9621]   COND FALSE  !(!!__tmp__paused_Pausable[this])
[L9625]   COND TRUE   __tmp__DType[this] == MainToken
[L9626]   CALL        call __var_53 := transferFrom~address~address~uint256_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L7096]               __var_4 := null;
[L7097]   COND TRUE   !(_to_s351 != null)
[L7098]               revert := true;
[L9626]   RET         call __var_53 := transferFrom~address~address~uint256_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L9627]   COND TRUE   revert
[L4778]   RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L4779]               assume revert || gas < 0;
[L14614]  RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L14842]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:22:33,246 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:22:33,246 INFO  L82        PathProgramCache]: Analyzing trace with hash -1807630066, now seen corresponding path program 1 times
[2020-11-24 21:22:33,247 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:22:33,299 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 21:22:33,353 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 21:22:33,742 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:22:33,742 INFO  L82        PathProgramCache]: Analyzing trace with hash -1008955940, now seen corresponding path program 1 times
[2020-11-24 21:22:33,743 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:22:33,748 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 21:22:33,754 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 21:22:33,768 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:22:33,768 INFO  L82        PathProgramCache]: Analyzing trace with hash -1266863889, now seen corresponding path program 1 times
[2020-11-24 21:22:33,769 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:22:33,824 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 21:22:33,887 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #5: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #4: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #5: 397 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 397 to 787
[2020-11-24 21:22:34,496 WARN  L188               SmtUtils]: Spent 233.00 ms on a formula simplification. DAG size of input: 216 DAG size of output: 209
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1237 to 2473
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #7: 4027 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 4027 to 8053
Garbage collection #8: 8053 nodes / 0 free / 0.002s / 0.003s total
Resizing node table from 8053 to 16103
[2020-11-24 21:22:34,738 WARN  L188               SmtUtils]: Spent 214.00 ms on a formula simplification. DAG size of input: 167 DAG size of output: 161
[2020-11-24 21:22:35,079 WARN  L188               SmtUtils]: Spent 339.00 ms on a formula simplification that was a NOOP. DAG size: 391
Garbage collection #1: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #2: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #3: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #4: 1237 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 1237 to 2473
Garbage collection #5: 2473 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 2473 to 4943
Garbage collection #6: 4943 nodes / 0 free / 0.001s / 0.003s total
Resizing node table from 4943 to 9883
Garbage collection #7: 9883 nodes / 0 free / 0.002s / 0.005s total
Resizing node table from 9883 to 19763
[2020-11-24 21:22:36,146 WARN  L188               SmtUtils]: Spent 1.03 s on a formula simplification. DAG size of input: 315 DAG size of output: 315
[2020-11-24 21:22:37,567 WARN  L188               SmtUtils]: Spent 1.42 s on a formula simplification. DAG size of input: 394 DAG size of output: 378
Garbage collection #1: 137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 137 to 271
Garbage collection #2: 271 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 271 to 541
Garbage collection #3: 541 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 541 to 1069
Garbage collection #4: 1069 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1069 to 2137
Garbage collection #5: 2137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2137 to 4273
Garbage collection #6: 4273 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 4273 to 8543
Garbage collection #7: 8543 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 8543 to 17077
Garbage collection #8: 17077 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 17077 to 34147
Garbage collection #9: 34147 nodes / 0 free / 0.0s / 0.002s total
Resizing node table from 34147 to 68281
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #7: 6037 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6037 to 12073
Garbage collection #8: 12073 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 12073 to 24137
[2020-11-24 21:22:38,217 WARN  L188               SmtUtils]: Spent 603.00 ms on a formula simplification. DAG size of input: 259 DAG size of output: 235
[2020-11-24 21:22:38,721 WARN  L188               SmtUtils]: Spent 502.00 ms on a formula simplification that was a NOOP. DAG size: 500
Garbage collection #1: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #2: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #3: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #4: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #5: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
Garbage collection #6: 6271 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6271 to 12541
Garbage collection #7: 12541 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 12541 to 25073
Garbage collection #8: 25073 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 25073 to 50131
[2020-11-24 21:22:39,864 WARN  L188               SmtUtils]: Spent 1.11 s on a formula simplification. DAG size of input: 413 DAG size of output: 403
[2020-11-24 21:22:40,419 WARN  L188               SmtUtils]: Spent 551.00 ms on a formula simplification that was a NOOP. DAG size: 403
Garbage collection #1: 151 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 151 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4591 to 9181
Garbage collection #7: 9181 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9181 to 18353
Garbage collection #8: 18353 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 18353 to 36697
Garbage collection #9: 36697 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 36697 to 73387
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #7: 6037 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6037 to 12073
Garbage collection #8: 12073 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 12073 to 24137
[2020-11-24 21:22:41,611 WARN  L188               SmtUtils]: Spent 1.14 s on a formula simplification. DAG size of input: 265 DAG size of output: 249
[2020-11-24 21:22:41,622 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #1: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #2: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #3: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #4: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #5: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #1: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #2: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #3: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #4: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #5: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
[2020-11-24 21:22:43,091 WARN  L188               SmtUtils]: Spent 220.00 ms on a formula simplification. DAG size of input: 264 DAG size of output: 250
Garbage collection #1: 101 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 101 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
[2020-11-24 21:22:43,595 WARN  L188               SmtUtils]: Spent 211.00 ms on a formula simplification. DAG size of input: 197 DAG size of output: 192
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
[2020-11-24 21:22:51,118 WARN  L188               SmtUtils]: Spent 7.41 s on a formula simplification. DAG size of input: 592 DAG size of output: 564
Garbage collection #1: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #2: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #3: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #4: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #5: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
Garbage collection #6: 6661 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6661 to 13313
Garbage collection #7: 13313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13313 to 26597
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
[2020-11-24 21:22:51,317 WARN  L188               SmtUtils]: Spent 141.00 ms on a formula simplification that was a NOOP. DAG size: 295
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
[2020-11-24 21:22:51,597 WARN  L188               SmtUtils]: Spent 187.00 ms on a formula simplification. DAG size of input: 244 DAG size of output: 243
Garbage collection #1: 71 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 71 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
[2020-11-24 21:22:51,958 WARN  L188               SmtUtils]: Spent 314.00 ms on a formula simplification that was a NOOP. DAG size: 473
Garbage collection #1: 167 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 167 to 331
Garbage collection #2: 331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 331 to 661
Garbage collection #3: 661 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 661 to 1321
Garbage collection #4: 1321 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1321 to 2633
Garbage collection #5: 2633 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2633 to 5261
Garbage collection #6: 5261 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5261 to 10513
Garbage collection #7: 10513 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 10513 to 21023
Garbage collection #1: 137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 137 to 271
Garbage collection #2: 271 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 271 to 541
Garbage collection #3: 541 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 541 to 1069
Garbage collection #4: 1069 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1069 to 2137
Garbage collection #5: 2137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2137 to 4273
Garbage collection #6: 4273 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4273 to 8543
Garbage collection #7: 8543 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 8543 to 17077
[2020-11-24 21:22:52,220 WARN  L188               SmtUtils]: Spent 256.00 ms on a formula simplification that was a NOOP. DAG size: 417
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #5: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #4: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #5: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #6: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
Garbage collection #7: 4943 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 4943 to 9883
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #7: 4027 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4027 to 8053
Garbage collection #8: 8053 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8053 to 16103
[2020-11-24 21:22:52,589 WARN  L188               SmtUtils]: Spent 167.00 ms on a formula simplification. DAG size of input: 167 DAG size of output: 161
[2020-11-24 21:22:52,779 WARN  L188               SmtUtils]: Spent 189.00 ms on a formula simplification that was a NOOP. DAG size: 391
Garbage collection #1: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #2: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #3: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #4: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #5: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
Garbage collection #6: 4943 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4943 to 9883
Garbage collection #7: 9883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9883 to 19763
Garbage collection #8: 19763 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19763 to 39521
[2020-11-24 21:22:53,846 WARN  L188               SmtUtils]: Spent 1.05 s on a formula simplification. DAG size of input: 315 DAG size of output: 315
[2020-11-24 21:22:55,193 WARN  L188               SmtUtils]: Spent 1.34 s on a formula simplification. DAG size of input: 393 DAG size of output: 378
Garbage collection #1: 137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 137 to 271
Garbage collection #2: 271 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 271 to 541
Garbage collection #3: 541 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 541 to 1069
Garbage collection #4: 1069 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1069 to 2137
Garbage collection #5: 2137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2137 to 4273
Garbage collection #6: 4273 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4273 to 8543
Garbage collection #7: 8543 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8543 to 17077
Garbage collection #8: 17077 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 17077 to 34147
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
Garbage collection #7: 5281 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5281 to 10559
Garbage collection #8: 10559 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 10559 to 21107
[2020-11-24 21:22:55,592 WARN  L188               SmtUtils]: Spent 373.00 ms on a formula simplification. DAG size of input: 235 DAG size of output: 229
[2020-11-24 21:22:55,970 WARN  L188               SmtUtils]: Spent 376.00 ms on a formula simplification that was a NOOP. DAG size: 494
Garbage collection #1: 197 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 197 to 389
Garbage collection #2: 389 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 389 to 773
Garbage collection #3: 773 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 773 to 1543
Garbage collection #4: 1543 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1543 to 3083
Garbage collection #5: 3083 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3083 to 6163
Garbage collection #6: 6163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6163 to 12323
Garbage collection #7: 12323 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 12323 to 24631
Garbage collection #8: 24631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 24631 to 49261
[2020-11-24 21:22:56,944 WARN  L188               SmtUtils]: Spent 960.00 ms on a formula simplification. DAG size of input: 401 DAG size of output: 401
[2020-11-24 21:23:00,002 WARN  L188               SmtUtils]: Spent 3.06 s on a formula simplification. DAG size of input: 766 DAG size of output: 746
Garbage collection #1: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #2: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #3: 1153 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1153 to 2297
Garbage collection #4: 2297 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2297 to 4591
Garbage collection #5: 4591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4591 to 9181
Garbage collection #6: 9181 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9181 to 18353
Garbage collection #7: 18353 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 18353 to 36697
Garbage collection #8: 36697 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 36697 to 73387
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #7: 7933 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7933 to 15859
[2020-11-24 21:23:01,079 WARN  L188               SmtUtils]: Spent 1.03 s on a formula simplification. DAG size of input: 390 DAG size of output: 366
[2020-11-24 21:23:01,859 WARN  L188               SmtUtils]: Spent 734.00 ms on a formula simplification that was a NOOP. DAG size: 552
Garbage collection #1: 191 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 191 to 379
Garbage collection #2: 379 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 379 to 757
Garbage collection #3: 757 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 757 to 1511
Garbage collection #4: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #5: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #6: 6037 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6037 to 12073
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #7: 7933 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7933 to 15859
Garbage collection #8: 15859 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 15859 to 31699
Garbage collection #9: 31699 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 31699 to 63397
Garbage collection #10: 63397 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 63397 to 113383
[2020-11-24 21:23:02,804 WARN  L188               SmtUtils]: Spent 847.00 ms on a formula simplification. DAG size of input: 375 DAG size of output: 356
[2020-11-24 21:23:04,204 WARN  L188               SmtUtils]: Spent 1.40 s on a formula simplification. DAG size of input: 544 DAG size of output: 543
Garbage collection #1: 191 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 191 to 379
Garbage collection #2: 379 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 379 to 757
Garbage collection #3: 757 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 757 to 1511
Garbage collection #4: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #5: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #6: 6037 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6037 to 12073
Garbage collection #7: 12073 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 12073 to 24137
Garbage collection #1: 191 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 191 to 379
Garbage collection #2: 379 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 379 to 757
Garbage collection #3: 757 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 757 to 1511
Garbage collection #4: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #5: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #6: 6037 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6037 to 12073
Garbage collection #7: 12073 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 12073 to 24137
Garbage collection #8: 24137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 24137 to 48271
Garbage collection #9: 48271 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 48271 to 96527
Garbage collection #10: 96527 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 96527 to 146527
Garbage collection #11: 146527 nodes / 0 free / 0.003s / 0.005s total
Resizing node table from 146527 to 196523
[2020-11-24 21:23:06,254 WARN  L188               SmtUtils]: Spent 2.00 s on a formula simplification. DAG size of input: 561 DAG size of output: 538
[2020-11-24 21:23:06,295 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 21:23:06,345 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 21:23:06,364 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 24.11 09:23:06 BasicIcfg
[2020-11-24 21:23:06,364 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-24 21:23:06,365 INFO  L168              Benchmark]: Toolchain (without parser) took 53344.24 ms. Allocated memory was 1.0 GB in the beginning and 4.8 GB in the end (delta: 3.8 GB). Free memory was 913.7 MB in the beginning and 1.2 GB in the end (delta: -263.5 MB). Peak memory consumption was 4.0 GB. Max. memory is 15.3 GB.
[2020-11-24 21:23:06,365 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.37 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-24 21:23:06,365 INFO  L168              Benchmark]: Boogie Preprocessor took 191.62 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 886.9 MB in the end (delta: 26.8 MB). Peak memory consumption was 26.8 MB. Max. memory is 15.3 GB.
[2020-11-24 21:23:06,366 INFO  L168              Benchmark]: UtopiaSpecLang took 106.64 ms. Allocated memory is still 1.0 GB. Free memory was 886.9 MB in the beginning and 865.4 MB in the end (delta: 21.5 MB). Peak memory consumption was 21.5 MB. Max. memory is 15.3 GB.
[2020-11-24 21:23:06,366 INFO  L168              Benchmark]: Boogie Printer took 34.65 ms. Allocated memory is still 1.0 GB. Free memory was 865.4 MB in the beginning and 860.0 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-24 21:23:06,366 INFO  L168              Benchmark]: RCFGBuilder took 1852.53 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 162.0 MB). Free memory was 860.0 MB in the beginning and 1.0 GB in the end (delta: -181.8 MB). Peak memory consumption was 241.9 MB. Max. memory is 15.3 GB.
[2020-11-24 21:23:06,366 INFO  L168              Benchmark]: UtopiaLTL2Aut took 34.55 ms. Allocated memory is still 1.2 GB. Free memory was 1.0 GB in the beginning and 1.0 GB in the end (delta: 7.1 MB). Peak memory consumption was 7.1 MB. Max. memory is 15.3 GB.
[2020-11-24 21:23:06,367 INFO  L168              Benchmark]: BÃ¼chi Program Product took 4363.16 ms. Allocated memory was 1.2 GB in the beginning and 1.5 GB in the end (delta: 345.5 MB). Free memory was 1.0 GB in the beginning and 693.1 MB in the end (delta: 341.7 MB). Peak memory consumption was 758.3 MB. Max. memory is 15.3 GB.
[2020-11-24 21:23:06,367 INFO  L168              Benchmark]: BlockEncodingV2 took 416.43 ms. Allocated memory was 1.5 GB in the beginning and 2.0 GB in the end (delta: 414.2 MB). Free memory was 693.1 MB in the beginning and 1.6 GB in the end (delta: -905.8 MB). Peak memory consumption was 118.3 MB. Max. memory is 15.3 GB.
[2020-11-24 21:23:06,367 INFO  L168              Benchmark]: BuchiAutomizer took 46341.56 ms. Allocated memory was 2.0 GB in the beginning and 4.8 GB in the end (delta: 2.8 GB). Free memory was 1.6 GB in the beginning and 1.2 GB in the end (delta: 421.6 MB). Peak memory consumption was 3.7 GB. Max. memory is 15.3 GB.
[2020-11-24 21:23:06,370 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    13522 locations, 24828 edges
  - StatisticsResult: Encoded RCFG
    13312 locations, 24242 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.37 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 191.62 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 886.9 MB in the end (delta: 26.8 MB). Peak memory consumption was 26.8 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 106.64 ms. Allocated memory is still 1.0 GB. Free memory was 886.9 MB in the beginning and 865.4 MB in the end (delta: 21.5 MB). Peak memory consumption was 21.5 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 34.65 ms. Allocated memory is still 1.0 GB. Free memory was 865.4 MB in the beginning and 860.0 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 1852.53 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 162.0 MB). Free memory was 860.0 MB in the beginning and 1.0 GB in the end (delta: -181.8 MB). Peak memory consumption was 241.9 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 34.55 ms. Allocated memory is still 1.2 GB. Free memory was 1.0 GB in the beginning and 1.0 GB in the end (delta: 7.1 MB). Peak memory consumption was 7.1 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 4363.16 ms. Allocated memory was 1.2 GB in the beginning and 1.5 GB in the end (delta: 345.5 MB). Free memory was 1.0 GB in the beginning and 693.1 MB in the end (delta: 341.7 MB). Peak memory consumption was 758.3 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 416.43 ms. Allocated memory was 1.5 GB in the beginning and 2.0 GB in the end (delta: 414.2 MB). Free memory was 693.1 MB in the beginning and 1.6 GB in the end (delta: -905.8 MB). Peak memory consumption was 118.3 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 46341.56 ms. Allocated memory was 2.0 GB in the beginning and 4.8 GB in the end (delta: 2.8 GB). Free memory was 1.6 GB in the beginning and 1.2 GB in the end (delta: 421.6 MB). Peak memory consumption was 3.7 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    5421 locations, 7597 edges
  - StatisticsResult: BuchiProgram size
    13522 locations, 24828 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 5 terminating modules (5 trivial, 0 deterministic, 0 nondeterministic) and one nonterminating remainder module.5 modules have a trivial ranking function, the largest among these consists of 12 locations. The remainder module has 11660 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 46.2s and 6 iterations.  TraceHistogramMax:38. Analysis of lassos took 35.5s. Construction of modules took 6.7s. BÃ¼chi inclusion checks took 2.6s. Highest rank in rank-based complementation 0. Minimization of det autom 5. Minimization of nondet autom 0. Automata minimization 0.5s AutomataMinimizationTime, 5 MinimizatonAttempts, 4101 StatesRemovedByMinimization, 3 NontrivialMinimizations. Non-live state removal took 0.3s Buchi closure took 0.0s. Biggest automaton had 11723 states and ocurred in iteration 4.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 49947 SDtfs, 37581 SDslu, 69448 SDs, 0 SdLazy, 97101 SolverSat, 8231 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 6.7s Time	LassoAnalysisResults: nont1 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU5 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - TransactionCounterexample: Violation of LTL property LTL
    Found an infinite, lasso-shaped execution that violates the LTL property LTL.
Stem:
address(687691456480424918299425112376782193233251990451) = (new MainToken)({from : 687691456480424918299425112376782193233251990458});
[L4392]               havoc __exception;
[L4393]               revert := false;
[L4394]   COND FALSE  !(__exception)
[L4433]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9531]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9333]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9309]               assume msgsender_MSG != null;
[L9310]               Balance[this] := 0;
[L9311]               TOKEN_DECIMALS_Consts[this] := 18;
[L9312]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9313]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9314]               TOKEN_NAME_Consts[this] := -1142012261;
[L9315]               TOKEN_SYMBOL_Consts[this] := 360831912;
[L9316]               PAUSED_Consts[this] := false;
[L9317]               __var_52 := ConstantToRef(687691456480424918299425112376782193233251990427);
[L9318]               TARGET_USER_Consts[this] := ConstantToRef(687691456480424918299425112376782193233251990427);
[L9319]               CONTINUE_MINTING_Consts[this] := true;
[L9333]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9334]   COND FALSE  !(revert)
[L9531]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9532]   COND FALSE  !(revert)
[L9535]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L9535]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9536]   COND FALSE  !(revert)
[L9539]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7020]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]               assume msgsender_MSG != null;
[L7002]               Balance[this] := 0;
[L7024]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L9539]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9540]   COND FALSE  !(revert)
[L9543]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6891]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6892]   COND FALSE  !(revert)
[L6895]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6869]               assume msgsender_MSG != null;
[L6870]               Balance[this] := 0;
[L6871]               balances_BasicToken[this] := zeroRefintArr();
[L6872]               sum_balances0[this] := 0;
[L6873]               totalSupply__BasicToken[this] := 0;
[L6895]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6896]   COND FALSE  !(revert)
[L9543]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9544]   COND FALSE  !(revert)
[L9547]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7072]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7073]   COND FALSE  !(revert)
[L7076]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7020]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]               assume msgsender_MSG != null;
[L7002]               Balance[this] := 0;
[L7024]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7076]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7077]   COND FALSE  !(revert)
[L7080]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6891]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6892]   COND FALSE  !(revert)
[L6895]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6869]               assume msgsender_MSG != null;
[L6870]               Balance[this] := 0;
[L6871]               balances_BasicToken[this] := zeroRefintArr();
[L6872]               sum_balances0[this] := 0;
[L6873]               totalSupply__BasicToken[this] := 0;
[L6895]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6896]   COND FALSE  !(revert)
[L7080]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7081]   COND FALSE  !(revert)
[L7084]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7043]               assume msgsender_MSG != null;
[L7044]               Balance[this] := 0;
[L7045]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7046]               sum_allowed1[this] := 0;
[L7084]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7085]   COND FALSE  !(revert)
[L9547]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9548]   COND FALSE  !(revert)
[L9551]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7679]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7680]   COND FALSE  !(revert)
[L7683]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7020]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]               assume msgsender_MSG != null;
[L7002]               Balance[this] := 0;
[L7024]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7683]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7684]   COND FALSE  !(revert)
[L7687]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6891]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6892]   COND FALSE  !(revert)
[L6895]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6869]               assume msgsender_MSG != null;
[L6870]               Balance[this] := 0;
[L6871]               balances_BasicToken[this] := zeroRefintArr();
[L6872]               sum_balances0[this] := 0;
[L6873]               totalSupply__BasicToken[this] := 0;
[L6895]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6896]   COND FALSE  !(revert)
[L7687]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7688]   COND FALSE  !(revert)
[L7691]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7072]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7073]   COND FALSE  !(revert)
[L7076]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7020]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]               assume msgsender_MSG != null;
[L7002]               Balance[this] := 0;
[L7024]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7076]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7077]   COND FALSE  !(revert)
[L7080]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6891]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6892]   COND FALSE  !(revert)
[L6895]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6869]               assume msgsender_MSG != null;
[L6870]               Balance[this] := 0;
[L6871]               balances_BasicToken[this] := zeroRefintArr();
[L6872]               sum_balances0[this] := 0;
[L6873]               totalSupply__BasicToken[this] := 0;
[L6895]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6896]   COND FALSE  !(revert)
[L7080]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7081]   COND FALSE  !(revert)
[L7084]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7043]               assume msgsender_MSG != null;
[L7044]               Balance[this] := 0;
[L7045]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7046]               sum_allowed1[this] := 0;
[L7084]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7085]   COND FALSE  !(revert)
[L7691]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7692]   COND FALSE  !(revert)
[L7695]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7642]               assume msgsender_MSG != null;
[L7643]               Balance[this] := 0;
[L7644]               chains_FreezableToken[this] := zerointintArr();
[L7645]               sum_chains2[this] := 0;
[L7646]               freezings_FreezableToken[this] := zerointintArr();
[L7647]               sum_freezings3[this] := 0;
[L7648]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7649]               sum_freezingBalance4[this] := 0;
[L7695]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7696]   COND FALSE  !(revert)
[L9551]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9552]   COND FALSE  !(revert)
[L9555]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7297]               assume msgsender_MSG != null;
[L7298]               Balance[this] := 0;
[L7299]               owner_Ownable[this] := null;
[L7301]               owner_Ownable[this] := msgsender_MSG;
[L7314]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7315]   COND FALSE  !(revert)
[L9555]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9556]   COND FALSE  !(revert)
[L9559]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7498]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7499]   COND FALSE  !(revert)
[L7502]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7020]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]               assume msgsender_MSG != null;
[L7002]               Balance[this] := 0;
[L7024]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7502]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7503]   COND FALSE  !(revert)
[L7506]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6891]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6892]   COND FALSE  !(revert)
[L6895]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6869]               assume msgsender_MSG != null;
[L6870]               Balance[this] := 0;
[L6871]               balances_BasicToken[this] := zeroRefintArr();
[L6872]               sum_balances0[this] := 0;
[L6873]               totalSupply__BasicToken[this] := 0;
[L6895]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6896]   COND FALSE  !(revert)
[L7506]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7507]   COND FALSE  !(revert)
[L7510]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7072]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7073]   COND FALSE  !(revert)
[L7076]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7020]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]               assume msgsender_MSG != null;
[L7002]               Balance[this] := 0;
[L7024]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7076]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7077]   COND FALSE  !(revert)
[L7080]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6891]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6892]   COND FALSE  !(revert)
[L6895]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6869]               assume msgsender_MSG != null;
[L6870]               Balance[this] := 0;
[L6871]               balances_BasicToken[this] := zeroRefintArr();
[L6872]               sum_balances0[this] := 0;
[L6873]               totalSupply__BasicToken[this] := 0;
[L6895]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6896]   COND FALSE  !(revert)
[L7080]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7081]   COND FALSE  !(revert)
[L7084]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7043]               assume msgsender_MSG != null;
[L7044]               Balance[this] := 0;
[L7045]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7046]               sum_allowed1[this] := 0;
[L7084]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7085]   COND FALSE  !(revert)
[L7510]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7511]   COND FALSE  !(revert)
[L7514]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7297]               assume msgsender_MSG != null;
[L7298]               Balance[this] := 0;
[L7299]               owner_Ownable[this] := null;
[L7301]               owner_Ownable[this] := msgsender_MSG;
[L7314]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7315]   COND FALSE  !(revert)
[L7514]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7515]   COND FALSE  !(revert)
[L7518]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]               assume msgsender_MSG != null;
[L7463]               Balance[this] := 0;
[L7464]               mintingFinished_MintableToken[this] := false;
[L7518]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7519]   COND FALSE  !(revert)
[L9559]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9560]   COND FALSE  !(revert)
[L9563]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9118]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L9118]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9119]   COND FALSE  !(revert)
[L9122]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7020]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]               assume msgsender_MSG != null;
[L7002]               Balance[this] := 0;
[L7024]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L9122]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9123]   COND FALSE  !(revert)
[L9126]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6891]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6892]   COND FALSE  !(revert)
[L6895]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6869]               assume msgsender_MSG != null;
[L6870]               Balance[this] := 0;
[L6871]               balances_BasicToken[this] := zeroRefintArr();
[L6872]               sum_balances0[this] := 0;
[L6873]               totalSupply__BasicToken[this] := 0;
[L6895]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6896]   COND FALSE  !(revert)
[L9126]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9127]   COND FALSE  !(revert)
[L9130]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7072]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7073]   COND FALSE  !(revert)
[L7076]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7020]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]               assume msgsender_MSG != null;
[L7002]               Balance[this] := 0;
[L7024]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7076]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7077]   COND FALSE  !(revert)
[L7080]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6891]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6892]   COND FALSE  !(revert)
[L6895]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6869]               assume msgsender_MSG != null;
[L6870]               Balance[this] := 0;
[L6871]               balances_BasicToken[this] := zeroRefintArr();
[L6872]               sum_balances0[this] := 0;
[L6873]               totalSupply__BasicToken[this] := 0;
[L6895]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6896]   COND FALSE  !(revert)
[L7080]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7081]   COND FALSE  !(revert)
[L7084]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7043]               assume msgsender_MSG != null;
[L7044]               Balance[this] := 0;
[L7045]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7046]               sum_allowed1[this] := 0;
[L7084]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7085]   COND FALSE  !(revert)
[L9130]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9131]   COND FALSE  !(revert)
[L9134]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7679]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7680]   COND FALSE  !(revert)
[L7683]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7020]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]               assume msgsender_MSG != null;
[L7002]               Balance[this] := 0;
[L7024]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7683]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7684]   COND FALSE  !(revert)
[L7687]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6891]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6892]   COND FALSE  !(revert)
[L6895]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6869]               assume msgsender_MSG != null;
[L6870]               Balance[this] := 0;
[L6871]               balances_BasicToken[this] := zeroRefintArr();
[L6872]               sum_balances0[this] := 0;
[L6873]               totalSupply__BasicToken[this] := 0;
[L6895]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6896]   COND FALSE  !(revert)
[L7687]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7688]   COND FALSE  !(revert)
[L7691]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7072]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7073]   COND FALSE  !(revert)
[L7076]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7020]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]               assume msgsender_MSG != null;
[L7002]               Balance[this] := 0;
[L7024]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7076]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7077]   COND FALSE  !(revert)
[L7080]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6891]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6892]   COND FALSE  !(revert)
[L6895]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6869]               assume msgsender_MSG != null;
[L6870]               Balance[this] := 0;
[L6871]               balances_BasicToken[this] := zeroRefintArr();
[L6872]               sum_balances0[this] := 0;
[L6873]               totalSupply__BasicToken[this] := 0;
[L6895]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6896]   COND FALSE  !(revert)
[L7080]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7081]   COND FALSE  !(revert)
[L7084]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7043]               assume msgsender_MSG != null;
[L7044]               Balance[this] := 0;
[L7045]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7046]               sum_allowed1[this] := 0;
[L7084]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7085]   COND FALSE  !(revert)
[L7691]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7692]   COND FALSE  !(revert)
[L7695]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7642]               assume msgsender_MSG != null;
[L7643]               Balance[this] := 0;
[L7644]               chains_FreezableToken[this] := zerointintArr();
[L7645]               sum_chains2[this] := 0;
[L7646]               freezings_FreezableToken[this] := zerointintArr();
[L7647]               sum_freezings3[this] := 0;
[L7648]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7649]               sum_freezingBalance4[this] := 0;
[L7695]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7696]   COND FALSE  !(revert)
[L9134]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9135]   COND FALSE  !(revert)
[L9138]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7297]               assume msgsender_MSG != null;
[L7298]               Balance[this] := 0;
[L7299]               owner_Ownable[this] := null;
[L7301]               owner_Ownable[this] := msgsender_MSG;
[L7314]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7315]   COND FALSE  !(revert)
[L9138]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9139]   COND FALSE  !(revert)
[L9142]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7498]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7499]   COND FALSE  !(revert)
[L7502]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7020]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]               assume msgsender_MSG != null;
[L7002]               Balance[this] := 0;
[L7024]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7502]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7503]   COND FALSE  !(revert)
[L7506]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6891]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6892]   COND FALSE  !(revert)
[L6895]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6869]               assume msgsender_MSG != null;
[L6870]               Balance[this] := 0;
[L6871]               balances_BasicToken[this] := zeroRefintArr();
[L6872]               sum_balances0[this] := 0;
[L6873]               totalSupply__BasicToken[this] := 0;
[L6895]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6896]   COND FALSE  !(revert)
[L7506]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7507]   COND FALSE  !(revert)
[L7510]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7072]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7073]   COND FALSE  !(revert)
[L7076]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L7020]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]               assume msgsender_MSG != null;
[L7002]               Balance[this] := 0;
[L7024]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7076]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7077]   COND FALSE  !(revert)
[L7080]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6891]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6892]   COND FALSE  !(revert)
[L6895]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6869]               assume msgsender_MSG != null;
[L6870]               Balance[this] := 0;
[L6871]               balances_BasicToken[this] := zeroRefintArr();
[L6872]               sum_balances0[this] := 0;
[L6873]               totalSupply__BasicToken[this] := 0;
[L6895]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6896]   COND FALSE  !(revert)
[L7080]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7081]   COND FALSE  !(revert)
[L7084]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7043]               assume msgsender_MSG != null;
[L7044]               Balance[this] := 0;
[L7045]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7046]               sum_allowed1[this] := 0;
[L7084]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7085]   COND FALSE  !(revert)
[L7510]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7511]   COND FALSE  !(revert)
[L7514]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7297]               assume msgsender_MSG != null;
[L7298]               Balance[this] := 0;
[L7299]               owner_Ownable[this] := null;
[L7301]               owner_Ownable[this] := msgsender_MSG;
[L7314]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7315]   COND FALSE  !(revert)
[L7514]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7515]   COND FALSE  !(revert)
[L7518]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]               assume msgsender_MSG != null;
[L7463]               Balance[this] := 0;
[L7464]               mintingFinished_MintableToken[this] := false;
[L7518]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7519]   COND FALSE  !(revert)
[L9142]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9143]   COND FALSE  !(revert)
[L9146]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9075]               assume msgsender_MSG != null;
[L9076]               Balance[this] := 0;
[L9146]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9147]   COND FALSE  !(revert)
[L9563]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9564]   COND FALSE  !(revert)
[L9567]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8862]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L8862]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8863]   COND FALSE  !(revert)
[L8866]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]               assume msgsender_MSG != null;
[L6740]               Balance[this] := 0;
[L6754]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6891]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6892]   COND FALSE  !(revert)
[L6895]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6869]               assume msgsender_MSG != null;
[L6870]               Balance[this] := 0;
[L6871]               balances_BasicToken[this] := zeroRefintArr();
[L6872]               sum_balances0[this] := 0;
[L6873]               totalSupply__BasicToken[this] := 0;
[L6895]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6896]   COND FALSE  !(revert)
[L8866]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8867]   COND FALSE  !(revert)
[L8870]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8839]               assume msgsender_MSG != null;
[L8840]               Balance[this] := 0;
[L8870]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8871]   COND FALSE  !(revert)
[L9567]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9568]   COND FALSE  !(revert)
[L9571]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8988]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7297]               assume msgsender_MSG != null;
[L7298]               Balance[this] := 0;
[L7299]               owner_Ownable[this] := null;
[L7301]               owner_Ownable[this] := msgsender_MSG;
[L7314]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7315]   COND FALSE  !(revert)
[L8988]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8989]   COND FALSE  !(revert)
[L8992]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8968]               assume msgsender_MSG != null;
[L8969]               Balance[this] := 0;
[L8970]               paused_Pausable[this] := false;
[L8992]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8993]   COND FALSE  !(revert)
[L9571]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9572]   COND FALSE  !(revert)
[L9575]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9459]               assume msgsender_MSG != null;
[L9460]               Balance[this] := 0;
[L9461]               initialized_MainToken[this] := false;
[L9463]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9802]   COND FALSE  !(!!initialized_MainToken[this])
[L9806]               initialized_MainToken[this] := true;
[L9807]   COND FALSE  !(PAUSED_Consts[this])
[L9817]               havoc addresses_s1709;
[L9818]               __var_57 := ConstantToRef(389942227696498629531603431436390714308169371997);
[L9819]               M_int_Ref[addresses_s1709][0] := __var_57;
[L9820]               __var_58 := ConstantToRef(389942227696498629531603431436390714308169371997);
[L9821]               M_int_Ref[addresses_s1709][1] := __var_58;
[L9822]               havoc amounts_s1709;
[L9823]               __var_59 := 48000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9824]               sum[amounts_s1709] := sum[amounts_s1709] - M_int_int[amounts_s1709][0];
[L9825]               M_int_int[amounts_s1709][0] := __var_59;
[L9826]               sum[amounts_s1709] := sum[amounts_s1709] + M_int_int[amounts_s1709][0];
[L9827]               __var_60 := 6000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9828]               sum[amounts_s1709] := sum[amounts_s1709] - M_int_int[amounts_s1709][1];
[L9829]               M_int_int[amounts_s1709][1] := __var_60;
[L9830]               sum[amounts_s1709] := sum[amounts_s1709] + M_int_int[amounts_s1709][1];
[L9831]               havoc freezes_s1709;
[L9832]               __var_61 := 0 % 18446744073709551616;
[L9833]               sum[freezes_s1709] := sum[freezes_s1709] - M_int_int[freezes_s1709][0];
[L9834]               M_int_int[freezes_s1709][0] := __var_61;
[L9835]               sum[freezes_s1709] := sum[freezes_s1709] + M_int_int[freezes_s1709][0];
[L9836]               __var_62 := 0 % 18446744073709551616;
[L9837]               sum[freezes_s1709] := sum[freezes_s1709] - M_int_int[freezes_s1709][1];
[L9838]               M_int_int[freezes_s1709][1] := __var_62;
[L9839]               sum[freezes_s1709] := sum[freezes_s1709] + M_int_int[freezes_s1709][1];
[L9840]               i_s1709 := 0;
[L9841]   COND FALSE  !(i_s1709 < Length[addresses_s1709])
[L9865]   COND FALSE  !(!CONTINUE_MINTING_Consts[this])
[L9875]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9463]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9464]   COND FALSE  !(revert)
[L9467]   COND TRUE   DType[this] == MainToken
[L9468]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7381]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12786]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7381]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7382]   COND FALSE  !(revert)
[L7385]   COND TRUE   DType[this] == MainToken
[L7386]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7429]               __var_11 := null;
[L7430]   COND FALSE  !(!(_newOwner_s581 != null))
[L7434]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7435]               owner_Ownable[this] := _newOwner_s581;
[L7386]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7387]   COND FALSE  !(revert)
[L9468]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9469]   COND FALSE  !(revert)
[L9575]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9576]   COND FALSE  !(revert)
[L4433]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4434]               assume !revert && gas >= 0;
[L14838]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
MainToken(687691456480424918299425112376782193233251990451).transferFrom~address~address~uint256.gas(3979002)({from : 687691456480424918299425112376782193233251990447, _from : 687691456480424918299425112376782193233251990455, _to : 0, _value : 0});
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((((p1 != _from_s1551 && p1 != _to_s1551) && (p2 != _from_s1551 || p3 != msgsender_MSG)) && _from_s1551 != _to_s1551) && _value_s1551 <= balances_BasicToken[this][_from_s1551]) && _value_s1551 <= allowed_StandardToken[this][_from_s1551][msgsender_MSG]) && balances_BasicToken[this][_to_s1551] + _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _value_s1551 >= 0) && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1551] >= 0) && balances_BasicToken[this][_to_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s1551] >= 0) && balances_BasicToken[this][_from_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_MainToken0 := true;
[L3]                  call_transferFrom_MainToken0 := false;
[L3]                  revert := revert_hold;
[L4740]               havoc __exception;
[L4741]               revert := false;
[L4742]   COND TRUE   __exception
[L4743]               __tmp__Balance := Balance;
[L4744]               __tmp__DType := DType;
[L4745]               __tmp__Alloc := Alloc;
[L4746]               __tmp__balance_ADDR := balance_ADDR;
[L4747]               __tmp__M_Ref_int := M_Ref_int;
[L4748]               __tmp__sum_balances0 := sum_balances0;
[L4749]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L4750]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L4751]               __tmp__sum_allowed1 := sum_allowed1;
[L4752]               __tmp__M_int_int := M_int_int;
[L4753]               __tmp__sum_chains2 := sum_chains2;
[L4754]               __tmp__sum_freezings3 := sum_freezings3;
[L4755]               __tmp__sum_freezingBalance4 := sum_freezingBalance4;
[L4756]               __tmp__M_int_Ref := M_int_Ref;
[L4757]               __tmp__sum := sum;
[L4758]               __tmp__Length := Length;
[L4759]               __tmp__now := now;
[L4760]               __tmp__balances_BasicToken := balances_BasicToken;
[L4761]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L4762]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L4763]               __tmp__owner_Ownable := owner_Ownable;
[L4764]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L4765]               __tmp__chains_FreezableToken := chains_FreezableToken;
[L4766]               __tmp__freezings_FreezableToken := freezings_FreezableToken;
[L4767]               __tmp__freezingBalance_FreezableToken := freezingBalance_FreezableToken;
[L4768]               __tmp__paused_Pausable := paused_Pausable;
[L4769]               __tmp__TOKEN_DECIMALS_Consts := TOKEN_DECIMALS_Consts;
[L4770]               __tmp__TOKEN_DECIMALS_UINT8_Consts := TOKEN_DECIMALS_UINT8_Consts;
[L4771]               __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts := TOKEN_DECIMAL_MULTIPLIER_Consts;
[L4772]               __tmp__TOKEN_NAME_Consts := TOKEN_NAME_Consts;
[L4773]               __tmp__TOKEN_SYMBOL_Consts := TOKEN_SYMBOL_Consts;
[L4774]               __tmp__PAUSED_Consts := PAUSED_Consts;
[L4775]               __tmp__TARGET_USER_Consts := TARGET_USER_Consts;
[L4776]               __tmp__CONTINUE_MINTING_Consts := CONTINUE_MINTING_Consts;
[L4777]               __tmp__initialized_MainToken := initialized_MainToken;
[L4778]   CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L9621]   COND FALSE  !(!!__tmp__paused_Pausable[this])
[L9625]   COND TRUE   __tmp__DType[this] == MainToken
[L9626]   CALL        call __var_53 := transferFrom~address~address~uint256_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L7096]               __var_4 := null;
[L7097]   COND TRUE   !(_to_s351 != null)
[L7098]               revert := true;
[L9626]   RET         call __var_53 := transferFrom~address~address~uint256_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L9627]   COND TRUE   revert
[L4778]   RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L4779]               assume revert || gas < 0;
[L14614]  RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);

Loop:
MainToken(687691456480424918299425112376782193233251990451).transferFrom~address~address~uint256.gas(3979001)({from : 687691456480424918299425112376782193233251990448, _from : 687691456480424918299425112376782193233251990456, _to : 0, _value : 0});
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((((p1 != _from_s1551 && p1 != _to_s1551) && (p2 != _from_s1551 || p3 != msgsender_MSG)) && _from_s1551 != _to_s1551) && _value_s1551 <= balances_BasicToken[this][_from_s1551]) && _value_s1551 <= allowed_StandardToken[this][_from_s1551][msgsender_MSG]) && balances_BasicToken[this][_to_s1551] + _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _value_s1551 >= 0) && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1551] >= 0) && balances_BasicToken[this][_to_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s1551] >= 0) && balances_BasicToken[this][_from_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_MainToken0 := true;
[L3]                  call_transferFrom_MainToken0 := false;
[L3]                  revert := revert_hold;
[L4740]               havoc __exception;
[L4741]               revert := false;
[L4742]   COND TRUE   __exception
[L4743]               __tmp__Balance := Balance;
[L4744]               __tmp__DType := DType;
[L4745]               __tmp__Alloc := Alloc;
[L4746]               __tmp__balance_ADDR := balance_ADDR;
[L4747]               __tmp__M_Ref_int := M_Ref_int;
[L4748]               __tmp__sum_balances0 := sum_balances0;
[L4749]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L4750]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L4751]               __tmp__sum_allowed1 := sum_allowed1;
[L4752]               __tmp__M_int_int := M_int_int;
[L4753]               __tmp__sum_chains2 := sum_chains2;
[L4754]               __tmp__sum_freezings3 := sum_freezings3;
[L4755]               __tmp__sum_freezingBalance4 := sum_freezingBalance4;
[L4756]               __tmp__M_int_Ref := M_int_Ref;
[L4757]               __tmp__sum := sum;
[L4758]               __tmp__Length := Length;
[L4759]               __tmp__now := now;
[L4760]               __tmp__balances_BasicToken := balances_BasicToken;
[L4761]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L4762]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L4763]               __tmp__owner_Ownable := owner_Ownable;
[L4764]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L4765]               __tmp__chains_FreezableToken := chains_FreezableToken;
[L4766]               __tmp__freezings_FreezableToken := freezings_FreezableToken;
[L4767]               __tmp__freezingBalance_FreezableToken := freezingBalance_FreezableToken;
[L4768]               __tmp__paused_Pausable := paused_Pausable;
[L4769]               __tmp__TOKEN_DECIMALS_Consts := TOKEN_DECIMALS_Consts;
[L4770]               __tmp__TOKEN_DECIMALS_UINT8_Consts := TOKEN_DECIMALS_UINT8_Consts;
[L4771]               __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts := TOKEN_DECIMAL_MULTIPLIER_Consts;
[L4772]               __tmp__TOKEN_NAME_Consts := TOKEN_NAME_Consts;
[L4773]               __tmp__TOKEN_SYMBOL_Consts := TOKEN_SYMBOL_Consts;
[L4774]               __tmp__PAUSED_Consts := PAUSED_Consts;
[L4775]               __tmp__TARGET_USER_Consts := TARGET_USER_Consts;
[L4776]               __tmp__CONTINUE_MINTING_Consts := CONTINUE_MINTING_Consts;
[L4777]               __tmp__initialized_MainToken := initialized_MainToken;
[L4778]   CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L9621]   COND FALSE  !(!!__tmp__paused_Pausable[this])
[L9625]   COND TRUE   __tmp__DType[this] == MainToken
[L9626]   CALL        call __var_53 := transferFrom~address~address~uint256_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L7096]               __var_4 := null;
[L7097]   COND TRUE   !(_to_s351 != null)
[L7098]               revert := true;
[L9626]   RET         call __var_53 := transferFrom~address~address~uint256_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L9627]   COND TRUE   revert
[L4778]   RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L4779]               assume revert || gas < 0;
[L14614]  RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);

End of lasso representation.
RESULT: Ultimate could not prove your program: Toolchain returned no result.
Received shutdown request...
