This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 09:28:12,645 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 09:28:12,646 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 09:28:12,658 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 09:28:12,659 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 09:28:12,659 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 09:28:12,660 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 09:28:12,662 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 09:28:12,663 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 09:28:12,664 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 09:28:12,665 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 09:28:12,666 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 09:28:12,666 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 09:28:12,667 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 09:28:12,668 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 09:28:12,668 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 09:28:12,669 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 09:28:12,670 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 09:28:12,671 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 09:28:12,672 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 09:28:12,673 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 09:28:12,674 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 09:28:12,675 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 09:28:12,676 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 09:28:12,676 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 09:28:12,676 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 09:28:12,677 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 09:28:12,677 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 09:28:12,678 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 09:28:12,678 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 09:28:12,678 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 09:28:12,679 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 09:28:12,679 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 09:28:12,680 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 09:28:12,680 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 09:28:12,681 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 09:28:12,681 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 09:28:12,681 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 09:28:12,682 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 09:28:12,682 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 09:28:12,683 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 09:28:12,683 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 09:28:12,691 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 09:28:12,691 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 09:28:12,692 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 09:28:12,692 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 09:28:12,692 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 09:28:12,692 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 09:28:12,693 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 09:28:12,693 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 09:28:12,693 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 09:28:12,693 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 09:28:12,693 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 09:28:12,693 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 09:28:12,693 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 09:28:12,693 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 09:28:12,693 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 09:28:12,694 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 09:28:12,694 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 09:28:12,694 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 09:28:12,694 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 09:28:12,694 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 09:28:12,694 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 09:28:12,694 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 09:28:12,694 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 09:28:12,694 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 09:28:12,694 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 09:28:12,695 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 09:28:12,717 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 09:28:12,731 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 09:28:12,734 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 09:28:12,736 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 09:28:12,736 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 09:28:12,737 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/YearnFinanceBitToken_0xf0a0f3a6fa6bed75345171a5ea18abcadf6453ba_transfer-self.bpl
[2020-11-25 09:28:12,737 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/YearnFinanceBitToken_0xf0a0f3a6fa6bed75345171a5ea18abcadf6453ba_transfer-self.bpl'
[2020-11-25 09:28:12,810 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 09:28:12,811 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 09:28:12,811 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 09:28:12,811 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 09:28:12,811 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 09:28:12,828 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "YearnFinanceBitToken_0xf0a0f3a6fa6bed75345171a5ea18abcadf6453ba_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:28:12" (1/1) ...
[2020-11-25 09:28:12,830 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "YearnFinanceBitToken_0xf0a0f3a6fa6bed75345171a5ea18abcadf6453ba_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:28:12" (1/1) ...
[2020-11-25 09:28:12,860 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "YearnFinanceBitToken_0xf0a0f3a6fa6bed75345171a5ea18abcadf6453ba_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:28:12" (1/1) ...
[2020-11-25 09:28:12,861 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "YearnFinanceBitToken_0xf0a0f3a6fa6bed75345171a5ea18abcadf6453ba_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:28:12" (1/1) ...
[2020-11-25 09:28:12,880 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "YearnFinanceBitToken_0xf0a0f3a6fa6bed75345171a5ea18abcadf6453ba_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:28:12" (1/1) ...
[2020-11-25 09:28:12,890 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "YearnFinanceBitToken_0xf0a0f3a6fa6bed75345171a5ea18abcadf6453ba_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:28:12" (1/1) ...
[2020-11-25 09:28:12,896 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "YearnFinanceBitToken_0xf0a0f3a6fa6bed75345171a5ea18abcadf6453ba_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:28:12" (1/1) ...
[2020-11-25 09:28:12,905 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 09:28:12,906 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 09:28:12,906 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 09:28:12,908 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 09:28:12,912 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "YearnFinanceBitToken_0xf0a0f3a6fa6bed75345171a5ea18abcadf6453ba_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:28:12" (1/1) ...
[2020-11-25 09:28:12,928 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(YearnFinanceBitToken.transfer(to, value), msg.sender == to && value <= balances_YearnFinanceBitToken[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_YearnFinanceBitToken[this][to] >= 0 && balances_YearnFinanceBitToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_YearnFinanceBitToken[this][msg.sender] >= 0 &&  balances_YearnFinanceBitToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(YearnFinanceBitToken.transfer(to, value), return == true && _totalSupply_YearnFinanceBitToken[this] == old(_totalSupply_YearnFinanceBitToken[this]) && balances_YearnFinanceBitToken[this] == old(balances_YearnFinanceBitToken[this]) && allowed_YearnFinanceBitToken[this] == old(allowed_YearnFinanceBitToken[this]) && name_YearnFinanceBitToken[this] == old(name_YearnFinanceBitToken[this]) && symbol_YearnFinanceBitToken[this] == old(symbol_YearnFinanceBitToken[this]) && decimals_YearnFinanceBitToken[this] == old(decimals_YearnFinanceBitToken[this]))))
[2020-11-25 09:28:12,934 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(YearnFinanceBitToken.transfer(to, value), msg.sender == to && value <= balances_YearnFinanceBitToken[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_YearnFinanceBitToken[this][to] >= 0 && balances_YearnFinanceBitToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_YearnFinanceBitToken[this][msg.sender] >= 0 &&  balances_YearnFinanceBitToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(YearnFinanceBitToken.transfer(to, value), return == true && _totalSupply_YearnFinanceBitToken[this] == old(_totalSupply_YearnFinanceBitToken[this]) && balances_YearnFinanceBitToken[this] == old(balances_YearnFinanceBitToken[this]) && allowed_YearnFinanceBitToken[this] == old(allowed_YearnFinanceBitToken[this]) && name_YearnFinanceBitToken[this] == old(name_YearnFinanceBitToken[this]) && symbol_YearnFinanceBitToken[this] == old(symbol_YearnFinanceBitToken[this]) && decimals_YearnFinanceBitToken[this] == old(decimals_YearnFinanceBitToken[this]))))
[2020-11-25 09:28:12,941 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(YearnFinanceBitToken.transfer(to, value), msg.sender == to && value <= balances_YearnFinanceBitToken[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_YearnFinanceBitToken[this][to] >= 0 && balances_YearnFinanceBitToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_YearnFinanceBitToken[this][msg.sender] >= 0 &&  balances_YearnFinanceBitToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(YearnFinanceBitToken.transfer(to, value), return == true && _totalSupply_YearnFinanceBitToken[this] == old(_totalSupply_YearnFinanceBitToken[this]) && balances_YearnFinanceBitToken[this] == old(balances_YearnFinanceBitToken[this]) && allowed_YearnFinanceBitToken[this] == old(allowed_YearnFinanceBitToken[this]) && name_YearnFinanceBitToken[this] == old(name_YearnFinanceBitToken[this]) && symbol_YearnFinanceBitToken[this] == old(symbol_YearnFinanceBitToken[this]) && decimals_YearnFinanceBitToken[this] == old(decimals_YearnFinanceBitToken[this]))))
[2020-11-25 09:28:12,948 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( msg.sender==to_s334 && tokens_s334<=balances_YearnFinanceBitToken[this][msg.sender] ) && tokens_s334>=0 ) && tokens_s334<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_YearnFinanceBitToken[this][to_s334]>=0 ) && balances_YearnFinanceBitToken[this][to_s334]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_YearnFinanceBitToken[this][msg.sender]>=0 ) && balances_YearnFinanceBitToken[this][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_YearnFinanceBitToken>],IdentifierExpression[to_s334,<IMPLEMENTATION_INPARAM,transfer~address~uint256_YearnFinanceBitToken>]],BinaryExpression[COMPLEQ,IdentifierExpression[tokens_s334,<IMPLEMENTATION_INPARAM,transfer~address~uint256_YearnFinanceBitToken>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_YearnFinanceBitToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_YearnFinanceBitToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_YearnFinanceBitToken>]]]]],BinaryExpression[COMPGEQ,IdentifierExpression[tokens_s334,<IMPLEMENTATION_INPARAM,transfer~address~uint256_YearnFinanceBitToken>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[tokens_s334,<IMPLEMENTATION_INPARAM,transfer~address~uint256_YearnFinanceBitToken>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_YearnFinanceBitToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_YearnFinanceBitToken>]]],[IdentifierExpression[to_s334,<IMPLEMENTATION_INPARAM,transfer~address~uint256_YearnFinanceBitToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_YearnFinanceBitToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_YearnFinanceBitToken>]]],[IdentifierExpression[to_s334,<IMPLEMENTATION_INPARAM,transfer~address~uint256_YearnFinanceBitToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_YearnFinanceBitToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_YearnFinanceBitToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_YearnFinanceBitToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_YearnFinanceBitToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_YearnFinanceBitToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_YearnFinanceBitToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 09:28:12,951 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( success_s334==true && _totalSupply_YearnFinanceBitToken[this]==( old(_totalSupply_YearnFinanceBitToken[this]) ) ) && balances_YearnFinanceBitToken[this]==( old(balances_YearnFinanceBitToken[this]) ) ) && allowed_YearnFinanceBitToken[this]==( old(allowed_YearnFinanceBitToken[this]) ) ) && name_YearnFinanceBitToken[this]==( old(name_YearnFinanceBitToken[this]) ) ) && symbol_YearnFinanceBitToken[this]==( old(symbol_YearnFinanceBitToken[this]) ) ) && decimals_YearnFinanceBitToken[this]==( old(decimals_YearnFinanceBitToken[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[success_s334,<IMPLEMENTATION_OUTPARAM,transfer~address~uint256_YearnFinanceBitToken>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_totalSupply_YearnFinanceBitToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_YearnFinanceBitToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_totalSupply_YearnFinanceBitToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_YearnFinanceBitToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[balances_YearnFinanceBitToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_YearnFinanceBitToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[balances_YearnFinanceBitToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_YearnFinanceBitToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[allowed_YearnFinanceBitToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_YearnFinanceBitToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[allowed_YearnFinanceBitToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_YearnFinanceBitToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[name_YearnFinanceBitToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_YearnFinanceBitToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[name_YearnFinanceBitToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_YearnFinanceBitToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[symbol_YearnFinanceBitToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_YearnFinanceBitToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[symbol_YearnFinanceBitToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_YearnFinanceBitToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[decimals_YearnFinanceBitToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_YearnFinanceBitToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[decimals_YearnFinanceBitToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_YearnFinanceBitToken>]]]]]]
[2020-11-25 09:28:12,954 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(YearnFinanceBitToken.transfer(to, value), msg.sender == to && value <= balances_YearnFinanceBitToken[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_YearnFinanceBitToken[this][to] >= 0 && balances_YearnFinanceBitToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_YearnFinanceBitToken[this][msg.sender] >= 0 &&  balances_YearnFinanceBitToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(YearnFinanceBitToken.transfer(to, value), return == true && _totalSupply_YearnFinanceBitToken[this] == old(_totalSupply_YearnFinanceBitToken[this]) && balances_YearnFinanceBitToken[this] == old(balances_YearnFinanceBitToken[this]) && allowed_YearnFinanceBitToken[this] == old(allowed_YearnFinanceBitToken[this]) && name_YearnFinanceBitToken[this] == old(name_YearnFinanceBitToken[this]) && symbol_YearnFinanceBitToken[this] == old(symbol_YearnFinanceBitToken[this]) && decimals_YearnFinanceBitToken[this] == old(decimals_YearnFinanceBitToken[this]))))
[2020-11-25 09:28:12,955 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transfer_YearnFinanceBitToken0) ==> ( <>AP(success_transfer_YearnFinanceBitToken0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 09:28:12,962 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 09:28:12 PropertyContainer
[2020-11-25 09:28:12,962 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 09:28:12,963 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 09:28:12,963 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 09:28:12,963 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 09:28:12,964 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "YearnFinanceBitToken_0xf0a0f3a6fa6bed75345171a5ea18abcadf6453ba_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:28:12" (1/2) ...
[2020-11-25 09:28:12,964 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 09:28:12,964 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 09:28:12,975 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 09:28:12" (2/2) ...
[2020-11-25 09:28:12,976 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 09:28:12,976 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 09:28:12,976 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 09:28:12,976 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 09:28:12,977 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "YearnFinanceBitToken_0xf0a0f3a6fa6bed75345171a5ea18abcadf6453ba_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:28:12" (1/2) ...
[2020-11-25 09:28:13,029 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 09:28:13,030 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface_NoBaseCtor__success
[2020-11-25 09:28:13,030 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface
[2020-11-25 09:28:13,030 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface
[2020-11-25 09:28:13,030 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20Interface
[2020-11-25 09:28:13,030 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20Interface
[2020-11-25 09:28:13,030 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20Interface
[2020-11-25 09:28:13,030 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Interface
[2020-11-25 09:28:13,030 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Interface
[2020-11-25 09:28:13,030 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Interface
[2020-11-25 09:28:13,031 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 09:28:13,031 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 09:28:13,031 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 09:28:13,031 INFO  L130     BoogieDeclarations]: Found specification of procedure safeAdd~uint256~uint256_SafeMath
[2020-11-25 09:28:13,031 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeAdd~uint256~uint256_SafeMath
[2020-11-25 09:28:13,031 INFO  L130     BoogieDeclarations]: Found specification of procedure safeSub~uint256~uint256_SafeMath
[2020-11-25 09:28:13,031 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeSub~uint256~uint256_SafeMath
[2020-11-25 09:28:13,031 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMul~uint256~uint256_SafeMath
[2020-11-25 09:28:13,031 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMul~uint256~uint256_SafeMath
[2020-11-25 09:28:13,031 INFO  L130     BoogieDeclarations]: Found specification of procedure safeDiv~uint256~uint256_SafeMath
[2020-11-25 09:28:13,031 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeDiv~uint256~uint256_SafeMath
[2020-11-25 09:28:13,032 INFO  L130     BoogieDeclarations]: Found specification of procedure YearnFinanceBitToken_YearnFinanceBitToken_NoBaseCtor__success
[2020-11-25 09:28:13,032 INFO  L130     BoogieDeclarations]: Found specification of procedure YearnFinanceBitToken_YearnFinanceBitToken
[2020-11-25 09:28:13,032 INFO  L138     BoogieDeclarations]: Found implementation of procedure YearnFinanceBitToken_YearnFinanceBitToken
[2020-11-25 09:28:13,032 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_YearnFinanceBitToken
[2020-11-25 09:28:13,032 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_YearnFinanceBitToken
[2020-11-25 09:28:13,032 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_YearnFinanceBitToken
[2020-11-25 09:28:13,032 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_YearnFinanceBitToken
[2020-11-25 09:28:13,032 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_YearnFinanceBitToken
[2020-11-25 09:28:13,032 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_YearnFinanceBitToken
[2020-11-25 09:28:13,032 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_YearnFinanceBitToken
[2020-11-25 09:28:13,032 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_YearnFinanceBitToken
[2020-11-25 09:28:13,032 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_YearnFinanceBitToken
[2020-11-25 09:28:13,033 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_YearnFinanceBitToken
[2020-11-25 09:28:13,033 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_YearnFinanceBitToken
[2020-11-25 09:28:13,033 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_YearnFinanceBitToken
[2020-11-25 09:28:13,033 INFO  L130     BoogieDeclarations]: Found specification of procedure name_YearnFinanceBitToken
[2020-11-25 09:28:13,033 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_YearnFinanceBitToken
[2020-11-25 09:28:13,033 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_YearnFinanceBitToken
[2020-11-25 09:28:13,033 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_YearnFinanceBitToken
[2020-11-25 09:28:13,033 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_YearnFinanceBitToken
[2020-11-25 09:28:13,033 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_YearnFinanceBitToken
[2020-11-25 09:28:13,033 INFO  L130     BoogieDeclarations]: Found specification of procedure _totalSupply_YearnFinanceBitToken
[2020-11-25 09:28:13,033 INFO  L138     BoogieDeclarations]: Found implementation of procedure _totalSupply_YearnFinanceBitToken
[2020-11-25 09:28:13,033 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 09:28:13,033 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 09:28:13,034 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 09:28:13,034 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Interface
[2020-11-25 09:28:13,034 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Interface
[2020-11-25 09:28:13,034 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 09:28:13,034 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 09:28:13,034 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_YearnFinanceBitToken
[2020-11-25 09:28:13,034 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 09:28:13,034 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 09:28:13,034 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface_NoBaseCtor__fail
[2020-11-25 09:28:13,034 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface__success
[2020-11-25 09:28:13,034 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface__fail
[2020-11-25 09:28:13,034 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 09:28:13,034 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 09:28:13,035 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 09:28:13,035 INFO  L130     BoogieDeclarations]: Found specification of procedure safeAdd~uint256~uint256_SafeMath__success
[2020-11-25 09:28:13,035 INFO  L130     BoogieDeclarations]: Found specification of procedure safeAdd~uint256~uint256_SafeMath__fail
[2020-11-25 09:28:13,035 INFO  L130     BoogieDeclarations]: Found specification of procedure safeSub~uint256~uint256_SafeMath__success
[2020-11-25 09:28:13,035 INFO  L130     BoogieDeclarations]: Found specification of procedure safeSub~uint256~uint256_SafeMath__fail
[2020-11-25 09:28:13,035 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMul~uint256~uint256_SafeMath__success
[2020-11-25 09:28:13,035 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMul~uint256~uint256_SafeMath__fail
[2020-11-25 09:28:13,035 INFO  L130     BoogieDeclarations]: Found specification of procedure safeDiv~uint256~uint256_SafeMath__success
[2020-11-25 09:28:13,035 INFO  L130     BoogieDeclarations]: Found specification of procedure safeDiv~uint256~uint256_SafeMath__fail
[2020-11-25 09:28:13,035 INFO  L130     BoogieDeclarations]: Found specification of procedure YearnFinanceBitToken_YearnFinanceBitToken_NoBaseCtor__fail
[2020-11-25 09:28:13,035 INFO  L130     BoogieDeclarations]: Found specification of procedure YearnFinanceBitToken_YearnFinanceBitToken__success
[2020-11-25 09:28:13,035 INFO  L130     BoogieDeclarations]: Found specification of procedure YearnFinanceBitToken_YearnFinanceBitToken__fail
[2020-11-25 09:28:13,035 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_YearnFinanceBitToken__success
[2020-11-25 09:28:13,036 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_YearnFinanceBitToken__fail
[2020-11-25 09:28:13,036 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_YearnFinanceBitToken__success
[2020-11-25 09:28:13,036 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_YearnFinanceBitToken__fail
[2020-11-25 09:28:13,036 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_YearnFinanceBitToken__success
[2020-11-25 09:28:13,036 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_YearnFinanceBitToken__fail
[2020-11-25 09:28:13,036 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_YearnFinanceBitToken__success
[2020-11-25 09:28:13,036 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_YearnFinanceBitToken__fail
[2020-11-25 09:28:13,036 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_YearnFinanceBitToken__success
[2020-11-25 09:28:13,036 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_YearnFinanceBitToken__fail
[2020-11-25 09:28:13,036 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_YearnFinanceBitToken__success
[2020-11-25 09:28:13,036 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_YearnFinanceBitToken__fail
[2020-11-25 09:28:13,036 INFO  L130     BoogieDeclarations]: Found specification of procedure name_YearnFinanceBitToken__success
[2020-11-25 09:28:13,037 INFO  L130     BoogieDeclarations]: Found specification of procedure name_YearnFinanceBitToken__fail
[2020-11-25 09:28:13,037 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_YearnFinanceBitToken__success
[2020-11-25 09:28:13,037 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_YearnFinanceBitToken__fail
[2020-11-25 09:28:13,037 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_YearnFinanceBitToken__success
[2020-11-25 09:28:13,037 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_YearnFinanceBitToken__fail
[2020-11-25 09:28:13,037 INFO  L130     BoogieDeclarations]: Found specification of procedure _totalSupply_YearnFinanceBitToken__success
[2020-11-25 09:28:13,037 INFO  L130     BoogieDeclarations]: Found specification of procedure _totalSupply_YearnFinanceBitToken__fail
[2020-11-25 09:28:13,037 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 09:28:13,037 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 09:28:13,037 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 09:28:13,037 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 09:28:13,037 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 09:28:13,038 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface_NoBaseCtor__fail
[2020-11-25 09:28:13,038 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface_NoBaseCtor__success
[2020-11-25 09:28:13,038 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface__fail
[2020-11-25 09:28:13,038 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface__success
[2020-11-25 09:28:13,038 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 09:28:13,038 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 09:28:13,038 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 09:28:13,038 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 09:28:13,038 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeAdd~uint256~uint256_SafeMath__fail
[2020-11-25 09:28:13,038 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeAdd~uint256~uint256_SafeMath__success
[2020-11-25 09:28:13,038 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeSub~uint256~uint256_SafeMath__fail
[2020-11-25 09:28:13,038 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeSub~uint256~uint256_SafeMath__success
[2020-11-25 09:28:13,038 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMul~uint256~uint256_SafeMath__fail
[2020-11-25 09:28:13,039 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMul~uint256~uint256_SafeMath__success
[2020-11-25 09:28:13,039 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeDiv~uint256~uint256_SafeMath__fail
[2020-11-25 09:28:13,039 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeDiv~uint256~uint256_SafeMath__success
[2020-11-25 09:28:13,039 INFO  L138     BoogieDeclarations]: Found implementation of procedure YearnFinanceBitToken_YearnFinanceBitToken_NoBaseCtor__fail
[2020-11-25 09:28:13,039 INFO  L138     BoogieDeclarations]: Found implementation of procedure YearnFinanceBitToken_YearnFinanceBitToken_NoBaseCtor__success
[2020-11-25 09:28:13,039 INFO  L138     BoogieDeclarations]: Found implementation of procedure YearnFinanceBitToken_YearnFinanceBitToken__fail
[2020-11-25 09:28:13,040 INFO  L138     BoogieDeclarations]: Found implementation of procedure YearnFinanceBitToken_YearnFinanceBitToken__success
[2020-11-25 09:28:13,040 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_YearnFinanceBitToken__fail
[2020-11-25 09:28:13,040 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_YearnFinanceBitToken__success
[2020-11-25 09:28:13,040 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_YearnFinanceBitToken__fail
[2020-11-25 09:28:13,040 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_YearnFinanceBitToken__success
[2020-11-25 09:28:13,041 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_YearnFinanceBitToken__fail
[2020-11-25 09:28:13,041 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_YearnFinanceBitToken__success
[2020-11-25 09:28:13,041 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_YearnFinanceBitToken__fail
[2020-11-25 09:28:13,041 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_YearnFinanceBitToken__success
[2020-11-25 09:28:13,041 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_YearnFinanceBitToken__fail
[2020-11-25 09:28:13,042 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_YearnFinanceBitToken__success
[2020-11-25 09:28:13,042 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_YearnFinanceBitToken__fail
[2020-11-25 09:28:13,042 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_YearnFinanceBitToken__success
[2020-11-25 09:28:13,042 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_YearnFinanceBitToken__fail
[2020-11-25 09:28:13,042 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_YearnFinanceBitToken__success
[2020-11-25 09:28:13,043 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_YearnFinanceBitToken__fail
[2020-11-25 09:28:13,043 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_YearnFinanceBitToken__success
[2020-11-25 09:28:13,043 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_YearnFinanceBitToken__fail
[2020-11-25 09:28:13,043 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_YearnFinanceBitToken__success
[2020-11-25 09:28:13,043 INFO  L138     BoogieDeclarations]: Found implementation of procedure _totalSupply_YearnFinanceBitToken__fail
[2020-11-25 09:28:13,044 INFO  L138     BoogieDeclarations]: Found implementation of procedure _totalSupply_YearnFinanceBitToken__success
[2020-11-25 09:28:13,044 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 09:28:13,044 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 09:28:13,044 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 09:28:13,044 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 09:28:13,045 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 09:28:13,045 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 09:28:13,045 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Interface
[2020-11-25 09:28:13,045 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Interface
[2020-11-25 09:28:13,045 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 09:28:13,046 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 09:28:13,046 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_YearnFinanceBitToken
[2020-11-25 09:28:13,046 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 09:28:13,046 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 09:28:13,046 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 09:28:13,556 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 09:28:13,556 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 09:28:13,557 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 09:28:13,659 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 09:28:13,659 INFO  L286             CfgBuilder]: Removed 3 assue(true) statements.
[2020-11-25 09:28:13,661 INFO  L202        PluginConnector]: Adding new model YearnFinanceBitToken_0xf0a0f3a6fa6bed75345171a5ea18abcadf6453ba_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 09:28:13 BoogieIcfgContainer
[2020-11-25 09:28:13,661 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 09:28:12" (2/2) ...
[2020-11-25 09:28:13,661 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 09:28:13,662 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@5ba9e151 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 09:28:13, skipping insertion in model container
[2020-11-25 09:28:13,662 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 09:28:13,662 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 09:28:13,662 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 09:28:13,663 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 09:28:13,664 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "YearnFinanceBitToken_0xf0a0f3a6fa6bed75345171a5ea18abcadf6453ba_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:28:12" (1/3) ...
[2020-11-25 09:28:13,664 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@5d36f42c and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 09:28:13, skipping insertion in model container
[2020-11-25 09:28:13,664 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 09:28:12" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 09:28:13,702 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 09:28:13 NWAContainer
[2020-11-25 09:28:13,702 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 09:28:13,702 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 09:28:13,702 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 09:28:13,703 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 09:28:13,704 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "YearnFinanceBitToken_0xf0a0f3a6fa6bed75345171a5ea18abcadf6453ba_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 09:28:13" (3/4) ...
[2020-11-25 09:28:13,705 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@77a86a1f and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 09:28:13, skipping insertion in model container
[2020-11-25 09:28:13,705 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 09:28:13" (4/4) ...
[2020-11-25 09:28:13,708 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 09:28:13,711 INFO  L110   BuchiProductObserver]: Initial RCFG 1049 locations, 1322 edges
[2020-11-25 09:28:13,711 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 09:28:13,724 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 09:28:14,746 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 09:28:14,749 INFO  L110   BuchiProductObserver]: BuchiProgram size 2488 locations, 4278 edges
[2020-11-25 09:28:14,749 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 09:28:14 BoogieIcfgContainer
[2020-11-25 09:28:14,749 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 09:28:14,750 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 09:28:14,750 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 09:28:14,751 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 09:28:14,752 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 09:28:14" (1/1) ...
[2020-11-25 09:28:14,816 INFO  L313           BlockEncoder]: Initial Icfg 2488 locations, 4278 edges
[2020-11-25 09:28:14,816 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 09:28:14,817 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 09:28:14,817 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 09:28:14,817 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 09:28:14,826 INFO  L70    emoveInfeasibleEdges]: Removed 66 edges and 9 locations because of local infeasibility
[2020-11-25 09:28:14,832 INFO  L70        RemoveSinkStates]: Removed 32 edges and 21 locations by removing sink states
[2020-11-25 09:28:14,841 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 09:28:14,845 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 09:28:14,847 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 09:28:14,847 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 09:28:14,850 INFO  L313           BlockEncoder]: Encoded RCFG 2444 locations, 4160 edges
[2020-11-25 09:28:14,851 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 09:28:14 BasicIcfg
[2020-11-25 09:28:14,851 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 09:28:14,851 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 09:28:14,851 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 09:28:14,853 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 09:28:14,853 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 09:28:14,853 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "YearnFinanceBitToken_0xf0a0f3a6fa6bed75345171a5ea18abcadf6453ba_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:28:12" (1/6) ...
[2020-11-25 09:28:14,855 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4b5718b and model type YearnFinanceBitToken_0xf0a0f3a6fa6bed75345171a5ea18abcadf6453ba_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 09:28:14, skipping insertion in model container
[2020-11-25 09:28:14,855 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 09:28:14,855 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 09:28:12" (2/6) ...
[2020-11-25 09:28:14,855 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4b5718b and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 09:28:14, skipping insertion in model container
[2020-11-25 09:28:14,855 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 09:28:14,855 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "YearnFinanceBitToken_0xf0a0f3a6fa6bed75345171a5ea18abcadf6453ba_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 09:28:13" (3/6) ...
[2020-11-25 09:28:14,856 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4b5718b and model type YearnFinanceBitToken_0xf0a0f3a6fa6bed75345171a5ea18abcadf6453ba_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 09:28:14, skipping insertion in model container
[2020-11-25 09:28:14,856 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 09:28:14,856 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 09:28:13" (4/6) ...
[2020-11-25 09:28:14,856 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4b5718b and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 09:28:14, skipping insertion in model container
[2020-11-25 09:28:14,856 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 09:28:14,856 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 09:28:14" (5/6) ...
[2020-11-25 09:28:14,856 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4b5718b and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 09:28:14, skipping insertion in model container
[2020-11-25 09:28:14,856 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 09:28:14,856 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 09:28:14" (6/6) ...
[2020-11-25 09:28:14,857 INFO  L404   chiAutomizerObserver]: Analyzing ICFG YearnFinanceBitToken_0xf0a0f3a6fa6bed75345171a5ea18abcadf6453ba_transfer-self.bpl_BEv2
[2020-11-25 09:28:14,889 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 09:28:14,890 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 09:28:14,890 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 09:28:14,890 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 09:28:14,890 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 09:28:14,890 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 09:28:14,890 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 09:28:14,890 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 09:28:14,890 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 09:28:14,913 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2444 states.
[2020-11-25 09:28:14,975 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:28:14,975 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:28:14,975 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:28:14,985 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:28:14,985 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:28:14,985 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 09:28:14,985 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2444 states.
[2020-11-25 09:28:14,996 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:28:14,997 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:28:14,997 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:28:14,999 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:28:14,999 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_YearnFinanceBitToken0 := false;
[L2]                 call_transfer_YearnFinanceBitToken0 := false;
[L2]     CALL        call main();
[L2853]              assume null == 0;
[L2854]  CALL        call this := FreshRefGenerator__success();
[L1249]              havoc newRef;
[L1250]              assume Alloc[newRef] == false;
[L1251]              Alloc[newRef] := true;
[L1252]              assume newRef != null;
[L2854]  RET         call this := FreshRefGenerator__success();
[L2855]              assume now >= 0;
[L2856]              assume DType[this] == YearnFinanceBitToken;
[L2857]              assume msgvalue_MSG == 0;
[L2858]              gas := gas - 53000;
[L2859]  CALL        call YearnFinanceBitToken_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG);
[L398]               havoc __exception;
[L399]               revert := false;
[L400]   COND FALSE  !(__exception)
[L421]   CALL        call YearnFinanceBitToken_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1456]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1281]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1266]              assume msgsender_MSG != null;
[L1267]              Balance[this] := 0;
[L1281]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1282]  COND FALSE  !(revert)
[L1456]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1457]  COND TRUE   revert
[L421]   RET         call YearnFinanceBitToken_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG);
[L422]               assume !revert && gas >= 0;
[L2859]  RET         call YearnFinanceBitToken_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG);
[L2860]              assume !revert && gas >= 0;

Loop:
[L2863]  CALL        call CorralChoice_YearnFinanceBitToken(this);
[L2704]              havoc msgsender_MSG;
[L2705]              havoc msgvalue_MSG;
[L2706]              havoc choice;
[L2707]              havoc __ret_0_totalSupply;
[L2708]              havoc tokenOwner_s247;
[L2709]              havoc balance_s247;
[L2710]              havoc tokenOwner_s263;
[L2711]              havoc spender_s263;
[L2712]              havoc remaining_s263;
[L2713]              havoc to_s334;
[L2714]              havoc tokens_s334;
[L2715]              havoc success_s334;
[L2716]              havoc spender_s291;
[L2717]              havoc tokens_s291;
[L2718]              havoc success_s291;
[L2719]              havoc from_s393;
[L2720]              havoc to_s393;
[L2721]              havoc tokens_s393;
[L2722]              havoc success_s393;
[L2723]              havoc a_s90;
[L2724]              havoc b_s90;
[L2725]              havoc c_s90;
[L2726]              havoc a_s112;
[L2727]              havoc b_s112;
[L2728]              havoc c_s112;
[L2729]              havoc a_s140;
[L2730]              havoc b_s140;
[L2731]              havoc c_s140;
[L2732]              havoc a_s162;
[L2733]              havoc b_s162;
[L2734]              havoc c_s162;
[L2735]              havoc __ret_0_name;
[L2736]              havoc __ret_0_symbol;
[L2737]              havoc __ret_0_decimals;
[L2738]              havoc __ret_0__totalSupply;
[L2739]              havoc tmpNow;
[L2740]              havoc gas;
[L2741]              assume gas > 4000000 && gas <= 8000000;
[L2742]              tmpNow := now;
[L2743]              havoc now;
[L2744]              assume now > tmpNow;
[L2745]              assume msgsender_MSG != null;
[L2746]              assume DType[msgsender_MSG] != ERC20Interface;
[L2747]              assume DType[msgsender_MSG] != SafeMath;
[L2748]              assume DType[msgsender_MSG] != YearnFinanceBitToken;
[L2749]              Alloc[msgsender_MSG] := true;
[L2750]  COND TRUE   choice == 14
[L2751]              gas := gas - 21000;
[L2752]  COND FALSE  !(gas >= 0)
[L2863]  RET         call CorralChoice_YearnFinanceBitToken(this);

[2020-11-25 09:28:15,017 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:28:15,017 INFO  L82        PathProgramCache]: Analyzing trace with hash 1469135822, now seen corresponding path program 1 times
[2020-11-25 09:28:15,022 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:28:15,039 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:28:15,074 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 09:28:15,076 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:28:15,076 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 09:28:15,078 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:28:15,214 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 09:28:15,214 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 09:28:15,216 INFO  L87              Difference]: Start difference. First operand 2444 states. Second operand 3 states.
[2020-11-25 09:28:15,346 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:28:15,346 INFO  L93              Difference]: Finished difference Result 1722 states and 1879 transitions.
[2020-11-25 09:28:15,346 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 09:28:15,347 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1722 states and 1879 transitions.
[2020-11-25 09:28:15,355 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:28:15,366 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1722 states to 1722 states and 1879 transitions.
[2020-11-25 09:28:15,367 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-25 09:28:15,369 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 603
[2020-11-25 09:28:15,369 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1722 states and 1879 transitions.
[2020-11-25 09:28:15,374 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:28:15,374 INFO  L728         BuchiCegarLoop]: Abstraction has 1722 states and 1879 transitions.
[2020-11-25 09:28:15,388 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1722 states and 1879 transitions.
[2020-11-25 09:28:15,419 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1722 to 1722.
[2020-11-25 09:28:15,419 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1722 states.
[2020-11-25 09:28:15,422 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1722 states to 1722 states and 1879 transitions.
[2020-11-25 09:28:15,423 INFO  L751         BuchiCegarLoop]: Abstraction has 1722 states and 1879 transitions.
[2020-11-25 09:28:15,423 INFO  L631         BuchiCegarLoop]: Abstraction has 1722 states and 1879 transitions.
[2020-11-25 09:28:15,423 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 09:28:15,424 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1722 states and 1879 transitions.
[2020-11-25 09:28:15,428 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:28:15,428 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:28:15,429 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:28:15,430 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:28:15,430 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_YearnFinanceBitToken0 := false;
[L2]                 call_transfer_YearnFinanceBitToken0 := false;
[L2]     CALL        call main();
[L2853]              assume null == 0;
[L2854]  CALL        call this := FreshRefGenerator__success();
[L1249]              havoc newRef;
[L1250]              assume Alloc[newRef] == false;
[L1251]              Alloc[newRef] := true;
[L1252]              assume newRef != null;
[L2854]  RET         call this := FreshRefGenerator__success();
[L2855]              assume now >= 0;
[L2856]              assume DType[this] == YearnFinanceBitToken;
[L2857]              assume msgvalue_MSG == 0;
[L2858]              gas := gas - 53000;
[L2859]  CALL        call YearnFinanceBitToken_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG);
[L398]               havoc __exception;
[L399]               revert := false;
[L400]   COND FALSE  !(__exception)
[L421]   CALL        call YearnFinanceBitToken_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1456]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1281]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1266]              assume msgsender_MSG != null;
[L1267]              Balance[this] := 0;
[L1281]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1282]  COND FALSE  !(revert)
[L1456]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1457]  COND TRUE   revert
[L421]   RET         call YearnFinanceBitToken_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG);
[L422]               assume !revert && gas >= 0;
[L2859]  RET         call YearnFinanceBitToken_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG);
[L2860]              assume !revert && gas >= 0;
[L2863]  CALL        call CorralChoice_YearnFinanceBitToken(this);
[L2704]              havoc msgsender_MSG;
[L2705]              havoc msgvalue_MSG;
[L2706]              havoc choice;
[L2707]              havoc __ret_0_totalSupply;
[L2708]              havoc tokenOwner_s247;
[L2709]              havoc balance_s247;
[L2710]              havoc tokenOwner_s263;
[L2711]              havoc spender_s263;
[L2712]              havoc remaining_s263;
[L2713]              havoc to_s334;
[L2714]              havoc tokens_s334;
[L2715]              havoc success_s334;
[L2716]              havoc spender_s291;
[L2717]              havoc tokens_s291;
[L2718]              havoc success_s291;
[L2719]              havoc from_s393;
[L2720]              havoc to_s393;
[L2721]              havoc tokens_s393;
[L2722]              havoc success_s393;
[L2723]              havoc a_s90;
[L2724]              havoc b_s90;
[L2725]              havoc c_s90;
[L2726]              havoc a_s112;
[L2727]              havoc b_s112;
[L2728]              havoc c_s112;
[L2729]              havoc a_s140;
[L2730]              havoc b_s140;
[L2731]              havoc c_s140;
[L2732]              havoc a_s162;
[L2733]              havoc b_s162;
[L2734]              havoc c_s162;
[L2735]              havoc __ret_0_name;
[L2736]              havoc __ret_0_symbol;
[L2737]              havoc __ret_0_decimals;
[L2738]              havoc __ret_0__totalSupply;
[L2739]              havoc tmpNow;
[L2740]              havoc gas;
[L2741]              assume gas > 4000000 && gas <= 8000000;
[L2742]              tmpNow := now;
[L2743]              havoc now;
[L2744]              assume now > tmpNow;
[L2745]              assume msgsender_MSG != null;
[L2746]              assume DType[msgsender_MSG] != ERC20Interface;
[L2747]              assume DType[msgsender_MSG] != SafeMath;
[L2748]              assume DType[msgsender_MSG] != YearnFinanceBitToken;
[L2749]              Alloc[msgsender_MSG] := true;
[L2750]  COND FALSE  !(choice == 14)
[L2756]  COND FALSE  !(choice == 13)
[L2762]  COND FALSE  !(choice == 12)
[L2768]  COND TRUE   choice == 11
[L2769]              gas := gas - 21000;
[L2770]  COND TRUE   gas >= 0
[L2771]              assume tokens_s334 >= 0 && tokens_s334 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2772]              assume msgvalue_MSG == 0;
[L2773]  CALL        call success_s334 := transfer~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s334 && tokens_s334 <= balances_YearnFinanceBitToken[this][msgsender_MSG]) && tokens_s334 >= 0) && tokens_s334 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][to_s334] >= 0) && balances_YearnFinanceBitToken[this][to_s334] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][msgsender_MSG] >= 0) && balances_YearnFinanceBitToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_YearnFinanceBitToken0 := true;
[L2]                 call_transfer_YearnFinanceBitToken0 := false;
[L2]                 revert := revert_hold;
[L652]               havoc __exception;
[L653]               revert := false;
[L654]   COND FALSE  !(__exception)
[L675]   CALL        call success_s334 := transfer~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L1563]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1564]  CALL        call __var_2 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][msgsender_MSG], tokens_s334);
[L1348]  COND TRUE   !(b_s112 <= a_s112)
[L1349]              revert := true;
[L1564]  RET         call __var_2 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][msgsender_MSG], tokens_s334);
[L1565]  COND TRUE   revert
[L675]   RET         call success_s334 := transfer~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L676]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((success_s334 == true && _totalSupply_YearnFinanceBitToken[this] == old(_totalSupply_YearnFinanceBitToken[this])) && balances_YearnFinanceBitToken[this] == old(balances_YearnFinanceBitToken[this])) && allowed_YearnFinanceBitToken[this] == old(allowed_YearnFinanceBitToken[this])) && name_YearnFinanceBitToken[this] == old(name_YearnFinanceBitToken[this])) && symbol_YearnFinanceBitToken[this] == old(symbol_YearnFinanceBitToken[this])) && decimals_YearnFinanceBitToken[this] == old(decimals_YearnFinanceBitToken[this]));
[L2]                 revert := revert_hold;
[L2773]  RET         call success_s334 := transfer~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L2863]  RET         call CorralChoice_YearnFinanceBitToken(this);

Loop:
[L2863]  CALL        call CorralChoice_YearnFinanceBitToken(this);
[L2704]              havoc msgsender_MSG;
[L2705]              havoc msgvalue_MSG;
[L2706]              havoc choice;
[L2707]              havoc __ret_0_totalSupply;
[L2708]              havoc tokenOwner_s247;
[L2709]              havoc balance_s247;
[L2710]              havoc tokenOwner_s263;
[L2711]              havoc spender_s263;
[L2712]              havoc remaining_s263;
[L2713]              havoc to_s334;
[L2714]              havoc tokens_s334;
[L2715]              havoc success_s334;
[L2716]              havoc spender_s291;
[L2717]              havoc tokens_s291;
[L2718]              havoc success_s291;
[L2719]              havoc from_s393;
[L2720]              havoc to_s393;
[L2721]              havoc tokens_s393;
[L2722]              havoc success_s393;
[L2723]              havoc a_s90;
[L2724]              havoc b_s90;
[L2725]              havoc c_s90;
[L2726]              havoc a_s112;
[L2727]              havoc b_s112;
[L2728]              havoc c_s112;
[L2729]              havoc a_s140;
[L2730]              havoc b_s140;
[L2731]              havoc c_s140;
[L2732]              havoc a_s162;
[L2733]              havoc b_s162;
[L2734]              havoc c_s162;
[L2735]              havoc __ret_0_name;
[L2736]              havoc __ret_0_symbol;
[L2737]              havoc __ret_0_decimals;
[L2738]              havoc __ret_0__totalSupply;
[L2739]              havoc tmpNow;
[L2740]              havoc gas;
[L2741]              assume gas > 4000000 && gas <= 8000000;
[L2742]              tmpNow := now;
[L2743]              havoc now;
[L2744]              assume now > tmpNow;
[L2745]              assume msgsender_MSG != null;
[L2746]              assume DType[msgsender_MSG] != ERC20Interface;
[L2747]              assume DType[msgsender_MSG] != SafeMath;
[L2748]              assume DType[msgsender_MSG] != YearnFinanceBitToken;
[L2749]              Alloc[msgsender_MSG] := true;
[L2750]  COND FALSE  !(choice == 14)
[L2756]  COND FALSE  !(choice == 13)
[L2762]  COND FALSE  !(choice == 12)
[L2768]  COND TRUE   choice == 11
[L2769]              gas := gas - 21000;
[L2770]  COND TRUE   gas >= 0
[L2771]              assume tokens_s334 >= 0 && tokens_s334 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2772]              assume msgvalue_MSG == 0;
[L2773]  CALL        call success_s334 := transfer~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s334 && tokens_s334 <= balances_YearnFinanceBitToken[this][msgsender_MSG]) && tokens_s334 >= 0) && tokens_s334 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][to_s334] >= 0) && balances_YearnFinanceBitToken[this][to_s334] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][msgsender_MSG] >= 0) && balances_YearnFinanceBitToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_YearnFinanceBitToken0 := true;
[L2]                 call_transfer_YearnFinanceBitToken0 := false;
[L2]                 revert := revert_hold;
[L652]               havoc __exception;
[L653]               revert := false;
[L654]   COND FALSE  !(__exception)
[L675]   CALL        call success_s334 := transfer~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L1563]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1564]  CALL        call __var_2 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][msgsender_MSG], tokens_s334);
[L1348]  COND TRUE   !(b_s112 <= a_s112)
[L1349]              revert := true;
[L1564]  RET         call __var_2 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][msgsender_MSG], tokens_s334);
[L1565]  COND TRUE   revert
[L675]   RET         call success_s334 := transfer~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L676]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((success_s334 == true && _totalSupply_YearnFinanceBitToken[this] == old(_totalSupply_YearnFinanceBitToken[this])) && balances_YearnFinanceBitToken[this] == old(balances_YearnFinanceBitToken[this])) && allowed_YearnFinanceBitToken[this] == old(allowed_YearnFinanceBitToken[this])) && name_YearnFinanceBitToken[this] == old(name_YearnFinanceBitToken[this])) && symbol_YearnFinanceBitToken[this] == old(symbol_YearnFinanceBitToken[this])) && decimals_YearnFinanceBitToken[this] == old(decimals_YearnFinanceBitToken[this]));
[L2]                 revert := revert_hold;
[L2773]  RET         call success_s334 := transfer~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L2863]  RET         call CorralChoice_YearnFinanceBitToken(this);

[2020-11-25 09:28:15,434 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:28:15,434 INFO  L82        PathProgramCache]: Analyzing trace with hash -515798409, now seen corresponding path program 1 times
[2020-11-25 09:28:15,435 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:28:15,446 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:28:15,468 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 09:28:15,468 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:28:15,468 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 09:28:15,469 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:28:15,469 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 09:28:15,469 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 09:28:15,469 INFO  L87              Difference]: Start difference. First operand 1722 states and 1879 transitions. cyclomatic complexity: 159 Second operand 4 states.
[2020-11-25 09:28:15,720 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:28:15,720 INFO  L93              Difference]: Finished difference Result 2596 states and 2955 transitions.
[2020-11-25 09:28:15,720 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 09:28:15,721 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2596 states and 2955 transitions.
[2020-11-25 09:28:15,731 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-25 09:28:15,742 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2596 states to 2520 states and 2873 transitions.
[2020-11-25 09:28:15,742 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 855
[2020-11-25 09:28:15,743 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 860
[2020-11-25 09:28:15,743 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2520 states and 2873 transitions.
[2020-11-25 09:28:15,747 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:28:15,747 INFO  L728         BuchiCegarLoop]: Abstraction has 2520 states and 2873 transitions.
[2020-11-25 09:28:15,749 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2520 states and 2873 transitions.
[2020-11-25 09:28:15,769 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2520 to 1742.
[2020-11-25 09:28:15,769 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1742 states.
[2020-11-25 09:28:15,772 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1742 states to 1742 states and 1871 transitions.
[2020-11-25 09:28:15,772 INFO  L751         BuchiCegarLoop]: Abstraction has 1742 states and 1871 transitions.
[2020-11-25 09:28:15,772 INFO  L631         BuchiCegarLoop]: Abstraction has 1742 states and 1871 transitions.
[2020-11-25 09:28:15,772 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 09:28:15,772 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1742 states and 1871 transitions.
[2020-11-25 09:28:15,775 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:28:15,776 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:28:15,776 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:28:15,777 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:28:15,777 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_YearnFinanceBitToken0 := false;
[L2]                 call_transfer_YearnFinanceBitToken0 := false;
[L2]     CALL        call main();
[L2853]              assume null == 0;
[L2854]  CALL        call this := FreshRefGenerator__success();
[L1249]              havoc newRef;
[L1250]              assume Alloc[newRef] == false;
[L1251]              Alloc[newRef] := true;
[L1252]              assume newRef != null;
[L2854]  RET         call this := FreshRefGenerator__success();
[L2855]              assume now >= 0;
[L2856]              assume DType[this] == YearnFinanceBitToken;
[L2857]              assume msgvalue_MSG == 0;
[L2858]              gas := gas - 53000;
[L2859]  CALL        call YearnFinanceBitToken_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG);
[L398]               havoc __exception;
[L399]               revert := false;
[L400]   COND FALSE  !(__exception)
[L421]   CALL        call YearnFinanceBitToken_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1456]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1281]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1266]              assume msgsender_MSG != null;
[L1267]              Balance[this] := 0;
[L1281]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1282]  COND FALSE  !(revert)
[L1456]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1457]  COND FALSE  !(revert)
[L1460]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1313]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1298]              assume msgsender_MSG != null;
[L1299]              Balance[this] := 0;
[L1313]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1314]  COND FALSE  !(revert)
[L1460]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1461]  COND FALSE  !(revert)
[L1464]  CALL        call YearnFinanceBitToken_YearnFinanceBitToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1417]              assume msgsender_MSG != null;
[L1418]              Balance[this] := 0;
[L1419]              name_YearnFinanceBitToken[this] := 627147201;
[L1420]              symbol_YearnFinanceBitToken[this] := 627147201;
[L1421]              decimals_YearnFinanceBitToken[this] := 0;
[L1422]              _totalSupply_YearnFinanceBitToken[this] := 0;
[L1423]              balances_YearnFinanceBitToken[this] := zeroRefintArr();
[L1424]              sum_balances0[this] := 0;
[L1425]              allowed_YearnFinanceBitToken[this] := zeroRefRefintArr();
[L1426]              sum_allowed1[this] := 0;
[L1428]              name_YearnFinanceBitToken[this] := 1658284292;
[L1429]              symbol_YearnFinanceBitToken[this] := -1175268548;
[L1430]              decimals_YearnFinanceBitToken[this] := 18;
[L1431]              _totalSupply_YearnFinanceBitToken[this] := 7000000000000000000000;
[L1432]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1433]              balances_YearnFinanceBitToken[this][msgsender_MSG] := _totalSupply_YearnFinanceBitToken[this];
[L1434]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1435]              assert { :EventEmitted "Transfer_YearnFinanceBitToken" } true;
[L1464]  RET         call YearnFinanceBitToken_YearnFinanceBitToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1465]  COND FALSE  !(revert)
[L421]   RET         call YearnFinanceBitToken_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG);
[L422]               assume !revert && gas >= 0;
[L2859]  RET         call YearnFinanceBitToken_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG);
[L2860]              assume !revert && gas >= 0;
[L2863]  CALL        call CorralChoice_YearnFinanceBitToken(this);
[L2704]              havoc msgsender_MSG;
[L2705]              havoc msgvalue_MSG;
[L2706]              havoc choice;
[L2707]              havoc __ret_0_totalSupply;
[L2708]              havoc tokenOwner_s247;
[L2709]              havoc balance_s247;
[L2710]              havoc tokenOwner_s263;
[L2711]              havoc spender_s263;
[L2712]              havoc remaining_s263;
[L2713]              havoc to_s334;
[L2714]              havoc tokens_s334;
[L2715]              havoc success_s334;
[L2716]              havoc spender_s291;
[L2717]              havoc tokens_s291;
[L2718]              havoc success_s291;
[L2719]              havoc from_s393;
[L2720]              havoc to_s393;
[L2721]              havoc tokens_s393;
[L2722]              havoc success_s393;
[L2723]              havoc a_s90;
[L2724]              havoc b_s90;
[L2725]              havoc c_s90;
[L2726]              havoc a_s112;
[L2727]              havoc b_s112;
[L2728]              havoc c_s112;
[L2729]              havoc a_s140;
[L2730]              havoc b_s140;
[L2731]              havoc c_s140;
[L2732]              havoc a_s162;
[L2733]              havoc b_s162;
[L2734]              havoc c_s162;
[L2735]              havoc __ret_0_name;
[L2736]              havoc __ret_0_symbol;
[L2737]              havoc __ret_0_decimals;
[L2738]              havoc __ret_0__totalSupply;
[L2739]              havoc tmpNow;
[L2740]              havoc gas;
[L2741]              assume gas > 4000000 && gas <= 8000000;
[L2742]              tmpNow := now;
[L2743]              havoc now;
[L2744]              assume now > tmpNow;
[L2745]              assume msgsender_MSG != null;
[L2746]              assume DType[msgsender_MSG] != ERC20Interface;
[L2747]              assume DType[msgsender_MSG] != SafeMath;
[L2748]              assume DType[msgsender_MSG] != YearnFinanceBitToken;
[L2749]              Alloc[msgsender_MSG] := true;
[L2750]  COND FALSE  !(choice == 14)
[L2756]  COND FALSE  !(choice == 13)
[L2762]  COND FALSE  !(choice == 12)
[L2768]  COND TRUE   choice == 11
[L2769]              gas := gas - 21000;
[L2770]  COND TRUE   gas >= 0
[L2771]              assume tokens_s334 >= 0 && tokens_s334 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2772]              assume msgvalue_MSG == 0;
[L2773]  CALL        call success_s334 := transfer~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s334 && tokens_s334 <= balances_YearnFinanceBitToken[this][msgsender_MSG]) && tokens_s334 >= 0) && tokens_s334 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][to_s334] >= 0) && balances_YearnFinanceBitToken[this][to_s334] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][msgsender_MSG] >= 0) && balances_YearnFinanceBitToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_YearnFinanceBitToken0 := true;
[L2]                 call_transfer_YearnFinanceBitToken0 := false;
[L2]                 revert := revert_hold;
[L652]               havoc __exception;
[L653]               revert := false;
[L654]   COND TRUE   __exception
[L655]               __tmp__Balance := Balance;
[L656]               __tmp__DType := DType;
[L657]               __tmp__Alloc := Alloc;
[L658]               __tmp__balance_ADDR := balance_ADDR;
[L659]               __tmp__M_Ref_int := M_Ref_int;
[L660]               __tmp__sum_balances0 := sum_balances0;
[L661]               __tmp__alloc_allowed_YearnFinanceBitToken_lvl0 := alloc_allowed_YearnFinanceBitToken_lvl0;
[L662]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L663]               __tmp__sum_allowed1 := sum_allowed1;
[L664]               __tmp__Length := Length;
[L665]               __tmp__now := now;
[L666]               __tmp__name_YearnFinanceBitToken := name_YearnFinanceBitToken;
[L667]               __tmp__symbol_YearnFinanceBitToken := symbol_YearnFinanceBitToken;
[L668]               __tmp__decimals_YearnFinanceBitToken := decimals_YearnFinanceBitToken;
[L669]               __tmp___totalSupply_YearnFinanceBitToken := _totalSupply_YearnFinanceBitToken;
[L670]               __tmp__balances_YearnFinanceBitToken := balances_YearnFinanceBitToken;
[L671]               __tmp__allowed_YearnFinanceBitToken := allowed_YearnFinanceBitToken;
[L672]   CALL        call success_s334 := transfer~address~uint256_YearnFinanceBitToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L1533]  COND TRUE   __tmp__DType[this] == YearnFinanceBitToken
[L1534]  CALL        call __var_2 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_YearnFinanceBitToken[this][msgsender_MSG], tokens_s334);
[L1339]  COND TRUE   !(b_s112 <= a_s112)
[L1340]              revert := true;
[L1534]  RET         call __var_2 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_YearnFinanceBitToken[this][msgsender_MSG], tokens_s334);
[L1535]  COND TRUE   revert
[L672]   RET         call success_s334 := transfer~address~uint256_YearnFinanceBitToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L673]               assume revert || gas < 0;
[L2773]  RET         call success_s334 := transfer~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L2863]  RET         call CorralChoice_YearnFinanceBitToken(this);

Loop:
[L2863]  CALL        call CorralChoice_YearnFinanceBitToken(this);
[L2704]              havoc msgsender_MSG;
[L2705]              havoc msgvalue_MSG;
[L2706]              havoc choice;
[L2707]              havoc __ret_0_totalSupply;
[L2708]              havoc tokenOwner_s247;
[L2709]              havoc balance_s247;
[L2710]              havoc tokenOwner_s263;
[L2711]              havoc spender_s263;
[L2712]              havoc remaining_s263;
[L2713]              havoc to_s334;
[L2714]              havoc tokens_s334;
[L2715]              havoc success_s334;
[L2716]              havoc spender_s291;
[L2717]              havoc tokens_s291;
[L2718]              havoc success_s291;
[L2719]              havoc from_s393;
[L2720]              havoc to_s393;
[L2721]              havoc tokens_s393;
[L2722]              havoc success_s393;
[L2723]              havoc a_s90;
[L2724]              havoc b_s90;
[L2725]              havoc c_s90;
[L2726]              havoc a_s112;
[L2727]              havoc b_s112;
[L2728]              havoc c_s112;
[L2729]              havoc a_s140;
[L2730]              havoc b_s140;
[L2731]              havoc c_s140;
[L2732]              havoc a_s162;
[L2733]              havoc b_s162;
[L2734]              havoc c_s162;
[L2735]              havoc __ret_0_name;
[L2736]              havoc __ret_0_symbol;
[L2737]              havoc __ret_0_decimals;
[L2738]              havoc __ret_0__totalSupply;
[L2739]              havoc tmpNow;
[L2740]              havoc gas;
[L2741]              assume gas > 4000000 && gas <= 8000000;
[L2742]              tmpNow := now;
[L2743]              havoc now;
[L2744]              assume now > tmpNow;
[L2745]              assume msgsender_MSG != null;
[L2746]              assume DType[msgsender_MSG] != ERC20Interface;
[L2747]              assume DType[msgsender_MSG] != SafeMath;
[L2748]              assume DType[msgsender_MSG] != YearnFinanceBitToken;
[L2749]              Alloc[msgsender_MSG] := true;
[L2750]  COND FALSE  !(choice == 14)
[L2756]  COND FALSE  !(choice == 13)
[L2762]  COND FALSE  !(choice == 12)
[L2768]  COND TRUE   choice == 11
[L2769]              gas := gas - 21000;
[L2770]  COND TRUE   gas >= 0
[L2771]              assume tokens_s334 >= 0 && tokens_s334 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2772]              assume msgvalue_MSG == 0;
[L2773]  CALL        call success_s334 := transfer~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s334 && tokens_s334 <= balances_YearnFinanceBitToken[this][msgsender_MSG]) && tokens_s334 >= 0) && tokens_s334 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][to_s334] >= 0) && balances_YearnFinanceBitToken[this][to_s334] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][msgsender_MSG] >= 0) && balances_YearnFinanceBitToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_YearnFinanceBitToken0 := true;
[L2]                 call_transfer_YearnFinanceBitToken0 := false;
[L2]                 revert := revert_hold;
[L652]               havoc __exception;
[L653]               revert := false;
[L654]   COND TRUE   __exception
[L655]               __tmp__Balance := Balance;
[L656]               __tmp__DType := DType;
[L657]               __tmp__Alloc := Alloc;
[L658]               __tmp__balance_ADDR := balance_ADDR;
[L659]               __tmp__M_Ref_int := M_Ref_int;
[L660]               __tmp__sum_balances0 := sum_balances0;
[L661]               __tmp__alloc_allowed_YearnFinanceBitToken_lvl0 := alloc_allowed_YearnFinanceBitToken_lvl0;
[L662]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L663]               __tmp__sum_allowed1 := sum_allowed1;
[L664]               __tmp__Length := Length;
[L665]               __tmp__now := now;
[L666]               __tmp__name_YearnFinanceBitToken := name_YearnFinanceBitToken;
[L667]               __tmp__symbol_YearnFinanceBitToken := symbol_YearnFinanceBitToken;
[L668]               __tmp__decimals_YearnFinanceBitToken := decimals_YearnFinanceBitToken;
[L669]               __tmp___totalSupply_YearnFinanceBitToken := _totalSupply_YearnFinanceBitToken;
[L670]               __tmp__balances_YearnFinanceBitToken := balances_YearnFinanceBitToken;
[L671]               __tmp__allowed_YearnFinanceBitToken := allowed_YearnFinanceBitToken;
[L672]   CALL        call success_s334 := transfer~address~uint256_YearnFinanceBitToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L1533]  COND TRUE   __tmp__DType[this] == YearnFinanceBitToken
[L1534]  CALL        call __var_2 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_YearnFinanceBitToken[this][msgsender_MSG], tokens_s334);
[L1339]  COND TRUE   !(b_s112 <= a_s112)
[L1340]              revert := true;
[L1534]  RET         call __var_2 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_YearnFinanceBitToken[this][msgsender_MSG], tokens_s334);
[L1535]  COND TRUE   revert
[L672]   RET         call success_s334 := transfer~address~uint256_YearnFinanceBitToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L673]               assume revert || gas < 0;
[L2773]  RET         call success_s334 := transfer~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L2863]  RET         call CorralChoice_YearnFinanceBitToken(this);

[2020-11-25 09:28:15,781 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:28:15,781 INFO  L82        PathProgramCache]: Analyzing trace with hash 1961269798, now seen corresponding path program 1 times
[2020-11-25 09:28:15,782 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:28:15,793 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:28:15,851 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 09:28:15,851 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:28:15,851 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 09:28:15,852 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:28:15,852 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 09:28:15,852 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 09:28:15,852 INFO  L87              Difference]: Start difference. First operand 1742 states and 1871 transitions. cyclomatic complexity: 131 Second operand 7 states.
[2020-11-25 09:28:16,512 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:28:16,512 INFO  L93              Difference]: Finished difference Result 1900 states and 2043 transitions.
[2020-11-25 09:28:16,513 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 09:28:16,513 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1900 states and 2043 transitions.
[2020-11-25 09:28:16,520 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 09:28:16,528 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1900 states to 1900 states and 2043 transitions.
[2020-11-25 09:28:16,528 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 670
[2020-11-25 09:28:16,528 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 670
[2020-11-25 09:28:16,528 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1900 states and 2043 transitions.
[2020-11-25 09:28:16,530 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:28:16,530 INFO  L728         BuchiCegarLoop]: Abstraction has 1900 states and 2043 transitions.
[2020-11-25 09:28:16,532 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1900 states and 2043 transitions.
[2020-11-25 09:28:16,549 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1900 to 1794.
[2020-11-25 09:28:16,549 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1794 states.
[2020-11-25 09:28:16,552 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1794 states to 1794 states and 1927 transitions.
[2020-11-25 09:28:16,552 INFO  L751         BuchiCegarLoop]: Abstraction has 1794 states and 1927 transitions.
[2020-11-25 09:28:16,552 INFO  L631         BuchiCegarLoop]: Abstraction has 1794 states and 1927 transitions.
[2020-11-25 09:28:16,552 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 09:28:16,552 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1794 states and 1927 transitions.
[2020-11-25 09:28:16,556 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:28:16,556 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:28:16,556 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:28:16,558 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:28:16,558 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_YearnFinanceBitToken0 := false;
[L2]                 call_transfer_YearnFinanceBitToken0 := false;
[L2]     CALL        call main();
[L2853]              assume null == 0;
[L2854]  CALL        call this := FreshRefGenerator__success();
[L1249]              havoc newRef;
[L1250]              assume Alloc[newRef] == false;
[L1251]              Alloc[newRef] := true;
[L1252]              assume newRef != null;
[L2854]  RET         call this := FreshRefGenerator__success();
[L2855]              assume now >= 0;
[L2856]              assume DType[this] == YearnFinanceBitToken;
[L2857]              assume msgvalue_MSG == 0;
[L2858]              gas := gas - 53000;
[L2859]  CALL        call YearnFinanceBitToken_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG);
[L398]               havoc __exception;
[L399]               revert := false;
[L400]   COND FALSE  !(__exception)
[L421]   CALL        call YearnFinanceBitToken_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1456]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1281]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1266]              assume msgsender_MSG != null;
[L1267]              Balance[this] := 0;
[L1281]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1282]  COND FALSE  !(revert)
[L1456]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1457]  COND FALSE  !(revert)
[L1460]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1313]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1298]              assume msgsender_MSG != null;
[L1299]              Balance[this] := 0;
[L1313]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1314]  COND FALSE  !(revert)
[L1460]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1461]  COND FALSE  !(revert)
[L1464]  CALL        call YearnFinanceBitToken_YearnFinanceBitToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1417]              assume msgsender_MSG != null;
[L1418]              Balance[this] := 0;
[L1419]              name_YearnFinanceBitToken[this] := 627147201;
[L1420]              symbol_YearnFinanceBitToken[this] := 627147201;
[L1421]              decimals_YearnFinanceBitToken[this] := 0;
[L1422]              _totalSupply_YearnFinanceBitToken[this] := 0;
[L1423]              balances_YearnFinanceBitToken[this] := zeroRefintArr();
[L1424]              sum_balances0[this] := 0;
[L1425]              allowed_YearnFinanceBitToken[this] := zeroRefRefintArr();
[L1426]              sum_allowed1[this] := 0;
[L1428]              name_YearnFinanceBitToken[this] := 1658284292;
[L1429]              symbol_YearnFinanceBitToken[this] := -1175268548;
[L1430]              decimals_YearnFinanceBitToken[this] := 18;
[L1431]              _totalSupply_YearnFinanceBitToken[this] := 7000000000000000000000;
[L1432]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1433]              balances_YearnFinanceBitToken[this][msgsender_MSG] := _totalSupply_YearnFinanceBitToken[this];
[L1434]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1435]              assert { :EventEmitted "Transfer_YearnFinanceBitToken" } true;
[L1464]  RET         call YearnFinanceBitToken_YearnFinanceBitToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1465]  COND FALSE  !(revert)
[L421]   RET         call YearnFinanceBitToken_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG);
[L422]               assume !revert && gas >= 0;
[L2859]  RET         call YearnFinanceBitToken_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG);
[L2860]              assume !revert && gas >= 0;
[L2863]  CALL        call CorralChoice_YearnFinanceBitToken(this);
[L2704]              havoc msgsender_MSG;
[L2705]              havoc msgvalue_MSG;
[L2706]              havoc choice;
[L2707]              havoc __ret_0_totalSupply;
[L2708]              havoc tokenOwner_s247;
[L2709]              havoc balance_s247;
[L2710]              havoc tokenOwner_s263;
[L2711]              havoc spender_s263;
[L2712]              havoc remaining_s263;
[L2713]              havoc to_s334;
[L2714]              havoc tokens_s334;
[L2715]              havoc success_s334;
[L2716]              havoc spender_s291;
[L2717]              havoc tokens_s291;
[L2718]              havoc success_s291;
[L2719]              havoc from_s393;
[L2720]              havoc to_s393;
[L2721]              havoc tokens_s393;
[L2722]              havoc success_s393;
[L2723]              havoc a_s90;
[L2724]              havoc b_s90;
[L2725]              havoc c_s90;
[L2726]              havoc a_s112;
[L2727]              havoc b_s112;
[L2728]              havoc c_s112;
[L2729]              havoc a_s140;
[L2730]              havoc b_s140;
[L2731]              havoc c_s140;
[L2732]              havoc a_s162;
[L2733]              havoc b_s162;
[L2734]              havoc c_s162;
[L2735]              havoc __ret_0_name;
[L2736]              havoc __ret_0_symbol;
[L2737]              havoc __ret_0_decimals;
[L2738]              havoc __ret_0__totalSupply;
[L2739]              havoc tmpNow;
[L2740]              havoc gas;
[L2741]              assume gas > 4000000 && gas <= 8000000;
[L2742]              tmpNow := now;
[L2743]              havoc now;
[L2744]              assume now > tmpNow;
[L2745]              assume msgsender_MSG != null;
[L2746]              assume DType[msgsender_MSG] != ERC20Interface;
[L2747]              assume DType[msgsender_MSG] != SafeMath;
[L2748]              assume DType[msgsender_MSG] != YearnFinanceBitToken;
[L2749]              Alloc[msgsender_MSG] := true;
[L2750]  COND FALSE  !(choice == 14)
[L2756]  COND FALSE  !(choice == 13)
[L2762]  COND FALSE  !(choice == 12)
[L2768]  COND TRUE   choice == 11
[L2769]              gas := gas - 21000;
[L2770]  COND TRUE   gas >= 0
[L2771]              assume tokens_s334 >= 0 && tokens_s334 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2772]              assume msgvalue_MSG == 0;
[L2773]  CALL        call success_s334 := transfer~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s334 && tokens_s334 <= balances_YearnFinanceBitToken[this][msgsender_MSG]) && tokens_s334 >= 0) && tokens_s334 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][to_s334] >= 0) && balances_YearnFinanceBitToken[this][to_s334] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][msgsender_MSG] >= 0) && balances_YearnFinanceBitToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_YearnFinanceBitToken0 := true;
[L2]                 call_transfer_YearnFinanceBitToken0 := false;
[L2]                 revert := revert_hold;
[L652]               havoc __exception;
[L653]               revert := false;
[L654]   COND FALSE  !(__exception)
[L675]   CALL        call success_s334 := transfer~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L1563]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1564]  CALL        call __var_2 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][msgsender_MSG], tokens_s334);
[L1348]  COND FALSE  !(!(b_s112 <= a_s112))
[L1352]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1564]  RET         call __var_2 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][msgsender_MSG], tokens_s334);
[L1565]  COND FALSE  !(revert)
[L1571]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1572]              balances_YearnFinanceBitToken[this][msgsender_MSG] := __var_2;
[L1573]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1574]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1575]  CALL        call __var_3 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][to_s334], tokens_s334);
[L1330]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1331]  COND FALSE  !(!(c_s90 >= a_s90))
[L1575]  RET         call __var_3 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][to_s334], tokens_s334);
[L1576]  COND FALSE  !(revert)
[L1582]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][to_s334];
[L1583]              balances_YearnFinanceBitToken[this][to_s334] := __var_3;
[L1584]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][to_s334];
[L1585]              assert { :EventEmitted "Transfer_YearnFinanceBitToken" } true;
[L1586]              success_s334 := true;
[L675]   RET         call success_s334 := transfer~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L676]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((success_s334 == true && _totalSupply_YearnFinanceBitToken[this] == old(_totalSupply_YearnFinanceBitToken[this])) && balances_YearnFinanceBitToken[this] == old(balances_YearnFinanceBitToken[this])) && allowed_YearnFinanceBitToken[this] == old(allowed_YearnFinanceBitToken[this])) && name_YearnFinanceBitToken[this] == old(name_YearnFinanceBitToken[this])) && symbol_YearnFinanceBitToken[this] == old(symbol_YearnFinanceBitToken[this])) && decimals_YearnFinanceBitToken[this] == old(decimals_YearnFinanceBitToken[this]));
[L2]                 revert := revert_hold;
[L2773]  RET         call success_s334 := transfer~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L2863]  RET         call CorralChoice_YearnFinanceBitToken(this);

Loop:
[L2863]  CALL        call CorralChoice_YearnFinanceBitToken(this);
[L2704]              havoc msgsender_MSG;
[L2705]              havoc msgvalue_MSG;
[L2706]              havoc choice;
[L2707]              havoc __ret_0_totalSupply;
[L2708]              havoc tokenOwner_s247;
[L2709]              havoc balance_s247;
[L2710]              havoc tokenOwner_s263;
[L2711]              havoc spender_s263;
[L2712]              havoc remaining_s263;
[L2713]              havoc to_s334;
[L2714]              havoc tokens_s334;
[L2715]              havoc success_s334;
[L2716]              havoc spender_s291;
[L2717]              havoc tokens_s291;
[L2718]              havoc success_s291;
[L2719]              havoc from_s393;
[L2720]              havoc to_s393;
[L2721]              havoc tokens_s393;
[L2722]              havoc success_s393;
[L2723]              havoc a_s90;
[L2724]              havoc b_s90;
[L2725]              havoc c_s90;
[L2726]              havoc a_s112;
[L2727]              havoc b_s112;
[L2728]              havoc c_s112;
[L2729]              havoc a_s140;
[L2730]              havoc b_s140;
[L2731]              havoc c_s140;
[L2732]              havoc a_s162;
[L2733]              havoc b_s162;
[L2734]              havoc c_s162;
[L2735]              havoc __ret_0_name;
[L2736]              havoc __ret_0_symbol;
[L2737]              havoc __ret_0_decimals;
[L2738]              havoc __ret_0__totalSupply;
[L2739]              havoc tmpNow;
[L2740]              havoc gas;
[L2741]              assume gas > 4000000 && gas <= 8000000;
[L2742]              tmpNow := now;
[L2743]              havoc now;
[L2744]              assume now > tmpNow;
[L2745]              assume msgsender_MSG != null;
[L2746]              assume DType[msgsender_MSG] != ERC20Interface;
[L2747]              assume DType[msgsender_MSG] != SafeMath;
[L2748]              assume DType[msgsender_MSG] != YearnFinanceBitToken;
[L2749]              Alloc[msgsender_MSG] := true;
[L2750]  COND FALSE  !(choice == 14)
[L2756]  COND FALSE  !(choice == 13)
[L2762]  COND FALSE  !(choice == 12)
[L2768]  COND TRUE   choice == 11
[L2769]              gas := gas - 21000;
[L2770]  COND TRUE   gas >= 0
[L2771]              assume tokens_s334 >= 0 && tokens_s334 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2772]              assume msgvalue_MSG == 0;
[L2773]  CALL        call success_s334 := transfer~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s334 && tokens_s334 <= balances_YearnFinanceBitToken[this][msgsender_MSG]) && tokens_s334 >= 0) && tokens_s334 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][to_s334] >= 0) && balances_YearnFinanceBitToken[this][to_s334] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][msgsender_MSG] >= 0) && balances_YearnFinanceBitToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_YearnFinanceBitToken0 := true;
[L2]                 call_transfer_YearnFinanceBitToken0 := false;
[L2]                 revert := revert_hold;
[L652]               havoc __exception;
[L653]               revert := false;
[L654]   COND FALSE  !(__exception)
[L675]   CALL        call success_s334 := transfer~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L1563]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1564]  CALL        call __var_2 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][msgsender_MSG], tokens_s334);
[L1348]  COND FALSE  !(!(b_s112 <= a_s112))
[L1352]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1564]  RET         call __var_2 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][msgsender_MSG], tokens_s334);
[L1565]  COND FALSE  !(revert)
[L1571]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1572]              balances_YearnFinanceBitToken[this][msgsender_MSG] := __var_2;
[L1573]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1574]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1575]  CALL        call __var_3 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][to_s334], tokens_s334);
[L1330]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1331]  COND FALSE  !(!(c_s90 >= a_s90))
[L1575]  RET         call __var_3 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][to_s334], tokens_s334);
[L1576]  COND FALSE  !(revert)
[L1582]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][to_s334];
[L1583]              balances_YearnFinanceBitToken[this][to_s334] := __var_3;
[L1584]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][to_s334];
[L1585]              assert { :EventEmitted "Transfer_YearnFinanceBitToken" } true;
[L1586]              success_s334 := true;
[L675]   RET         call success_s334 := transfer~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L676]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((success_s334 == true && _totalSupply_YearnFinanceBitToken[this] == old(_totalSupply_YearnFinanceBitToken[this])) && balances_YearnFinanceBitToken[this] == old(balances_YearnFinanceBitToken[this])) && allowed_YearnFinanceBitToken[this] == old(allowed_YearnFinanceBitToken[this])) && name_YearnFinanceBitToken[this] == old(name_YearnFinanceBitToken[this])) && symbol_YearnFinanceBitToken[this] == old(symbol_YearnFinanceBitToken[this])) && decimals_YearnFinanceBitToken[this] == old(decimals_YearnFinanceBitToken[this]));
[L2]                 revert := revert_hold;
[L2773]  RET         call success_s334 := transfer~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L2863]  RET         call CorralChoice_YearnFinanceBitToken(this);

[2020-11-25 09:28:16,561 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:28:16,561 INFO  L82        PathProgramCache]: Analyzing trace with hash -351892578, now seen corresponding path program 1 times
[2020-11-25 09:28:16,562 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:28:16,603 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:28:17,186 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 09:28:17,186 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:28:17,186 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [22] imperfect sequences [] total 22
[2020-11-25 09:28:17,187 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:28:17,187 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 23 interpolants.
[2020-11-25 09:28:17,187 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=54, Invalid=452, Unknown=0, NotChecked=0, Total=506
[2020-11-25 09:28:17,187 INFO  L87              Difference]: Start difference. First operand 1794 states and 1927 transitions. cyclomatic complexity: 135 Second operand 23 states.
[2020-11-25 09:28:19,858 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:28:19,858 INFO  L93              Difference]: Finished difference Result 1861 states and 2026 transitions.
[2020-11-25 09:28:19,859 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 24 states. 
[2020-11-25 09:28:19,859 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1861 states and 2026 transitions.
[2020-11-25 09:28:19,863 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 09:28:19,868 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1861 states to 1861 states and 2026 transitions.
[2020-11-25 09:28:19,868 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 649
[2020-11-25 09:28:19,869 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 649
[2020-11-25 09:28:19,869 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1861 states and 2026 transitions.
[2020-11-25 09:28:19,870 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:28:19,870 INFO  L728         BuchiCegarLoop]: Abstraction has 1861 states and 2026 transitions.
[2020-11-25 09:28:19,872 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1861 states and 2026 transitions.
[2020-11-25 09:28:19,887 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1861 to 1844.
[2020-11-25 09:28:19,887 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1844 states.
[2020-11-25 09:28:19,890 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1844 states to 1844 states and 1988 transitions.
[2020-11-25 09:28:19,890 INFO  L751         BuchiCegarLoop]: Abstraction has 1844 states and 1988 transitions.
[2020-11-25 09:28:19,890 INFO  L631         BuchiCegarLoop]: Abstraction has 1844 states and 1988 transitions.
[2020-11-25 09:28:19,890 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 09:28:19,890 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1844 states and 1988 transitions.
[2020-11-25 09:28:19,894 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 09:28:19,894 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:28:19,894 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:28:19,896 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:28:19,896 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_YearnFinanceBitToken0 := false;
[L2]                 call_transfer_YearnFinanceBitToken0 := false;
[L2]     CALL        call main();
[L2853]              assume null == 0;
[L2854]  CALL        call this := FreshRefGenerator__success();
[L1249]              havoc newRef;
[L1250]              assume Alloc[newRef] == false;
[L1251]              Alloc[newRef] := true;
[L1252]              assume newRef != null;
[L2854]  RET         call this := FreshRefGenerator__success();
[L2855]              assume now >= 0;
[L2856]              assume DType[this] == YearnFinanceBitToken;
[L2857]              assume msgvalue_MSG == 0;
[L2858]              gas := gas - 53000;
[L2859]  CALL        call YearnFinanceBitToken_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG);
[L398]               havoc __exception;
[L399]               revert := false;
[L400]   COND FALSE  !(__exception)
[L421]   CALL        call YearnFinanceBitToken_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1456]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1281]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1266]              assume msgsender_MSG != null;
[L1267]              Balance[this] := 0;
[L1281]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1282]  COND FALSE  !(revert)
[L1456]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1457]  COND FALSE  !(revert)
[L1460]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1313]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1298]              assume msgsender_MSG != null;
[L1299]              Balance[this] := 0;
[L1313]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1314]  COND FALSE  !(revert)
[L1460]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1461]  COND FALSE  !(revert)
[L1464]  CALL        call YearnFinanceBitToken_YearnFinanceBitToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1417]              assume msgsender_MSG != null;
[L1418]              Balance[this] := 0;
[L1419]              name_YearnFinanceBitToken[this] := 627147201;
[L1420]              symbol_YearnFinanceBitToken[this] := 627147201;
[L1421]              decimals_YearnFinanceBitToken[this] := 0;
[L1422]              _totalSupply_YearnFinanceBitToken[this] := 0;
[L1423]              balances_YearnFinanceBitToken[this] := zeroRefintArr();
[L1424]              sum_balances0[this] := 0;
[L1425]              allowed_YearnFinanceBitToken[this] := zeroRefRefintArr();
[L1426]              sum_allowed1[this] := 0;
[L1428]              name_YearnFinanceBitToken[this] := 1658284292;
[L1429]              symbol_YearnFinanceBitToken[this] := -1175268548;
[L1430]              decimals_YearnFinanceBitToken[this] := 18;
[L1431]              _totalSupply_YearnFinanceBitToken[this] := 7000000000000000000000;
[L1432]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1433]              balances_YearnFinanceBitToken[this][msgsender_MSG] := _totalSupply_YearnFinanceBitToken[this];
[L1434]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1435]              assert { :EventEmitted "Transfer_YearnFinanceBitToken" } true;
[L1464]  RET         call YearnFinanceBitToken_YearnFinanceBitToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1465]  COND FALSE  !(revert)
[L421]   RET         call YearnFinanceBitToken_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG);
[L422]               assume !revert && gas >= 0;
[L2859]  RET         call YearnFinanceBitToken_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG);
[L2860]              assume !revert && gas >= 0;
[L2863]  CALL        call CorralChoice_YearnFinanceBitToken(this);
[L2704]              havoc msgsender_MSG;
[L2705]              havoc msgvalue_MSG;
[L2706]              havoc choice;
[L2707]              havoc __ret_0_totalSupply;
[L2708]              havoc tokenOwner_s247;
[L2709]              havoc balance_s247;
[L2710]              havoc tokenOwner_s263;
[L2711]              havoc spender_s263;
[L2712]              havoc remaining_s263;
[L2713]              havoc to_s334;
[L2714]              havoc tokens_s334;
[L2715]              havoc success_s334;
[L2716]              havoc spender_s291;
[L2717]              havoc tokens_s291;
[L2718]              havoc success_s291;
[L2719]              havoc from_s393;
[L2720]              havoc to_s393;
[L2721]              havoc tokens_s393;
[L2722]              havoc success_s393;
[L2723]              havoc a_s90;
[L2724]              havoc b_s90;
[L2725]              havoc c_s90;
[L2726]              havoc a_s112;
[L2727]              havoc b_s112;
[L2728]              havoc c_s112;
[L2729]              havoc a_s140;
[L2730]              havoc b_s140;
[L2731]              havoc c_s140;
[L2732]              havoc a_s162;
[L2733]              havoc b_s162;
[L2734]              havoc c_s162;
[L2735]              havoc __ret_0_name;
[L2736]              havoc __ret_0_symbol;
[L2737]              havoc __ret_0_decimals;
[L2738]              havoc __ret_0__totalSupply;
[L2739]              havoc tmpNow;
[L2740]              havoc gas;
[L2741]              assume gas > 4000000 && gas <= 8000000;
[L2742]              tmpNow := now;
[L2743]              havoc now;
[L2744]              assume now > tmpNow;
[L2745]              assume msgsender_MSG != null;
[L2746]              assume DType[msgsender_MSG] != ERC20Interface;
[L2747]              assume DType[msgsender_MSG] != SafeMath;
[L2748]              assume DType[msgsender_MSG] != YearnFinanceBitToken;
[L2749]              Alloc[msgsender_MSG] := true;
[L2750]  COND FALSE  !(choice == 14)
[L2756]  COND FALSE  !(choice == 13)
[L2762]  COND FALSE  !(choice == 12)
[L2768]  COND TRUE   choice == 11
[L2769]              gas := gas - 21000;
[L2770]  COND TRUE   gas >= 0
[L2771]              assume tokens_s334 >= 0 && tokens_s334 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2772]              assume msgvalue_MSG == 0;
[L2773]  CALL        call success_s334 := transfer~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s334 && tokens_s334 <= balances_YearnFinanceBitToken[this][msgsender_MSG]) && tokens_s334 >= 0) && tokens_s334 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][to_s334] >= 0) && balances_YearnFinanceBitToken[this][to_s334] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][msgsender_MSG] >= 0) && balances_YearnFinanceBitToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_YearnFinanceBitToken0 := true;
[L2]                 call_transfer_YearnFinanceBitToken0 := false;
[L2]                 revert := revert_hold;
[L652]               havoc __exception;
[L653]               revert := false;
[L654]   COND TRUE   __exception
[L655]               __tmp__Balance := Balance;
[L656]               __tmp__DType := DType;
[L657]               __tmp__Alloc := Alloc;
[L658]               __tmp__balance_ADDR := balance_ADDR;
[L659]               __tmp__M_Ref_int := M_Ref_int;
[L660]               __tmp__sum_balances0 := sum_balances0;
[L661]               __tmp__alloc_allowed_YearnFinanceBitToken_lvl0 := alloc_allowed_YearnFinanceBitToken_lvl0;
[L662]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L663]               __tmp__sum_allowed1 := sum_allowed1;
[L664]               __tmp__Length := Length;
[L665]               __tmp__now := now;
[L666]               __tmp__name_YearnFinanceBitToken := name_YearnFinanceBitToken;
[L667]               __tmp__symbol_YearnFinanceBitToken := symbol_YearnFinanceBitToken;
[L668]               __tmp__decimals_YearnFinanceBitToken := decimals_YearnFinanceBitToken;
[L669]               __tmp___totalSupply_YearnFinanceBitToken := _totalSupply_YearnFinanceBitToken;
[L670]               __tmp__balances_YearnFinanceBitToken := balances_YearnFinanceBitToken;
[L671]               __tmp__allowed_YearnFinanceBitToken := allowed_YearnFinanceBitToken;
[L672]   CALL        call success_s334 := transfer~address~uint256_YearnFinanceBitToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L1533]  COND TRUE   __tmp__DType[this] == YearnFinanceBitToken
[L1534]  CALL        call __var_2 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_YearnFinanceBitToken[this][msgsender_MSG], tokens_s334);
[L1339]  COND FALSE  !(!(b_s112 <= a_s112))
[L1343]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1534]  RET         call __var_2 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_YearnFinanceBitToken[this][msgsender_MSG], tokens_s334);
[L1535]  COND FALSE  !(revert)
[L1541]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1542]              __tmp__balances_YearnFinanceBitToken[this][msgsender_MSG] := __var_2;
[L1543]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1544]  COND TRUE   __tmp__DType[this] == YearnFinanceBitToken
[L1545]  CALL        call __var_3 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_YearnFinanceBitToken[this][to_s334], tokens_s334);
[L1321]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1322]  COND TRUE   !(c_s90 >= a_s90)
[L1323]              revert := true;
[L1545]  RET         call __var_3 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_YearnFinanceBitToken[this][to_s334], tokens_s334);
[L1546]  COND TRUE   revert
[L672]   RET         call success_s334 := transfer~address~uint256_YearnFinanceBitToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L673]               assume revert || gas < 0;
[L2773]  RET         call success_s334 := transfer~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L2863]  RET         call CorralChoice_YearnFinanceBitToken(this);

Loop:
[L2863]  CALL        call CorralChoice_YearnFinanceBitToken(this);
[L2704]              havoc msgsender_MSG;
[L2705]              havoc msgvalue_MSG;
[L2706]              havoc choice;
[L2707]              havoc __ret_0_totalSupply;
[L2708]              havoc tokenOwner_s247;
[L2709]              havoc balance_s247;
[L2710]              havoc tokenOwner_s263;
[L2711]              havoc spender_s263;
[L2712]              havoc remaining_s263;
[L2713]              havoc to_s334;
[L2714]              havoc tokens_s334;
[L2715]              havoc success_s334;
[L2716]              havoc spender_s291;
[L2717]              havoc tokens_s291;
[L2718]              havoc success_s291;
[L2719]              havoc from_s393;
[L2720]              havoc to_s393;
[L2721]              havoc tokens_s393;
[L2722]              havoc success_s393;
[L2723]              havoc a_s90;
[L2724]              havoc b_s90;
[L2725]              havoc c_s90;
[L2726]              havoc a_s112;
[L2727]              havoc b_s112;
[L2728]              havoc c_s112;
[L2729]              havoc a_s140;
[L2730]              havoc b_s140;
[L2731]              havoc c_s140;
[L2732]              havoc a_s162;
[L2733]              havoc b_s162;
[L2734]              havoc c_s162;
[L2735]              havoc __ret_0_name;
[L2736]              havoc __ret_0_symbol;
[L2737]              havoc __ret_0_decimals;
[L2738]              havoc __ret_0__totalSupply;
[L2739]              havoc tmpNow;
[L2740]              havoc gas;
[L2741]              assume gas > 4000000 && gas <= 8000000;
[L2742]              tmpNow := now;
[L2743]              havoc now;
[L2744]              assume now > tmpNow;
[L2745]              assume msgsender_MSG != null;
[L2746]              assume DType[msgsender_MSG] != ERC20Interface;
[L2747]              assume DType[msgsender_MSG] != SafeMath;
[L2748]              assume DType[msgsender_MSG] != YearnFinanceBitToken;
[L2749]              Alloc[msgsender_MSG] := true;
[L2750]  COND FALSE  !(choice == 14)
[L2756]  COND FALSE  !(choice == 13)
[L2762]  COND FALSE  !(choice == 12)
[L2768]  COND TRUE   choice == 11
[L2769]              gas := gas - 21000;
[L2770]  COND TRUE   gas >= 0
[L2771]              assume tokens_s334 >= 0 && tokens_s334 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2772]              assume msgvalue_MSG == 0;
[L2773]  CALL        call success_s334 := transfer~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s334 && tokens_s334 <= balances_YearnFinanceBitToken[this][msgsender_MSG]) && tokens_s334 >= 0) && tokens_s334 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][to_s334] >= 0) && balances_YearnFinanceBitToken[this][to_s334] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][msgsender_MSG] >= 0) && balances_YearnFinanceBitToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_YearnFinanceBitToken0 := true;
[L2]                 call_transfer_YearnFinanceBitToken0 := false;
[L2]                 revert := revert_hold;
[L652]               havoc __exception;
[L653]               revert := false;
[L654]   COND TRUE   __exception
[L655]               __tmp__Balance := Balance;
[L656]               __tmp__DType := DType;
[L657]               __tmp__Alloc := Alloc;
[L658]               __tmp__balance_ADDR := balance_ADDR;
[L659]               __tmp__M_Ref_int := M_Ref_int;
[L660]               __tmp__sum_balances0 := sum_balances0;
[L661]               __tmp__alloc_allowed_YearnFinanceBitToken_lvl0 := alloc_allowed_YearnFinanceBitToken_lvl0;
[L662]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L663]               __tmp__sum_allowed1 := sum_allowed1;
[L664]               __tmp__Length := Length;
[L665]               __tmp__now := now;
[L666]               __tmp__name_YearnFinanceBitToken := name_YearnFinanceBitToken;
[L667]               __tmp__symbol_YearnFinanceBitToken := symbol_YearnFinanceBitToken;
[L668]               __tmp__decimals_YearnFinanceBitToken := decimals_YearnFinanceBitToken;
[L669]               __tmp___totalSupply_YearnFinanceBitToken := _totalSupply_YearnFinanceBitToken;
[L670]               __tmp__balances_YearnFinanceBitToken := balances_YearnFinanceBitToken;
[L671]               __tmp__allowed_YearnFinanceBitToken := allowed_YearnFinanceBitToken;
[L672]   CALL        call success_s334 := transfer~address~uint256_YearnFinanceBitToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L1533]  COND TRUE   __tmp__DType[this] == YearnFinanceBitToken
[L1534]  CALL        call __var_2 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_YearnFinanceBitToken[this][msgsender_MSG], tokens_s334);
[L1339]  COND FALSE  !(!(b_s112 <= a_s112))
[L1343]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1534]  RET         call __var_2 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_YearnFinanceBitToken[this][msgsender_MSG], tokens_s334);
[L1535]  COND FALSE  !(revert)
[L1541]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1542]              __tmp__balances_YearnFinanceBitToken[this][msgsender_MSG] := __var_2;
[L1543]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1544]  COND TRUE   __tmp__DType[this] == YearnFinanceBitToken
[L1545]  CALL        call __var_3 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_YearnFinanceBitToken[this][to_s334], tokens_s334);
[L1321]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1322]  COND TRUE   !(c_s90 >= a_s90)
[L1323]              revert := true;
[L1545]  RET         call __var_3 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_YearnFinanceBitToken[this][to_s334], tokens_s334);
[L1546]  COND TRUE   revert
[L672]   RET         call success_s334 := transfer~address~uint256_YearnFinanceBitToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L673]               assume revert || gas < 0;
[L2773]  RET         call success_s334 := transfer~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L2863]  RET         call CorralChoice_YearnFinanceBitToken(this);

[2020-11-25 09:28:19,898 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:28:19,899 INFO  L82        PathProgramCache]: Analyzing trace with hash 2067573029, now seen corresponding path program 1 times
[2020-11-25 09:28:19,899 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:28:19,907 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:28:19,960 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 09:28:19,961 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:28:19,961 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [12] imperfect sequences [] total 12
[2020-11-25 09:28:19,961 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:28:19,961 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-11-25 09:28:19,961 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=23, Invalid=109, Unknown=0, NotChecked=0, Total=132
[2020-11-25 09:28:19,961 INFO  L87              Difference]: Start difference. First operand 1844 states and 1988 transitions. cyclomatic complexity: 148 Second operand 12 states.
[2020-11-25 09:28:20,726 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:28:20,726 INFO  L93              Difference]: Finished difference Result 1938 states and 2099 transitions.
[2020-11-25 09:28:20,726 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 13 states. 
[2020-11-25 09:28:20,726 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1938 states and 2099 transitions.
[2020-11-25 09:28:20,732 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 09:28:20,736 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1938 states to 1938 states and 2099 transitions.
[2020-11-25 09:28:20,736 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 689
[2020-11-25 09:28:20,736 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 689
[2020-11-25 09:28:20,736 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1938 states and 2099 transitions.
[2020-11-25 09:28:20,738 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:28:20,738 INFO  L728         BuchiCegarLoop]: Abstraction has 1938 states and 2099 transitions.
[2020-11-25 09:28:20,739 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1938 states and 2099 transitions.
[2020-11-25 09:28:20,750 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1938 to 1844.
[2020-11-25 09:28:20,750 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1844 states.
[2020-11-25 09:28:20,752 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1844 states to 1844 states and 1988 transitions.
[2020-11-25 09:28:20,752 INFO  L751         BuchiCegarLoop]: Abstraction has 1844 states and 1988 transitions.
[2020-11-25 09:28:20,752 INFO  L631         BuchiCegarLoop]: Abstraction has 1844 states and 1988 transitions.
[2020-11-25 09:28:20,752 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 09:28:20,752 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1844 states and 1988 transitions.
[2020-11-25 09:28:20,754 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 09:28:20,755 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:28:20,755 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:28:20,755 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:28:20,756 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_YearnFinanceBitToken0 := false;
[L2]                 call_transfer_YearnFinanceBitToken0 := false;
[L2]     CALL        call main();
[L2853]              assume null == 0;
[L2854]  CALL        call this := FreshRefGenerator__success();
[L1249]              havoc newRef;
[L1250]              assume Alloc[newRef] == false;
[L1251]              Alloc[newRef] := true;
[L1252]              assume newRef != null;
[L2854]  RET         call this := FreshRefGenerator__success();
[L2855]              assume now >= 0;
[L2856]              assume DType[this] == YearnFinanceBitToken;
[L2857]              assume msgvalue_MSG == 0;
[L2858]              gas := gas - 53000;
[L2859]  CALL        call YearnFinanceBitToken_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG);
[L398]               havoc __exception;
[L399]               revert := false;
[L400]   COND FALSE  !(__exception)
[L421]   CALL        call YearnFinanceBitToken_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1456]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1281]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1266]              assume msgsender_MSG != null;
[L1267]              Balance[this] := 0;
[L1281]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1282]  COND FALSE  !(revert)
[L1456]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1457]  COND FALSE  !(revert)
[L1460]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1313]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1298]              assume msgsender_MSG != null;
[L1299]              Balance[this] := 0;
[L1313]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1314]  COND FALSE  !(revert)
[L1460]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1461]  COND FALSE  !(revert)
[L1464]  CALL        call YearnFinanceBitToken_YearnFinanceBitToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1417]              assume msgsender_MSG != null;
[L1418]              Balance[this] := 0;
[L1419]              name_YearnFinanceBitToken[this] := 627147201;
[L1420]              symbol_YearnFinanceBitToken[this] := 627147201;
[L1421]              decimals_YearnFinanceBitToken[this] := 0;
[L1422]              _totalSupply_YearnFinanceBitToken[this] := 0;
[L1423]              balances_YearnFinanceBitToken[this] := zeroRefintArr();
[L1424]              sum_balances0[this] := 0;
[L1425]              allowed_YearnFinanceBitToken[this] := zeroRefRefintArr();
[L1426]              sum_allowed1[this] := 0;
[L1428]              name_YearnFinanceBitToken[this] := 1658284292;
[L1429]              symbol_YearnFinanceBitToken[this] := -1175268548;
[L1430]              decimals_YearnFinanceBitToken[this] := 18;
[L1431]              _totalSupply_YearnFinanceBitToken[this] := 7000000000000000000000;
[L1432]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1433]              balances_YearnFinanceBitToken[this][msgsender_MSG] := _totalSupply_YearnFinanceBitToken[this];
[L1434]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1435]              assert { :EventEmitted "Transfer_YearnFinanceBitToken" } true;
[L1464]  RET         call YearnFinanceBitToken_YearnFinanceBitToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1465]  COND FALSE  !(revert)
[L421]   RET         call YearnFinanceBitToken_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG);
[L422]               assume !revert && gas >= 0;
[L2859]  RET         call YearnFinanceBitToken_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG);
[L2860]              assume !revert && gas >= 0;
[L2863]  CALL        call CorralChoice_YearnFinanceBitToken(this);
[L2704]              havoc msgsender_MSG;
[L2705]              havoc msgvalue_MSG;
[L2706]              havoc choice;
[L2707]              havoc __ret_0_totalSupply;
[L2708]              havoc tokenOwner_s247;
[L2709]              havoc balance_s247;
[L2710]              havoc tokenOwner_s263;
[L2711]              havoc spender_s263;
[L2712]              havoc remaining_s263;
[L2713]              havoc to_s334;
[L2714]              havoc tokens_s334;
[L2715]              havoc success_s334;
[L2716]              havoc spender_s291;
[L2717]              havoc tokens_s291;
[L2718]              havoc success_s291;
[L2719]              havoc from_s393;
[L2720]              havoc to_s393;
[L2721]              havoc tokens_s393;
[L2722]              havoc success_s393;
[L2723]              havoc a_s90;
[L2724]              havoc b_s90;
[L2725]              havoc c_s90;
[L2726]              havoc a_s112;
[L2727]              havoc b_s112;
[L2728]              havoc c_s112;
[L2729]              havoc a_s140;
[L2730]              havoc b_s140;
[L2731]              havoc c_s140;
[L2732]              havoc a_s162;
[L2733]              havoc b_s162;
[L2734]              havoc c_s162;
[L2735]              havoc __ret_0_name;
[L2736]              havoc __ret_0_symbol;
[L2737]              havoc __ret_0_decimals;
[L2738]              havoc __ret_0__totalSupply;
[L2739]              havoc tmpNow;
[L2740]              havoc gas;
[L2741]              assume gas > 4000000 && gas <= 8000000;
[L2742]              tmpNow := now;
[L2743]              havoc now;
[L2744]              assume now > tmpNow;
[L2745]              assume msgsender_MSG != null;
[L2746]              assume DType[msgsender_MSG] != ERC20Interface;
[L2747]              assume DType[msgsender_MSG] != SafeMath;
[L2748]              assume DType[msgsender_MSG] != YearnFinanceBitToken;
[L2749]              Alloc[msgsender_MSG] := true;
[L2750]  COND FALSE  !(choice == 14)
[L2756]  COND FALSE  !(choice == 13)
[L2762]  COND FALSE  !(choice == 12)
[L2768]  COND TRUE   choice == 11
[L2769]              gas := gas - 21000;
[L2770]  COND TRUE   gas >= 0
[L2771]              assume tokens_s334 >= 0 && tokens_s334 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2772]              assume msgvalue_MSG == 0;
[L2773]  CALL        call success_s334 := transfer~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s334 && tokens_s334 <= balances_YearnFinanceBitToken[this][msgsender_MSG]) && tokens_s334 >= 0) && tokens_s334 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][to_s334] >= 0) && balances_YearnFinanceBitToken[this][to_s334] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][msgsender_MSG] >= 0) && balances_YearnFinanceBitToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_YearnFinanceBitToken0 := true;
[L2]                 call_transfer_YearnFinanceBitToken0 := false;
[L2]                 revert := revert_hold;
[L652]               havoc __exception;
[L653]               revert := false;
[L654]   COND TRUE   __exception
[L655]               __tmp__Balance := Balance;
[L656]               __tmp__DType := DType;
[L657]               __tmp__Alloc := Alloc;
[L658]               __tmp__balance_ADDR := balance_ADDR;
[L659]               __tmp__M_Ref_int := M_Ref_int;
[L660]               __tmp__sum_balances0 := sum_balances0;
[L661]               __tmp__alloc_allowed_YearnFinanceBitToken_lvl0 := alloc_allowed_YearnFinanceBitToken_lvl0;
[L662]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L663]               __tmp__sum_allowed1 := sum_allowed1;
[L664]               __tmp__Length := Length;
[L665]               __tmp__now := now;
[L666]               __tmp__name_YearnFinanceBitToken := name_YearnFinanceBitToken;
[L667]               __tmp__symbol_YearnFinanceBitToken := symbol_YearnFinanceBitToken;
[L668]               __tmp__decimals_YearnFinanceBitToken := decimals_YearnFinanceBitToken;
[L669]               __tmp___totalSupply_YearnFinanceBitToken := _totalSupply_YearnFinanceBitToken;
[L670]               __tmp__balances_YearnFinanceBitToken := balances_YearnFinanceBitToken;
[L671]               __tmp__allowed_YearnFinanceBitToken := allowed_YearnFinanceBitToken;
[L672]   CALL        call success_s334 := transfer~address~uint256_YearnFinanceBitToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L1533]  COND TRUE   __tmp__DType[this] == YearnFinanceBitToken
[L1534]  CALL        call __var_2 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_YearnFinanceBitToken[this][msgsender_MSG], tokens_s334);
[L1339]  COND FALSE  !(!(b_s112 <= a_s112))
[L1343]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1534]  RET         call __var_2 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_YearnFinanceBitToken[this][msgsender_MSG], tokens_s334);
[L1535]  COND FALSE  !(revert)
[L1541]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1542]              __tmp__balances_YearnFinanceBitToken[this][msgsender_MSG] := __var_2;
[L1543]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1544]  COND TRUE   __tmp__DType[this] == YearnFinanceBitToken
[L1545]  CALL        call __var_3 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_YearnFinanceBitToken[this][to_s334], tokens_s334);
[L1321]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1322]  COND FALSE  !(!(c_s90 >= a_s90))
[L1545]  RET         call __var_3 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_YearnFinanceBitToken[this][to_s334], tokens_s334);
[L1546]  COND FALSE  !(revert)
[L1552]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_YearnFinanceBitToken[this][to_s334];
[L1553]              __tmp__balances_YearnFinanceBitToken[this][to_s334] := __var_3;
[L1554]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_YearnFinanceBitToken[this][to_s334];
[L1555]              success_s334 := true;
[L672]   RET         call success_s334 := transfer~address~uint256_YearnFinanceBitToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L673]               assume revert || gas < 0;
[L2773]  RET         call success_s334 := transfer~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L2863]  RET         call CorralChoice_YearnFinanceBitToken(this);

Loop:
[L2863]  CALL        call CorralChoice_YearnFinanceBitToken(this);
[L2704]              havoc msgsender_MSG;
[L2705]              havoc msgvalue_MSG;
[L2706]              havoc choice;
[L2707]              havoc __ret_0_totalSupply;
[L2708]              havoc tokenOwner_s247;
[L2709]              havoc balance_s247;
[L2710]              havoc tokenOwner_s263;
[L2711]              havoc spender_s263;
[L2712]              havoc remaining_s263;
[L2713]              havoc to_s334;
[L2714]              havoc tokens_s334;
[L2715]              havoc success_s334;
[L2716]              havoc spender_s291;
[L2717]              havoc tokens_s291;
[L2718]              havoc success_s291;
[L2719]              havoc from_s393;
[L2720]              havoc to_s393;
[L2721]              havoc tokens_s393;
[L2722]              havoc success_s393;
[L2723]              havoc a_s90;
[L2724]              havoc b_s90;
[L2725]              havoc c_s90;
[L2726]              havoc a_s112;
[L2727]              havoc b_s112;
[L2728]              havoc c_s112;
[L2729]              havoc a_s140;
[L2730]              havoc b_s140;
[L2731]              havoc c_s140;
[L2732]              havoc a_s162;
[L2733]              havoc b_s162;
[L2734]              havoc c_s162;
[L2735]              havoc __ret_0_name;
[L2736]              havoc __ret_0_symbol;
[L2737]              havoc __ret_0_decimals;
[L2738]              havoc __ret_0__totalSupply;
[L2739]              havoc tmpNow;
[L2740]              havoc gas;
[L2741]              assume gas > 4000000 && gas <= 8000000;
[L2742]              tmpNow := now;
[L2743]              havoc now;
[L2744]              assume now > tmpNow;
[L2745]              assume msgsender_MSG != null;
[L2746]              assume DType[msgsender_MSG] != ERC20Interface;
[L2747]              assume DType[msgsender_MSG] != SafeMath;
[L2748]              assume DType[msgsender_MSG] != YearnFinanceBitToken;
[L2749]              Alloc[msgsender_MSG] := true;
[L2750]  COND FALSE  !(choice == 14)
[L2756]  COND FALSE  !(choice == 13)
[L2762]  COND FALSE  !(choice == 12)
[L2768]  COND TRUE   choice == 11
[L2769]              gas := gas - 21000;
[L2770]  COND TRUE   gas >= 0
[L2771]              assume tokens_s334 >= 0 && tokens_s334 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2772]              assume msgvalue_MSG == 0;
[L2773]  CALL        call success_s334 := transfer~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s334 && tokens_s334 <= balances_YearnFinanceBitToken[this][msgsender_MSG]) && tokens_s334 >= 0) && tokens_s334 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][to_s334] >= 0) && balances_YearnFinanceBitToken[this][to_s334] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][msgsender_MSG] >= 0) && balances_YearnFinanceBitToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_YearnFinanceBitToken0 := true;
[L2]                 call_transfer_YearnFinanceBitToken0 := false;
[L2]                 revert := revert_hold;
[L652]               havoc __exception;
[L653]               revert := false;
[L654]   COND TRUE   __exception
[L655]               __tmp__Balance := Balance;
[L656]               __tmp__DType := DType;
[L657]               __tmp__Alloc := Alloc;
[L658]               __tmp__balance_ADDR := balance_ADDR;
[L659]               __tmp__M_Ref_int := M_Ref_int;
[L660]               __tmp__sum_balances0 := sum_balances0;
[L661]               __tmp__alloc_allowed_YearnFinanceBitToken_lvl0 := alloc_allowed_YearnFinanceBitToken_lvl0;
[L662]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L663]               __tmp__sum_allowed1 := sum_allowed1;
[L664]               __tmp__Length := Length;
[L665]               __tmp__now := now;
[L666]               __tmp__name_YearnFinanceBitToken := name_YearnFinanceBitToken;
[L667]               __tmp__symbol_YearnFinanceBitToken := symbol_YearnFinanceBitToken;
[L668]               __tmp__decimals_YearnFinanceBitToken := decimals_YearnFinanceBitToken;
[L669]               __tmp___totalSupply_YearnFinanceBitToken := _totalSupply_YearnFinanceBitToken;
[L670]               __tmp__balances_YearnFinanceBitToken := balances_YearnFinanceBitToken;
[L671]               __tmp__allowed_YearnFinanceBitToken := allowed_YearnFinanceBitToken;
[L672]   CALL        call success_s334 := transfer~address~uint256_YearnFinanceBitToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L1533]  COND TRUE   __tmp__DType[this] == YearnFinanceBitToken
[L1534]  CALL        call __var_2 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_YearnFinanceBitToken[this][msgsender_MSG], tokens_s334);
[L1339]  COND FALSE  !(!(b_s112 <= a_s112))
[L1343]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1534]  RET         call __var_2 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_YearnFinanceBitToken[this][msgsender_MSG], tokens_s334);
[L1535]  COND FALSE  !(revert)
[L1541]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1542]              __tmp__balances_YearnFinanceBitToken[this][msgsender_MSG] := __var_2;
[L1543]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1544]  COND TRUE   __tmp__DType[this] == YearnFinanceBitToken
[L1545]  CALL        call __var_3 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_YearnFinanceBitToken[this][to_s334], tokens_s334);
[L1321]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1322]  COND FALSE  !(!(c_s90 >= a_s90))
[L1545]  RET         call __var_3 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_YearnFinanceBitToken[this][to_s334], tokens_s334);
[L1546]  COND FALSE  !(revert)
[L1552]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_YearnFinanceBitToken[this][to_s334];
[L1553]              __tmp__balances_YearnFinanceBitToken[this][to_s334] := __var_3;
[L1554]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_YearnFinanceBitToken[this][to_s334];
[L1555]              success_s334 := true;
[L672]   RET         call success_s334 := transfer~address~uint256_YearnFinanceBitToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L673]               assume revert || gas < 0;
[L2773]  RET         call success_s334 := transfer~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L2863]  RET         call CorralChoice_YearnFinanceBitToken(this);

[2020-11-25 09:28:20,758 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:28:20,758 INFO  L82        PathProgramCache]: Analyzing trace with hash -908756443, now seen corresponding path program 1 times
[2020-11-25 09:28:20,759 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:28:20,765 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:28:20,784 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 09:28:20,784 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:28:20,784 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-25 09:28:20,784 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:28:20,784 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-25 09:28:20,785 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-11-25 09:28:20,785 INFO  L87              Difference]: Start difference. First operand 1844 states and 1988 transitions. cyclomatic complexity: 148 Second operand 5 states.
[2020-11-25 09:28:21,008 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:28:21,009 INFO  L93              Difference]: Finished difference Result 2426 states and 2691 transitions.
[2020-11-25 09:28:21,009 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 09:28:21,009 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2426 states and 2691 transitions.
[2020-11-25 09:28:21,014 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-11-25 09:28:21,018 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2426 states to 1848 states and 2110 transitions.
[2020-11-25 09:28:21,018 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 550
[2020-11-25 09:28:21,019 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 550
[2020-11-25 09:28:21,019 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1848 states and 2110 transitions.
[2020-11-25 09:28:21,020 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:28:21,020 INFO  L728         BuchiCegarLoop]: Abstraction has 1848 states and 2110 transitions.
[2020-11-25 09:28:21,022 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1848 states and 2110 transitions.
[2020-11-25 09:28:21,030 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1848 to 1288.
[2020-11-25 09:28:21,030 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1288 states.
[2020-11-25 09:28:21,031 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1288 states to 1288 states and 1393 transitions.
[2020-11-25 09:28:21,031 INFO  L751         BuchiCegarLoop]: Abstraction has 1288 states and 1393 transitions.
[2020-11-25 09:28:21,031 INFO  L631         BuchiCegarLoop]: Abstraction has 1288 states and 1393 transitions.
[2020-11-25 09:28:21,031 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 09:28:21,031 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1288 states and 1393 transitions.
[2020-11-25 09:28:21,032 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:28:21,032 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:28:21,032 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:28:21,033 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:28:21,033 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_YearnFinanceBitToken0 := false;
[L2]                 call_transfer_YearnFinanceBitToken0 := false;
[L2]     CALL        call main();
[L2853]              assume null == 0;
[L2854]  CALL        call this := FreshRefGenerator__success();
[L1249]              havoc newRef;
[L1250]              assume Alloc[newRef] == false;
[L1251]              Alloc[newRef] := true;
[L1252]              assume newRef != null;
[L2854]  RET         call this := FreshRefGenerator__success();
[L2855]              assume now >= 0;
[L2856]              assume DType[this] == YearnFinanceBitToken;
[L2857]              assume msgvalue_MSG == 0;
[L2858]              gas := gas - 53000;
[L2859]  CALL        call YearnFinanceBitToken_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG);
[L398]               havoc __exception;
[L399]               revert := false;
[L400]   COND FALSE  !(__exception)
[L421]   CALL        call YearnFinanceBitToken_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1456]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1281]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1266]              assume msgsender_MSG != null;
[L1267]              Balance[this] := 0;
[L1281]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1282]  COND FALSE  !(revert)
[L1456]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1457]  COND FALSE  !(revert)
[L1460]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1313]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1298]              assume msgsender_MSG != null;
[L1299]              Balance[this] := 0;
[L1313]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1314]  COND FALSE  !(revert)
[L1460]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1461]  COND FALSE  !(revert)
[L1464]  CALL        call YearnFinanceBitToken_YearnFinanceBitToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1417]              assume msgsender_MSG != null;
[L1418]              Balance[this] := 0;
[L1419]              name_YearnFinanceBitToken[this] := 627147201;
[L1420]              symbol_YearnFinanceBitToken[this] := 627147201;
[L1421]              decimals_YearnFinanceBitToken[this] := 0;
[L1422]              _totalSupply_YearnFinanceBitToken[this] := 0;
[L1423]              balances_YearnFinanceBitToken[this] := zeroRefintArr();
[L1424]              sum_balances0[this] := 0;
[L1425]              allowed_YearnFinanceBitToken[this] := zeroRefRefintArr();
[L1426]              sum_allowed1[this] := 0;
[L1428]              name_YearnFinanceBitToken[this] := 1658284292;
[L1429]              symbol_YearnFinanceBitToken[this] := -1175268548;
[L1430]              decimals_YearnFinanceBitToken[this] := 18;
[L1431]              _totalSupply_YearnFinanceBitToken[this] := 7000000000000000000000;
[L1432]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1433]              balances_YearnFinanceBitToken[this][msgsender_MSG] := _totalSupply_YearnFinanceBitToken[this];
[L1434]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1435]              assert { :EventEmitted "Transfer_YearnFinanceBitToken" } true;
[L1464]  RET         call YearnFinanceBitToken_YearnFinanceBitToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1465]  COND FALSE  !(revert)
[L421]   RET         call YearnFinanceBitToken_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG);
[L422]               assume !revert && gas >= 0;
[L2859]  RET         call YearnFinanceBitToken_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG);
[L2860]              assume !revert && gas >= 0;
[L2863]  CALL        call CorralChoice_YearnFinanceBitToken(this);
[L2704]              havoc msgsender_MSG;
[L2705]              havoc msgvalue_MSG;
[L2706]              havoc choice;
[L2707]              havoc __ret_0_totalSupply;
[L2708]              havoc tokenOwner_s247;
[L2709]              havoc balance_s247;
[L2710]              havoc tokenOwner_s263;
[L2711]              havoc spender_s263;
[L2712]              havoc remaining_s263;
[L2713]              havoc to_s334;
[L2714]              havoc tokens_s334;
[L2715]              havoc success_s334;
[L2716]              havoc spender_s291;
[L2717]              havoc tokens_s291;
[L2718]              havoc success_s291;
[L2719]              havoc from_s393;
[L2720]              havoc to_s393;
[L2721]              havoc tokens_s393;
[L2722]              havoc success_s393;
[L2723]              havoc a_s90;
[L2724]              havoc b_s90;
[L2725]              havoc c_s90;
[L2726]              havoc a_s112;
[L2727]              havoc b_s112;
[L2728]              havoc c_s112;
[L2729]              havoc a_s140;
[L2730]              havoc b_s140;
[L2731]              havoc c_s140;
[L2732]              havoc a_s162;
[L2733]              havoc b_s162;
[L2734]              havoc c_s162;
[L2735]              havoc __ret_0_name;
[L2736]              havoc __ret_0_symbol;
[L2737]              havoc __ret_0_decimals;
[L2738]              havoc __ret_0__totalSupply;
[L2739]              havoc tmpNow;
[L2740]              havoc gas;
[L2741]              assume gas > 4000000 && gas <= 8000000;
[L2742]              tmpNow := now;
[L2743]              havoc now;
[L2744]              assume now > tmpNow;
[L2745]              assume msgsender_MSG != null;
[L2746]              assume DType[msgsender_MSG] != ERC20Interface;
[L2747]              assume DType[msgsender_MSG] != SafeMath;
[L2748]              assume DType[msgsender_MSG] != YearnFinanceBitToken;
[L2749]              Alloc[msgsender_MSG] := true;
[L2750]  COND FALSE  !(choice == 14)
[L2756]  COND FALSE  !(choice == 13)
[L2762]  COND FALSE  !(choice == 12)
[L2768]  COND FALSE  !(choice == 11)
[L2775]  COND FALSE  !(choice == 10)
[L2782]  COND TRUE   choice == 9
[L2783]              gas := gas - 21000;
[L2784]  COND TRUE   gas >= 0
[L2785]              assume tokens_s393 >= 0 && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2786]              assume msgvalue_MSG == 0;
[L2787]  CALL        call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L706]               havoc __exception;
[L707]               revert := false;
[L708]   COND FALSE  !(__exception)
[L729]   CALL        call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L1637]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1638]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][from_s393], tokens_s393);
[L1348]  COND FALSE  !(!(b_s112 <= a_s112))
[L1352]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1638]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][from_s393], tokens_s393);
[L1639]  COND FALSE  !(revert)
[L1645]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][from_s393];
[L1646]              balances_YearnFinanceBitToken[this][from_s393] := __var_4;
[L1647]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][from_s393];
[L1648]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1649]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG], tokens_s393);
[L1348]  COND FALSE  !(!(b_s112 <= a_s112))
[L1352]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1649]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG], tokens_s393);
[L1650]  COND FALSE  !(revert)
[L1656]              sum_allowed1[from_s393] := sum_allowed1[from_s393] - allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG];
[L1657]              allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] := __var_5;
[L1658]              sum_allowed1[from_s393] := sum_allowed1[from_s393] + allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG];
[L1659]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1660]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][to_s393], tokens_s393);
[L1330]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1331]  COND FALSE  !(!(c_s90 >= a_s90))
[L1660]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][to_s393], tokens_s393);
[L1661]  COND FALSE  !(revert)
[L1667]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][to_s393];
[L1668]              balances_YearnFinanceBitToken[this][to_s393] := __var_6;
[L1669]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][to_s393];
[L1670]              assert { :EventEmitted "Transfer_YearnFinanceBitToken" } true;
[L1671]              success_s393 := true;
[L729]   RET         call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L730]               assume !revert && gas >= 0;
[L2787]  RET         call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L2863]  RET         call CorralChoice_YearnFinanceBitToken(this);
[L2863]  CALL        call CorralChoice_YearnFinanceBitToken(this);
[L2704]              havoc msgsender_MSG;
[L2705]              havoc msgvalue_MSG;
[L2706]              havoc choice;
[L2707]              havoc __ret_0_totalSupply;
[L2708]              havoc tokenOwner_s247;
[L2709]              havoc balance_s247;
[L2710]              havoc tokenOwner_s263;
[L2711]              havoc spender_s263;
[L2712]              havoc remaining_s263;
[L2713]              havoc to_s334;
[L2714]              havoc tokens_s334;
[L2715]              havoc success_s334;
[L2716]              havoc spender_s291;
[L2717]              havoc tokens_s291;
[L2718]              havoc success_s291;
[L2719]              havoc from_s393;
[L2720]              havoc to_s393;
[L2721]              havoc tokens_s393;
[L2722]              havoc success_s393;
[L2723]              havoc a_s90;
[L2724]              havoc b_s90;
[L2725]              havoc c_s90;
[L2726]              havoc a_s112;
[L2727]              havoc b_s112;
[L2728]              havoc c_s112;
[L2729]              havoc a_s140;
[L2730]              havoc b_s140;
[L2731]              havoc c_s140;
[L2732]              havoc a_s162;
[L2733]              havoc b_s162;
[L2734]              havoc c_s162;
[L2735]              havoc __ret_0_name;
[L2736]              havoc __ret_0_symbol;
[L2737]              havoc __ret_0_decimals;
[L2738]              havoc __ret_0__totalSupply;
[L2739]              havoc tmpNow;
[L2740]              havoc gas;
[L2741]              assume gas > 4000000 && gas <= 8000000;
[L2742]              tmpNow := now;
[L2743]              havoc now;
[L2744]              assume now > tmpNow;
[L2745]              assume msgsender_MSG != null;
[L2746]              assume DType[msgsender_MSG] != ERC20Interface;
[L2747]              assume DType[msgsender_MSG] != SafeMath;
[L2748]              assume DType[msgsender_MSG] != YearnFinanceBitToken;
[L2749]              Alloc[msgsender_MSG] := true;
[L2750]  COND FALSE  !(choice == 14)
[L2756]  COND FALSE  !(choice == 13)
[L2762]  COND FALSE  !(choice == 12)
[L2768]  COND TRUE   choice == 11
[L2769]              gas := gas - 21000;
[L2770]  COND TRUE   gas >= 0
[L2771]              assume tokens_s334 >= 0 && tokens_s334 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2772]              assume msgvalue_MSG == 0;
[L2773]  CALL        call success_s334 := transfer~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s334 && tokens_s334 <= balances_YearnFinanceBitToken[this][msgsender_MSG]) && tokens_s334 >= 0) && tokens_s334 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][to_s334] >= 0) && balances_YearnFinanceBitToken[this][to_s334] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][msgsender_MSG] >= 0) && balances_YearnFinanceBitToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_YearnFinanceBitToken0 := true;
[L2]                 call_transfer_YearnFinanceBitToken0 := false;
[L2]                 revert := revert_hold;
[L652]               havoc __exception;
[L653]               revert := false;
[L654]   COND FALSE  !(__exception)
[L675]   CALL        call success_s334 := transfer~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L1563]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1564]  CALL        call __var_2 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][msgsender_MSG], tokens_s334);
[L1348]  COND FALSE  !(!(b_s112 <= a_s112))
[L1352]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1564]  RET         call __var_2 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][msgsender_MSG], tokens_s334);
[L1565]  COND FALSE  !(revert)
[L1571]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1572]              balances_YearnFinanceBitToken[this][msgsender_MSG] := __var_2;
[L1573]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1574]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1575]  CALL        call __var_3 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][to_s334], tokens_s334);
[L1330]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1331]  COND FALSE  !(!(c_s90 >= a_s90))
[L1575]  RET         call __var_3 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][to_s334], tokens_s334);
[L1576]  COND FALSE  !(revert)
[L1582]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][to_s334];
[L1583]              balances_YearnFinanceBitToken[this][to_s334] := __var_3;
[L1584]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][to_s334];
[L1585]              assert { :EventEmitted "Transfer_YearnFinanceBitToken" } true;
[L1586]              success_s334 := true;
[L675]   RET         call success_s334 := transfer~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L676]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((success_s334 == true && _totalSupply_YearnFinanceBitToken[this] == old(_totalSupply_YearnFinanceBitToken[this])) && balances_YearnFinanceBitToken[this] == old(balances_YearnFinanceBitToken[this])) && allowed_YearnFinanceBitToken[this] == old(allowed_YearnFinanceBitToken[this])) && name_YearnFinanceBitToken[this] == old(name_YearnFinanceBitToken[this])) && symbol_YearnFinanceBitToken[this] == old(symbol_YearnFinanceBitToken[this])) && decimals_YearnFinanceBitToken[this] == old(decimals_YearnFinanceBitToken[this]));
[L2]                 revert := revert_hold;
[L2773]  RET         call success_s334 := transfer~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L2863]  RET         call CorralChoice_YearnFinanceBitToken(this);

Loop:
[L2863]  CALL        call CorralChoice_YearnFinanceBitToken(this);
[L2704]              havoc msgsender_MSG;
[L2705]              havoc msgvalue_MSG;
[L2706]              havoc choice;
[L2707]              havoc __ret_0_totalSupply;
[L2708]              havoc tokenOwner_s247;
[L2709]              havoc balance_s247;
[L2710]              havoc tokenOwner_s263;
[L2711]              havoc spender_s263;
[L2712]              havoc remaining_s263;
[L2713]              havoc to_s334;
[L2714]              havoc tokens_s334;
[L2715]              havoc success_s334;
[L2716]              havoc spender_s291;
[L2717]              havoc tokens_s291;
[L2718]              havoc success_s291;
[L2719]              havoc from_s393;
[L2720]              havoc to_s393;
[L2721]              havoc tokens_s393;
[L2722]              havoc success_s393;
[L2723]              havoc a_s90;
[L2724]              havoc b_s90;
[L2725]              havoc c_s90;
[L2726]              havoc a_s112;
[L2727]              havoc b_s112;
[L2728]              havoc c_s112;
[L2729]              havoc a_s140;
[L2730]              havoc b_s140;
[L2731]              havoc c_s140;
[L2732]              havoc a_s162;
[L2733]              havoc b_s162;
[L2734]              havoc c_s162;
[L2735]              havoc __ret_0_name;
[L2736]              havoc __ret_0_symbol;
[L2737]              havoc __ret_0_decimals;
[L2738]              havoc __ret_0__totalSupply;
[L2739]              havoc tmpNow;
[L2740]              havoc gas;
[L2741]              assume gas > 4000000 && gas <= 8000000;
[L2742]              tmpNow := now;
[L2743]              havoc now;
[L2744]              assume now > tmpNow;
[L2745]              assume msgsender_MSG != null;
[L2746]              assume DType[msgsender_MSG] != ERC20Interface;
[L2747]              assume DType[msgsender_MSG] != SafeMath;
[L2748]              assume DType[msgsender_MSG] != YearnFinanceBitToken;
[L2749]              Alloc[msgsender_MSG] := true;
[L2750]  COND TRUE   choice == 14
[L2751]              gas := gas - 21000;
[L2752]  COND FALSE  !(gas >= 0)
[L2863]  RET         call CorralChoice_YearnFinanceBitToken(this);

[2020-11-25 09:28:21,037 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:28:21,037 INFO  L82        PathProgramCache]: Analyzing trace with hash -1987858963, now seen corresponding path program 1 times
[2020-11-25 09:28:21,037 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:28:21,128 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:28:22,490 INFO  L134       CoverageAnalysis]: Checked inductivity of 56 backedges. 0 proven. 55 refuted. 0 times theorem prover too weak. 1 trivial. 0 not checked.
[2020-11-25 09:28:22,490 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 09:28:22,490 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [42] total 42
[2020-11-25 09:28:22,491 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:28:22,491 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 43 interpolants.
[2020-11-25 09:28:22,491 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=134, Invalid=1672, Unknown=0, NotChecked=0, Total=1806
[2020-11-25 09:28:22,491 INFO  L87              Difference]: Start difference. First operand 1288 states and 1393 transitions. cyclomatic complexity: 108 Second operand 43 states.
[2020-11-25 09:28:27,068 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:28:27,068 INFO  L93              Difference]: Finished difference Result 1474 states and 1645 transitions.
[2020-11-25 09:28:27,068 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 45 states. 
[2020-11-25 09:28:27,068 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1474 states and 1645 transitions.
[2020-11-25 09:28:27,071 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 09:28:27,074 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1474 states to 1474 states and 1645 transitions.
[2020-11-25 09:28:27,074 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 520
[2020-11-25 09:28:27,074 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 520
[2020-11-25 09:28:27,074 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1474 states and 1645 transitions.
[2020-11-25 09:28:27,075 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:28:27,075 INFO  L728         BuchiCegarLoop]: Abstraction has 1474 states and 1645 transitions.
[2020-11-25 09:28:27,078 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1474 states and 1645 transitions.
[2020-11-25 09:28:27,085 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1474 to 1451.
[2020-11-25 09:28:27,085 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1451 states.
[2020-11-25 09:28:27,087 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1451 states to 1451 states and 1613 transitions.
[2020-11-25 09:28:27,087 INFO  L751         BuchiCegarLoop]: Abstraction has 1451 states and 1613 transitions.
[2020-11-25 09:28:27,087 INFO  L631         BuchiCegarLoop]: Abstraction has 1451 states and 1613 transitions.
[2020-11-25 09:28:27,087 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 09:28:27,087 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1451 states and 1613 transitions.
[2020-11-25 09:28:27,089 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 09:28:27,089 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:28:27,089 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:28:27,090 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:28:27,090 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_YearnFinanceBitToken0 := false;
[L2]                 call_transfer_YearnFinanceBitToken0 := false;
[L2]     CALL        call main();
[L2853]              assume null == 0;
[L2854]  CALL        call this := FreshRefGenerator__success();
[L1249]              havoc newRef;
[L1250]              assume Alloc[newRef] == false;
[L1251]              Alloc[newRef] := true;
[L1252]              assume newRef != null;
[L2854]  RET         call this := FreshRefGenerator__success();
[L2855]              assume now >= 0;
[L2856]              assume DType[this] == YearnFinanceBitToken;
[L2857]              assume msgvalue_MSG == 0;
[L2858]              gas := gas - 53000;
[L2859]  CALL        call YearnFinanceBitToken_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG);
[L398]               havoc __exception;
[L399]               revert := false;
[L400]   COND FALSE  !(__exception)
[L421]   CALL        call YearnFinanceBitToken_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1456]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1281]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1266]              assume msgsender_MSG != null;
[L1267]              Balance[this] := 0;
[L1281]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1282]  COND FALSE  !(revert)
[L1456]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1457]  COND FALSE  !(revert)
[L1460]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1313]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1298]              assume msgsender_MSG != null;
[L1299]              Balance[this] := 0;
[L1313]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1314]  COND FALSE  !(revert)
[L1460]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1461]  COND FALSE  !(revert)
[L1464]  CALL        call YearnFinanceBitToken_YearnFinanceBitToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1417]              assume msgsender_MSG != null;
[L1418]              Balance[this] := 0;
[L1419]              name_YearnFinanceBitToken[this] := 627147201;
[L1420]              symbol_YearnFinanceBitToken[this] := 627147201;
[L1421]              decimals_YearnFinanceBitToken[this] := 0;
[L1422]              _totalSupply_YearnFinanceBitToken[this] := 0;
[L1423]              balances_YearnFinanceBitToken[this] := zeroRefintArr();
[L1424]              sum_balances0[this] := 0;
[L1425]              allowed_YearnFinanceBitToken[this] := zeroRefRefintArr();
[L1426]              sum_allowed1[this] := 0;
[L1428]              name_YearnFinanceBitToken[this] := 1658284292;
[L1429]              symbol_YearnFinanceBitToken[this] := -1175268548;
[L1430]              decimals_YearnFinanceBitToken[this] := 18;
[L1431]              _totalSupply_YearnFinanceBitToken[this] := 7000000000000000000000;
[L1432]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1433]              balances_YearnFinanceBitToken[this][msgsender_MSG] := _totalSupply_YearnFinanceBitToken[this];
[L1434]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1435]              assert { :EventEmitted "Transfer_YearnFinanceBitToken" } true;
[L1464]  RET         call YearnFinanceBitToken_YearnFinanceBitToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1465]  COND FALSE  !(revert)
[L421]   RET         call YearnFinanceBitToken_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG);
[L422]               assume !revert && gas >= 0;
[L2859]  RET         call YearnFinanceBitToken_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG);
[L2860]              assume !revert && gas >= 0;
[L2863]  CALL        call CorralChoice_YearnFinanceBitToken(this);
[L2704]              havoc msgsender_MSG;
[L2705]              havoc msgvalue_MSG;
[L2706]              havoc choice;
[L2707]              havoc __ret_0_totalSupply;
[L2708]              havoc tokenOwner_s247;
[L2709]              havoc balance_s247;
[L2710]              havoc tokenOwner_s263;
[L2711]              havoc spender_s263;
[L2712]              havoc remaining_s263;
[L2713]              havoc to_s334;
[L2714]              havoc tokens_s334;
[L2715]              havoc success_s334;
[L2716]              havoc spender_s291;
[L2717]              havoc tokens_s291;
[L2718]              havoc success_s291;
[L2719]              havoc from_s393;
[L2720]              havoc to_s393;
[L2721]              havoc tokens_s393;
[L2722]              havoc success_s393;
[L2723]              havoc a_s90;
[L2724]              havoc b_s90;
[L2725]              havoc c_s90;
[L2726]              havoc a_s112;
[L2727]              havoc b_s112;
[L2728]              havoc c_s112;
[L2729]              havoc a_s140;
[L2730]              havoc b_s140;
[L2731]              havoc c_s140;
[L2732]              havoc a_s162;
[L2733]              havoc b_s162;
[L2734]              havoc c_s162;
[L2735]              havoc __ret_0_name;
[L2736]              havoc __ret_0_symbol;
[L2737]              havoc __ret_0_decimals;
[L2738]              havoc __ret_0__totalSupply;
[L2739]              havoc tmpNow;
[L2740]              havoc gas;
[L2741]              assume gas > 4000000 && gas <= 8000000;
[L2742]              tmpNow := now;
[L2743]              havoc now;
[L2744]              assume now > tmpNow;
[L2745]              assume msgsender_MSG != null;
[L2746]              assume DType[msgsender_MSG] != ERC20Interface;
[L2747]              assume DType[msgsender_MSG] != SafeMath;
[L2748]              assume DType[msgsender_MSG] != YearnFinanceBitToken;
[L2749]              Alloc[msgsender_MSG] := true;
[L2750]  COND FALSE  !(choice == 14)
[L2756]  COND FALSE  !(choice == 13)
[L2762]  COND FALSE  !(choice == 12)
[L2768]  COND TRUE   choice == 11
[L2769]              gas := gas - 21000;
[L2770]  COND TRUE   gas >= 0
[L2771]              assume tokens_s334 >= 0 && tokens_s334 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2772]              assume msgvalue_MSG == 0;
[L2773]  CALL        call success_s334 := transfer~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == to_s334 && tokens_s334 <= balances_YearnFinanceBitToken[this][msgsender_MSG]) && tokens_s334 >= 0) && tokens_s334 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][to_s334] >= 0) && balances_YearnFinanceBitToken[this][to_s334] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][msgsender_MSG] >= 0) && balances_YearnFinanceBitToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L652]               havoc __exception;
[L653]               revert := false;
[L654]   COND FALSE  !(__exception)
[L675]   CALL        call success_s334 := transfer~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L1563]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1564]  CALL        call __var_2 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][msgsender_MSG], tokens_s334);
[L1348]  COND FALSE  !(!(b_s112 <= a_s112))
[L1352]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1564]  RET         call __var_2 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][msgsender_MSG], tokens_s334);
[L1565]  COND FALSE  !(revert)
[L1571]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1572]              balances_YearnFinanceBitToken[this][msgsender_MSG] := __var_2;
[L1573]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1574]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1575]  CALL        call __var_3 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][to_s334], tokens_s334);
[L1330]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1331]  COND FALSE  !(!(c_s90 >= a_s90))
[L1575]  RET         call __var_3 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][to_s334], tokens_s334);
[L1576]  COND FALSE  !(revert)
[L1582]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][to_s334];
[L1583]              balances_YearnFinanceBitToken[this][to_s334] := __var_3;
[L1584]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][to_s334];
[L1585]              assert { :EventEmitted "Transfer_YearnFinanceBitToken" } true;
[L1586]              success_s334 := true;
[L675]   RET         call success_s334 := transfer~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L676]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((success_s334 == true && _totalSupply_YearnFinanceBitToken[this] == old(_totalSupply_YearnFinanceBitToken[this])) && balances_YearnFinanceBitToken[this] == old(balances_YearnFinanceBitToken[this])) && allowed_YearnFinanceBitToken[this] == old(allowed_YearnFinanceBitToken[this])) && name_YearnFinanceBitToken[this] == old(name_YearnFinanceBitToken[this])) && symbol_YearnFinanceBitToken[this] == old(symbol_YearnFinanceBitToken[this])) && decimals_YearnFinanceBitToken[this] == old(decimals_YearnFinanceBitToken[this]));
[L2]                 revert := revert_hold;
[L2773]  RET         call success_s334 := transfer~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L2863]  RET         call CorralChoice_YearnFinanceBitToken(this);
[L2863]  CALL        call CorralChoice_YearnFinanceBitToken(this);
[L2704]              havoc msgsender_MSG;
[L2705]              havoc msgvalue_MSG;
[L2706]              havoc choice;
[L2707]              havoc __ret_0_totalSupply;
[L2708]              havoc tokenOwner_s247;
[L2709]              havoc balance_s247;
[L2710]              havoc tokenOwner_s263;
[L2711]              havoc spender_s263;
[L2712]              havoc remaining_s263;
[L2713]              havoc to_s334;
[L2714]              havoc tokens_s334;
[L2715]              havoc success_s334;
[L2716]              havoc spender_s291;
[L2717]              havoc tokens_s291;
[L2718]              havoc success_s291;
[L2719]              havoc from_s393;
[L2720]              havoc to_s393;
[L2721]              havoc tokens_s393;
[L2722]              havoc success_s393;
[L2723]              havoc a_s90;
[L2724]              havoc b_s90;
[L2725]              havoc c_s90;
[L2726]              havoc a_s112;
[L2727]              havoc b_s112;
[L2728]              havoc c_s112;
[L2729]              havoc a_s140;
[L2730]              havoc b_s140;
[L2731]              havoc c_s140;
[L2732]              havoc a_s162;
[L2733]              havoc b_s162;
[L2734]              havoc c_s162;
[L2735]              havoc __ret_0_name;
[L2736]              havoc __ret_0_symbol;
[L2737]              havoc __ret_0_decimals;
[L2738]              havoc __ret_0__totalSupply;
[L2739]              havoc tmpNow;
[L2740]              havoc gas;
[L2741]              assume gas > 4000000 && gas <= 8000000;
[L2742]              tmpNow := now;
[L2743]              havoc now;
[L2744]              assume now > tmpNow;
[L2745]              assume msgsender_MSG != null;
[L2746]              assume DType[msgsender_MSG] != ERC20Interface;
[L2747]              assume DType[msgsender_MSG] != SafeMath;
[L2748]              assume DType[msgsender_MSG] != YearnFinanceBitToken;
[L2749]              Alloc[msgsender_MSG] := true;
[L2750]  COND FALSE  !(choice == 14)
[L2756]  COND FALSE  !(choice == 13)
[L2762]  COND FALSE  !(choice == 12)
[L2768]  COND TRUE   choice == 11
[L2769]              gas := gas - 21000;
[L2770]  COND TRUE   gas >= 0
[L2771]              assume tokens_s334 >= 0 && tokens_s334 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2772]              assume msgvalue_MSG == 0;
[L2773]  CALL        call success_s334 := transfer~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s334 && tokens_s334 <= balances_YearnFinanceBitToken[this][msgsender_MSG]) && tokens_s334 >= 0) && tokens_s334 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][to_s334] >= 0) && balances_YearnFinanceBitToken[this][to_s334] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][msgsender_MSG] >= 0) && balances_YearnFinanceBitToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_YearnFinanceBitToken0 := true;
[L2]                 call_transfer_YearnFinanceBitToken0 := false;
[L2]                 revert := revert_hold;
[L652]               havoc __exception;
[L653]               revert := false;
[L654]   COND FALSE  !(__exception)
[L675]   CALL        call success_s334 := transfer~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L1563]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1564]  CALL        call __var_2 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][msgsender_MSG], tokens_s334);
[L1348]  COND FALSE  !(!(b_s112 <= a_s112))
[L1352]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1564]  RET         call __var_2 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][msgsender_MSG], tokens_s334);
[L1565]  COND FALSE  !(revert)
[L1571]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1572]              balances_YearnFinanceBitToken[this][msgsender_MSG] := __var_2;
[L1573]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1574]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1575]  CALL        call __var_3 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][to_s334], tokens_s334);
[L1330]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1331]  COND FALSE  !(!(c_s90 >= a_s90))
[L1575]  RET         call __var_3 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][to_s334], tokens_s334);
[L1576]  COND FALSE  !(revert)
[L1582]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][to_s334];
[L1583]              balances_YearnFinanceBitToken[this][to_s334] := __var_3;
[L1584]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][to_s334];
[L1585]              assert { :EventEmitted "Transfer_YearnFinanceBitToken" } true;
[L1586]              success_s334 := true;
[L675]   RET         call success_s334 := transfer~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L676]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((success_s334 == true && _totalSupply_YearnFinanceBitToken[this] == old(_totalSupply_YearnFinanceBitToken[this])) && balances_YearnFinanceBitToken[this] == old(balances_YearnFinanceBitToken[this])) && allowed_YearnFinanceBitToken[this] == old(allowed_YearnFinanceBitToken[this])) && name_YearnFinanceBitToken[this] == old(name_YearnFinanceBitToken[this])) && symbol_YearnFinanceBitToken[this] == old(symbol_YearnFinanceBitToken[this])) && decimals_YearnFinanceBitToken[this] == old(decimals_YearnFinanceBitToken[this]));
[L2]                 revert := revert_hold;
[L2773]  RET         call success_s334 := transfer~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L2863]  RET         call CorralChoice_YearnFinanceBitToken(this);

Loop:
[L2863]  CALL        call CorralChoice_YearnFinanceBitToken(this);
[L2704]              havoc msgsender_MSG;
[L2705]              havoc msgvalue_MSG;
[L2706]              havoc choice;
[L2707]              havoc __ret_0_totalSupply;
[L2708]              havoc tokenOwner_s247;
[L2709]              havoc balance_s247;
[L2710]              havoc tokenOwner_s263;
[L2711]              havoc spender_s263;
[L2712]              havoc remaining_s263;
[L2713]              havoc to_s334;
[L2714]              havoc tokens_s334;
[L2715]              havoc success_s334;
[L2716]              havoc spender_s291;
[L2717]              havoc tokens_s291;
[L2718]              havoc success_s291;
[L2719]              havoc from_s393;
[L2720]              havoc to_s393;
[L2721]              havoc tokens_s393;
[L2722]              havoc success_s393;
[L2723]              havoc a_s90;
[L2724]              havoc b_s90;
[L2725]              havoc c_s90;
[L2726]              havoc a_s112;
[L2727]              havoc b_s112;
[L2728]              havoc c_s112;
[L2729]              havoc a_s140;
[L2730]              havoc b_s140;
[L2731]              havoc c_s140;
[L2732]              havoc a_s162;
[L2733]              havoc b_s162;
[L2734]              havoc c_s162;
[L2735]              havoc __ret_0_name;
[L2736]              havoc __ret_0_symbol;
[L2737]              havoc __ret_0_decimals;
[L2738]              havoc __ret_0__totalSupply;
[L2739]              havoc tmpNow;
[L2740]              havoc gas;
[L2741]              assume gas > 4000000 && gas <= 8000000;
[L2742]              tmpNow := now;
[L2743]              havoc now;
[L2744]              assume now > tmpNow;
[L2745]              assume msgsender_MSG != null;
[L2746]              assume DType[msgsender_MSG] != ERC20Interface;
[L2747]              assume DType[msgsender_MSG] != SafeMath;
[L2748]              assume DType[msgsender_MSG] != YearnFinanceBitToken;
[L2749]              Alloc[msgsender_MSG] := true;
[L2750]  COND FALSE  !(choice == 14)
[L2756]  COND FALSE  !(choice == 13)
[L2762]  COND FALSE  !(choice == 12)
[L2768]  COND TRUE   choice == 11
[L2769]              gas := gas - 21000;
[L2770]  COND TRUE   gas >= 0
[L2771]              assume tokens_s334 >= 0 && tokens_s334 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2772]              assume msgvalue_MSG == 0;
[L2773]  CALL        call success_s334 := transfer~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == to_s334 && tokens_s334 <= balances_YearnFinanceBitToken[this][msgsender_MSG]) && tokens_s334 >= 0) && tokens_s334 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][to_s334] >= 0) && balances_YearnFinanceBitToken[this][to_s334] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][msgsender_MSG] >= 0) && balances_YearnFinanceBitToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L652]               havoc __exception;
[L653]               revert := false;
[L654]   COND FALSE  !(__exception)
[L675]   CALL        call success_s334 := transfer~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L1563]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1564]  CALL        call __var_2 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][msgsender_MSG], tokens_s334);
[L1348]  COND FALSE  !(!(b_s112 <= a_s112))
[L1352]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1564]  RET         call __var_2 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][msgsender_MSG], tokens_s334);
[L1565]  COND FALSE  !(revert)
[L1571]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1572]              balances_YearnFinanceBitToken[this][msgsender_MSG] := __var_2;
[L1573]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1574]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1575]  CALL        call __var_3 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][to_s334], tokens_s334);
[L1330]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1331]  COND FALSE  !(!(c_s90 >= a_s90))
[L1575]  RET         call __var_3 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][to_s334], tokens_s334);
[L1576]  COND FALSE  !(revert)
[L1582]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][to_s334];
[L1583]              balances_YearnFinanceBitToken[this][to_s334] := __var_3;
[L1584]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][to_s334];
[L1585]              assert { :EventEmitted "Transfer_YearnFinanceBitToken" } true;
[L1586]              success_s334 := true;
[L675]   RET         call success_s334 := transfer~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L676]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((success_s334 == true && _totalSupply_YearnFinanceBitToken[this] == old(_totalSupply_YearnFinanceBitToken[this])) && balances_YearnFinanceBitToken[this] == old(balances_YearnFinanceBitToken[this])) && allowed_YearnFinanceBitToken[this] == old(allowed_YearnFinanceBitToken[this])) && name_YearnFinanceBitToken[this] == old(name_YearnFinanceBitToken[this])) && symbol_YearnFinanceBitToken[this] == old(symbol_YearnFinanceBitToken[this])) && decimals_YearnFinanceBitToken[this] == old(decimals_YearnFinanceBitToken[this]));
[L2]                 revert := revert_hold;
[L2773]  RET         call success_s334 := transfer~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L2863]  RET         call CorralChoice_YearnFinanceBitToken(this);

[2020-11-25 09:28:27,094 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:28:27,094 INFO  L82        PathProgramCache]: Analyzing trace with hash -1223061871, now seen corresponding path program 1 times
[2020-11-25 09:28:27,094 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:28:27,150 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:28:27,885 WARN  L188               SmtUtils]: Spent 116.00 ms on a formula simplification. DAG size of input: 63 DAG size of output: 54
[2020-11-25 09:28:28,325 INFO  L134       CoverageAnalysis]: Checked inductivity of 61 backedges. 58 proven. 3 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 09:28:28,325 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 09:28:28,325 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [40] total 40
[2020-11-25 09:28:28,325 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:28:28,325 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 41 interpolants.
[2020-11-25 09:28:28,326 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=116, Invalid=1524, Unknown=0, NotChecked=0, Total=1640
[2020-11-25 09:28:28,326 INFO  L87              Difference]: Start difference. First operand 1451 states and 1613 transitions. cyclomatic complexity: 168 Second operand 41 states.
[2020-11-25 09:28:29,959 WARN  L188               SmtUtils]: Spent 157.00 ms on a formula simplification. DAG size of input: 118 DAG size of output: 108
[2020-11-25 09:28:32,368 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:28:32,368 INFO  L93              Difference]: Finished difference Result 1628 states and 1857 transitions.
[2020-11-25 09:28:32,368 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 37 states. 
[2020-11-25 09:28:32,369 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1628 states and 1857 transitions.
[2020-11-25 09:28:32,380 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 09:28:32,384 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1628 states to 1628 states and 1857 transitions.
[2020-11-25 09:28:32,384 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 604
[2020-11-25 09:28:32,385 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 604
[2020-11-25 09:28:32,385 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1628 states and 1857 transitions.
[2020-11-25 09:28:32,387 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:28:32,387 INFO  L728         BuchiCegarLoop]: Abstraction has 1628 states and 1857 transitions.
[2020-11-25 09:28:32,388 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1628 states and 1857 transitions.
[2020-11-25 09:28:32,403 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1628 to 1608.
[2020-11-25 09:28:32,403 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1608 states.
[2020-11-25 09:28:32,405 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1608 states to 1608 states and 1831 transitions.
[2020-11-25 09:28:32,405 INFO  L751         BuchiCegarLoop]: Abstraction has 1608 states and 1831 transitions.
[2020-11-25 09:28:32,405 INFO  L631         BuchiCegarLoop]: Abstraction has 1608 states and 1831 transitions.
[2020-11-25 09:28:32,405 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 09:28:32,405 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1608 states and 1831 transitions.
[2020-11-25 09:28:32,408 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 09:28:32,408 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:28:32,408 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:28:32,410 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:28:32,410 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_YearnFinanceBitToken0 := false;
[L2]                 call_transfer_YearnFinanceBitToken0 := false;
[L2]     CALL        call main();
[L2853]              assume null == 0;
[L2854]  CALL        call this := FreshRefGenerator__success();
[L1249]              havoc newRef;
[L1250]              assume Alloc[newRef] == false;
[L1251]              Alloc[newRef] := true;
[L1252]              assume newRef != null;
[L2854]  RET         call this := FreshRefGenerator__success();
[L2855]              assume now >= 0;
[L2856]              assume DType[this] == YearnFinanceBitToken;
[L2857]              assume msgvalue_MSG == 0;
[L2858]              gas := gas - 53000;
[L2859]  CALL        call YearnFinanceBitToken_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG);
[L398]               havoc __exception;
[L399]               revert := false;
[L400]   COND FALSE  !(__exception)
[L421]   CALL        call YearnFinanceBitToken_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1456]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1281]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1266]              assume msgsender_MSG != null;
[L1267]              Balance[this] := 0;
[L1281]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1282]  COND FALSE  !(revert)
[L1456]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1457]  COND FALSE  !(revert)
[L1460]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1313]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1298]              assume msgsender_MSG != null;
[L1299]              Balance[this] := 0;
[L1313]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1314]  COND FALSE  !(revert)
[L1460]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1461]  COND FALSE  !(revert)
[L1464]  CALL        call YearnFinanceBitToken_YearnFinanceBitToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1417]              assume msgsender_MSG != null;
[L1418]              Balance[this] := 0;
[L1419]              name_YearnFinanceBitToken[this] := 627147201;
[L1420]              symbol_YearnFinanceBitToken[this] := 627147201;
[L1421]              decimals_YearnFinanceBitToken[this] := 0;
[L1422]              _totalSupply_YearnFinanceBitToken[this] := 0;
[L1423]              balances_YearnFinanceBitToken[this] := zeroRefintArr();
[L1424]              sum_balances0[this] := 0;
[L1425]              allowed_YearnFinanceBitToken[this] := zeroRefRefintArr();
[L1426]              sum_allowed1[this] := 0;
[L1428]              name_YearnFinanceBitToken[this] := 1658284292;
[L1429]              symbol_YearnFinanceBitToken[this] := -1175268548;
[L1430]              decimals_YearnFinanceBitToken[this] := 18;
[L1431]              _totalSupply_YearnFinanceBitToken[this] := 7000000000000000000000;
[L1432]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1433]              balances_YearnFinanceBitToken[this][msgsender_MSG] := _totalSupply_YearnFinanceBitToken[this];
[L1434]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1435]              assert { :EventEmitted "Transfer_YearnFinanceBitToken" } true;
[L1464]  RET         call YearnFinanceBitToken_YearnFinanceBitToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1465]  COND FALSE  !(revert)
[L421]   RET         call YearnFinanceBitToken_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG);
[L422]               assume !revert && gas >= 0;
[L2859]  RET         call YearnFinanceBitToken_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG);
[L2860]              assume !revert && gas >= 0;
[L2863]  CALL        call CorralChoice_YearnFinanceBitToken(this);
[L2704]              havoc msgsender_MSG;
[L2705]              havoc msgvalue_MSG;
[L2706]              havoc choice;
[L2707]              havoc __ret_0_totalSupply;
[L2708]              havoc tokenOwner_s247;
[L2709]              havoc balance_s247;
[L2710]              havoc tokenOwner_s263;
[L2711]              havoc spender_s263;
[L2712]              havoc remaining_s263;
[L2713]              havoc to_s334;
[L2714]              havoc tokens_s334;
[L2715]              havoc success_s334;
[L2716]              havoc spender_s291;
[L2717]              havoc tokens_s291;
[L2718]              havoc success_s291;
[L2719]              havoc from_s393;
[L2720]              havoc to_s393;
[L2721]              havoc tokens_s393;
[L2722]              havoc success_s393;
[L2723]              havoc a_s90;
[L2724]              havoc b_s90;
[L2725]              havoc c_s90;
[L2726]              havoc a_s112;
[L2727]              havoc b_s112;
[L2728]              havoc c_s112;
[L2729]              havoc a_s140;
[L2730]              havoc b_s140;
[L2731]              havoc c_s140;
[L2732]              havoc a_s162;
[L2733]              havoc b_s162;
[L2734]              havoc c_s162;
[L2735]              havoc __ret_0_name;
[L2736]              havoc __ret_0_symbol;
[L2737]              havoc __ret_0_decimals;
[L2738]              havoc __ret_0__totalSupply;
[L2739]              havoc tmpNow;
[L2740]              havoc gas;
[L2741]              assume gas > 4000000 && gas <= 8000000;
[L2742]              tmpNow := now;
[L2743]              havoc now;
[L2744]              assume now > tmpNow;
[L2745]              assume msgsender_MSG != null;
[L2746]              assume DType[msgsender_MSG] != ERC20Interface;
[L2747]              assume DType[msgsender_MSG] != SafeMath;
[L2748]              assume DType[msgsender_MSG] != YearnFinanceBitToken;
[L2749]              Alloc[msgsender_MSG] := true;
[L2750]  COND FALSE  !(choice == 14)
[L2756]  COND FALSE  !(choice == 13)
[L2762]  COND FALSE  !(choice == 12)
[L2768]  COND FALSE  !(choice == 11)
[L2775]  COND TRUE   choice == 10
[L2776]              gas := gas - 21000;
[L2777]  COND TRUE   gas >= 0
[L2778]              assume tokens_s291 >= 0 && tokens_s291 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2779]              assume msgvalue_MSG == 0;
[L2780]  CALL        call success_s291 := approve~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, spender_s291, tokens_s291);
[L600]               havoc __exception;
[L601]               revert := false;
[L602]   COND FALSE  !(__exception)
[L623]   CALL        call success_s291 := approve~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, spender_s291, tokens_s291);
[L1521]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_YearnFinanceBitToken[this][msgsender_MSG][spender_s291];
[L1522]              allowed_YearnFinanceBitToken[this][msgsender_MSG][spender_s291] := tokens_s291;
[L1523]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_YearnFinanceBitToken[this][msgsender_MSG][spender_s291];
[L1524]              assert { :EventEmitted "Approval_YearnFinanceBitToken" } true;
[L1525]              success_s291 := true;
[L623]   RET         call success_s291 := approve~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, spender_s291, tokens_s291);
[L624]               assume !revert && gas >= 0;
[L2780]  RET         call success_s291 := approve~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, spender_s291, tokens_s291);
[L2863]  RET         call CorralChoice_YearnFinanceBitToken(this);
[L2863]  CALL        call CorralChoice_YearnFinanceBitToken(this);
[L2704]              havoc msgsender_MSG;
[L2705]              havoc msgvalue_MSG;
[L2706]              havoc choice;
[L2707]              havoc __ret_0_totalSupply;
[L2708]              havoc tokenOwner_s247;
[L2709]              havoc balance_s247;
[L2710]              havoc tokenOwner_s263;
[L2711]              havoc spender_s263;
[L2712]              havoc remaining_s263;
[L2713]              havoc to_s334;
[L2714]              havoc tokens_s334;
[L2715]              havoc success_s334;
[L2716]              havoc spender_s291;
[L2717]              havoc tokens_s291;
[L2718]              havoc success_s291;
[L2719]              havoc from_s393;
[L2720]              havoc to_s393;
[L2721]              havoc tokens_s393;
[L2722]              havoc success_s393;
[L2723]              havoc a_s90;
[L2724]              havoc b_s90;
[L2725]              havoc c_s90;
[L2726]              havoc a_s112;
[L2727]              havoc b_s112;
[L2728]              havoc c_s112;
[L2729]              havoc a_s140;
[L2730]              havoc b_s140;
[L2731]              havoc c_s140;
[L2732]              havoc a_s162;
[L2733]              havoc b_s162;
[L2734]              havoc c_s162;
[L2735]              havoc __ret_0_name;
[L2736]              havoc __ret_0_symbol;
[L2737]              havoc __ret_0_decimals;
[L2738]              havoc __ret_0__totalSupply;
[L2739]              havoc tmpNow;
[L2740]              havoc gas;
[L2741]              assume gas > 4000000 && gas <= 8000000;
[L2742]              tmpNow := now;
[L2743]              havoc now;
[L2744]              assume now > tmpNow;
[L2745]              assume msgsender_MSG != null;
[L2746]              assume DType[msgsender_MSG] != ERC20Interface;
[L2747]              assume DType[msgsender_MSG] != SafeMath;
[L2748]              assume DType[msgsender_MSG] != YearnFinanceBitToken;
[L2749]              Alloc[msgsender_MSG] := true;
[L2750]  COND FALSE  !(choice == 14)
[L2756]  COND FALSE  !(choice == 13)
[L2762]  COND FALSE  !(choice == 12)
[L2768]  COND FALSE  !(choice == 11)
[L2775]  COND FALSE  !(choice == 10)
[L2782]  COND TRUE   choice == 9
[L2783]              gas := gas - 21000;
[L2784]  COND TRUE   gas >= 0
[L2785]              assume tokens_s393 >= 0 && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2786]              assume msgvalue_MSG == 0;
[L2787]  CALL        call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L706]               havoc __exception;
[L707]               revert := false;
[L708]   COND FALSE  !(__exception)
[L729]   CALL        call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L1637]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1638]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][from_s393], tokens_s393);
[L1348]  COND FALSE  !(!(b_s112 <= a_s112))
[L1352]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1638]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][from_s393], tokens_s393);
[L1639]  COND FALSE  !(revert)
[L1645]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][from_s393];
[L1646]              balances_YearnFinanceBitToken[this][from_s393] := __var_4;
[L1647]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][from_s393];
[L1648]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1649]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG], tokens_s393);
[L1348]  COND FALSE  !(!(b_s112 <= a_s112))
[L1352]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1649]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG], tokens_s393);
[L1650]  COND FALSE  !(revert)
[L1656]              sum_allowed1[from_s393] := sum_allowed1[from_s393] - allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG];
[L1657]              allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] := __var_5;
[L1658]              sum_allowed1[from_s393] := sum_allowed1[from_s393] + allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG];
[L1659]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1660]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][to_s393], tokens_s393);
[L1330]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1331]  COND FALSE  !(!(c_s90 >= a_s90))
[L1660]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][to_s393], tokens_s393);
[L1661]  COND FALSE  !(revert)
[L1667]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][to_s393];
[L1668]              balances_YearnFinanceBitToken[this][to_s393] := __var_6;
[L1669]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][to_s393];
[L1670]              assert { :EventEmitted "Transfer_YearnFinanceBitToken" } true;
[L1671]              success_s393 := true;
[L729]   RET         call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L730]               assume !revert && gas >= 0;
[L2787]  RET         call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L2863]  RET         call CorralChoice_YearnFinanceBitToken(this);
[L2863]  CALL        call CorralChoice_YearnFinanceBitToken(this);
[L2704]              havoc msgsender_MSG;
[L2705]              havoc msgvalue_MSG;
[L2706]              havoc choice;
[L2707]              havoc __ret_0_totalSupply;
[L2708]              havoc tokenOwner_s247;
[L2709]              havoc balance_s247;
[L2710]              havoc tokenOwner_s263;
[L2711]              havoc spender_s263;
[L2712]              havoc remaining_s263;
[L2713]              havoc to_s334;
[L2714]              havoc tokens_s334;
[L2715]              havoc success_s334;
[L2716]              havoc spender_s291;
[L2717]              havoc tokens_s291;
[L2718]              havoc success_s291;
[L2719]              havoc from_s393;
[L2720]              havoc to_s393;
[L2721]              havoc tokens_s393;
[L2722]              havoc success_s393;
[L2723]              havoc a_s90;
[L2724]              havoc b_s90;
[L2725]              havoc c_s90;
[L2726]              havoc a_s112;
[L2727]              havoc b_s112;
[L2728]              havoc c_s112;
[L2729]              havoc a_s140;
[L2730]              havoc b_s140;
[L2731]              havoc c_s140;
[L2732]              havoc a_s162;
[L2733]              havoc b_s162;
[L2734]              havoc c_s162;
[L2735]              havoc __ret_0_name;
[L2736]              havoc __ret_0_symbol;
[L2737]              havoc __ret_0_decimals;
[L2738]              havoc __ret_0__totalSupply;
[L2739]              havoc tmpNow;
[L2740]              havoc gas;
[L2741]              assume gas > 4000000 && gas <= 8000000;
[L2742]              tmpNow := now;
[L2743]              havoc now;
[L2744]              assume now > tmpNow;
[L2745]              assume msgsender_MSG != null;
[L2746]              assume DType[msgsender_MSG] != ERC20Interface;
[L2747]              assume DType[msgsender_MSG] != SafeMath;
[L2748]              assume DType[msgsender_MSG] != YearnFinanceBitToken;
[L2749]              Alloc[msgsender_MSG] := true;
[L2750]  COND FALSE  !(choice == 14)
[L2756]  COND FALSE  !(choice == 13)
[L2762]  COND FALSE  !(choice == 12)
[L2768]  COND TRUE   choice == 11
[L2769]              gas := gas - 21000;
[L2770]  COND TRUE   gas >= 0
[L2771]              assume tokens_s334 >= 0 && tokens_s334 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2772]              assume msgvalue_MSG == 0;
[L2773]  CALL        call success_s334 := transfer~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s334 && tokens_s334 <= balances_YearnFinanceBitToken[this][msgsender_MSG]) && tokens_s334 >= 0) && tokens_s334 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][to_s334] >= 0) && balances_YearnFinanceBitToken[this][to_s334] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][msgsender_MSG] >= 0) && balances_YearnFinanceBitToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_YearnFinanceBitToken0 := true;
[L2]                 call_transfer_YearnFinanceBitToken0 := false;
[L2]                 revert := revert_hold;
[L652]               havoc __exception;
[L653]               revert := false;
[L654]   COND FALSE  !(__exception)
[L675]   CALL        call success_s334 := transfer~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L1563]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1564]  CALL        call __var_2 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][msgsender_MSG], tokens_s334);
[L1348]  COND FALSE  !(!(b_s112 <= a_s112))
[L1352]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1564]  RET         call __var_2 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][msgsender_MSG], tokens_s334);
[L1565]  COND FALSE  !(revert)
[L1571]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1572]              balances_YearnFinanceBitToken[this][msgsender_MSG] := __var_2;
[L1573]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1574]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1575]  CALL        call __var_3 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][to_s334], tokens_s334);
[L1330]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1331]  COND FALSE  !(!(c_s90 >= a_s90))
[L1575]  RET         call __var_3 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][to_s334], tokens_s334);
[L1576]  COND FALSE  !(revert)
[L1582]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][to_s334];
[L1583]              balances_YearnFinanceBitToken[this][to_s334] := __var_3;
[L1584]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][to_s334];
[L1585]              assert { :EventEmitted "Transfer_YearnFinanceBitToken" } true;
[L1586]              success_s334 := true;
[L675]   RET         call success_s334 := transfer~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L676]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((success_s334 == true && _totalSupply_YearnFinanceBitToken[this] == old(_totalSupply_YearnFinanceBitToken[this])) && balances_YearnFinanceBitToken[this] == old(balances_YearnFinanceBitToken[this])) && allowed_YearnFinanceBitToken[this] == old(allowed_YearnFinanceBitToken[this])) && name_YearnFinanceBitToken[this] == old(name_YearnFinanceBitToken[this])) && symbol_YearnFinanceBitToken[this] == old(symbol_YearnFinanceBitToken[this])) && decimals_YearnFinanceBitToken[this] == old(decimals_YearnFinanceBitToken[this]));
[L2]                 revert := revert_hold;
[L2773]  RET         call success_s334 := transfer~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L2863]  RET         call CorralChoice_YearnFinanceBitToken(this);

Loop:
[L2863]  CALL        call CorralChoice_YearnFinanceBitToken(this);
[L2704]              havoc msgsender_MSG;
[L2705]              havoc msgvalue_MSG;
[L2706]              havoc choice;
[L2707]              havoc __ret_0_totalSupply;
[L2708]              havoc tokenOwner_s247;
[L2709]              havoc balance_s247;
[L2710]              havoc tokenOwner_s263;
[L2711]              havoc spender_s263;
[L2712]              havoc remaining_s263;
[L2713]              havoc to_s334;
[L2714]              havoc tokens_s334;
[L2715]              havoc success_s334;
[L2716]              havoc spender_s291;
[L2717]              havoc tokens_s291;
[L2718]              havoc success_s291;
[L2719]              havoc from_s393;
[L2720]              havoc to_s393;
[L2721]              havoc tokens_s393;
[L2722]              havoc success_s393;
[L2723]              havoc a_s90;
[L2724]              havoc b_s90;
[L2725]              havoc c_s90;
[L2726]              havoc a_s112;
[L2727]              havoc b_s112;
[L2728]              havoc c_s112;
[L2729]              havoc a_s140;
[L2730]              havoc b_s140;
[L2731]              havoc c_s140;
[L2732]              havoc a_s162;
[L2733]              havoc b_s162;
[L2734]              havoc c_s162;
[L2735]              havoc __ret_0_name;
[L2736]              havoc __ret_0_symbol;
[L2737]              havoc __ret_0_decimals;
[L2738]              havoc __ret_0__totalSupply;
[L2739]              havoc tmpNow;
[L2740]              havoc gas;
[L2741]              assume gas > 4000000 && gas <= 8000000;
[L2742]              tmpNow := now;
[L2743]              havoc now;
[L2744]              assume now > tmpNow;
[L2745]              assume msgsender_MSG != null;
[L2746]              assume DType[msgsender_MSG] != ERC20Interface;
[L2747]              assume DType[msgsender_MSG] != SafeMath;
[L2748]              assume DType[msgsender_MSG] != YearnFinanceBitToken;
[L2749]              Alloc[msgsender_MSG] := true;
[L2750]  COND TRUE   choice == 14
[L2751]              gas := gas - 21000;
[L2752]  COND FALSE  !(gas >= 0)
[L2863]  RET         call CorralChoice_YearnFinanceBitToken(this);

[2020-11-25 09:28:32,414 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:28:32,414 INFO  L82        PathProgramCache]: Analyzing trace with hash 108621706, now seen corresponding path program 1 times
[2020-11-25 09:28:32,415 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:28:32,540 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:28:33,834 INFO  L134       CoverageAnalysis]: Checked inductivity of 164 backedges. 0 proven. 110 refuted. 0 times theorem prover too weak. 54 trivial. 0 not checked.
[2020-11-25 09:28:33,834 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 09:28:33,834 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [39] total 39
[2020-11-25 09:28:33,835 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:28:33,835 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 40 interpolants.
[2020-11-25 09:28:33,835 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=126, Invalid=1434, Unknown=0, NotChecked=0, Total=1560
[2020-11-25 09:28:33,835 INFO  L87              Difference]: Start difference. First operand 1608 states and 1831 transitions. cyclomatic complexity: 233 Second operand 40 states.
[2020-11-25 09:28:36,219 WARN  L188               SmtUtils]: Spent 101.00 ms on a formula simplification. DAG size of input: 130 DAG size of output: 115
[2020-11-25 09:28:38,238 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:28:38,238 INFO  L93              Difference]: Finished difference Result 1786 states and 2073 transitions.
[2020-11-25 09:28:38,238 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 40 states. 
[2020-11-25 09:28:38,238 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1786 states and 2073 transitions.
[2020-11-25 09:28:38,242 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 09:28:38,246 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1786 states to 1786 states and 2073 transitions.
[2020-11-25 09:28:38,246 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 692
[2020-11-25 09:28:38,246 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 692
[2020-11-25 09:28:38,246 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1786 states and 2073 transitions.
[2020-11-25 09:28:38,248 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:28:38,248 INFO  L728         BuchiCegarLoop]: Abstraction has 1786 states and 2073 transitions.
[2020-11-25 09:28:38,249 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1786 states and 2073 transitions.
[2020-11-25 09:28:38,257 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1786 to 1610.
[2020-11-25 09:28:38,257 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1610 states.
[2020-11-25 09:28:38,259 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1610 states to 1610 states and 1837 transitions.
[2020-11-25 09:28:38,259 INFO  L751         BuchiCegarLoop]: Abstraction has 1610 states and 1837 transitions.
[2020-11-25 09:28:38,259 INFO  L631         BuchiCegarLoop]: Abstraction has 1610 states and 1837 transitions.
[2020-11-25 09:28:38,259 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 09:28:38,259 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1610 states and 1837 transitions.
[2020-11-25 09:28:38,261 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 09:28:38,261 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:28:38,261 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:28:38,262 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:28:38,262 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_YearnFinanceBitToken0 := false;
[L2]                 call_transfer_YearnFinanceBitToken0 := false;
[L2]     CALL        call main();
[L2853]              assume null == 0;
[L2854]  CALL        call this := FreshRefGenerator__success();
[L1249]              havoc newRef;
[L1250]              assume Alloc[newRef] == false;
[L1251]              Alloc[newRef] := true;
[L1252]              assume newRef != null;
[L2854]  RET         call this := FreshRefGenerator__success();
[L2855]              assume now >= 0;
[L2856]              assume DType[this] == YearnFinanceBitToken;
[L2857]              assume msgvalue_MSG == 0;
[L2858]              gas := gas - 53000;
[L2859]  CALL        call YearnFinanceBitToken_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG);
[L398]               havoc __exception;
[L399]               revert := false;
[L400]   COND FALSE  !(__exception)
[L421]   CALL        call YearnFinanceBitToken_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1456]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1281]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1266]              assume msgsender_MSG != null;
[L1267]              Balance[this] := 0;
[L1281]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1282]  COND FALSE  !(revert)
[L1456]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1457]  COND FALSE  !(revert)
[L1460]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1313]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1298]              assume msgsender_MSG != null;
[L1299]              Balance[this] := 0;
[L1313]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1314]  COND FALSE  !(revert)
[L1460]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1461]  COND FALSE  !(revert)
[L1464]  CALL        call YearnFinanceBitToken_YearnFinanceBitToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1417]              assume msgsender_MSG != null;
[L1418]              Balance[this] := 0;
[L1419]              name_YearnFinanceBitToken[this] := 627147201;
[L1420]              symbol_YearnFinanceBitToken[this] := 627147201;
[L1421]              decimals_YearnFinanceBitToken[this] := 0;
[L1422]              _totalSupply_YearnFinanceBitToken[this] := 0;
[L1423]              balances_YearnFinanceBitToken[this] := zeroRefintArr();
[L1424]              sum_balances0[this] := 0;
[L1425]              allowed_YearnFinanceBitToken[this] := zeroRefRefintArr();
[L1426]              sum_allowed1[this] := 0;
[L1428]              name_YearnFinanceBitToken[this] := 1658284292;
[L1429]              symbol_YearnFinanceBitToken[this] := -1175268548;
[L1430]              decimals_YearnFinanceBitToken[this] := 18;
[L1431]              _totalSupply_YearnFinanceBitToken[this] := 7000000000000000000000;
[L1432]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1433]              balances_YearnFinanceBitToken[this][msgsender_MSG] := _totalSupply_YearnFinanceBitToken[this];
[L1434]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1435]              assert { :EventEmitted "Transfer_YearnFinanceBitToken" } true;
[L1464]  RET         call YearnFinanceBitToken_YearnFinanceBitToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1465]  COND FALSE  !(revert)
[L421]   RET         call YearnFinanceBitToken_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG);
[L422]               assume !revert && gas >= 0;
[L2859]  RET         call YearnFinanceBitToken_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG);
[L2860]              assume !revert && gas >= 0;
[L2863]  CALL        call CorralChoice_YearnFinanceBitToken(this);
[L2704]              havoc msgsender_MSG;
[L2705]              havoc msgvalue_MSG;
[L2706]              havoc choice;
[L2707]              havoc __ret_0_totalSupply;
[L2708]              havoc tokenOwner_s247;
[L2709]              havoc balance_s247;
[L2710]              havoc tokenOwner_s263;
[L2711]              havoc spender_s263;
[L2712]              havoc remaining_s263;
[L2713]              havoc to_s334;
[L2714]              havoc tokens_s334;
[L2715]              havoc success_s334;
[L2716]              havoc spender_s291;
[L2717]              havoc tokens_s291;
[L2718]              havoc success_s291;
[L2719]              havoc from_s393;
[L2720]              havoc to_s393;
[L2721]              havoc tokens_s393;
[L2722]              havoc success_s393;
[L2723]              havoc a_s90;
[L2724]              havoc b_s90;
[L2725]              havoc c_s90;
[L2726]              havoc a_s112;
[L2727]              havoc b_s112;
[L2728]              havoc c_s112;
[L2729]              havoc a_s140;
[L2730]              havoc b_s140;
[L2731]              havoc c_s140;
[L2732]              havoc a_s162;
[L2733]              havoc b_s162;
[L2734]              havoc c_s162;
[L2735]              havoc __ret_0_name;
[L2736]              havoc __ret_0_symbol;
[L2737]              havoc __ret_0_decimals;
[L2738]              havoc __ret_0__totalSupply;
[L2739]              havoc tmpNow;
[L2740]              havoc gas;
[L2741]              assume gas > 4000000 && gas <= 8000000;
[L2742]              tmpNow := now;
[L2743]              havoc now;
[L2744]              assume now > tmpNow;
[L2745]              assume msgsender_MSG != null;
[L2746]              assume DType[msgsender_MSG] != ERC20Interface;
[L2747]              assume DType[msgsender_MSG] != SafeMath;
[L2748]              assume DType[msgsender_MSG] != YearnFinanceBitToken;
[L2749]              Alloc[msgsender_MSG] := true;
[L2750]  COND FALSE  !(choice == 14)
[L2756]  COND FALSE  !(choice == 13)
[L2762]  COND FALSE  !(choice == 12)
[L2768]  COND FALSE  !(choice == 11)
[L2775]  COND FALSE  !(choice == 10)
[L2782]  COND TRUE   choice == 9
[L2783]              gas := gas - 21000;
[L2784]  COND TRUE   gas >= 0
[L2785]              assume tokens_s393 >= 0 && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2786]              assume msgvalue_MSG == 0;
[L2787]  CALL        call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L706]               havoc __exception;
[L707]               revert := false;
[L708]   COND FALSE  !(__exception)
[L729]   CALL        call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L1637]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1638]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][from_s393], tokens_s393);
[L1348]  COND FALSE  !(!(b_s112 <= a_s112))
[L1352]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1638]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][from_s393], tokens_s393);
[L1639]  COND FALSE  !(revert)
[L1645]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][from_s393];
[L1646]              balances_YearnFinanceBitToken[this][from_s393] := __var_4;
[L1647]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][from_s393];
[L1648]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1649]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG], tokens_s393);
[L1348]  COND FALSE  !(!(b_s112 <= a_s112))
[L1352]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1649]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG], tokens_s393);
[L1650]  COND FALSE  !(revert)
[L1656]              sum_allowed1[from_s393] := sum_allowed1[from_s393] - allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG];
[L1657]              allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] := __var_5;
[L1658]              sum_allowed1[from_s393] := sum_allowed1[from_s393] + allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG];
[L1659]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1660]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][to_s393], tokens_s393);
[L1330]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1331]  COND FALSE  !(!(c_s90 >= a_s90))
[L1660]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][to_s393], tokens_s393);
[L1661]  COND FALSE  !(revert)
[L1667]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][to_s393];
[L1668]              balances_YearnFinanceBitToken[this][to_s393] := __var_6;
[L1669]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][to_s393];
[L1670]              assert { :EventEmitted "Transfer_YearnFinanceBitToken" } true;
[L1671]              success_s393 := true;
[L729]   RET         call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L730]               assume !revert && gas >= 0;
[L2787]  RET         call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L2863]  RET         call CorralChoice_YearnFinanceBitToken(this);
[L2863]  CALL        call CorralChoice_YearnFinanceBitToken(this);
[L2704]              havoc msgsender_MSG;
[L2705]              havoc msgvalue_MSG;
[L2706]              havoc choice;
[L2707]              havoc __ret_0_totalSupply;
[L2708]              havoc tokenOwner_s247;
[L2709]              havoc balance_s247;
[L2710]              havoc tokenOwner_s263;
[L2711]              havoc spender_s263;
[L2712]              havoc remaining_s263;
[L2713]              havoc to_s334;
[L2714]              havoc tokens_s334;
[L2715]              havoc success_s334;
[L2716]              havoc spender_s291;
[L2717]              havoc tokens_s291;
[L2718]              havoc success_s291;
[L2719]              havoc from_s393;
[L2720]              havoc to_s393;
[L2721]              havoc tokens_s393;
[L2722]              havoc success_s393;
[L2723]              havoc a_s90;
[L2724]              havoc b_s90;
[L2725]              havoc c_s90;
[L2726]              havoc a_s112;
[L2727]              havoc b_s112;
[L2728]              havoc c_s112;
[L2729]              havoc a_s140;
[L2730]              havoc b_s140;
[L2731]              havoc c_s140;
[L2732]              havoc a_s162;
[L2733]              havoc b_s162;
[L2734]              havoc c_s162;
[L2735]              havoc __ret_0_name;
[L2736]              havoc __ret_0_symbol;
[L2737]              havoc __ret_0_decimals;
[L2738]              havoc __ret_0__totalSupply;
[L2739]              havoc tmpNow;
[L2740]              havoc gas;
[L2741]              assume gas > 4000000 && gas <= 8000000;
[L2742]              tmpNow := now;
[L2743]              havoc now;
[L2744]              assume now > tmpNow;
[L2745]              assume msgsender_MSG != null;
[L2746]              assume DType[msgsender_MSG] != ERC20Interface;
[L2747]              assume DType[msgsender_MSG] != SafeMath;
[L2748]              assume DType[msgsender_MSG] != YearnFinanceBitToken;
[L2749]              Alloc[msgsender_MSG] := true;
[L2750]  COND FALSE  !(choice == 14)
[L2756]  COND FALSE  !(choice == 13)
[L2762]  COND FALSE  !(choice == 12)
[L2768]  COND TRUE   choice == 11
[L2769]              gas := gas - 21000;
[L2770]  COND TRUE   gas >= 0
[L2771]              assume tokens_s334 >= 0 && tokens_s334 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2772]              assume msgvalue_MSG == 0;
[L2773]  CALL        call success_s334 := transfer~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == to_s334 && tokens_s334 <= balances_YearnFinanceBitToken[this][msgsender_MSG]) && tokens_s334 >= 0) && tokens_s334 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][to_s334] >= 0) && balances_YearnFinanceBitToken[this][to_s334] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][msgsender_MSG] >= 0) && balances_YearnFinanceBitToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L652]               havoc __exception;
[L653]               revert := false;
[L654]   COND FALSE  !(__exception)
[L675]   CALL        call success_s334 := transfer~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L1563]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1564]  CALL        call __var_2 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][msgsender_MSG], tokens_s334);
[L1348]  COND FALSE  !(!(b_s112 <= a_s112))
[L1352]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1564]  RET         call __var_2 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][msgsender_MSG], tokens_s334);
[L1565]  COND FALSE  !(revert)
[L1571]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1572]              balances_YearnFinanceBitToken[this][msgsender_MSG] := __var_2;
[L1573]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1574]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1575]  CALL        call __var_3 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][to_s334], tokens_s334);
[L1330]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1331]  COND FALSE  !(!(c_s90 >= a_s90))
[L1575]  RET         call __var_3 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][to_s334], tokens_s334);
[L1576]  COND FALSE  !(revert)
[L1582]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][to_s334];
[L1583]              balances_YearnFinanceBitToken[this][to_s334] := __var_3;
[L1584]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][to_s334];
[L1585]              assert { :EventEmitted "Transfer_YearnFinanceBitToken" } true;
[L1586]              success_s334 := true;
[L675]   RET         call success_s334 := transfer~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L676]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((success_s334 == true && _totalSupply_YearnFinanceBitToken[this] == old(_totalSupply_YearnFinanceBitToken[this])) && balances_YearnFinanceBitToken[this] == old(balances_YearnFinanceBitToken[this])) && allowed_YearnFinanceBitToken[this] == old(allowed_YearnFinanceBitToken[this])) && name_YearnFinanceBitToken[this] == old(name_YearnFinanceBitToken[this])) && symbol_YearnFinanceBitToken[this] == old(symbol_YearnFinanceBitToken[this])) && decimals_YearnFinanceBitToken[this] == old(decimals_YearnFinanceBitToken[this]));
[L2]                 revert := revert_hold;
[L2773]  RET         call success_s334 := transfer~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L2863]  RET         call CorralChoice_YearnFinanceBitToken(this);
[L2863]  CALL        call CorralChoice_YearnFinanceBitToken(this);
[L2704]              havoc msgsender_MSG;
[L2705]              havoc msgvalue_MSG;
[L2706]              havoc choice;
[L2707]              havoc __ret_0_totalSupply;
[L2708]              havoc tokenOwner_s247;
[L2709]              havoc balance_s247;
[L2710]              havoc tokenOwner_s263;
[L2711]              havoc spender_s263;
[L2712]              havoc remaining_s263;
[L2713]              havoc to_s334;
[L2714]              havoc tokens_s334;
[L2715]              havoc success_s334;
[L2716]              havoc spender_s291;
[L2717]              havoc tokens_s291;
[L2718]              havoc success_s291;
[L2719]              havoc from_s393;
[L2720]              havoc to_s393;
[L2721]              havoc tokens_s393;
[L2722]              havoc success_s393;
[L2723]              havoc a_s90;
[L2724]              havoc b_s90;
[L2725]              havoc c_s90;
[L2726]              havoc a_s112;
[L2727]              havoc b_s112;
[L2728]              havoc c_s112;
[L2729]              havoc a_s140;
[L2730]              havoc b_s140;
[L2731]              havoc c_s140;
[L2732]              havoc a_s162;
[L2733]              havoc b_s162;
[L2734]              havoc c_s162;
[L2735]              havoc __ret_0_name;
[L2736]              havoc __ret_0_symbol;
[L2737]              havoc __ret_0_decimals;
[L2738]              havoc __ret_0__totalSupply;
[L2739]              havoc tmpNow;
[L2740]              havoc gas;
[L2741]              assume gas > 4000000 && gas <= 8000000;
[L2742]              tmpNow := now;
[L2743]              havoc now;
[L2744]              assume now > tmpNow;
[L2745]              assume msgsender_MSG != null;
[L2746]              assume DType[msgsender_MSG] != ERC20Interface;
[L2747]              assume DType[msgsender_MSG] != SafeMath;
[L2748]              assume DType[msgsender_MSG] != YearnFinanceBitToken;
[L2749]              Alloc[msgsender_MSG] := true;
[L2750]  COND FALSE  !(choice == 14)
[L2756]  COND FALSE  !(choice == 13)
[L2762]  COND FALSE  !(choice == 12)
[L2768]  COND TRUE   choice == 11
[L2769]              gas := gas - 21000;
[L2770]  COND TRUE   gas >= 0
[L2771]              assume tokens_s334 >= 0 && tokens_s334 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2772]              assume msgvalue_MSG == 0;
[L2773]  CALL        call success_s334 := transfer~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s334 && tokens_s334 <= balances_YearnFinanceBitToken[this][msgsender_MSG]) && tokens_s334 >= 0) && tokens_s334 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][to_s334] >= 0) && balances_YearnFinanceBitToken[this][to_s334] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][msgsender_MSG] >= 0) && balances_YearnFinanceBitToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_YearnFinanceBitToken0 := true;
[L2]                 call_transfer_YearnFinanceBitToken0 := false;
[L2]                 revert := revert_hold;
[L652]               havoc __exception;
[L653]               revert := false;
[L654]   COND FALSE  !(__exception)
[L675]   CALL        call success_s334 := transfer~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L1563]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1564]  CALL        call __var_2 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][msgsender_MSG], tokens_s334);
[L1348]  COND FALSE  !(!(b_s112 <= a_s112))
[L1352]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1564]  RET         call __var_2 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][msgsender_MSG], tokens_s334);
[L1565]  COND FALSE  !(revert)
[L1571]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1572]              balances_YearnFinanceBitToken[this][msgsender_MSG] := __var_2;
[L1573]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1574]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1575]  CALL        call __var_3 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][to_s334], tokens_s334);
[L1330]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1331]  COND FALSE  !(!(c_s90 >= a_s90))
[L1575]  RET         call __var_3 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][to_s334], tokens_s334);
[L1576]  COND FALSE  !(revert)
[L1582]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][to_s334];
[L1583]              balances_YearnFinanceBitToken[this][to_s334] := __var_3;
[L1584]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][to_s334];
[L1585]              assert { :EventEmitted "Transfer_YearnFinanceBitToken" } true;
[L1586]              success_s334 := true;
[L675]   RET         call success_s334 := transfer~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L676]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((success_s334 == true && _totalSupply_YearnFinanceBitToken[this] == old(_totalSupply_YearnFinanceBitToken[this])) && balances_YearnFinanceBitToken[this] == old(balances_YearnFinanceBitToken[this])) && allowed_YearnFinanceBitToken[this] == old(allowed_YearnFinanceBitToken[this])) && name_YearnFinanceBitToken[this] == old(name_YearnFinanceBitToken[this])) && symbol_YearnFinanceBitToken[this] == old(symbol_YearnFinanceBitToken[this])) && decimals_YearnFinanceBitToken[this] == old(decimals_YearnFinanceBitToken[this]));
[L2]                 revert := revert_hold;
[L2773]  RET         call success_s334 := transfer~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L2863]  RET         call CorralChoice_YearnFinanceBitToken(this);

Loop:
[L2863]  CALL        call CorralChoice_YearnFinanceBitToken(this);
[L2704]              havoc msgsender_MSG;
[L2705]              havoc msgvalue_MSG;
[L2706]              havoc choice;
[L2707]              havoc __ret_0_totalSupply;
[L2708]              havoc tokenOwner_s247;
[L2709]              havoc balance_s247;
[L2710]              havoc tokenOwner_s263;
[L2711]              havoc spender_s263;
[L2712]              havoc remaining_s263;
[L2713]              havoc to_s334;
[L2714]              havoc tokens_s334;
[L2715]              havoc success_s334;
[L2716]              havoc spender_s291;
[L2717]              havoc tokens_s291;
[L2718]              havoc success_s291;
[L2719]              havoc from_s393;
[L2720]              havoc to_s393;
[L2721]              havoc tokens_s393;
[L2722]              havoc success_s393;
[L2723]              havoc a_s90;
[L2724]              havoc b_s90;
[L2725]              havoc c_s90;
[L2726]              havoc a_s112;
[L2727]              havoc b_s112;
[L2728]              havoc c_s112;
[L2729]              havoc a_s140;
[L2730]              havoc b_s140;
[L2731]              havoc c_s140;
[L2732]              havoc a_s162;
[L2733]              havoc b_s162;
[L2734]              havoc c_s162;
[L2735]              havoc __ret_0_name;
[L2736]              havoc __ret_0_symbol;
[L2737]              havoc __ret_0_decimals;
[L2738]              havoc __ret_0__totalSupply;
[L2739]              havoc tmpNow;
[L2740]              havoc gas;
[L2741]              assume gas > 4000000 && gas <= 8000000;
[L2742]              tmpNow := now;
[L2743]              havoc now;
[L2744]              assume now > tmpNow;
[L2745]              assume msgsender_MSG != null;
[L2746]              assume DType[msgsender_MSG] != ERC20Interface;
[L2747]              assume DType[msgsender_MSG] != SafeMath;
[L2748]              assume DType[msgsender_MSG] != YearnFinanceBitToken;
[L2749]              Alloc[msgsender_MSG] := true;
[L2750]  COND TRUE   choice == 14
[L2751]              gas := gas - 21000;
[L2752]  COND FALSE  !(gas >= 0)
[L2863]  RET         call CorralChoice_YearnFinanceBitToken(this);

[2020-11-25 09:28:38,265 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:28:38,265 INFO  L82        PathProgramCache]: Analyzing trace with hash -1326143262, now seen corresponding path program 1 times
[2020-11-25 09:28:38,266 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:28:38,340 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:28:38,485 INFO  L134       CoverageAnalysis]: Checked inductivity of 184 backedges. 111 proven. 0 refuted. 0 times theorem prover too weak. 73 trivial. 0 not checked.
[2020-11-25 09:28:38,486 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:28:38,486 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [16] imperfect sequences [] total 16
[2020-11-25 09:28:38,486 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:28:38,487 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 16 interpolants.
[2020-11-25 09:28:38,487 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=36, Invalid=204, Unknown=0, NotChecked=0, Total=240
[2020-11-25 09:28:38,487 INFO  L87              Difference]: Start difference. First operand 1610 states and 1837 transitions. cyclomatic complexity: 238 Second operand 16 states.
[2020-11-25 09:28:39,024 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:28:39,024 INFO  L93              Difference]: Finished difference Result 748 states and 833 transitions.
[2020-11-25 09:28:39,024 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 16 states. 
[2020-11-25 09:28:39,024 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 748 states and 833 transitions.
[2020-11-25 09:28:39,026 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 09:28:39,026 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 748 states to 0 states and 0 transitions.
[2020-11-25 09:28:39,026 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-25 09:28:39,026 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-25 09:28:39,026 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-25 09:28:39,026 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:28:39,026 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 09:28:39,026 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 09:28:39,026 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 09:28:39,026 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-25 09:28:39,026 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-25 09:28:39,026 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 09:28:39,026 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-25 09:28:39,029 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 09:28:39 BasicIcfg
[2020-11-25 09:28:39,029 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 09:28:39,029 INFO  L168              Benchmark]: Toolchain (without parser) took 26219.35 ms. Allocated memory was 1.0 GB in the beginning and 2.8 GB in the end (delta: 1.8 GB). Free memory was 940.6 MB in the beginning and 1.1 GB in the end (delta: -186.2 MB). Peak memory consumption was 1.6 GB. Max. memory is 15.3 GB.
[2020-11-25 09:28:39,030 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.19 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 09:28:39,030 INFO  L168              Benchmark]: Boogie Preprocessor took 94.53 ms. Allocated memory is still 1.0 GB. Free memory was 940.6 MB in the beginning and 929.8 MB in the end (delta: 10.8 MB). Peak memory consumption was 10.8 MB. Max. memory is 15.3 GB.
[2020-11-25 09:28:39,030 INFO  L168              Benchmark]: UtopiaSpecLang took 56.50 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 924.4 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 09:28:39,030 INFO  L168              Benchmark]: Boogie Printer took 13.31 ms. Allocated memory is still 1.0 GB. Free memory is still 924.4 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 09:28:39,031 INFO  L168              Benchmark]: RCFGBuilder took 685.40 ms. Allocated memory is still 1.0 GB. Free memory was 924.4 MB in the beginning and 838.5 MB in the end (delta: 85.9 MB). Peak memory consumption was 85.9 MB. Max. memory is 15.3 GB.
[2020-11-25 09:28:39,031 INFO  L168              Benchmark]: UtopiaLTL2Aut took 40.24 ms. Allocated memory is still 1.0 GB. Free memory was 838.5 MB in the beginning and 829.6 MB in the end (delta: 8.9 MB). Peak memory consumption was 8.9 MB. Max. memory is 15.3 GB.
[2020-11-25 09:28:39,031 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1047.29 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 56.1 MB). Free memory was 829.6 MB in the beginning and 755.1 MB in the end (delta: 74.4 MB). Peak memory consumption was 130.5 MB. Max. memory is 15.3 GB.
[2020-11-25 09:28:39,031 INFO  L168              Benchmark]: BlockEncodingV2 took 101.13 ms. Allocated memory is still 1.1 GB. Free memory was 755.1 MB in the beginning and 712.0 MB in the end (delta: 43.2 MB). Peak memory consumption was 43.2 MB. Max. memory is 15.3 GB.
[2020-11-25 09:28:39,032 INFO  L168              Benchmark]: BuchiAutomizer took 24177.95 ms. Allocated memory was 1.1 GB in the beginning and 2.8 GB in the end (delta: 1.7 GB). Free memory was 712.0 MB in the beginning and 1.1 GB in the end (delta: -414.8 MB). Peak memory consumption was 1.3 GB. Max. memory is 15.3 GB.
[2020-11-25 09:28:39,034 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    2488 locations, 4278 edges
  - StatisticsResult: Encoded RCFG
    2444 locations, 4160 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.19 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 94.53 ms. Allocated memory is still 1.0 GB. Free memory was 940.6 MB in the beginning and 929.8 MB in the end (delta: 10.8 MB). Peak memory consumption was 10.8 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 56.50 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 924.4 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 13.31 ms. Allocated memory is still 1.0 GB. Free memory is still 924.4 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * RCFGBuilder took 685.40 ms. Allocated memory is still 1.0 GB. Free memory was 924.4 MB in the beginning and 838.5 MB in the end (delta: 85.9 MB). Peak memory consumption was 85.9 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 40.24 ms. Allocated memory is still 1.0 GB. Free memory was 838.5 MB in the beginning and 829.6 MB in the end (delta: 8.9 MB). Peak memory consumption was 8.9 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1047.29 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 56.1 MB). Free memory was 829.6 MB in the beginning and 755.1 MB in the end (delta: 74.4 MB). Peak memory consumption was 130.5 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 101.13 ms. Allocated memory is still 1.1 GB. Free memory was 755.1 MB in the beginning and 712.0 MB in the end (delta: 43.2 MB). Peak memory consumption was 43.2 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 24177.95 ms. Allocated memory was 1.1 GB in the beginning and 2.8 GB in the end (delta: 1.7 GB). Free memory was 712.0 MB in the beginning and 1.1 GB in the end (delta: -414.8 MB). Peak memory consumption was 1.3 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    1049 locations, 1322 edges
  - StatisticsResult: BuchiProgram size
    2488 locations, 4278 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 10 terminating modules (10 trivial, 0 deterministic, 0 nondeterministic). 10 modules have a trivial ranking function, the largest among these consists of 43 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 24.1s and 11 iterations.  TraceHistogramMax:3. Analysis of lassos took 5.2s. Construction of modules took 13.9s. BÃ¼chi inclusion checks took 4.4s. Highest rank in rank-based complementation 0. Minimization of det autom 10. Minimization of nondet autom 0. Automata minimization 0.1s AutomataMinimizationTime, 9 MinimizatonAttempts, 1774 StatesRemovedByMinimization, 8 NontrivialMinimizations. Non-live state removal took 0.1s Buchi closure took 0.0s. Biggest automaton had 1844 states and ocurred in iteration 4.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 16400 SDtfs, 18573 SDslu, 88268 SDs, 0 SdLazy, 103183 SolverSat, 3120 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 13.9s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU10 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_transfer_YearnFinance(success_transfer_YearnFinanceBitToken0)itToken0) ==> ( <>(success_transfer_YearnFinanceBitToken0) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
